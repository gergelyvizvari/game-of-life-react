import { a as getAugmentedNamespace, c as commonjsGlobal, g as getDefaultExportFromCjs } from './_commonjsHelpers-24198af3.js';
import require$$7$1 from '@tailwindcss/oxide';
import require$$5 from 'lightningcss';

var libExports = {};
var lib$2 = {
  get exports(){ return libExports; },
  set exports(v){ libExports = v; },
};

var postcssPluginExports = {};
var postcssPlugin = {
  get exports(){ return postcssPluginExports; },
  set exports(v){ postcssPluginExports = v; },
};

var pluginExports = {};
var plugin = {
  get exports(){ return pluginExports; },
  set exports(v){ pluginExports = v; },
};

var setupTrackingContext = {};

const __viteBrowserExternal = {};

const __viteBrowserExternal$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: __viteBrowserExternal
}, Symbol.toStringTag, { value: 'Module' }));

const require$$3 = /*@__PURE__*/getAugmentedNamespace(__viteBrowserExternal$1);

var quickLru;
var hasRequiredQuickLru;

function requireQuickLru () {
	if (hasRequiredQuickLru) return quickLru;
	hasRequiredQuickLru = 1;

	class QuickLRU {
		constructor(options = {}) {
			if (!(options.maxSize && options.maxSize > 0)) {
				throw new TypeError('`maxSize` must be a number greater than 0');
			}

			this.maxSize = options.maxSize;
			this.onEviction = options.onEviction;
			this.cache = new Map();
			this.oldCache = new Map();
			this._size = 0;
		}

		_set(key, value) {
			this.cache.set(key, value);
			this._size++;

			if (this._size >= this.maxSize) {
				this._size = 0;

				if (typeof this.onEviction === 'function') {
					for (const [key, value] of this.oldCache.entries()) {
						this.onEviction(key, value);
					}
				}

				this.oldCache = this.cache;
				this.cache = new Map();
			}
		}

		get(key) {
			if (this.cache.has(key)) {
				return this.cache.get(key);
			}

			if (this.oldCache.has(key)) {
				const value = this.oldCache.get(key);
				this.oldCache.delete(key);
				this._set(key, value);
				return value;
			}
		}

		set(key, value) {
			if (this.cache.has(key)) {
				this.cache.set(key, value);
			} else {
				this._set(key, value);
			}

			return this;
		}

		has(key) {
			return this.cache.has(key) || this.oldCache.has(key);
		}

		peek(key) {
			if (this.cache.has(key)) {
				return this.cache.get(key);
			}

			if (this.oldCache.has(key)) {
				return this.oldCache.get(key);
			}
		}

		delete(key) {
			const deleted = this.cache.delete(key);
			if (deleted) {
				this._size--;
			}

			return this.oldCache.delete(key) || deleted;
		}

		clear() {
			this.cache.clear();
			this.oldCache.clear();
			this._size = 0;
		}

		* keys() {
			for (const [key] of this) {
				yield key;
			}
		}

		* values() {
			for (const [, value] of this) {
				yield value;
			}
		}

		* [Symbol.iterator]() {
			for (const item of this.cache) {
				yield item;
			}

			for (const item of this.oldCache) {
				const [key] = item;
				if (!this.cache.has(key)) {
					yield item;
				}
			}
		}

		get size() {
			let oldCacheSize = 0;
			for (const key of this.oldCache.keys()) {
				if (!this.cache.has(key)) {
					oldCacheSize++;
				}
			}

			return Math.min(this._size + oldCacheSize, this.maxSize);
		}
	}

	quickLru = QuickLRU;
	return quickLru;
}

var hashConfig = {};

function commonjsRequire(path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}

var object_hashExports = {};
var object_hash = {
  get exports(){ return object_hashExports; },
  set exports(v){ object_hashExports = v; },
};

var hasRequiredObject_hash;

function requireObject_hash () {
	if (hasRequiredObject_hash) return object_hashExports;
	hasRequiredObject_hash = 1;
	(function (module, exports) {
		!function(e){module.exports=e();}(function(){return function r(o,i,u){function s(n,e){if(!i[n]){if(!o[n]){var t="function"==typeof commonjsRequire&&commonjsRequire;if(!e&&t)return t(n,!0);if(a)return a(n,!0);throw new Error("Cannot find module '"+n+"'")}e=i[n]={exports:{}};o[n][0].call(e.exports,function(e){var t=o[n][1][e];return s(t||e)},e,e.exports,r,o,i,u);}return i[n].exports}for(var a="function"==typeof commonjsRequire&&commonjsRequire,e=0;e<u.length;e++)s(u[e]);return s}({1:[function(w,b,m){!function(e,n,s,c,d,h,p,g,y){var r=w("crypto");function t(e,t){t=u(e,t);var n;return void 0===(n="passthrough"!==t.algorithm?r.createHash(t.algorithm):new l).write&&(n.write=n.update,n.end=n.update),f(t,n).dispatch(e),n.update||n.end(""),n.digest?n.digest("buffer"===t.encoding?void 0:t.encoding):(e=n.read(),"buffer"!==t.encoding?e.toString(t.encoding):e)}(m=b.exports=t).sha1=function(e){return t(e)},m.keys=function(e){return t(e,{excludeValues:!0,algorithm:"sha1",encoding:"hex"})},m.MD5=function(e){return t(e,{algorithm:"md5",encoding:"hex"})},m.keysMD5=function(e){return t(e,{algorithm:"md5",encoding:"hex",excludeValues:!0})};var o=r.getHashes?r.getHashes().slice():["sha1","md5"],i=(o.push("passthrough"),["buffer","hex","binary","base64"]);function u(e,t){var n={};if(n.algorithm=(t=t||{}).algorithm||"sha1",n.encoding=t.encoding||"hex",n.excludeValues=!!t.excludeValues,n.algorithm=n.algorithm.toLowerCase(),n.encoding=n.encoding.toLowerCase(),n.ignoreUnknown=!0===t.ignoreUnknown,n.respectType=!1!==t.respectType,n.respectFunctionNames=!1!==t.respectFunctionNames,n.respectFunctionProperties=!1!==t.respectFunctionProperties,n.unorderedArrays=!0===t.unorderedArrays,n.unorderedSets=!1!==t.unorderedSets,n.unorderedObjects=!1!==t.unorderedObjects,n.replacer=t.replacer||void 0,n.excludeKeys=t.excludeKeys||void 0,void 0===e)throw new Error("Object argument required.");for(var r=0;r<o.length;++r)o[r].toLowerCase()===n.algorithm.toLowerCase()&&(n.algorithm=o[r]);if(-1===o.indexOf(n.algorithm))throw new Error('Algorithm "'+n.algorithm+'"  not supported. supported values: '+o.join(", "));if(-1===i.indexOf(n.encoding)&&"passthrough"!==n.algorithm)throw new Error('Encoding "'+n.encoding+'"  not supported. supported values: '+i.join(", "));return n}function a(e){if("function"==typeof e)return null!=/^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(e))}function f(o,t,i){i=i||[];function u(e){return t.update?t.update(e,"utf8"):t.write(e,"utf8")}return {dispatch:function(e){return this["_"+(null===(e=o.replacer?o.replacer(e):e)?"null":typeof e)](e)},_object:function(t){var n,e=Object.prototype.toString.call(t),r=/\[object (.*)\]/i.exec(e);r=(r=r?r[1]:"unknown:["+e+"]").toLowerCase();if(0<=(e=i.indexOf(t)))return this.dispatch("[CIRCULAR:"+e+"]");if(i.push(t),void 0!==s&&s.isBuffer&&s.isBuffer(t))return u("buffer:"),u(t);if("object"===r||"function"===r||"asyncfunction"===r)return e=Object.keys(t),o.unorderedObjects&&(e=e.sort()),!1===o.respectType||a(t)||e.splice(0,0,"prototype","__proto__","constructor"),o.excludeKeys&&(e=e.filter(function(e){return !o.excludeKeys(e)})),u("object:"+e.length+":"),n=this,e.forEach(function(e){n.dispatch(e),u(":"),o.excludeValues||n.dispatch(t[e]),u(",");});if(!this["_"+r]){if(o.ignoreUnknown)return u("["+r+"]");throw new Error('Unknown object type "'+r+'"')}this["_"+r](t);},_array:function(e,t){t=void 0!==t?t:!1!==o.unorderedArrays;var n=this;if(u("array:"+e.length+":"),!t||e.length<=1)return e.forEach(function(e){return n.dispatch(e)});var r=[],t=e.map(function(e){var t=new l,n=i.slice();return f(o,t,n).dispatch(e),r=r.concat(n.slice(i.length)),t.read().toString()});return i=i.concat(r),t.sort(),this._array(t,!1)},_date:function(e){return u("date:"+e.toJSON())},_symbol:function(e){return u("symbol:"+e.toString())},_error:function(e){return u("error:"+e.toString())},_boolean:function(e){return u("bool:"+e.toString())},_string:function(e){u("string:"+e.length+":"),u(e.toString());},_function:function(e){u("fn:"),a(e)?this.dispatch("[native]"):this.dispatch(e.toString()),!1!==o.respectFunctionNames&&this.dispatch("function-name:"+String(e.name)),o.respectFunctionProperties&&this._object(e);},_number:function(e){return u("number:"+e.toString())},_xml:function(e){return u("xml:"+e.toString())},_null:function(){return u("Null")},_undefined:function(){return u("Undefined")},_regexp:function(e){return u("regex:"+e.toString())},_uint8array:function(e){return u("uint8array:"),this.dispatch(Array.prototype.slice.call(e))},_uint8clampedarray:function(e){return u("uint8clampedarray:"),this.dispatch(Array.prototype.slice.call(e))},_int8array:function(e){return u("int8array:"),this.dispatch(Array.prototype.slice.call(e))},_uint16array:function(e){return u("uint16array:"),this.dispatch(Array.prototype.slice.call(e))},_int16array:function(e){return u("int16array:"),this.dispatch(Array.prototype.slice.call(e))},_uint32array:function(e){return u("uint32array:"),this.dispatch(Array.prototype.slice.call(e))},_int32array:function(e){return u("int32array:"),this.dispatch(Array.prototype.slice.call(e))},_float32array:function(e){return u("float32array:"),this.dispatch(Array.prototype.slice.call(e))},_float64array:function(e){return u("float64array:"),this.dispatch(Array.prototype.slice.call(e))},_arraybuffer:function(e){return u("arraybuffer:"),this.dispatch(new Uint8Array(e))},_url:function(e){return u("url:"+e.toString())},_map:function(e){u("map:");e=Array.from(e);return this._array(e,!1!==o.unorderedSets)},_set:function(e){u("set:");e=Array.from(e);return this._array(e,!1!==o.unorderedSets)},_file:function(e){return u("file:"),this.dispatch([e.name,e.size,e.type,e.lastModfied])},_blob:function(){if(o.ignoreUnknown)return u("[blob]");throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n')},_domwindow:function(){return u("domwindow")},_bigint:function(e){return u("bigint:"+e.toString())},_process:function(){return u("process")},_timer:function(){return u("timer")},_pipe:function(){return u("pipe")},_tcp:function(){return u("tcp")},_udp:function(){return u("udp")},_tty:function(){return u("tty")},_statwatcher:function(){return u("statwatcher")},_securecontext:function(){return u("securecontext")},_connection:function(){return u("connection")},_zlib:function(){return u("zlib")},_context:function(){return u("context")},_nodescript:function(){return u("nodescript")},_httpparser:function(){return u("httpparser")},_dataview:function(){return u("dataview")},_signal:function(){return u("signal")},_fsevent:function(){return u("fsevent")},_tlswrap:function(){return u("tlswrap")}}}function l(){return {buf:"",write:function(e){this.buf+=e;},end:function(e){this.buf+=e;},read:function(){return this.buf}}}m.writeToStream=function(e,t,n){return void 0===n&&(n=t,t={}),f(t=u(e,t),n).dispatch(e)};}.call(this,w("lYpoI2"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},w("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/fake_9a5aa49d.js","/");},{buffer:3,crypto:5,lYpoI2:11}],2:[function(e,t,f){!function(e,t,n,r,o,i,u,s,a){!function(e){var a="undefined"!=typeof Uint8Array?Uint8Array:Array,t="+".charCodeAt(0),n="/".charCodeAt(0),r="0".charCodeAt(0),o="a".charCodeAt(0),i="A".charCodeAt(0),u="-".charCodeAt(0),s="_".charCodeAt(0);function f(e){e=e.charCodeAt(0);return e===t||e===u?62:e===n||e===s?63:e<r?-1:e<r+10?e-r+26+26:e<i+26?e-i:e<o+26?e-o+26:void 0}e.toByteArray=function(e){var t,n;if(0<e.length%4)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.length,r="="===e.charAt(r-2)?2:"="===e.charAt(r-1)?1:0,o=new a(3*e.length/4-r),i=0<r?e.length-4:e.length,u=0;function s(e){o[u++]=e;}for(t=0;t<i;t+=4,0)s((16711680&(n=f(e.charAt(t))<<18|f(e.charAt(t+1))<<12|f(e.charAt(t+2))<<6|f(e.charAt(t+3))))>>16),s((65280&n)>>8),s(255&n);return 2==r?s(255&(n=f(e.charAt(t))<<2|f(e.charAt(t+1))>>4)):1==r&&(s((n=f(e.charAt(t))<<10|f(e.charAt(t+1))<<4|f(e.charAt(t+2))>>2)>>8&255),s(255&n)),o},e.fromByteArray=function(e){var t,n,r,o,i=e.length%3,u="";function s(e){return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)}for(t=0,r=e.length-i;t<r;t+=3)n=(e[t]<<16)+(e[t+1]<<8)+e[t+2],u+=s((o=n)>>18&63)+s(o>>12&63)+s(o>>6&63)+s(63&o);switch(i){case 1:u=(u+=s((n=e[e.length-1])>>2))+s(n<<4&63)+"==";break;case 2:u=(u=(u+=s((n=(e[e.length-2]<<8)+e[e.length-1])>>10))+s(n>>4&63))+s(n<<2&63)+"=";}return u};}(void 0===f?this.base64js={}:f);}.call(this,e("lYpoI2"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/base64-js/lib/b64.js","/node_modules/gulp-browserify/node_modules/base64-js/lib");},{buffer:3,lYpoI2:11}],3:[function(O,e,H){!function(e,n,f,r,h,p,g,y,w){var a=O("base64-js"),i=O("ieee754");function f(e,t,n){if(!(this instanceof f))return new f(e,t,n);var r,o,i,u,s=typeof e;if("base64"===t&&"string"==s)for(e=(u=e).trim?u.trim():u.replace(/^\s+|\s+$/g,"");e.length%4!=0;)e+="=";if("number"==s)r=j(e);else if("string"==s)r=f.byteLength(e,t);else {if("object"!=s)throw new Error("First argument needs to be a number, array or string.");r=j(e.length);}if(f._useTypedArrays?o=f._augment(new Uint8Array(r)):((o=this).length=r,o._isBuffer=!0),f._useTypedArrays&&"number"==typeof e.byteLength)o._set(e);else if(C(u=e)||f.isBuffer(u)||u&&"object"==typeof u&&"number"==typeof u.length)for(i=0;i<r;i++)f.isBuffer(e)?o[i]=e.readUInt8(i):o[i]=e[i];else if("string"==s)o.write(e,0,t);else if("number"==s&&!f._useTypedArrays&&!n)for(i=0;i<r;i++)o[i]=0;return o}function b(e,t,n,r){return f._charsWritten=c(function(e){for(var t=[],n=0;n<e.length;n++)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function m(e,t,n,r){return f._charsWritten=c(function(e){for(var t,n,r=[],o=0;o<e.length;o++)n=e.charCodeAt(o),t=n>>8,n=n%256,r.push(n),r.push(t);return r}(t),e,n,r)}function v(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;o++)r+=String.fromCharCode(e[o]);return r}function o(e,t,n,r){r||(d("boolean"==typeof n,"missing or invalid endian"),d(null!=t,"missing offset"),d(t+1<e.length,"Trying to read beyond buffer length"));var o,r=e.length;if(!(r<=t))return n?(o=e[t],t+1<r&&(o|=e[t+1]<<8)):(o=e[t]<<8,t+1<r&&(o|=e[t+1])),o}function u(e,t,n,r){r||(d("boolean"==typeof n,"missing or invalid endian"),d(null!=t,"missing offset"),d(t+3<e.length,"Trying to read beyond buffer length"));var o,r=e.length;if(!(r<=t))return n?(t+2<r&&(o=e[t+2]<<16),t+1<r&&(o|=e[t+1]<<8),o|=e[t],t+3<r&&(o+=e[t+3]<<24>>>0)):(t+1<r&&(o=e[t+1]<<16),t+2<r&&(o|=e[t+2]<<8),t+3<r&&(o|=e[t+3]),o+=e[t]<<24>>>0),o}function _(e,t,n,r){if(r||(d("boolean"==typeof n,"missing or invalid endian"),d(null!=t,"missing offset"),d(t+1<e.length,"Trying to read beyond buffer length")),!(e.length<=t))return r=o(e,t,n,!0),32768&r?-1*(65535-r+1):r}function E(e,t,n,r){if(r||(d("boolean"==typeof n,"missing or invalid endian"),d(null!=t,"missing offset"),d(t+3<e.length,"Trying to read beyond buffer length")),!(e.length<=t))return r=u(e,t,n,!0),2147483648&r?-1*(4294967295-r+1):r}function I(e,t,n,r){return r||(d("boolean"==typeof n,"missing or invalid endian"),d(t+3<e.length,"Trying to read beyond buffer length")),i.read(e,t,n,23,4)}function A(e,t,n,r){return r||(d("boolean"==typeof n,"missing or invalid endian"),d(t+7<e.length,"Trying to read beyond buffer length")),i.read(e,t,n,52,8)}function s(e,t,n,r,o){o||(d(null!=t,"missing value"),d("boolean"==typeof r,"missing or invalid endian"),d(null!=n,"missing offset"),d(n+1<e.length,"trying to write beyond buffer length"),Y(t,65535));o=e.length;if(!(o<=n))for(var i=0,u=Math.min(o-n,2);i<u;i++)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i);}function l(e,t,n,r,o){o||(d(null!=t,"missing value"),d("boolean"==typeof r,"missing or invalid endian"),d(null!=n,"missing offset"),d(n+3<e.length,"trying to write beyond buffer length"),Y(t,4294967295));o=e.length;if(!(o<=n))for(var i=0,u=Math.min(o-n,4);i<u;i++)e[n+i]=t>>>8*(r?i:3-i)&255;}function B(e,t,n,r,o){o||(d(null!=t,"missing value"),d("boolean"==typeof r,"missing or invalid endian"),d(null!=n,"missing offset"),d(n+1<e.length,"Trying to write beyond buffer length"),F(t,32767,-32768)),e.length<=n||s(e,0<=t?t:65535+t+1,n,r,o);}function L(e,t,n,r,o){o||(d(null!=t,"missing value"),d("boolean"==typeof r,"missing or invalid endian"),d(null!=n,"missing offset"),d(n+3<e.length,"Trying to write beyond buffer length"),F(t,2147483647,-2147483648)),e.length<=n||l(e,0<=t?t:4294967295+t+1,n,r,o);}function U(e,t,n,r,o){o||(d(null!=t,"missing value"),d("boolean"==typeof r,"missing or invalid endian"),d(null!=n,"missing offset"),d(n+3<e.length,"Trying to write beyond buffer length"),D(t,34028234663852886e22,-34028234663852886e22)),e.length<=n||i.write(e,t,n,r,23,4);}function x(e,t,n,r,o){o||(d(null!=t,"missing value"),d("boolean"==typeof r,"missing or invalid endian"),d(null!=n,"missing offset"),d(n+7<e.length,"Trying to write beyond buffer length"),D(t,17976931348623157e292,-17976931348623157e292)),e.length<=n||i.write(e,t,n,r,52,8);}H.Buffer=f,H.SlowBuffer=f,H.INSPECT_MAX_BYTES=50,f.poolSize=8192,f._useTypedArrays=function(){try{var e=new ArrayBuffer(0),t=new Uint8Array(e);return t.foo=function(){return 42},42===t.foo()&&"function"==typeof t.subarray}catch(e){return !1}}(),f.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"raw":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return !0;default:return !1}},f.isBuffer=function(e){return !(null==e||!e._isBuffer)},f.byteLength=function(e,t){var n;switch(e+="",t||"utf8"){case"hex":n=e.length/2;break;case"utf8":case"utf-8":n=T(e).length;break;case"ascii":case"binary":case"raw":n=e.length;break;case"base64":n=M(e).length;break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":n=2*e.length;break;default:throw new Error("Unknown encoding")}return n},f.concat=function(e,t){if(d(C(e),"Usage: Buffer.concat(list, [totalLength])\nlist should be an Array."),0===e.length)return new f(0);if(1===e.length)return e[0];if("number"!=typeof t)for(o=t=0;o<e.length;o++)t+=e[o].length;for(var n=new f(t),r=0,o=0;o<e.length;o++){var i=e[o];i.copy(n,r),r+=i.length;}return n},f.prototype.write=function(e,t,n,r){isFinite(t)?isFinite(n)||(r=n,n=void 0):(a=r,r=t,t=n,n=a),t=Number(t)||0;var o,i,u,s,a=this.length-t;switch((!n||a<(n=Number(n)))&&(n=a),r=String(r||"utf8").toLowerCase()){case"hex":o=function(e,t,n,r){n=Number(n)||0;var o=e.length-n;(!r||o<(r=Number(r)))&&(r=o),d((o=t.length)%2==0,"Invalid hex string"),o/2<r&&(r=o/2);for(var i=0;i<r;i++){var u=parseInt(t.substr(2*i,2),16);d(!isNaN(u),"Invalid hex string"),e[n+i]=u;}return f._charsWritten=2*i,i}(this,e,t,n);break;case"utf8":case"utf-8":i=this,u=t,s=n,o=f._charsWritten=c(T(e),i,u,s);break;case"ascii":case"binary":o=b(this,e,t,n);break;case"base64":i=this,u=t,s=n,o=f._charsWritten=c(M(e),i,u,s);break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":o=m(this,e,t,n);break;default:throw new Error("Unknown encoding")}return o},f.prototype.toString=function(e,t,n){var r,o,i,u,s=this;if(e=String(e||"utf8").toLowerCase(),t=Number(t)||0,(n=void 0!==n?Number(n):s.length)===t)return "";switch(e){case"hex":r=function(e,t,n){var r=e.length;(!t||t<0)&&(t=0);(!n||n<0||r<n)&&(n=r);for(var o="",i=t;i<n;i++)o+=k(e[i]);return o}(s,t,n);break;case"utf8":case"utf-8":r=function(e,t,n){var r="",o="";n=Math.min(e.length,n);for(var i=t;i<n;i++)e[i]<=127?(r+=N(o)+String.fromCharCode(e[i]),o=""):o+="%"+e[i].toString(16);return r+N(o)}(s,t,n);break;case"ascii":case"binary":r=v(s,t,n);break;case"base64":o=s,u=n,r=0===(i=t)&&u===o.length?a.fromByteArray(o):a.fromByteArray(o.slice(i,u));break;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":r=function(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}(s,t,n);break;default:throw new Error("Unknown encoding")}return r},f.prototype.toJSON=function(){return {type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},f.prototype.copy=function(e,t,n,r){if(t=t||0,(r=r||0===r?r:this.length)!==(n=n||0)&&0!==e.length&&0!==this.length){d(n<=r,"sourceEnd < sourceStart"),d(0<=t&&t<e.length,"targetStart out of bounds"),d(0<=n&&n<this.length,"sourceStart out of bounds"),d(0<=r&&r<=this.length,"sourceEnd out of bounds"),r>this.length&&(r=this.length);var o=(r=e.length-t<r-n?e.length-t+n:r)-n;if(o<100||!f._useTypedArrays)for(var i=0;i<o;i++)e[i+t]=this[i+n];else e._set(this.subarray(n,n+o),t);}},f.prototype.slice=function(e,t){var n=this.length;if(e=S(e,n,0),t=S(t,n,n),f._useTypedArrays)return f._augment(this.subarray(e,t));for(var r=t-e,o=new f(r,void 0,!0),i=0;i<r;i++)o[i]=this[i+e];return o},f.prototype.get=function(e){return console.log(".get() is deprecated. Access using array indexes instead."),this.readUInt8(e)},f.prototype.set=function(e,t){return console.log(".set() is deprecated. Access using array indexes instead."),this.writeUInt8(e,t)},f.prototype.readUInt8=function(e,t){if(t||(d(null!=e,"missing offset"),d(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length))return this[e]},f.prototype.readUInt16LE=function(e,t){return o(this,e,!0,t)},f.prototype.readUInt16BE=function(e,t){return o(this,e,!1,t)},f.prototype.readUInt32LE=function(e,t){return u(this,e,!0,t)},f.prototype.readUInt32BE=function(e,t){return u(this,e,!1,t)},f.prototype.readInt8=function(e,t){if(t||(d(null!=e,"missing offset"),d(e<this.length,"Trying to read beyond buffer length")),!(e>=this.length))return 128&this[e]?-1*(255-this[e]+1):this[e]},f.prototype.readInt16LE=function(e,t){return _(this,e,!0,t)},f.prototype.readInt16BE=function(e,t){return _(this,e,!1,t)},f.prototype.readInt32LE=function(e,t){return E(this,e,!0,t)},f.prototype.readInt32BE=function(e,t){return E(this,e,!1,t)},f.prototype.readFloatLE=function(e,t){return I(this,e,!0,t)},f.prototype.readFloatBE=function(e,t){return I(this,e,!1,t)},f.prototype.readDoubleLE=function(e,t){return A(this,e,!0,t)},f.prototype.readDoubleBE=function(e,t){return A(this,e,!1,t)},f.prototype.writeUInt8=function(e,t,n){n||(d(null!=e,"missing value"),d(null!=t,"missing offset"),d(t<this.length,"trying to write beyond buffer length"),Y(e,255)),t>=this.length||(this[t]=e);},f.prototype.writeUInt16LE=function(e,t,n){s(this,e,t,!0,n);},f.prototype.writeUInt16BE=function(e,t,n){s(this,e,t,!1,n);},f.prototype.writeUInt32LE=function(e,t,n){l(this,e,t,!0,n);},f.prototype.writeUInt32BE=function(e,t,n){l(this,e,t,!1,n);},f.prototype.writeInt8=function(e,t,n){n||(d(null!=e,"missing value"),d(null!=t,"missing offset"),d(t<this.length,"Trying to write beyond buffer length"),F(e,127,-128)),t>=this.length||(0<=e?this.writeUInt8(e,t,n):this.writeUInt8(255+e+1,t,n));},f.prototype.writeInt16LE=function(e,t,n){B(this,e,t,!0,n);},f.prototype.writeInt16BE=function(e,t,n){B(this,e,t,!1,n);},f.prototype.writeInt32LE=function(e,t,n){L(this,e,t,!0,n);},f.prototype.writeInt32BE=function(e,t,n){L(this,e,t,!1,n);},f.prototype.writeFloatLE=function(e,t,n){U(this,e,t,!0,n);},f.prototype.writeFloatBE=function(e,t,n){U(this,e,t,!1,n);},f.prototype.writeDoubleLE=function(e,t,n){x(this,e,t,!0,n);},f.prototype.writeDoubleBE=function(e,t,n){x(this,e,t,!1,n);},f.prototype.fill=function(e,t,n){if(t=t||0,n=n||this.length,d("number"==typeof(e="string"==typeof(e=e||0)?e.charCodeAt(0):e)&&!isNaN(e),"value is not a number"),d(t<=n,"end < start"),n!==t&&0!==this.length){d(0<=t&&t<this.length,"start out of bounds"),d(0<=n&&n<=this.length,"end out of bounds");for(var r=t;r<n;r++)this[r]=e;}},f.prototype.inspect=function(){for(var e=[],t=this.length,n=0;n<t;n++)if(e[n]=k(this[n]),n===H.INSPECT_MAX_BYTES){e[n+1]="...";break}return "<Buffer "+e.join(" ")+">"},f.prototype.toArrayBuffer=function(){if("undefined"==typeof Uint8Array)throw new Error("Buffer.toArrayBuffer not supported in this browser");if(f._useTypedArrays)return new f(this).buffer;for(var e=new Uint8Array(this.length),t=0,n=e.length;t<n;t+=1)e[t]=this[t];return e.buffer};var t=f.prototype;function S(e,t,n){return "number"!=typeof e?n:t<=(e=~~e)?t:0<=e||0<=(e+=t)?e:0}function j(e){return (e=~~Math.ceil(+e))<0?0:e}function C(e){return (Array.isArray||function(e){return "[object Array]"===Object.prototype.toString.call(e)})(e)}function k(e){return e<16?"0"+e.toString(16):e.toString(16)}function T(e){for(var t=[],n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<=127)t.push(e.charCodeAt(n));else for(var o=n,i=(55296<=r&&r<=57343&&n++,encodeURIComponent(e.slice(o,n+1)).substr(1).split("%")),u=0;u<i.length;u++)t.push(parseInt(i[u],16));}return t}function M(e){return a.toByteArray(e)}function c(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);o++)t[o+n]=e[o];return o}function N(e){try{return decodeURIComponent(e)}catch(e){return String.fromCharCode(65533)}}function Y(e,t){d("number"==typeof e,"cannot write a non-number as a number"),d(0<=e,"specified a negative value for writing an unsigned value"),d(e<=t,"value is larger than maximum value for type"),d(Math.floor(e)===e,"value has a fractional component");}function F(e,t,n){d("number"==typeof e,"cannot write a non-number as a number"),d(e<=t,"value larger than maximum allowed value"),d(n<=e,"value smaller than minimum allowed value"),d(Math.floor(e)===e,"value has a fractional component");}function D(e,t,n){d("number"==typeof e,"cannot write a non-number as a number"),d(e<=t,"value larger than maximum allowed value"),d(n<=e,"value smaller than minimum allowed value");}function d(e,t){if(!e)throw new Error(t||"Failed assertion")}f._augment=function(e){return e._isBuffer=!0,e._get=e.get,e._set=e.set,e.get=t.get,e.set=t.set,e.write=t.write,e.toString=t.toString,e.toLocaleString=t.toString,e.toJSON=t.toJSON,e.copy=t.copy,e.slice=t.slice,e.readUInt8=t.readUInt8,e.readUInt16LE=t.readUInt16LE,e.readUInt16BE=t.readUInt16BE,e.readUInt32LE=t.readUInt32LE,e.readUInt32BE=t.readUInt32BE,e.readInt8=t.readInt8,e.readInt16LE=t.readInt16LE,e.readInt16BE=t.readInt16BE,e.readInt32LE=t.readInt32LE,e.readInt32BE=t.readInt32BE,e.readFloatLE=t.readFloatLE,e.readFloatBE=t.readFloatBE,e.readDoubleLE=t.readDoubleLE,e.readDoubleBE=t.readDoubleBE,e.writeUInt8=t.writeUInt8,e.writeUInt16LE=t.writeUInt16LE,e.writeUInt16BE=t.writeUInt16BE,e.writeUInt32LE=t.writeUInt32LE,e.writeUInt32BE=t.writeUInt32BE,e.writeInt8=t.writeInt8,e.writeInt16LE=t.writeInt16LE,e.writeInt16BE=t.writeInt16BE,e.writeInt32LE=t.writeInt32LE,e.writeInt32BE=t.writeInt32BE,e.writeFloatLE=t.writeFloatLE,e.writeFloatBE=t.writeFloatBE,e.writeDoubleLE=t.writeDoubleLE,e.writeDoubleBE=t.writeDoubleBE,e.fill=t.fill,e.inspect=t.inspect,e.toArrayBuffer=t.toArrayBuffer,e};}.call(this,O("lYpoI2"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},O("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/buffer/index.js","/node_modules/gulp-browserify/node_modules/buffer");},{"base64-js":2,buffer:3,ieee754:10,lYpoI2:11}],4:[function(c,d,e){!function(e,t,a,n,r,o,i,u,s){var a=c("buffer").Buffer,f=4,l=new a(f);l.fill(0);d.exports={hash:function(e,t,n,r){for(var o=t(function(e,t){e.length%f!=0&&(n=e.length+(f-e.length%f),e=a.concat([e,l],n));for(var n,r=[],o=t?e.readInt32BE:e.readInt32LE,i=0;i<e.length;i+=f)r.push(o.call(e,i));return r}(e=a.isBuffer(e)?e:new a(e),r),8*e.length),t=r,i=new a(n),u=t?i.writeInt32BE:i.writeInt32LE,s=0;s<o.length;s++)u.call(i,o[s],4*s,!0);return i}};}.call(this,c("lYpoI2"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},c("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/crypto-browserify/helpers.js","/node_modules/gulp-browserify/node_modules/crypto-browserify");},{buffer:3,lYpoI2:11}],5:[function(v,e,_){!function(l,c,u,d,h,p,g,y,w){var u=v("buffer").Buffer,e=v("./sha"),t=v("./sha256"),n=v("./rng"),b={sha1:e,sha256:t,md5:v("./md5")},s=64,a=new u(s);function r(e,n){var r=b[e=e||"sha1"],o=[];return r||i("algorithm:",e,"is not yet supported"),{update:function(e){return u.isBuffer(e)||(e=new u(e)),o.push(e),e.length,this},digest:function(e){var t=u.concat(o),t=n?function(e,t,n){u.isBuffer(t)||(t=new u(t)),u.isBuffer(n)||(n=new u(n)),t.length>s?t=e(t):t.length<s&&(t=u.concat([t,a],s));for(var r=new u(s),o=new u(s),i=0;i<s;i++)r[i]=54^t[i],o[i]=92^t[i];return n=e(u.concat([r,n])),e(u.concat([o,n]))}(r,n,t):r(t);return o=null,e?t.toString(e):t}}}function i(){var e=[].slice.call(arguments).join(" ");throw new Error([e,"we accept pull requests","http://github.com/dominictarr/crypto-browserify"].join("\n"))}a.fill(0),_.createHash=function(e){return r(e)},_.createHmac=r,_.randomBytes=function(e,t){if(!t||!t.call)return new u(n(e));try{t.call(this,void 0,new u(n(e)));}catch(e){t(e);}};var o,f=["createCredentials","createCipher","createCipheriv","createDecipher","createDecipheriv","createSign","createVerify","createDiffieHellman","pbkdf2"],m=function(e){_[e]=function(){i("sorry,",e,"is not implemented yet");};};for(o in f)m(f[o]);}.call(this,v("lYpoI2"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},v("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/crypto-browserify/index.js","/node_modules/gulp-browserify/node_modules/crypto-browserify");},{"./md5":6,"./rng":7,"./sha":8,"./sha256":9,buffer:3,lYpoI2:11}],6:[function(w,b,e){!function(e,r,o,i,u,a,f,l,y){var t=w("./helpers");function n(e,t){e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;for(var n=1732584193,r=-271733879,o=-1732584194,i=271733878,u=0;u<e.length;u+=16){var s=n,a=r,f=o,l=i,n=c(n,r,o,i,e[u+0],7,-680876936),i=c(i,n,r,o,e[u+1],12,-389564586),o=c(o,i,n,r,e[u+2],17,606105819),r=c(r,o,i,n,e[u+3],22,-1044525330);n=c(n,r,o,i,e[u+4],7,-176418897),i=c(i,n,r,o,e[u+5],12,1200080426),o=c(o,i,n,r,e[u+6],17,-1473231341),r=c(r,o,i,n,e[u+7],22,-45705983),n=c(n,r,o,i,e[u+8],7,1770035416),i=c(i,n,r,o,e[u+9],12,-1958414417),o=c(o,i,n,r,e[u+10],17,-42063),r=c(r,o,i,n,e[u+11],22,-1990404162),n=c(n,r,o,i,e[u+12],7,1804603682),i=c(i,n,r,o,e[u+13],12,-40341101),o=c(o,i,n,r,e[u+14],17,-1502002290),n=d(n,r=c(r,o,i,n,e[u+15],22,1236535329),o,i,e[u+1],5,-165796510),i=d(i,n,r,o,e[u+6],9,-1069501632),o=d(o,i,n,r,e[u+11],14,643717713),r=d(r,o,i,n,e[u+0],20,-373897302),n=d(n,r,o,i,e[u+5],5,-701558691),i=d(i,n,r,o,e[u+10],9,38016083),o=d(o,i,n,r,e[u+15],14,-660478335),r=d(r,o,i,n,e[u+4],20,-405537848),n=d(n,r,o,i,e[u+9],5,568446438),i=d(i,n,r,o,e[u+14],9,-1019803690),o=d(o,i,n,r,e[u+3],14,-187363961),r=d(r,o,i,n,e[u+8],20,1163531501),n=d(n,r,o,i,e[u+13],5,-1444681467),i=d(i,n,r,o,e[u+2],9,-51403784),o=d(o,i,n,r,e[u+7],14,1735328473),n=h(n,r=d(r,o,i,n,e[u+12],20,-1926607734),o,i,e[u+5],4,-378558),i=h(i,n,r,o,e[u+8],11,-2022574463),o=h(o,i,n,r,e[u+11],16,1839030562),r=h(r,o,i,n,e[u+14],23,-35309556),n=h(n,r,o,i,e[u+1],4,-1530992060),i=h(i,n,r,o,e[u+4],11,1272893353),o=h(o,i,n,r,e[u+7],16,-155497632),r=h(r,o,i,n,e[u+10],23,-1094730640),n=h(n,r,o,i,e[u+13],4,681279174),i=h(i,n,r,o,e[u+0],11,-358537222),o=h(o,i,n,r,e[u+3],16,-722521979),r=h(r,o,i,n,e[u+6],23,76029189),n=h(n,r,o,i,e[u+9],4,-640364487),i=h(i,n,r,o,e[u+12],11,-421815835),o=h(o,i,n,r,e[u+15],16,530742520),n=p(n,r=h(r,o,i,n,e[u+2],23,-995338651),o,i,e[u+0],6,-198630844),i=p(i,n,r,o,e[u+7],10,1126891415),o=p(o,i,n,r,e[u+14],15,-1416354905),r=p(r,o,i,n,e[u+5],21,-57434055),n=p(n,r,o,i,e[u+12],6,1700485571),i=p(i,n,r,o,e[u+3],10,-1894986606),o=p(o,i,n,r,e[u+10],15,-1051523),r=p(r,o,i,n,e[u+1],21,-2054922799),n=p(n,r,o,i,e[u+8],6,1873313359),i=p(i,n,r,o,e[u+15],10,-30611744),o=p(o,i,n,r,e[u+6],15,-1560198380),r=p(r,o,i,n,e[u+13],21,1309151649),n=p(n,r,o,i,e[u+4],6,-145523070),i=p(i,n,r,o,e[u+11],10,-1120210379),o=p(o,i,n,r,e[u+2],15,718787259),r=p(r,o,i,n,e[u+9],21,-343485551),n=g(n,s),r=g(r,a),o=g(o,f),i=g(i,l);}return Array(n,r,o,i)}function s(e,t,n,r,o,i){return g((t=g(g(t,e),g(r,i)))<<o|t>>>32-o,n)}function c(e,t,n,r,o,i,u){return s(t&n|~t&r,e,t,o,i,u)}function d(e,t,n,r,o,i,u){return s(t&r|n&~r,e,t,o,i,u)}function h(e,t,n,r,o,i,u){return s(t^n^r,e,t,o,i,u)}function p(e,t,n,r,o,i,u){return s(n^(t|~r),e,t,o,i,u)}function g(e,t){var n=(65535&e)+(65535&t);return (e>>16)+(t>>16)+(n>>16)<<16|65535&n}b.exports=function(e){return t.hash(e,n,16)};}.call(this,w("lYpoI2"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},w("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/crypto-browserify/md5.js","/node_modules/gulp-browserify/node_modules/crypto-browserify");},{"./helpers":4,buffer:3,lYpoI2:11}],7:[function(e,l,t){!function(e,t,n,r,o,i,u,s,f){l.exports=function(e){for(var t,n=new Array(e),r=0;r<e;r++)0==(3&r)&&(t=4294967296*Math.random()),n[r]=t>>>((3&r)<<3)&255;return n};}.call(this,e("lYpoI2"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/crypto-browserify/rng.js","/node_modules/gulp-browserify/node_modules/crypto-browserify");},{buffer:3,lYpoI2:11}],8:[function(c,d,e){!function(e,t,n,r,o,s,a,f,l){var i=c("./helpers");function u(l,c){l[c>>5]|=128<<24-c%32,l[15+(c+64>>9<<4)]=c;for(var e,t,n,r=Array(80),o=1732584193,i=-271733879,u=-1732584194,s=271733878,d=-1009589776,h=0;h<l.length;h+=16){for(var p=o,g=i,y=u,w=s,b=d,a=0;a<80;a++){r[a]=a<16?l[h+a]:v(r[a-3]^r[a-8]^r[a-14]^r[a-16],1);var f=m(m(v(o,5),(f=i,t=u,n=s,(e=a)<20?f&t|~f&n:!(e<40)&&e<60?f&t|f&n|t&n:f^t^n)),m(m(d,r[a]),(e=a)<20?1518500249:e<40?1859775393:e<60?-1894007588:-899497514)),d=s,s=u,u=v(i,30),i=o,o=f;}o=m(o,p),i=m(i,g),u=m(u,y),s=m(s,w),d=m(d,b);}return Array(o,i,u,s,d)}function m(e,t){var n=(65535&e)+(65535&t);return (e>>16)+(t>>16)+(n>>16)<<16|65535&n}function v(e,t){return e<<t|e>>>32-t}d.exports=function(e){return i.hash(e,u,20,!0)};}.call(this,c("lYpoI2"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},c("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/crypto-browserify/sha.js","/node_modules/gulp-browserify/node_modules/crypto-browserify");},{"./helpers":4,buffer:3,lYpoI2:11}],9:[function(c,d,e){!function(e,t,n,r,u,s,a,f,l){function b(e,t){var n=(65535&e)+(65535&t);return (e>>16)+(t>>16)+(n>>16)<<16|65535&n}function o(e,l){var c,d=new Array(1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298),t=new Array(1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225),n=new Array(64);e[l>>5]|=128<<24-l%32,e[15+(l+64>>9<<4)]=l;for(var r,o,h=0;h<e.length;h+=16){for(var i=t[0],u=t[1],s=t[2],p=t[3],a=t[4],g=t[5],y=t[6],w=t[7],f=0;f<64;f++)n[f]=f<16?e[f+h]:b(b(b((o=n[f-2],m(o,17)^m(o,19)^v(o,10)),n[f-7]),(o=n[f-15],m(o,7)^m(o,18)^v(o,3))),n[f-16]),c=b(b(b(b(w,m(o=a,6)^m(o,11)^m(o,25)),a&g^~a&y),d[f]),n[f]),r=b(m(r=i,2)^m(r,13)^m(r,22),i&u^i&s^u&s),w=y,y=g,g=a,a=b(p,c),p=s,s=u,u=i,i=b(c,r);t[0]=b(i,t[0]),t[1]=b(u,t[1]),t[2]=b(s,t[2]),t[3]=b(p,t[3]),t[4]=b(a,t[4]),t[5]=b(g,t[5]),t[6]=b(y,t[6]),t[7]=b(w,t[7]);}return t}var i=c("./helpers"),m=function(e,t){return e>>>t|e<<32-t},v=function(e,t){return e>>>t};d.exports=function(e){return i.hash(e,o,32,!0)};}.call(this,c("lYpoI2"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},c("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/crypto-browserify/sha256.js","/node_modules/gulp-browserify/node_modules/crypto-browserify");},{"./helpers":4,buffer:3,lYpoI2:11}],10:[function(e,t,f){!function(e,t,n,r,o,i,u,s,a){f.read=function(e,t,n,r,o){var i,u,l=8*o-r-1,c=(1<<l)-1,d=c>>1,s=-7,a=n?o-1:0,f=n?-1:1,o=e[t+a];for(a+=f,i=o&(1<<-s)-1,o>>=-s,s+=l;0<s;i=256*i+e[t+a],a+=f,s-=8);for(u=i&(1<<-s)-1,i>>=-s,s+=r;0<s;u=256*u+e[t+a],a+=f,s-=8);if(0===i)i=1-d;else {if(i===c)return u?NaN:1/0*(o?-1:1);u+=Math.pow(2,r),i-=d;}return (o?-1:1)*u*Math.pow(2,i-r)},f.write=function(e,t,l,n,r,c){var o,i,u=8*c-r-1,s=(1<<u)-1,a=s>>1,d=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:c-1,h=n?1:-1,c=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(i=isNaN(t)?1:0,o=s):(o=Math.floor(Math.log(t)/Math.LN2),t*(n=Math.pow(2,-o))<1&&(o--,n*=2),2<=(t+=1<=o+a?d/n:d*Math.pow(2,1-a))*n&&(o++,n/=2),s<=o+a?(i=0,o=s):1<=o+a?(i=(t*n-1)*Math.pow(2,r),o+=a):(i=t*Math.pow(2,a-1)*Math.pow(2,r),o=0));8<=r;e[l+f]=255&i,f+=h,i/=256,r-=8);for(o=o<<r|i,u+=r;0<u;e[l+f]=255&o,f+=h,o/=256,u-=8);e[l+f-h]|=128*c;};}.call(this,e("lYpoI2"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/ieee754/index.js","/node_modules/gulp-browserify/node_modules/ieee754");},{buffer:3,lYpoI2:11}],11:[function(e,h,t){!function(e,t,n,r,o,f,l,c,d){var i,u,s;function a(){}(e=h.exports={}).nextTick=(u="undefined"!=typeof window&&window.setImmediate,s="undefined"!=typeof window&&window.postMessage&&window.addEventListener,u?function(e){return window.setImmediate(e)}:s?(i=[],window.addEventListener("message",function(e){var t=e.source;t!==window&&null!==t||"process-tick"!==e.data||(e.stopPropagation(),0<i.length&&i.shift()());},!0),function(e){i.push(e),window.postMessage("process-tick","*");}):function(e){setTimeout(e,0);}),e.title="browser",e.browser=!0,e.env={},e.argv=[],e.on=a,e.addListener=a,e.once=a,e.off=a,e.removeListener=a,e.removeAllListeners=a,e.emit=a,e.binding=function(e){throw new Error("process.binding is not supported")},e.cwd=function(){return "/"},e.chdir=function(e){throw new Error("process.chdir is not supported")};}.call(this,e("lYpoI2"),"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},e("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/node_modules/gulp-browserify/node_modules/process/browser.js","/node_modules/gulp-browserify/node_modules/process");},{buffer:3,lYpoI2:11}]},{},[1])(1)});
} (object_hash));
	return object_hashExports;
}

var hasRequiredHashConfig;

function requireHashConfig () {
	if (hasRequiredHashConfig) return hashConfig;
	hasRequiredHashConfig = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>hashConfig
		});
		const _objectHash = /*#__PURE__*/ _interopRequireDefault(requireObject_hash());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function hashConfig(config) {
		    return (0, _objectHash.default)(config, {
		        ignoreUnknown: true
		    });
		}
} (hashConfig));
	return hashConfig;
}

var resolveConfig$1 = {};

var resolveConfig = {};

var negateValue = {};

var hasRequiredNegateValue;

function requireNegateValue () {
	if (hasRequiredNegateValue) return negateValue;
	hasRequiredNegateValue = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>negateValue
		});
		function negateValue(value) {
		    value = `${value}`;
		    if (value === "0") {
		        return "0";
		    }
		    // Flip sign of numbers
		    if (/^[+-]?(\d+|\d*\.\d+)(e[+-]?\d+)?(%|\w+)?$/.test(value)) {
		        return value.replace(/^[+-]?/, (sign)=>sign === "-" ? "" : "-");
		    }
		    // What functions we support negating numeric values for
		    // var() isn't inherently a numeric function but we support it anyway
		    // The trigonometric functions are omitted because you'll need to use calc(…) with them _anyway_
		    // to produce generally useful results and that will be covered already
		    let numericFunctions = [
		        "var",
		        "calc",
		        "min",
		        "max",
		        "clamp"
		    ];
		    for (const fn of numericFunctions){
		        if (value.includes(`${fn}(`)) {
		            return `calc(${value} * -1)`;
		        }
		    }
		}
} (negateValue));
	return negateValue;
}

var corePluginList = {};

var hasRequiredCorePluginList;

function requireCorePluginList () {
	if (hasRequiredCorePluginList) return corePluginList;
	hasRequiredCorePluginList = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>_default
		});
		const _default = [
		    "preflight",
		    "container",
		    "accessibility",
		    "pointerEvents",
		    "visibility",
		    "position",
		    "inset",
		    "isolation",
		    "zIndex",
		    "order",
		    "gridColumn",
		    "gridColumnStart",
		    "gridColumnEnd",
		    "gridRow",
		    "gridRowStart",
		    "gridRowEnd",
		    "float",
		    "clear",
		    "margin",
		    "boxSizing",
		    "lineClamp",
		    "display",
		    "aspectRatio",
		    "height",
		    "maxHeight",
		    "minHeight",
		    "width",
		    "minWidth",
		    "maxWidth",
		    "flex",
		    "flexShrink",
		    "flexGrow",
		    "flexBasis",
		    "tableLayout",
		    "captionSide",
		    "borderCollapse",
		    "borderSpacing",
		    "transformOrigin",
		    "translate",
		    "rotate",
		    "skew",
		    "scale",
		    "transform",
		    "animation",
		    "cursor",
		    "touchAction",
		    "userSelect",
		    "resize",
		    "scrollSnapType",
		    "scrollSnapAlign",
		    "scrollSnapStop",
		    "scrollMargin",
		    "scrollPadding",
		    "listStylePosition",
		    "listStyleType",
		    "listStyleImage",
		    "appearance",
		    "columns",
		    "breakBefore",
		    "breakInside",
		    "breakAfter",
		    "gridAutoColumns",
		    "gridAutoFlow",
		    "gridAutoRows",
		    "gridTemplateColumns",
		    "gridTemplateRows",
		    "flexDirection",
		    "flexWrap",
		    "placeContent",
		    "placeItems",
		    "alignContent",
		    "alignItems",
		    "justifyContent",
		    "justifyItems",
		    "gap",
		    "space",
		    "divideWidth",
		    "divideStyle",
		    "divideColor",
		    "divideOpacity",
		    "placeSelf",
		    "alignSelf",
		    "justifySelf",
		    "overflow",
		    "overscrollBehavior",
		    "scrollBehavior",
		    "textOverflow",
		    "hyphens",
		    "whitespace",
		    "wordBreak",
		    "borderRadius",
		    "borderWidth",
		    "borderStyle",
		    "borderColor",
		    "borderOpacity",
		    "backgroundColor",
		    "backgroundOpacity",
		    "backgroundImage",
		    "gradientColorStops",
		    "boxDecorationBreak",
		    "backgroundSize",
		    "backgroundAttachment",
		    "backgroundClip",
		    "backgroundPosition",
		    "backgroundRepeat",
		    "backgroundOrigin",
		    "fill",
		    "stroke",
		    "strokeWidth",
		    "objectFit",
		    "objectPosition",
		    "padding",
		    "textAlign",
		    "textIndent",
		    "verticalAlign",
		    "fontFamily",
		    "fontSize",
		    "fontWeight",
		    "textTransform",
		    "fontStyle",
		    "fontVariantNumeric",
		    "lineHeight",
		    "letterSpacing",
		    "textColor",
		    "textOpacity",
		    "textDecoration",
		    "textDecorationColor",
		    "textDecorationStyle",
		    "textDecorationThickness",
		    "textUnderlineOffset",
		    "fontSmoothing",
		    "placeholderColor",
		    "placeholderOpacity",
		    "caretColor",
		    "accentColor",
		    "opacity",
		    "backgroundBlendMode",
		    "mixBlendMode",
		    "boxShadow",
		    "boxShadowColor",
		    "outlineStyle",
		    "outlineWidth",
		    "outlineOffset",
		    "outlineColor",
		    "ringWidth",
		    "ringColor",
		    "ringOpacity",
		    "ringOffsetWidth",
		    "ringOffsetColor",
		    "blur",
		    "brightness",
		    "contrast",
		    "dropShadow",
		    "grayscale",
		    "hueRotate",
		    "invert",
		    "saturate",
		    "sepia",
		    "filter",
		    "backdropBlur",
		    "backdropBrightness",
		    "backdropContrast",
		    "backdropGrayscale",
		    "backdropHueRotate",
		    "backdropInvert",
		    "backdropOpacity",
		    "backdropSaturate",
		    "backdropSepia",
		    "backdropFilter",
		    "transitionProperty",
		    "transitionDelay",
		    "transitionDuration",
		    "transitionTimingFunction",
		    "willChange",
		    "content"
		];
} (corePluginList));
	return corePluginList;
}

var configurePlugins = {};

var hasRequiredConfigurePlugins;

function requireConfigurePlugins () {
	if (hasRequiredConfigurePlugins) return configurePlugins;
	hasRequiredConfigurePlugins = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>_default
		});
		function _default(pluginConfig, plugins) {
		    if (pluginConfig === undefined) {
		        return plugins;
		    }
		    const pluginNames = Array.isArray(pluginConfig) ? pluginConfig : [
		        ...new Set(plugins.filter((pluginName)=>{
		            return pluginConfig !== false && pluginConfig[pluginName] !== false;
		        }).concat(Object.keys(pluginConfig).filter((pluginName)=>{
		            return pluginConfig[pluginName] !== false;
		        })))
		    ];
		    return pluginNames;
		}
} (configurePlugins));
	return configurePlugins;
}

var colors = {};

var log = {};

var picocolors_browserExports = {};
var picocolors_browser = {
  get exports(){ return picocolors_browserExports; },
  set exports(v){ picocolors_browserExports = v; },
};

var hasRequiredPicocolors_browser;

function requirePicocolors_browser () {
	if (hasRequiredPicocolors_browser) return picocolors_browserExports;
	hasRequiredPicocolors_browser = 1;
	var x=String;
	var create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x}};
	picocolors_browser.exports=create();
	picocolors_browserExports.createColors = create;
	return picocolors_browserExports;
}

var hasRequiredLog;

function requireLog () {
	if (hasRequiredLog) return log;
	hasRequiredLog = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    dim: ()=>dim,
		    default: ()=>_default
		});
		const _picocolors = /*#__PURE__*/ _interopRequireDefault(requirePicocolors_browser());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		let alreadyShown = new Set();
		function log(type, messages, key) {
		    if (typeof process !== "undefined" && ({}).JEST_WORKER_ID) return;
		    if (key && alreadyShown.has(key)) return;
		    if (key) alreadyShown.add(key);
		    console.warn("");
		    messages.forEach((message)=>console.warn(type, "-", message));
		}
		function dim(input) {
		    return _picocolors.default.dim(input);
		}
		const _default = {
		    info (key, messages) {
		        log(_picocolors.default.bold(_picocolors.default.cyan("info")), ...Array.isArray(key) ? [
		            key
		        ] : [
		            messages,
		            key
		        ]);
		    },
		    warn (key, messages) {
		        log(_picocolors.default.bold(_picocolors.default.yellow("warn")), ...Array.isArray(key) ? [
		            key
		        ] : [
		            messages,
		            key
		        ]);
		    },
		    risk (key, messages) {
		        log(_picocolors.default.bold(_picocolors.default.magenta("risk")), ...Array.isArray(key) ? [
		            key
		        ] : [
		            messages,
		            key
		        ]);
		    }
		};
} (log));
	return log;
}

var hasRequiredColors;

function requireColors () {
	if (hasRequiredColors) return colors;
	hasRequiredColors = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>_default
		});
		const _log = /*#__PURE__*/ _interopRequireDefault(requireLog());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function warn({ version , from , to  }) {
		    _log.default.warn(`${from}-color-renamed`, [
		        `As of Tailwind CSS ${version}, \`${from}\` has been renamed to \`${to}\`.`,
		        "Update your configuration file to silence this warning."
		    ]);
		}
		const _default = {
		    inherit: "inherit",
		    current: "currentColor",
		    transparent: "transparent",
		    black: "#000",
		    white: "#fff",
		    slate: {
		        50: "#f8fafc",
		        100: "#f1f5f9",
		        200: "#e2e8f0",
		        300: "#cbd5e1",
		        400: "#94a3b8",
		        500: "#64748b",
		        600: "#475569",
		        700: "#334155",
		        800: "#1e293b",
		        900: "#0f172a",
		        950: "#020617"
		    },
		    gray: {
		        50: "#f9fafb",
		        100: "#f3f4f6",
		        200: "#e5e7eb",
		        300: "#d1d5db",
		        400: "#9ca3af",
		        500: "#6b7280",
		        600: "#4b5563",
		        700: "#374151",
		        800: "#1f2937",
		        900: "#111827",
		        950: "#030712"
		    },
		    zinc: {
		        50: "#fafafa",
		        100: "#f4f4f5",
		        200: "#e4e4e7",
		        300: "#d4d4d8",
		        400: "#a1a1aa",
		        500: "#71717a",
		        600: "#52525b",
		        700: "#3f3f46",
		        800: "#27272a",
		        900: "#18181b",
		        950: "#09090b"
		    },
		    neutral: {
		        50: "#fafafa",
		        100: "#f5f5f5",
		        200: "#e5e5e5",
		        300: "#d4d4d4",
		        400: "#a3a3a3",
		        500: "#737373",
		        600: "#525252",
		        700: "#404040",
		        800: "#262626",
		        900: "#171717",
		        950: "#0a0a0a"
		    },
		    stone: {
		        50: "#fafaf9",
		        100: "#f5f5f4",
		        200: "#e7e5e4",
		        300: "#d6d3d1",
		        400: "#a8a29e",
		        500: "#78716c",
		        600: "#57534e",
		        700: "#44403c",
		        800: "#292524",
		        900: "#1c1917",
		        950: "#0c0a09"
		    },
		    red: {
		        50: "#fef2f2",
		        100: "#fee2e2",
		        200: "#fecaca",
		        300: "#fca5a5",
		        400: "#f87171",
		        500: "#ef4444",
		        600: "#dc2626",
		        700: "#b91c1c",
		        800: "#991b1b",
		        900: "#7f1d1d",
		        950: "#450a0a"
		    },
		    orange: {
		        50: "#fff7ed",
		        100: "#ffedd5",
		        200: "#fed7aa",
		        300: "#fdba74",
		        400: "#fb923c",
		        500: "#f97316",
		        600: "#ea580c",
		        700: "#c2410c",
		        800: "#9a3412",
		        900: "#7c2d12",
		        950: "#431407"
		    },
		    amber: {
		        50: "#fffbeb",
		        100: "#fef3c7",
		        200: "#fde68a",
		        300: "#fcd34d",
		        400: "#fbbf24",
		        500: "#f59e0b",
		        600: "#d97706",
		        700: "#b45309",
		        800: "#92400e",
		        900: "#78350f",
		        950: "#451a03"
		    },
		    yellow: {
		        50: "#fefce8",
		        100: "#fef9c3",
		        200: "#fef08a",
		        300: "#fde047",
		        400: "#facc15",
		        500: "#eab308",
		        600: "#ca8a04",
		        700: "#a16207",
		        800: "#854d0e",
		        900: "#713f12",
		        950: "#422006"
		    },
		    lime: {
		        50: "#f7fee7",
		        100: "#ecfccb",
		        200: "#d9f99d",
		        300: "#bef264",
		        400: "#a3e635",
		        500: "#84cc16",
		        600: "#65a30d",
		        700: "#4d7c0f",
		        800: "#3f6212",
		        900: "#365314",
		        950: "#1a2e05"
		    },
		    green: {
		        50: "#f0fdf4",
		        100: "#dcfce7",
		        200: "#bbf7d0",
		        300: "#86efac",
		        400: "#4ade80",
		        500: "#22c55e",
		        600: "#16a34a",
		        700: "#15803d",
		        800: "#166534",
		        900: "#14532d",
		        950: "#052e16"
		    },
		    emerald: {
		        50: "#ecfdf5",
		        100: "#d1fae5",
		        200: "#a7f3d0",
		        300: "#6ee7b7",
		        400: "#34d399",
		        500: "#10b981",
		        600: "#059669",
		        700: "#047857",
		        800: "#065f46",
		        900: "#064e3b",
		        950: "#022c22"
		    },
		    teal: {
		        50: "#f0fdfa",
		        100: "#ccfbf1",
		        200: "#99f6e4",
		        300: "#5eead4",
		        400: "#2dd4bf",
		        500: "#14b8a6",
		        600: "#0d9488",
		        700: "#0f766e",
		        800: "#115e59",
		        900: "#134e4a",
		        950: "#042f2e"
		    },
		    cyan: {
		        50: "#ecfeff",
		        100: "#cffafe",
		        200: "#a5f3fc",
		        300: "#67e8f9",
		        400: "#22d3ee",
		        500: "#06b6d4",
		        600: "#0891b2",
		        700: "#0e7490",
		        800: "#155e75",
		        900: "#164e63",
		        950: "#083344"
		    },
		    sky: {
		        50: "#f0f9ff",
		        100: "#e0f2fe",
		        200: "#bae6fd",
		        300: "#7dd3fc",
		        400: "#38bdf8",
		        500: "#0ea5e9",
		        600: "#0284c7",
		        700: "#0369a1",
		        800: "#075985",
		        900: "#0c4a6e",
		        950: "#082f49"
		    },
		    blue: {
		        50: "#eff6ff",
		        100: "#dbeafe",
		        200: "#bfdbfe",
		        300: "#93c5fd",
		        400: "#60a5fa",
		        500: "#3b82f6",
		        600: "#2563eb",
		        700: "#1d4ed8",
		        800: "#1e40af",
		        900: "#1e3a8a",
		        950: "#172554"
		    },
		    indigo: {
		        50: "#eef2ff",
		        100: "#e0e7ff",
		        200: "#c7d2fe",
		        300: "#a5b4fc",
		        400: "#818cf8",
		        500: "#6366f1",
		        600: "#4f46e5",
		        700: "#4338ca",
		        800: "#3730a3",
		        900: "#312e81",
		        950: "#1e1b4b"
		    },
		    violet: {
		        50: "#f5f3ff",
		        100: "#ede9fe",
		        200: "#ddd6fe",
		        300: "#c4b5fd",
		        400: "#a78bfa",
		        500: "#8b5cf6",
		        600: "#7c3aed",
		        700: "#6d28d9",
		        800: "#5b21b6",
		        900: "#4c1d95",
		        950: "#2e1065"
		    },
		    purple: {
		        50: "#faf5ff",
		        100: "#f3e8ff",
		        200: "#e9d5ff",
		        300: "#d8b4fe",
		        400: "#c084fc",
		        500: "#a855f7",
		        600: "#9333ea",
		        700: "#7e22ce",
		        800: "#6b21a8",
		        900: "#581c87",
		        950: "#3b0764"
		    },
		    fuchsia: {
		        50: "#fdf4ff",
		        100: "#fae8ff",
		        200: "#f5d0fe",
		        300: "#f0abfc",
		        400: "#e879f9",
		        500: "#d946ef",
		        600: "#c026d3",
		        700: "#a21caf",
		        800: "#86198f",
		        900: "#701a75",
		        950: "#4a044e"
		    },
		    pink: {
		        50: "#fdf2f8",
		        100: "#fce7f3",
		        200: "#fbcfe8",
		        300: "#f9a8d4",
		        400: "#f472b6",
		        500: "#ec4899",
		        600: "#db2777",
		        700: "#be185d",
		        800: "#9d174d",
		        900: "#831843",
		        950: "#500724"
		    },
		    rose: {
		        50: "#fff1f2",
		        100: "#ffe4e6",
		        200: "#fecdd3",
		        300: "#fda4af",
		        400: "#fb7185",
		        500: "#f43f5e",
		        600: "#e11d48",
		        700: "#be123c",
		        800: "#9f1239",
		        900: "#881337",
		        950: "#4c0519"
		    },
		    get lightBlue () {
		        warn({
		            version: "v2.2",
		            from: "lightBlue",
		            to: "sky"
		        });
		        return this.sky;
		    },
		    get warmGray () {
		        warn({
		            version: "v3.0",
		            from: "warmGray",
		            to: "stone"
		        });
		        return this.stone;
		    },
		    get trueGray () {
		        warn({
		            version: "v3.0",
		            from: "trueGray",
		            to: "neutral"
		        });
		        return this.neutral;
		    },
		    get coolGray () {
		        warn({
		            version: "v3.0",
		            from: "coolGray",
		            to: "gray"
		        });
		        return this.gray;
		    },
		    get blueGray () {
		        warn({
		            version: "v3.0",
		            from: "blueGray",
		            to: "slate"
		        });
		        return this.slate;
		    }
		};
} (colors));
	return colors;
}

var defaults = {};

var hasRequiredDefaults;

function requireDefaults () {
	if (hasRequiredDefaults) return defaults;
	hasRequiredDefaults = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "defaults", {
		    enumerable: true,
		    get: ()=>defaults
		});
		function defaults(target, ...sources) {
		    for (let source of sources){
		        for(let k in source){
		            var _target_hasOwnProperty;
		            if (!(target === null || target === void 0 ? void 0 : (_target_hasOwnProperty = target.hasOwnProperty) === null || _target_hasOwnProperty === void 0 ? void 0 : _target_hasOwnProperty.call(target, k))) {
		                target[k] = source[k];
		            }
		        }
		        for (let k1 of Object.getOwnPropertySymbols(source)){
		            var _target_hasOwnProperty1;
		            if (!(target === null || target === void 0 ? void 0 : (_target_hasOwnProperty1 = target.hasOwnProperty) === null || _target_hasOwnProperty1 === void 0 ? void 0 : _target_hasOwnProperty1.call(target, k1))) {
		                target[k1] = source[k1];
		            }
		        }
		    }
		    return target;
		}
} (defaults));
	return defaults;
}

var toPath = {};

/**
 * Parse a path string into an array of path segments.
 *
 * Square bracket notation `a[b]` may be used to "escape" dots that would otherwise be interpreted as path separators.
 *
 * Example:
 * a -> ['a']
 * a.b.c -> ['a', 'b', 'c']
 * a[b].c -> ['a', 'b', 'c']
 * a[b.c].e.f -> ['a', 'b.c', 'e', 'f']
 * a[b][c][d] -> ['a', 'b', 'c', 'd']
 *
 * @param {string|string[]} path
 **/

var hasRequiredToPath;

function requireToPath () {
	if (hasRequiredToPath) return toPath;
	hasRequiredToPath = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "toPath", {
		    enumerable: true,
		    get: ()=>toPath
		});
		function toPath(path) {
		    if (Array.isArray(path)) return path;
		    let openBrackets = path.split("[").length - 1;
		    let closedBrackets = path.split("]").length - 1;
		    if (openBrackets !== closedBrackets) {
		        throw new Error(`Path is invalid. Has unbalanced brackets: ${path}`);
		    }
		    return path.split(/\.(?![^\[]*\])|[\[\]]/g).filter(Boolean);
		}
} (toPath));
	return toPath;
}

var normalizeConfig = {};

var featureFlags = {};

var sharedState = {};

const name = "tailwindcss";
const version = "3.3.1";
const description = "A utility-first CSS framework for rapidly building custom user interfaces.";
const license = "MIT";
const main = "lib/index.js";
const types$2 = "types/index.d.ts";
const repository = "https://github.com/tailwindlabs/tailwindcss.git";
const bugs = "https://github.com/tailwindlabs/tailwindcss/issues";
const homepage = "https://tailwindcss.com";
const bin = {
	tailwind: "lib/cli.js",
	tailwindcss: "lib/cli.js"
};
const tailwindcss = {
	engine: "stable"
};
const scripts = {
	prebuild: "npm run generate && rimraf lib",
	build: "swc src --out-dir lib --copy-files",
	postbuild: "esbuild lib/cli-peer-dependencies.js --bundle --platform=node --outfile=peers/index.js --define:process.env.CSS_TRANSFORMER_WASM=false",
	"rebuild-fixtures": "npm run build && node -r @swc/register scripts/rebuildFixtures.js",
	style: "eslint .",
	pretest: "npm run generate",
	test: "jest",
	"test:integrations": "npm run test --prefix ./integrations",
	"install:integrations": "node scripts/install-integrations.js",
	"generate:plugin-list": "node -r @swc/register scripts/create-plugin-list.js",
	"generate:types": "node -r @swc/register scripts/generate-types.js",
	generate: "npm run generate:plugin-list && npm run generate:types",
	"release-channel": "node ./scripts/release-channel.js",
	"release-notes": "node ./scripts/release-notes.js",
	prepublishOnly: "npm install --force && npm run build"
};
const files = [
	"src/*",
	"cli/*",
	"lib/*",
	"peers/*",
	"scripts/*.js",
	"stubs/*",
	"nesting/*",
	"types/**/*",
	"*.d.ts",
	"*.css",
	"*.js"
];
const devDependencies = {
	"@swc/cli": "0.1.59",
	"@swc/core": "1.3.24",
	"@swc/jest": "0.2.24",
	"@swc/register": "0.1.10",
	autoprefixer: "^10.4.13",
	browserslist: "^4.21.4",
	concurrently: "^7.5.0",
	cssnano: "^5.1.14",
	esbuild: "^0.16.10",
	eslint: "^8.31.0",
	"eslint-config-prettier": "^8.6.0",
	"eslint-plugin-prettier": "^4.2.1",
	jest: "^28.1.3",
	"jest-diff": "^28.1.3",
	lightningcss: "^1.18.0",
	prettier: "^2.8.1",
	rimraf: "^3.0.0",
	"source-map-js": "^1.0.2",
	turbo: "^1.6.3"
};
const peerDependencies = {
	postcss: "^8.0.9"
};
const dependencies = {
	arg: "^5.0.2",
	chokidar: "^3.5.3",
	"color-name": "^1.1.4",
	didyoumean: "^1.2.2",
	dlv: "^1.1.3",
	"fast-glob": "^3.2.12",
	"glob-parent": "^6.0.2",
	"is-glob": "^4.0.3",
	jiti: "^1.17.2",
	lilconfig: "^2.0.6",
	micromatch: "^4.0.5",
	"normalize-path": "^3.0.0",
	"object-hash": "^3.0.0",
	picocolors: "^1.0.0",
	postcss: "^8.0.9",
	"postcss-import": "^14.1.0",
	"postcss-js": "^4.0.0",
	"postcss-load-config": "^3.1.4",
	"postcss-nested": "6.0.0",
	"postcss-selector-parser": "^6.0.11",
	"postcss-value-parser": "^4.2.0",
	"quick-lru": "^5.1.1",
	resolve: "^1.22.1",
	sucrase: "^3.29.0"
};
const browserslist = [
	"> 1%",
	"not edge <= 18",
	"not ie 11",
	"not op_mini all"
];
const jest = {
	testTimeout: 30000,
	setupFilesAfterEnv: [
		"<rootDir>/jest/customMatchers.js"
	],
	testPathIgnorePatterns: [
		"/node_modules/",
		"/integrations/",
		"/standalone-cli/",
		"\\.test\\.skip\\.js$"
	],
	transformIgnorePatterns: [
		"node_modules/(?!lightningcss)"
	],
	transform: {
		"\\.js$": "@swc/jest",
		"\\.ts$": "@swc/jest"
	}
};
const engines = {
	node: ">=12.13.0"
};
const require$$7 = {
	name: name,
	version: version,
	description: description,
	license: license,
	main: main,
	types: types$2,
	repository: repository,
	bugs: bugs,
	homepage: homepage,
	bin: bin,
	tailwindcss: tailwindcss,
	scripts: scripts,
	files: files,
	devDependencies: devDependencies,
	peerDependencies: peerDependencies,
	dependencies: dependencies,
	browserslist: browserslist,
	jest: jest,
	engines: engines
};

var hasRequiredSharedState;

function requireSharedState () {
	if (hasRequiredSharedState) return sharedState;
	hasRequiredSharedState = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    env: ()=>env,
		    contextMap: ()=>contextMap,
		    configContextMap: ()=>configContextMap,
		    contextSourcesMap: ()=>contextSourcesMap,
		    sourceHashMap: ()=>sourceHashMap,
		    NOT_ON_DEMAND: ()=>NOT_ON_DEMAND,
		    NONE: ()=>NONE,
		    resolveDebug: ()=>resolveDebug
		});
		const _packageJson = /*#__PURE__*/ _interopRequireDefault(require$$7);
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		let OXIDE_DEFAULT_ENABLED = _packageJson.default.tailwindcss.engine === "oxide";
		const env = typeof process !== "undefined" ? {
		    NODE_ENV: "production",
		    DEBUG: resolveDebug(({}).DEBUG),
		    ENGINE: _packageJson.default.tailwindcss.engine,
		    OXIDE: resolveBoolean(({}).OXIDE, OXIDE_DEFAULT_ENABLED)
		} : {
		    NODE_ENV: "production",
		    DEBUG: false,
		    ENGINE: _packageJson.default.tailwindcss.engine,
		    OXIDE: OXIDE_DEFAULT_ENABLED
		};
		const contextMap = new Map();
		const configContextMap = new Map();
		const contextSourcesMap = new Map();
		const sourceHashMap = new Map();
		const NOT_ON_DEMAND = new String("*");
		const NONE = Symbol("__NONE__");
		function resolveBoolean(value, defaultValue) {
		    if (value === undefined) {
		        return defaultValue;
		    }
		    if (value === "0" || value === "false") {
		        return false;
		    }
		    return true;
		}
		function resolveDebug(debug) {
		    if (debug === undefined) {
		        return false;
		    }
		    // Environment variables are strings, so convert to boolean
		    if (debug === "true" || debug === "1") {
		        return true;
		    }
		    if (debug === "false" || debug === "0") {
		        return false;
		    }
		    // Keep the debug convention into account:
		    // DEBUG=* -> This enables all debug modes
		    // DEBUG=projectA,projectB,projectC -> This enables debug for projectA, projectB and projectC
		    // DEBUG=projectA:* -> This enables all debug modes for projectA (if you have sub-types)
		    // DEBUG=projectA,-projectB -> This enables debug for projectA and explicitly disables it for projectB
		    if (debug === "*") {
		        return true;
		    }
		    let debuggers = debug.split(",").map((d)=>d.split(":")[0]);
		    // Ignoring tailwindcss
		    if (debuggers.includes("-tailwindcss")) {
		        return false;
		    }
		    // Including tailwindcss
		    if (debuggers.includes("tailwindcss")) {
		        return true;
		    }
		    return false;
		}
} (sharedState));
	return sharedState;
}

var hasRequiredFeatureFlags;

function requireFeatureFlags () {
	if (hasRequiredFeatureFlags) return featureFlags;
	hasRequiredFeatureFlags = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    flagEnabled: ()=>flagEnabled,
		    issueFlagNotices: ()=>issueFlagNotices,
		    default: ()=>_default
		});
		const _picocolors = /*#__PURE__*/ _interopRequireDefault(requirePicocolors_browser());
		const _log = /*#__PURE__*/ _interopRequireDefault(requireLog());
		const _sharedState = requireSharedState();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		let defaults = {
		    optimizeUniversalDefaults: false,
		    generalizedModifiers: true,
		    get disableColorOpacityUtilitiesByDefault () {
		        return _sharedState.env.OXIDE;
		    },
		    get relativeContentPathsByDefault () {
		        return _sharedState.env.OXIDE;
		    }
		};
		let featureFlags = {
		    future: [
		        "hoverOnlyWhenSupported",
		        "respectDefaultRingColorOpacity",
		        "disableColorOpacityUtilitiesByDefault",
		        "relativeContentPathsByDefault"
		    ],
		    experimental: [
		        "optimizeUniversalDefaults",
		        "generalizedModifiers"
		    ]
		};
		function flagEnabled(config, flag) {
		    if (featureFlags.future.includes(flag)) {
		        var _config_future;
		        var _config_future_flag, _ref;
		        return config.future === "all" || ((_ref = (_config_future_flag = config === null || config === void 0 ? void 0 : (_config_future = config.future) === null || _config_future === void 0 ? void 0 : _config_future[flag]) !== null && _config_future_flag !== void 0 ? _config_future_flag : defaults[flag]) !== null && _ref !== void 0 ? _ref : false);
		    }
		    if (featureFlags.experimental.includes(flag)) {
		        var _config_experimental;
		        var _config_experimental_flag, _ref1;
		        return config.experimental === "all" || ((_ref1 = (_config_experimental_flag = config === null || config === void 0 ? void 0 : (_config_experimental = config.experimental) === null || _config_experimental === void 0 ? void 0 : _config_experimental[flag]) !== null && _config_experimental_flag !== void 0 ? _config_experimental_flag : defaults[flag]) !== null && _ref1 !== void 0 ? _ref1 : false);
		    }
		    return false;
		}
		function experimentalFlagsEnabled(config) {
		    if (config.experimental === "all") {
		        return featureFlags.experimental;
		    }
		    var _config_experimental;
		    return Object.keys((_config_experimental = config === null || config === void 0 ? void 0 : config.experimental) !== null && _config_experimental !== void 0 ? _config_experimental : {}).filter((flag)=>featureFlags.experimental.includes(flag) && config.experimental[flag]);
		}
		function issueFlagNotices(config) {
		    if (({}).JEST_WORKER_ID !== undefined) {
		        return;
		    }
		    if (experimentalFlagsEnabled(config).length > 0) {
		        let changes = experimentalFlagsEnabled(config).map((s)=>_picocolors.default.yellow(s)).join(", ");
		        _log.default.warn("experimental-flags-enabled", [
		            `You have enabled experimental features: ${changes}`,
		            "Experimental features in Tailwind CSS are not covered by semver, may introduce breaking changes, and can change at any time."
		        ]);
		    }
		}
		const _default = featureFlags;
} (featureFlags));
	return featureFlags;
}

var hasRequiredNormalizeConfig;

function requireNormalizeConfig () {
	if (hasRequiredNormalizeConfig) return normalizeConfig;
	hasRequiredNormalizeConfig = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "normalizeConfig", {
		    enumerable: true,
		    get: ()=>normalizeConfig
		});
		const _featureFlags = requireFeatureFlags();
		const _log = /*#__PURE__*/ _interopRequireWildcard(requireLog());
		function _getRequireWildcardCache(nodeInterop) {
		    if (typeof WeakMap !== "function") return null;
		    var cacheBabelInterop = new WeakMap();
		    var cacheNodeInterop = new WeakMap();
		    return (_getRequireWildcardCache = function(nodeInterop) {
		        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
		    })(nodeInterop);
		}
		function _interopRequireWildcard(obj, nodeInterop) {
		    if (!nodeInterop && obj && obj.__esModule) {
		        return obj;
		    }
		    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
		        return {
		            default: obj
		        };
		    }
		    var cache = _getRequireWildcardCache(nodeInterop);
		    if (cache && cache.has(obj)) {
		        return cache.get(obj);
		    }
		    var newObj = {};
		    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		    for(var key in obj){
		        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
		            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
		            if (desc && (desc.get || desc.set)) {
		                Object.defineProperty(newObj, key, desc);
		            } else {
		                newObj[key] = obj[key];
		            }
		        }
		    }
		    newObj.default = obj;
		    if (cache) {
		        cache.set(obj, newObj);
		    }
		    return newObj;
		}
		function normalizeConfig(config) {
		    // Quick structure validation
		    /**
		   * type FilePath = string
		   * type RawFile = { raw: string, extension?: string }
		   * type ExtractorFn = (content: string) => Array<string>
		   * type TransformerFn = (content: string) => string
		   *
		   * type Content =
		   *   | Array<FilePath | RawFile>
		   *   | {
		   *       files: Array<FilePath | RawFile>,
		   *       extract?: ExtractorFn | { [extension: string]: ExtractorFn }
		   *       transform?: TransformerFn | { [extension: string]: TransformerFn }
		   *   }
		   */ let valid = (()=>{
		        // `config.purge` should not exist anymore
		        if (config.purge) {
		            return false;
		        }
		        // `config.content` should exist
		        if (!config.content) {
		            return false;
		        }
		        // `config.content` should be an object or an array
		        if (!Array.isArray(config.content) && !(typeof config.content === "object" && config.content !== null)) {
		            return false;
		        }
		        // When `config.content` is an array, it should consist of FilePaths or RawFiles
		        if (Array.isArray(config.content)) {
		            return config.content.every((path)=>{
		                // `path` can be a string
		                if (typeof path === "string") return true;
		                // `path` can be an object { raw: string, extension?: string }
		                // `raw` must be a string
		                if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== "string") return false;
		                // `extension` (if provided) should also be a string
		                if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== "string") {
		                    return false;
		                }
		                return true;
		            });
		        }
		        // When `config.content` is an object
		        if (typeof config.content === "object" && config.content !== null) {
		            // Only `files`, `relative`, `extract`, and `transform` can exist in `config.content`
		            if (Object.keys(config.content).some((key)=>![
		                    "files",
		                    "relative",
		                    "extract",
		                    "transform"
		                ].includes(key))) {
		                return false;
		            }
		            // `config.content.files` should exist of FilePaths or RawFiles
		            if (Array.isArray(config.content.files)) {
		                if (!config.content.files.every((path)=>{
		                    // `path` can be a string
		                    if (typeof path === "string") return true;
		                    // `path` can be an object { raw: string, extension?: string }
		                    // `raw` must be a string
		                    if (typeof (path === null || path === void 0 ? void 0 : path.raw) !== "string") return false;
		                    // `extension` (if provided) should also be a string
		                    if ((path === null || path === void 0 ? void 0 : path.extension) && typeof (path === null || path === void 0 ? void 0 : path.extension) !== "string") {
		                        return false;
		                    }
		                    return true;
		                })) {
		                    return false;
		                }
		                // `config.content.extract` is optional, and can be a Function or a Record<String, Function>
		                if (typeof config.content.extract === "object") {
		                    for (let value of Object.values(config.content.extract)){
		                        if (typeof value !== "function") {
		                            return false;
		                        }
		                    }
		                } else if (!(config.content.extract === undefined || typeof config.content.extract === "function")) {
		                    return false;
		                }
		                // `config.content.transform` is optional, and can be a Function or a Record<String, Function>
		                if (typeof config.content.transform === "object") {
		                    for (let value1 of Object.values(config.content.transform)){
		                        if (typeof value1 !== "function") {
		                            return false;
		                        }
		                    }
		                } else if (!(config.content.transform === undefined || typeof config.content.transform === "function")) {
		                    return false;
		                }
		                // `config.content.relative` is optional and can be a boolean
		                if (typeof config.content.relative !== "boolean" && typeof config.content.relative !== "undefined") {
		                    return false;
		                }
		            }
		            return true;
		        }
		        return false;
		    })();
		    if (!valid) {
		        _log.default.warn("purge-deprecation", [
		            "The `purge`/`content` options have changed in Tailwind CSS v3.0.",
		            "Update your configuration file to eliminate this warning.",
		            "https://tailwindcss.com/docs/upgrade-guide#configure-content-sources"
		        ]);
		    }
		    // Normalize the `safelist`
		    config.safelist = (()=>{
		        var _purge_options;
		        let { content , purge , safelist  } = config;
		        if (Array.isArray(safelist)) return safelist;
		        if (Array.isArray(content === null || content === void 0 ? void 0 : content.safelist)) return content.safelist;
		        if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.safelist)) return purge.safelist;
		        if (Array.isArray(purge === null || purge === void 0 ? void 0 : (_purge_options = purge.options) === null || _purge_options === void 0 ? void 0 : _purge_options.safelist)) return purge.options.safelist;
		        return [];
		    })();
		    // Normalize the `blocklist`
		    config.blocklist = (()=>{
		        let { blocklist  } = config;
		        if (Array.isArray(blocklist)) {
		            if (blocklist.every((item)=>typeof item === "string")) {
		                return blocklist;
		            }
		            _log.default.warn("blocklist-invalid", [
		                "The `blocklist` option must be an array of strings.",
		                "https://tailwindcss.com/docs/content-configuration#discarding-classes"
		            ]);
		        }
		        return [];
		    })();
		    // Normalize prefix option
		    if (typeof config.prefix === "function") {
		        _log.default.warn("prefix-function", [
		            "As of Tailwind CSS v3.0, `prefix` cannot be a function.",
		            "Update `prefix` in your configuration to be a string to eliminate this warning.",
		            "https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function"
		        ]);
		        config.prefix = "";
		    } else {
		        var _config_prefix;
		        config.prefix = (_config_prefix = config.prefix) !== null && _config_prefix !== void 0 ? _config_prefix : "";
		    }
		    // Normalize the `content`
		    config.content = {
		        relative: (()=>{
		            let { content  } = config;
		            if (content === null || content === void 0 ? void 0 : content.relative) {
		                return content.relative;
		            }
		            return (0, _featureFlags.flagEnabled)(config, "relativeContentPathsByDefault");
		        })(),
		        files: (()=>{
		            let { content , purge  } = config;
		            if (Array.isArray(purge)) return purge;
		            if (Array.isArray(purge === null || purge === void 0 ? void 0 : purge.content)) return purge.content;
		            if (Array.isArray(content)) return content;
		            if (Array.isArray(content === null || content === void 0 ? void 0 : content.content)) return content.content;
		            if (Array.isArray(content === null || content === void 0 ? void 0 : content.files)) return content.files;
		            return [];
		        })(),
		        extract: (()=>{
		            let extract = (()=>{
		                var _config_purge, _config_content, _config_purge1, _config_purge_extract, _config_content1, _config_content_extract, _config_purge2, _config_purge_options, _config_content2, _config_content_options;
		                if ((_config_purge = config.purge) === null || _config_purge === void 0 ? void 0 : _config_purge.extract) return config.purge.extract;
		                if ((_config_content = config.content) === null || _config_content === void 0 ? void 0 : _config_content.extract) return config.content.extract;
		                if ((_config_purge1 = config.purge) === null || _config_purge1 === void 0 ? void 0 : (_config_purge_extract = _config_purge1.extract) === null || _config_purge_extract === void 0 ? void 0 : _config_purge_extract.DEFAULT) return config.purge.extract.DEFAULT;
		                if ((_config_content1 = config.content) === null || _config_content1 === void 0 ? void 0 : (_config_content_extract = _config_content1.extract) === null || _config_content_extract === void 0 ? void 0 : _config_content_extract.DEFAULT) return config.content.extract.DEFAULT;
		                if ((_config_purge2 = config.purge) === null || _config_purge2 === void 0 ? void 0 : (_config_purge_options = _config_purge2.options) === null || _config_purge_options === void 0 ? void 0 : _config_purge_options.extractors) return config.purge.options.extractors;
		                if ((_config_content2 = config.content) === null || _config_content2 === void 0 ? void 0 : (_config_content_options = _config_content2.options) === null || _config_content_options === void 0 ? void 0 : _config_content_options.extractors) return config.content.options.extractors;
		                return {};
		            })();
		            let extractors = {};
		            let defaultExtractor = (()=>{
		                var _config_purge, _config_purge_options, _config_content, _config_content_options;
		                if ((_config_purge = config.purge) === null || _config_purge === void 0 ? void 0 : (_config_purge_options = _config_purge.options) === null || _config_purge_options === void 0 ? void 0 : _config_purge_options.defaultExtractor) {
		                    return config.purge.options.defaultExtractor;
		                }
		                if ((_config_content = config.content) === null || _config_content === void 0 ? void 0 : (_config_content_options = _config_content.options) === null || _config_content_options === void 0 ? void 0 : _config_content_options.defaultExtractor) {
		                    return config.content.options.defaultExtractor;
		                }
		                return undefined;
		            })();
		            if (defaultExtractor !== undefined) {
		                extractors.DEFAULT = defaultExtractor;
		            }
		            // Functions
		            if (typeof extract === "function") {
		                extractors.DEFAULT = extract;
		            } else if (Array.isArray(extract)) {
		                for (let { extensions , extractor  } of extract !== null && extract !== void 0 ? extract : []){
		                    for (let extension of extensions){
		                        extractors[extension] = extractor;
		                    }
		                }
		            } else if (typeof extract === "object" && extract !== null) {
		                Object.assign(extractors, extract);
		            }
		            return extractors;
		        })(),
		        transform: (()=>{
		            let transform = (()=>{
		                var _config_purge, _config_content, _config_purge1, _config_purge_transform, _config_content1, _config_content_transform;
		                if ((_config_purge = config.purge) === null || _config_purge === void 0 ? void 0 : _config_purge.transform) return config.purge.transform;
		                if ((_config_content = config.content) === null || _config_content === void 0 ? void 0 : _config_content.transform) return config.content.transform;
		                if ((_config_purge1 = config.purge) === null || _config_purge1 === void 0 ? void 0 : (_config_purge_transform = _config_purge1.transform) === null || _config_purge_transform === void 0 ? void 0 : _config_purge_transform.DEFAULT) return config.purge.transform.DEFAULT;
		                if ((_config_content1 = config.content) === null || _config_content1 === void 0 ? void 0 : (_config_content_transform = _config_content1.transform) === null || _config_content_transform === void 0 ? void 0 : _config_content_transform.DEFAULT) return config.content.transform.DEFAULT;
		                return {};
		            })();
		            let transformers = {};
		            if (typeof transform === "function") {
		                transformers.DEFAULT = transform;
		            }
		            if (typeof transform === "object" && transform !== null) {
		                Object.assign(transformers, transform);
		            }
		            return transformers;
		        })()
		    };
		    // Validate globs to prevent bogus globs.
		    // E.g.: `./src/*.{html}` is invalid, the `{html}` should just be `html`
		    for (let file of config.content.files){
		        if (typeof file === "string" && /{([^,]*?)}/g.test(file)) {
		            _log.default.warn("invalid-glob-braces", [
		                `The glob pattern ${(0, _log.dim)(file)} in your Tailwind CSS configuration is invalid.`,
		                `Update it to ${(0, _log.dim)(file.replace(/{([^,]*?)}/g, "$1"))} to silence this warning.`
		            ]);
		            break;
		        }
		    }
		    return config;
		}
} (normalizeConfig));
	return normalizeConfig;
}

var isPlainObject = {};

var hasRequiredIsPlainObject;

function requireIsPlainObject () {
	if (hasRequiredIsPlainObject) return isPlainObject;
	hasRequiredIsPlainObject = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>isPlainObject
		});
		function isPlainObject(value) {
		    if (Object.prototype.toString.call(value) !== "[object Object]") {
		        return false;
		    }
		    const prototype = Object.getPrototypeOf(value);
		    return prototype === null || prototype === Object.prototype;
		}
} (isPlainObject));
	return isPlainObject;
}

var cloneDeep = {};

var hasRequiredCloneDeep;

function requireCloneDeep () {
	if (hasRequiredCloneDeep) return cloneDeep;
	hasRequiredCloneDeep = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "cloneDeep", {
		    enumerable: true,
		    get: ()=>cloneDeep
		});
		function cloneDeep(value) {
		    if (Array.isArray(value)) {
		        return value.map((child)=>cloneDeep(child));
		    }
		    if (typeof value === "object" && value !== null) {
		        return Object.fromEntries(Object.entries(value).map(([k, v])=>[
		                k,
		                cloneDeep(v)
		            ]));
		    }
		    return value;
		}
} (cloneDeep));
	return cloneDeep;
}

var pluginUtils = {};

var escapeCommas = {};

var hasRequiredEscapeCommas;

function requireEscapeCommas () {
	if (hasRequiredEscapeCommas) return escapeCommas;
	hasRequiredEscapeCommas = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>escapeCommas
		});
		function escapeCommas(className) {
		    return className.replace(/\\,/g, "\\2c ");
		}
} (escapeCommas));
	return escapeCommas;
}

var withAlphaVariable = {};

var color = {};

var colorName;
var hasRequiredColorName;

function requireColorName () {
	if (hasRequiredColorName) return colorName;
	hasRequiredColorName = 1;

	colorName = {
		"aliceblue": [240, 248, 255],
		"antiquewhite": [250, 235, 215],
		"aqua": [0, 255, 255],
		"aquamarine": [127, 255, 212],
		"azure": [240, 255, 255],
		"beige": [245, 245, 220],
		"bisque": [255, 228, 196],
		"black": [0, 0, 0],
		"blanchedalmond": [255, 235, 205],
		"blue": [0, 0, 255],
		"blueviolet": [138, 43, 226],
		"brown": [165, 42, 42],
		"burlywood": [222, 184, 135],
		"cadetblue": [95, 158, 160],
		"chartreuse": [127, 255, 0],
		"chocolate": [210, 105, 30],
		"coral": [255, 127, 80],
		"cornflowerblue": [100, 149, 237],
		"cornsilk": [255, 248, 220],
		"crimson": [220, 20, 60],
		"cyan": [0, 255, 255],
		"darkblue": [0, 0, 139],
		"darkcyan": [0, 139, 139],
		"darkgoldenrod": [184, 134, 11],
		"darkgray": [169, 169, 169],
		"darkgreen": [0, 100, 0],
		"darkgrey": [169, 169, 169],
		"darkkhaki": [189, 183, 107],
		"darkmagenta": [139, 0, 139],
		"darkolivegreen": [85, 107, 47],
		"darkorange": [255, 140, 0],
		"darkorchid": [153, 50, 204],
		"darkred": [139, 0, 0],
		"darksalmon": [233, 150, 122],
		"darkseagreen": [143, 188, 143],
		"darkslateblue": [72, 61, 139],
		"darkslategray": [47, 79, 79],
		"darkslategrey": [47, 79, 79],
		"darkturquoise": [0, 206, 209],
		"darkviolet": [148, 0, 211],
		"deeppink": [255, 20, 147],
		"deepskyblue": [0, 191, 255],
		"dimgray": [105, 105, 105],
		"dimgrey": [105, 105, 105],
		"dodgerblue": [30, 144, 255],
		"firebrick": [178, 34, 34],
		"floralwhite": [255, 250, 240],
		"forestgreen": [34, 139, 34],
		"fuchsia": [255, 0, 255],
		"gainsboro": [220, 220, 220],
		"ghostwhite": [248, 248, 255],
		"gold": [255, 215, 0],
		"goldenrod": [218, 165, 32],
		"gray": [128, 128, 128],
		"green": [0, 128, 0],
		"greenyellow": [173, 255, 47],
		"grey": [128, 128, 128],
		"honeydew": [240, 255, 240],
		"hotpink": [255, 105, 180],
		"indianred": [205, 92, 92],
		"indigo": [75, 0, 130],
		"ivory": [255, 255, 240],
		"khaki": [240, 230, 140],
		"lavender": [230, 230, 250],
		"lavenderblush": [255, 240, 245],
		"lawngreen": [124, 252, 0],
		"lemonchiffon": [255, 250, 205],
		"lightblue": [173, 216, 230],
		"lightcoral": [240, 128, 128],
		"lightcyan": [224, 255, 255],
		"lightgoldenrodyellow": [250, 250, 210],
		"lightgray": [211, 211, 211],
		"lightgreen": [144, 238, 144],
		"lightgrey": [211, 211, 211],
		"lightpink": [255, 182, 193],
		"lightsalmon": [255, 160, 122],
		"lightseagreen": [32, 178, 170],
		"lightskyblue": [135, 206, 250],
		"lightslategray": [119, 136, 153],
		"lightslategrey": [119, 136, 153],
		"lightsteelblue": [176, 196, 222],
		"lightyellow": [255, 255, 224],
		"lime": [0, 255, 0],
		"limegreen": [50, 205, 50],
		"linen": [250, 240, 230],
		"magenta": [255, 0, 255],
		"maroon": [128, 0, 0],
		"mediumaquamarine": [102, 205, 170],
		"mediumblue": [0, 0, 205],
		"mediumorchid": [186, 85, 211],
		"mediumpurple": [147, 112, 219],
		"mediumseagreen": [60, 179, 113],
		"mediumslateblue": [123, 104, 238],
		"mediumspringgreen": [0, 250, 154],
		"mediumturquoise": [72, 209, 204],
		"mediumvioletred": [199, 21, 133],
		"midnightblue": [25, 25, 112],
		"mintcream": [245, 255, 250],
		"mistyrose": [255, 228, 225],
		"moccasin": [255, 228, 181],
		"navajowhite": [255, 222, 173],
		"navy": [0, 0, 128],
		"oldlace": [253, 245, 230],
		"olive": [128, 128, 0],
		"olivedrab": [107, 142, 35],
		"orange": [255, 165, 0],
		"orangered": [255, 69, 0],
		"orchid": [218, 112, 214],
		"palegoldenrod": [238, 232, 170],
		"palegreen": [152, 251, 152],
		"paleturquoise": [175, 238, 238],
		"palevioletred": [219, 112, 147],
		"papayawhip": [255, 239, 213],
		"peachpuff": [255, 218, 185],
		"peru": [205, 133, 63],
		"pink": [255, 192, 203],
		"plum": [221, 160, 221],
		"powderblue": [176, 224, 230],
		"purple": [128, 0, 128],
		"rebeccapurple": [102, 51, 153],
		"red": [255, 0, 0],
		"rosybrown": [188, 143, 143],
		"royalblue": [65, 105, 225],
		"saddlebrown": [139, 69, 19],
		"salmon": [250, 128, 114],
		"sandybrown": [244, 164, 96],
		"seagreen": [46, 139, 87],
		"seashell": [255, 245, 238],
		"sienna": [160, 82, 45],
		"silver": [192, 192, 192],
		"skyblue": [135, 206, 235],
		"slateblue": [106, 90, 205],
		"slategray": [112, 128, 144],
		"slategrey": [112, 128, 144],
		"snow": [255, 250, 250],
		"springgreen": [0, 255, 127],
		"steelblue": [70, 130, 180],
		"tan": [210, 180, 140],
		"teal": [0, 128, 128],
		"thistle": [216, 191, 216],
		"tomato": [255, 99, 71],
		"turquoise": [64, 224, 208],
		"violet": [238, 130, 238],
		"wheat": [245, 222, 179],
		"white": [255, 255, 255],
		"whitesmoke": [245, 245, 245],
		"yellow": [255, 255, 0],
		"yellowgreen": [154, 205, 50]
	};
	return colorName;
}

var hasRequiredColor;

function requireColor () {
	if (hasRequiredColor) return color;
	hasRequiredColor = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    parseColor: ()=>parseColor,
		    formatColor: ()=>formatColor
		});
		const _colorName = /*#__PURE__*/ _interopRequireDefault(requireColorName());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		let HEX = /^#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i;
		let SHORT_HEX = /^#([a-f\d])([a-f\d])([a-f\d])([a-f\d])?$/i;
		let VALUE = /(?:\d+|\d*\.\d+)%?/;
		let SEP = /(?:\s*,\s*|\s+)/;
		let ALPHA_SEP = /\s*[,/]\s*/;
		let CUSTOM_PROPERTY = /var\(--(?:[^ )]*?)\)/;
		let RGB = new RegExp(`^(rgba?)\\(\\s*(${VALUE.source}|${CUSTOM_PROPERTY.source})(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${ALPHA_SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?\\s*\\)$`);
		let HSL = new RegExp(`^(hsla?)\\(\\s*((?:${VALUE.source})(?:deg|rad|grad|turn)?|${CUSTOM_PROPERTY.source})(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?(?:${ALPHA_SEP.source}(${VALUE.source}|${CUSTOM_PROPERTY.source}))?\\s*\\)$`);
		function parseColor(value, { loose =false  } = {}) {
		    var _match_, _match__toString;
		    if (typeof value !== "string") {
		        return null;
		    }
		    value = value.trim();
		    if (value === "transparent") {
		        return {
		            mode: "rgb",
		            color: [
		                "0",
		                "0",
		                "0"
		            ],
		            alpha: "0"
		        };
		    }
		    if (value in _colorName.default) {
		        return {
		            mode: "rgb",
		            color: _colorName.default[value].map((v)=>v.toString())
		        };
		    }
		    let hex = value.replace(SHORT_HEX, (_, r, g, b, a)=>[
		            "#",
		            r,
		            r,
		            g,
		            g,
		            b,
		            b,
		            a ? a + a : ""
		        ].join("")).match(HEX);
		    if (hex !== null) {
		        return {
		            mode: "rgb",
		            color: [
		                parseInt(hex[1], 16),
		                parseInt(hex[2], 16),
		                parseInt(hex[3], 16)
		            ].map((v)=>v.toString()),
		            alpha: hex[4] ? (parseInt(hex[4], 16) / 255).toString() : undefined
		        };
		    }
		    var _value_match;
		    let match = (_value_match = value.match(RGB)) !== null && _value_match !== void 0 ? _value_match : value.match(HSL);
		    if (match === null) {
		        return null;
		    }
		    let color = [
		        match[2],
		        match[3],
		        match[4]
		    ].filter(Boolean).map((v)=>v.toString());
		    // rgba(var(--my-color), 0.1)
		    // hsla(var(--my-color), 0.1)
		    if (color.length === 2 && color[0].startsWith("var(")) {
		        return {
		            mode: match[1],
		            color: [
		                color[0]
		            ],
		            alpha: color[1]
		        };
		    }
		    if (!loose && color.length !== 3) {
		        return null;
		    }
		    if (color.length < 3 && !color.some((part)=>/^var\(.*?\)$/.test(part))) {
		        return null;
		    }
		    return {
		        mode: match[1],
		        color,
		        alpha: (_match_ = match[5]) === null || _match_ === void 0 ? void 0 : (_match__toString = _match_.toString) === null || _match__toString === void 0 ? void 0 : _match__toString.call(_match_)
		    };
		}
		function formatColor({ mode , color , alpha  }) {
		    let hasAlpha = alpha !== undefined;
		    if (mode === "rgba" || mode === "hsla") {
		        return `${mode}(${color.join(", ")}${hasAlpha ? `, ${alpha}` : ""})`;
		    }
		    return `${mode}(${color.join(" ")}${hasAlpha ? ` / ${alpha}` : ""})`;
		}
} (color));
	return color;
}

var hasRequiredWithAlphaVariable;

function requireWithAlphaVariable () {
	if (hasRequiredWithAlphaVariable) return withAlphaVariable;
	hasRequiredWithAlphaVariable = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    withAlphaValue: ()=>withAlphaValue,
		    default: ()=>withAlphaVariable
		});
		const _color = requireColor();
		function withAlphaValue(color, alphaValue, defaultValue) {
		    if (typeof color === "function") {
		        return color({
		            opacityValue: alphaValue
		        });
		    }
		    let parsed = (0, _color.parseColor)(color, {
		        loose: true
		    });
		    if (parsed === null) {
		        return defaultValue;
		    }
		    return (0, _color.formatColor)({
		        ...parsed,
		        alpha: alphaValue
		    });
		}
		function withAlphaVariable({ color , property , variable  }) {
		    let properties = [].concat(property);
		    if (typeof color === "function") {
		        return {
		            [variable]: "1",
		            ...Object.fromEntries(properties.map((p)=>{
		                return [
		                    p,
		                    color({
		                        opacityVariable: variable,
		                        opacityValue: `var(${variable})`
		                    })
		                ];
		            }))
		        };
		    }
		    const parsed = (0, _color.parseColor)(color);
		    if (parsed === null) {
		        return Object.fromEntries(properties.map((p)=>[
		                p,
		                color
		            ]));
		    }
		    if (parsed.alpha !== undefined) {
		        // Has an alpha value, return color as-is
		        return Object.fromEntries(properties.map((p)=>[
		                p,
		                color
		            ]));
		    }
		    return {
		        [variable]: "1",
		        ...Object.fromEntries(properties.map((p)=>{
		            return [
		                p,
		                (0, _color.formatColor)({
		                    ...parsed,
		                    alpha: `var(${variable})`
		                })
		            ];
		        }))
		    };
		}
} (withAlphaVariable));
	return withAlphaVariable;
}

var dataTypes = {};

var parseBoxShadowValue = {};

var splitAtTopLevelOnly = {};

/**
 * This splits a string on a top-level character.
 *
 * Regex doesn't support recursion (at least not the JS-flavored version).
 * So we have to use a tiny state machine to keep track of paren placement.
 *
 * Expected behavior using commas:
 * var(--a, 0 0 1px rgb(0, 0, 0)), 0 0 1px rgb(0, 0, 0)
 *       ─┬─             ┬  ┬    ┬
 *        x              x  x    ╰──────── Split because top-level
 *        ╰──────────────┴──┴───────────── Ignored b/c inside >= 1 levels of parens
 *
 * @param {string} input
 * @param {string} separator
 */

var hasRequiredSplitAtTopLevelOnly;

function requireSplitAtTopLevelOnly () {
	if (hasRequiredSplitAtTopLevelOnly) return splitAtTopLevelOnly;
	hasRequiredSplitAtTopLevelOnly = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "splitAtTopLevelOnly", {
		    enumerable: true,
		    get: ()=>splitAtTopLevelOnly
		});
		function splitAtTopLevelOnly(input, separator) {
		    let stack = [];
		    let parts = [];
		    let lastPos = 0;
		    let isEscaped = false;
		    for(let idx = 0; idx < input.length; idx++){
		        let char = input[idx];
		        if (stack.length === 0 && char === separator[0] && !isEscaped) {
		            if (separator.length === 1 || input.slice(idx, idx + separator.length) === separator) {
		                parts.push(input.slice(lastPos, idx));
		                lastPos = idx + separator.length;
		            }
		        }
		        if (isEscaped) {
		            isEscaped = false;
		        } else if (char === "\\") {
		            isEscaped = true;
		        }
		        if (char === "(" || char === "[" || char === "{") {
		            stack.push(char);
		        } else if (char === ")" && stack[stack.length - 1] === "(" || char === "]" && stack[stack.length - 1] === "[" || char === "}" && stack[stack.length - 1] === "{") {
		            stack.pop();
		        }
		    }
		    parts.push(input.slice(lastPos));
		    return parts;
		}
} (splitAtTopLevelOnly));
	return splitAtTopLevelOnly;
}

var hasRequiredParseBoxShadowValue;

function requireParseBoxShadowValue () {
	if (hasRequiredParseBoxShadowValue) return parseBoxShadowValue;
	hasRequiredParseBoxShadowValue = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    parseBoxShadowValue: ()=>parseBoxShadowValue,
		    formatBoxShadowValue: ()=>formatBoxShadowValue
		});
		const _splitAtTopLevelOnly = requireSplitAtTopLevelOnly();
		let KEYWORDS = new Set([
		    "inset",
		    "inherit",
		    "initial",
		    "revert",
		    "unset"
		]);
		let SPACE = /\ +(?![^(]*\))/g // Similar to the one above, but with spaces instead.
		;
		let LENGTH = /^-?(\d+|\.\d+)(.*?)$/g;
		function parseBoxShadowValue(input) {
		    let shadows = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(input, ",");
		    return shadows.map((shadow)=>{
		        let value = shadow.trim();
		        let result = {
		            raw: value
		        };
		        let parts = value.split(SPACE);
		        let seen = new Set();
		        for (let part of parts){
		            // Reset index, since the regex is stateful.
		            LENGTH.lastIndex = 0;
		            // Keyword
		            if (!seen.has("KEYWORD") && KEYWORDS.has(part)) {
		                result.keyword = part;
		                seen.add("KEYWORD");
		            } else if (LENGTH.test(part)) {
		                if (!seen.has("X")) {
		                    result.x = part;
		                    seen.add("X");
		                } else if (!seen.has("Y")) {
		                    result.y = part;
		                    seen.add("Y");
		                } else if (!seen.has("BLUR")) {
		                    result.blur = part;
		                    seen.add("BLUR");
		                } else if (!seen.has("SPREAD")) {
		                    result.spread = part;
		                    seen.add("SPREAD");
		                }
		            } else {
		                if (!result.color) {
		                    result.color = part;
		                } else {
		                    if (!result.unknown) result.unknown = [];
		                    result.unknown.push(part);
		                }
		            }
		        }
		        // Check if valid
		        result.valid = result.x !== undefined && result.y !== undefined;
		        return result;
		    });
		}
		function formatBoxShadowValue(shadows) {
		    return shadows.map((shadow)=>{
		        if (!shadow.valid) {
		            return shadow.raw;
		        }
		        return [
		            shadow.keyword,
		            shadow.x,
		            shadow.y,
		            shadow.blur,
		            shadow.spread,
		            shadow.color
		        ].filter(Boolean).join(" ");
		    }).join(", ");
		}
} (parseBoxShadowValue));
	return parseBoxShadowValue;
}

var hasRequiredDataTypes;

function requireDataTypes () {
	if (hasRequiredDataTypes) return dataTypes;
	hasRequiredDataTypes = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    normalize: ()=>normalize,
		    url: ()=>url,
		    number: ()=>number,
		    percentage: ()=>percentage,
		    length: ()=>length,
		    lineWidth: ()=>lineWidth,
		    shadow: ()=>shadow,
		    color: ()=>color,
		    image: ()=>image,
		    gradient: ()=>gradient,
		    position: ()=>position,
		    familyName: ()=>familyName,
		    genericName: ()=>genericName,
		    absoluteSize: ()=>absoluteSize,
		    relativeSize: ()=>relativeSize
		});
		const _color = requireColor();
		const _parseBoxShadowValue = requireParseBoxShadowValue();
		const _splitAtTopLevelOnly = requireSplitAtTopLevelOnly();
		let cssFunctions = [
		    "min",
		    "max",
		    "clamp",
		    "calc"
		];
		// Ref: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Types
		function isCSSFunction(value) {
		    return cssFunctions.some((fn)=>new RegExp(`^${fn}\\(.*\\)`).test(value));
		}
		const placeholder = "--tw-placeholder";
		const placeholderRe = new RegExp(placeholder, "g");
		function normalize(value, isRoot = true) {
		    if (value.startsWith("--")) {
		        return `var(${value})`;
		    }
		    // Keep raw strings if it starts with `url(`
		    if (value.includes("url(")) {
		        return value.split(/(url\(.*?\))/g).filter(Boolean).map((part)=>{
		            if (/^url\(.*?\)$/.test(part)) {
		                return part;
		            }
		            return normalize(part, false);
		        }).join("");
		    }
		    // Convert `_` to ` `, except for escaped underscores `\_`
		    value = value.replace(/([^\\])_+/g, (fullMatch, characterBefore)=>characterBefore + " ".repeat(fullMatch.length - 1)).replace(/^_/g, " ").replace(/\\_/g, "_");
		    // Remove leftover whitespace
		    if (isRoot) {
		        value = value.trim();
		    }
		    // Add spaces around operators inside math functions like calc() that do not follow an operator
		    // or '('.
		    value = value.replace(/(calc|min|max|clamp)\(.+\)/g, (match)=>{
		        let vars = [];
		        return match.replace(/var\((--.+?)[,)]/g, (match, g1)=>{
		            vars.push(g1);
		            return match.replace(g1, placeholder);
		        }).replace(/(-?\d*\.?\d(?!\b-\d.+[,)](?![^+\-/*])\D)(?:%|[a-z]+)?|\))([+\-/*])/g, "$1 $2 ").replace(placeholderRe, ()=>vars.shift());
		    });
		    return value;
		}
		function url(value) {
		    return value.startsWith("url(");
		}
		function number(value) {
		    return !isNaN(Number(value)) || isCSSFunction(value);
		}
		function percentage(value) {
		    return value.endsWith("%") && number(value.slice(0, -1)) || isCSSFunction(value);
		}
		// Please refer to MDN when updating this list:
		// https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units
		// https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries#container_query_length_units
		let lengthUnits = [
		    "cm",
		    "mm",
		    "Q",
		    "in",
		    "pc",
		    "pt",
		    "px",
		    "em",
		    "ex",
		    "ch",
		    "rem",
		    "lh",
		    "rlh",
		    "vw",
		    "vh",
		    "vmin",
		    "vmax",
		    "vb",
		    "vi",
		    "svw",
		    "svh",
		    "lvw",
		    "lvh",
		    "dvw",
		    "dvh",
		    "cqw",
		    "cqh",
		    "cqi",
		    "cqb",
		    "cqmin",
		    "cqmax"
		];
		let lengthUnitsPattern = `(?:${lengthUnits.join("|")})`;
		function length(value) {
		    return value === "0" || new RegExp(`^[+-]?[0-9]*\.?[0-9]+(?:[eE][+-]?[0-9]+)?${lengthUnitsPattern}$`).test(value) || isCSSFunction(value);
		}
		let lineWidths = new Set([
		    "thin",
		    "medium",
		    "thick"
		]);
		function lineWidth(value) {
		    return lineWidths.has(value);
		}
		function shadow(value) {
		    let parsedShadows = (0, _parseBoxShadowValue.parseBoxShadowValue)(normalize(value));
		    for (let parsedShadow of parsedShadows){
		        if (!parsedShadow.valid) {
		            return false;
		        }
		    }
		    return true;
		}
		function color(value) {
		    let colors = 0;
		    let result = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, "_").every((part)=>{
		        part = normalize(part);
		        if (part.startsWith("var(")) return true;
		        if ((0, _color.parseColor)(part, {
		            loose: true
		        }) !== null) return colors++, true;
		        return false;
		    });
		    if (!result) return false;
		    return colors > 0;
		}
		function image(value) {
		    let images = 0;
		    let result = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, ",").every((part)=>{
		        part = normalize(part);
		        if (part.startsWith("var(")) return true;
		        if (url(part) || gradient(part) || [
		            "element(",
		            "image(",
		            "cross-fade(",
		            "image-set("
		        ].some((fn)=>part.startsWith(fn))) {
		            images++;
		            return true;
		        }
		        return false;
		    });
		    if (!result) return false;
		    return images > 0;
		}
		let gradientTypes = new Set([
		    "linear-gradient",
		    "radial-gradient",
		    "repeating-linear-gradient",
		    "repeating-radial-gradient",
		    "conic-gradient"
		]);
		function gradient(value) {
		    value = normalize(value);
		    for (let type of gradientTypes){
		        if (value.startsWith(`${type}(`)) {
		            return true;
		        }
		    }
		    return false;
		}
		let validPositions = new Set([
		    "center",
		    "top",
		    "right",
		    "bottom",
		    "left"
		]);
		function position(value) {
		    let positions = 0;
		    let result = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, "_").every((part)=>{
		        part = normalize(part);
		        if (part.startsWith("var(")) return true;
		        if (validPositions.has(part) || length(part) || percentage(part)) {
		            positions++;
		            return true;
		        }
		        return false;
		    });
		    if (!result) return false;
		    return positions > 0;
		}
		function familyName(value) {
		    let fonts = 0;
		    let result = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, ",").every((part)=>{
		        part = normalize(part);
		        if (part.startsWith("var(")) return true;
		        // If it contains spaces, then it should be quoted
		        if (part.includes(" ")) {
		            if (!/(['"])([^"']+)\1/g.test(part)) {
		                return false;
		            }
		        }
		        // If it starts with a number, it's invalid
		        if (/^\d/g.test(part)) {
		            return false;
		        }
		        fonts++;
		        return true;
		    });
		    if (!result) return false;
		    return fonts > 0;
		}
		let genericNames = new Set([
		    "serif",
		    "sans-serif",
		    "monospace",
		    "cursive",
		    "fantasy",
		    "system-ui",
		    "ui-serif",
		    "ui-sans-serif",
		    "ui-monospace",
		    "ui-rounded",
		    "math",
		    "emoji",
		    "fangsong"
		]);
		function genericName(value) {
		    return genericNames.has(value);
		}
		let absoluteSizes = new Set([
		    "xx-small",
		    "x-small",
		    "small",
		    "medium",
		    "large",
		    "x-large",
		    "x-large",
		    "xxx-large"
		]);
		function absoluteSize(value) {
		    return absoluteSizes.has(value);
		}
		let relativeSizes = new Set([
		    "larger",
		    "smaller"
		]);
		function relativeSize(value) {
		    return relativeSizes.has(value);
		}
} (dataTypes));
	return dataTypes;
}

var validateFormalSyntax = {};

var hasRequiredValidateFormalSyntax;

function requireValidateFormalSyntax () {
	if (hasRequiredValidateFormalSyntax) return validateFormalSyntax;
	hasRequiredValidateFormalSyntax = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "backgroundSize", {
		    enumerable: true,
		    get: ()=>backgroundSize
		});
		const _dataTypes = requireDataTypes();
		const _splitAtTopLevelOnly = requireSplitAtTopLevelOnly();
		function backgroundSize(value) {
		    let keywordValues = [
		        "cover",
		        "contain"
		    ];
		    // the <length-percentage> type will probably be a css function
		    // so we have to use `splitAtTopLevelOnly`
		    return (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(value, ",").every((part)=>{
		        let sizes = (0, _splitAtTopLevelOnly.splitAtTopLevelOnly)(part, "_").filter(Boolean);
		        if (sizes.length === 1 && keywordValues.includes(sizes[0])) return true;
		        if (sizes.length !== 1 && sizes.length !== 2) return false;
		        return sizes.every((size)=>(0, _dataTypes.length)(size) || (0, _dataTypes.percentage)(size) || size === "auto");
		    });
		}
} (validateFormalSyntax));
	return validateFormalSyntax;
}

var hasRequiredPluginUtils;

function requirePluginUtils () {
	if (hasRequiredPluginUtils) return pluginUtils;
	hasRequiredPluginUtils = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    updateAllClasses: ()=>updateAllClasses,
		    asValue: ()=>asValue,
		    parseColorFormat: ()=>parseColorFormat,
		    asColor: ()=>asColor,
		    asLookupValue: ()=>asLookupValue,
		    typeMap: ()=>typeMap,
		    coerceValue: ()=>coerceValue,
		    getMatchingTypes: ()=>getMatchingTypes
		});
		const _escapeCommas = /*#__PURE__*/ _interopRequireDefault(requireEscapeCommas());
		const _withAlphaVariable = requireWithAlphaVariable();
		const _dataTypes = requireDataTypes();
		const _negateValue = /*#__PURE__*/ _interopRequireDefault(requireNegateValue());
		const _validateFormalSyntax = requireValidateFormalSyntax();
		const _featureFlagsJs = requireFeatureFlags();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function updateAllClasses(selectors, updateClass) {
		    selectors.walkClasses((sel)=>{
		        sel.value = updateClass(sel.value);
		        if (sel.raws && sel.raws.value) {
		            sel.raws.value = (0, _escapeCommas.default)(sel.raws.value);
		        }
		    });
		}
		function resolveArbitraryValue(modifier, validate) {
		    if (!isArbitraryValue(modifier)) {
		        return undefined;
		    }
		    let value = modifier.slice(1, -1);
		    if (!validate(value)) {
		        return undefined;
		    }
		    return (0, _dataTypes.normalize)(value);
		}
		function asNegativeValue(modifier, lookup = {}, validate) {
		    let positiveValue = lookup[modifier];
		    if (positiveValue !== undefined) {
		        return (0, _negateValue.default)(positiveValue);
		    }
		    if (isArbitraryValue(modifier)) {
		        let resolved = resolveArbitraryValue(modifier, validate);
		        if (resolved === undefined) {
		            return undefined;
		        }
		        return (0, _negateValue.default)(resolved);
		    }
		}
		function asValue(modifier, options = {}, { validate =()=>true  } = {}) {
		    var _options_values;
		    let value = (_options_values = options.values) === null || _options_values === void 0 ? void 0 : _options_values[modifier];
		    if (value !== undefined) {
		        return value;
		    }
		    if (options.supportsNegativeValues && modifier.startsWith("-")) {
		        return asNegativeValue(modifier.slice(1), options.values, validate);
		    }
		    return resolveArbitraryValue(modifier, validate);
		}
		function isArbitraryValue(input) {
		    return input.startsWith("[") && input.endsWith("]");
		}
		function splitUtilityModifier(modifier) {
		    let slashIdx = modifier.lastIndexOf("/");
		    if (slashIdx === -1 || slashIdx === modifier.length - 1) {
		        return [
		            modifier,
		            undefined
		        ];
		    }
		    let arbitrary = isArbitraryValue(modifier);
		    // The modifier could be of the form `[foo]/[bar]`
		    // We want to handle this case properly
		    // without affecting `[foo/bar]`
		    if (arbitrary && !modifier.includes("]/[")) {
		        return [
		            modifier,
		            undefined
		        ];
		    }
		    return [
		        modifier.slice(0, slashIdx),
		        modifier.slice(slashIdx + 1)
		    ];
		}
		function parseColorFormat(value) {
		    if (typeof value === "string" && value.includes("<alpha-value>")) {
		        let oldValue = value;
		        return ({ opacityValue =1  })=>oldValue.replace("<alpha-value>", opacityValue);
		    }
		    return value;
		}
		function unwrapArbitraryModifier(modifier) {
		    modifier = modifier.slice(1, -1);
		    if (modifier.startsWith("--")) {
		        modifier = `var(${modifier})`;
		    }
		    return modifier;
		}
		function asColor(modifier, options = {}, { tailwindConfig ={}  } = {}) {
		    var _options_values;
		    if (((_options_values = options.values) === null || _options_values === void 0 ? void 0 : _options_values[modifier]) !== undefined) {
		        var _options_values1;
		        return parseColorFormat((_options_values1 = options.values) === null || _options_values1 === void 0 ? void 0 : _options_values1[modifier]);
		    }
		    // TODO: Hoist this up to getMatchingTypes or something
		    // We do this here because we need the alpha value (if any)
		    let [color, alpha] = splitUtilityModifier(modifier);
		    if (alpha !== undefined) {
		        var _options_values2, _tailwindConfig_theme, _tailwindConfig_theme_opacity;
		        var _options_values_color;
		        let normalizedColor = (_options_values_color = (_options_values2 = options.values) === null || _options_values2 === void 0 ? void 0 : _options_values2[color]) !== null && _options_values_color !== void 0 ? _options_values_color : isArbitraryValue(color) ? color.slice(1, -1) : undefined;
		        if (normalizedColor === undefined) {
		            return undefined;
		        }
		        normalizedColor = parseColorFormat(normalizedColor);
		        if (isArbitraryValue(alpha)) {
		            return (0, _withAlphaVariable.withAlphaValue)(normalizedColor, unwrapArbitraryModifier(alpha));
		        }
		        if (((_tailwindConfig_theme = tailwindConfig.theme) === null || _tailwindConfig_theme === void 0 ? void 0 : (_tailwindConfig_theme_opacity = _tailwindConfig_theme.opacity) === null || _tailwindConfig_theme_opacity === void 0 ? void 0 : _tailwindConfig_theme_opacity[alpha]) === undefined) {
		            return undefined;
		        }
		        return (0, _withAlphaVariable.withAlphaValue)(normalizedColor, tailwindConfig.theme.opacity[alpha]);
		    }
		    return asValue(modifier, options, {
		        validate: _dataTypes.color
		    });
		}
		function asLookupValue(modifier, options = {}) {
		    var _options_values;
		    return (_options_values = options.values) === null || _options_values === void 0 ? void 0 : _options_values[modifier];
		}
		function guess(validate) {
		    return (modifier, options)=>{
		        return asValue(modifier, options, {
		            validate
		        });
		    };
		}
		let typeMap = {
		    any: asValue,
		    color: asColor,
		    url: guess(_dataTypes.url),
		    image: guess(_dataTypes.image),
		    length: guess(_dataTypes.length),
		    percentage: guess(_dataTypes.percentage),
		    position: guess(_dataTypes.position),
		    lookup: asLookupValue,
		    "generic-name": guess(_dataTypes.genericName),
		    "family-name": guess(_dataTypes.familyName),
		    number: guess(_dataTypes.number),
		    "line-width": guess(_dataTypes.lineWidth),
		    "absolute-size": guess(_dataTypes.absoluteSize),
		    "relative-size": guess(_dataTypes.relativeSize),
		    shadow: guess(_dataTypes.shadow),
		    size: guess(_validateFormalSyntax.backgroundSize)
		};
		let supportedTypes = Object.keys(typeMap);
		function splitAtFirst(input, delim) {
		    let idx = input.indexOf(delim);
		    if (idx === -1) return [
		        undefined,
		        input
		    ];
		    return [
		        input.slice(0, idx),
		        input.slice(idx + 1)
		    ];
		}
		function coerceValue(types, modifier, options, tailwindConfig) {
		    if (options.values && modifier in options.values) {
		        for (let { type  } of types !== null && types !== void 0 ? types : []){
		            let result = typeMap[type](modifier, options, {
		                tailwindConfig
		            });
		            if (result === undefined) {
		                continue;
		            }
		            return [
		                result,
		                type,
		                null
		            ];
		        }
		    }
		    if (isArbitraryValue(modifier)) {
		        let arbitraryValue = modifier.slice(1, -1);
		        let [explicitType, value] = splitAtFirst(arbitraryValue, ":");
		        // It could be that this resolves to `url(https` which is not a valid
		        // identifier. We currently only support "simple" words with dashes or
		        // underscores. E.g.: family-name
		        if (!/^[\w-_]+$/g.test(explicitType)) {
		            value = arbitraryValue;
		        } else if (explicitType !== undefined && !supportedTypes.includes(explicitType)) {
		            return [];
		        }
		        if (value.length > 0 && supportedTypes.includes(explicitType)) {
		            return [
		                asValue(`[${value}]`, options),
		                explicitType,
		                null
		            ];
		        }
		    }
		    let matches = getMatchingTypes(types, modifier, options, tailwindConfig);
		    // Find first matching type
		    for (let match of matches){
		        return match;
		    }
		    return [];
		}
		function* getMatchingTypes(types, rawModifier, options, tailwindConfig) {
		    let modifiersEnabled = (0, _featureFlagsJs.flagEnabled)(tailwindConfig, "generalizedModifiers");
		    let [modifier, utilityModifier] = splitUtilityModifier(rawModifier);
		    let canUseUtilityModifier = modifiersEnabled && options.modifiers != null && (options.modifiers === "any" || typeof options.modifiers === "object" && (utilityModifier && isArbitraryValue(utilityModifier) || utilityModifier in options.modifiers));
		    if (!canUseUtilityModifier) {
		        modifier = rawModifier;
		        utilityModifier = undefined;
		    }
		    if (utilityModifier !== undefined && modifier === "") {
		        modifier = "DEFAULT";
		    }
		    // Check the full value first
		    // TODO: Move to asValue… somehow
		    if (utilityModifier !== undefined) {
		        if (typeof options.modifiers === "object") {
		            var _options_modifiers;
		            var _options_modifiers_utilityModifier;
		            let configValue = (_options_modifiers_utilityModifier = (_options_modifiers = options.modifiers) === null || _options_modifiers === void 0 ? void 0 : _options_modifiers[utilityModifier]) !== null && _options_modifiers_utilityModifier !== void 0 ? _options_modifiers_utilityModifier : null;
		            if (configValue !== null) {
		                utilityModifier = configValue;
		            } else if (isArbitraryValue(utilityModifier)) {
		                utilityModifier = unwrapArbitraryModifier(utilityModifier);
		            }
		        }
		    }
		    for (let { type  } of types !== null && types !== void 0 ? types : []){
		        let result = typeMap[type](modifier, options, {
		            tailwindConfig
		        });
		        if (result === undefined) {
		            continue;
		        }
		        yield [
		            result,
		            type,
		            utilityModifier !== null && utilityModifier !== void 0 ? utilityModifier : null
		        ];
		    }
		}
} (pluginUtils));
	return pluginUtils;
}

var toColorValue = {};

var hasRequiredToColorValue;

function requireToColorValue () {
	if (hasRequiredToColorValue) return toColorValue;
	hasRequiredToColorValue = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>toColorValue
		});
		function toColorValue(maybeFunction) {
		    return typeof maybeFunction === "function" ? maybeFunction({}) : maybeFunction;
		}
} (toColorValue));
	return toColorValue;
}

var hasRequiredResolveConfig$1;

function requireResolveConfig$1 () {
	if (hasRequiredResolveConfig$1) return resolveConfig;
	hasRequiredResolveConfig$1 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>resolveConfig
		});
		const _negateValue = /*#__PURE__*/ _interopRequireDefault(requireNegateValue());
		const _corePluginList = /*#__PURE__*/ _interopRequireDefault(requireCorePluginList());
		const _configurePlugins = /*#__PURE__*/ _interopRequireDefault(requireConfigurePlugins());
		const _colors = /*#__PURE__*/ _interopRequireDefault(requireColors());
		const _defaults = requireDefaults();
		const _toPath = requireToPath();
		const _normalizeConfig = requireNormalizeConfig();
		const _isPlainObject = /*#__PURE__*/ _interopRequireDefault(requireIsPlainObject());
		const _cloneDeep = requireCloneDeep();
		const _pluginUtils = requirePluginUtils();
		const _withAlphaVariable = requireWithAlphaVariable();
		const _toColorValue = /*#__PURE__*/ _interopRequireDefault(requireToColorValue());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function isFunction(input) {
		    return typeof input === "function";
		}
		function mergeWith(target, ...sources) {
		    let customizer = sources.pop();
		    for (let source of sources){
		        for(let k in source){
		            let merged = customizer(target[k], source[k]);
		            if (merged === undefined) {
		                if ((0, _isPlainObject.default)(target[k]) && (0, _isPlainObject.default)(source[k])) {
		                    target[k] = mergeWith({}, target[k], source[k], customizer);
		                } else {
		                    target[k] = source[k];
		                }
		            } else {
		                target[k] = merged;
		            }
		        }
		    }
		    return target;
		}
		const configUtils = {
		    colors: _colors.default,
		    negative (scale) {
		        // TODO: Log that this function isn't really needed anymore?
		        return Object.keys(scale).filter((key)=>scale[key] !== "0").reduce((negativeScale, key)=>{
		            let negativeValue = (0, _negateValue.default)(scale[key]);
		            if (negativeValue !== undefined) {
		                negativeScale[`-${key}`] = negativeValue;
		            }
		            return negativeScale;
		        }, {});
		    },
		    breakpoints (screens) {
		        return Object.keys(screens).filter((key)=>typeof screens[key] === "string").reduce((breakpoints, key)=>({
		                ...breakpoints,
		                [`screen-${key}`]: screens[key]
		            }), {});
		    }
		};
		function value(valueToResolve, ...args) {
		    return isFunction(valueToResolve) ? valueToResolve(...args) : valueToResolve;
		}
		function collectExtends(items) {
		    return items.reduce((merged, { extend  })=>{
		        return mergeWith(merged, extend, (mergedValue, extendValue)=>{
		            if (mergedValue === undefined) {
		                return [
		                    extendValue
		                ];
		            }
		            if (Array.isArray(mergedValue)) {
		                return [
		                    extendValue,
		                    ...mergedValue
		                ];
		            }
		            return [
		                extendValue,
		                mergedValue
		            ];
		        });
		    }, {});
		}
		function mergeThemes(themes) {
		    return {
		        ...themes.reduce((merged, theme)=>(0, _defaults.defaults)(merged, theme), {}),
		        // In order to resolve n config objects, we combine all of their `extend` properties
		        // into arrays instead of objects so they aren't overridden.
		        extend: collectExtends(themes)
		    };
		}
		function mergeExtensionCustomizer(merged, value) {
		    // When we have an array of objects, we do want to merge it
		    if (Array.isArray(merged) && (0, _isPlainObject.default)(merged[0])) {
		        return merged.concat(value);
		    }
		    // When the incoming value is an array, and the existing config is an object, prepend the existing object
		    if (Array.isArray(value) && (0, _isPlainObject.default)(value[0]) && (0, _isPlainObject.default)(merged)) {
		        return [
		            merged,
		            ...value
		        ];
		    }
		    // Override arrays (for example for font-families, box-shadows, ...)
		    if (Array.isArray(value)) {
		        return value;
		    }
		    // Execute default behaviour
		    return undefined;
		}
		function mergeExtensions({ extend , ...theme }) {
		    return mergeWith(theme, extend, (themeValue, extensions)=>{
		        // The `extend` property is an array, so we need to check if it contains any functions
		        if (!isFunction(themeValue) && !extensions.some(isFunction)) {
		            return mergeWith({}, themeValue, ...extensions, mergeExtensionCustomizer);
		        }
		        return (resolveThemePath, utils)=>mergeWith({}, ...[
		                themeValue,
		                ...extensions
		            ].map((e)=>value(e, resolveThemePath, utils)), mergeExtensionCustomizer);
		    });
		}
		/**
		 *
		 * @param {string} key
		 * @return {Iterable<string[] & {alpha: string | undefined}>}
		 */ function* toPaths(key) {
		    let path = (0, _toPath.toPath)(key);
		    if (path.length === 0) {
		        return;
		    }
		    yield path;
		    if (Array.isArray(key)) {
		        return;
		    }
		    let pattern = /^(.*?)\s*\/\s*([^/]+)$/;
		    let matches = key.match(pattern);
		    if (matches !== null) {
		        let [, prefix, alpha] = matches;
		        let newPath = (0, _toPath.toPath)(prefix);
		        newPath.alpha = alpha;
		        yield newPath;
		    }
		}
		function resolveFunctionKeys(object) {
		    // theme('colors.red.500 / 0.5') -> ['colors', 'red', '500 / 0', '5]
		    const resolvePath = (key, defaultValue)=>{
		        for (const path of toPaths(key)){
		            let index = 0;
		            let val = object;
		            while(val !== undefined && val !== null && index < path.length){
		                val = val[path[index++]];
		                let shouldResolveAsFn = isFunction(val) && (path.alpha === undefined || index <= path.length - 1);
		                val = shouldResolveAsFn ? val(resolvePath, configUtils) : val;
		            }
		            if (val !== undefined) {
		                if (path.alpha !== undefined) {
		                    let normalized = (0, _pluginUtils.parseColorFormat)(val);
		                    return (0, _withAlphaVariable.withAlphaValue)(normalized, path.alpha, (0, _toColorValue.default)(normalized));
		                }
		                if ((0, _isPlainObject.default)(val)) {
		                    return (0, _cloneDeep.cloneDeep)(val);
		                }
		                return val;
		            }
		        }
		        return defaultValue;
		    };
		    Object.assign(resolvePath, {
		        theme: resolvePath,
		        ...configUtils
		    });
		    return Object.keys(object).reduce((resolved, key)=>{
		        resolved[key] = isFunction(object[key]) ? object[key](resolvePath, configUtils) : object[key];
		        return resolved;
		    }, {});
		}
		function extractPluginConfigs(configs) {
		    let allConfigs = [];
		    configs.forEach((config)=>{
		        allConfigs = [
		            ...allConfigs,
		            config
		        ];
		        var _config_plugins;
		        const plugins = (_config_plugins = config === null || config === void 0 ? void 0 : config.plugins) !== null && _config_plugins !== void 0 ? _config_plugins : [];
		        if (plugins.length === 0) {
		            return;
		        }
		        plugins.forEach((plugin)=>{
		            if (plugin.__isOptionsFunction) {
		                plugin = plugin();
		            }
		            var _plugin_config;
		            allConfigs = [
		                ...allConfigs,
		                ...extractPluginConfigs([
		                    (_plugin_config = plugin === null || plugin === void 0 ? void 0 : plugin.config) !== null && _plugin_config !== void 0 ? _plugin_config : {}
		                ])
		            ];
		        });
		    });
		    return allConfigs;
		}
		function resolveCorePlugins(corePluginConfigs) {
		    const result = [
		        ...corePluginConfigs
		    ].reduceRight((resolved, corePluginConfig)=>{
		        if (isFunction(corePluginConfig)) {
		            return corePluginConfig({
		                corePlugins: resolved
		            });
		        }
		        return (0, _configurePlugins.default)(corePluginConfig, resolved);
		    }, _corePluginList.default);
		    return result;
		}
		function resolvePluginLists(pluginLists) {
		    const result = [
		        ...pluginLists
		    ].reduceRight((resolved, pluginList)=>{
		        return [
		            ...resolved,
		            ...pluginList
		        ];
		    }, []);
		    return result;
		}
		function resolveConfig(configs) {
		    let allConfigs = [
		        ...extractPluginConfigs(configs),
		        {
		            prefix: "",
		            important: false,
		            separator: ":"
		        }
		    ];
		    var _t_theme, _c_plugins;
		    return (0, _normalizeConfig.normalizeConfig)((0, _defaults.defaults)({
		        theme: resolveFunctionKeys(mergeExtensions(mergeThemes(allConfigs.map((t)=>{
		            return (_t_theme = t === null || t === void 0 ? void 0 : t.theme) !== null && _t_theme !== void 0 ? _t_theme : {};
		        })))),
		        corePlugins: resolveCorePlugins(allConfigs.map((c)=>c.corePlugins)),
		        plugins: resolvePluginLists(configs.map((c)=>{
		            return (_c_plugins = c === null || c === void 0 ? void 0 : c.plugins) !== null && _c_plugins !== void 0 ? _c_plugins : [];
		        }))
		    }, ...allConfigs));
		}
} (resolveConfig));
	return resolveConfig;
}

var getAllConfigs = {};

var config_full;
var hasRequiredConfig_full;

function requireConfig_full () {
	if (hasRequiredConfig_full) return config_full;
	hasRequiredConfig_full = 1;
	config_full = {
	  content: [],
	  presets: [],
	  darkMode: 'media', // or 'class'
	  theme: {
	    accentColor: ({ theme }) => ({
	      ...theme('colors'),
	      auto: 'auto',
	    }),
	    animation: {
	      none: 'none',
	      spin: 'spin 1s linear infinite',
	      ping: 'ping 1s cubic-bezier(0, 0, 0.2, 1) infinite',
	      pulse: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite',
	      bounce: 'bounce 1s infinite',
	    },
	    aria: {
	      checked: 'checked="true"',
	      disabled: 'disabled="true"',
	      expanded: 'expanded="true"',
	      hidden: 'hidden="true"',
	      pressed: 'pressed="true"',
	      readonly: 'readonly="true"',
	      required: 'required="true"',
	      selected: 'selected="true"',
	    },
	    aspectRatio: {
	      auto: 'auto',
	      square: '1 / 1',
	      video: '16 / 9',
	    },
	    backdropBlur: ({ theme }) => theme('blur'),
	    backdropBrightness: ({ theme }) => theme('brightness'),
	    backdropContrast: ({ theme }) => theme('contrast'),
	    backdropGrayscale: ({ theme }) => theme('grayscale'),
	    backdropHueRotate: ({ theme }) => theme('hueRotate'),
	    backdropInvert: ({ theme }) => theme('invert'),
	    backdropOpacity: ({ theme }) => theme('opacity'),
	    backdropSaturate: ({ theme }) => theme('saturate'),
	    backdropSepia: ({ theme }) => theme('sepia'),
	    backgroundColor: ({ theme }) => theme('colors'),
	    backgroundImage: {
	      none: 'none',
	      'gradient-to-t': 'linear-gradient(to top, var(--tw-gradient-stops))',
	      'gradient-to-tr': 'linear-gradient(to top right, var(--tw-gradient-stops))',
	      'gradient-to-r': 'linear-gradient(to right, var(--tw-gradient-stops))',
	      'gradient-to-br': 'linear-gradient(to bottom right, var(--tw-gradient-stops))',
	      'gradient-to-b': 'linear-gradient(to bottom, var(--tw-gradient-stops))',
	      'gradient-to-bl': 'linear-gradient(to bottom left, var(--tw-gradient-stops))',
	      'gradient-to-l': 'linear-gradient(to left, var(--tw-gradient-stops))',
	      'gradient-to-tl': 'linear-gradient(to top left, var(--tw-gradient-stops))',
	    },
	    backgroundOpacity: ({ theme }) => theme('opacity'),
	    backgroundPosition: {
	      bottom: 'bottom',
	      center: 'center',
	      left: 'left',
	      'left-bottom': 'left bottom',
	      'left-top': 'left top',
	      right: 'right',
	      'right-bottom': 'right bottom',
	      'right-top': 'right top',
	      top: 'top',
	    },
	    backgroundSize: {
	      auto: 'auto',
	      cover: 'cover',
	      contain: 'contain',
	    },
	    blur: {
	      0: '0',
	      none: '0',
	      sm: '4px',
	      DEFAULT: '8px',
	      md: '12px',
	      lg: '16px',
	      xl: '24px',
	      '2xl': '40px',
	      '3xl': '64px',
	    },
	    borderColor: ({ theme }) => ({
	      ...theme('colors'),
	      DEFAULT: theme('colors.gray.200', 'currentColor'),
	    }),
	    borderOpacity: ({ theme }) => theme('opacity'),
	    borderRadius: {
	      none: '0px',
	      sm: '0.125rem',
	      DEFAULT: '0.25rem',
	      md: '0.375rem',
	      lg: '0.5rem',
	      xl: '0.75rem',
	      '2xl': '1rem',
	      '3xl': '1.5rem',
	      full: '9999px',
	    },
	    borderSpacing: ({ theme }) => ({
	      ...theme('spacing'),
	    }),
	    borderWidth: {
	      DEFAULT: '1px',
	      0: '0px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    boxShadow: {
	      sm: '0 1px 2px 0 rgb(0 0 0 / 0.05)',
	      DEFAULT: '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',
	      md: '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
	      lg: '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)',
	      xl: '0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)',
	      '2xl': '0 25px 50px -12px rgb(0 0 0 / 0.25)',
	      inner: 'inset 0 2px 4px 0 rgb(0 0 0 / 0.05)',
	      none: 'none',
	    },
	    boxShadowColor: ({ theme }) => theme('colors'),
	    brightness: {
	      0: '0',
	      50: '.5',
	      75: '.75',
	      90: '.9',
	      95: '.95',
	      100: '1',
	      105: '1.05',
	      110: '1.1',
	      125: '1.25',
	      150: '1.5',
	      200: '2',
	    },
	    caretColor: ({ theme }) => theme('colors'),
	    colors: ({ colors }) => ({
	      inherit: colors.inherit,
	      current: colors.current,
	      transparent: colors.transparent,
	      black: colors.black,
	      white: colors.white,
	      slate: colors.slate,
	      gray: colors.gray,
	      zinc: colors.zinc,
	      neutral: colors.neutral,
	      stone: colors.stone,
	      red: colors.red,
	      orange: colors.orange,
	      amber: colors.amber,
	      yellow: colors.yellow,
	      lime: colors.lime,
	      green: colors.green,
	      emerald: colors.emerald,
	      teal: colors.teal,
	      cyan: colors.cyan,
	      sky: colors.sky,
	      blue: colors.blue,
	      indigo: colors.indigo,
	      violet: colors.violet,
	      purple: colors.purple,
	      fuchsia: colors.fuchsia,
	      pink: colors.pink,
	      rose: colors.rose,
	    }),
	    columns: {
	      auto: 'auto',
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	      7: '7',
	      8: '8',
	      9: '9',
	      10: '10',
	      11: '11',
	      12: '12',
	      '3xs': '16rem',
	      '2xs': '18rem',
	      xs: '20rem',
	      sm: '24rem',
	      md: '28rem',
	      lg: '32rem',
	      xl: '36rem',
	      '2xl': '42rem',
	      '3xl': '48rem',
	      '4xl': '56rem',
	      '5xl': '64rem',
	      '6xl': '72rem',
	      '7xl': '80rem',
	    },
	    container: {},
	    content: {
	      none: 'none',
	    },
	    contrast: {
	      0: '0',
	      50: '.5',
	      75: '.75',
	      100: '1',
	      125: '1.25',
	      150: '1.5',
	      200: '2',
	    },
	    cursor: {
	      auto: 'auto',
	      default: 'default',
	      pointer: 'pointer',
	      wait: 'wait',
	      text: 'text',
	      move: 'move',
	      help: 'help',
	      'not-allowed': 'not-allowed',
	      none: 'none',
	      'context-menu': 'context-menu',
	      progress: 'progress',
	      cell: 'cell',
	      crosshair: 'crosshair',
	      'vertical-text': 'vertical-text',
	      alias: 'alias',
	      copy: 'copy',
	      'no-drop': 'no-drop',
	      grab: 'grab',
	      grabbing: 'grabbing',
	      'all-scroll': 'all-scroll',
	      'col-resize': 'col-resize',
	      'row-resize': 'row-resize',
	      'n-resize': 'n-resize',
	      'e-resize': 'e-resize',
	      's-resize': 's-resize',
	      'w-resize': 'w-resize',
	      'ne-resize': 'ne-resize',
	      'nw-resize': 'nw-resize',
	      'se-resize': 'se-resize',
	      'sw-resize': 'sw-resize',
	      'ew-resize': 'ew-resize',
	      'ns-resize': 'ns-resize',
	      'nesw-resize': 'nesw-resize',
	      'nwse-resize': 'nwse-resize',
	      'zoom-in': 'zoom-in',
	      'zoom-out': 'zoom-out',
	    },
	    divideColor: ({ theme }) => theme('borderColor'),
	    divideOpacity: ({ theme }) => theme('borderOpacity'),
	    divideWidth: ({ theme }) => theme('borderWidth'),
	    dropShadow: {
	      sm: '0 1px 1px rgb(0 0 0 / 0.05)',
	      DEFAULT: ['0 1px 2px rgb(0 0 0 / 0.1)', '0 1px 1px rgb(0 0 0 / 0.06)'],
	      md: ['0 4px 3px rgb(0 0 0 / 0.07)', '0 2px 2px rgb(0 0 0 / 0.06)'],
	      lg: ['0 10px 8px rgb(0 0 0 / 0.04)', '0 4px 3px rgb(0 0 0 / 0.1)'],
	      xl: ['0 20px 13px rgb(0 0 0 / 0.03)', '0 8px 5px rgb(0 0 0 / 0.08)'],
	      '2xl': '0 25px 25px rgb(0 0 0 / 0.15)',
	      none: '0 0 #0000',
	    },
	    fill: ({ theme }) => ({
	      none: 'none',
	      ...theme('colors'),
	    }),
	    flex: {
	      1: '1 1 0%',
	      auto: '1 1 auto',
	      initial: '0 1 auto',
	      none: 'none',
	    },
	    flexBasis: ({ theme }) => ({
	      auto: 'auto',
	      ...theme('spacing'),
	      '1/2': '50%',
	      '1/3': '33.333333%',
	      '2/3': '66.666667%',
	      '1/4': '25%',
	      '2/4': '50%',
	      '3/4': '75%',
	      '1/5': '20%',
	      '2/5': '40%',
	      '3/5': '60%',
	      '4/5': '80%',
	      '1/6': '16.666667%',
	      '2/6': '33.333333%',
	      '3/6': '50%',
	      '4/6': '66.666667%',
	      '5/6': '83.333333%',
	      '1/12': '8.333333%',
	      '2/12': '16.666667%',
	      '3/12': '25%',
	      '4/12': '33.333333%',
	      '5/12': '41.666667%',
	      '6/12': '50%',
	      '7/12': '58.333333%',
	      '8/12': '66.666667%',
	      '9/12': '75%',
	      '10/12': '83.333333%',
	      '11/12': '91.666667%',
	      full: '100%',
	    }),
	    flexGrow: {
	      0: '0',
	      DEFAULT: '1',
	    },
	    flexShrink: {
	      0: '0',
	      DEFAULT: '1',
	    },
	    fontFamily: {
	      sans: [
	        'ui-sans-serif',
	        'system-ui',
	        '-apple-system',
	        'BlinkMacSystemFont',
	        '"Segoe UI"',
	        'Roboto',
	        '"Helvetica Neue"',
	        'Arial',
	        '"Noto Sans"',
	        'sans-serif',
	        '"Apple Color Emoji"',
	        '"Segoe UI Emoji"',
	        '"Segoe UI Symbol"',
	        '"Noto Color Emoji"',
	      ],
	      serif: ['ui-serif', 'Georgia', 'Cambria', '"Times New Roman"', 'Times', 'serif'],
	      mono: [
	        'ui-monospace',
	        'SFMono-Regular',
	        'Menlo',
	        'Monaco',
	        'Consolas',
	        '"Liberation Mono"',
	        '"Courier New"',
	        'monospace',
	      ],
	    },
	    fontSize: {
	      xs: ['0.75rem', { lineHeight: '1rem' }],
	      sm: ['0.875rem', { lineHeight: '1.25rem' }],
	      base: ['1rem', { lineHeight: '1.5rem' }],
	      lg: ['1.125rem', { lineHeight: '1.75rem' }],
	      xl: ['1.25rem', { lineHeight: '1.75rem' }],
	      '2xl': ['1.5rem', { lineHeight: '2rem' }],
	      '3xl': ['1.875rem', { lineHeight: '2.25rem' }],
	      '4xl': ['2.25rem', { lineHeight: '2.5rem' }],
	      '5xl': ['3rem', { lineHeight: '1' }],
	      '6xl': ['3.75rem', { lineHeight: '1' }],
	      '7xl': ['4.5rem', { lineHeight: '1' }],
	      '8xl': ['6rem', { lineHeight: '1' }],
	      '9xl': ['8rem', { lineHeight: '1' }],
	    },
	    fontWeight: {
	      thin: '100',
	      extralight: '200',
	      light: '300',
	      normal: '400',
	      medium: '500',
	      semibold: '600',
	      bold: '700',
	      extrabold: '800',
	      black: '900',
	    },
	    gap: ({ theme }) => theme('spacing'),
	    gradientColorStops: ({ theme }) => theme('colors'),
	    gradientColorStopPositions: {
	      '0%': '0%',
	      '5%': '5%',
	      '10%': '10%',
	      '15%': '15%',
	      '20%': '20%',
	      '25%': '25%',
	      '30%': '30%',
	      '35%': '35%',
	      '40%': '40%',
	      '45%': '45%',
	      '50%': '50%',
	      '55%': '55%',
	      '60%': '60%',
	      '65%': '65%',
	      '70%': '70%',
	      '75%': '75%',
	      '80%': '80%',
	      '85%': '85%',
	      '90%': '90%',
	      '95%': '95%',
	      '100%': '100%',
	    },
	    grayscale: {
	      0: '0',
	      DEFAULT: '100%',
	    },
	    gridAutoColumns: {
	      auto: 'auto',
	      min: 'min-content',
	      max: 'max-content',
	      fr: 'minmax(0, 1fr)',
	    },
	    gridAutoRows: {
	      auto: 'auto',
	      min: 'min-content',
	      max: 'max-content',
	      fr: 'minmax(0, 1fr)',
	    },
	    gridColumn: {
	      auto: 'auto',
	      'span-1': 'span 1 / span 1',
	      'span-2': 'span 2 / span 2',
	      'span-3': 'span 3 / span 3',
	      'span-4': 'span 4 / span 4',
	      'span-5': 'span 5 / span 5',
	      'span-6': 'span 6 / span 6',
	      'span-7': 'span 7 / span 7',
	      'span-8': 'span 8 / span 8',
	      'span-9': 'span 9 / span 9',
	      'span-10': 'span 10 / span 10',
	      'span-11': 'span 11 / span 11',
	      'span-12': 'span 12 / span 12',
	      'span-full': '1 / -1',
	    },
	    gridColumnEnd: {
	      auto: 'auto',
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	      7: '7',
	      8: '8',
	      9: '9',
	      10: '10',
	      11: '11',
	      12: '12',
	      13: '13',
	    },
	    gridColumnStart: {
	      auto: 'auto',
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	      7: '7',
	      8: '8',
	      9: '9',
	      10: '10',
	      11: '11',
	      12: '12',
	      13: '13',
	    },
	    gridRow: {
	      auto: 'auto',
	      'span-1': 'span 1 / span 1',
	      'span-2': 'span 2 / span 2',
	      'span-3': 'span 3 / span 3',
	      'span-4': 'span 4 / span 4',
	      'span-5': 'span 5 / span 5',
	      'span-6': 'span 6 / span 6',
	      'span-full': '1 / -1',
	    },
	    gridRowEnd: {
	      auto: 'auto',
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	      7: '7',
	    },
	    gridRowStart: {
	      auto: 'auto',
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	      7: '7',
	    },
	    gridTemplateColumns: {
	      none: 'none',
	      1: 'repeat(1, minmax(0, 1fr))',
	      2: 'repeat(2, minmax(0, 1fr))',
	      3: 'repeat(3, minmax(0, 1fr))',
	      4: 'repeat(4, minmax(0, 1fr))',
	      5: 'repeat(5, minmax(0, 1fr))',
	      6: 'repeat(6, minmax(0, 1fr))',
	      7: 'repeat(7, minmax(0, 1fr))',
	      8: 'repeat(8, minmax(0, 1fr))',
	      9: 'repeat(9, minmax(0, 1fr))',
	      10: 'repeat(10, minmax(0, 1fr))',
	      11: 'repeat(11, minmax(0, 1fr))',
	      12: 'repeat(12, minmax(0, 1fr))',
	    },
	    gridTemplateRows: {
	      none: 'none',
	      1: 'repeat(1, minmax(0, 1fr))',
	      2: 'repeat(2, minmax(0, 1fr))',
	      3: 'repeat(3, minmax(0, 1fr))',
	      4: 'repeat(4, minmax(0, 1fr))',
	      5: 'repeat(5, minmax(0, 1fr))',
	      6: 'repeat(6, minmax(0, 1fr))',
	    },
	    height: ({ theme }) => ({
	      auto: 'auto',
	      ...theme('spacing'),
	      '1/2': '50%',
	      '1/3': '33.333333%',
	      '2/3': '66.666667%',
	      '1/4': '25%',
	      '2/4': '50%',
	      '3/4': '75%',
	      '1/5': '20%',
	      '2/5': '40%',
	      '3/5': '60%',
	      '4/5': '80%',
	      '1/6': '16.666667%',
	      '2/6': '33.333333%',
	      '3/6': '50%',
	      '4/6': '66.666667%',
	      '5/6': '83.333333%',
	      full: '100%',
	      screen: '100vh',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	    }),
	    hueRotate: {
	      0: '0deg',
	      15: '15deg',
	      30: '30deg',
	      60: '60deg',
	      90: '90deg',
	      180: '180deg',
	    },
	    inset: ({ theme }) => ({
	      auto: 'auto',
	      ...theme('spacing'),
	      '1/2': '50%',
	      '1/3': '33.333333%',
	      '2/3': '66.666667%',
	      '1/4': '25%',
	      '2/4': '50%',
	      '3/4': '75%',
	      full: '100%',
	    }),
	    invert: {
	      0: '0',
	      DEFAULT: '100%',
	    },
	    keyframes: {
	      spin: {
	        to: {
	          transform: 'rotate(360deg)',
	        },
	      },
	      ping: {
	        '75%, 100%': {
	          transform: 'scale(2)',
	          opacity: '0',
	        },
	      },
	      pulse: {
	        '50%': {
	          opacity: '.5',
	        },
	      },
	      bounce: {
	        '0%, 100%': {
	          transform: 'translateY(-25%)',
	          animationTimingFunction: 'cubic-bezier(0.8,0,1,1)',
	        },
	        '50%': {
	          transform: 'none',
	          animationTimingFunction: 'cubic-bezier(0,0,0.2,1)',
	        },
	      },
	    },
	    letterSpacing: {
	      tighter: '-0.05em',
	      tight: '-0.025em',
	      normal: '0em',
	      wide: '0.025em',
	      wider: '0.05em',
	      widest: '0.1em',
	    },
	    lineHeight: {
	      none: '1',
	      tight: '1.25',
	      snug: '1.375',
	      normal: '1.5',
	      relaxed: '1.625',
	      loose: '2',
	      3: '.75rem',
	      4: '1rem',
	      5: '1.25rem',
	      6: '1.5rem',
	      7: '1.75rem',
	      8: '2rem',
	      9: '2.25rem',
	      10: '2.5rem',
	    },
	    listStyleType: {
	      none: 'none',
	      disc: 'disc',
	      decimal: 'decimal',
	    },
	    listStyleImage: {
	      none: 'none',
	    },
	    margin: ({ theme }) => ({
	      auto: 'auto',
	      ...theme('spacing'),
	    }),
	    lineClamp: {
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	    },
	    maxHeight: ({ theme }) => ({
	      ...theme('spacing'),
	      none: 'none',
	      full: '100%',
	      screen: '100vh',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	    }),
	    maxWidth: ({ theme, breakpoints }) => ({
	      none: 'none',
	      0: '0rem',
	      xs: '20rem',
	      sm: '24rem',
	      md: '28rem',
	      lg: '32rem',
	      xl: '36rem',
	      '2xl': '42rem',
	      '3xl': '48rem',
	      '4xl': '56rem',
	      '5xl': '64rem',
	      '6xl': '72rem',
	      '7xl': '80rem',
	      full: '100%',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	      prose: '65ch',
	      ...breakpoints(theme('screens')),
	    }),
	    minHeight: {
	      0: '0px',
	      full: '100%',
	      screen: '100vh',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	    },
	    minWidth: {
	      0: '0px',
	      full: '100%',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	    },
	    objectPosition: {
	      bottom: 'bottom',
	      center: 'center',
	      left: 'left',
	      'left-bottom': 'left bottom',
	      'left-top': 'left top',
	      right: 'right',
	      'right-bottom': 'right bottom',
	      'right-top': 'right top',
	      top: 'top',
	    },
	    opacity: {
	      0: '0',
	      5: '0.05',
	      10: '0.1',
	      20: '0.2',
	      25: '0.25',
	      30: '0.3',
	      40: '0.4',
	      50: '0.5',
	      60: '0.6',
	      70: '0.7',
	      75: '0.75',
	      80: '0.8',
	      90: '0.9',
	      95: '0.95',
	      100: '1',
	    },
	    order: {
	      first: '-9999',
	      last: '9999',
	      none: '0',
	      1: '1',
	      2: '2',
	      3: '3',
	      4: '4',
	      5: '5',
	      6: '6',
	      7: '7',
	      8: '8',
	      9: '9',
	      10: '10',
	      11: '11',
	      12: '12',
	    },
	    outlineColor: ({ theme }) => theme('colors'),
	    outlineOffset: {
	      0: '0px',
	      1: '1px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    outlineWidth: {
	      0: '0px',
	      1: '1px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    padding: ({ theme }) => theme('spacing'),
	    placeholderColor: ({ theme }) => theme('colors'),
	    placeholderOpacity: ({ theme }) => theme('opacity'),
	    ringColor: ({ theme }) => ({
	      DEFAULT: theme('colors.blue.500', '#3b82f6'),
	      ...theme('colors'),
	    }),
	    ringOffsetColor: ({ theme }) => theme('colors'),
	    ringOffsetWidth: {
	      0: '0px',
	      1: '1px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    ringOpacity: ({ theme }) => ({
	      DEFAULT: '0.5',
	      ...theme('opacity'),
	    }),
	    ringWidth: {
	      DEFAULT: '3px',
	      0: '0px',
	      1: '1px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    rotate: {
	      0: '0deg',
	      1: '1deg',
	      2: '2deg',
	      3: '3deg',
	      6: '6deg',
	      12: '12deg',
	      45: '45deg',
	      90: '90deg',
	      180: '180deg',
	    },
	    saturate: {
	      0: '0',
	      50: '.5',
	      100: '1',
	      150: '1.5',
	      200: '2',
	    },
	    scale: {
	      0: '0',
	      50: '.5',
	      75: '.75',
	      90: '.9',
	      95: '.95',
	      100: '1',
	      105: '1.05',
	      110: '1.1',
	      125: '1.25',
	      150: '1.5',
	    },
	    screens: {
	      sm: '640px',
	      md: '768px',
	      lg: '1024px',
	      xl: '1280px',
	      '2xl': '1536px',
	    },
	    scrollMargin: ({ theme }) => ({
	      ...theme('spacing'),
	    }),
	    scrollPadding: ({ theme }) => theme('spacing'),
	    sepia: {
	      0: '0',
	      DEFAULT: '100%',
	    },
	    skew: {
	      0: '0deg',
	      1: '1deg',
	      2: '2deg',
	      3: '3deg',
	      6: '6deg',
	      12: '12deg',
	    },
	    space: ({ theme }) => ({
	      ...theme('spacing'),
	    }),
	    spacing: {
	      px: '1px',
	      0: '0px',
	      0.5: '0.125rem',
	      1: '0.25rem',
	      1.5: '0.375rem',
	      2: '0.5rem',
	      2.5: '0.625rem',
	      3: '0.75rem',
	      3.5: '0.875rem',
	      4: '1rem',
	      5: '1.25rem',
	      6: '1.5rem',
	      7: '1.75rem',
	      8: '2rem',
	      9: '2.25rem',
	      10: '2.5rem',
	      11: '2.75rem',
	      12: '3rem',
	      14: '3.5rem',
	      16: '4rem',
	      20: '5rem',
	      24: '6rem',
	      28: '7rem',
	      32: '8rem',
	      36: '9rem',
	      40: '10rem',
	      44: '11rem',
	      48: '12rem',
	      52: '13rem',
	      56: '14rem',
	      60: '15rem',
	      64: '16rem',
	      72: '18rem',
	      80: '20rem',
	      96: '24rem',
	    },
	    stroke: ({ theme }) => ({
	      none: 'none',
	      ...theme('colors'),
	    }),
	    strokeWidth: {
	      0: '0',
	      1: '1',
	      2: '2',
	    },
	    supports: {},
	    data: {},
	    textColor: ({ theme }) => theme('colors'),
	    textDecorationColor: ({ theme }) => theme('colors'),
	    textDecorationThickness: {
	      auto: 'auto',
	      'from-font': 'from-font',
	      0: '0px',
	      1: '1px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    textIndent: ({ theme }) => ({
	      ...theme('spacing'),
	    }),
	    textOpacity: ({ theme }) => theme('opacity'),
	    textUnderlineOffset: {
	      auto: 'auto',
	      0: '0px',
	      1: '1px',
	      2: '2px',
	      4: '4px',
	      8: '8px',
	    },
	    transformOrigin: {
	      center: 'center',
	      top: 'top',
	      'top-right': 'top right',
	      right: 'right',
	      'bottom-right': 'bottom right',
	      bottom: 'bottom',
	      'bottom-left': 'bottom left',
	      left: 'left',
	      'top-left': 'top left',
	    },
	    transitionDelay: {
	      0: '0s',
	      75: '75ms',
	      100: '100ms',
	      150: '150ms',
	      200: '200ms',
	      300: '300ms',
	      500: '500ms',
	      700: '700ms',
	      1000: '1000ms',
	    },
	    transitionDuration: {
	      DEFAULT: '150ms',
	      0: '0s',
	      75: '75ms',
	      100: '100ms',
	      150: '150ms',
	      200: '200ms',
	      300: '300ms',
	      500: '500ms',
	      700: '700ms',
	      1000: '1000ms',
	    },
	    transitionProperty: {
	      none: 'none',
	      all: 'all',
	      DEFAULT:
	        'color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter',
	      colors: 'color, background-color, border-color, text-decoration-color, fill, stroke',
	      opacity: 'opacity',
	      shadow: 'box-shadow',
	      transform: 'transform',
	    },
	    transitionTimingFunction: {
	      DEFAULT: 'cubic-bezier(0.4, 0, 0.2, 1)',
	      linear: 'linear',
	      in: 'cubic-bezier(0.4, 0, 1, 1)',
	      out: 'cubic-bezier(0, 0, 0.2, 1)',
	      'in-out': 'cubic-bezier(0.4, 0, 0.2, 1)',
	    },
	    translate: ({ theme }) => ({
	      ...theme('spacing'),
	      '1/2': '50%',
	      '1/3': '33.333333%',
	      '2/3': '66.666667%',
	      '1/4': '25%',
	      '2/4': '50%',
	      '3/4': '75%',
	      full: '100%',
	    }),
	    width: ({ theme }) => ({
	      auto: 'auto',
	      ...theme('spacing'),
	      '1/2': '50%',
	      '1/3': '33.333333%',
	      '2/3': '66.666667%',
	      '1/4': '25%',
	      '2/4': '50%',
	      '3/4': '75%',
	      '1/5': '20%',
	      '2/5': '40%',
	      '3/5': '60%',
	      '4/5': '80%',
	      '1/6': '16.666667%',
	      '2/6': '33.333333%',
	      '3/6': '50%',
	      '4/6': '66.666667%',
	      '5/6': '83.333333%',
	      '1/12': '8.333333%',
	      '2/12': '16.666667%',
	      '3/12': '25%',
	      '4/12': '33.333333%',
	      '5/12': '41.666667%',
	      '6/12': '50%',
	      '7/12': '58.333333%',
	      '8/12': '66.666667%',
	      '9/12': '75%',
	      '10/12': '83.333333%',
	      '11/12': '91.666667%',
	      full: '100%',
	      screen: '100vw',
	      min: 'min-content',
	      max: 'max-content',
	      fit: 'fit-content',
	    }),
	    willChange: {
	      auto: 'auto',
	      scroll: 'scroll-position',
	      contents: 'contents',
	      transform: 'transform',
	    },
	    zIndex: {
	      auto: 'auto',
	      0: '0',
	      10: '10',
	      20: '20',
	      30: '30',
	      40: '40',
	      50: '50',
	    },
	  },
	  plugins: [],
	};
	return config_full;
}

var hasRequiredGetAllConfigs;

function requireGetAllConfigs () {
	if (hasRequiredGetAllConfigs) return getAllConfigs;
	hasRequiredGetAllConfigs = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>getAllConfigs
		});
		const _configFullJs = /*#__PURE__*/ _interopRequireDefault(requireConfig_full());
		const _featureFlags = requireFeatureFlags();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function getAllConfigs(config) {
		    var _config_presets;
		    const configs = ((_config_presets = config === null || config === void 0 ? void 0 : config.presets) !== null && _config_presets !== void 0 ? _config_presets : [
		        _configFullJs.default
		    ]).slice().reverse().flatMap((preset)=>getAllConfigs(preset instanceof Function ? preset() : preset));
		    const features = {
		        // Add experimental configs here...
		        respectDefaultRingColorOpacity: {
		            theme: {
		                ringColor: ({ theme  })=>({
		                        DEFAULT: "#3b82f67f",
		                        ...theme("colors")
		                    })
		            }
		        },
		        disableColorOpacityUtilitiesByDefault: {
		            corePlugins: {
		                backgroundOpacity: false,
		                borderOpacity: false,
		                divideOpacity: false,
		                placeholderOpacity: false,
		                ringOpacity: false,
		                textOpacity: false
		            }
		        }
		    };
		    const experimentals = Object.keys(features).filter((feature)=>(0, _featureFlags.flagEnabled)(config, feature)).map((feature)=>features[feature]);
		    return [
		        config,
		        ...experimentals,
		        ...configs
		    ];
		}
} (getAllConfigs));
	return getAllConfigs;
}

var hasRequiredResolveConfig;

function requireResolveConfig () {
	if (hasRequiredResolveConfig) return resolveConfig$1;
	hasRequiredResolveConfig = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>resolveConfig
		});
		const _resolveConfig = /*#__PURE__*/ _interopRequireDefault(requireResolveConfig$1());
		const _getAllConfigs = /*#__PURE__*/ _interopRequireDefault(requireGetAllConfigs());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function resolveConfig(...configs) {
		    let [, ...defaultConfigs] = (0, _getAllConfigs.default)(configs[0]);
		    return (0, _resolveConfig.default)([
		        ...configs,
		        ...defaultConfigs
		    ]);
		}
} (resolveConfig$1));
	return resolveConfig$1;
}

var resolveConfigPath = {};

var hasRequiredResolveConfigPath;

function requireResolveConfigPath () {
	if (hasRequiredResolveConfigPath) return resolveConfigPath;
	hasRequiredResolveConfigPath = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    default: ()=>resolveConfigPath,
		    resolveDefaultConfigPath: ()=>resolveDefaultConfigPath
		});
		const _fs = /*#__PURE__*/ _interopRequireDefault(require$$3);
		const _path = /*#__PURE__*/ _interopRequireDefault(require$$3);
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		const defaultConfigFiles = [
		    "./tailwind.config.js",
		    "./tailwind.config.cjs",
		    "./tailwind.config.mjs",
		    "./tailwind.config.ts"
		];
		function isObject(value) {
		    return typeof value === "object" && value !== null;
		}
		function isEmpty(obj) {
		    return Object.keys(obj).length === 0;
		}
		function isString(value) {
		    return typeof value === "string" || value instanceof String;
		}
		function resolveConfigPath(pathOrConfig) {
		    // require('tailwindcss')({ theme: ..., variants: ... })
		    if (isObject(pathOrConfig) && pathOrConfig.config === undefined && !isEmpty(pathOrConfig)) {
		        return null;
		    }
		    // require('tailwindcss')({ config: 'custom-config.js' })
		    if (isObject(pathOrConfig) && pathOrConfig.config !== undefined && isString(pathOrConfig.config)) {
		        return _path.default.resolve(pathOrConfig.config);
		    }
		    // require('tailwindcss')({ config: { theme: ..., variants: ... } })
		    if (isObject(pathOrConfig) && pathOrConfig.config !== undefined && isObject(pathOrConfig.config)) {
		        return null;
		    }
		    // require('tailwindcss')('custom-config.js')
		    if (isString(pathOrConfig)) {
		        return _path.default.resolve(pathOrConfig);
		    }
		    // require('tailwindcss')
		    return resolveDefaultConfigPath();
		}
		function resolveDefaultConfigPath() {
		    for (const configFile of defaultConfigFiles){
		        try {
		            const configPath = _path.default.resolve(configFile);
		            _fs.default.accessSync(configPath);
		            return configPath;
		        } catch (err) {}
		    }
		    return null;
		}
} (resolveConfigPath));
	return resolveConfigPath;
}

var setupContextUtils = {};

var cssSyntaxError;
var hasRequiredCssSyntaxError;

function requireCssSyntaxError () {
	if (hasRequiredCssSyntaxError) return cssSyntaxError;
	hasRequiredCssSyntaxError = 1;

	let pico = requirePicocolors_browser();

	let terminalHighlight = require$$3;

	class CssSyntaxError extends Error {
	  constructor(message, line, column, source, file, plugin) {
	    super(message);
	    this.name = 'CssSyntaxError';
	    this.reason = message;

	    if (file) {
	      this.file = file;
	    }
	    if (source) {
	      this.source = source;
	    }
	    if (plugin) {
	      this.plugin = plugin;
	    }
	    if (typeof line !== 'undefined' && typeof column !== 'undefined') {
	      if (typeof line === 'number') {
	        this.line = line;
	        this.column = column;
	      } else {
	        this.line = line.line;
	        this.column = line.column;
	        this.endLine = column.line;
	        this.endColumn = column.column;
	      }
	    }

	    this.setMessage();

	    if (Error.captureStackTrace) {
	      Error.captureStackTrace(this, CssSyntaxError);
	    }
	  }

	  setMessage() {
	    this.message = this.plugin ? this.plugin + ': ' : '';
	    this.message += this.file ? this.file : '<css input>';
	    if (typeof this.line !== 'undefined') {
	      this.message += ':' + this.line + ':' + this.column;
	    }
	    this.message += ': ' + this.reason;
	  }

	  showSourceCode(color) {
	    if (!this.source) return ''

	    let css = this.source;
	    if (color == null) color = pico.isColorSupported;
	    if (terminalHighlight) {
	      if (color) css = terminalHighlight(css);
	    }

	    let lines = css.split(/\r?\n/);
	    let start = Math.max(this.line - 3, 0);
	    let end = Math.min(this.line + 2, lines.length);

	    let maxWidth = String(end).length;

	    let mark, aside;
	    if (color) {
	      let { bold, red, gray } = pico.createColors(true);
	      mark = text => bold(red(text));
	      aside = text => gray(text);
	    } else {
	      mark = aside = str => str;
	    }

	    return lines
	      .slice(start, end)
	      .map((line, index) => {
	        let number = start + 1 + index;
	        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';
	        if (number === this.line) {
	          let spacing =
	            aside(gutter.replace(/\d/g, ' ')) +
	            line.slice(0, this.column - 1).replace(/[^\t]/g, ' ');
	          return mark('>') + aside(gutter) + line + '\n ' + spacing + mark('^')
	        }
	        return ' ' + aside(gutter) + line
	      })
	      .join('\n')
	  }

	  toString() {
	    let code = this.showSourceCode();
	    if (code) {
	      code = '\n\n' + code + '\n';
	    }
	    return this.name + ': ' + this.message + code
	  }
	}

	cssSyntaxError = CssSyntaxError;
	CssSyntaxError.default = CssSyntaxError;
	return cssSyntaxError;
}

var symbols = {};

var hasRequiredSymbols;

function requireSymbols () {
	if (hasRequiredSymbols) return symbols;
	hasRequiredSymbols = 1;

	symbols.isClean = Symbol('isClean');

	symbols.my = Symbol('my');
	return symbols;
}

var stringifier;
var hasRequiredStringifier;

function requireStringifier () {
	if (hasRequiredStringifier) return stringifier;
	hasRequiredStringifier = 1;

	const DEFAULT_RAW = {
	  colon: ': ',
	  indent: '    ',
	  beforeDecl: '\n',
	  beforeRule: '\n',
	  beforeOpen: ' ',
	  beforeClose: '\n',
	  beforeComment: '\n',
	  after: '\n',
	  emptyBody: '',
	  commentLeft: ' ',
	  commentRight: ' ',
	  semicolon: false
	};

	function capitalize(str) {
	  return str[0].toUpperCase() + str.slice(1)
	}

	class Stringifier {
	  constructor(builder) {
	    this.builder = builder;
	  }

	  stringify(node, semicolon) {
	    /* c8 ignore start */
	    if (!this[node.type]) {
	      throw new Error(
	        'Unknown AST node type ' +
	          node.type +
	          '. ' +
	          'Maybe you need to change PostCSS stringifier.'
	      )
	    }
	    /* c8 ignore stop */
	    this[node.type](node, semicolon);
	  }

	  document(node) {
	    this.body(node);
	  }

	  root(node) {
	    this.body(node);
	    if (node.raws.after) this.builder(node.raws.after);
	  }

	  comment(node) {
	    let left = this.raw(node, 'left', 'commentLeft');
	    let right = this.raw(node, 'right', 'commentRight');
	    this.builder('/*' + left + node.text + right + '*/', node);
	  }

	  decl(node, semicolon) {
	    let between = this.raw(node, 'between', 'colon');
	    let string = node.prop + between + this.rawValue(node, 'value');

	    if (node.important) {
	      string += node.raws.important || ' !important';
	    }

	    if (semicolon) string += ';';
	    this.builder(string, node);
	  }

	  rule(node) {
	    this.block(node, this.rawValue(node, 'selector'));
	    if (node.raws.ownSemicolon) {
	      this.builder(node.raws.ownSemicolon, node, 'end');
	    }
	  }

	  atrule(node, semicolon) {
	    let name = '@' + node.name;
	    let params = node.params ? this.rawValue(node, 'params') : '';

	    if (typeof node.raws.afterName !== 'undefined') {
	      name += node.raws.afterName;
	    } else if (params) {
	      name += ' ';
	    }

	    if (node.nodes) {
	      this.block(node, name + params);
	    } else {
	      let end = (node.raws.between || '') + (semicolon ? ';' : '');
	      this.builder(name + params + end, node);
	    }
	  }

	  body(node) {
	    let last = node.nodes.length - 1;
	    while (last > 0) {
	      if (node.nodes[last].type !== 'comment') break
	      last -= 1;
	    }

	    let semicolon = this.raw(node, 'semicolon');
	    for (let i = 0; i < node.nodes.length; i++) {
	      let child = node.nodes[i];
	      let before = this.raw(child, 'before');
	      if (before) this.builder(before);
	      this.stringify(child, last !== i || semicolon);
	    }
	  }

	  block(node, start) {
	    let between = this.raw(node, 'between', 'beforeOpen');
	    this.builder(start + between + '{', node, 'start');

	    let after;
	    if (node.nodes && node.nodes.length) {
	      this.body(node);
	      after = this.raw(node, 'after');
	    } else {
	      after = this.raw(node, 'after', 'emptyBody');
	    }

	    if (after) this.builder(after);
	    this.builder('}', node, 'end');
	  }

	  raw(node, own, detect) {
	    let value;
	    if (!detect) detect = own;

	    // Already had
	    if (own) {
	      value = node.raws[own];
	      if (typeof value !== 'undefined') return value
	    }

	    let parent = node.parent;

	    if (detect === 'before') {
	      // Hack for first rule in CSS
	      if (!parent || (parent.type === 'root' && parent.first === node)) {
	        return ''
	      }

	      // `root` nodes in `document` should use only their own raws
	      if (parent && parent.type === 'document') {
	        return ''
	      }
	    }

	    // Floating child without parent
	    if (!parent) return DEFAULT_RAW[detect]

	    // Detect style by other nodes
	    let root = node.root();
	    if (!root.rawCache) root.rawCache = {};
	    if (typeof root.rawCache[detect] !== 'undefined') {
	      return root.rawCache[detect]
	    }

	    if (detect === 'before' || detect === 'after') {
	      return this.beforeAfter(node, detect)
	    } else {
	      let method = 'raw' + capitalize(detect);
	      if (this[method]) {
	        value = this[method](root, node);
	      } else {
	        root.walk(i => {
	          value = i.raws[own];
	          if (typeof value !== 'undefined') return false
	        });
	      }
	    }

	    if (typeof value === 'undefined') value = DEFAULT_RAW[detect];

	    root.rawCache[detect] = value;
	    return value
	  }

	  rawSemicolon(root) {
	    let value;
	    root.walk(i => {
	      if (i.nodes && i.nodes.length && i.last.type === 'decl') {
	        value = i.raws.semicolon;
	        if (typeof value !== 'undefined') return false
	      }
	    });
	    return value
	  }

	  rawEmptyBody(root) {
	    let value;
	    root.walk(i => {
	      if (i.nodes && i.nodes.length === 0) {
	        value = i.raws.after;
	        if (typeof value !== 'undefined') return false
	      }
	    });
	    return value
	  }

	  rawIndent(root) {
	    if (root.raws.indent) return root.raws.indent
	    let value;
	    root.walk(i => {
	      let p = i.parent;
	      if (p && p !== root && p.parent && p.parent === root) {
	        if (typeof i.raws.before !== 'undefined') {
	          let parts = i.raws.before.split('\n');
	          value = parts[parts.length - 1];
	          value = value.replace(/\S/g, '');
	          return false
	        }
	      }
	    });
	    return value
	  }

	  rawBeforeComment(root, node) {
	    let value;
	    root.walkComments(i => {
	      if (typeof i.raws.before !== 'undefined') {
	        value = i.raws.before;
	        if (value.includes('\n')) {
	          value = value.replace(/[^\n]+$/, '');
	        }
	        return false
	      }
	    });
	    if (typeof value === 'undefined') {
	      value = this.raw(node, null, 'beforeDecl');
	    } else if (value) {
	      value = value.replace(/\S/g, '');
	    }
	    return value
	  }

	  rawBeforeDecl(root, node) {
	    let value;
	    root.walkDecls(i => {
	      if (typeof i.raws.before !== 'undefined') {
	        value = i.raws.before;
	        if (value.includes('\n')) {
	          value = value.replace(/[^\n]+$/, '');
	        }
	        return false
	      }
	    });
	    if (typeof value === 'undefined') {
	      value = this.raw(node, null, 'beforeRule');
	    } else if (value) {
	      value = value.replace(/\S/g, '');
	    }
	    return value
	  }

	  rawBeforeRule(root) {
	    let value;
	    root.walk(i => {
	      if (i.nodes && (i.parent !== root || root.first !== i)) {
	        if (typeof i.raws.before !== 'undefined') {
	          value = i.raws.before;
	          if (value.includes('\n')) {
	            value = value.replace(/[^\n]+$/, '');
	          }
	          return false
	        }
	      }
	    });
	    if (value) value = value.replace(/\S/g, '');
	    return value
	  }

	  rawBeforeClose(root) {
	    let value;
	    root.walk(i => {
	      if (i.nodes && i.nodes.length > 0) {
	        if (typeof i.raws.after !== 'undefined') {
	          value = i.raws.after;
	          if (value.includes('\n')) {
	            value = value.replace(/[^\n]+$/, '');
	          }
	          return false
	        }
	      }
	    });
	    if (value) value = value.replace(/\S/g, '');
	    return value
	  }

	  rawBeforeOpen(root) {
	    let value;
	    root.walk(i => {
	      if (i.type !== 'decl') {
	        value = i.raws.between;
	        if (typeof value !== 'undefined') return false
	      }
	    });
	    return value
	  }

	  rawColon(root) {
	    let value;
	    root.walkDecls(i => {
	      if (typeof i.raws.between !== 'undefined') {
	        value = i.raws.between.replace(/[^\s:]/g, '');
	        return false
	      }
	    });
	    return value
	  }

	  beforeAfter(node, detect) {
	    let value;
	    if (node.type === 'decl') {
	      value = this.raw(node, null, 'beforeDecl');
	    } else if (node.type === 'comment') {
	      value = this.raw(node, null, 'beforeComment');
	    } else if (detect === 'before') {
	      value = this.raw(node, null, 'beforeRule');
	    } else {
	      value = this.raw(node, null, 'beforeClose');
	    }

	    let buf = node.parent;
	    let depth = 0;
	    while (buf && buf.type !== 'root') {
	      depth += 1;
	      buf = buf.parent;
	    }

	    if (value.includes('\n')) {
	      let indent = this.raw(node, null, 'indent');
	      if (indent.length) {
	        for (let step = 0; step < depth; step++) value += indent;
	      }
	    }

	    return value
	  }

	  rawValue(node, prop) {
	    let value = node[prop];
	    let raw = node.raws[prop];
	    if (raw && raw.value === value) {
	      return raw.raw
	    }

	    return value
	  }
	}

	stringifier = Stringifier;
	Stringifier.default = Stringifier;
	return stringifier;
}

var stringify_1$1;
var hasRequiredStringify$2;

function requireStringify$2 () {
	if (hasRequiredStringify$2) return stringify_1$1;
	hasRequiredStringify$2 = 1;

	let Stringifier = requireStringifier();

	function stringify(node, builder) {
	  let str = new Stringifier(builder);
	  str.stringify(node);
	}

	stringify_1$1 = stringify;
	stringify.default = stringify;
	return stringify_1$1;
}

var node$1;
var hasRequiredNode$1;

function requireNode$1 () {
	if (hasRequiredNode$1) return node$1;
	hasRequiredNode$1 = 1;

	let { isClean, my } = requireSymbols();
	let CssSyntaxError = requireCssSyntaxError();
	let Stringifier = requireStringifier();
	let stringify = requireStringify$2();

	function cloneNode(obj, parent) {
	  let cloned = new obj.constructor();

	  for (let i in obj) {
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) {
	      /* c8 ignore next 2 */
	      continue
	    }
	    if (i === 'proxyCache') continue
	    let value = obj[i];
	    let type = typeof value;

	    if (i === 'parent' && type === 'object') {
	      if (parent) cloned[i] = parent;
	    } else if (i === 'source') {
	      cloned[i] = value;
	    } else if (Array.isArray(value)) {
	      cloned[i] = value.map(j => cloneNode(j, cloned));
	    } else {
	      if (type === 'object' && value !== null) value = cloneNode(value);
	      cloned[i] = value;
	    }
	  }

	  return cloned
	}

	class Node {
	  constructor(defaults = {}) {
	    this.raws = {};
	    this[isClean] = false;
	    this[my] = true;

	    for (let name in defaults) {
	      if (name === 'nodes') {
	        this.nodes = [];
	        for (let node of defaults[name]) {
	          if (typeof node.clone === 'function') {
	            this.append(node.clone());
	          } else {
	            this.append(node);
	          }
	        }
	      } else {
	        this[name] = defaults[name];
	      }
	    }
	  }

	  error(message, opts = {}) {
	    if (this.source) {
	      let { start, end } = this.rangeBy(opts);
	      return this.source.input.error(
	        message,
	        { line: start.line, column: start.column },
	        { line: end.line, column: end.column },
	        opts
	      )
	    }
	    return new CssSyntaxError(message)
	  }

	  warn(result, text, opts) {
	    let data = { node: this };
	    for (let i in opts) data[i] = opts[i];
	    return result.warn(text, data)
	  }

	  remove() {
	    if (this.parent) {
	      this.parent.removeChild(this);
	    }
	    this.parent = undefined;
	    return this
	  }

	  toString(stringifier = stringify) {
	    if (stringifier.stringify) stringifier = stringifier.stringify;
	    let result = '';
	    stringifier(this, i => {
	      result += i;
	    });
	    return result
	  }

	  assign(overrides = {}) {
	    for (let name in overrides) {
	      this[name] = overrides[name];
	    }
	    return this
	  }

	  clone(overrides = {}) {
	    let cloned = cloneNode(this);
	    for (let name in overrides) {
	      cloned[name] = overrides[name];
	    }
	    return cloned
	  }

	  cloneBefore(overrides = {}) {
	    let cloned = this.clone(overrides);
	    this.parent.insertBefore(this, cloned);
	    return cloned
	  }

	  cloneAfter(overrides = {}) {
	    let cloned = this.clone(overrides);
	    this.parent.insertAfter(this, cloned);
	    return cloned
	  }

	  replaceWith(...nodes) {
	    if (this.parent) {
	      let bookmark = this;
	      let foundSelf = false;
	      for (let node of nodes) {
	        if (node === this) {
	          foundSelf = true;
	        } else if (foundSelf) {
	          this.parent.insertAfter(bookmark, node);
	          bookmark = node;
	        } else {
	          this.parent.insertBefore(bookmark, node);
	        }
	      }

	      if (!foundSelf) {
	        this.remove();
	      }
	    }

	    return this
	  }

	  next() {
	    if (!this.parent) return undefined
	    let index = this.parent.index(this);
	    return this.parent.nodes[index + 1]
	  }

	  prev() {
	    if (!this.parent) return undefined
	    let index = this.parent.index(this);
	    return this.parent.nodes[index - 1]
	  }

	  before(add) {
	    this.parent.insertBefore(this, add);
	    return this
	  }

	  after(add) {
	    this.parent.insertAfter(this, add);
	    return this
	  }

	  root() {
	    let result = this;
	    while (result.parent && result.parent.type !== 'document') {
	      result = result.parent;
	    }
	    return result
	  }

	  raw(prop, defaultType) {
	    let str = new Stringifier();
	    return str.raw(this, prop, defaultType)
	  }

	  cleanRaws(keepBetween) {
	    delete this.raws.before;
	    delete this.raws.after;
	    if (!keepBetween) delete this.raws.between;
	  }

	  toJSON(_, inputs) {
	    let fixed = {};
	    let emitInputs = inputs == null;
	    inputs = inputs || new Map();
	    let inputsNextIndex = 0;

	    for (let name in this) {
	      if (!Object.prototype.hasOwnProperty.call(this, name)) {
	        /* c8 ignore next 2 */
	        continue
	      }
	      if (name === 'parent' || name === 'proxyCache') continue
	      let value = this[name];

	      if (Array.isArray(value)) {
	        fixed[name] = value.map(i => {
	          if (typeof i === 'object' && i.toJSON) {
	            return i.toJSON(null, inputs)
	          } else {
	            return i
	          }
	        });
	      } else if (typeof value === 'object' && value.toJSON) {
	        fixed[name] = value.toJSON(null, inputs);
	      } else if (name === 'source') {
	        let inputId = inputs.get(value.input);
	        if (inputId == null) {
	          inputId = inputsNextIndex;
	          inputs.set(value.input, inputsNextIndex);
	          inputsNextIndex++;
	        }
	        fixed[name] = {
	          inputId,
	          start: value.start,
	          end: value.end
	        };
	      } else {
	        fixed[name] = value;
	      }
	    }

	    if (emitInputs) {
	      fixed.inputs = [...inputs.keys()].map(input => input.toJSON());
	    }

	    return fixed
	  }

	  positionInside(index) {
	    let string = this.toString();
	    let column = this.source.start.column;
	    let line = this.source.start.line;

	    for (let i = 0; i < index; i++) {
	      if (string[i] === '\n') {
	        column = 1;
	        line += 1;
	      } else {
	        column += 1;
	      }
	    }

	    return { line, column }
	  }

	  positionBy(opts) {
	    let pos = this.source.start;
	    if (opts.index) {
	      pos = this.positionInside(opts.index);
	    } else if (opts.word) {
	      let index = this.toString().indexOf(opts.word);
	      if (index !== -1) pos = this.positionInside(index);
	    }
	    return pos
	  }

	  rangeBy(opts) {
	    let start = {
	      line: this.source.start.line,
	      column: this.source.start.column
	    };
	    let end = this.source.end
	      ? {
	          line: this.source.end.line,
	          column: this.source.end.column + 1
	        }
	      : {
	          line: start.line,
	          column: start.column + 1
	        };

	    if (opts.word) {
	      let index = this.toString().indexOf(opts.word);
	      if (index !== -1) {
	        start = this.positionInside(index);
	        end = this.positionInside(index + opts.word.length);
	      }
	    } else {
	      if (opts.start) {
	        start = {
	          line: opts.start.line,
	          column: opts.start.column
	        };
	      } else if (opts.index) {
	        start = this.positionInside(opts.index);
	      }

	      if (opts.end) {
	        end = {
	          line: opts.end.line,
	          column: opts.end.column
	        };
	      } else if (opts.endIndex) {
	        end = this.positionInside(opts.endIndex);
	      } else if (opts.index) {
	        end = this.positionInside(opts.index + 1);
	      }
	    }

	    if (
	      end.line < start.line ||
	      (end.line === start.line && end.column <= start.column)
	    ) {
	      end = { line: start.line, column: start.column + 1 };
	    }

	    return { start, end }
	  }

	  getProxyProcessor() {
	    return {
	      set(node, prop, value) {
	        if (node[prop] === value) return true
	        node[prop] = value;
	        if (
	          prop === 'prop' ||
	          prop === 'value' ||
	          prop === 'name' ||
	          prop === 'params' ||
	          prop === 'important' ||
	          /* c8 ignore next */
	          prop === 'text'
	        ) {
	          node.markDirty();
	        }
	        return true
	      },

	      get(node, prop) {
	        if (prop === 'proxyOf') {
	          return node
	        } else if (prop === 'root') {
	          return () => node.root().toProxy()
	        } else {
	          return node[prop]
	        }
	      }
	    }
	  }

	  toProxy() {
	    if (!this.proxyCache) {
	      this.proxyCache = new Proxy(this, this.getProxyProcessor());
	    }
	    return this.proxyCache
	  }

	  addToError(error) {
	    error.postcssNode = this;
	    if (error.stack && this.source && /\n\s{4}at /.test(error.stack)) {
	      let s = this.source;
	      error.stack = error.stack.replace(
	        /\n\s{4}at /,
	        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`
	      );
	    }
	    return error
	  }

	  markDirty() {
	    if (this[isClean]) {
	      this[isClean] = false;
	      let next = this;
	      while ((next = next.parent)) {
	        next[isClean] = false;
	      }
	    }
	  }

	  get proxyOf() {
	    return this
	  }
	}

	node$1 = Node;
	Node.default = Node;
	return node$1;
}

var declaration;
var hasRequiredDeclaration;

function requireDeclaration () {
	if (hasRequiredDeclaration) return declaration;
	hasRequiredDeclaration = 1;

	let Node = requireNode$1();

	class Declaration extends Node {
	  constructor(defaults) {
	    if (
	      defaults &&
	      typeof defaults.value !== 'undefined' &&
	      typeof defaults.value !== 'string'
	    ) {
	      defaults = { ...defaults, value: String(defaults.value) };
	    }
	    super(defaults);
	    this.type = 'decl';
	  }

	  get variable() {
	    return this.prop.startsWith('--') || this.prop[0] === '$'
	  }
	}

	declaration = Declaration;
	Declaration.default = Declaration;
	return declaration;
}

var nonSecure;
var hasRequiredNonSecure;

function requireNonSecure () {
	if (hasRequiredNonSecure) return nonSecure;
	hasRequiredNonSecure = 1;
	let urlAlphabet =
	  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict';
	let customAlphabet = (alphabet, defaultSize = 21) => {
	  return (size = defaultSize) => {
	    let id = '';
	    let i = size;
	    while (i--) {
	      id += alphabet[(Math.random() * alphabet.length) | 0];
	    }
	    return id
	  }
	};
	let nanoid = (size = 21) => {
	  let id = '';
	  let i = size;
	  while (i--) {
	    id += urlAlphabet[(Math.random() * 64) | 0];
	  }
	  return id
	};
	nonSecure = { nanoid, customAlphabet };
	return nonSecure;
}

var previousMap;
var hasRequiredPreviousMap;

function requirePreviousMap () {
	if (hasRequiredPreviousMap) return previousMap;
	hasRequiredPreviousMap = 1;

	let { SourceMapConsumer, SourceMapGenerator } = require$$3;
	let { existsSync, readFileSync } = require$$3;
	let { dirname, join } = require$$3;

	function fromBase64(str) {
	  if (Buffer) {
	    return Buffer.from(str, 'base64').toString()
	  } else {
	    /* c8 ignore next 2 */
	    return window.atob(str)
	  }
	}

	class PreviousMap {
	  constructor(css, opts) {
	    if (opts.map === false) return
	    this.loadAnnotation(css);
	    this.inline = this.startWith(this.annotation, 'data:');

	    let prev = opts.map ? opts.map.prev : undefined;
	    let text = this.loadMap(opts.from, prev);
	    if (!this.mapFile && opts.from) {
	      this.mapFile = opts.from;
	    }
	    if (this.mapFile) this.root = dirname(this.mapFile);
	    if (text) this.text = text;
	  }

	  consumer() {
	    if (!this.consumerCache) {
	      this.consumerCache = new SourceMapConsumer(this.text);
	    }
	    return this.consumerCache
	  }

	  withContent() {
	    return !!(
	      this.consumer().sourcesContent &&
	      this.consumer().sourcesContent.length > 0
	    )
	  }

	  startWith(string, start) {
	    if (!string) return false
	    return string.substr(0, start.length) === start
	  }

	  getAnnotationURL(sourceMapString) {
	    return sourceMapString.replace(/^\/\*\s*# sourceMappingURL=/, '').trim()
	  }

	  loadAnnotation(css) {
	    let comments = css.match(/\/\*\s*# sourceMappingURL=/gm);
	    if (!comments) return

	    // sourceMappingURLs from comments, strings, etc.
	    let start = css.lastIndexOf(comments.pop());
	    let end = css.indexOf('*/', start);

	    if (start > -1 && end > -1) {
	      // Locate the last sourceMappingURL to avoid pickin
	      this.annotation = this.getAnnotationURL(css.substring(start, end));
	    }
	  }

	  decodeInline(text) {
	    let baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
	    let baseUri = /^data:application\/json;base64,/;
	    let charsetUri = /^data:application\/json;charset=utf-?8,/;
	    let uri = /^data:application\/json,/;

	    if (charsetUri.test(text) || uri.test(text)) {
	      return decodeURIComponent(text.substr(RegExp.lastMatch.length))
	    }

	    if (baseCharsetUri.test(text) || baseUri.test(text)) {
	      return fromBase64(text.substr(RegExp.lastMatch.length))
	    }

	    let encoding = text.match(/data:application\/json;([^,]+),/)[1];
	    throw new Error('Unsupported source map encoding ' + encoding)
	  }

	  loadFile(path) {
	    this.root = dirname(path);
	    if (existsSync(path)) {
	      this.mapFile = path;
	      return readFileSync(path, 'utf-8').toString().trim()
	    }
	  }

	  loadMap(file, prev) {
	    if (prev === false) return false

	    if (prev) {
	      if (typeof prev === 'string') {
	        return prev
	      } else if (typeof prev === 'function') {
	        let prevPath = prev(file);
	        if (prevPath) {
	          let map = this.loadFile(prevPath);
	          if (!map) {
	            throw new Error(
	              'Unable to load previous source map: ' + prevPath.toString()
	            )
	          }
	          return map
	        }
	      } else if (prev instanceof SourceMapConsumer) {
	        return SourceMapGenerator.fromSourceMap(prev).toString()
	      } else if (prev instanceof SourceMapGenerator) {
	        return prev.toString()
	      } else if (this.isMap(prev)) {
	        return JSON.stringify(prev)
	      } else {
	        throw new Error(
	          'Unsupported previous source map format: ' + prev.toString()
	        )
	      }
	    } else if (this.inline) {
	      return this.decodeInline(this.annotation)
	    } else if (this.annotation) {
	      let map = this.annotation;
	      if (file) map = join(dirname(file), map);
	      return this.loadFile(map)
	    }
	  }

	  isMap(map) {
	    if (typeof map !== 'object') return false
	    return (
	      typeof map.mappings === 'string' ||
	      typeof map._mappings === 'string' ||
	      Array.isArray(map.sections)
	    )
	  }
	}

	previousMap = PreviousMap;
	PreviousMap.default = PreviousMap;
	return previousMap;
}

var input$1;
var hasRequiredInput;

function requireInput () {
	if (hasRequiredInput) return input$1;
	hasRequiredInput = 1;

	let { SourceMapConsumer, SourceMapGenerator } = require$$3;
	let { fileURLToPath, pathToFileURL } = require$$3;
	let { resolve, isAbsolute } = require$$3;
	let { nanoid } = requireNonSecure();

	let terminalHighlight = require$$3;
	let CssSyntaxError = requireCssSyntaxError();
	let PreviousMap = requirePreviousMap();

	let fromOffsetCache = Symbol('fromOffsetCache');

	let sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
	let pathAvailable = Boolean(resolve && isAbsolute);

	class Input {
	  constructor(css, opts = {}) {
	    if (
	      css === null ||
	      typeof css === 'undefined' ||
	      (typeof css === 'object' && !css.toString)
	    ) {
	      throw new Error(`PostCSS received ${css} instead of CSS string`)
	    }

	    this.css = css.toString();

	    if (this.css[0] === '\uFEFF' || this.css[0] === '\uFFFE') {
	      this.hasBOM = true;
	      this.css = this.css.slice(1);
	    } else {
	      this.hasBOM = false;
	    }

	    if (opts.from) {
	      if (
	        !pathAvailable ||
	        /^\w+:\/\//.test(opts.from) ||
	        isAbsolute(opts.from)
	      ) {
	        this.file = opts.from;
	      } else {
	        this.file = resolve(opts.from);
	      }
	    }

	    if (pathAvailable && sourceMapAvailable) {
	      let map = new PreviousMap(this.css, opts);
	      if (map.text) {
	        this.map = map;
	        let file = map.consumer().file;
	        if (!this.file && file) this.file = this.mapResolve(file);
	      }
	    }

	    if (!this.file) {
	      this.id = '<input css ' + nanoid(6) + '>';
	    }
	    if (this.map) this.map.file = this.from;
	  }

	  fromOffset(offset) {
	    let lastLine, lineToIndex;
	    if (!this[fromOffsetCache]) {
	      let lines = this.css.split('\n');
	      lineToIndex = new Array(lines.length);
	      let prevIndex = 0;

	      for (let i = 0, l = lines.length; i < l; i++) {
	        lineToIndex[i] = prevIndex;
	        prevIndex += lines[i].length + 1;
	      }

	      this[fromOffsetCache] = lineToIndex;
	    } else {
	      lineToIndex = this[fromOffsetCache];
	    }
	    lastLine = lineToIndex[lineToIndex.length - 1];

	    let min = 0;
	    if (offset >= lastLine) {
	      min = lineToIndex.length - 1;
	    } else {
	      let max = lineToIndex.length - 2;
	      let mid;
	      while (min < max) {
	        mid = min + ((max - min) >> 1);
	        if (offset < lineToIndex[mid]) {
	          max = mid - 1;
	        } else if (offset >= lineToIndex[mid + 1]) {
	          min = mid + 1;
	        } else {
	          min = mid;
	          break
	        }
	      }
	    }
	    return {
	      line: min + 1,
	      col: offset - lineToIndex[min] + 1
	    }
	  }

	  error(message, line, column, opts = {}) {
	    let result, endLine, endColumn;

	    if (line && typeof line === 'object') {
	      let start = line;
	      let end = column;
	      if (typeof start.offset === 'number') {
	        let pos = this.fromOffset(start.offset);
	        line = pos.line;
	        column = pos.col;
	      } else {
	        line = start.line;
	        column = start.column;
	      }
	      if (typeof end.offset === 'number') {
	        let pos = this.fromOffset(end.offset);
	        endLine = pos.line;
	        endColumn = pos.col;
	      } else {
	        endLine = end.line;
	        endColumn = end.column;
	      }
	    } else if (!column) {
	      let pos = this.fromOffset(line);
	      line = pos.line;
	      column = pos.col;
	    }

	    let origin = this.origin(line, column, endLine, endColumn);
	    if (origin) {
	      result = new CssSyntaxError(
	        message,
	        origin.endLine === undefined
	          ? origin.line
	          : { line: origin.line, column: origin.column },
	        origin.endLine === undefined
	          ? origin.column
	          : { line: origin.endLine, column: origin.endColumn },
	        origin.source,
	        origin.file,
	        opts.plugin
	      );
	    } else {
	      result = new CssSyntaxError(
	        message,
	        endLine === undefined ? line : { line, column },
	        endLine === undefined ? column : { line: endLine, column: endColumn },
	        this.css,
	        this.file,
	        opts.plugin
	      );
	    }

	    result.input = { line, column, endLine, endColumn, source: this.css };
	    if (this.file) {
	      if (pathToFileURL) {
	        result.input.url = pathToFileURL(this.file).toString();
	      }
	      result.input.file = this.file;
	    }

	    return result
	  }

	  origin(line, column, endLine, endColumn) {
	    if (!this.map) return false
	    let consumer = this.map.consumer();

	    let from = consumer.originalPositionFor({ line, column });
	    if (!from.source) return false

	    let to;
	    if (typeof endLine === 'number') {
	      to = consumer.originalPositionFor({ line: endLine, column: endColumn });
	    }

	    let fromUrl;

	    if (isAbsolute(from.source)) {
	      fromUrl = pathToFileURL(from.source);
	    } else {
	      fromUrl = new URL(
	        from.source,
	        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)
	      );
	    }

	    let result = {
	      url: fromUrl.toString(),
	      line: from.line,
	      column: from.column,
	      endLine: to && to.line,
	      endColumn: to && to.column
	    };

	    if (fromUrl.protocol === 'file:') {
	      if (fileURLToPath) {
	        result.file = fileURLToPath(fromUrl);
	      } else {
	        /* c8 ignore next 2 */
	        throw new Error(`file: protocol is not available in this PostCSS build`)
	      }
	    }

	    let source = consumer.sourceContentFor(from.source);
	    if (source) result.source = source;

	    return result
	  }

	  mapResolve(file) {
	    if (/^\w+:\/\//.test(file)) {
	      return file
	    }
	    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)
	  }

	  get from() {
	    return this.file || this.id
	  }

	  toJSON() {
	    let json = {};
	    for (let name of ['hasBOM', 'css', 'file', 'id']) {
	      if (this[name] != null) {
	        json[name] = this[name];
	      }
	    }
	    if (this.map) {
	      json.map = { ...this.map };
	      if (json.map.consumerCache) {
	        json.map.consumerCache = undefined;
	      }
	    }
	    return json
	  }
	}

	input$1 = Input;
	Input.default = Input;

	if (terminalHighlight && terminalHighlight.registerInput) {
	  terminalHighlight.registerInput(Input);
	}
	return input$1;
}

var mapGenerator;
var hasRequiredMapGenerator;

function requireMapGenerator () {
	if (hasRequiredMapGenerator) return mapGenerator;
	hasRequiredMapGenerator = 1;

	let { SourceMapConsumer, SourceMapGenerator } = require$$3;
	let { dirname, resolve, relative, sep } = require$$3;
	let { pathToFileURL } = require$$3;

	let Input = requireInput();

	let sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);
	let pathAvailable = Boolean(dirname && resolve && relative && sep);

	class MapGenerator {
	  constructor(stringify, root, opts, cssString) {
	    this.stringify = stringify;
	    this.mapOpts = opts.map || {};
	    this.root = root;
	    this.opts = opts;
	    this.css = cssString;
	    this.usesFileUrls = !this.mapOpts.from && this.mapOpts.absolute;
	  }

	  isMap() {
	    if (typeof this.opts.map !== 'undefined') {
	      return !!this.opts.map
	    }
	    return this.previous().length > 0
	  }

	  previous() {
	    if (!this.previousMaps) {
	      this.previousMaps = [];
	      if (this.root) {
	        this.root.walk(node => {
	          if (node.source && node.source.input.map) {
	            let map = node.source.input.map;
	            if (!this.previousMaps.includes(map)) {
	              this.previousMaps.push(map);
	            }
	          }
	        });
	      } else {
	        let input = new Input(this.css, this.opts);
	        if (input.map) this.previousMaps.push(input.map);
	      }
	    }

	    return this.previousMaps
	  }

	  isInline() {
	    if (typeof this.mapOpts.inline !== 'undefined') {
	      return this.mapOpts.inline
	    }

	    let annotation = this.mapOpts.annotation;
	    if (typeof annotation !== 'undefined' && annotation !== true) {
	      return false
	    }

	    if (this.previous().length) {
	      return this.previous().some(i => i.inline)
	    }
	    return true
	  }

	  isSourcesContent() {
	    if (typeof this.mapOpts.sourcesContent !== 'undefined') {
	      return this.mapOpts.sourcesContent
	    }
	    if (this.previous().length) {
	      return this.previous().some(i => i.withContent())
	    }
	    return true
	  }

	  clearAnnotation() {
	    if (this.mapOpts.annotation === false) return

	    if (this.root) {
	      let node;
	      for (let i = this.root.nodes.length - 1; i >= 0; i--) {
	        node = this.root.nodes[i];
	        if (node.type !== 'comment') continue
	        if (node.text.indexOf('# sourceMappingURL=') === 0) {
	          this.root.removeChild(i);
	        }
	      }
	    } else if (this.css) {
	      this.css = this.css.replace(/(\n)?\/\*#[\S\s]*?\*\/$/gm, '');
	    }
	  }

	  setSourcesContent() {
	    let already = {};
	    if (this.root) {
	      this.root.walk(node => {
	        if (node.source) {
	          let from = node.source.input.from;
	          if (from && !already[from]) {
	            already[from] = true;
	            let fromUrl = this.usesFileUrls
	              ? this.toFileUrl(from)
	              : this.toUrl(this.path(from));
	            this.map.setSourceContent(fromUrl, node.source.input.css);
	          }
	        }
	      });
	    } else if (this.css) {
	      let from = this.opts.from
	        ? this.toUrl(this.path(this.opts.from))
	        : '<no source>';
	      this.map.setSourceContent(from, this.css);
	    }
	  }

	  applyPrevMaps() {
	    for (let prev of this.previous()) {
	      let from = this.toUrl(this.path(prev.file));
	      let root = prev.root || dirname(prev.file);
	      let map;

	      if (this.mapOpts.sourcesContent === false) {
	        map = new SourceMapConsumer(prev.text);
	        if (map.sourcesContent) {
	          map.sourcesContent = map.sourcesContent.map(() => null);
	        }
	      } else {
	        map = prev.consumer();
	      }

	      this.map.applySourceMap(map, from, this.toUrl(this.path(root)));
	    }
	  }

	  isAnnotation() {
	    if (this.isInline()) {
	      return true
	    }
	    if (typeof this.mapOpts.annotation !== 'undefined') {
	      return this.mapOpts.annotation
	    }
	    if (this.previous().length) {
	      return this.previous().some(i => i.annotation)
	    }
	    return true
	  }

	  toBase64(str) {
	    if (Buffer) {
	      return Buffer.from(str).toString('base64')
	    } else {
	      return window.btoa(unescape(encodeURIComponent(str)))
	    }
	  }

	  addAnnotation() {
	    let content;

	    if (this.isInline()) {
	      content =
	        'data:application/json;base64,' + this.toBase64(this.map.toString());
	    } else if (typeof this.mapOpts.annotation === 'string') {
	      content = this.mapOpts.annotation;
	    } else if (typeof this.mapOpts.annotation === 'function') {
	      content = this.mapOpts.annotation(this.opts.to, this.root);
	    } else {
	      content = this.outputFile() + '.map';
	    }
	    let eol = '\n';
	    if (this.css.includes('\r\n')) eol = '\r\n';

	    this.css += eol + '/*# sourceMappingURL=' + content + ' */';
	  }

	  outputFile() {
	    if (this.opts.to) {
	      return this.path(this.opts.to)
	    } else if (this.opts.from) {
	      return this.path(this.opts.from)
	    } else {
	      return 'to.css'
	    }
	  }

	  generateMap() {
	    if (this.root) {
	      this.generateString();
	    } else if (this.previous().length === 1) {
	      let prev = this.previous()[0].consumer();
	      prev.file = this.outputFile();
	      this.map = SourceMapGenerator.fromSourceMap(prev);
	    } else {
	      this.map = new SourceMapGenerator({ file: this.outputFile() });
	      this.map.addMapping({
	        source: this.opts.from
	          ? this.toUrl(this.path(this.opts.from))
	          : '<no source>',
	        generated: { line: 1, column: 0 },
	        original: { line: 1, column: 0 }
	      });
	    }

	    if (this.isSourcesContent()) this.setSourcesContent();
	    if (this.root && this.previous().length > 0) this.applyPrevMaps();
	    if (this.isAnnotation()) this.addAnnotation();

	    if (this.isInline()) {
	      return [this.css]
	    } else {
	      return [this.css, this.map]
	    }
	  }

	  path(file) {
	    if (file.indexOf('<') === 0) return file
	    if (/^\w+:\/\//.test(file)) return file
	    if (this.mapOpts.absolute) return file

	    let from = this.opts.to ? dirname(this.opts.to) : '.';

	    if (typeof this.mapOpts.annotation === 'string') {
	      from = dirname(resolve(from, this.mapOpts.annotation));
	    }

	    file = relative(from, file);
	    return file
	  }

	  toUrl(path) {
	    if (sep === '\\') {
	      path = path.replace(/\\/g, '/');
	    }
	    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)
	  }

	  toFileUrl(path) {
	    if (pathToFileURL) {
	      return pathToFileURL(path).toString()
	    } else {
	      throw new Error(
	        '`map.absolute` option is not available in this PostCSS build'
	      )
	    }
	  }

	  sourcePath(node) {
	    if (this.mapOpts.from) {
	      return this.toUrl(this.mapOpts.from)
	    } else if (this.usesFileUrls) {
	      return this.toFileUrl(node.source.input.from)
	    } else {
	      return this.toUrl(this.path(node.source.input.from))
	    }
	  }

	  generateString() {
	    this.css = '';
	    this.map = new SourceMapGenerator({ file: this.outputFile() });

	    let line = 1;
	    let column = 1;

	    let noSource = '<no source>';
	    let mapping = {
	      source: '',
	      generated: { line: 0, column: 0 },
	      original: { line: 0, column: 0 }
	    };

	    let lines, last;
	    this.stringify(this.root, (str, node, type) => {
	      this.css += str;

	      if (node && type !== 'end') {
	        mapping.generated.line = line;
	        mapping.generated.column = column - 1;
	        if (node.source && node.source.start) {
	          mapping.source = this.sourcePath(node);
	          mapping.original.line = node.source.start.line;
	          mapping.original.column = node.source.start.column - 1;
	          this.map.addMapping(mapping);
	        } else {
	          mapping.source = noSource;
	          mapping.original.line = 1;
	          mapping.original.column = 0;
	          this.map.addMapping(mapping);
	        }
	      }

	      lines = str.match(/\n/g);
	      if (lines) {
	        line += lines.length;
	        last = str.lastIndexOf('\n');
	        column = str.length - last;
	      } else {
	        column += str.length;
	      }

	      if (node && type !== 'start') {
	        let p = node.parent || { raws: {} };
	        let childless =
	          node.type === 'decl' || (node.type === 'atrule' && !node.nodes);
	        if (!childless || node !== p.last || p.raws.semicolon) {
	          if (node.source && node.source.end) {
	            mapping.source = this.sourcePath(node);
	            mapping.original.line = node.source.end.line;
	            mapping.original.column = node.source.end.column - 1;
	            mapping.generated.line = line;
	            mapping.generated.column = column - 2;
	            this.map.addMapping(mapping);
	          } else {
	            mapping.source = noSource;
	            mapping.original.line = 1;
	            mapping.original.column = 0;
	            mapping.generated.line = line;
	            mapping.generated.column = column - 1;
	            this.map.addMapping(mapping);
	          }
	        }
	      }
	    });
	  }

	  generate() {
	    this.clearAnnotation();
	    if (pathAvailable && sourceMapAvailable && this.isMap()) {
	      return this.generateMap()
	    } else {
	      let result = '';
	      this.stringify(this.root, i => {
	        result += i;
	      });
	      return [result]
	    }
	  }
	}

	mapGenerator = MapGenerator;
	return mapGenerator;
}

var comment$1;
var hasRequiredComment$1;

function requireComment$1 () {
	if (hasRequiredComment$1) return comment$1;
	hasRequiredComment$1 = 1;

	let Node = requireNode$1();

	class Comment extends Node {
	  constructor(defaults) {
	    super(defaults);
	    this.type = 'comment';
	  }
	}

	comment$1 = Comment;
	Comment.default = Comment;
	return comment$1;
}

var container$1;
var hasRequiredContainer$1;

function requireContainer$1 () {
	if (hasRequiredContainer$1) return container$1;
	hasRequiredContainer$1 = 1;

	let { isClean, my } = requireSymbols();
	let Declaration = requireDeclaration();
	let Comment = requireComment$1();
	let Node = requireNode$1();

	let parse, Rule, AtRule, Root;

	function cleanSource(nodes) {
	  return nodes.map(i => {
	    if (i.nodes) i.nodes = cleanSource(i.nodes);
	    delete i.source;
	    return i
	  })
	}

	function markDirtyUp(node) {
	  node[isClean] = false;
	  if (node.proxyOf.nodes) {
	    for (let i of node.proxyOf.nodes) {
	      markDirtyUp(i);
	    }
	  }
	}

	class Container extends Node {
	  push(child) {
	    child.parent = this;
	    this.proxyOf.nodes.push(child);
	    return this
	  }

	  each(callback) {
	    if (!this.proxyOf.nodes) return undefined
	    let iterator = this.getIterator();

	    let index, result;
	    while (this.indexes[iterator] < this.proxyOf.nodes.length) {
	      index = this.indexes[iterator];
	      result = callback(this.proxyOf.nodes[index], index);
	      if (result === false) break

	      this.indexes[iterator] += 1;
	    }

	    delete this.indexes[iterator];
	    return result
	  }

	  walk(callback) {
	    return this.each((child, i) => {
	      let result;
	      try {
	        result = callback(child, i);
	      } catch (e) {
	        throw child.addToError(e)
	      }
	      if (result !== false && child.walk) {
	        result = child.walk(callback);
	      }

	      return result
	    })
	  }

	  walkDecls(prop, callback) {
	    if (!callback) {
	      callback = prop;
	      return this.walk((child, i) => {
	        if (child.type === 'decl') {
	          return callback(child, i)
	        }
	      })
	    }
	    if (prop instanceof RegExp) {
	      return this.walk((child, i) => {
	        if (child.type === 'decl' && prop.test(child.prop)) {
	          return callback(child, i)
	        }
	      })
	    }
	    return this.walk((child, i) => {
	      if (child.type === 'decl' && child.prop === prop) {
	        return callback(child, i)
	      }
	    })
	  }

	  walkRules(selector, callback) {
	    if (!callback) {
	      callback = selector;

	      return this.walk((child, i) => {
	        if (child.type === 'rule') {
	          return callback(child, i)
	        }
	      })
	    }
	    if (selector instanceof RegExp) {
	      return this.walk((child, i) => {
	        if (child.type === 'rule' && selector.test(child.selector)) {
	          return callback(child, i)
	        }
	      })
	    }
	    return this.walk((child, i) => {
	      if (child.type === 'rule' && child.selector === selector) {
	        return callback(child, i)
	      }
	    })
	  }

	  walkAtRules(name, callback) {
	    if (!callback) {
	      callback = name;
	      return this.walk((child, i) => {
	        if (child.type === 'atrule') {
	          return callback(child, i)
	        }
	      })
	    }
	    if (name instanceof RegExp) {
	      return this.walk((child, i) => {
	        if (child.type === 'atrule' && name.test(child.name)) {
	          return callback(child, i)
	        }
	      })
	    }
	    return this.walk((child, i) => {
	      if (child.type === 'atrule' && child.name === name) {
	        return callback(child, i)
	      }
	    })
	  }

	  walkComments(callback) {
	    return this.walk((child, i) => {
	      if (child.type === 'comment') {
	        return callback(child, i)
	      }
	    })
	  }

	  append(...children) {
	    for (let child of children) {
	      let nodes = this.normalize(child, this.last);
	      for (let node of nodes) this.proxyOf.nodes.push(node);
	    }

	    this.markDirty();

	    return this
	  }

	  prepend(...children) {
	    children = children.reverse();
	    for (let child of children) {
	      let nodes = this.normalize(child, this.first, 'prepend').reverse();
	      for (let node of nodes) this.proxyOf.nodes.unshift(node);
	      for (let id in this.indexes) {
	        this.indexes[id] = this.indexes[id] + nodes.length;
	      }
	    }

	    this.markDirty();

	    return this
	  }

	  cleanRaws(keepBetween) {
	    super.cleanRaws(keepBetween);
	    if (this.nodes) {
	      for (let node of this.nodes) node.cleanRaws(keepBetween);
	    }
	  }

	  insertBefore(exist, add) {
	    let existIndex = this.index(exist);
	    let type = existIndex === 0 ? 'prepend' : false;
	    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex], type).reverse();
	    existIndex = this.index(exist);
	    for (let node of nodes) this.proxyOf.nodes.splice(existIndex, 0, node);

	    let index;
	    for (let id in this.indexes) {
	      index = this.indexes[id];
	      if (existIndex <= index) {
	        this.indexes[id] = index + nodes.length;
	      }
	    }

	    this.markDirty();

	    return this
	  }

	  insertAfter(exist, add) {
	    let existIndex = this.index(exist);
	    let nodes = this.normalize(add, this.proxyOf.nodes[existIndex]).reverse();
	    existIndex = this.index(exist);
	    for (let node of nodes) this.proxyOf.nodes.splice(existIndex + 1, 0, node);

	    let index;
	    for (let id in this.indexes) {
	      index = this.indexes[id];
	      if (existIndex < index) {
	        this.indexes[id] = index + nodes.length;
	      }
	    }

	    this.markDirty();

	    return this
	  }

	  removeChild(child) {
	    child = this.index(child);
	    this.proxyOf.nodes[child].parent = undefined;
	    this.proxyOf.nodes.splice(child, 1);

	    let index;
	    for (let id in this.indexes) {
	      index = this.indexes[id];
	      if (index >= child) {
	        this.indexes[id] = index - 1;
	      }
	    }

	    this.markDirty();

	    return this
	  }

	  removeAll() {
	    for (let node of this.proxyOf.nodes) node.parent = undefined;
	    this.proxyOf.nodes = [];

	    this.markDirty();

	    return this
	  }

	  replaceValues(pattern, opts, callback) {
	    if (!callback) {
	      callback = opts;
	      opts = {};
	    }

	    this.walkDecls(decl => {
	      if (opts.props && !opts.props.includes(decl.prop)) return
	      if (opts.fast && !decl.value.includes(opts.fast)) return

	      decl.value = decl.value.replace(pattern, callback);
	    });

	    this.markDirty();

	    return this
	  }

	  every(condition) {
	    return this.nodes.every(condition)
	  }

	  some(condition) {
	    return this.nodes.some(condition)
	  }

	  index(child) {
	    if (typeof child === 'number') return child
	    if (child.proxyOf) child = child.proxyOf;
	    return this.proxyOf.nodes.indexOf(child)
	  }

	  get first() {
	    if (!this.proxyOf.nodes) return undefined
	    return this.proxyOf.nodes[0]
	  }

	  get last() {
	    if (!this.proxyOf.nodes) return undefined
	    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]
	  }

	  normalize(nodes, sample) {
	    if (typeof nodes === 'string') {
	      nodes = cleanSource(parse(nodes).nodes);
	    } else if (Array.isArray(nodes)) {
	      nodes = nodes.slice(0);
	      for (let i of nodes) {
	        if (i.parent) i.parent.removeChild(i, 'ignore');
	      }
	    } else if (nodes.type === 'root' && this.type !== 'document') {
	      nodes = nodes.nodes.slice(0);
	      for (let i of nodes) {
	        if (i.parent) i.parent.removeChild(i, 'ignore');
	      }
	    } else if (nodes.type) {
	      nodes = [nodes];
	    } else if (nodes.prop) {
	      if (typeof nodes.value === 'undefined') {
	        throw new Error('Value field is missed in node creation')
	      } else if (typeof nodes.value !== 'string') {
	        nodes.value = String(nodes.value);
	      }
	      nodes = [new Declaration(nodes)];
	    } else if (nodes.selector) {
	      nodes = [new Rule(nodes)];
	    } else if (nodes.name) {
	      nodes = [new AtRule(nodes)];
	    } else if (nodes.text) {
	      nodes = [new Comment(nodes)];
	    } else {
	      throw new Error('Unknown node type in node creation')
	    }

	    let processed = nodes.map(i => {
	      /* c8 ignore next */
	      if (!i[my]) Container.rebuild(i);
	      i = i.proxyOf;
	      if (i.parent) i.parent.removeChild(i);
	      if (i[isClean]) markDirtyUp(i);
	      if (typeof i.raws.before === 'undefined') {
	        if (sample && typeof sample.raws.before !== 'undefined') {
	          i.raws.before = sample.raws.before.replace(/\S/g, '');
	        }
	      }
	      i.parent = this.proxyOf;
	      return i
	    });

	    return processed
	  }

	  getProxyProcessor() {
	    return {
	      set(node, prop, value) {
	        if (node[prop] === value) return true
	        node[prop] = value;
	        if (prop === 'name' || prop === 'params' || prop === 'selector') {
	          node.markDirty();
	        }
	        return true
	      },

	      get(node, prop) {
	        if (prop === 'proxyOf') {
	          return node
	        } else if (!node[prop]) {
	          return node[prop]
	        } else if (
	          prop === 'each' ||
	          (typeof prop === 'string' && prop.startsWith('walk'))
	        ) {
	          return (...args) => {
	            return node[prop](
	              ...args.map(i => {
	                if (typeof i === 'function') {
	                  return (child, index) => i(child.toProxy(), index)
	                } else {
	                  return i
	                }
	              })
	            )
	          }
	        } else if (prop === 'every' || prop === 'some') {
	          return cb => {
	            return node[prop]((child, ...other) =>
	              cb(child.toProxy(), ...other)
	            )
	          }
	        } else if (prop === 'root') {
	          return () => node.root().toProxy()
	        } else if (prop === 'nodes') {
	          return node.nodes.map(i => i.toProxy())
	        } else if (prop === 'first' || prop === 'last') {
	          return node[prop].toProxy()
	        } else {
	          return node[prop]
	        }
	      }
	    }
	  }

	  getIterator() {
	    if (!this.lastEach) this.lastEach = 0;
	    if (!this.indexes) this.indexes = {};

	    this.lastEach += 1;
	    let iterator = this.lastEach;
	    this.indexes[iterator] = 0;

	    return iterator
	  }
	}

	Container.registerParse = dependant => {
	  parse = dependant;
	};

	Container.registerRule = dependant => {
	  Rule = dependant;
	};

	Container.registerAtRule = dependant => {
	  AtRule = dependant;
	};

	Container.registerRoot = dependant => {
	  Root = dependant;
	};

	container$1 = Container;
	Container.default = Container;

	/* c8 ignore start */
	Container.rebuild = node => {
	  if (node.type === 'atrule') {
	    Object.setPrototypeOf(node, AtRule.prototype);
	  } else if (node.type === 'rule') {
	    Object.setPrototypeOf(node, Rule.prototype);
	  } else if (node.type === 'decl') {
	    Object.setPrototypeOf(node, Declaration.prototype);
	  } else if (node.type === 'comment') {
	    Object.setPrototypeOf(node, Comment.prototype);
	  } else if (node.type === 'root') {
	    Object.setPrototypeOf(node, Root.prototype);
	  }

	  node[my] = true;

	  if (node.nodes) {
	    node.nodes.forEach(child => {
	      Container.rebuild(child);
	    });
	  }
	};
	/* c8 ignore stop */
	return container$1;
}

var document$1;
var hasRequiredDocument;

function requireDocument () {
	if (hasRequiredDocument) return document$1;
	hasRequiredDocument = 1;

	let Container = requireContainer$1();

	let LazyResult, Processor;

	class Document extends Container {
	  constructor(defaults) {
	    // type needs to be passed to super, otherwise child roots won't be normalized correctly
	    super({ type: 'document', ...defaults });

	    if (!this.nodes) {
	      this.nodes = [];
	    }
	  }

	  toResult(opts = {}) {
	    let lazy = new LazyResult(new Processor(), this, opts);

	    return lazy.stringify()
	  }
	}

	Document.registerLazyResult = dependant => {
	  LazyResult = dependant;
	};

	Document.registerProcessor = dependant => {
	  Processor = dependant;
	};

	document$1 = Document;
	Document.default = Document;
	return document$1;
}

var warning;
var hasRequiredWarning;

function requireWarning () {
	if (hasRequiredWarning) return warning;
	hasRequiredWarning = 1;

	class Warning {
	  constructor(text, opts = {}) {
	    this.type = 'warning';
	    this.text = text;

	    if (opts.node && opts.node.source) {
	      let range = opts.node.rangeBy(opts);
	      this.line = range.start.line;
	      this.column = range.start.column;
	      this.endLine = range.end.line;
	      this.endColumn = range.end.column;
	    }

	    for (let opt in opts) this[opt] = opts[opt];
	  }

	  toString() {
	    if (this.node) {
	      return this.node.error(this.text, {
	        plugin: this.plugin,
	        index: this.index,
	        word: this.word
	      }).message
	    }

	    if (this.plugin) {
	      return this.plugin + ': ' + this.text
	    }

	    return this.text
	  }
	}

	warning = Warning;
	Warning.default = Warning;
	return warning;
}

var result;
var hasRequiredResult;

function requireResult () {
	if (hasRequiredResult) return result;
	hasRequiredResult = 1;

	let Warning = requireWarning();

	class Result {
	  constructor(processor, root, opts) {
	    this.processor = processor;
	    this.messages = [];
	    this.root = root;
	    this.opts = opts;
	    this.css = undefined;
	    this.map = undefined;
	  }

	  toString() {
	    return this.css
	  }

	  warn(text, opts = {}) {
	    if (!opts.plugin) {
	      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
	        opts.plugin = this.lastPlugin.postcssPlugin;
	      }
	    }

	    let warning = new Warning(text, opts);
	    this.messages.push(warning);

	    return warning
	  }

	  warnings() {
	    return this.messages.filter(i => i.type === 'warning')
	  }

	  get content() {
	    return this.css
	  }
	}

	result = Result;
	Result.default = Result;
	return result;
}

var tokenize$1;
var hasRequiredTokenize$1;

function requireTokenize$1 () {
	if (hasRequiredTokenize$1) return tokenize$1;
	hasRequiredTokenize$1 = 1;

	const SINGLE_QUOTE = "'".charCodeAt(0);
	const DOUBLE_QUOTE = '"'.charCodeAt(0);
	const BACKSLASH = '\\'.charCodeAt(0);
	const SLASH = '/'.charCodeAt(0);
	const NEWLINE = '\n'.charCodeAt(0);
	const SPACE = ' '.charCodeAt(0);
	const FEED = '\f'.charCodeAt(0);
	const TAB = '\t'.charCodeAt(0);
	const CR = '\r'.charCodeAt(0);
	const OPEN_SQUARE = '['.charCodeAt(0);
	const CLOSE_SQUARE = ']'.charCodeAt(0);
	const OPEN_PARENTHESES = '('.charCodeAt(0);
	const CLOSE_PARENTHESES = ')'.charCodeAt(0);
	const OPEN_CURLY = '{'.charCodeAt(0);
	const CLOSE_CURLY = '}'.charCodeAt(0);
	const SEMICOLON = ';'.charCodeAt(0);
	const ASTERISK = '*'.charCodeAt(0);
	const COLON = ':'.charCodeAt(0);
	const AT = '@'.charCodeAt(0);

	const RE_AT_END = /[\t\n\f\r "#'()/;[\\\]{}]/g;
	const RE_WORD_END = /[\t\n\f\r !"#'():;@[\\\]{}]|\/(?=\*)/g;
	const RE_BAD_BRACKET = /.[\n"'(/\\]/;
	const RE_HEX_ESCAPE = /[\da-f]/i;

	tokenize$1 = function tokenizer(input, options = {}) {
	  let css = input.css.valueOf();
	  let ignore = options.ignoreErrors;

	  let code, next, quote, content, escape;
	  let escaped, escapePos, prev, n, currentToken;

	  let length = css.length;
	  let pos = 0;
	  let buffer = [];
	  let returned = [];

	  function position() {
	    return pos
	  }

	  function unclosed(what) {
	    throw input.error('Unclosed ' + what, pos)
	  }

	  function endOfFile() {
	    return returned.length === 0 && pos >= length
	  }

	  function nextToken(opts) {
	    if (returned.length) return returned.pop()
	    if (pos >= length) return

	    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false;

	    code = css.charCodeAt(pos);

	    switch (code) {
	      case NEWLINE:
	      case SPACE:
	      case TAB:
	      case CR:
	      case FEED: {
	        next = pos;
	        do {
	          next += 1;
	          code = css.charCodeAt(next);
	        } while (
	          code === SPACE ||
	          code === NEWLINE ||
	          code === TAB ||
	          code === CR ||
	          code === FEED
	        )

	        currentToken = ['space', css.slice(pos, next)];
	        pos = next - 1;
	        break
	      }

	      case OPEN_SQUARE:
	      case CLOSE_SQUARE:
	      case OPEN_CURLY:
	      case CLOSE_CURLY:
	      case COLON:
	      case SEMICOLON:
	      case CLOSE_PARENTHESES: {
	        let controlChar = String.fromCharCode(code);
	        currentToken = [controlChar, controlChar, pos];
	        break
	      }

	      case OPEN_PARENTHESES: {
	        prev = buffer.length ? buffer.pop()[1] : '';
	        n = css.charCodeAt(pos + 1);
	        if (
	          prev === 'url' &&
	          n !== SINGLE_QUOTE &&
	          n !== DOUBLE_QUOTE &&
	          n !== SPACE &&
	          n !== NEWLINE &&
	          n !== TAB &&
	          n !== FEED &&
	          n !== CR
	        ) {
	          next = pos;
	          do {
	            escaped = false;
	            next = css.indexOf(')', next + 1);
	            if (next === -1) {
	              if (ignore || ignoreUnclosed) {
	                next = pos;
	                break
	              } else {
	                unclosed('bracket');
	              }
	            }
	            escapePos = next;
	            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
	              escapePos -= 1;
	              escaped = !escaped;
	            }
	          } while (escaped)

	          currentToken = ['brackets', css.slice(pos, next + 1), pos, next];

	          pos = next;
	        } else {
	          next = css.indexOf(')', pos + 1);
	          content = css.slice(pos, next + 1);

	          if (next === -1 || RE_BAD_BRACKET.test(content)) {
	            currentToken = ['(', '(', pos];
	          } else {
	            currentToken = ['brackets', content, pos, next];
	            pos = next;
	          }
	        }

	        break
	      }

	      case SINGLE_QUOTE:
	      case DOUBLE_QUOTE: {
	        quote = code === SINGLE_QUOTE ? "'" : '"';
	        next = pos;
	        do {
	          escaped = false;
	          next = css.indexOf(quote, next + 1);
	          if (next === -1) {
	            if (ignore || ignoreUnclosed) {
	              next = pos + 1;
	              break
	            } else {
	              unclosed('string');
	            }
	          }
	          escapePos = next;
	          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
	            escapePos -= 1;
	            escaped = !escaped;
	          }
	        } while (escaped)

	        currentToken = ['string', css.slice(pos, next + 1), pos, next];
	        pos = next;
	        break
	      }

	      case AT: {
	        RE_AT_END.lastIndex = pos + 1;
	        RE_AT_END.test(css);
	        if (RE_AT_END.lastIndex === 0) {
	          next = css.length - 1;
	        } else {
	          next = RE_AT_END.lastIndex - 2;
	        }

	        currentToken = ['at-word', css.slice(pos, next + 1), pos, next];

	        pos = next;
	        break
	      }

	      case BACKSLASH: {
	        next = pos;
	        escape = true;
	        while (css.charCodeAt(next + 1) === BACKSLASH) {
	          next += 1;
	          escape = !escape;
	        }
	        code = css.charCodeAt(next + 1);
	        if (
	          escape &&
	          code !== SLASH &&
	          code !== SPACE &&
	          code !== NEWLINE &&
	          code !== TAB &&
	          code !== CR &&
	          code !== FEED
	        ) {
	          next += 1;
	          if (RE_HEX_ESCAPE.test(css.charAt(next))) {
	            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {
	              next += 1;
	            }
	            if (css.charCodeAt(next + 1) === SPACE) {
	              next += 1;
	            }
	          }
	        }

	        currentToken = ['word', css.slice(pos, next + 1), pos, next];

	        pos = next;
	        break
	      }

	      default: {
	        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
	          next = css.indexOf('*/', pos + 2) + 1;
	          if (next === 0) {
	            if (ignore || ignoreUnclosed) {
	              next = css.length;
	            } else {
	              unclosed('comment');
	            }
	          }

	          currentToken = ['comment', css.slice(pos, next + 1), pos, next];
	          pos = next;
	        } else {
	          RE_WORD_END.lastIndex = pos + 1;
	          RE_WORD_END.test(css);
	          if (RE_WORD_END.lastIndex === 0) {
	            next = css.length - 1;
	          } else {
	            next = RE_WORD_END.lastIndex - 2;
	          }

	          currentToken = ['word', css.slice(pos, next + 1), pos, next];
	          buffer.push(currentToken);
	          pos = next;
	        }

	        break
	      }
	    }

	    pos++;
	    return currentToken
	  }

	  function back(token) {
	    returned.push(token);
	  }

	  return {
	    back,
	    nextToken,
	    endOfFile,
	    position
	  }
	};
	return tokenize$1;
}

var atRule;
var hasRequiredAtRule;

function requireAtRule () {
	if (hasRequiredAtRule) return atRule;
	hasRequiredAtRule = 1;

	let Container = requireContainer$1();

	class AtRule extends Container {
	  constructor(defaults) {
	    super(defaults);
	    this.type = 'atrule';
	  }

	  append(...children) {
	    if (!this.proxyOf.nodes) this.nodes = [];
	    return super.append(...children)
	  }

	  prepend(...children) {
	    if (!this.proxyOf.nodes) this.nodes = [];
	    return super.prepend(...children)
	  }
	}

	atRule = AtRule;
	AtRule.default = AtRule;

	Container.registerAtRule(AtRule);
	return atRule;
}

var root$1;
var hasRequiredRoot$1;

function requireRoot$1 () {
	if (hasRequiredRoot$1) return root$1;
	hasRequiredRoot$1 = 1;

	let Container = requireContainer$1();

	let LazyResult, Processor;

	class Root extends Container {
	  constructor(defaults) {
	    super(defaults);
	    this.type = 'root';
	    if (!this.nodes) this.nodes = [];
	  }

	  removeChild(child, ignore) {
	    let index = this.index(child);

	    if (!ignore && index === 0 && this.nodes.length > 1) {
	      this.nodes[1].raws.before = this.nodes[index].raws.before;
	    }

	    return super.removeChild(child)
	  }

	  normalize(child, sample, type) {
	    let nodes = super.normalize(child);

	    if (sample) {
	      if (type === 'prepend') {
	        if (this.nodes.length > 1) {
	          sample.raws.before = this.nodes[1].raws.before;
	        } else {
	          delete sample.raws.before;
	        }
	      } else if (this.first !== sample) {
	        for (let node of nodes) {
	          node.raws.before = sample.raws.before;
	        }
	      }
	    }

	    return nodes
	  }

	  toResult(opts = {}) {
	    let lazy = new LazyResult(new Processor(), this, opts);
	    return lazy.stringify()
	  }
	}

	Root.registerLazyResult = dependant => {
	  LazyResult = dependant;
	};

	Root.registerProcessor = dependant => {
	  Processor = dependant;
	};

	root$1 = Root;
	Root.default = Root;

	Container.registerRoot(Root);
	return root$1;
}

var list_1;
var hasRequiredList;

function requireList () {
	if (hasRequiredList) return list_1;
	hasRequiredList = 1;

	let list = {
	  split(string, separators, last) {
	    let array = [];
	    let current = '';
	    let split = false;

	    let func = 0;
	    let inQuote = false;
	    let prevQuote = '';
	    let escape = false;

	    for (let letter of string) {
	      if (escape) {
	        escape = false;
	      } else if (letter === '\\') {
	        escape = true;
	      } else if (inQuote) {
	        if (letter === prevQuote) {
	          inQuote = false;
	        }
	      } else if (letter === '"' || letter === "'") {
	        inQuote = true;
	        prevQuote = letter;
	      } else if (letter === '(') {
	        func += 1;
	      } else if (letter === ')') {
	        if (func > 0) func -= 1;
	      } else if (func === 0) {
	        if (separators.includes(letter)) split = true;
	      }

	      if (split) {
	        if (current !== '') array.push(current.trim());
	        current = '';
	        split = false;
	      } else {
	        current += letter;
	      }
	    }

	    if (last || current !== '') array.push(current.trim());
	    return array
	  },

	  space(string) {
	    let spaces = [' ', '\n', '\t'];
	    return list.split(string, spaces)
	  },

	  comma(string) {
	    return list.split(string, [','], true)
	  }
	};

	list_1 = list;
	list.default = list;
	return list_1;
}

var rule;
var hasRequiredRule;

function requireRule () {
	if (hasRequiredRule) return rule;
	hasRequiredRule = 1;

	let Container = requireContainer$1();
	let list = requireList();

	class Rule extends Container {
	  constructor(defaults) {
	    super(defaults);
	    this.type = 'rule';
	    if (!this.nodes) this.nodes = [];
	  }

	  get selectors() {
	    return list.comma(this.selector)
	  }

	  set selectors(values) {
	    let match = this.selector ? this.selector.match(/,\s*/) : null;
	    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen');
	    this.selector = values.join(sep);
	  }
	}

	rule = Rule;
	Rule.default = Rule;

	Container.registerRule(Rule);
	return rule;
}

var parser$2;
var hasRequiredParser$2;

function requireParser$2 () {
	if (hasRequiredParser$2) return parser$2;
	hasRequiredParser$2 = 1;

	let Declaration = requireDeclaration();
	let tokenizer = requireTokenize$1();
	let Comment = requireComment$1();
	let AtRule = requireAtRule();
	let Root = requireRoot$1();
	let Rule = requireRule();

	const SAFE_COMMENT_NEIGHBOR = {
	  empty: true,
	  space: true
	};

	function findLastWithPosition(tokens) {
	  for (let i = tokens.length - 1; i >= 0; i--) {
	    let token = tokens[i];
	    let pos = token[3] || token[2];
	    if (pos) return pos
	  }
	}

	class Parser {
	  constructor(input) {
	    this.input = input;

	    this.root = new Root();
	    this.current = this.root;
	    this.spaces = '';
	    this.semicolon = false;
	    this.customProperty = false;

	    this.createTokenizer();
	    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } };
	  }

	  createTokenizer() {
	    this.tokenizer = tokenizer(this.input);
	  }

	  parse() {
	    let token;
	    while (!this.tokenizer.endOfFile()) {
	      token = this.tokenizer.nextToken();

	      switch (token[0]) {
	        case 'space':
	          this.spaces += token[1];
	          break

	        case ';':
	          this.freeSemicolon(token);
	          break

	        case '}':
	          this.end(token);
	          break

	        case 'comment':
	          this.comment(token);
	          break

	        case 'at-word':
	          this.atrule(token);
	          break

	        case '{':
	          this.emptyRule(token);
	          break

	        default:
	          this.other(token);
	          break
	      }
	    }
	    this.endFile();
	  }

	  comment(token) {
	    let node = new Comment();
	    this.init(node, token[2]);
	    node.source.end = this.getPosition(token[3] || token[2]);

	    let text = token[1].slice(2, -2);
	    if (/^\s*$/.test(text)) {
	      node.text = '';
	      node.raws.left = text;
	      node.raws.right = '';
	    } else {
	      let match = text.match(/^(\s*)([^]*\S)(\s*)$/);
	      node.text = match[2];
	      node.raws.left = match[1];
	      node.raws.right = match[3];
	    }
	  }

	  emptyRule(token) {
	    let node = new Rule();
	    this.init(node, token[2]);
	    node.selector = '';
	    node.raws.between = '';
	    this.current = node;
	  }

	  other(start) {
	    let end = false;
	    let type = null;
	    let colon = false;
	    let bracket = null;
	    let brackets = [];
	    let customProperty = start[1].startsWith('--');

	    let tokens = [];
	    let token = start;
	    while (token) {
	      type = token[0];
	      tokens.push(token);

	      if (type === '(' || type === '[') {
	        if (!bracket) bracket = token;
	        brackets.push(type === '(' ? ')' : ']');
	      } else if (customProperty && colon && type === '{') {
	        if (!bracket) bracket = token;
	        brackets.push('}');
	      } else if (brackets.length === 0) {
	        if (type === ';') {
	          if (colon) {
	            this.decl(tokens, customProperty);
	            return
	          } else {
	            break
	          }
	        } else if (type === '{') {
	          this.rule(tokens);
	          return
	        } else if (type === '}') {
	          this.tokenizer.back(tokens.pop());
	          end = true;
	          break
	        } else if (type === ':') {
	          colon = true;
	        }
	      } else if (type === brackets[brackets.length - 1]) {
	        brackets.pop();
	        if (brackets.length === 0) bracket = null;
	      }

	      token = this.tokenizer.nextToken();
	    }

	    if (this.tokenizer.endOfFile()) end = true;
	    if (brackets.length > 0) this.unclosedBracket(bracket);

	    if (end && colon) {
	      if (!customProperty) {
	        while (tokens.length) {
	          token = tokens[tokens.length - 1][0];
	          if (token !== 'space' && token !== 'comment') break
	          this.tokenizer.back(tokens.pop());
	        }
	      }
	      this.decl(tokens, customProperty);
	    } else {
	      this.unknownWord(tokens);
	    }
	  }

	  rule(tokens) {
	    tokens.pop();

	    let node = new Rule();
	    this.init(node, tokens[0][2]);

	    node.raws.between = this.spacesAndCommentsFromEnd(tokens);
	    this.raw(node, 'selector', tokens);
	    this.current = node;
	  }

	  decl(tokens, customProperty) {
	    let node = new Declaration();
	    this.init(node, tokens[0][2]);

	    let last = tokens[tokens.length - 1];
	    if (last[0] === ';') {
	      this.semicolon = true;
	      tokens.pop();
	    }

	    node.source.end = this.getPosition(
	      last[3] || last[2] || findLastWithPosition(tokens)
	    );

	    while (tokens[0][0] !== 'word') {
	      if (tokens.length === 1) this.unknownWord(tokens);
	      node.raws.before += tokens.shift()[1];
	    }
	    node.source.start = this.getPosition(tokens[0][2]);

	    node.prop = '';
	    while (tokens.length) {
	      let type = tokens[0][0];
	      if (type === ':' || type === 'space' || type === 'comment') {
	        break
	      }
	      node.prop += tokens.shift()[1];
	    }

	    node.raws.between = '';

	    let token;
	    while (tokens.length) {
	      token = tokens.shift();

	      if (token[0] === ':') {
	        node.raws.between += token[1];
	        break
	      } else {
	        if (token[0] === 'word' && /\w/.test(token[1])) {
	          this.unknownWord([token]);
	        }
	        node.raws.between += token[1];
	      }
	    }

	    if (node.prop[0] === '_' || node.prop[0] === '*') {
	      node.raws.before += node.prop[0];
	      node.prop = node.prop.slice(1);
	    }

	    let firstSpaces = [];
	    let next;
	    while (tokens.length) {
	      next = tokens[0][0];
	      if (next !== 'space' && next !== 'comment') break
	      firstSpaces.push(tokens.shift());
	    }

	    this.precheckMissedSemicolon(tokens);

	    for (let i = tokens.length - 1; i >= 0; i--) {
	      token = tokens[i];
	      if (token[1].toLowerCase() === '!important') {
	        node.important = true;
	        let string = this.stringFrom(tokens, i);
	        string = this.spacesFromEnd(tokens) + string;
	        if (string !== ' !important') node.raws.important = string;
	        break
	      } else if (token[1].toLowerCase() === 'important') {
	        let cache = tokens.slice(0);
	        let str = '';
	        for (let j = i; j > 0; j--) {
	          let type = cache[j][0];
	          if (str.trim().indexOf('!') === 0 && type !== 'space') {
	            break
	          }
	          str = cache.pop()[1] + str;
	        }
	        if (str.trim().indexOf('!') === 0) {
	          node.important = true;
	          node.raws.important = str;
	          tokens = cache;
	        }
	      }

	      if (token[0] !== 'space' && token[0] !== 'comment') {
	        break
	      }
	    }

	    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment');

	    if (hasWord) {
	      node.raws.between += firstSpaces.map(i => i[1]).join('');
	      firstSpaces = [];
	    }
	    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty);

	    if (node.value.includes(':') && !customProperty) {
	      this.checkMissedSemicolon(tokens);
	    }
	  }

	  atrule(token) {
	    let node = new AtRule();
	    node.name = token[1].slice(1);
	    if (node.name === '') {
	      this.unnamedAtrule(node, token);
	    }
	    this.init(node, token[2]);

	    let type;
	    let prev;
	    let shift;
	    let last = false;
	    let open = false;
	    let params = [];
	    let brackets = [];

	    while (!this.tokenizer.endOfFile()) {
	      token = this.tokenizer.nextToken();
	      type = token[0];

	      if (type === '(' || type === '[') {
	        brackets.push(type === '(' ? ')' : ']');
	      } else if (type === '{' && brackets.length > 0) {
	        brackets.push('}');
	      } else if (type === brackets[brackets.length - 1]) {
	        brackets.pop();
	      }

	      if (brackets.length === 0) {
	        if (type === ';') {
	          node.source.end = this.getPosition(token[2]);
	          this.semicolon = true;
	          break
	        } else if (type === '{') {
	          open = true;
	          break
	        } else if (type === '}') {
	          if (params.length > 0) {
	            shift = params.length - 1;
	            prev = params[shift];
	            while (prev && prev[0] === 'space') {
	              prev = params[--shift];
	            }
	            if (prev) {
	              node.source.end = this.getPosition(prev[3] || prev[2]);
	            }
	          }
	          this.end(token);
	          break
	        } else {
	          params.push(token);
	        }
	      } else {
	        params.push(token);
	      }

	      if (this.tokenizer.endOfFile()) {
	        last = true;
	        break
	      }
	    }

	    node.raws.between = this.spacesAndCommentsFromEnd(params);
	    if (params.length) {
	      node.raws.afterName = this.spacesAndCommentsFromStart(params);
	      this.raw(node, 'params', params);
	      if (last) {
	        token = params[params.length - 1];
	        node.source.end = this.getPosition(token[3] || token[2]);
	        this.spaces = node.raws.between;
	        node.raws.between = '';
	      }
	    } else {
	      node.raws.afterName = '';
	      node.params = '';
	    }

	    if (open) {
	      node.nodes = [];
	      this.current = node;
	    }
	  }

	  end(token) {
	    if (this.current.nodes && this.current.nodes.length) {
	      this.current.raws.semicolon = this.semicolon;
	    }
	    this.semicolon = false;

	    this.current.raws.after = (this.current.raws.after || '') + this.spaces;
	    this.spaces = '';

	    if (this.current.parent) {
	      this.current.source.end = this.getPosition(token[2]);
	      this.current = this.current.parent;
	    } else {
	      this.unexpectedClose(token);
	    }
	  }

	  endFile() {
	    if (this.current.parent) this.unclosedBlock();
	    if (this.current.nodes && this.current.nodes.length) {
	      this.current.raws.semicolon = this.semicolon;
	    }
	    this.current.raws.after = (this.current.raws.after || '') + this.spaces;
	  }

	  freeSemicolon(token) {
	    this.spaces += token[1];
	    if (this.current.nodes) {
	      let prev = this.current.nodes[this.current.nodes.length - 1];
	      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {
	        prev.raws.ownSemicolon = this.spaces;
	        this.spaces = '';
	      }
	    }
	  }

	  // Helpers

	  getPosition(offset) {
	    let pos = this.input.fromOffset(offset);
	    return {
	      offset,
	      line: pos.line,
	      column: pos.col
	    }
	  }

	  init(node, offset) {
	    this.current.push(node);
	    node.source = {
	      start: this.getPosition(offset),
	      input: this.input
	    };
	    node.raws.before = this.spaces;
	    this.spaces = '';
	    if (node.type !== 'comment') this.semicolon = false;
	  }

	  raw(node, prop, tokens, customProperty) {
	    let token, type;
	    let length = tokens.length;
	    let value = '';
	    let clean = true;
	    let next, prev;

	    for (let i = 0; i < length; i += 1) {
	      token = tokens[i];
	      type = token[0];
	      if (type === 'space' && i === length - 1 && !customProperty) {
	        clean = false;
	      } else if (type === 'comment') {
	        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty';
	        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty';
	        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {
	          if (value.slice(-1) === ',') {
	            clean = false;
	          } else {
	            value += token[1];
	          }
	        } else {
	          clean = false;
	        }
	      } else {
	        value += token[1];
	      }
	    }
	    if (!clean) {
	      let raw = tokens.reduce((all, i) => all + i[1], '');
	      node.raws[prop] = { value, raw };
	    }
	    node[prop] = value;
	  }

	  spacesAndCommentsFromEnd(tokens) {
	    let lastTokenType;
	    let spaces = '';
	    while (tokens.length) {
	      lastTokenType = tokens[tokens.length - 1][0];
	      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break
	      spaces = tokens.pop()[1] + spaces;
	    }
	    return spaces
	  }

	  spacesAndCommentsFromStart(tokens) {
	    let next;
	    let spaces = '';
	    while (tokens.length) {
	      next = tokens[0][0];
	      if (next !== 'space' && next !== 'comment') break
	      spaces += tokens.shift()[1];
	    }
	    return spaces
	  }

	  spacesFromEnd(tokens) {
	    let lastTokenType;
	    let spaces = '';
	    while (tokens.length) {
	      lastTokenType = tokens[tokens.length - 1][0];
	      if (lastTokenType !== 'space') break
	      spaces = tokens.pop()[1] + spaces;
	    }
	    return spaces
	  }

	  stringFrom(tokens, from) {
	    let result = '';
	    for (let i = from; i < tokens.length; i++) {
	      result += tokens[i][1];
	    }
	    tokens.splice(from, tokens.length - from);
	    return result
	  }

	  colon(tokens) {
	    let brackets = 0;
	    let token, type, prev;
	    for (let [i, element] of tokens.entries()) {
	      token = element;
	      type = token[0];

	      if (type === '(') {
	        brackets += 1;
	      }
	      if (type === ')') {
	        brackets -= 1;
	      }
	      if (brackets === 0 && type === ':') {
	        if (!prev) {
	          this.doubleColon(token);
	        } else if (prev[0] === 'word' && prev[1] === 'progid') {
	          continue
	        } else {
	          return i
	        }
	      }

	      prev = token;
	    }
	    return false
	  }

	  // Errors

	  unclosedBracket(bracket) {
	    throw this.input.error(
	      'Unclosed bracket',
	      { offset: bracket[2] },
	      { offset: bracket[2] + 1 }
	    )
	  }

	  unknownWord(tokens) {
	    throw this.input.error(
	      'Unknown word',
	      { offset: tokens[0][2] },
	      { offset: tokens[0][2] + tokens[0][1].length }
	    )
	  }

	  unexpectedClose(token) {
	    throw this.input.error(
	      'Unexpected }',
	      { offset: token[2] },
	      { offset: token[2] + 1 }
	    )
	  }

	  unclosedBlock() {
	    let pos = this.current.source.start;
	    throw this.input.error('Unclosed block', pos.line, pos.column)
	  }

	  doubleColon(token) {
	    throw this.input.error(
	      'Double colon',
	      { offset: token[2] },
	      { offset: token[2] + token[1].length }
	    )
	  }

	  unnamedAtrule(node, token) {
	    throw this.input.error(
	      'At-rule without name',
	      { offset: token[2] },
	      { offset: token[2] + token[1].length }
	    )
	  }

	  precheckMissedSemicolon(/* tokens */) {
	    // Hook for Safe Parser
	  }

	  checkMissedSemicolon(tokens) {
	    let colon = this.colon(tokens);
	    if (colon === false) return

	    let founded = 0;
	    let token;
	    for (let j = colon - 1; j >= 0; j--) {
	      token = tokens[j];
	      if (token[0] !== 'space') {
	        founded += 1;
	        if (founded === 2) break
	      }
	    }
	    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.
	    // Then we need to return the colon after that word token. [3] is the "end" colon of that word.
	    // And because we need it after that one we do +1 to get the next one.
	    throw this.input.error(
	      'Missed semicolon',
	      token[0] === 'word' ? token[3] + 1 : token[2]
	    )
	  }
	}

	parser$2 = Parser;
	return parser$2;
}

var parse_1$2;
var hasRequiredParse$4;

function requireParse$4 () {
	if (hasRequiredParse$4) return parse_1$2;
	hasRequiredParse$4 = 1;

	let Container = requireContainer$1();
	let Parser = requireParser$2();
	let Input = requireInput();

	function parse(css, opts) {
	  let input = new Input(css, opts);
	  let parser = new Parser(input);
	  try {
	    parser.parse();
	  } catch (e) {
	    throw e
	  }

	  return parser.root
	}

	parse_1$2 = parse;
	parse.default = parse;

	Container.registerParse(parse);
	return parse_1$2;
}

var lazyResult;
var hasRequiredLazyResult;

function requireLazyResult () {
	if (hasRequiredLazyResult) return lazyResult;
	hasRequiredLazyResult = 1;

	let { isClean, my } = requireSymbols();
	let MapGenerator = requireMapGenerator();
	let stringify = requireStringify$2();
	let Container = requireContainer$1();
	let Document = requireDocument();
	let Result = requireResult();
	let parse = requireParse$4();
	let Root = requireRoot$1();

	const TYPE_TO_CLASS_NAME = {
	  document: 'Document',
	  root: 'Root',
	  atrule: 'AtRule',
	  rule: 'Rule',
	  decl: 'Declaration',
	  comment: 'Comment'
	};

	const PLUGIN_PROPS = {
	  postcssPlugin: true,
	  prepare: true,
	  Once: true,
	  Document: true,
	  Root: true,
	  Declaration: true,
	  Rule: true,
	  AtRule: true,
	  Comment: true,
	  DeclarationExit: true,
	  RuleExit: true,
	  AtRuleExit: true,
	  CommentExit: true,
	  RootExit: true,
	  DocumentExit: true,
	  OnceExit: true
	};

	const NOT_VISITORS = {
	  postcssPlugin: true,
	  prepare: true,
	  Once: true
	};

	const CHILDREN = 0;

	function isPromise(obj) {
	  return typeof obj === 'object' && typeof obj.then === 'function'
	}

	function getEvents(node) {
	  let key = false;
	  let type = TYPE_TO_CLASS_NAME[node.type];
	  if (node.type === 'decl') {
	    key = node.prop.toLowerCase();
	  } else if (node.type === 'atrule') {
	    key = node.name.toLowerCase();
	  }

	  if (key && node.append) {
	    return [
	      type,
	      type + '-' + key,
	      CHILDREN,
	      type + 'Exit',
	      type + 'Exit-' + key
	    ]
	  } else if (key) {
	    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]
	  } else if (node.append) {
	    return [type, CHILDREN, type + 'Exit']
	  } else {
	    return [type, type + 'Exit']
	  }
	}

	function toStack(node) {
	  let events;
	  if (node.type === 'document') {
	    events = ['Document', CHILDREN, 'DocumentExit'];
	  } else if (node.type === 'root') {
	    events = ['Root', CHILDREN, 'RootExit'];
	  } else {
	    events = getEvents(node);
	  }

	  return {
	    node,
	    events,
	    eventIndex: 0,
	    visitors: [],
	    visitorIndex: 0,
	    iterator: 0
	  }
	}

	function cleanMarks(node) {
	  node[isClean] = false;
	  if (node.nodes) node.nodes.forEach(i => cleanMarks(i));
	  return node
	}

	let postcss = {};

	class LazyResult {
	  constructor(processor, css, opts) {
	    this.stringified = false;
	    this.processed = false;

	    let root;
	    if (
	      typeof css === 'object' &&
	      css !== null &&
	      (css.type === 'root' || css.type === 'document')
	    ) {
	      root = cleanMarks(css);
	    } else if (css instanceof LazyResult || css instanceof Result) {
	      root = cleanMarks(css.root);
	      if (css.map) {
	        if (typeof opts.map === 'undefined') opts.map = {};
	        if (!opts.map.inline) opts.map.inline = false;
	        opts.map.prev = css.map;
	      }
	    } else {
	      let parser = parse;
	      if (opts.syntax) parser = opts.syntax.parse;
	      if (opts.parser) parser = opts.parser;
	      if (parser.parse) parser = parser.parse;

	      try {
	        root = parser(css, opts);
	      } catch (error) {
	        this.processed = true;
	        this.error = error;
	      }

	      if (root && !root[my]) {
	        /* c8 ignore next 2 */
	        Container.rebuild(root);
	      }
	    }

	    this.result = new Result(processor, root, opts);
	    this.helpers = { ...postcss, result: this.result, postcss };
	    this.plugins = this.processor.plugins.map(plugin => {
	      if (typeof plugin === 'object' && plugin.prepare) {
	        return { ...plugin, ...plugin.prepare(this.result) }
	      } else {
	        return plugin
	      }
	    });
	  }

	  get [Symbol.toStringTag]() {
	    return 'LazyResult'
	  }

	  get processor() {
	    return this.result.processor
	  }

	  get opts() {
	    return this.result.opts
	  }

	  get css() {
	    return this.stringify().css
	  }

	  get content() {
	    return this.stringify().content
	  }

	  get map() {
	    return this.stringify().map
	  }

	  get root() {
	    return this.sync().root
	  }

	  get messages() {
	    return this.sync().messages
	  }

	  warnings() {
	    return this.sync().warnings()
	  }

	  toString() {
	    return this.css
	  }

	  then(onFulfilled, onRejected) {
	    return this.async().then(onFulfilled, onRejected)
	  }

	  catch(onRejected) {
	    return this.async().catch(onRejected)
	  }

	  finally(onFinally) {
	    return this.async().then(onFinally, onFinally)
	  }

	  async() {
	    if (this.error) return Promise.reject(this.error)
	    if (this.processed) return Promise.resolve(this.result)
	    if (!this.processing) {
	      this.processing = this.runAsync();
	    }
	    return this.processing
	  }

	  sync() {
	    if (this.error) throw this.error
	    if (this.processed) return this.result
	    this.processed = true;

	    if (this.processing) {
	      throw this.getAsyncError()
	    }

	    for (let plugin of this.plugins) {
	      let promise = this.runOnRoot(plugin);
	      if (isPromise(promise)) {
	        throw this.getAsyncError()
	      }
	    }

	    this.prepareVisitors();
	    if (this.hasListener) {
	      let root = this.result.root;
	      while (!root[isClean]) {
	        root[isClean] = true;
	        this.walkSync(root);
	      }
	      if (this.listeners.OnceExit) {
	        if (root.type === 'document') {
	          for (let subRoot of root.nodes) {
	            this.visitSync(this.listeners.OnceExit, subRoot);
	          }
	        } else {
	          this.visitSync(this.listeners.OnceExit, root);
	        }
	      }
	    }

	    return this.result
	  }

	  stringify() {
	    if (this.error) throw this.error
	    if (this.stringified) return this.result
	    this.stringified = true;

	    this.sync();

	    let opts = this.result.opts;
	    let str = stringify;
	    if (opts.syntax) str = opts.syntax.stringify;
	    if (opts.stringifier) str = opts.stringifier;
	    if (str.stringify) str = str.stringify;

	    let map = new MapGenerator(str, this.result.root, this.result.opts);
	    let data = map.generate();
	    this.result.css = data[0];
	    this.result.map = data[1];

	    return this.result
	  }

	  walkSync(node) {
	    node[isClean] = true;
	    let events = getEvents(node);
	    for (let event of events) {
	      if (event === CHILDREN) {
	        if (node.nodes) {
	          node.each(child => {
	            if (!child[isClean]) this.walkSync(child);
	          });
	        }
	      } else {
	        let visitors = this.listeners[event];
	        if (visitors) {
	          if (this.visitSync(visitors, node.toProxy())) return
	        }
	      }
	    }
	  }

	  visitSync(visitors, node) {
	    for (let [plugin, visitor] of visitors) {
	      this.result.lastPlugin = plugin;
	      let promise;
	      try {
	        promise = visitor(node, this.helpers);
	      } catch (e) {
	        throw this.handleError(e, node.proxyOf)
	      }
	      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {
	        return true
	      }
	      if (isPromise(promise)) {
	        throw this.getAsyncError()
	      }
	    }
	  }

	  runOnRoot(plugin) {
	    this.result.lastPlugin = plugin;
	    try {
	      if (typeof plugin === 'object' && plugin.Once) {
	        if (this.result.root.type === 'document') {
	          let roots = this.result.root.nodes.map(root =>
	            plugin.Once(root, this.helpers)
	          );

	          if (isPromise(roots[0])) {
	            return Promise.all(roots)
	          }

	          return roots
	        }

	        return plugin.Once(this.result.root, this.helpers)
	      } else if (typeof plugin === 'function') {
	        return plugin(this.result.root, this.result)
	      }
	    } catch (error) {
	      throw this.handleError(error)
	    }
	  }

	  getAsyncError() {
	    throw new Error('Use process(css).then(cb) to work with async plugins')
	  }

	  handleError(error, node) {
	    let plugin = this.result.lastPlugin;
	    try {
	      if (node) node.addToError(error);
	      this.error = error;
	      if (error.name === 'CssSyntaxError' && !error.plugin) {
	        error.plugin = plugin.postcssPlugin;
	        error.setMessage();
	      } else if (plugin.postcssVersion) {
	        if ("production" !== 'production') ;
	      }
	    } catch (err) {
	      /* c8 ignore next 3 */
	      // eslint-disable-next-line no-console
	      if (console && console.error) console.error(err);
	    }
	    return error
	  }

	  async runAsync() {
	    this.plugin = 0;
	    for (let i = 0; i < this.plugins.length; i++) {
	      let plugin = this.plugins[i];
	      let promise = this.runOnRoot(plugin);
	      if (isPromise(promise)) {
	        try {
	          await promise;
	        } catch (error) {
	          throw this.handleError(error)
	        }
	      }
	    }

	    this.prepareVisitors();
	    if (this.hasListener) {
	      let root = this.result.root;
	      while (!root[isClean]) {
	        root[isClean] = true;
	        let stack = [toStack(root)];
	        while (stack.length > 0) {
	          let promise = this.visitTick(stack);
	          if (isPromise(promise)) {
	            try {
	              await promise;
	            } catch (e) {
	              let node = stack[stack.length - 1].node;
	              throw this.handleError(e, node)
	            }
	          }
	        }
	      }

	      if (this.listeners.OnceExit) {
	        for (let [plugin, visitor] of this.listeners.OnceExit) {
	          this.result.lastPlugin = plugin;
	          try {
	            if (root.type === 'document') {
	              let roots = root.nodes.map(subRoot =>
	                visitor(subRoot, this.helpers)
	              );

	              await Promise.all(roots);
	            } else {
	              await visitor(root, this.helpers);
	            }
	          } catch (e) {
	            throw this.handleError(e)
	          }
	        }
	      }
	    }

	    this.processed = true;
	    return this.stringify()
	  }

	  prepareVisitors() {
	    this.listeners = {};
	    let add = (plugin, type, cb) => {
	      if (!this.listeners[type]) this.listeners[type] = [];
	      this.listeners[type].push([plugin, cb]);
	    };
	    for (let plugin of this.plugins) {
	      if (typeof plugin === 'object') {
	        for (let event in plugin) {
	          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {
	            throw new Error(
	              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +
	                `Try to update PostCSS (${this.processor.version} now).`
	            )
	          }
	          if (!NOT_VISITORS[event]) {
	            if (typeof plugin[event] === 'object') {
	              for (let filter in plugin[event]) {
	                if (filter === '*') {
	                  add(plugin, event, plugin[event][filter]);
	                } else {
	                  add(
	                    plugin,
	                    event + '-' + filter.toLowerCase(),
	                    plugin[event][filter]
	                  );
	                }
	              }
	            } else if (typeof plugin[event] === 'function') {
	              add(plugin, event, plugin[event]);
	            }
	          }
	        }
	      }
	    }
	    this.hasListener = Object.keys(this.listeners).length > 0;
	  }

	  visitTick(stack) {
	    let visit = stack[stack.length - 1];
	    let { node, visitors } = visit;

	    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {
	      stack.pop();
	      return
	    }

	    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {
	      let [plugin, visitor] = visitors[visit.visitorIndex];
	      visit.visitorIndex += 1;
	      if (visit.visitorIndex === visitors.length) {
	        visit.visitors = [];
	        visit.visitorIndex = 0;
	      }
	      this.result.lastPlugin = plugin;
	      try {
	        return visitor(node.toProxy(), this.helpers)
	      } catch (e) {
	        throw this.handleError(e, node)
	      }
	    }

	    if (visit.iterator !== 0) {
	      let iterator = visit.iterator;
	      let child;
	      while ((child = node.nodes[node.indexes[iterator]])) {
	        node.indexes[iterator] += 1;
	        if (!child[isClean]) {
	          child[isClean] = true;
	          stack.push(toStack(child));
	          return
	        }
	      }
	      visit.iterator = 0;
	      delete node.indexes[iterator];
	    }

	    let events = visit.events;
	    while (visit.eventIndex < events.length) {
	      let event = events[visit.eventIndex];
	      visit.eventIndex += 1;
	      if (event === CHILDREN) {
	        if (node.nodes && node.nodes.length) {
	          node[isClean] = true;
	          visit.iterator = node.getIterator();
	        }
	        return
	      } else if (this.listeners[event]) {
	        visit.visitors = this.listeners[event];
	        return
	      }
	    }
	    stack.pop();
	  }
	}

	LazyResult.registerPostcss = dependant => {
	  postcss = dependant;
	};

	lazyResult = LazyResult;
	LazyResult.default = LazyResult;

	Root.registerLazyResult(LazyResult);
	Document.registerLazyResult(LazyResult);
	return lazyResult;
}

var noWorkResult;
var hasRequiredNoWorkResult;

function requireNoWorkResult () {
	if (hasRequiredNoWorkResult) return noWorkResult;
	hasRequiredNoWorkResult = 1;

	let MapGenerator = requireMapGenerator();
	let stringify = requireStringify$2();
	let parse = requireParse$4();
	const Result = requireResult();

	class NoWorkResult {
	  constructor(processor, css, opts) {
	    css = css.toString();
	    this.stringified = false;

	    this._processor = processor;
	    this._css = css;
	    this._opts = opts;
	    this._map = undefined;
	    let root;

	    let str = stringify;
	    this.result = new Result(this._processor, root, this._opts);
	    this.result.css = css;

	    let self = this;
	    Object.defineProperty(this.result, 'root', {
	      get() {
	        return self.root
	      }
	    });

	    let map = new MapGenerator(str, root, this._opts, css);
	    if (map.isMap()) {
	      let [generatedCSS, generatedMap] = map.generate();
	      if (generatedCSS) {
	        this.result.css = generatedCSS;
	      }
	      if (generatedMap) {
	        this.result.map = generatedMap;
	      }
	    }
	  }

	  get [Symbol.toStringTag]() {
	    return 'NoWorkResult'
	  }

	  get processor() {
	    return this.result.processor
	  }

	  get opts() {
	    return this.result.opts
	  }

	  get css() {
	    return this.result.css
	  }

	  get content() {
	    return this.result.css
	  }

	  get map() {
	    return this.result.map
	  }

	  get root() {
	    if (this._root) {
	      return this._root
	    }

	    let root;
	    let parser = parse;

	    try {
	      root = parser(this._css, this._opts);
	    } catch (error) {
	      this.error = error;
	    }

	    if (this.error) {
	      throw this.error
	    } else {
	      this._root = root;
	      return root
	    }
	  }

	  get messages() {
	    return []
	  }

	  warnings() {
	    return []
	  }

	  toString() {
	    return this._css
	  }

	  then(onFulfilled, onRejected) {

	    return this.async().then(onFulfilled, onRejected)
	  }

	  catch(onRejected) {
	    return this.async().catch(onRejected)
	  }

	  finally(onFinally) {
	    return this.async().then(onFinally, onFinally)
	  }

	  async() {
	    if (this.error) return Promise.reject(this.error)
	    return Promise.resolve(this.result)
	  }

	  sync() {
	    if (this.error) throw this.error
	    return this.result
	  }
	}

	noWorkResult = NoWorkResult;
	NoWorkResult.default = NoWorkResult;
	return noWorkResult;
}

var processor$1;
var hasRequiredProcessor$1;

function requireProcessor$1 () {
	if (hasRequiredProcessor$1) return processor$1;
	hasRequiredProcessor$1 = 1;

	let NoWorkResult = requireNoWorkResult();
	let LazyResult = requireLazyResult();
	let Document = requireDocument();
	let Root = requireRoot$1();

	class Processor {
	  constructor(plugins = []) {
	    this.version = '8.4.21';
	    this.plugins = this.normalize(plugins);
	  }

	  use(plugin) {
	    this.plugins = this.plugins.concat(this.normalize([plugin]));
	    return this
	  }

	  process(css, opts = {}) {
	    if (
	      this.plugins.length === 0 &&
	      typeof opts.parser === 'undefined' &&
	      typeof opts.stringifier === 'undefined' &&
	      typeof opts.syntax === 'undefined'
	    ) {
	      return new NoWorkResult(this, css, opts)
	    } else {
	      return new LazyResult(this, css, opts)
	    }
	  }

	  normalize(plugins) {
	    let normalized = [];
	    for (let i of plugins) {
	      if (i.postcss === true) {
	        i = i();
	      } else if (i.postcss) {
	        i = i.postcss;
	      }

	      if (typeof i === 'object' && Array.isArray(i.plugins)) {
	        normalized = normalized.concat(i.plugins);
	      } else if (typeof i === 'object' && i.postcssPlugin) {
	        normalized.push(i);
	      } else if (typeof i === 'function') {
	        normalized.push(i);
	      } else if (typeof i === 'object' && (i.parse || i.stringify)) ; else {
	        throw new Error(i + ' is not a PostCSS plugin')
	      }
	    }
	    return normalized
	  }
	}

	processor$1 = Processor;
	Processor.default = Processor;

	Root.registerProcessor(Processor);
	Document.registerProcessor(Processor);
	return processor$1;
}

var fromJSON_1;
var hasRequiredFromJSON;

function requireFromJSON () {
	if (hasRequiredFromJSON) return fromJSON_1;
	hasRequiredFromJSON = 1;

	let Declaration = requireDeclaration();
	let PreviousMap = requirePreviousMap();
	let Comment = requireComment$1();
	let AtRule = requireAtRule();
	let Input = requireInput();
	let Root = requireRoot$1();
	let Rule = requireRule();

	function fromJSON(json, inputs) {
	  if (Array.isArray(json)) return json.map(n => fromJSON(n))

	  let { inputs: ownInputs, ...defaults } = json;
	  if (ownInputs) {
	    inputs = [];
	    for (let input of ownInputs) {
	      let inputHydrated = { ...input, __proto__: Input.prototype };
	      if (inputHydrated.map) {
	        inputHydrated.map = {
	          ...inputHydrated.map,
	          __proto__: PreviousMap.prototype
	        };
	      }
	      inputs.push(inputHydrated);
	    }
	  }
	  if (defaults.nodes) {
	    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs));
	  }
	  if (defaults.source) {
	    let { inputId, ...source } = defaults.source;
	    defaults.source = source;
	    if (inputId != null) {
	      defaults.source.input = inputs[inputId];
	    }
	  }
	  if (defaults.type === 'root') {
	    return new Root(defaults)
	  } else if (defaults.type === 'decl') {
	    return new Declaration(defaults)
	  } else if (defaults.type === 'rule') {
	    return new Rule(defaults)
	  } else if (defaults.type === 'comment') {
	    return new Comment(defaults)
	  } else if (defaults.type === 'atrule') {
	    return new AtRule(defaults)
	  } else {
	    throw new Error('Unknown node type: ' + json.type)
	  }
	}

	fromJSON_1 = fromJSON;
	fromJSON.default = fromJSON;
	return fromJSON_1;
}

var postcss_1;
var hasRequiredPostcss;

function requirePostcss () {
	if (hasRequiredPostcss) return postcss_1;
	hasRequiredPostcss = 1;

	let CssSyntaxError = requireCssSyntaxError();
	let Declaration = requireDeclaration();
	let LazyResult = requireLazyResult();
	let Container = requireContainer$1();
	let Processor = requireProcessor$1();
	let stringify = requireStringify$2();
	let fromJSON = requireFromJSON();
	let Document = requireDocument();
	let Warning = requireWarning();
	let Comment = requireComment$1();
	let AtRule = requireAtRule();
	let Result = requireResult();
	let Input = requireInput();
	let parse = requireParse$4();
	let list = requireList();
	let Rule = requireRule();
	let Root = requireRoot$1();
	let Node = requireNode$1();

	function postcss(...plugins) {
	  if (plugins.length === 1 && Array.isArray(plugins[0])) {
	    plugins = plugins[0];
	  }
	  return new Processor(plugins)
	}

	postcss.plugin = function plugin(name, initializer) {
	  let warningPrinted = false;
	  function creator(...args) {
	    // eslint-disable-next-line no-console
	    if (console && console.warn && !warningPrinted) {
	      warningPrinted = true;
	      // eslint-disable-next-line no-console
	      console.warn(
	        name +
	          ': postcss.plugin was deprecated. Migration guide:\n' +
	          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'
	      );
	      if (({}).LANG && ({}).LANG.startsWith('cn')) {
	        /* c8 ignore next 7 */
	        // eslint-disable-next-line no-console
	        console.warn(
	          name +
	            ': 里面 postcss.plugin 被弃用. 迁移指南:\n' +
	            'https://www.w3ctech.com/topic/2226'
	        );
	      }
	    }
	    let transformer = initializer(...args);
	    transformer.postcssPlugin = name;
	    transformer.postcssVersion = new Processor().version;
	    return transformer
	  }

	  let cache;
	  Object.defineProperty(creator, 'postcss', {
	    get() {
	      if (!cache) cache = creator();
	      return cache
	    }
	  });

	  creator.process = function (css, processOpts, pluginOpts) {
	    return postcss([creator(pluginOpts)]).process(css, processOpts)
	  };

	  return creator
	};

	postcss.stringify = stringify;
	postcss.parse = parse;
	postcss.fromJSON = fromJSON;
	postcss.list = list;

	postcss.comment = defaults => new Comment(defaults);
	postcss.atRule = defaults => new AtRule(defaults);
	postcss.decl = defaults => new Declaration(defaults);
	postcss.rule = defaults => new Rule(defaults);
	postcss.root = defaults => new Root(defaults);
	postcss.document = defaults => new Document(defaults);

	postcss.CssSyntaxError = CssSyntaxError;
	postcss.Declaration = Declaration;
	postcss.Container = Container;
	postcss.Processor = Processor;
	postcss.Document = Document;
	postcss.Comment = Comment;
	postcss.Warning = Warning;
	postcss.AtRule = AtRule;
	postcss.Result = Result;
	postcss.Input = Input;
	postcss.Rule = Rule;
	postcss.Root = Root;
	postcss.Node = Node;

	LazyResult.registerPostcss(postcss);

	postcss_1 = postcss;
	postcss.default = postcss;
	return postcss_1;
}

var dlv_umdExports = {};
var dlv_umd = {
  get exports(){ return dlv_umdExports; },
  set exports(v){ dlv_umdExports = v; },
};

var hasRequiredDlv_umd;

function requireDlv_umd () {
	if (hasRequiredDlv_umd) return dlv_umdExports;
	hasRequiredDlv_umd = 1;
	(function (module, exports) {
		!function(t,n){module.exports=function(t,n,e,i,o){for(n=n.split?n.split("."):n,i=0;i<n.length;i++)t=t?t[n[i]]:o;return t===o?e:t};}();
		
} (dlv_umd));
	return dlv_umdExports;
}

var distExports = {};
var dist$1 = {
  get exports(){ return distExports; },
  set exports(v){ distExports = v; },
};

var processorExports = {};
var processor = {
  get exports(){ return processorExports; },
  set exports(v){ processorExports = v; },
};

var parserExports = {};
var parser$1 = {
  get exports(){ return parserExports; },
  set exports(v){ parserExports = v; },
};

var rootExports = {};
var root = {
  get exports(){ return rootExports; },
  set exports(v){ rootExports = v; },
};

var containerExports = {};
var container = {
  get exports(){ return containerExports; },
  set exports(v){ containerExports = v; },
};

var nodeExports = {};
var node = {
  get exports(){ return nodeExports; },
  set exports(v){ nodeExports = v; },
};

var util$1 = {};

var unescExports = {};
var unesc = {
  get exports(){ return unescExports; },
  set exports(v){ unescExports = v; },
};

var hasRequiredUnesc;

function requireUnesc () {
	if (hasRequiredUnesc) return unescExports;
	hasRequiredUnesc = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = unesc;

		// Many thanks for this post which made this migration much easier.
		// https://mathiasbynens.be/notes/css-escapes

		/**
		 * 
		 * @param {string} str 
		 * @returns {[string, number]|undefined}
		 */
		function gobbleHex(str) {
		  var lower = str.toLowerCase();
		  var hex = '';
		  var spaceTerminated = false;

		  for (var i = 0; i < 6 && lower[i] !== undefined; i++) {
		    var code = lower.charCodeAt(i); // check to see if we are dealing with a valid hex char [a-f|0-9]

		    var valid = code >= 97 && code <= 102 || code >= 48 && code <= 57; // https://drafts.csswg.org/css-syntax/#consume-escaped-code-point

		    spaceTerminated = code === 32;

		    if (!valid) {
		      break;
		    }

		    hex += lower[i];
		  }

		  if (hex.length === 0) {
		    return undefined;
		  }

		  var codePoint = parseInt(hex, 16);
		  var isSurrogate = codePoint >= 0xD800 && codePoint <= 0xDFFF; // Add special case for
		  // "If this number is zero, or is for a surrogate, or is greater than the maximum allowed code point"
		  // https://drafts.csswg.org/css-syntax/#maximum-allowed-code-point

		  if (isSurrogate || codePoint === 0x0000 || codePoint > 0x10FFFF) {
		    return ["\uFFFD", hex.length + (spaceTerminated ? 1 : 0)];
		  }

		  return [String.fromCodePoint(codePoint), hex.length + (spaceTerminated ? 1 : 0)];
		}

		var CONTAINS_ESCAPE = /\\/;

		function unesc(str) {
		  var needToProcess = CONTAINS_ESCAPE.test(str);

		  if (!needToProcess) {
		    return str;
		  }

		  var ret = "";

		  for (var i = 0; i < str.length; i++) {
		    if (str[i] === "\\") {
		      var gobbled = gobbleHex(str.slice(i + 1, i + 7));

		      if (gobbled !== undefined) {
		        ret += gobbled[0];
		        i += gobbled[1];
		        continue;
		      } // Retain a pair of \\ if double escaped `\\\\`
		      // https://github.com/postcss/postcss-selector-parser/commit/268c9a7656fb53f543dc620aa5b73a30ec3ff20e


		      if (str[i + 1] === "\\") {
		        ret += "\\";
		        i++;
		        continue;
		      } // if \\ is at the end of the string retain it
		      // https://github.com/postcss/postcss-selector-parser/commit/01a6b346e3612ce1ab20219acc26abdc259ccefb


		      if (str.length === i + 1) {
		        ret += str[i];
		      }

		      continue;
		    }

		    ret += str[i];
		  }

		  return ret;
		}

		module.exports = exports.default;
} (unesc, unescExports));
	return unescExports;
}

var getPropExports = {};
var getProp = {
  get exports(){ return getPropExports; },
  set exports(v){ getPropExports = v; },
};

var hasRequiredGetProp;

function requireGetProp () {
	if (hasRequiredGetProp) return getPropExports;
	hasRequiredGetProp = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = getProp;

		function getProp(obj) {
		  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		    props[_key - 1] = arguments[_key];
		  }

		  while (props.length > 0) {
		    var prop = props.shift();

		    if (!obj[prop]) {
		      return undefined;
		    }

		    obj = obj[prop];
		  }

		  return obj;
		}

		module.exports = exports.default;
} (getProp, getPropExports));
	return getPropExports;
}

var ensureObjectExports = {};
var ensureObject = {
  get exports(){ return ensureObjectExports; },
  set exports(v){ ensureObjectExports = v; },
};

var hasRequiredEnsureObject;

function requireEnsureObject () {
	if (hasRequiredEnsureObject) return ensureObjectExports;
	hasRequiredEnsureObject = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = ensureObject;

		function ensureObject(obj) {
		  for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		    props[_key - 1] = arguments[_key];
		  }

		  while (props.length > 0) {
		    var prop = props.shift();

		    if (!obj[prop]) {
		      obj[prop] = {};
		    }

		    obj = obj[prop];
		  }
		}

		module.exports = exports.default;
} (ensureObject, ensureObjectExports));
	return ensureObjectExports;
}

var stripCommentsExports = {};
var stripComments = {
  get exports(){ return stripCommentsExports; },
  set exports(v){ stripCommentsExports = v; },
};

var hasRequiredStripComments;

function requireStripComments () {
	if (hasRequiredStripComments) return stripCommentsExports;
	hasRequiredStripComments = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = stripComments;

		function stripComments(str) {
		  var s = "";
		  var commentStart = str.indexOf("/*");
		  var lastEnd = 0;

		  while (commentStart >= 0) {
		    s = s + str.slice(lastEnd, commentStart);
		    var commentEnd = str.indexOf("*/", commentStart + 2);

		    if (commentEnd < 0) {
		      return s;
		    }

		    lastEnd = commentEnd + 2;
		    commentStart = str.indexOf("/*", lastEnd);
		  }

		  s = s + str.slice(lastEnd);
		  return s;
		}

		module.exports = exports.default;
} (stripComments, stripCommentsExports));
	return stripCommentsExports;
}

var hasRequiredUtil;

function requireUtil () {
	if (hasRequiredUtil) return util$1;
	hasRequiredUtil = 1;

	util$1.__esModule = true;
	util$1.stripComments = util$1.ensureObject = util$1.getProp = util$1.unesc = void 0;

	var _unesc = _interopRequireDefault(requireUnesc());

	util$1.unesc = _unesc["default"];

	var _getProp = _interopRequireDefault(requireGetProp());

	util$1.getProp = _getProp["default"];

	var _ensureObject = _interopRequireDefault(requireEnsureObject());

	util$1.ensureObject = _ensureObject["default"];

	var _stripComments = _interopRequireDefault(requireStripComments());

	util$1.stripComments = _stripComments["default"];

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
	return util$1;
}

var hasRequiredNode;

function requireNode () {
	if (hasRequiredNode) return nodeExports;
	hasRequiredNode = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _util = requireUtil();

		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

		var cloneNode = function cloneNode(obj, parent) {
		  if (typeof obj !== 'object' || obj === null) {
		    return obj;
		  }

		  var cloned = new obj.constructor();

		  for (var i in obj) {
		    if (!obj.hasOwnProperty(i)) {
		      continue;
		    }

		    var value = obj[i];
		    var type = typeof value;

		    if (i === 'parent' && type === 'object') {
		      if (parent) {
		        cloned[i] = parent;
		      }
		    } else if (value instanceof Array) {
		      cloned[i] = value.map(function (j) {
		        return cloneNode(j, cloned);
		      });
		    } else {
		      cloned[i] = cloneNode(value, cloned);
		    }
		  }

		  return cloned;
		};

		var Node = /*#__PURE__*/function () {
		  function Node(opts) {
		    if (opts === void 0) {
		      opts = {};
		    }

		    Object.assign(this, opts);
		    this.spaces = this.spaces || {};
		    this.spaces.before = this.spaces.before || '';
		    this.spaces.after = this.spaces.after || '';
		  }

		  var _proto = Node.prototype;

		  _proto.remove = function remove() {
		    if (this.parent) {
		      this.parent.removeChild(this);
		    }

		    this.parent = undefined;
		    return this;
		  };

		  _proto.replaceWith = function replaceWith() {
		    if (this.parent) {
		      for (var index in arguments) {
		        this.parent.insertBefore(this, arguments[index]);
		      }

		      this.remove();
		    }

		    return this;
		  };

		  _proto.next = function next() {
		    return this.parent.at(this.parent.index(this) + 1);
		  };

		  _proto.prev = function prev() {
		    return this.parent.at(this.parent.index(this) - 1);
		  };

		  _proto.clone = function clone(overrides) {
		    if (overrides === void 0) {
		      overrides = {};
		    }

		    var cloned = cloneNode(this);

		    for (var name in overrides) {
		      cloned[name] = overrides[name];
		    }

		    return cloned;
		  }
		  /**
		   * Some non-standard syntax doesn't follow normal escaping rules for css.
		   * This allows non standard syntax to be appended to an existing property
		   * by specifying the escaped value. By specifying the escaped value,
		   * illegal characters are allowed to be directly inserted into css output.
		   * @param {string} name the property to set
		   * @param {any} value the unescaped value of the property
		   * @param {string} valueEscaped optional. the escaped value of the property.
		   */
		  ;

		  _proto.appendToPropertyAndEscape = function appendToPropertyAndEscape(name, value, valueEscaped) {
		    if (!this.raws) {
		      this.raws = {};
		    }

		    var originalValue = this[name];
		    var originalEscaped = this.raws[name];
		    this[name] = originalValue + value; // this may trigger a setter that updates raws, so it has to be set first.

		    if (originalEscaped || valueEscaped !== value) {
		      this.raws[name] = (originalEscaped || originalValue) + valueEscaped;
		    } else {
		      delete this.raws[name]; // delete any escaped value that was created by the setter.
		    }
		  }
		  /**
		   * Some non-standard syntax doesn't follow normal escaping rules for css.
		   * This allows the escaped value to be specified directly, allowing illegal
		   * characters to be directly inserted into css output.
		   * @param {string} name the property to set
		   * @param {any} value the unescaped value of the property
		   * @param {string} valueEscaped the escaped value of the property.
		   */
		  ;

		  _proto.setPropertyAndEscape = function setPropertyAndEscape(name, value, valueEscaped) {
		    if (!this.raws) {
		      this.raws = {};
		    }

		    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.

		    this.raws[name] = valueEscaped;
		  }
		  /**
		   * When you want a value to passed through to CSS directly. This method
		   * deletes the corresponding raw value causing the stringifier to fallback
		   * to the unescaped value.
		   * @param {string} name the property to set.
		   * @param {any} value The value that is both escaped and unescaped.
		   */
		  ;

		  _proto.setPropertyWithoutEscape = function setPropertyWithoutEscape(name, value) {
		    this[name] = value; // this may trigger a setter that updates raws, so it has to be set first.

		    if (this.raws) {
		      delete this.raws[name];
		    }
		  }
		  /**
		   *
		   * @param {number} line The number (starting with 1)
		   * @param {number} column The column number (starting with 1)
		   */
		  ;

		  _proto.isAtPosition = function isAtPosition(line, column) {
		    if (this.source && this.source.start && this.source.end) {
		      if (this.source.start.line > line) {
		        return false;
		      }

		      if (this.source.end.line < line) {
		        return false;
		      }

		      if (this.source.start.line === line && this.source.start.column > column) {
		        return false;
		      }

		      if (this.source.end.line === line && this.source.end.column < column) {
		        return false;
		      }

		      return true;
		    }

		    return undefined;
		  };

		  _proto.stringifyProperty = function stringifyProperty(name) {
		    return this.raws && this.raws[name] || this[name];
		  };

		  _proto.valueToString = function valueToString() {
		    return String(this.stringifyProperty("value"));
		  };

		  _proto.toString = function toString() {
		    return [this.rawSpaceBefore, this.valueToString(), this.rawSpaceAfter].join('');
		  };

		  _createClass(Node, [{
		    key: "rawSpaceBefore",
		    get: function get() {
		      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.before;

		      if (rawSpace === undefined) {
		        rawSpace = this.spaces && this.spaces.before;
		      }

		      return rawSpace || "";
		    },
		    set: function set(raw) {
		      (0, _util.ensureObject)(this, "raws", "spaces");
		      this.raws.spaces.before = raw;
		    }
		  }, {
		    key: "rawSpaceAfter",
		    get: function get() {
		      var rawSpace = this.raws && this.raws.spaces && this.raws.spaces.after;

		      if (rawSpace === undefined) {
		        rawSpace = this.spaces.after;
		      }

		      return rawSpace || "";
		    },
		    set: function set(raw) {
		      (0, _util.ensureObject)(this, "raws", "spaces");
		      this.raws.spaces.after = raw;
		    }
		  }]);

		  return Node;
		}();

		exports["default"] = Node;
		module.exports = exports.default;
} (node, nodeExports));
	return nodeExports;
}

var types$1 = {};

var hasRequiredTypes;

function requireTypes () {
	if (hasRequiredTypes) return types$1;
	hasRequiredTypes = 1;

	types$1.__esModule = true;
	types$1.UNIVERSAL = types$1.ATTRIBUTE = types$1.CLASS = types$1.COMBINATOR = types$1.COMMENT = types$1.ID = types$1.NESTING = types$1.PSEUDO = types$1.ROOT = types$1.SELECTOR = types$1.STRING = types$1.TAG = void 0;
	var TAG = 'tag';
	types$1.TAG = TAG;
	var STRING = 'string';
	types$1.STRING = STRING;
	var SELECTOR = 'selector';
	types$1.SELECTOR = SELECTOR;
	var ROOT = 'root';
	types$1.ROOT = ROOT;
	var PSEUDO = 'pseudo';
	types$1.PSEUDO = PSEUDO;
	var NESTING = 'nesting';
	types$1.NESTING = NESTING;
	var ID = 'id';
	types$1.ID = ID;
	var COMMENT = 'comment';
	types$1.COMMENT = COMMENT;
	var COMBINATOR = 'combinator';
	types$1.COMBINATOR = COMBINATOR;
	var CLASS = 'class';
	types$1.CLASS = CLASS;
	var ATTRIBUTE = 'attribute';
	types$1.ATTRIBUTE = ATTRIBUTE;
	var UNIVERSAL = 'universal';
	types$1.UNIVERSAL = UNIVERSAL;
	return types$1;
}

var hasRequiredContainer;

function requireContainer () {
	if (hasRequiredContainer) return containerExports;
	hasRequiredContainer = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _node = _interopRequireDefault(requireNode());

		var types = _interopRequireWildcard(requireTypes());

		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } it = o[Symbol.iterator](); return it.next.bind(it); }

		function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

		function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var Container = /*#__PURE__*/function (_Node) {
		  _inheritsLoose(Container, _Node);

		  function Container(opts) {
		    var _this;

		    _this = _Node.call(this, opts) || this;

		    if (!_this.nodes) {
		      _this.nodes = [];
		    }

		    return _this;
		  }

		  var _proto = Container.prototype;

		  _proto.append = function append(selector) {
		    selector.parent = this;
		    this.nodes.push(selector);
		    return this;
		  };

		  _proto.prepend = function prepend(selector) {
		    selector.parent = this;
		    this.nodes.unshift(selector);
		    return this;
		  };

		  _proto.at = function at(index) {
		    return this.nodes[index];
		  };

		  _proto.index = function index(child) {
		    if (typeof child === 'number') {
		      return child;
		    }

		    return this.nodes.indexOf(child);
		  };

		  _proto.removeChild = function removeChild(child) {
		    child = this.index(child);
		    this.at(child).parent = undefined;
		    this.nodes.splice(child, 1);
		    var index;

		    for (var id in this.indexes) {
		      index = this.indexes[id];

		      if (index >= child) {
		        this.indexes[id] = index - 1;
		      }
		    }

		    return this;
		  };

		  _proto.removeAll = function removeAll() {
		    for (var _iterator = _createForOfIteratorHelperLoose(this.nodes), _step; !(_step = _iterator()).done;) {
		      var node = _step.value;
		      node.parent = undefined;
		    }

		    this.nodes = [];
		    return this;
		  };

		  _proto.empty = function empty() {
		    return this.removeAll();
		  };

		  _proto.insertAfter = function insertAfter(oldNode, newNode) {
		    newNode.parent = this;
		    var oldIndex = this.index(oldNode);
		    this.nodes.splice(oldIndex + 1, 0, newNode);
		    newNode.parent = this;
		    var index;

		    for (var id in this.indexes) {
		      index = this.indexes[id];

		      if (oldIndex <= index) {
		        this.indexes[id] = index + 1;
		      }
		    }

		    return this;
		  };

		  _proto.insertBefore = function insertBefore(oldNode, newNode) {
		    newNode.parent = this;
		    var oldIndex = this.index(oldNode);
		    this.nodes.splice(oldIndex, 0, newNode);
		    newNode.parent = this;
		    var index;

		    for (var id in this.indexes) {
		      index = this.indexes[id];

		      if (index <= oldIndex) {
		        this.indexes[id] = index + 1;
		      }
		    }

		    return this;
		  };

		  _proto._findChildAtPosition = function _findChildAtPosition(line, col) {
		    var found = undefined;
		    this.each(function (node) {
		      if (node.atPosition) {
		        var foundChild = node.atPosition(line, col);

		        if (foundChild) {
		          found = foundChild;
		          return false;
		        }
		      } else if (node.isAtPosition(line, col)) {
		        found = node;
		        return false;
		      }
		    });
		    return found;
		  }
		  /**
		   * Return the most specific node at the line and column number given.
		   * The source location is based on the original parsed location, locations aren't
		   * updated as selector nodes are mutated.
		   * 
		   * Note that this location is relative to the location of the first character
		   * of the selector, and not the location of the selector in the overall document
		   * when used in conjunction with postcss.
		   *
		   * If not found, returns undefined.
		   * @param {number} line The line number of the node to find. (1-based index)
		   * @param {number} col  The column number of the node to find. (1-based index)
		   */
		  ;

		  _proto.atPosition = function atPosition(line, col) {
		    if (this.isAtPosition(line, col)) {
		      return this._findChildAtPosition(line, col) || this;
		    } else {
		      return undefined;
		    }
		  };

		  _proto._inferEndPosition = function _inferEndPosition() {
		    if (this.last && this.last.source && this.last.source.end) {
		      this.source = this.source || {};
		      this.source.end = this.source.end || {};
		      Object.assign(this.source.end, this.last.source.end);
		    }
		  };

		  _proto.each = function each(callback) {
		    if (!this.lastEach) {
		      this.lastEach = 0;
		    }

		    if (!this.indexes) {
		      this.indexes = {};
		    }

		    this.lastEach++;
		    var id = this.lastEach;
		    this.indexes[id] = 0;

		    if (!this.length) {
		      return undefined;
		    }

		    var index, result;

		    while (this.indexes[id] < this.length) {
		      index = this.indexes[id];
		      result = callback(this.at(index), index);

		      if (result === false) {
		        break;
		      }

		      this.indexes[id] += 1;
		    }

		    delete this.indexes[id];

		    if (result === false) {
		      return false;
		    }
		  };

		  _proto.walk = function walk(callback) {
		    return this.each(function (node, i) {
		      var result = callback(node, i);

		      if (result !== false && node.length) {
		        result = node.walk(callback);
		      }

		      if (result === false) {
		        return false;
		      }
		    });
		  };

		  _proto.walkAttributes = function walkAttributes(callback) {
		    var _this2 = this;

		    return this.walk(function (selector) {
		      if (selector.type === types.ATTRIBUTE) {
		        return callback.call(_this2, selector);
		      }
		    });
		  };

		  _proto.walkClasses = function walkClasses(callback) {
		    var _this3 = this;

		    return this.walk(function (selector) {
		      if (selector.type === types.CLASS) {
		        return callback.call(_this3, selector);
		      }
		    });
		  };

		  _proto.walkCombinators = function walkCombinators(callback) {
		    var _this4 = this;

		    return this.walk(function (selector) {
		      if (selector.type === types.COMBINATOR) {
		        return callback.call(_this4, selector);
		      }
		    });
		  };

		  _proto.walkComments = function walkComments(callback) {
		    var _this5 = this;

		    return this.walk(function (selector) {
		      if (selector.type === types.COMMENT) {
		        return callback.call(_this5, selector);
		      }
		    });
		  };

		  _proto.walkIds = function walkIds(callback) {
		    var _this6 = this;

		    return this.walk(function (selector) {
		      if (selector.type === types.ID) {
		        return callback.call(_this6, selector);
		      }
		    });
		  };

		  _proto.walkNesting = function walkNesting(callback) {
		    var _this7 = this;

		    return this.walk(function (selector) {
		      if (selector.type === types.NESTING) {
		        return callback.call(_this7, selector);
		      }
		    });
		  };

		  _proto.walkPseudos = function walkPseudos(callback) {
		    var _this8 = this;

		    return this.walk(function (selector) {
		      if (selector.type === types.PSEUDO) {
		        return callback.call(_this8, selector);
		      }
		    });
		  };

		  _proto.walkTags = function walkTags(callback) {
		    var _this9 = this;

		    return this.walk(function (selector) {
		      if (selector.type === types.TAG) {
		        return callback.call(_this9, selector);
		      }
		    });
		  };

		  _proto.walkUniversals = function walkUniversals(callback) {
		    var _this10 = this;

		    return this.walk(function (selector) {
		      if (selector.type === types.UNIVERSAL) {
		        return callback.call(_this10, selector);
		      }
		    });
		  };

		  _proto.split = function split(callback) {
		    var _this11 = this;

		    var current = [];
		    return this.reduce(function (memo, node, index) {
		      var split = callback.call(_this11, node);
		      current.push(node);

		      if (split) {
		        memo.push(current);
		        current = [];
		      } else if (index === _this11.length - 1) {
		        memo.push(current);
		      }

		      return memo;
		    }, []);
		  };

		  _proto.map = function map(callback) {
		    return this.nodes.map(callback);
		  };

		  _proto.reduce = function reduce(callback, memo) {
		    return this.nodes.reduce(callback, memo);
		  };

		  _proto.every = function every(callback) {
		    return this.nodes.every(callback);
		  };

		  _proto.some = function some(callback) {
		    return this.nodes.some(callback);
		  };

		  _proto.filter = function filter(callback) {
		    return this.nodes.filter(callback);
		  };

		  _proto.sort = function sort(callback) {
		    return this.nodes.sort(callback);
		  };

		  _proto.toString = function toString() {
		    return this.map(String).join('');
		  };

		  _createClass(Container, [{
		    key: "first",
		    get: function get() {
		      return this.at(0);
		    }
		  }, {
		    key: "last",
		    get: function get() {
		      return this.at(this.length - 1);
		    }
		  }, {
		    key: "length",
		    get: function get() {
		      return this.nodes.length;
		    }
		  }]);

		  return Container;
		}(_node["default"]);

		exports["default"] = Container;
		module.exports = exports.default;
} (container, containerExports));
	return containerExports;
}

var hasRequiredRoot;

function requireRoot () {
	if (hasRequiredRoot) return rootExports;
	hasRequiredRoot = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _container = _interopRequireDefault(requireContainer());

		var _types = requireTypes();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var Root = /*#__PURE__*/function (_Container) {
		  _inheritsLoose(Root, _Container);

		  function Root(opts) {
		    var _this;

		    _this = _Container.call(this, opts) || this;
		    _this.type = _types.ROOT;
		    return _this;
		  }

		  var _proto = Root.prototype;

		  _proto.toString = function toString() {
		    var str = this.reduce(function (memo, selector) {
		      memo.push(String(selector));
		      return memo;
		    }, []).join(',');
		    return this.trailingComma ? str + ',' : str;
		  };

		  _proto.error = function error(message, options) {
		    if (this._error) {
		      return this._error(message, options);
		    } else {
		      return new Error(message);
		    }
		  };

		  _createClass(Root, [{
		    key: "errorGenerator",
		    set: function set(handler) {
		      this._error = handler;
		    }
		  }]);

		  return Root;
		}(_container["default"]);

		exports["default"] = Root;
		module.exports = exports.default;
} (root, rootExports));
	return rootExports;
}

var selectorExports = {};
var selector = {
  get exports(){ return selectorExports; },
  set exports(v){ selectorExports = v; },
};

var hasRequiredSelector;

function requireSelector () {
	if (hasRequiredSelector) return selectorExports;
	hasRequiredSelector = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _container = _interopRequireDefault(requireContainer());

		var _types = requireTypes();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var Selector = /*#__PURE__*/function (_Container) {
		  _inheritsLoose(Selector, _Container);

		  function Selector(opts) {
		    var _this;

		    _this = _Container.call(this, opts) || this;
		    _this.type = _types.SELECTOR;
		    return _this;
		  }

		  return Selector;
		}(_container["default"]);

		exports["default"] = Selector;
		module.exports = exports.default;
} (selector, selectorExports));
	return selectorExports;
}

var classNameExports = {};
var className = {
  get exports(){ return classNameExports; },
  set exports(v){ classNameExports = v; },
};

/*! https://mths.be/cssesc v3.0.0 by @mathias */

var cssesc_1;
var hasRequiredCssesc;

function requireCssesc () {
	if (hasRequiredCssesc) return cssesc_1;
	hasRequiredCssesc = 1;

	var object = {};
	var hasOwnProperty = object.hasOwnProperty;
	var merge = function merge(options, defaults) {
		if (!options) {
			return defaults;
		}
		var result = {};
		for (var key in defaults) {
			// `if (defaults.hasOwnProperty(key) { … }` is not needed here, since
			// only recognized option names are used.
			result[key] = hasOwnProperty.call(options, key) ? options[key] : defaults[key];
		}
		return result;
	};

	var regexAnySingleEscape = /[ -,\.\/:-@\[-\^`\{-~]/;
	var regexSingleEscape = /[ -,\.\/:-@\[\]\^`\{-~]/;
	var regexExcessiveSpaces = /(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g;

	// https://mathiasbynens.be/notes/css-escapes#css
	var cssesc = function cssesc(string, options) {
		options = merge(options, cssesc.options);
		if (options.quotes != 'single' && options.quotes != 'double') {
			options.quotes = 'single';
		}
		var quote = options.quotes == 'double' ? '"' : '\'';
		var isIdentifier = options.isIdentifier;

		var firstChar = string.charAt(0);
		var output = '';
		var counter = 0;
		var length = string.length;
		while (counter < length) {
			var character = string.charAt(counter++);
			var codePoint = character.charCodeAt();
			var value = void 0;
			// If it’s not a printable ASCII character…
			if (codePoint < 0x20 || codePoint > 0x7E) {
				if (codePoint >= 0xD800 && codePoint <= 0xDBFF && counter < length) {
					// It’s a high surrogate, and there is a next character.
					var extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) {
						// next character is low surrogate
						codePoint = ((codePoint & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;
					} else {
						// It’s an unmatched surrogate; only append this code unit, in case
						// the next code unit is the high surrogate of a surrogate pair.
						counter--;
					}
				}
				value = '\\' + codePoint.toString(16).toUpperCase() + ' ';
			} else {
				if (options.escapeEverything) {
					if (regexAnySingleEscape.test(character)) {
						value = '\\' + character;
					} else {
						value = '\\' + codePoint.toString(16).toUpperCase() + ' ';
					}
				} else if (/[\t\n\f\r\x0B]/.test(character)) {
					value = '\\' + codePoint.toString(16).toUpperCase() + ' ';
				} else if (character == '\\' || !isIdentifier && (character == '"' && quote == character || character == '\'' && quote == character) || isIdentifier && regexSingleEscape.test(character)) {
					value = '\\' + character;
				} else {
					value = character;
				}
			}
			output += value;
		}

		if (isIdentifier) {
			if (/^-[-\d]/.test(output)) {
				output = '\\-' + output.slice(1);
			} else if (/\d/.test(firstChar)) {
				output = '\\3' + firstChar + ' ' + output.slice(1);
			}
		}

		// Remove spaces after `\HEX` escapes that are not followed by a hex digit,
		// since they’re redundant. Note that this is only possible if the escape
		// sequence isn’t preceded by an odd number of backslashes.
		output = output.replace(regexExcessiveSpaces, function ($0, $1, $2) {
			if ($1 && $1.length % 2) {
				// It’s not safe to remove the space, so don’t.
				return $0;
			}
			// Strip the space.
			return ($1 || '') + $2;
		});

		if (!isIdentifier && options.wrap) {
			return quote + output + quote;
		}
		return output;
	};

	// Expose default options (so they can be overridden globally).
	cssesc.options = {
		'escapeEverything': false,
		'isIdentifier': false,
		'quotes': 'single',
		'wrap': false
	};

	cssesc.version = '3.0.0';

	cssesc_1 = cssesc;
	return cssesc_1;
}

var hasRequiredClassName;

function requireClassName () {
	if (hasRequiredClassName) return classNameExports;
	hasRequiredClassName = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _cssesc = _interopRequireDefault(requireCssesc());

		var _util = requireUtil();

		var _node = _interopRequireDefault(requireNode());

		var _types = requireTypes();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var ClassName = /*#__PURE__*/function (_Node) {
		  _inheritsLoose(ClassName, _Node);

		  function ClassName(opts) {
		    var _this;

		    _this = _Node.call(this, opts) || this;
		    _this.type = _types.CLASS;
		    _this._constructed = true;
		    return _this;
		  }

		  var _proto = ClassName.prototype;

		  _proto.valueToString = function valueToString() {
		    return '.' + _Node.prototype.valueToString.call(this);
		  };

		  _createClass(ClassName, [{
		    key: "value",
		    get: function get() {
		      return this._value;
		    },
		    set: function set(v) {
		      if (this._constructed) {
		        var escaped = (0, _cssesc["default"])(v, {
		          isIdentifier: true
		        });

		        if (escaped !== v) {
		          (0, _util.ensureObject)(this, "raws");
		          this.raws.value = escaped;
		        } else if (this.raws) {
		          delete this.raws.value;
		        }
		      }

		      this._value = v;
		    }
		  }]);

		  return ClassName;
		}(_node["default"]);

		exports["default"] = ClassName;
		module.exports = exports.default;
} (className, classNameExports));
	return classNameExports;
}

var commentExports = {};
var comment = {
  get exports(){ return commentExports; },
  set exports(v){ commentExports = v; },
};

var hasRequiredComment;

function requireComment () {
	if (hasRequiredComment) return commentExports;
	hasRequiredComment = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _node = _interopRequireDefault(requireNode());

		var _types = requireTypes();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var Comment = /*#__PURE__*/function (_Node) {
		  _inheritsLoose(Comment, _Node);

		  function Comment(opts) {
		    var _this;

		    _this = _Node.call(this, opts) || this;
		    _this.type = _types.COMMENT;
		    return _this;
		  }

		  return Comment;
		}(_node["default"]);

		exports["default"] = Comment;
		module.exports = exports.default;
} (comment, commentExports));
	return commentExports;
}

var idExports = {};
var id = {
  get exports(){ return idExports; },
  set exports(v){ idExports = v; },
};

var hasRequiredId;

function requireId () {
	if (hasRequiredId) return idExports;
	hasRequiredId = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _node = _interopRequireDefault(requireNode());

		var _types = requireTypes();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var ID = /*#__PURE__*/function (_Node) {
		  _inheritsLoose(ID, _Node);

		  function ID(opts) {
		    var _this;

		    _this = _Node.call(this, opts) || this;
		    _this.type = _types.ID;
		    return _this;
		  }

		  var _proto = ID.prototype;

		  _proto.valueToString = function valueToString() {
		    return '#' + _Node.prototype.valueToString.call(this);
		  };

		  return ID;
		}(_node["default"]);

		exports["default"] = ID;
		module.exports = exports.default;
} (id, idExports));
	return idExports;
}

var tagExports = {};
var tag = {
  get exports(){ return tagExports; },
  set exports(v){ tagExports = v; },
};

var namespaceExports = {};
var namespace = {
  get exports(){ return namespaceExports; },
  set exports(v){ namespaceExports = v; },
};

var hasRequiredNamespace;

function requireNamespace () {
	if (hasRequiredNamespace) return namespaceExports;
	hasRequiredNamespace = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _cssesc = _interopRequireDefault(requireCssesc());

		var _util = requireUtil();

		var _node = _interopRequireDefault(requireNode());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var Namespace = /*#__PURE__*/function (_Node) {
		  _inheritsLoose(Namespace, _Node);

		  function Namespace() {
		    return _Node.apply(this, arguments) || this;
		  }

		  var _proto = Namespace.prototype;

		  _proto.qualifiedName = function qualifiedName(value) {
		    if (this.namespace) {
		      return this.namespaceString + "|" + value;
		    } else {
		      return value;
		    }
		  };

		  _proto.valueToString = function valueToString() {
		    return this.qualifiedName(_Node.prototype.valueToString.call(this));
		  };

		  _createClass(Namespace, [{
		    key: "namespace",
		    get: function get() {
		      return this._namespace;
		    },
		    set: function set(namespace) {
		      if (namespace === true || namespace === "*" || namespace === "&") {
		        this._namespace = namespace;

		        if (this.raws) {
		          delete this.raws.namespace;
		        }

		        return;
		      }

		      var escaped = (0, _cssesc["default"])(namespace, {
		        isIdentifier: true
		      });
		      this._namespace = namespace;

		      if (escaped !== namespace) {
		        (0, _util.ensureObject)(this, "raws");
		        this.raws.namespace = escaped;
		      } else if (this.raws) {
		        delete this.raws.namespace;
		      }
		    }
		  }, {
		    key: "ns",
		    get: function get() {
		      return this._namespace;
		    },
		    set: function set(namespace) {
		      this.namespace = namespace;
		    }
		  }, {
		    key: "namespaceString",
		    get: function get() {
		      if (this.namespace) {
		        var ns = this.stringifyProperty("namespace");

		        if (ns === true) {
		          return '';
		        } else {
		          return ns;
		        }
		      } else {
		        return '';
		      }
		    }
		  }]);

		  return Namespace;
		}(_node["default"]);

		exports["default"] = Namespace;
		module.exports = exports.default;
} (namespace, namespaceExports));
	return namespaceExports;
}

var hasRequiredTag;

function requireTag () {
	if (hasRequiredTag) return tagExports;
	hasRequiredTag = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _namespace = _interopRequireDefault(requireNamespace());

		var _types = requireTypes();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var Tag = /*#__PURE__*/function (_Namespace) {
		  _inheritsLoose(Tag, _Namespace);

		  function Tag(opts) {
		    var _this;

		    _this = _Namespace.call(this, opts) || this;
		    _this.type = _types.TAG;
		    return _this;
		  }

		  return Tag;
		}(_namespace["default"]);

		exports["default"] = Tag;
		module.exports = exports.default;
} (tag, tagExports));
	return tagExports;
}

var stringExports = {};
var string$1 = {
  get exports(){ return stringExports; },
  set exports(v){ stringExports = v; },
};

var hasRequiredString$1;

function requireString$1 () {
	if (hasRequiredString$1) return stringExports;
	hasRequiredString$1 = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _node = _interopRequireDefault(requireNode());

		var _types = requireTypes();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var String = /*#__PURE__*/function (_Node) {
		  _inheritsLoose(String, _Node);

		  function String(opts) {
		    var _this;

		    _this = _Node.call(this, opts) || this;
		    _this.type = _types.STRING;
		    return _this;
		  }

		  return String;
		}(_node["default"]);

		exports["default"] = String;
		module.exports = exports.default;
} (string$1, stringExports));
	return stringExports;
}

var pseudoExports = {};
var pseudo = {
  get exports(){ return pseudoExports; },
  set exports(v){ pseudoExports = v; },
};

var hasRequiredPseudo;

function requirePseudo () {
	if (hasRequiredPseudo) return pseudoExports;
	hasRequiredPseudo = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _container = _interopRequireDefault(requireContainer());

		var _types = requireTypes();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var Pseudo = /*#__PURE__*/function (_Container) {
		  _inheritsLoose(Pseudo, _Container);

		  function Pseudo(opts) {
		    var _this;

		    _this = _Container.call(this, opts) || this;
		    _this.type = _types.PSEUDO;
		    return _this;
		  }

		  var _proto = Pseudo.prototype;

		  _proto.toString = function toString() {
		    var params = this.length ? '(' + this.map(String).join(',') + ')' : '';
		    return [this.rawSpaceBefore, this.stringifyProperty("value"), params, this.rawSpaceAfter].join('');
		  };

		  return Pseudo;
		}(_container["default"]);

		exports["default"] = Pseudo;
		module.exports = exports.default;
} (pseudo, pseudoExports));
	return pseudoExports;
}

var attribute = {};

var browser$1;
var hasRequiredBrowser$1;

function requireBrowser$1 () {
	if (hasRequiredBrowser$1) return browser$1;
	hasRequiredBrowser$1 = 1;
	/**
	 * Module exports.
	 */

	browser$1 = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!commonjsGlobal.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = commonjsGlobal.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}
	return browser$1;
}

var hasRequiredAttribute;

function requireAttribute () {
	if (hasRequiredAttribute) return attribute;
	hasRequiredAttribute = 1;
	(function (exports) {

		exports.__esModule = true;
		exports.unescapeValue = unescapeValue;
		exports["default"] = void 0;

		var _cssesc = _interopRequireDefault(requireCssesc());

		var _unesc = _interopRequireDefault(requireUnesc());

		var _namespace = _interopRequireDefault(requireNamespace());

		var _types = requireTypes();

		var _CSSESC_QUOTE_OPTIONS;

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var deprecate = requireBrowser$1();

		var WRAPPED_IN_QUOTES = /^('|")([^]*)\1$/;
		var warnOfDeprecatedValueAssignment = deprecate(function () {}, "Assigning an attribute a value containing characters that might need to be escaped is deprecated. " + "Call attribute.setValue() instead.");
		var warnOfDeprecatedQuotedAssignment = deprecate(function () {}, "Assigning attr.quoted is deprecated and has no effect. Assign to attr.quoteMark instead.");
		var warnOfDeprecatedConstructor = deprecate(function () {}, "Constructing an Attribute selector with a value without specifying quoteMark is deprecated. Note: The value should be unescaped now.");

		function unescapeValue(value) {
		  var deprecatedUsage = false;
		  var quoteMark = null;
		  var unescaped = value;
		  var m = unescaped.match(WRAPPED_IN_QUOTES);

		  if (m) {
		    quoteMark = m[1];
		    unescaped = m[2];
		  }

		  unescaped = (0, _unesc["default"])(unescaped);

		  if (unescaped !== value) {
		    deprecatedUsage = true;
		  }

		  return {
		    deprecatedUsage: deprecatedUsage,
		    unescaped: unescaped,
		    quoteMark: quoteMark
		  };
		}

		function handleDeprecatedContructorOpts(opts) {
		  if (opts.quoteMark !== undefined) {
		    return opts;
		  }

		  if (opts.value === undefined) {
		    return opts;
		  }

		  warnOfDeprecatedConstructor();

		  var _unescapeValue = unescapeValue(opts.value),
		      quoteMark = _unescapeValue.quoteMark,
		      unescaped = _unescapeValue.unescaped;

		  if (!opts.raws) {
		    opts.raws = {};
		  }

		  if (opts.raws.value === undefined) {
		    opts.raws.value = opts.value;
		  }

		  opts.value = unescaped;
		  opts.quoteMark = quoteMark;
		  return opts;
		}

		var Attribute = /*#__PURE__*/function (_Namespace) {
		  _inheritsLoose(Attribute, _Namespace);

		  function Attribute(opts) {
		    var _this;

		    if (opts === void 0) {
		      opts = {};
		    }

		    _this = _Namespace.call(this, handleDeprecatedContructorOpts(opts)) || this;
		    _this.type = _types.ATTRIBUTE;
		    _this.raws = _this.raws || {};
		    Object.defineProperty(_this.raws, 'unquoted', {
		      get: deprecate(function () {
		        return _this.value;
		      }, "attr.raws.unquoted is deprecated. Call attr.value instead."),
		      set: deprecate(function () {
		        return _this.value;
		      }, "Setting attr.raws.unquoted is deprecated and has no effect. attr.value is unescaped by default now.")
		    });
		    _this._constructed = true;
		    return _this;
		  }
		  /**
		   * Returns the Attribute's value quoted such that it would be legal to use
		   * in the value of a css file. The original value's quotation setting
		   * used for stringification is left unchanged. See `setValue(value, options)`
		   * if you want to control the quote settings of a new value for the attribute.
		   *
		   * You can also change the quotation used for the current value by setting quoteMark.
		   *
		   * Options:
		   *   * quoteMark {'"' | "'" | null} - Use this value to quote the value. If this
		   *     option is not set, the original value for quoteMark will be used. If
		   *     indeterminate, a double quote is used. The legal values are:
		   *     * `null` - the value will be unquoted and characters will be escaped as necessary.
		   *     * `'` - the value will be quoted with a single quote and single quotes are escaped.
		   *     * `"` - the value will be quoted with a double quote and double quotes are escaped.
		   *   * preferCurrentQuoteMark {boolean} - if true, prefer the source quote mark
		   *     over the quoteMark option value.
		   *   * smart {boolean} - if true, will select a quote mark based on the value
		   *     and the other options specified here. See the `smartQuoteMark()`
		   *     method.
		   **/


		  var _proto = Attribute.prototype;

		  _proto.getQuotedValue = function getQuotedValue(options) {
		    if (options === void 0) {
		      options = {};
		    }

		    var quoteMark = this._determineQuoteMark(options);

		    var cssescopts = CSSESC_QUOTE_OPTIONS[quoteMark];
		    var escaped = (0, _cssesc["default"])(this._value, cssescopts);
		    return escaped;
		  };

		  _proto._determineQuoteMark = function _determineQuoteMark(options) {
		    return options.smart ? this.smartQuoteMark(options) : this.preferredQuoteMark(options);
		  }
		  /**
		   * Set the unescaped value with the specified quotation options. The value
		   * provided must not include any wrapping quote marks -- those quotes will
		   * be interpreted as part of the value and escaped accordingly.
		   */
		  ;

		  _proto.setValue = function setValue(value, options) {
		    if (options === void 0) {
		      options = {};
		    }

		    this._value = value;
		    this._quoteMark = this._determineQuoteMark(options);

		    this._syncRawValue();
		  }
		  /**
		   * Intelligently select a quoteMark value based on the value's contents. If
		   * the value is a legal CSS ident, it will not be quoted. Otherwise a quote
		   * mark will be picked that minimizes the number of escapes.
		   *
		   * If there's no clear winner, the quote mark from these options is used,
		   * then the source quote mark (this is inverted if `preferCurrentQuoteMark` is
		   * true). If the quoteMark is unspecified, a double quote is used.
		   *
		   * @param options This takes the quoteMark and preferCurrentQuoteMark options
		   * from the quoteValue method.
		   */
		  ;

		  _proto.smartQuoteMark = function smartQuoteMark(options) {
		    var v = this.value;
		    var numSingleQuotes = v.replace(/[^']/g, '').length;
		    var numDoubleQuotes = v.replace(/[^"]/g, '').length;

		    if (numSingleQuotes + numDoubleQuotes === 0) {
		      var escaped = (0, _cssesc["default"])(v, {
		        isIdentifier: true
		      });

		      if (escaped === v) {
		        return Attribute.NO_QUOTE;
		      } else {
		        var pref = this.preferredQuoteMark(options);

		        if (pref === Attribute.NO_QUOTE) {
		          // pick a quote mark that isn't none and see if it's smaller
		          var quote = this.quoteMark || options.quoteMark || Attribute.DOUBLE_QUOTE;
		          var opts = CSSESC_QUOTE_OPTIONS[quote];
		          var quoteValue = (0, _cssesc["default"])(v, opts);

		          if (quoteValue.length < escaped.length) {
		            return quote;
		          }
		        }

		        return pref;
		      }
		    } else if (numDoubleQuotes === numSingleQuotes) {
		      return this.preferredQuoteMark(options);
		    } else if (numDoubleQuotes < numSingleQuotes) {
		      return Attribute.DOUBLE_QUOTE;
		    } else {
		      return Attribute.SINGLE_QUOTE;
		    }
		  }
		  /**
		   * Selects the preferred quote mark based on the options and the current quote mark value.
		   * If you want the quote mark to depend on the attribute value, call `smartQuoteMark(opts)`
		   * instead.
		   */
		  ;

		  _proto.preferredQuoteMark = function preferredQuoteMark(options) {
		    var quoteMark = options.preferCurrentQuoteMark ? this.quoteMark : options.quoteMark;

		    if (quoteMark === undefined) {
		      quoteMark = options.preferCurrentQuoteMark ? options.quoteMark : this.quoteMark;
		    }

		    if (quoteMark === undefined) {
		      quoteMark = Attribute.DOUBLE_QUOTE;
		    }

		    return quoteMark;
		  };

		  _proto._syncRawValue = function _syncRawValue() {
		    var rawValue = (0, _cssesc["default"])(this._value, CSSESC_QUOTE_OPTIONS[this.quoteMark]);

		    if (rawValue === this._value) {
		      if (this.raws) {
		        delete this.raws.value;
		      }
		    } else {
		      this.raws.value = rawValue;
		    }
		  };

		  _proto._handleEscapes = function _handleEscapes(prop, value) {
		    if (this._constructed) {
		      var escaped = (0, _cssesc["default"])(value, {
		        isIdentifier: true
		      });

		      if (escaped !== value) {
		        this.raws[prop] = escaped;
		      } else {
		        delete this.raws[prop];
		      }
		    }
		  };

		  _proto._spacesFor = function _spacesFor(name) {
		    var attrSpaces = {
		      before: '',
		      after: ''
		    };
		    var spaces = this.spaces[name] || {};
		    var rawSpaces = this.raws.spaces && this.raws.spaces[name] || {};
		    return Object.assign(attrSpaces, spaces, rawSpaces);
		  };

		  _proto._stringFor = function _stringFor(name, spaceName, concat) {
		    if (spaceName === void 0) {
		      spaceName = name;
		    }

		    if (concat === void 0) {
		      concat = defaultAttrConcat;
		    }

		    var attrSpaces = this._spacesFor(spaceName);

		    return concat(this.stringifyProperty(name), attrSpaces);
		  }
		  /**
		   * returns the offset of the attribute part specified relative to the
		   * start of the node of the output string.
		   *
		   * * "ns" - alias for "namespace"
		   * * "namespace" - the namespace if it exists.
		   * * "attribute" - the attribute name
		   * * "attributeNS" - the start of the attribute or its namespace
		   * * "operator" - the match operator of the attribute
		   * * "value" - The value (string or identifier)
		   * * "insensitive" - the case insensitivity flag;
		   * @param part One of the possible values inside an attribute.
		   * @returns -1 if the name is invalid or the value doesn't exist in this attribute.
		   */
		  ;

		  _proto.offsetOf = function offsetOf(name) {
		    var count = 1;

		    var attributeSpaces = this._spacesFor("attribute");

		    count += attributeSpaces.before.length;

		    if (name === "namespace" || name === "ns") {
		      return this.namespace ? count : -1;
		    }

		    if (name === "attributeNS") {
		      return count;
		    }

		    count += this.namespaceString.length;

		    if (this.namespace) {
		      count += 1;
		    }

		    if (name === "attribute") {
		      return count;
		    }

		    count += this.stringifyProperty("attribute").length;
		    count += attributeSpaces.after.length;

		    var operatorSpaces = this._spacesFor("operator");

		    count += operatorSpaces.before.length;
		    var operator = this.stringifyProperty("operator");

		    if (name === "operator") {
		      return operator ? count : -1;
		    }

		    count += operator.length;
		    count += operatorSpaces.after.length;

		    var valueSpaces = this._spacesFor("value");

		    count += valueSpaces.before.length;
		    var value = this.stringifyProperty("value");

		    if (name === "value") {
		      return value ? count : -1;
		    }

		    count += value.length;
		    count += valueSpaces.after.length;

		    var insensitiveSpaces = this._spacesFor("insensitive");

		    count += insensitiveSpaces.before.length;

		    if (name === "insensitive") {
		      return this.insensitive ? count : -1;
		    }

		    return -1;
		  };

		  _proto.toString = function toString() {
		    var _this2 = this;

		    var selector = [this.rawSpaceBefore, '['];
		    selector.push(this._stringFor('qualifiedAttribute', 'attribute'));

		    if (this.operator && (this.value || this.value === '')) {
		      selector.push(this._stringFor('operator'));
		      selector.push(this._stringFor('value'));
		      selector.push(this._stringFor('insensitiveFlag', 'insensitive', function (attrValue, attrSpaces) {
		        if (attrValue.length > 0 && !_this2.quoted && attrSpaces.before.length === 0 && !(_this2.spaces.value && _this2.spaces.value.after)) {
		          attrSpaces.before = " ";
		        }

		        return defaultAttrConcat(attrValue, attrSpaces);
		      }));
		    }

		    selector.push(']');
		    selector.push(this.rawSpaceAfter);
		    return selector.join('');
		  };

		  _createClass(Attribute, [{
		    key: "quoted",
		    get: function get() {
		      var qm = this.quoteMark;
		      return qm === "'" || qm === '"';
		    },
		    set: function set(value) {
		      warnOfDeprecatedQuotedAssignment();
		    }
		    /**
		     * returns a single (`'`) or double (`"`) quote character if the value is quoted.
		     * returns `null` if the value is not quoted.
		     * returns `undefined` if the quotation state is unknown (this can happen when
		     * the attribute is constructed without specifying a quote mark.)
		     */

		  }, {
		    key: "quoteMark",
		    get: function get() {
		      return this._quoteMark;
		    }
		    /**
		     * Set the quote mark to be used by this attribute's value.
		     * If the quote mark changes, the raw (escaped) value at `attr.raws.value` of the attribute
		     * value is updated accordingly.
		     *
		     * @param {"'" | '"' | null} quoteMark The quote mark or `null` if the value should be unquoted.
		     */
		    ,
		    set: function set(quoteMark) {
		      if (!this._constructed) {
		        this._quoteMark = quoteMark;
		        return;
		      }

		      if (this._quoteMark !== quoteMark) {
		        this._quoteMark = quoteMark;

		        this._syncRawValue();
		      }
		    }
		  }, {
		    key: "qualifiedAttribute",
		    get: function get() {
		      return this.qualifiedName(this.raws.attribute || this.attribute);
		    }
		  }, {
		    key: "insensitiveFlag",
		    get: function get() {
		      return this.insensitive ? 'i' : '';
		    }
		  }, {
		    key: "value",
		    get: function get() {
		      return this._value;
		    },
		    set:
		    /**
		     * Before 3.0, the value had to be set to an escaped value including any wrapped
		     * quote marks. In 3.0, the semantics of `Attribute.value` changed so that the value
		     * is unescaped during parsing and any quote marks are removed.
		     *
		     * Because the ambiguity of this semantic change, if you set `attr.value = newValue`,
		     * a deprecation warning is raised when the new value contains any characters that would
		     * require escaping (including if it contains wrapped quotes).
		     *
		     * Instead, you should call `attr.setValue(newValue, opts)` and pass options that describe
		     * how the new value is quoted.
		     */
		    function set(v) {
		      if (this._constructed) {
		        var _unescapeValue2 = unescapeValue(v),
		            deprecatedUsage = _unescapeValue2.deprecatedUsage,
		            unescaped = _unescapeValue2.unescaped,
		            quoteMark = _unescapeValue2.quoteMark;

		        if (deprecatedUsage) {
		          warnOfDeprecatedValueAssignment();
		        }

		        if (unescaped === this._value && quoteMark === this._quoteMark) {
		          return;
		        }

		        this._value = unescaped;
		        this._quoteMark = quoteMark;

		        this._syncRawValue();
		      } else {
		        this._value = v;
		      }
		    }
		  }, {
		    key: "insensitive",
		    get: function get() {
		      return this._insensitive;
		    }
		    /**
		     * Set the case insensitive flag.
		     * If the case insensitive flag changes, the raw (escaped) value at `attr.raws.insensitiveFlag`
		     * of the attribute is updated accordingly.
		     *
		     * @param {true | false} insensitive true if the attribute should match case-insensitively.
		     */
		    ,
		    set: function set(insensitive) {
		      if (!insensitive) {
		        this._insensitive = false; // "i" and "I" can be used in "this.raws.insensitiveFlag" to store the original notation.
		        // When setting `attr.insensitive = false` both should be erased to ensure correct serialization.

		        if (this.raws && (this.raws.insensitiveFlag === 'I' || this.raws.insensitiveFlag === 'i')) {
		          this.raws.insensitiveFlag = undefined;
		        }
		      }

		      this._insensitive = insensitive;
		    }
		  }, {
		    key: "attribute",
		    get: function get() {
		      return this._attribute;
		    },
		    set: function set(name) {
		      this._handleEscapes("attribute", name);

		      this._attribute = name;
		    }
		  }]);

		  return Attribute;
		}(_namespace["default"]);

		exports["default"] = Attribute;
		Attribute.NO_QUOTE = null;
		Attribute.SINGLE_QUOTE = "'";
		Attribute.DOUBLE_QUOTE = '"';
		var CSSESC_QUOTE_OPTIONS = (_CSSESC_QUOTE_OPTIONS = {
		  "'": {
		    quotes: 'single',
		    wrap: true
		  },
		  '"': {
		    quotes: 'double',
		    wrap: true
		  }
		}, _CSSESC_QUOTE_OPTIONS[null] = {
		  isIdentifier: true
		}, _CSSESC_QUOTE_OPTIONS);

		function defaultAttrConcat(attrValue, attrSpaces) {
		  return "" + attrSpaces.before + attrValue + attrSpaces.after;
		}
} (attribute));
	return attribute;
}

var universalExports = {};
var universal = {
  get exports(){ return universalExports; },
  set exports(v){ universalExports = v; },
};

var hasRequiredUniversal;

function requireUniversal () {
	if (hasRequiredUniversal) return universalExports;
	hasRequiredUniversal = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _namespace = _interopRequireDefault(requireNamespace());

		var _types = requireTypes();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var Universal = /*#__PURE__*/function (_Namespace) {
		  _inheritsLoose(Universal, _Namespace);

		  function Universal(opts) {
		    var _this;

		    _this = _Namespace.call(this, opts) || this;
		    _this.type = _types.UNIVERSAL;
		    _this.value = '*';
		    return _this;
		  }

		  return Universal;
		}(_namespace["default"]);

		exports["default"] = Universal;
		module.exports = exports.default;
} (universal, universalExports));
	return universalExports;
}

var combinatorExports = {};
var combinator = {
  get exports(){ return combinatorExports; },
  set exports(v){ combinatorExports = v; },
};

var hasRequiredCombinator;

function requireCombinator () {
	if (hasRequiredCombinator) return combinatorExports;
	hasRequiredCombinator = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _node = _interopRequireDefault(requireNode());

		var _types = requireTypes();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var Combinator = /*#__PURE__*/function (_Node) {
		  _inheritsLoose(Combinator, _Node);

		  function Combinator(opts) {
		    var _this;

		    _this = _Node.call(this, opts) || this;
		    _this.type = _types.COMBINATOR;
		    return _this;
		  }

		  return Combinator;
		}(_node["default"]);

		exports["default"] = Combinator;
		module.exports = exports.default;
} (combinator, combinatorExports));
	return combinatorExports;
}

var nestingExports = {};
var nesting = {
  get exports(){ return nestingExports; },
  set exports(v){ nestingExports = v; },
};

var hasRequiredNesting;

function requireNesting () {
	if (hasRequiredNesting) return nestingExports;
	hasRequiredNesting = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _node = _interopRequireDefault(requireNode());

		var _types = requireTypes();

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

		function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

		var Nesting = /*#__PURE__*/function (_Node) {
		  _inheritsLoose(Nesting, _Node);

		  function Nesting(opts) {
		    var _this;

		    _this = _Node.call(this, opts) || this;
		    _this.type = _types.NESTING;
		    _this.value = '&';
		    return _this;
		  }

		  return Nesting;
		}(_node["default"]);

		exports["default"] = Nesting;
		module.exports = exports.default;
} (nesting, nestingExports));
	return nestingExports;
}

var sortAscendingExports = {};
var sortAscending = {
  get exports(){ return sortAscendingExports; },
  set exports(v){ sortAscendingExports = v; },
};

var hasRequiredSortAscending;

function requireSortAscending () {
	if (hasRequiredSortAscending) return sortAscendingExports;
	hasRequiredSortAscending = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = sortAscending;

		function sortAscending(list) {
		  return list.sort(function (a, b) {
		    return a - b;
		  });
		}
		module.exports = exports.default;
} (sortAscending, sortAscendingExports));
	return sortAscendingExports;
}

var tokenize = {};

var tokenTypes = {};

var hasRequiredTokenTypes;

function requireTokenTypes () {
	if (hasRequiredTokenTypes) return tokenTypes;
	hasRequiredTokenTypes = 1;

	tokenTypes.__esModule = true;
	tokenTypes.combinator = tokenTypes.word = tokenTypes.comment = tokenTypes.str = tokenTypes.tab = tokenTypes.newline = tokenTypes.feed = tokenTypes.cr = tokenTypes.backslash = tokenTypes.bang = tokenTypes.slash = tokenTypes.doubleQuote = tokenTypes.singleQuote = tokenTypes.space = tokenTypes.greaterThan = tokenTypes.pipe = tokenTypes.equals = tokenTypes.plus = tokenTypes.caret = tokenTypes.tilde = tokenTypes.dollar = tokenTypes.closeSquare = tokenTypes.openSquare = tokenTypes.closeParenthesis = tokenTypes.openParenthesis = tokenTypes.semicolon = tokenTypes.colon = tokenTypes.comma = tokenTypes.at = tokenTypes.asterisk = tokenTypes.ampersand = void 0;
	var ampersand = 38; // `&`.charCodeAt(0);

	tokenTypes.ampersand = ampersand;
	var asterisk = 42; // `*`.charCodeAt(0);

	tokenTypes.asterisk = asterisk;
	var at = 64; // `@`.charCodeAt(0);

	tokenTypes.at = at;
	var comma = 44; // `,`.charCodeAt(0);

	tokenTypes.comma = comma;
	var colon = 58; // `:`.charCodeAt(0);

	tokenTypes.colon = colon;
	var semicolon = 59; // `;`.charCodeAt(0);

	tokenTypes.semicolon = semicolon;
	var openParenthesis = 40; // `(`.charCodeAt(0);

	tokenTypes.openParenthesis = openParenthesis;
	var closeParenthesis = 41; // `)`.charCodeAt(0);

	tokenTypes.closeParenthesis = closeParenthesis;
	var openSquare = 91; // `[`.charCodeAt(0);

	tokenTypes.openSquare = openSquare;
	var closeSquare = 93; // `]`.charCodeAt(0);

	tokenTypes.closeSquare = closeSquare;
	var dollar = 36; // `$`.charCodeAt(0);

	tokenTypes.dollar = dollar;
	var tilde = 126; // `~`.charCodeAt(0);

	tokenTypes.tilde = tilde;
	var caret = 94; // `^`.charCodeAt(0);

	tokenTypes.caret = caret;
	var plus = 43; // `+`.charCodeAt(0);

	tokenTypes.plus = plus;
	var equals = 61; // `=`.charCodeAt(0);

	tokenTypes.equals = equals;
	var pipe = 124; // `|`.charCodeAt(0);

	tokenTypes.pipe = pipe;
	var greaterThan = 62; // `>`.charCodeAt(0);

	tokenTypes.greaterThan = greaterThan;
	var space = 32; // ` `.charCodeAt(0);

	tokenTypes.space = space;
	var singleQuote = 39; // `'`.charCodeAt(0);

	tokenTypes.singleQuote = singleQuote;
	var doubleQuote = 34; // `"`.charCodeAt(0);

	tokenTypes.doubleQuote = doubleQuote;
	var slash = 47; // `/`.charCodeAt(0);

	tokenTypes.slash = slash;
	var bang = 33; // `!`.charCodeAt(0);

	tokenTypes.bang = bang;
	var backslash = 92; // '\\'.charCodeAt(0);

	tokenTypes.backslash = backslash;
	var cr = 13; // '\r'.charCodeAt(0);

	tokenTypes.cr = cr;
	var feed = 12; // '\f'.charCodeAt(0);

	tokenTypes.feed = feed;
	var newline = 10; // '\n'.charCodeAt(0);

	tokenTypes.newline = newline;
	var tab = 9; // '\t'.charCodeAt(0);
	// Expose aliases primarily for readability.

	tokenTypes.tab = tab;
	var str = singleQuote; // No good single character representation!

	tokenTypes.str = str;
	var comment = -1;
	tokenTypes.comment = comment;
	var word = -2;
	tokenTypes.word = word;
	var combinator = -3;
	tokenTypes.combinator = combinator;
	return tokenTypes;
}

var hasRequiredTokenize;

function requireTokenize () {
	if (hasRequiredTokenize) return tokenize;
	hasRequiredTokenize = 1;
	(function (exports) {

		exports.__esModule = true;
		exports["default"] = tokenize;
		exports.FIELDS = void 0;

		var t = _interopRequireWildcard(requireTokenTypes());

		var _unescapable, _wordDelimiters;

		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

		var unescapable = (_unescapable = {}, _unescapable[t.tab] = true, _unescapable[t.newline] = true, _unescapable[t.cr] = true, _unescapable[t.feed] = true, _unescapable);
		var wordDelimiters = (_wordDelimiters = {}, _wordDelimiters[t.space] = true, _wordDelimiters[t.tab] = true, _wordDelimiters[t.newline] = true, _wordDelimiters[t.cr] = true, _wordDelimiters[t.feed] = true, _wordDelimiters[t.ampersand] = true, _wordDelimiters[t.asterisk] = true, _wordDelimiters[t.bang] = true, _wordDelimiters[t.comma] = true, _wordDelimiters[t.colon] = true, _wordDelimiters[t.semicolon] = true, _wordDelimiters[t.openParenthesis] = true, _wordDelimiters[t.closeParenthesis] = true, _wordDelimiters[t.openSquare] = true, _wordDelimiters[t.closeSquare] = true, _wordDelimiters[t.singleQuote] = true, _wordDelimiters[t.doubleQuote] = true, _wordDelimiters[t.plus] = true, _wordDelimiters[t.pipe] = true, _wordDelimiters[t.tilde] = true, _wordDelimiters[t.greaterThan] = true, _wordDelimiters[t.equals] = true, _wordDelimiters[t.dollar] = true, _wordDelimiters[t.caret] = true, _wordDelimiters[t.slash] = true, _wordDelimiters);
		var hex = {};
		var hexChars = "0123456789abcdefABCDEF";

		for (var i = 0; i < hexChars.length; i++) {
		  hex[hexChars.charCodeAt(i)] = true;
		}
		/**
		 *  Returns the last index of the bar css word
		 * @param {string} css The string in which the word begins
		 * @param {number} start The index into the string where word's first letter occurs
		 */


		function consumeWord(css, start) {
		  var next = start;
		  var code;

		  do {
		    code = css.charCodeAt(next);

		    if (wordDelimiters[code]) {
		      return next - 1;
		    } else if (code === t.backslash) {
		      next = consumeEscape(css, next) + 1;
		    } else {
		      // All other characters are part of the word
		      next++;
		    }
		  } while (next < css.length);

		  return next - 1;
		}
		/**
		 *  Returns the last index of the escape sequence
		 * @param {string} css The string in which the sequence begins
		 * @param {number} start The index into the string where escape character (`\`) occurs.
		 */


		function consumeEscape(css, start) {
		  var next = start;
		  var code = css.charCodeAt(next + 1);

		  if (unescapable[code]) ; else if (hex[code]) {
		    var hexDigits = 0; // consume up to 6 hex chars

		    do {
		      next++;
		      hexDigits++;
		      code = css.charCodeAt(next + 1);
		    } while (hex[code] && hexDigits < 6); // if fewer than 6 hex chars, a trailing space ends the escape


		    if (hexDigits < 6 && code === t.space) {
		      next++;
		    }
		  } else {
		    // the next char is part of the current word
		    next++;
		  }

		  return next;
		}

		var FIELDS = {
		  TYPE: 0,
		  START_LINE: 1,
		  START_COL: 2,
		  END_LINE: 3,
		  END_COL: 4,
		  START_POS: 5,
		  END_POS: 6
		};
		exports.FIELDS = FIELDS;

		function tokenize(input) {
		  var tokens = [];
		  var css = input.css.valueOf();
		  var _css = css,
		      length = _css.length;
		  var offset = -1;
		  var line = 1;
		  var start = 0;
		  var end = 0;
		  var code, content, endColumn, endLine, escaped, escapePos, last, lines, next, nextLine, nextOffset, quote, tokenType;

		  function unclosed(what, fix) {
		    if (input.safe) {
		      // fyi: this is never set to true.
		      css += fix;
		      next = css.length - 1;
		    } else {
		      throw input.error('Unclosed ' + what, line, start - offset, start);
		    }
		  }

		  while (start < length) {
		    code = css.charCodeAt(start);

		    if (code === t.newline) {
		      offset = start;
		      line += 1;
		    }

		    switch (code) {
		      case t.space:
		      case t.tab:
		      case t.newline:
		      case t.cr:
		      case t.feed:
		        next = start;

		        do {
		          next += 1;
		          code = css.charCodeAt(next);

		          if (code === t.newline) {
		            offset = next;
		            line += 1;
		          }
		        } while (code === t.space || code === t.newline || code === t.tab || code === t.cr || code === t.feed);

		        tokenType = t.space;
		        endLine = line;
		        endColumn = next - offset - 1;
		        end = next;
		        break;

		      case t.plus:
		      case t.greaterThan:
		      case t.tilde:
		      case t.pipe:
		        next = start;

		        do {
		          next += 1;
		          code = css.charCodeAt(next);
		        } while (code === t.plus || code === t.greaterThan || code === t.tilde || code === t.pipe);

		        tokenType = t.combinator;
		        endLine = line;
		        endColumn = start - offset;
		        end = next;
		        break;
		      // Consume these characters as single tokens.

		      case t.asterisk:
		      case t.ampersand:
		      case t.bang:
		      case t.comma:
		      case t.equals:
		      case t.dollar:
		      case t.caret:
		      case t.openSquare:
		      case t.closeSquare:
		      case t.colon:
		      case t.semicolon:
		      case t.openParenthesis:
		      case t.closeParenthesis:
		        next = start;
		        tokenType = code;
		        endLine = line;
		        endColumn = start - offset;
		        end = next + 1;
		        break;

		      case t.singleQuote:
		      case t.doubleQuote:
		        quote = code === t.singleQuote ? "'" : '"';
		        next = start;

		        do {
		          escaped = false;
		          next = css.indexOf(quote, next + 1);

		          if (next === -1) {
		            unclosed('quote', quote);
		          }

		          escapePos = next;

		          while (css.charCodeAt(escapePos - 1) === t.backslash) {
		            escapePos -= 1;
		            escaped = !escaped;
		          }
		        } while (escaped);

		        tokenType = t.str;
		        endLine = line;
		        endColumn = start - offset;
		        end = next + 1;
		        break;

		      default:
		        if (code === t.slash && css.charCodeAt(start + 1) === t.asterisk) {
		          next = css.indexOf('*/', start + 2) + 1;

		          if (next === 0) {
		            unclosed('comment', '*/');
		          }

		          content = css.slice(start, next + 1);
		          lines = content.split('\n');
		          last = lines.length - 1;

		          if (last > 0) {
		            nextLine = line + last;
		            nextOffset = next - lines[last].length;
		          } else {
		            nextLine = line;
		            nextOffset = offset;
		          }

		          tokenType = t.comment;
		          line = nextLine;
		          endLine = nextLine;
		          endColumn = next - nextOffset;
		        } else if (code === t.slash) {
		          next = start;
		          tokenType = code;
		          endLine = line;
		          endColumn = start - offset;
		          end = next + 1;
		        } else {
		          next = consumeWord(css, start);
		          tokenType = t.word;
		          endLine = line;
		          endColumn = next - offset;
		        }

		        end = next + 1;
		        break;
		    } // Ensure that the token structure remains consistent


		    tokens.push([tokenType, // [0] Token type
		    line, // [1] Starting line
		    start - offset, // [2] Starting column
		    endLine, // [3] Ending line
		    endColumn, // [4] Ending column
		    start, // [5] Start position / Source index
		    end // [6] End position
		    ]); // Reset offset for the next token

		    if (nextOffset) {
		      offset = nextOffset;
		      nextOffset = null;
		    }

		    start = end;
		  }

		  return tokens;
		}
} (tokenize));
	return tokenize;
}

var hasRequiredParser$1;

function requireParser$1 () {
	if (hasRequiredParser$1) return parserExports;
	hasRequiredParser$1 = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _root = _interopRequireDefault(requireRoot());

		var _selector = _interopRequireDefault(requireSelector());

		var _className = _interopRequireDefault(requireClassName());

		var _comment = _interopRequireDefault(requireComment());

		var _id = _interopRequireDefault(requireId());

		var _tag = _interopRequireDefault(requireTag());

		var _string = _interopRequireDefault(requireString$1());

		var _pseudo = _interopRequireDefault(requirePseudo());

		var _attribute = _interopRequireWildcard(requireAttribute());

		var _universal = _interopRequireDefault(requireUniversal());

		var _combinator = _interopRequireDefault(requireCombinator());

		var _nesting = _interopRequireDefault(requireNesting());

		var _sortAscending = _interopRequireDefault(requireSortAscending());

		var _tokenize = _interopRequireWildcard(requireTokenize());

		var tokens = _interopRequireWildcard(requireTokenTypes());

		var types = _interopRequireWildcard(requireTypes());

		var _util = requireUtil();

		var _WHITESPACE_TOKENS, _Object$assign;

		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

		function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

		var WHITESPACE_TOKENS = (_WHITESPACE_TOKENS = {}, _WHITESPACE_TOKENS[tokens.space] = true, _WHITESPACE_TOKENS[tokens.cr] = true, _WHITESPACE_TOKENS[tokens.feed] = true, _WHITESPACE_TOKENS[tokens.newline] = true, _WHITESPACE_TOKENS[tokens.tab] = true, _WHITESPACE_TOKENS);
		var WHITESPACE_EQUIV_TOKENS = Object.assign({}, WHITESPACE_TOKENS, (_Object$assign = {}, _Object$assign[tokens.comment] = true, _Object$assign));

		function tokenStart(token) {
		  return {
		    line: token[_tokenize.FIELDS.START_LINE],
		    column: token[_tokenize.FIELDS.START_COL]
		  };
		}

		function tokenEnd(token) {
		  return {
		    line: token[_tokenize.FIELDS.END_LINE],
		    column: token[_tokenize.FIELDS.END_COL]
		  };
		}

		function getSource(startLine, startColumn, endLine, endColumn) {
		  return {
		    start: {
		      line: startLine,
		      column: startColumn
		    },
		    end: {
		      line: endLine,
		      column: endColumn
		    }
		  };
		}

		function getTokenSource(token) {
		  return getSource(token[_tokenize.FIELDS.START_LINE], token[_tokenize.FIELDS.START_COL], token[_tokenize.FIELDS.END_LINE], token[_tokenize.FIELDS.END_COL]);
		}

		function getTokenSourceSpan(startToken, endToken) {
		  if (!startToken) {
		    return undefined;
		  }

		  return getSource(startToken[_tokenize.FIELDS.START_LINE], startToken[_tokenize.FIELDS.START_COL], endToken[_tokenize.FIELDS.END_LINE], endToken[_tokenize.FIELDS.END_COL]);
		}

		function unescapeProp(node, prop) {
		  var value = node[prop];

		  if (typeof value !== "string") {
		    return;
		  }

		  if (value.indexOf("\\") !== -1) {
		    (0, _util.ensureObject)(node, 'raws');
		    node[prop] = (0, _util.unesc)(value);

		    if (node.raws[prop] === undefined) {
		      node.raws[prop] = value;
		    }
		  }

		  return node;
		}

		function indexesOf(array, item) {
		  var i = -1;
		  var indexes = [];

		  while ((i = array.indexOf(item, i + 1)) !== -1) {
		    indexes.push(i);
		  }

		  return indexes;
		}

		function uniqs() {
		  var list = Array.prototype.concat.apply([], arguments);
		  return list.filter(function (item, i) {
		    return i === list.indexOf(item);
		  });
		}

		var Parser = /*#__PURE__*/function () {
		  function Parser(rule, options) {
		    if (options === void 0) {
		      options = {};
		    }

		    this.rule = rule;
		    this.options = Object.assign({
		      lossy: false,
		      safe: false
		    }, options);
		    this.position = 0;
		    this.css = typeof this.rule === 'string' ? this.rule : this.rule.selector;
		    this.tokens = (0, _tokenize["default"])({
		      css: this.css,
		      error: this._errorGenerator(),
		      safe: this.options.safe
		    });
		    var rootSource = getTokenSourceSpan(this.tokens[0], this.tokens[this.tokens.length - 1]);
		    this.root = new _root["default"]({
		      source: rootSource
		    });
		    this.root.errorGenerator = this._errorGenerator();
		    var selector = new _selector["default"]({
		      source: {
		        start: {
		          line: 1,
		          column: 1
		        }
		      }
		    });
		    this.root.append(selector);
		    this.current = selector;
		    this.loop();
		  }

		  var _proto = Parser.prototype;

		  _proto._errorGenerator = function _errorGenerator() {
		    var _this = this;

		    return function (message, errorOptions) {
		      if (typeof _this.rule === 'string') {
		        return new Error(message);
		      }

		      return _this.rule.error(message, errorOptions);
		    };
		  };

		  _proto.attribute = function attribute() {
		    var attr = [];
		    var startingToken = this.currToken;
		    this.position++;

		    while (this.position < this.tokens.length && this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {
		      attr.push(this.currToken);
		      this.position++;
		    }

		    if (this.currToken[_tokenize.FIELDS.TYPE] !== tokens.closeSquare) {
		      return this.expected('closing square bracket', this.currToken[_tokenize.FIELDS.START_POS]);
		    }

		    var len = attr.length;
		    var node = {
		      source: getSource(startingToken[1], startingToken[2], this.currToken[3], this.currToken[4]),
		      sourceIndex: startingToken[_tokenize.FIELDS.START_POS]
		    };

		    if (len === 1 && !~[tokens.word].indexOf(attr[0][_tokenize.FIELDS.TYPE])) {
		      return this.expected('attribute', attr[0][_tokenize.FIELDS.START_POS]);
		    }

		    var pos = 0;
		    var spaceBefore = '';
		    var commentBefore = '';
		    var lastAdded = null;
		    var spaceAfterMeaningfulToken = false;

		    while (pos < len) {
		      var token = attr[pos];
		      var content = this.content(token);
		      var next = attr[pos + 1];

		      switch (token[_tokenize.FIELDS.TYPE]) {
		        case tokens.space:
		          // if (
		          //     len === 1 ||
		          //     pos === 0 && this.content(next) === '|'
		          // ) {
		          //     return this.expected('attribute', token[TOKEN.START_POS], content);
		          // }
		          spaceAfterMeaningfulToken = true;

		          if (this.options.lossy) {
		            break;
		          }

		          if (lastAdded) {
		            (0, _util.ensureObject)(node, 'spaces', lastAdded);
		            var prevContent = node.spaces[lastAdded].after || '';
		            node.spaces[lastAdded].after = prevContent + content;
		            var existingComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || null;

		            if (existingComment) {
		              node.raws.spaces[lastAdded].after = existingComment + content;
		            }
		          } else {
		            spaceBefore = spaceBefore + content;
		            commentBefore = commentBefore + content;
		          }

		          break;

		        case tokens.asterisk:
		          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {
		            node.operator = content;
		            lastAdded = 'operator';
		          } else if ((!node.namespace || lastAdded === "namespace" && !spaceAfterMeaningfulToken) && next) {
		            if (spaceBefore) {
		              (0, _util.ensureObject)(node, 'spaces', 'attribute');
		              node.spaces.attribute.before = spaceBefore;
		              spaceBefore = '';
		            }

		            if (commentBefore) {
		              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');
		              node.raws.spaces.attribute.before = spaceBefore;
		              commentBefore = '';
		            }

		            node.namespace = (node.namespace || "") + content;
		            var rawValue = (0, _util.getProp)(node, 'raws', 'namespace') || null;

		            if (rawValue) {
		              node.raws.namespace += content;
		            }

		            lastAdded = 'namespace';
		          }

		          spaceAfterMeaningfulToken = false;
		          break;

		        case tokens.dollar:
		          if (lastAdded === "value") {
		            var oldRawValue = (0, _util.getProp)(node, 'raws', 'value');
		            node.value += "$";

		            if (oldRawValue) {
		              node.raws.value = oldRawValue + "$";
		            }

		            break;
		          }

		        // Falls through

		        case tokens.caret:
		          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {
		            node.operator = content;
		            lastAdded = 'operator';
		          }

		          spaceAfterMeaningfulToken = false;
		          break;

		        case tokens.combinator:
		          if (content === '~' && next[_tokenize.FIELDS.TYPE] === tokens.equals) {
		            node.operator = content;
		            lastAdded = 'operator';
		          }

		          if (content !== '|') {
		            spaceAfterMeaningfulToken = false;
		            break;
		          }

		          if (next[_tokenize.FIELDS.TYPE] === tokens.equals) {
		            node.operator = content;
		            lastAdded = 'operator';
		          } else if (!node.namespace && !node.attribute) {
		            node.namespace = true;
		          }

		          spaceAfterMeaningfulToken = false;
		          break;

		        case tokens.word:
		          if (next && this.content(next) === '|' && attr[pos + 2] && attr[pos + 2][_tokenize.FIELDS.TYPE] !== tokens.equals && // this look-ahead probably fails with comment nodes involved.
		          !node.operator && !node.namespace) {
		            node.namespace = content;
		            lastAdded = 'namespace';
		          } else if (!node.attribute || lastAdded === "attribute" && !spaceAfterMeaningfulToken) {
		            if (spaceBefore) {
		              (0, _util.ensureObject)(node, 'spaces', 'attribute');
		              node.spaces.attribute.before = spaceBefore;
		              spaceBefore = '';
		            }

		            if (commentBefore) {
		              (0, _util.ensureObject)(node, 'raws', 'spaces', 'attribute');
		              node.raws.spaces.attribute.before = commentBefore;
		              commentBefore = '';
		            }

		            node.attribute = (node.attribute || "") + content;

		            var _rawValue = (0, _util.getProp)(node, 'raws', 'attribute') || null;

		            if (_rawValue) {
		              node.raws.attribute += content;
		            }

		            lastAdded = 'attribute';
		          } else if (!node.value && node.value !== "" || lastAdded === "value" && !(spaceAfterMeaningfulToken || node.quoteMark)) {
		            var _unescaped = (0, _util.unesc)(content);

		            var _oldRawValue = (0, _util.getProp)(node, 'raws', 'value') || '';

		            var oldValue = node.value || '';
		            node.value = oldValue + _unescaped;
		            node.quoteMark = null;

		            if (_unescaped !== content || _oldRawValue) {
		              (0, _util.ensureObject)(node, 'raws');
		              node.raws.value = (_oldRawValue || oldValue) + content;
		            }

		            lastAdded = 'value';
		          } else {
		            var insensitive = content === 'i' || content === "I";

		            if ((node.value || node.value === '') && (node.quoteMark || spaceAfterMeaningfulToken)) {
		              node.insensitive = insensitive;

		              if (!insensitive || content === "I") {
		                (0, _util.ensureObject)(node, 'raws');
		                node.raws.insensitiveFlag = content;
		              }

		              lastAdded = 'insensitive';

		              if (spaceBefore) {
		                (0, _util.ensureObject)(node, 'spaces', 'insensitive');
		                node.spaces.insensitive.before = spaceBefore;
		                spaceBefore = '';
		              }

		              if (commentBefore) {
		                (0, _util.ensureObject)(node, 'raws', 'spaces', 'insensitive');
		                node.raws.spaces.insensitive.before = commentBefore;
		                commentBefore = '';
		              }
		            } else if (node.value || node.value === '') {
		              lastAdded = 'value';
		              node.value += content;

		              if (node.raws.value) {
		                node.raws.value += content;
		              }
		            }
		          }

		          spaceAfterMeaningfulToken = false;
		          break;

		        case tokens.str:
		          if (!node.attribute || !node.operator) {
		            return this.error("Expected an attribute followed by an operator preceding the string.", {
		              index: token[_tokenize.FIELDS.START_POS]
		            });
		          }

		          var _unescapeValue = (0, _attribute.unescapeValue)(content),
		              unescaped = _unescapeValue.unescaped,
		              quoteMark = _unescapeValue.quoteMark;

		          node.value = unescaped;
		          node.quoteMark = quoteMark;
		          lastAdded = 'value';
		          (0, _util.ensureObject)(node, 'raws');
		          node.raws.value = content;
		          spaceAfterMeaningfulToken = false;
		          break;

		        case tokens.equals:
		          if (!node.attribute) {
		            return this.expected('attribute', token[_tokenize.FIELDS.START_POS], content);
		          }

		          if (node.value) {
		            return this.error('Unexpected "=" found; an operator was already defined.', {
		              index: token[_tokenize.FIELDS.START_POS]
		            });
		          }

		          node.operator = node.operator ? node.operator + content : content;
		          lastAdded = 'operator';
		          spaceAfterMeaningfulToken = false;
		          break;

		        case tokens.comment:
		          if (lastAdded) {
		            if (spaceAfterMeaningfulToken || next && next[_tokenize.FIELDS.TYPE] === tokens.space || lastAdded === 'insensitive') {
		              var lastComment = (0, _util.getProp)(node, 'spaces', lastAdded, 'after') || '';
		              var rawLastComment = (0, _util.getProp)(node, 'raws', 'spaces', lastAdded, 'after') || lastComment;
		              (0, _util.ensureObject)(node, 'raws', 'spaces', lastAdded);
		              node.raws.spaces[lastAdded].after = rawLastComment + content;
		            } else {
		              var lastValue = node[lastAdded] || '';
		              var rawLastValue = (0, _util.getProp)(node, 'raws', lastAdded) || lastValue;
		              (0, _util.ensureObject)(node, 'raws');
		              node.raws[lastAdded] = rawLastValue + content;
		            }
		          } else {
		            commentBefore = commentBefore + content;
		          }

		          break;

		        default:
		          return this.error("Unexpected \"" + content + "\" found.", {
		            index: token[_tokenize.FIELDS.START_POS]
		          });
		      }

		      pos++;
		    }

		    unescapeProp(node, "attribute");
		    unescapeProp(node, "namespace");
		    this.newNode(new _attribute["default"](node));
		    this.position++;
		  }
		  /**
		   * return a node containing meaningless garbage up to (but not including) the specified token position.
		   * if the token position is negative, all remaining tokens are consumed.
		   *
		   * This returns an array containing a single string node if all whitespace,
		   * otherwise an array of comment nodes with space before and after.
		   *
		   * These tokens are not added to the current selector, the caller can add them or use them to amend
		   * a previous node's space metadata.
		   *
		   * In lossy mode, this returns only comments.
		   */
		  ;

		  _proto.parseWhitespaceEquivalentTokens = function parseWhitespaceEquivalentTokens(stopPosition) {
		    if (stopPosition < 0) {
		      stopPosition = this.tokens.length;
		    }

		    var startPosition = this.position;
		    var nodes = [];
		    var space = "";
		    var lastComment = undefined;

		    do {
		      if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) {
		        if (!this.options.lossy) {
		          space += this.content();
		        }
		      } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.comment) {
		        var spaces = {};

		        if (space) {
		          spaces.before = space;
		          space = "";
		        }

		        lastComment = new _comment["default"]({
		          value: this.content(),
		          source: getTokenSource(this.currToken),
		          sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],
		          spaces: spaces
		        });
		        nodes.push(lastComment);
		      }
		    } while (++this.position < stopPosition);

		    if (space) {
		      if (lastComment) {
		        lastComment.spaces.after = space;
		      } else if (!this.options.lossy) {
		        var firstToken = this.tokens[startPosition];
		        var lastToken = this.tokens[this.position - 1];
		        nodes.push(new _string["default"]({
		          value: '',
		          source: getSource(firstToken[_tokenize.FIELDS.START_LINE], firstToken[_tokenize.FIELDS.START_COL], lastToken[_tokenize.FIELDS.END_LINE], lastToken[_tokenize.FIELDS.END_COL]),
		          sourceIndex: firstToken[_tokenize.FIELDS.START_POS],
		          spaces: {
		            before: space,
		            after: ''
		          }
		        }));
		      }
		    }

		    return nodes;
		  }
		  /**
		   *
		   * @param {*} nodes
		   */
		  ;

		  _proto.convertWhitespaceNodesToSpace = function convertWhitespaceNodesToSpace(nodes, requiredSpace) {
		    var _this2 = this;

		    if (requiredSpace === void 0) {
		      requiredSpace = false;
		    }

		    var space = "";
		    var rawSpace = "";
		    nodes.forEach(function (n) {
		      var spaceBefore = _this2.lossySpace(n.spaces.before, requiredSpace);

		      var rawSpaceBefore = _this2.lossySpace(n.rawSpaceBefore, requiredSpace);

		      space += spaceBefore + _this2.lossySpace(n.spaces.after, requiredSpace && spaceBefore.length === 0);
		      rawSpace += spaceBefore + n.value + _this2.lossySpace(n.rawSpaceAfter, requiredSpace && rawSpaceBefore.length === 0);
		    });

		    if (rawSpace === space) {
		      rawSpace = undefined;
		    }

		    var result = {
		      space: space,
		      rawSpace: rawSpace
		    };
		    return result;
		  };

		  _proto.isNamedCombinator = function isNamedCombinator(position) {
		    if (position === void 0) {
		      position = this.position;
		    }

		    return this.tokens[position + 0] && this.tokens[position + 0][_tokenize.FIELDS.TYPE] === tokens.slash && this.tokens[position + 1] && this.tokens[position + 1][_tokenize.FIELDS.TYPE] === tokens.word && this.tokens[position + 2] && this.tokens[position + 2][_tokenize.FIELDS.TYPE] === tokens.slash;
		  };

		  _proto.namedCombinator = function namedCombinator() {
		    if (this.isNamedCombinator()) {
		      var nameRaw = this.content(this.tokens[this.position + 1]);
		      var name = (0, _util.unesc)(nameRaw).toLowerCase();
		      var raws = {};

		      if (name !== nameRaw) {
		        raws.value = "/" + nameRaw + "/";
		      }

		      var node = new _combinator["default"]({
		        value: "/" + name + "/",
		        source: getSource(this.currToken[_tokenize.FIELDS.START_LINE], this.currToken[_tokenize.FIELDS.START_COL], this.tokens[this.position + 2][_tokenize.FIELDS.END_LINE], this.tokens[this.position + 2][_tokenize.FIELDS.END_COL]),
		        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS],
		        raws: raws
		      });
		      this.position = this.position + 3;
		      return node;
		    } else {
		      this.unexpected();
		    }
		  };

		  _proto.combinator = function combinator() {
		    var _this3 = this;

		    if (this.content() === '|') {
		      return this.namespace();
		    } // We need to decide between a space that's a descendant combinator and meaningless whitespace at the end of a selector.


		    var nextSigTokenPos = this.locateNextMeaningfulToken(this.position);

		    if (nextSigTokenPos < 0 || this.tokens[nextSigTokenPos][_tokenize.FIELDS.TYPE] === tokens.comma) {
		      var nodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);

		      if (nodes.length > 0) {
		        var last = this.current.last;

		        if (last) {
		          var _this$convertWhitespa = this.convertWhitespaceNodesToSpace(nodes),
		              space = _this$convertWhitespa.space,
		              rawSpace = _this$convertWhitespa.rawSpace;

		          if (rawSpace !== undefined) {
		            last.rawSpaceAfter += rawSpace;
		          }

		          last.spaces.after += space;
		        } else {
		          nodes.forEach(function (n) {
		            return _this3.newNode(n);
		          });
		        }
		      }

		      return;
		    }

		    var firstToken = this.currToken;
		    var spaceOrDescendantSelectorNodes = undefined;

		    if (nextSigTokenPos > this.position) {
		      spaceOrDescendantSelectorNodes = this.parseWhitespaceEquivalentTokens(nextSigTokenPos);
		    }

		    var node;

		    if (this.isNamedCombinator()) {
		      node = this.namedCombinator();
		    } else if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.combinator) {
		      node = new _combinator["default"]({
		        value: this.content(),
		        source: getTokenSource(this.currToken),
		        sourceIndex: this.currToken[_tokenize.FIELDS.START_POS]
		      });
		      this.position++;
		    } else if (WHITESPACE_TOKENS[this.currToken[_tokenize.FIELDS.TYPE]]) ; else if (!spaceOrDescendantSelectorNodes) {
		      this.unexpected();
		    }

		    if (node) {
		      if (spaceOrDescendantSelectorNodes) {
		        var _this$convertWhitespa2 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes),
		            _space = _this$convertWhitespa2.space,
		            _rawSpace = _this$convertWhitespa2.rawSpace;

		        node.spaces.before = _space;
		        node.rawSpaceBefore = _rawSpace;
		      }
		    } else {
		      // descendant combinator
		      var _this$convertWhitespa3 = this.convertWhitespaceNodesToSpace(spaceOrDescendantSelectorNodes, true),
		          _space2 = _this$convertWhitespa3.space,
		          _rawSpace2 = _this$convertWhitespa3.rawSpace;

		      if (!_rawSpace2) {
		        _rawSpace2 = _space2;
		      }

		      var spaces = {};
		      var raws = {
		        spaces: {}
		      };

		      if (_space2.endsWith(' ') && _rawSpace2.endsWith(' ')) {
		        spaces.before = _space2.slice(0, _space2.length - 1);
		        raws.spaces.before = _rawSpace2.slice(0, _rawSpace2.length - 1);
		      } else if (_space2.startsWith(' ') && _rawSpace2.startsWith(' ')) {
		        spaces.after = _space2.slice(1);
		        raws.spaces.after = _rawSpace2.slice(1);
		      } else {
		        raws.value = _rawSpace2;
		      }

		      node = new _combinator["default"]({
		        value: ' ',
		        source: getTokenSourceSpan(firstToken, this.tokens[this.position - 1]),
		        sourceIndex: firstToken[_tokenize.FIELDS.START_POS],
		        spaces: spaces,
		        raws: raws
		      });
		    }

		    if (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.space) {
		      node.spaces.after = this.optionalSpace(this.content());
		      this.position++;
		    }

		    return this.newNode(node);
		  };

		  _proto.comma = function comma() {
		    if (this.position === this.tokens.length - 1) {
		      this.root.trailingComma = true;
		      this.position++;
		      return;
		    }

		    this.current._inferEndPosition();

		    var selector = new _selector["default"]({
		      source: {
		        start: tokenStart(this.tokens[this.position + 1])
		      }
		    });
		    this.current.parent.append(selector);
		    this.current = selector;
		    this.position++;
		  };

		  _proto.comment = function comment() {
		    var current = this.currToken;
		    this.newNode(new _comment["default"]({
		      value: this.content(),
		      source: getTokenSource(current),
		      sourceIndex: current[_tokenize.FIELDS.START_POS]
		    }));
		    this.position++;
		  };

		  _proto.error = function error(message, opts) {
		    throw this.root.error(message, opts);
		  };

		  _proto.missingBackslash = function missingBackslash() {
		    return this.error('Expected a backslash preceding the semicolon.', {
		      index: this.currToken[_tokenize.FIELDS.START_POS]
		    });
		  };

		  _proto.missingParenthesis = function missingParenthesis() {
		    return this.expected('opening parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);
		  };

		  _proto.missingSquareBracket = function missingSquareBracket() {
		    return this.expected('opening square bracket', this.currToken[_tokenize.FIELDS.START_POS]);
		  };

		  _proto.unexpected = function unexpected() {
		    return this.error("Unexpected '" + this.content() + "'. Escaping special characters with \\ may help.", this.currToken[_tokenize.FIELDS.START_POS]);
		  };

		  _proto.namespace = function namespace() {
		    var before = this.prevToken && this.content(this.prevToken) || true;

		    if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.word) {
		      this.position++;
		      return this.word(before);
		    } else if (this.nextToken[_tokenize.FIELDS.TYPE] === tokens.asterisk) {
		      this.position++;
		      return this.universal(before);
		    }
		  };

		  _proto.nesting = function nesting() {
		    if (this.nextToken) {
		      var nextContent = this.content(this.nextToken);

		      if (nextContent === "|") {
		        this.position++;
		        return;
		      }
		    }

		    var current = this.currToken;
		    this.newNode(new _nesting["default"]({
		      value: this.content(),
		      source: getTokenSource(current),
		      sourceIndex: current[_tokenize.FIELDS.START_POS]
		    }));
		    this.position++;
		  };

		  _proto.parentheses = function parentheses() {
		    var last = this.current.last;
		    var unbalanced = 1;
		    this.position++;

		    if (last && last.type === types.PSEUDO) {
		      var selector = new _selector["default"]({
		        source: {
		          start: tokenStart(this.tokens[this.position - 1])
		        }
		      });
		      var cache = this.current;
		      last.append(selector);
		      this.current = selector;

		      while (this.position < this.tokens.length && unbalanced) {
		        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {
		          unbalanced++;
		        }

		        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {
		          unbalanced--;
		        }

		        if (unbalanced) {
		          this.parse();
		        } else {
		          this.current.source.end = tokenEnd(this.currToken);
		          this.current.parent.source.end = tokenEnd(this.currToken);
		          this.position++;
		        }
		      }

		      this.current = cache;
		    } else {
		      // I think this case should be an error. It's used to implement a basic parse of media queries
		      // but I don't think it's a good idea.
		      var parenStart = this.currToken;
		      var parenValue = "(";
		      var parenEnd;

		      while (this.position < this.tokens.length && unbalanced) {
		        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {
		          unbalanced++;
		        }

		        if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {
		          unbalanced--;
		        }

		        parenEnd = this.currToken;
		        parenValue += this.parseParenthesisToken(this.currToken);
		        this.position++;
		      }

		      if (last) {
		        last.appendToPropertyAndEscape("value", parenValue, parenValue);
		      } else {
		        this.newNode(new _string["default"]({
		          value: parenValue,
		          source: getSource(parenStart[_tokenize.FIELDS.START_LINE], parenStart[_tokenize.FIELDS.START_COL], parenEnd[_tokenize.FIELDS.END_LINE], parenEnd[_tokenize.FIELDS.END_COL]),
		          sourceIndex: parenStart[_tokenize.FIELDS.START_POS]
		        }));
		      }
		    }

		    if (unbalanced) {
		      return this.expected('closing parenthesis', this.currToken[_tokenize.FIELDS.START_POS]);
		    }
		  };

		  _proto.pseudo = function pseudo() {
		    var _this4 = this;

		    var pseudoStr = '';
		    var startingToken = this.currToken;

		    while (this.currToken && this.currToken[_tokenize.FIELDS.TYPE] === tokens.colon) {
		      pseudoStr += this.content();
		      this.position++;
		    }

		    if (!this.currToken) {
		      return this.expected(['pseudo-class', 'pseudo-element'], this.position - 1);
		    }

		    if (this.currToken[_tokenize.FIELDS.TYPE] === tokens.word) {
		      this.splitWord(false, function (first, length) {
		        pseudoStr += first;

		        _this4.newNode(new _pseudo["default"]({
		          value: pseudoStr,
		          source: getTokenSourceSpan(startingToken, _this4.currToken),
		          sourceIndex: startingToken[_tokenize.FIELDS.START_POS]
		        }));

		        if (length > 1 && _this4.nextToken && _this4.nextToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis) {
		          _this4.error('Misplaced parenthesis.', {
		            index: _this4.nextToken[_tokenize.FIELDS.START_POS]
		          });
		        }
		      });
		    } else {
		      return this.expected(['pseudo-class', 'pseudo-element'], this.currToken[_tokenize.FIELDS.START_POS]);
		    }
		  };

		  _proto.space = function space() {
		    var content = this.content(); // Handle space before and after the selector

		    if (this.position === 0 || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.prevToken[_tokenize.FIELDS.TYPE] === tokens.openParenthesis || this.current.nodes.every(function (node) {
		      return node.type === 'comment';
		    })) {
		      this.spaces = this.optionalSpace(content);
		      this.position++;
		    } else if (this.position === this.tokens.length - 1 || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.comma || this.nextToken[_tokenize.FIELDS.TYPE] === tokens.closeParenthesis) {
		      this.current.last.spaces.after = this.optionalSpace(content);
		      this.position++;
		    } else {
		      this.combinator();
		    }
		  };

		  _proto.string = function string() {
		    var current = this.currToken;
		    this.newNode(new _string["default"]({
		      value: this.content(),
		      source: getTokenSource(current),
		      sourceIndex: current[_tokenize.FIELDS.START_POS]
		    }));
		    this.position++;
		  };

		  _proto.universal = function universal(namespace) {
		    var nextToken = this.nextToken;

		    if (nextToken && this.content(nextToken) === '|') {
		      this.position++;
		      return this.namespace();
		    }

		    var current = this.currToken;
		    this.newNode(new _universal["default"]({
		      value: this.content(),
		      source: getTokenSource(current),
		      sourceIndex: current[_tokenize.FIELDS.START_POS]
		    }), namespace);
		    this.position++;
		  };

		  _proto.splitWord = function splitWord(namespace, firstCallback) {
		    var _this5 = this;

		    var nextToken = this.nextToken;
		    var word = this.content();

		    while (nextToken && ~[tokens.dollar, tokens.caret, tokens.equals, tokens.word].indexOf(nextToken[_tokenize.FIELDS.TYPE])) {
		      this.position++;
		      var current = this.content();
		      word += current;

		      if (current.lastIndexOf('\\') === current.length - 1) {
		        var next = this.nextToken;

		        if (next && next[_tokenize.FIELDS.TYPE] === tokens.space) {
		          word += this.requiredSpace(this.content(next));
		          this.position++;
		        }
		      }

		      nextToken = this.nextToken;
		    }

		    var hasClass = indexesOf(word, '.').filter(function (i) {
		      // Allow escaped dot within class name
		      var escapedDot = word[i - 1] === '\\'; // Allow decimal numbers percent in @keyframes

		      var isKeyframesPercent = /^\d+\.\d+%$/.test(word);
		      return !escapedDot && !isKeyframesPercent;
		    });
		    var hasId = indexesOf(word, '#').filter(function (i) {
		      return word[i - 1] !== '\\';
		    }); // Eliminate Sass interpolations from the list of id indexes

		    var interpolations = indexesOf(word, '#{');

		    if (interpolations.length) {
		      hasId = hasId.filter(function (hashIndex) {
		        return !~interpolations.indexOf(hashIndex);
		      });
		    }

		    var indices = (0, _sortAscending["default"])(uniqs([0].concat(hasClass, hasId)));
		    indices.forEach(function (ind, i) {
		      var index = indices[i + 1] || word.length;
		      var value = word.slice(ind, index);

		      if (i === 0 && firstCallback) {
		        return firstCallback.call(_this5, value, indices.length);
		      }

		      var node;
		      var current = _this5.currToken;
		      var sourceIndex = current[_tokenize.FIELDS.START_POS] + indices[i];
		      var source = getSource(current[1], current[2] + ind, current[3], current[2] + (index - 1));

		      if (~hasClass.indexOf(ind)) {
		        var classNameOpts = {
		          value: value.slice(1),
		          source: source,
		          sourceIndex: sourceIndex
		        };
		        node = new _className["default"](unescapeProp(classNameOpts, "value"));
		      } else if (~hasId.indexOf(ind)) {
		        var idOpts = {
		          value: value.slice(1),
		          source: source,
		          sourceIndex: sourceIndex
		        };
		        node = new _id["default"](unescapeProp(idOpts, "value"));
		      } else {
		        var tagOpts = {
		          value: value,
		          source: source,
		          sourceIndex: sourceIndex
		        };
		        unescapeProp(tagOpts, "value");
		        node = new _tag["default"](tagOpts);
		      }

		      _this5.newNode(node, namespace); // Ensure that the namespace is used only once


		      namespace = null;
		    });
		    this.position++;
		  };

		  _proto.word = function word(namespace) {
		    var nextToken = this.nextToken;

		    if (nextToken && this.content(nextToken) === '|') {
		      this.position++;
		      return this.namespace();
		    }

		    return this.splitWord(namespace);
		  };

		  _proto.loop = function loop() {
		    while (this.position < this.tokens.length) {
		      this.parse(true);
		    }

		    this.current._inferEndPosition();

		    return this.root;
		  };

		  _proto.parse = function parse(throwOnParenthesis) {
		    switch (this.currToken[_tokenize.FIELDS.TYPE]) {
		      case tokens.space:
		        this.space();
		        break;

		      case tokens.comment:
		        this.comment();
		        break;

		      case tokens.openParenthesis:
		        this.parentheses();
		        break;

		      case tokens.closeParenthesis:
		        if (throwOnParenthesis) {
		          this.missingParenthesis();
		        }

		        break;

		      case tokens.openSquare:
		        this.attribute();
		        break;

		      case tokens.dollar:
		      case tokens.caret:
		      case tokens.equals:
		      case tokens.word:
		        this.word();
		        break;

		      case tokens.colon:
		        this.pseudo();
		        break;

		      case tokens.comma:
		        this.comma();
		        break;

		      case tokens.asterisk:
		        this.universal();
		        break;

		      case tokens.ampersand:
		        this.nesting();
		        break;

		      case tokens.slash:
		      case tokens.combinator:
		        this.combinator();
		        break;

		      case tokens.str:
		        this.string();
		        break;
		      // These cases throw; no break needed.

		      case tokens.closeSquare:
		        this.missingSquareBracket();

		      case tokens.semicolon:
		        this.missingBackslash();

		      default:
		        this.unexpected();
		    }
		  }
		  /**
		   * Helpers
		   */
		  ;

		  _proto.expected = function expected(description, index, found) {
		    if (Array.isArray(description)) {
		      var last = description.pop();
		      description = description.join(', ') + " or " + last;
		    }

		    var an = /^[aeiou]/.test(description[0]) ? 'an' : 'a';

		    if (!found) {
		      return this.error("Expected " + an + " " + description + ".", {
		        index: index
		      });
		    }

		    return this.error("Expected " + an + " " + description + ", found \"" + found + "\" instead.", {
		      index: index
		    });
		  };

		  _proto.requiredSpace = function requiredSpace(space) {
		    return this.options.lossy ? ' ' : space;
		  };

		  _proto.optionalSpace = function optionalSpace(space) {
		    return this.options.lossy ? '' : space;
		  };

		  _proto.lossySpace = function lossySpace(space, required) {
		    if (this.options.lossy) {
		      return required ? ' ' : '';
		    } else {
		      return space;
		    }
		  };

		  _proto.parseParenthesisToken = function parseParenthesisToken(token) {
		    var content = this.content(token);

		    if (token[_tokenize.FIELDS.TYPE] === tokens.space) {
		      return this.requiredSpace(content);
		    } else {
		      return content;
		    }
		  };

		  _proto.newNode = function newNode(node, namespace) {
		    if (namespace) {
		      if (/^ +$/.test(namespace)) {
		        if (!this.options.lossy) {
		          this.spaces = (this.spaces || '') + namespace;
		        }

		        namespace = true;
		      }

		      node.namespace = namespace;
		      unescapeProp(node, "namespace");
		    }

		    if (this.spaces) {
		      node.spaces.before = this.spaces;
		      this.spaces = '';
		    }

		    return this.current.append(node);
		  };

		  _proto.content = function content(token) {
		    if (token === void 0) {
		      token = this.currToken;
		    }

		    return this.css.slice(token[_tokenize.FIELDS.START_POS], token[_tokenize.FIELDS.END_POS]);
		  };

		  /**
		   * returns the index of the next non-whitespace, non-comment token.
		   * returns -1 if no meaningful token is found.
		   */
		  _proto.locateNextMeaningfulToken = function locateNextMeaningfulToken(startPosition) {
		    if (startPosition === void 0) {
		      startPosition = this.position + 1;
		    }

		    var searchPosition = startPosition;

		    while (searchPosition < this.tokens.length) {
		      if (WHITESPACE_EQUIV_TOKENS[this.tokens[searchPosition][_tokenize.FIELDS.TYPE]]) {
		        searchPosition++;
		        continue;
		      } else {
		        return searchPosition;
		      }
		    }

		    return -1;
		  };

		  _createClass(Parser, [{
		    key: "currToken",
		    get: function get() {
		      return this.tokens[this.position];
		    }
		  }, {
		    key: "nextToken",
		    get: function get() {
		      return this.tokens[this.position + 1];
		    }
		  }, {
		    key: "prevToken",
		    get: function get() {
		      return this.tokens[this.position - 1];
		    }
		  }]);

		  return Parser;
		}();

		exports["default"] = Parser;
		module.exports = exports.default;
} (parser$1, parserExports));
	return parserExports;
}

var hasRequiredProcessor;

function requireProcessor () {
	if (hasRequiredProcessor) return processorExports;
	hasRequiredProcessor = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _parser = _interopRequireDefault(requireParser$1());

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		var Processor = /*#__PURE__*/function () {
		  function Processor(func, options) {
		    this.func = func || function noop() {};

		    this.funcRes = null;
		    this.options = options;
		  }

		  var _proto = Processor.prototype;

		  _proto._shouldUpdateSelector = function _shouldUpdateSelector(rule, options) {
		    if (options === void 0) {
		      options = {};
		    }

		    var merged = Object.assign({}, this.options, options);

		    if (merged.updateSelector === false) {
		      return false;
		    } else {
		      return typeof rule !== "string";
		    }
		  };

		  _proto._isLossy = function _isLossy(options) {
		    if (options === void 0) {
		      options = {};
		    }

		    var merged = Object.assign({}, this.options, options);

		    if (merged.lossless === false) {
		      return true;
		    } else {
		      return false;
		    }
		  };

		  _proto._root = function _root(rule, options) {
		    if (options === void 0) {
		      options = {};
		    }

		    var parser = new _parser["default"](rule, this._parseOptions(options));
		    return parser.root;
		  };

		  _proto._parseOptions = function _parseOptions(options) {
		    return {
		      lossy: this._isLossy(options)
		    };
		  };

		  _proto._run = function _run(rule, options) {
		    var _this = this;

		    if (options === void 0) {
		      options = {};
		    }

		    return new Promise(function (resolve, reject) {
		      try {
		        var root = _this._root(rule, options);

		        Promise.resolve(_this.func(root)).then(function (transform) {
		          var string = undefined;

		          if (_this._shouldUpdateSelector(rule, options)) {
		            string = root.toString();
		            rule.selector = string;
		          }

		          return {
		            transform: transform,
		            root: root,
		            string: string
		          };
		        }).then(resolve, reject);
		      } catch (e) {
		        reject(e);
		        return;
		      }
		    });
		  };

		  _proto._runSync = function _runSync(rule, options) {
		    if (options === void 0) {
		      options = {};
		    }

		    var root = this._root(rule, options);

		    var transform = this.func(root);

		    if (transform && typeof transform.then === "function") {
		      throw new Error("Selector processor returned a promise to a synchronous call.");
		    }

		    var string = undefined;

		    if (options.updateSelector && typeof rule !== "string") {
		      string = root.toString();
		      rule.selector = string;
		    }

		    return {
		      transform: transform,
		      root: root,
		      string: string
		    };
		  }
		  /**
		   * Process rule into a selector AST.
		   *
		   * @param rule {postcss.Rule | string} The css selector to be processed
		   * @param options The options for processing
		   * @returns {Promise<parser.Root>} The AST of the selector after processing it.
		   */
		  ;

		  _proto.ast = function ast(rule, options) {
		    return this._run(rule, options).then(function (result) {
		      return result.root;
		    });
		  }
		  /**
		   * Process rule into a selector AST synchronously.
		   *
		   * @param rule {postcss.Rule | string} The css selector to be processed
		   * @param options The options for processing
		   * @returns {parser.Root} The AST of the selector after processing it.
		   */
		  ;

		  _proto.astSync = function astSync(rule, options) {
		    return this._runSync(rule, options).root;
		  }
		  /**
		   * Process a selector into a transformed value asynchronously
		   *
		   * @param rule {postcss.Rule | string} The css selector to be processed
		   * @param options The options for processing
		   * @returns {Promise<any>} The value returned by the processor.
		   */
		  ;

		  _proto.transform = function transform(rule, options) {
		    return this._run(rule, options).then(function (result) {
		      return result.transform;
		    });
		  }
		  /**
		   * Process a selector into a transformed value synchronously.
		   *
		   * @param rule {postcss.Rule | string} The css selector to be processed
		   * @param options The options for processing
		   * @returns {any} The value returned by the processor.
		   */
		  ;

		  _proto.transformSync = function transformSync(rule, options) {
		    return this._runSync(rule, options).transform;
		  }
		  /**
		   * Process a selector into a new selector string asynchronously.
		   *
		   * @param rule {postcss.Rule | string} The css selector to be processed
		   * @param options The options for processing
		   * @returns {string} the selector after processing.
		   */
		  ;

		  _proto.process = function process(rule, options) {
		    return this._run(rule, options).then(function (result) {
		      return result.string || result.root.toString();
		    });
		  }
		  /**
		   * Process a selector into a new selector string synchronously.
		   *
		   * @param rule {postcss.Rule | string} The css selector to be processed
		   * @param options The options for processing
		   * @returns {string} the selector after processing.
		   */
		  ;

		  _proto.processSync = function processSync(rule, options) {
		    var result = this._runSync(rule, options);

		    return result.string || result.root.toString();
		  };

		  return Processor;
		}();

		exports["default"] = Processor;
		module.exports = exports.default;
} (processor, processorExports));
	return processorExports;
}

var selectors = {};

var constructors = {};

var hasRequiredConstructors;

function requireConstructors () {
	if (hasRequiredConstructors) return constructors;
	hasRequiredConstructors = 1;

	constructors.__esModule = true;
	constructors.universal = constructors.tag = constructors.string = constructors.selector = constructors.root = constructors.pseudo = constructors.nesting = constructors.id = constructors.comment = constructors.combinator = constructors.className = constructors.attribute = void 0;

	var _attribute = _interopRequireDefault(requireAttribute());

	var _className = _interopRequireDefault(requireClassName());

	var _combinator = _interopRequireDefault(requireCombinator());

	var _comment = _interopRequireDefault(requireComment());

	var _id = _interopRequireDefault(requireId());

	var _nesting = _interopRequireDefault(requireNesting());

	var _pseudo = _interopRequireDefault(requirePseudo());

	var _root = _interopRequireDefault(requireRoot());

	var _selector = _interopRequireDefault(requireSelector());

	var _string = _interopRequireDefault(requireString$1());

	var _tag = _interopRequireDefault(requireTag());

	var _universal = _interopRequireDefault(requireUniversal());

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

	var attribute = function attribute(opts) {
	  return new _attribute["default"](opts);
	};

	constructors.attribute = attribute;

	var className = function className(opts) {
	  return new _className["default"](opts);
	};

	constructors.className = className;

	var combinator = function combinator(opts) {
	  return new _combinator["default"](opts);
	};

	constructors.combinator = combinator;

	var comment = function comment(opts) {
	  return new _comment["default"](opts);
	};

	constructors.comment = comment;

	var id = function id(opts) {
	  return new _id["default"](opts);
	};

	constructors.id = id;

	var nesting = function nesting(opts) {
	  return new _nesting["default"](opts);
	};

	constructors.nesting = nesting;

	var pseudo = function pseudo(opts) {
	  return new _pseudo["default"](opts);
	};

	constructors.pseudo = pseudo;

	var root = function root(opts) {
	  return new _root["default"](opts);
	};

	constructors.root = root;

	var selector = function selector(opts) {
	  return new _selector["default"](opts);
	};

	constructors.selector = selector;

	var string = function string(opts) {
	  return new _string["default"](opts);
	};

	constructors.string = string;

	var tag = function tag(opts) {
	  return new _tag["default"](opts);
	};

	constructors.tag = tag;

	var universal = function universal(opts) {
	  return new _universal["default"](opts);
	};

	constructors.universal = universal;
	return constructors;
}

var guards = {};

var hasRequiredGuards;

function requireGuards () {
	if (hasRequiredGuards) return guards;
	hasRequiredGuards = 1;

	guards.__esModule = true;
	guards.isNode = isNode;
	guards.isPseudoElement = isPseudoElement;
	guards.isPseudoClass = isPseudoClass;
	guards.isContainer = isContainer;
	guards.isNamespace = isNamespace;
	guards.isUniversal = guards.isTag = guards.isString = guards.isSelector = guards.isRoot = guards.isPseudo = guards.isNesting = guards.isIdentifier = guards.isComment = guards.isCombinator = guards.isClassName = guards.isAttribute = void 0;

	var _types = requireTypes();

	var _IS_TYPE;

	var IS_TYPE = (_IS_TYPE = {}, _IS_TYPE[_types.ATTRIBUTE] = true, _IS_TYPE[_types.CLASS] = true, _IS_TYPE[_types.COMBINATOR] = true, _IS_TYPE[_types.COMMENT] = true, _IS_TYPE[_types.ID] = true, _IS_TYPE[_types.NESTING] = true, _IS_TYPE[_types.PSEUDO] = true, _IS_TYPE[_types.ROOT] = true, _IS_TYPE[_types.SELECTOR] = true, _IS_TYPE[_types.STRING] = true, _IS_TYPE[_types.TAG] = true, _IS_TYPE[_types.UNIVERSAL] = true, _IS_TYPE);

	function isNode(node) {
	  return typeof node === "object" && IS_TYPE[node.type];
	}

	function isNodeType(type, node) {
	  return isNode(node) && node.type === type;
	}

	var isAttribute = isNodeType.bind(null, _types.ATTRIBUTE);
	guards.isAttribute = isAttribute;
	var isClassName = isNodeType.bind(null, _types.CLASS);
	guards.isClassName = isClassName;
	var isCombinator = isNodeType.bind(null, _types.COMBINATOR);
	guards.isCombinator = isCombinator;
	var isComment = isNodeType.bind(null, _types.COMMENT);
	guards.isComment = isComment;
	var isIdentifier = isNodeType.bind(null, _types.ID);
	guards.isIdentifier = isIdentifier;
	var isNesting = isNodeType.bind(null, _types.NESTING);
	guards.isNesting = isNesting;
	var isPseudo = isNodeType.bind(null, _types.PSEUDO);
	guards.isPseudo = isPseudo;
	var isRoot = isNodeType.bind(null, _types.ROOT);
	guards.isRoot = isRoot;
	var isSelector = isNodeType.bind(null, _types.SELECTOR);
	guards.isSelector = isSelector;
	var isString = isNodeType.bind(null, _types.STRING);
	guards.isString = isString;
	var isTag = isNodeType.bind(null, _types.TAG);
	guards.isTag = isTag;
	var isUniversal = isNodeType.bind(null, _types.UNIVERSAL);
	guards.isUniversal = isUniversal;

	function isPseudoElement(node) {
	  return isPseudo(node) && node.value && (node.value.startsWith("::") || node.value.toLowerCase() === ":before" || node.value.toLowerCase() === ":after" || node.value.toLowerCase() === ":first-letter" || node.value.toLowerCase() === ":first-line");
	}

	function isPseudoClass(node) {
	  return isPseudo(node) && !isPseudoElement(node);
	}

	function isContainer(node) {
	  return !!(isNode(node) && node.walk);
	}

	function isNamespace(node) {
	  return isAttribute(node) || isTag(node);
	}
	return guards;
}

var hasRequiredSelectors;

function requireSelectors () {
	if (hasRequiredSelectors) return selectors;
	hasRequiredSelectors = 1;
	(function (exports) {

		exports.__esModule = true;

		var _types = requireTypes();

		Object.keys(_types).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (key in exports && exports[key] === _types[key]) return;
		  exports[key] = _types[key];
		});

		var _constructors = requireConstructors();

		Object.keys(_constructors).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (key in exports && exports[key] === _constructors[key]) return;
		  exports[key] = _constructors[key];
		});

		var _guards = requireGuards();

		Object.keys(_guards).forEach(function (key) {
		  if (key === "default" || key === "__esModule") return;
		  if (key in exports && exports[key] === _guards[key]) return;
		  exports[key] = _guards[key];
		});
} (selectors));
	return selectors;
}

var hasRequiredDist;

function requireDist () {
	if (hasRequiredDist) return distExports;
	hasRequiredDist = 1;
	(function (module, exports) {

		exports.__esModule = true;
		exports["default"] = void 0;

		var _processor = _interopRequireDefault(requireProcessor());

		var selectors = _interopRequireWildcard(requireSelectors());

		function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

		function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

		function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

		var parser = function parser(processor) {
		  return new _processor["default"](processor);
		};

		Object.assign(parser, selectors);
		delete parser.__esModule;
		var _default = parser;
		exports["default"] = _default;
		module.exports = exports.default;
} (dist$1, distExports));
	return distExports;
}

var transformThemeValue = {};

var hasRequiredTransformThemeValue;

function requireTransformThemeValue () {
	if (hasRequiredTransformThemeValue) return transformThemeValue;
	hasRequiredTransformThemeValue = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>transformThemeValue
		});
		const _postcss = /*#__PURE__*/ _interopRequireDefault(requirePostcss());
		const _isPlainObject = /*#__PURE__*/ _interopRequireDefault(requireIsPlainObject());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function transformThemeValue(themeSection) {
		    if ([
		        "fontSize",
		        "outline"
		    ].includes(themeSection)) {
		        return (value)=>{
		            if (typeof value === "function") value = value({});
		            if (Array.isArray(value)) value = value[0];
		            return value;
		        };
		    }
		    if (themeSection === "fontFamily") {
		        return (value)=>{
		            if (typeof value === "function") value = value({});
		            let families = Array.isArray(value) && (0, _isPlainObject.default)(value[1]) ? value[0] : value;
		            return Array.isArray(families) ? families.join(", ") : families;
		        };
		    }
		    if ([
		        "boxShadow",
		        "transitionProperty",
		        "transitionDuration",
		        "transitionDelay",
		        "transitionTimingFunction",
		        "backgroundImage",
		        "backgroundSize",
		        "backgroundColor",
		        "cursor",
		        "animation"
		    ].includes(themeSection)) {
		        return (value)=>{
		            if (typeof value === "function") value = value({});
		            if (Array.isArray(value)) value = value.join(", ");
		            return value;
		        };
		    }
		    // For backwards compatibility reasons, before we switched to underscores
		    // instead of commas for arbitrary values.
		    if ([
		        "gridTemplateColumns",
		        "gridTemplateRows",
		        "objectPosition"
		    ].includes(themeSection)) {
		        return (value)=>{
		            if (typeof value === "function") value = value({});
		            if (typeof value === "string") value = _postcss.default.list.comma(value).join(" ");
		            return value;
		        };
		    }
		    return (value, opts = {})=>{
		        if (typeof value === "function") {
		            value = value(opts);
		        }
		        return value;
		    };
		}
} (transformThemeValue));
	return transformThemeValue;
}

var parseObjectStyles = {};

var postcssNestedExports = {};
var postcssNested = {
  get exports(){ return postcssNestedExports; },
  set exports(v){ postcssNestedExports = v; },
};

var hasRequiredPostcssNested;

function requirePostcssNested () {
	if (hasRequiredPostcssNested) return postcssNestedExports;
	hasRequiredPostcssNested = 1;
	const { Rule, AtRule } = requirePostcss();
	let parser = requireDist();

	/**
	 * Run a selector string through postcss-selector-parser
	 */
	function parse(rawSelector, rule) {
	  let nodes;
	  try {
	    parser(parsed => {
	      nodes = parsed;
	    }).processSync(rawSelector);
	  } catch (e) {
	    if (rawSelector.includes(':')) {
	      throw rule ? rule.error('Missed semicolon') : e
	    } else {
	      throw rule ? rule.error(e.message) : e
	    }
	  }
	  return nodes.at(0)
	}

	/**
	 * Replaces the "&" token in a node's selector with the parent selector
	 * similar to what SCSS does.
	 *
	 * Mutates the nodes list
	 */
	function interpolateAmpInSelector(nodes, parent) {
	  let replaced = false;
	  nodes.each(node => {
	    if (node.type === 'nesting') {
	      let clonedParent = parent.clone({});
	      if (node.value !== '&') {
	        node.replaceWith(
	          parse(node.value.replace('&', clonedParent.toString()))
	        );
	      } else {
	        node.replaceWith(clonedParent);
	      }
	      replaced = true;
	    } else if ('nodes' in node && node.nodes) {
	      if (interpolateAmpInSelector(node, parent)) {
	        replaced = true;
	      }
	    }
	  });
	  return replaced
	}

	/**
	 * Combines parent and child selectors, in a SCSS-like way
	 */
	function mergeSelectors(parent, child) {
	  let merged = [];
	  parent.selectors.forEach(sel => {
	    let parentNode = parse(sel, parent);

	    child.selectors.forEach(selector => {
	      if (!selector) {
	        return
	      }
	      let node = parse(selector, child);
	      let replaced = interpolateAmpInSelector(node, parentNode);
	      if (!replaced) {
	        node.prepend(parser.combinator({ value: ' ' }));
	        node.prepend(parentNode.clone({}));
	      }
	      merged.push(node.toString());
	    });
	  });
	  return merged
	}

	/**
	 * Move a child and its preceeding comment(s) to after "after"
	 */
	function breakOut(child, after) {
	  let prev = child.prev();
	  after.after(child);
	  while (prev && prev.type === 'comment') {
	    let nextPrev = prev.prev();
	    after.after(prev);
	    prev = nextPrev;
	  }
	  return child
	}

	function createFnAtruleChilds(bubble) {
	  return function atruleChilds(rule, atrule, bubbling, mergeSels = bubbling) {
	    let children = [];
	    atrule.each(child => {
	      if (child.type === 'rule' && bubbling) {
	        if (mergeSels) {
	          child.selectors = mergeSelectors(rule, child);
	        }
	      } else if (child.type === 'atrule' && child.nodes) {
	        if (bubble[child.name]) {
	          atruleChilds(rule, child, mergeSels);
	        } else if (atrule[rootRuleMergeSel] !== false) {
	          children.push(child);
	        }
	      } else {
	        children.push(child);
	      }
	    });
	    if (bubbling) {
	      if (children.length) {
	        let clone = rule.clone({ nodes: [] });
	        for (let child of children) {
	          clone.append(child);
	        }
	        atrule.prepend(clone);
	      }
	    }
	  }
	}

	function pickDeclarations(selector, declarations, after) {
	  let parent = new Rule({
	    selector,
	    nodes: []
	  });
	  parent.append(declarations);
	  after.after(parent);
	  return parent
	}

	function atruleNames(defaults, custom) {
	  let list = {};
	  for (let name of defaults) {
	    list[name] = true;
	  }
	  if (custom) {
	    for (let name of custom) {
	      list[name.replace(/^@/, '')] = true;
	    }
	  }
	  return list
	}

	function parseRootRuleParams(params) {
	  params = params.trim();
	  let braceBlock = params.match(/^\((.*)\)$/);
	  if (!braceBlock) {
	    return { type: 'basic', selector: params }
	  }
	  let bits = braceBlock[1].match(/^(with(?:out)?):(.+)$/);
	  if (bits) {
	    let allowlist = bits[1] === 'with';
	    let rules = Object.fromEntries(
	      bits[2]
	        .trim()
	        .split(/\s+/)
	        .map(name => [name, true])
	    );
	    if (allowlist && rules.all) {
	      return { type: 'noop' }
	    }
	    let escapes = rule => !!rules[rule];
	    if (rules.all) {
	      escapes = () => true;
	    } else if (allowlist) {
	      escapes = rule => (rule === 'all' ? false : !rules[rule]);
	    }

	    return {
	      type: 'withrules',
	      escapes
	    }
	  }
	  // Unrecognized brace block
	  return { type: 'unknown' }
	}

	function getAncestorRules(leaf) {
	  let lineage = [];
	  let parent = leaf.parent;

	  while (parent && parent instanceof AtRule) {
	    lineage.push(parent);
	    parent = parent.parent;
	  }
	  return lineage
	}

	function unwrapRootRule(rule) {
	  let escapes = rule[rootRuleEscapes];

	  if (!escapes) {
	    rule.after(rule.nodes);
	  } else {
	    let nodes = rule.nodes;

	    let topEscaped;
	    let topEscapedIdx = -1;
	    let breakoutLeaf;
	    let breakoutRoot;
	    let clone;

	    let lineage = getAncestorRules(rule);
	    lineage.forEach((parent, i) => {
	      if (escapes(parent.name)) {
	        topEscaped = parent;
	        topEscapedIdx = i;
	        breakoutRoot = clone;
	      } else {
	        let oldClone = clone;
	        clone = parent.clone({ nodes: [] });
	        oldClone && clone.append(oldClone);
	        breakoutLeaf = breakoutLeaf || clone;
	      }
	    });

	    if (!topEscaped) {
	      rule.after(nodes);
	    } else if (!breakoutRoot) {
	      topEscaped.after(nodes);
	    } else {
	      let leaf = breakoutLeaf;
	      leaf.append(nodes);
	      topEscaped.after(breakoutRoot);
	    }

	    if (rule.next() && topEscaped) {
	      let restRoot;
	      lineage.slice(0, topEscapedIdx + 1).forEach((parent, i, arr) => {
	        let oldRoot = restRoot;
	        restRoot = parent.clone({ nodes: [] });
	        oldRoot && restRoot.append(oldRoot);

	        let nextSibs = [];
	        let _child = arr[i - 1] || rule;
	        let next = _child.next();
	        while (next) {
	          nextSibs.push(next);
	          next = next.next();
	        }
	        restRoot.append(nextSibs);
	      });
	      restRoot && (breakoutRoot || nodes[nodes.length - 1]).after(restRoot);
	    }
	  }

	  rule.remove();
	}

	const rootRuleMergeSel = Symbol('rootRuleMergeSel');
	const rootRuleEscapes = Symbol('rootRuleEscapes');

	function normalizeRootRule(rule) {
	  let { params } = rule;
	  let { type, selector, escapes } = parseRootRuleParams(params);
	  if (type === 'unknown') {
	    throw rule.error(
	      `Unknown @${rule.name} parameter ${JSON.stringify(params)}`
	    )
	  }
	  if (type === 'basic' && selector) {
	    let selectorBlock = new Rule({ selector, nodes: rule.nodes });
	    rule.removeAll();
	    rule.append(selectorBlock);
	  }
	  rule[rootRuleEscapes] = escapes;
	  rule[rootRuleMergeSel] = escapes ? !escapes('all') : type === 'noop';
	}

	const hasRootRule = Symbol('hasRootRule');

	postcssNested.exports = (opts = {}) => {
	  let bubble = atruleNames(['media', 'supports', 'layer'], opts.bubble);
	  let atruleChilds = createFnAtruleChilds(bubble);
	  let unwrap = atruleNames(
	    [
	      'document',
	      'font-face',
	      'keyframes',
	      '-webkit-keyframes',
	      '-moz-keyframes'
	    ],
	    opts.unwrap
	  );
	  let rootRuleName = (opts.rootRuleName || 'at-root').replace(/^@/, '');
	  let preserveEmpty = opts.preserveEmpty;

	  return {
	    postcssPlugin: 'postcss-nested',

	    Once(root) {
	      root.walkAtRules(rootRuleName, node => {
	        normalizeRootRule(node);
	        root[hasRootRule] = true;
	      });
	    },

	    Rule(rule) {
	      let unwrapped = false;
	      let after = rule;
	      let copyDeclarations = false;
	      let declarations = [];

	      rule.each(child => {
	        if (child.type === 'rule') {
	          if (declarations.length) {
	            after = pickDeclarations(rule.selector, declarations, after);
	            declarations = [];
	          }

	          copyDeclarations = true;
	          unwrapped = true;
	          child.selectors = mergeSelectors(rule, child);
	          after = breakOut(child, after);
	        } else if (child.type === 'atrule') {
	          if (declarations.length) {
	            after = pickDeclarations(rule.selector, declarations, after);
	            declarations = [];
	          }
	          if (child.name === rootRuleName) {
	            unwrapped = true;
	            atruleChilds(rule, child, true, child[rootRuleMergeSel]);
	            after = breakOut(child, after);
	          } else if (bubble[child.name]) {
	            copyDeclarations = true;
	            unwrapped = true;
	            atruleChilds(rule, child, true);
	            after = breakOut(child, after);
	          } else if (unwrap[child.name]) {
	            copyDeclarations = true;
	            unwrapped = true;
	            atruleChilds(rule, child, false);
	            after = breakOut(child, after);
	          } else if (copyDeclarations) {
	            declarations.push(child);
	          }
	        } else if (child.type === 'decl' && copyDeclarations) {
	          declarations.push(child);
	        }
	      });

	      if (declarations.length) {
	        after = pickDeclarations(rule.selector, declarations, after);
	      }

	      if (unwrapped && preserveEmpty !== true) {
	        rule.raws.semicolon = true;
	        if (rule.nodes.length === 0) rule.remove();
	      }
	    },

	    RootExit(root) {
	      if (root[hasRootRule]) {
	        root.walkAtRules(rootRuleName, unwrapRootRule);
	        root[hasRootRule] = false;
	      }
	    }
	  }
	};
	postcssNestedExports.postcss = true;
	return postcssNestedExports;
}

var indexEs5;
var hasRequiredIndexEs5;

function requireIndexEs5 () {
	if (hasRequiredIndexEs5) return indexEs5;
	hasRequiredIndexEs5 = 1;

	var pattern = /-(\w|$)/g;

	var callback = function callback(dashChar, char) {
		return char.toUpperCase();
	};

	var camelCaseCSS = function camelCaseCSS(property) {
		property = property.toLowerCase();

		// NOTE :: IE8's "styleFloat" is intentionally not supported
		if (property === "float") {
			return "cssFloat";
		}
		// Microsoft vendor-prefixes are uniquely cased
		else if (property.charCodeAt(0) === 45&& property.charCodeAt(1) === 109&& property.charCodeAt(2) === 115&& property.charCodeAt(3) === 45) {
				return property.substr(1).replace(pattern, callback);
			} else {
				return property.replace(pattern, callback);
			}
	};

	indexEs5 = camelCaseCSS;
	return indexEs5;
}

var objectifier;
var hasRequiredObjectifier;

function requireObjectifier () {
	if (hasRequiredObjectifier) return objectifier;
	hasRequiredObjectifier = 1;
	let camelcase = requireIndexEs5();

	let UNITLESS = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	  fillOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	function atRule(node) {
	  if (typeof node.nodes === 'undefined') {
	    return true
	  } else {
	    return process(node)
	  }
	}

	function process(node) {
	  let name;
	  let result = {};

	  node.each(child => {
	    if (child.type === 'atrule') {
	      name = '@' + child.name;
	      if (child.params) name += ' ' + child.params;
	      if (typeof result[name] === 'undefined') {
	        result[name] = atRule(child);
	      } else if (Array.isArray(result[name])) {
	        result[name].push(atRule(child));
	      } else {
	        result[name] = [result[name], atRule(child)];
	      }
	    } else if (child.type === 'rule') {
	      let body = process(child);
	      if (result[child.selector]) {
	        for (let i in body) {
	          result[child.selector][i] = body[i];
	        }
	      } else {
	        result[child.selector] = body;
	      }
	    } else if (child.type === 'decl') {
	      if (child.prop[0] === '-' && child.prop[1] === '-') {
	        name = child.prop;
	      } else if (child.parent && child.parent.selector === ':export') {
	        name = child.prop;
	      } else {
	        name = camelcase(child.prop);
	      }
	      let value = child.value;
	      if (!isNaN(child.value) && UNITLESS[name]) {
	        value = parseFloat(child.value);
	      }
	      if (child.important) value += ' !important';
	      if (typeof result[name] === 'undefined') {
	        result[name] = value;
	      } else if (Array.isArray(result[name])) {
	        result[name].push(value);
	      } else {
	        result[name] = [result[name], value];
	      }
	    }
	  });
	  return result
	}

	objectifier = process;
	return objectifier;
}

var parser;
var hasRequiredParser;

function requireParser () {
	if (hasRequiredParser) return parser;
	hasRequiredParser = 1;
	let postcss = requirePostcss();

	let IMPORTANT = /\s*!important\s*$/i;

	let UNITLESS = {
	  'box-flex': true,
	  'box-flex-group': true,
	  'column-count': true,
	  'flex': true,
	  'flex-grow': true,
	  'flex-positive': true,
	  'flex-shrink': true,
	  'flex-negative': true,
	  'font-weight': true,
	  'line-clamp': true,
	  'line-height': true,
	  'opacity': true,
	  'order': true,
	  'orphans': true,
	  'tab-size': true,
	  'widows': true,
	  'z-index': true,
	  'zoom': true,
	  'fill-opacity': true,
	  'stroke-dashoffset': true,
	  'stroke-opacity': true,
	  'stroke-width': true
	};

	function dashify(str) {
	  return str
	    .replace(/([A-Z])/g, '-$1')
	    .replace(/^ms-/, '-ms-')
	    .toLowerCase()
	}

	function decl(parent, name, value) {
	  if (value === false || value === null) return

	  if (!name.startsWith('--')) {
	    name = dashify(name);
	  }

	  if (typeof value === 'number') {
	    if (value === 0 || UNITLESS[name]) {
	      value = value.toString();
	    } else {
	      value += 'px';
	    }
	  }

	  if (name === 'css-float') name = 'float';

	  if (IMPORTANT.test(value)) {
	    value = value.replace(IMPORTANT, '');
	    parent.push(postcss.decl({ prop: name, value, important: true }));
	  } else {
	    parent.push(postcss.decl({ prop: name, value }));
	  }
	}

	function atRule(parent, parts, value) {
	  let node = postcss.atRule({ name: parts[1], params: parts[3] || '' });
	  if (typeof value === 'object') {
	    node.nodes = [];
	    parse(value, node);
	  }
	  parent.push(node);
	}

	function parse(obj, parent) {
	  let name, value, node;
	  for (name in obj) {
	    value = obj[name];
	    if (value === null || typeof value === 'undefined') {
	      continue
	    } else if (name[0] === '@') {
	      let parts = name.match(/@(\S+)(\s+([\W\w]*)\s*)?/);
	      if (Array.isArray(value)) {
	        for (let i of value) {
	          atRule(parent, parts, i);
	        }
	      } else {
	        atRule(parent, parts, value);
	      }
	    } else if (Array.isArray(value)) {
	      for (let i of value) {
	        decl(parent, name, i);
	      }
	    } else if (typeof value === 'object') {
	      node = postcss.rule({ selector: name });
	      parse(value, node);
	      parent.push(node);
	    } else {
	      decl(parent, name, value);
	    }
	  }
	}

	parser = function (obj) {
	  let root = postcss.root();
	  parse(obj, root);
	  return root
	};
	return parser;
}

var processResult;
var hasRequiredProcessResult;

function requireProcessResult () {
	if (hasRequiredProcessResult) return processResult;
	hasRequiredProcessResult = 1;
	let objectify = requireObjectifier();

	processResult = function processResult(result) {
	  if (console && console.warn) {
	    result.warnings().forEach(warn => {
	      let source = warn.plugin || 'PostCSS';
	      console.warn(source + ': ' + warn.text);
	    });
	  }
	  return objectify(result.root)
	};
	return processResult;
}

var async$6;
var hasRequiredAsync$6;

function requireAsync$6 () {
	if (hasRequiredAsync$6) return async$6;
	hasRequiredAsync$6 = 1;
	let postcss = requirePostcss();

	let processResult = requireProcessResult();
	let parse = requireParser();

	async$6 = function async(plugins) {
	  let processor = postcss(plugins);
	  return async input => {
	    let result = await processor.process(input, {
	      parser: parse,
	      from: undefined
	    });
	    return processResult(result)
	  }
	};
	return async$6;
}

var sync$6;
var hasRequiredSync$6;

function requireSync$6 () {
	if (hasRequiredSync$6) return sync$6;
	hasRequiredSync$6 = 1;
	let postcss = requirePostcss();

	let processResult = requireProcessResult();
	let parse = requireParser();

	sync$6 = function (plugins) {
	  let processor = postcss(plugins);
	  return input => {
	    let result = processor.process(input, { parser: parse, from: undefined });
	    return processResult(result)
	  }
	};
	return sync$6;
}

var postcssJs;
var hasRequiredPostcssJs;

function requirePostcssJs () {
	if (hasRequiredPostcssJs) return postcssJs;
	hasRequiredPostcssJs = 1;
	let objectify = requireObjectifier();
	let parse = requireParser();
	let async = requireAsync$6();
	let sync = requireSync$6();

	postcssJs = {
	  objectify,
	  parse,
	  async,
	  sync
	};
	return postcssJs;
}

var hasRequiredParseObjectStyles;

function requireParseObjectStyles () {
	if (hasRequiredParseObjectStyles) return parseObjectStyles;
	hasRequiredParseObjectStyles = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>parseObjectStyles
		});
		const _postcss = /*#__PURE__*/ _interopRequireDefault(requirePostcss());
		const _postcssNested = /*#__PURE__*/ _interopRequireDefault(requirePostcssNested());
		const _postcssJs = /*#__PURE__*/ _interopRequireDefault(requirePostcssJs());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function parseObjectStyles(styles) {
		    if (!Array.isArray(styles)) {
		        return parseObjectStyles([
		            styles
		        ]);
		    }
		    return styles.flatMap((style)=>{
		        return (0, _postcss.default)([
		            (0, _postcssNested.default)({
		                bubble: [
		                    "screen"
		                ]
		            })
		        ]).process(style, {
		            parser: _postcssJs.default
		        }).root.nodes;
		    });
		}
} (parseObjectStyles));
	return parseObjectStyles;
}

var prefixSelector = {};

var hasRequiredPrefixSelector;

function requirePrefixSelector () {
	if (hasRequiredPrefixSelector) return prefixSelector;
	hasRequiredPrefixSelector = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, /**
		 * @template {string | import('postcss-selector-parser').Root} T
		 *
		 * Prefix all classes in the selector with the given prefix
		 *
		 * It can take either a string or a selector AST and will return the same type
		 *
		 * @param {string} prefix
		 * @param {T} selector
		 * @param {boolean} prependNegative
		 * @returns {T}
		 */ "default", {
		    enumerable: true,
		    get: ()=>_default
		});
		const _postcssSelectorParser = /*#__PURE__*/ _interopRequireDefault(requireDist());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function _default(prefix, selector, prependNegative = false) {
		    if (prefix === "") {
		        return selector;
		    }
		    let ast = typeof selector === "string" ? (0, _postcssSelectorParser.default)().astSync(selector) : selector;
		    ast.walkClasses((classSelector)=>{
		        let baseClass = classSelector.value;
		        let shouldPlaceNegativeBeforePrefix = prependNegative && baseClass.startsWith("-");
		        classSelector.value = shouldPlaceNegativeBeforePrefix ? `-${prefix}${baseClass.slice(1)}` : `${prefix}${baseClass}`;
		    });
		    return typeof selector === "string" ? ast.toString() : ast;
		}
} (prefixSelector));
	return prefixSelector;
}

var escapeClassName = {};

var hasRequiredEscapeClassName;

function requireEscapeClassName () {
	if (hasRequiredEscapeClassName) return escapeClassName;
	hasRequiredEscapeClassName = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>escapeClassName
		});
		const _postcssSelectorParser = /*#__PURE__*/ _interopRequireDefault(requireDist());
		const _escapeCommas = /*#__PURE__*/ _interopRequireDefault(requireEscapeCommas());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function escapeClassName(className) {
		    var _node_raws;
		    let node = _postcssSelectorParser.default.className();
		    node.value = className;
		    var _node_raws_value;
		    return (0, _escapeCommas.default)((_node_raws_value = node === null || node === void 0 ? void 0 : (_node_raws = node.raws) === null || _node_raws === void 0 ? void 0 : _node_raws.value) !== null && _node_raws_value !== void 0 ? _node_raws_value : node.value);
		}
} (escapeClassName));
	return escapeClassName;
}

var nameClass = {};

var hasRequiredNameClass;

function requireNameClass () {
	if (hasRequiredNameClass) return nameClass;
	hasRequiredNameClass = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    asClass: ()=>asClass,
		    default: ()=>nameClass,
		    formatClass: ()=>formatClass
		});
		const _escapeClassName = /*#__PURE__*/ _interopRequireDefault(requireEscapeClassName());
		const _escapeCommas = /*#__PURE__*/ _interopRequireDefault(requireEscapeCommas());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function asClass(name) {
		    return (0, _escapeCommas.default)(`.${(0, _escapeClassName.default)(name)}`);
		}
		function nameClass(classPrefix, key) {
		    return asClass(formatClass(classPrefix, key));
		}
		function formatClass(classPrefix, key) {
		    if (key === "DEFAULT") {
		        return classPrefix;
		    }
		    if (key === "-" || key === "-DEFAULT") {
		        return `-${classPrefix}`;
		    }
		    if (key.startsWith("-")) {
		        return `-${classPrefix}${key}`;
		    }
		    if (key.startsWith("/")) {
		        return `${classPrefix}${key}`;
		    }
		    return `${classPrefix}-${key}`;
		}
} (nameClass));
	return nameClass;
}

var corePlugins = {};

var createUtilityPlugin = {};

var hasRequiredCreateUtilityPlugin;

function requireCreateUtilityPlugin () {
	if (hasRequiredCreateUtilityPlugin) return createUtilityPlugin;
	hasRequiredCreateUtilityPlugin = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>createUtilityPlugin
		});
		const _transformThemeValue = /*#__PURE__*/ _interopRequireDefault(requireTransformThemeValue());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function createUtilityPlugin(themeKey, utilityVariations = [
		    [
		        themeKey,
		        [
		            themeKey
		        ]
		    ]
		], { filterDefault =false , ...options } = {}) {
		    let transformValue = (0, _transformThemeValue.default)(themeKey);
		    return function({ matchUtilities , theme  }) {
		        for (let utilityVariation of utilityVariations){
		            let group = Array.isArray(utilityVariation[0]) ? utilityVariation : [
		                utilityVariation
		            ];
		            var _theme;
		            matchUtilities(group.reduce((obj, [classPrefix, properties])=>{
		                return Object.assign(obj, {
		                    [classPrefix]: (value)=>{
		                        return properties.reduce((obj, name)=>{
		                            if (Array.isArray(name)) {
		                                return Object.assign(obj, {
		                                    [name[0]]: name[1]
		                                });
		                            }
		                            return Object.assign(obj, {
		                                [name]: transformValue(value)
		                            });
		                        }, {});
		                    }
		                });
		            }, {}), {
		                ...options,
		                values: filterDefault ? Object.fromEntries(Object.entries((_theme = theme(themeKey)) !== null && _theme !== void 0 ? _theme : {}).filter(([modifier])=>modifier !== "DEFAULT")) : theme(themeKey)
		            });
		        }
		    };
		}
} (createUtilityPlugin));
	return createUtilityPlugin;
}

var buildMediaQuery = {};

var hasRequiredBuildMediaQuery;

function requireBuildMediaQuery () {
	if (hasRequiredBuildMediaQuery) return buildMediaQuery;
	hasRequiredBuildMediaQuery = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>buildMediaQuery
		});
		function buildMediaQuery(screens) {
		    screens = Array.isArray(screens) ? screens : [
		        screens
		    ];
		    return screens.map((screen)=>{
		        let values = screen.values.map((screen)=>{
		            if (screen.raw !== undefined) {
		                return screen.raw;
		            }
		            return [
		                screen.min && `(min-width: ${screen.min})`,
		                screen.max && `(max-width: ${screen.max})`
		            ].filter(Boolean).join(" and ");
		        });
		        return screen.not ? `not all and ${values}` : values;
		    }).join(", ");
		}
} (buildMediaQuery));
	return buildMediaQuery;
}

var parseAnimationValue = {};

var hasRequiredParseAnimationValue;

function requireParseAnimationValue () {
	if (hasRequiredParseAnimationValue) return parseAnimationValue;
	hasRequiredParseAnimationValue = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>parseAnimationValue
		});
		const DIRECTIONS = new Set([
		    "normal",
		    "reverse",
		    "alternate",
		    "alternate-reverse"
		]);
		const PLAY_STATES = new Set([
		    "running",
		    "paused"
		]);
		const FILL_MODES = new Set([
		    "none",
		    "forwards",
		    "backwards",
		    "both"
		]);
		const ITERATION_COUNTS = new Set([
		    "infinite"
		]);
		const TIMINGS = new Set([
		    "linear",
		    "ease",
		    "ease-in",
		    "ease-out",
		    "ease-in-out",
		    "step-start",
		    "step-end"
		]);
		const TIMING_FNS = [
		    "cubic-bezier",
		    "steps"
		];
		const COMMA = /\,(?![^(]*\))/g // Comma separator that is not located between brackets. E.g.: `cubiz-bezier(a, b, c)` these don't count.
		;
		const SPACE = /\ +(?![^(]*\))/g // Similar to the one above, but with spaces instead.
		;
		const TIME = /^(-?[\d.]+m?s)$/;
		const DIGIT = /^(\d+)$/;
		function parseAnimationValue(input) {
		    let animations = input.split(COMMA);
		    return animations.map((animation)=>{
		        let value = animation.trim();
		        let result = {
		            value
		        };
		        let parts = value.split(SPACE);
		        let seen = new Set();
		        for (let part of parts){
		            if (!seen.has("DIRECTIONS") && DIRECTIONS.has(part)) {
		                result.direction = part;
		                seen.add("DIRECTIONS");
		            } else if (!seen.has("PLAY_STATES") && PLAY_STATES.has(part)) {
		                result.playState = part;
		                seen.add("PLAY_STATES");
		            } else if (!seen.has("FILL_MODES") && FILL_MODES.has(part)) {
		                result.fillMode = part;
		                seen.add("FILL_MODES");
		            } else if (!seen.has("ITERATION_COUNTS") && (ITERATION_COUNTS.has(part) || DIGIT.test(part))) {
		                result.iterationCount = part;
		                seen.add("ITERATION_COUNTS");
		            } else if (!seen.has("TIMING_FUNCTION") && TIMINGS.has(part)) {
		                result.timingFunction = part;
		                seen.add("TIMING_FUNCTION");
		            } else if (!seen.has("TIMING_FUNCTION") && TIMING_FNS.some((f)=>part.startsWith(`${f}(`))) {
		                result.timingFunction = part;
		                seen.add("TIMING_FUNCTION");
		            } else if (!seen.has("DURATION") && TIME.test(part)) {
		                result.duration = part;
		                seen.add("DURATION");
		            } else if (!seen.has("DELAY") && TIME.test(part)) {
		                result.delay = part;
		                seen.add("DELAY");
		            } else if (!seen.has("NAME")) {
		                result.name = part;
		                seen.add("NAME");
		            } else {
		                if (!result.unknown) result.unknown = [];
		                result.unknown.push(part);
		            }
		        }
		        return result;
		    });
		}
} (parseAnimationValue));
	return parseAnimationValue;
}

var flattenColorPalette = {};

var hasRequiredFlattenColorPalette;

function requireFlattenColorPalette () {
	if (hasRequiredFlattenColorPalette) return flattenColorPalette;
	hasRequiredFlattenColorPalette = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>_default
		});
		const flattenColorPalette = (colors)=>Object.assign({}, ...Object.entries(colors !== null && colors !== void 0 ? colors : {}).flatMap(([color, values])=>typeof values == "object" ? Object.entries(flattenColorPalette(values)).map(([number, hex])=>({
		                [color + (number === "DEFAULT" ? "" : `-${number}`)]: hex
		            })) : [
		            {
		                [`${color}`]: values
		            }
		        ]));
		const _default = flattenColorPalette;
} (flattenColorPalette));
	return flattenColorPalette;
}

var normalizeScreens = {};

/**
 * @typedef {object} ScreenValue
 * @property {number|undefined} min
 * @property {number|undefined} max
 * @property {string|undefined} raw
 */

var hasRequiredNormalizeScreens;

function requireNormalizeScreens () {
	if (hasRequiredNormalizeScreens) return normalizeScreens;
	hasRequiredNormalizeScreens = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    normalizeScreens: ()=>normalizeScreens,
		    isScreenSortable: ()=>isScreenSortable,
		    compareScreens: ()=>compareScreens,
		    toScreen: ()=>toScreen
		});
		function normalizeScreens(screens, root = true) {
		    if (Array.isArray(screens)) {
		        return screens.map((screen)=>{
		            if (root && Array.isArray(screen)) {
		                throw new Error("The tuple syntax is not supported for `screens`.");
		            }
		            if (typeof screen === "string") {
		                return {
		                    name: screen.toString(),
		                    not: false,
		                    values: [
		                        {
		                            min: screen,
		                            max: undefined
		                        }
		                    ]
		                };
		            }
		            let [name, options] = screen;
		            name = name.toString();
		            if (typeof options === "string") {
		                return {
		                    name,
		                    not: false,
		                    values: [
		                        {
		                            min: options,
		                            max: undefined
		                        }
		                    ]
		                };
		            }
		            if (Array.isArray(options)) {
		                return {
		                    name,
		                    not: false,
		                    values: options.map((option)=>resolveValue(option))
		                };
		            }
		            return {
		                name,
		                not: false,
		                values: [
		                    resolveValue(options)
		                ]
		            };
		        });
		    }
		    return normalizeScreens(Object.entries(screens !== null && screens !== void 0 ? screens : {}), false);
		}
		function isScreenSortable(screen) {
		    if (screen.values.length !== 1) {
		        return {
		            result: false,
		            reason: "multiple-values"
		        };
		    } else if (screen.values[0].raw !== undefined) {
		        return {
		            result: false,
		            reason: "raw-values"
		        };
		    } else if (screen.values[0].min !== undefined && screen.values[0].max !== undefined) {
		        return {
		            result: false,
		            reason: "min-and-max"
		        };
		    }
		    return {
		        result: true,
		        reason: null
		    };
		}
		function compareScreens(type, a, z) {
		    let aScreen = toScreen(a, type);
		    let zScreen = toScreen(z, type);
		    let aSorting = isScreenSortable(aScreen);
		    let bSorting = isScreenSortable(zScreen);
		    // These cases should never happen and indicate a bug in Tailwind CSS itself
		    if (aSorting.reason === "multiple-values" || bSorting.reason === "multiple-values") {
		        throw new Error("Attempted to sort a screen with multiple values. This should never happen. Please open a bug report.");
		    } else if (aSorting.reason === "raw-values" || bSorting.reason === "raw-values") {
		        throw new Error("Attempted to sort a screen with raw values. This should never happen. Please open a bug report.");
		    } else if (aSorting.reason === "min-and-max" || bSorting.reason === "min-and-max") {
		        throw new Error("Attempted to sort a screen with both min and max values. This should never happen. Please open a bug report.");
		    }
		    // Let the sorting begin
		    let { min: aMin , max: aMax  } = aScreen.values[0];
		    let { min: zMin , max: zMax  } = zScreen.values[0];
		    // Negating screens flip their behavior. Basically `not min-width` is `max-width`
		    if (a.not) [aMin, aMax] = [
		        aMax,
		        aMin
		    ];
		    if (z.not) [zMin, zMax] = [
		        zMax,
		        zMin
		    ];
		    aMin = aMin === undefined ? aMin : parseFloat(aMin);
		    aMax = aMax === undefined ? aMax : parseFloat(aMax);
		    zMin = zMin === undefined ? zMin : parseFloat(zMin);
		    zMax = zMax === undefined ? zMax : parseFloat(zMax);
		    let [aValue, zValue] = type === "min" ? [
		        aMin,
		        zMin
		    ] : [
		        zMax,
		        aMax
		    ];
		    return aValue - zValue;
		}
		function toScreen(value, type) {
		    if (typeof value === "object") {
		        return value;
		    }
		    return {
		        name: "arbitrary-screen",
		        values: [
		            {
		                [type]: value
		            }
		        ]
		    };
		}
		function resolveValue({ "min-width": _minWidth , min =_minWidth , max , raw  } = {}) {
		    return {
		        min,
		        max,
		        raw
		    };
		}
} (normalizeScreens));
	return normalizeScreens;
}

var removeAlphaVariables = {};

/**
 * This function removes any uses of CSS variables used as an alpha channel
 *
 * This is required for selectors like `:visited` which do not allow
 * changes in opacity or external control using CSS variables.
 *
 * @param {import('postcss').Container} container
 * @param {string[]} toRemove
 */

var hasRequiredRemoveAlphaVariables;

function requireRemoveAlphaVariables () {
	if (hasRequiredRemoveAlphaVariables) return removeAlphaVariables;
	hasRequiredRemoveAlphaVariables = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "removeAlphaVariables", {
		    enumerable: true,
		    get: ()=>removeAlphaVariables
		});
		function removeAlphaVariables(container, toRemove) {
		    container.walkDecls((decl)=>{
		        if (toRemove.includes(decl.prop)) {
		            decl.remove();
		            return;
		        }
		        for (let varName of toRemove){
		            if (decl.value.includes(`/ var(${varName})`)) {
		                decl.value = decl.value.replace(`/ var(${varName})`, "");
		            }
		        }
		    });
		}
} (removeAlphaVariables));
	return removeAlphaVariables;
}

var hasRequiredCorePlugins;

function requireCorePlugins () {
	if (hasRequiredCorePlugins) return corePlugins;
	hasRequiredCorePlugins = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    variantPlugins: ()=>variantPlugins,
		    corePlugins: ()=>corePlugins
		});
		const _fs = /*#__PURE__*/ _interopRequireDefault(require$$3);
		const _path = /*#__PURE__*/ _interopRequireWildcard(require$$3);
		const _postcss = /*#__PURE__*/ _interopRequireDefault(requirePostcss());
		const _sharedState = requireSharedState();
		const _createUtilityPlugin = /*#__PURE__*/ _interopRequireDefault(requireCreateUtilityPlugin());
		const _buildMediaQuery = /*#__PURE__*/ _interopRequireDefault(requireBuildMediaQuery());
		const _escapeClassName = /*#__PURE__*/ _interopRequireDefault(requireEscapeClassName());
		const _parseAnimationValue = /*#__PURE__*/ _interopRequireDefault(requireParseAnimationValue());
		const _flattenColorPalette = /*#__PURE__*/ _interopRequireDefault(requireFlattenColorPalette());
		const _withAlphaVariable = /*#__PURE__*/ _interopRequireWildcard(requireWithAlphaVariable());
		const _toColorValue = /*#__PURE__*/ _interopRequireDefault(requireToColorValue());
		const _isPlainObject = /*#__PURE__*/ _interopRequireDefault(requireIsPlainObject());
		const _transformThemeValue = /*#__PURE__*/ _interopRequireDefault(requireTransformThemeValue());
		const _packageJson = require$$7;
		const _log = /*#__PURE__*/ _interopRequireDefault(requireLog());
		const _normalizeScreens = requireNormalizeScreens();
		const _parseBoxShadowValue = requireParseBoxShadowValue();
		const _removeAlphaVariables = requireRemoveAlphaVariables();
		const _featureFlags = requireFeatureFlags();
		const _dataTypes = requireDataTypes();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function _getRequireWildcardCache(nodeInterop) {
		    if (typeof WeakMap !== "function") return null;
		    var cacheBabelInterop = new WeakMap();
		    var cacheNodeInterop = new WeakMap();
		    return (_getRequireWildcardCache = function(nodeInterop) {
		        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
		    })(nodeInterop);
		}
		function _interopRequireWildcard(obj, nodeInterop) {
		    if (!nodeInterop && obj && obj.__esModule) {
		        return obj;
		    }
		    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
		        return {
		            default: obj
		        };
		    }
		    var cache = _getRequireWildcardCache(nodeInterop);
		    if (cache && cache.has(obj)) {
		        return cache.get(obj);
		    }
		    var newObj = {};
		    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		    for(var key in obj){
		        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
		            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
		            if (desc && (desc.get || desc.set)) {
		                Object.defineProperty(newObj, key, desc);
		            } else {
		                newObj[key] = obj[key];
		            }
		        }
		    }
		    newObj.default = obj;
		    if (cache) {
		        cache.set(obj, newObj);
		    }
		    return newObj;
		}
		let variantPlugins = {
		    pseudoElementVariants: ({ addVariant  })=>{
		        addVariant("first-letter", "&::first-letter");
		        addVariant("first-line", "&::first-line");
		        addVariant("marker", [
		            ({ container  })=>{
		                (0, _removeAlphaVariables.removeAlphaVariables)(container, [
		                    "--tw-text-opacity"
		                ]);
		                return "& *::marker";
		            },
		            ({ container  })=>{
		                (0, _removeAlphaVariables.removeAlphaVariables)(container, [
		                    "--tw-text-opacity"
		                ]);
		                return "&::marker";
		            }
		        ]);
		        addVariant("selection", [
		            "& *::selection",
		            "&::selection"
		        ]);
		        addVariant("file", "&::file-selector-button");
		        addVariant("placeholder", "&::placeholder");
		        addVariant("backdrop", "&::backdrop");
		        addVariant("before", ({ container  })=>{
		            container.walkRules((rule)=>{
		                let foundContent = false;
		                rule.walkDecls("content", ()=>{
		                    foundContent = true;
		                });
		                if (!foundContent) {
		                    rule.prepend(_postcss.default.decl({
		                        prop: "content",
		                        value: "var(--tw-content)"
		                    }));
		                }
		            });
		            return "&::before";
		        });
		        addVariant("after", ({ container  })=>{
		            container.walkRules((rule)=>{
		                let foundContent = false;
		                rule.walkDecls("content", ()=>{
		                    foundContent = true;
		                });
		                if (!foundContent) {
		                    rule.prepend(_postcss.default.decl({
		                        prop: "content",
		                        value: "var(--tw-content)"
		                    }));
		                }
		            });
		            return "&::after";
		        });
		    },
		    pseudoClassVariants: ({ addVariant , matchVariant , config  })=>{
		        let pseudoVariants = [
		            // Positional
		            [
		                "first",
		                "&:first-child"
		            ],
		            [
		                "last",
		                "&:last-child"
		            ],
		            [
		                "only",
		                "&:only-child"
		            ],
		            [
		                "odd",
		                "&:nth-child(odd)"
		            ],
		            [
		                "even",
		                "&:nth-child(even)"
		            ],
		            "first-of-type",
		            "last-of-type",
		            "only-of-type",
		            // State
		            [
		                "visited",
		                ({ container  })=>{
		                    (0, _removeAlphaVariables.removeAlphaVariables)(container, [
		                        "--tw-text-opacity",
		                        "--tw-border-opacity",
		                        "--tw-bg-opacity"
		                    ]);
		                    return "&:visited";
		                }
		            ],
		            "target",
		            [
		                "open",
		                "&[open]"
		            ],
		            // Forms
		            "default",
		            "checked",
		            "indeterminate",
		            "placeholder-shown",
		            "autofill",
		            "optional",
		            "required",
		            "valid",
		            "invalid",
		            "in-range",
		            "out-of-range",
		            "read-only",
		            // Content
		            "empty",
		            // Interactive
		            "focus-within",
		            [
		                "hover",
		                !(0, _featureFlags.flagEnabled)(config(), "hoverOnlyWhenSupported") ? "&:hover" : "@media (hover: hover) and (pointer: fine) { &:hover }"
		            ],
		            "focus",
		            "focus-visible",
		            "active",
		            "enabled",
		            "disabled"
		        ].map((variant)=>Array.isArray(variant) ? variant : [
		                variant,
		                `&:${variant}`
		            ]);
		        for (let [variantName, state] of pseudoVariants){
		            addVariant(variantName, (ctx)=>{
		                let result = typeof state === "function" ? state(ctx) : state;
		                return result;
		            });
		        }
		        let variants = {
		            group: (_, { modifier  })=>modifier ? [
		                    `:merge(.group\\/${(0, _escapeClassName.default)(modifier)})`,
		                    " &"
		                ] : [
		                    `:merge(.group)`,
		                    " &"
		                ],
		            peer: (_, { modifier  })=>modifier ? [
		                    `:merge(.peer\\/${(0, _escapeClassName.default)(modifier)})`,
		                    " ~ &"
		                ] : [
		                    `:merge(.peer)`,
		                    " ~ &"
		                ]
		        };
		        for (let [name, fn] of Object.entries(variants)){
		            matchVariant(name, (value = "", extra)=>{
		                let result = (0, _dataTypes.normalize)(typeof value === "function" ? value(extra) : value);
		                if (!result.includes("&")) result = "&" + result;
		                let [a, b] = fn("", extra);
		                let start = null;
		                let end = null;
		                let quotes = 0;
		                for(let i = 0; i < result.length; ++i){
		                    let c = result[i];
		                    if (c === "&") {
		                        start = i;
		                    } else if (c === "'" || c === '"') {
		                        quotes += 1;
		                    } else if (start !== null && c === " " && !quotes) {
		                        end = i;
		                    }
		                }
		                if (start !== null && end === null) {
		                    end = result.length;
		                }
		                // Basically this but can handle quotes:
		                // result.replace(/&(\S+)?/g, (_, pseudo = '') => a + pseudo + b)
		                return result.slice(0, start) + a + result.slice(start + 1, end) + b + result.slice(end);
		            }, {
		                values: Object.fromEntries(pseudoVariants)
		            });
		        }
		    },
		    directionVariants: ({ addVariant  })=>{
		        addVariant("ltr", ':is([dir="ltr"] &)');
		        addVariant("rtl", ':is([dir="rtl"] &)');
		    },
		    reducedMotionVariants: ({ addVariant  })=>{
		        addVariant("motion-safe", "@media (prefers-reduced-motion: no-preference)");
		        addVariant("motion-reduce", "@media (prefers-reduced-motion: reduce)");
		    },
		    darkVariants: ({ config , addVariant  })=>{
		        let [mode, className = ".dark"] = [].concat(config("darkMode", "media"));
		        if (mode === false) {
		            mode = "media";
		            _log.default.warn("darkmode-false", [
		                "The `darkMode` option in your Tailwind CSS configuration is set to `false`, which now behaves the same as `media`.",
		                "Change `darkMode` to `media` or remove it entirely.",
		                "https://tailwindcss.com/docs/upgrade-guide#remove-dark-mode-configuration"
		            ]);
		        }
		        if (mode === "class") {
		            addVariant("dark", `:is(${className} &)`);
		        } else if (mode === "media") {
		            addVariant("dark", "@media (prefers-color-scheme: dark)");
		        }
		    },
		    printVariant: ({ addVariant  })=>{
		        addVariant("print", "@media print");
		    },
		    screenVariants: ({ theme , addVariant , matchVariant  })=>{
		        var _theme;
		        let rawScreens = (_theme = theme("screens")) !== null && _theme !== void 0 ? _theme : {};
		        let areSimpleScreens = Object.values(rawScreens).every((v)=>typeof v === "string");
		        let screens = (0, _normalizeScreens.normalizeScreens)(theme("screens"));
		        /** @type {Set<string>} */ let unitCache = new Set([]);
		        /** @param {string} value */ function units(value) {
		            var _value_match;
		            var _value_match_;
		            return (_value_match_ = (_value_match = value.match(/(\D+)$/)) === null || _value_match === void 0 ? void 0 : _value_match[1]) !== null && _value_match_ !== void 0 ? _value_match_ : "(none)";
		        }
		        /** @param {string} value */ function recordUnits(value) {
		            if (value !== undefined) {
		                unitCache.add(units(value));
		            }
		        }
		        /** @param {string} value */ function canUseUnits(value) {
		            recordUnits(value);
		            // If the cache was empty it'll become 1 because we've just added the current unit
		            // If the cache was not empty and the units are the same the size doesn't change
		            // Otherwise, if the units are different from what is already known the size will always be > 1
		            return unitCache.size === 1;
		        }
		        for (const screen of screens){
		            for (const value of screen.values){
		                recordUnits(value.min);
		                recordUnits(value.max);
		            }
		        }
		        let screensUseConsistentUnits = unitCache.size <= 1;
		        /**
		     * @typedef {import('./util/normalizeScreens').Screen} Screen
		     */ /**
		     * @param {'min' | 'max'} type
		     * @returns {Record<string, Screen>}
		     */ function buildScreenValues(type) {
		            return Object.fromEntries(screens.filter((screen)=>(0, _normalizeScreens.isScreenSortable)(screen).result).map((screen)=>{
		                let { min , max  } = screen.values[0];
		                if (type === "min" && min !== undefined) {
		                    return screen;
		                } else if (type === "min" && max !== undefined) {
		                    return {
		                        ...screen,
		                        not: !screen.not
		                    };
		                } else if (type === "max" && max !== undefined) {
		                    return screen;
		                } else if (type === "max" && min !== undefined) {
		                    return {
		                        ...screen,
		                        not: !screen.not
		                    };
		                }
		            }).map((screen)=>[
		                    screen.name,
		                    screen
		                ]));
		        }
		        /**
		     * @param {'min' | 'max'} type
		     * @returns {(a: { value: string | Screen }, z: { value: string | Screen }) => number}
		     */ function buildSort(type) {
		            return (a, z)=>(0, _normalizeScreens.compareScreens)(type, a.value, z.value);
		        }
		        let maxSort = buildSort("max");
		        let minSort = buildSort("min");
		        /** @param {'min'|'max'} type */ function buildScreenVariant(type) {
		            return (value)=>{
		                if (!areSimpleScreens) {
		                    _log.default.warn("complex-screen-config", [
		                        "The `min-*` and `max-*` variants are not supported with a `screens` configuration containing objects."
		                    ]);
		                    return [];
		                } else if (!screensUseConsistentUnits) {
		                    _log.default.warn("mixed-screen-units", [
		                        "The `min-*` and `max-*` variants are not supported with a `screens` configuration containing mixed units."
		                    ]);
		                    return [];
		                } else if (typeof value === "string" && !canUseUnits(value)) {
		                    _log.default.warn("minmax-have-mixed-units", [
		                        "The `min-*` and `max-*` variants are not supported with a `screens` configuration containing mixed units."
		                    ]);
		                    return [];
		                }
		                return [
		                    `@media ${(0, _buildMediaQuery.default)((0, _normalizeScreens.toScreen)(value, type))}`
		                ];
		            };
		        }
		        matchVariant("max", buildScreenVariant("max"), {
		            sort: maxSort,
		            values: areSimpleScreens ? buildScreenValues("max") : {}
		        });
		        // screens and min-* are sorted together when they can be
		        let id = "min-screens";
		        for (let screen1 of screens){
		            addVariant(screen1.name, `@media ${(0, _buildMediaQuery.default)(screen1)}`, {
		                id,
		                sort: areSimpleScreens && screensUseConsistentUnits ? minSort : undefined,
		                value: screen1
		            });
		        }
		        matchVariant("min", buildScreenVariant("min"), {
		            id,
		            sort: minSort
		        });
		    },
		    supportsVariants: ({ matchVariant , theme  })=>{
		        var _theme;
		        matchVariant("supports", (value = "")=>{
		            let check = (0, _dataTypes.normalize)(value);
		            let isRaw = /^\w*\s*\(/.test(check);
		            // Chrome has a bug where `(condtion1)or(condition2)` is not valid
		            // But `(condition1) or (condition2)` is supported.
		            check = isRaw ? check.replace(/\b(and|or|not)\b/g, " $1 ") : check;
		            if (isRaw) {
		                return `@supports ${check}`;
		            }
		            if (!check.includes(":")) {
		                check = `${check}: var(--tw)`;
		            }
		            if (!(check.startsWith("(") && check.endsWith(")"))) {
		                check = `(${check})`;
		            }
		            return `@supports ${check}`;
		        }, {
		            values: (_theme = theme("supports")) !== null && _theme !== void 0 ? _theme : {}
		        });
		    },
		    ariaVariants: ({ matchVariant , theme  })=>{
		        var _theme;
		        matchVariant("aria", (value)=>`&[aria-${(0, _dataTypes.normalize)(value)}]`, {
		            values: (_theme = theme("aria")) !== null && _theme !== void 0 ? _theme : {}
		        });
		        var _theme1;
		        matchVariant("group-aria", (value, { modifier  })=>modifier ? `:merge(.group\\/${modifier})[aria-${(0, _dataTypes.normalize)(value)}] &` : `:merge(.group)[aria-${(0, _dataTypes.normalize)(value)}] &`, {
		            values: (_theme1 = theme("aria")) !== null && _theme1 !== void 0 ? _theme1 : {}
		        });
		        var _theme2;
		        matchVariant("peer-aria", (value, { modifier  })=>modifier ? `:merge(.peer\\/${modifier})[aria-${(0, _dataTypes.normalize)(value)}] ~ &` : `:merge(.peer)[aria-${(0, _dataTypes.normalize)(value)}] ~ &`, {
		            values: (_theme2 = theme("aria")) !== null && _theme2 !== void 0 ? _theme2 : {}
		        });
		    },
		    dataVariants: ({ matchVariant , theme  })=>{
		        var _theme;
		        matchVariant("data", (value)=>`&[data-${(0, _dataTypes.normalize)(value)}]`, {
		            values: (_theme = theme("data")) !== null && _theme !== void 0 ? _theme : {}
		        });
		        var _theme1;
		        matchVariant("group-data", (value, { modifier  })=>modifier ? `:merge(.group\\/${modifier})[data-${(0, _dataTypes.normalize)(value)}] &` : `:merge(.group)[data-${(0, _dataTypes.normalize)(value)}] &`, {
		            values: (_theme1 = theme("data")) !== null && _theme1 !== void 0 ? _theme1 : {}
		        });
		        var _theme2;
		        matchVariant("peer-data", (value, { modifier  })=>modifier ? `:merge(.peer\\/${modifier})[data-${(0, _dataTypes.normalize)(value)}] ~ &` : `:merge(.peer)[data-${(0, _dataTypes.normalize)(value)}] ~ &`, {
		            values: (_theme2 = theme("data")) !== null && _theme2 !== void 0 ? _theme2 : {}
		        });
		    },
		    orientationVariants: ({ addVariant  })=>{
		        addVariant("portrait", "@media (orientation: portrait)");
		        addVariant("landscape", "@media (orientation: landscape)");
		    },
		    prefersContrastVariants: ({ addVariant  })=>{
		        addVariant("contrast-more", "@media (prefers-contrast: more)");
		        addVariant("contrast-less", "@media (prefers-contrast: less)");
		    }
		};
		let cssTransformValue = [
		    "translate(var(--tw-translate-x), var(--tw-translate-y))",
		    "rotate(var(--tw-rotate))",
		    "skewX(var(--tw-skew-x))",
		    "skewY(var(--tw-skew-y))",
		    "scaleX(var(--tw-scale-x))",
		    "scaleY(var(--tw-scale-y))"
		].join(" ");
		let cssFilterValue = [
		    "var(--tw-blur)",
		    "var(--tw-brightness)",
		    "var(--tw-contrast)",
		    "var(--tw-grayscale)",
		    "var(--tw-hue-rotate)",
		    "var(--tw-invert)",
		    "var(--tw-saturate)",
		    "var(--tw-sepia)",
		    "var(--tw-drop-shadow)"
		].join(" ");
		let cssBackdropFilterValue = [
		    "var(--tw-backdrop-blur)",
		    "var(--tw-backdrop-brightness)",
		    "var(--tw-backdrop-contrast)",
		    "var(--tw-backdrop-grayscale)",
		    "var(--tw-backdrop-hue-rotate)",
		    "var(--tw-backdrop-invert)",
		    "var(--tw-backdrop-opacity)",
		    "var(--tw-backdrop-saturate)",
		    "var(--tw-backdrop-sepia)"
		].join(" ");
		let corePlugins = {
		    preflight: ({ addBase  })=>{
		        let preflightStyles = _postcss.default.parse(_fs.default.readFileSync(_path.join(__dirname, "./css/preflight.css"), "utf8"));
		        addBase([
		            _postcss.default.comment({
		                text: `! tailwindcss v${_packageJson.version} | MIT License | https://tailwindcss.com`
		            }),
		            ...preflightStyles.nodes
		        ]);
		    },
		    container: (()=>{
		        function extractMinWidths(breakpoints = []) {
		            return breakpoints.flatMap((breakpoint)=>breakpoint.values.map((breakpoint)=>breakpoint.min)).filter((v)=>v !== undefined);
		        }
		        function mapMinWidthsToPadding(minWidths, screens, paddings) {
		            if (typeof paddings === "undefined") {
		                return [];
		            }
		            if (!(typeof paddings === "object" && paddings !== null)) {
		                return [
		                    {
		                        screen: "DEFAULT",
		                        minWidth: 0,
		                        padding: paddings
		                    }
		                ];
		            }
		            let mapping = [];
		            if (paddings.DEFAULT) {
		                mapping.push({
		                    screen: "DEFAULT",
		                    minWidth: 0,
		                    padding: paddings.DEFAULT
		                });
		            }
		            for (let minWidth of minWidths){
		                for (let screen of screens){
		                    for (let { min  } of screen.values){
		                        if (min === minWidth) {
		                            mapping.push({
		                                minWidth,
		                                padding: paddings[screen.name]
		                            });
		                        }
		                    }
		                }
		            }
		            return mapping;
		        }
		        return function({ addComponents , theme  }) {
		            let screens = (0, _normalizeScreens.normalizeScreens)(theme("container.screens", theme("screens")));
		            let minWidths = extractMinWidths(screens);
		            let paddings = mapMinWidthsToPadding(minWidths, screens, theme("container.padding"));
		            let generatePaddingFor = (minWidth)=>{
		                let paddingConfig = paddings.find((padding)=>padding.minWidth === minWidth);
		                if (!paddingConfig) {
		                    return {};
		                }
		                return {
		                    paddingRight: paddingConfig.padding,
		                    paddingLeft: paddingConfig.padding
		                };
		            };
		            let atRules = Array.from(new Set(minWidths.slice().sort((a, z)=>parseInt(a) - parseInt(z)))).map((minWidth)=>({
		                    [`@media (min-width: ${minWidth})`]: {
		                        ".container": {
		                            "max-width": minWidth,
		                            ...generatePaddingFor(minWidth)
		                        }
		                    }
		                }));
		            addComponents([
		                {
		                    ".container": Object.assign({
		                        width: "100%"
		                    }, theme("container.center", false) ? {
		                        marginRight: "auto",
		                        marginLeft: "auto"
		                    } : {}, generatePaddingFor(0))
		                },
		                ...atRules
		            ]);
		        };
		    })(),
		    accessibility: ({ addUtilities  })=>{
		        addUtilities({
		            ".sr-only": {
		                position: "absolute",
		                width: "1px",
		                height: "1px",
		                padding: "0",
		                margin: "-1px",
		                overflow: "hidden",
		                clip: "rect(0, 0, 0, 0)",
		                whiteSpace: "nowrap",
		                borderWidth: "0"
		            },
		            ".not-sr-only": {
		                position: "static",
		                width: "auto",
		                height: "auto",
		                padding: "0",
		                margin: "0",
		                overflow: "visible",
		                clip: "auto",
		                whiteSpace: "normal"
		            }
		        });
		    },
		    pointerEvents: ({ addUtilities  })=>{
		        addUtilities({
		            ".pointer-events-none": {
		                "pointer-events": "none"
		            },
		            ".pointer-events-auto": {
		                "pointer-events": "auto"
		            }
		        });
		    },
		    visibility: ({ addUtilities  })=>{
		        addUtilities({
		            ".visible": {
		                visibility: "visible"
		            },
		            ".invisible": {
		                visibility: "hidden"
		            },
		            ".collapse": {
		                visibility: "collapse"
		            }
		        });
		    },
		    position: ({ addUtilities  })=>{
		        addUtilities({
		            ".static": {
		                position: "static"
		            },
		            ".fixed": {
		                position: "fixed"
		            },
		            ".absolute": {
		                position: "absolute"
		            },
		            ".relative": {
		                position: "relative"
		            },
		            ".sticky": {
		                position: "sticky"
		            }
		        });
		    },
		    inset: (0, _createUtilityPlugin.default)("inset", [
		        [
		            "inset",
		            [
		                "inset"
		            ]
		        ],
		        [
		            [
		                "inset-x",
		                [
		                    "left",
		                    "right"
		                ]
		            ],
		            [
		                "inset-y",
		                [
		                    "top",
		                    "bottom"
		                ]
		            ]
		        ],
		        [
		            [
		                "start",
		                [
		                    "inset-inline-start"
		                ]
		            ],
		            [
		                "end",
		                [
		                    "inset-inline-end"
		                ]
		            ],
		            [
		                "top",
		                [
		                    "top"
		                ]
		            ],
		            [
		                "right",
		                [
		                    "right"
		                ]
		            ],
		            [
		                "bottom",
		                [
		                    "bottom"
		                ]
		            ],
		            [
		                "left",
		                [
		                    "left"
		                ]
		            ]
		        ]
		    ], {
		        supportsNegativeValues: true
		    }),
		    isolation: ({ addUtilities  })=>{
		        addUtilities({
		            ".isolate": {
		                isolation: "isolate"
		            },
		            ".isolation-auto": {
		                isolation: "auto"
		            }
		        });
		    },
		    zIndex: (0, _createUtilityPlugin.default)("zIndex", [
		        [
		            "z",
		            [
		                "zIndex"
		            ]
		        ]
		    ], {
		        supportsNegativeValues: true
		    }),
		    order: (0, _createUtilityPlugin.default)("order", undefined, {
		        supportsNegativeValues: true
		    }),
		    gridColumn: (0, _createUtilityPlugin.default)("gridColumn", [
		        [
		            "col",
		            [
		                "gridColumn"
		            ]
		        ]
		    ]),
		    gridColumnStart: (0, _createUtilityPlugin.default)("gridColumnStart", [
		        [
		            "col-start",
		            [
		                "gridColumnStart"
		            ]
		        ]
		    ]),
		    gridColumnEnd: (0, _createUtilityPlugin.default)("gridColumnEnd", [
		        [
		            "col-end",
		            [
		                "gridColumnEnd"
		            ]
		        ]
		    ]),
		    gridRow: (0, _createUtilityPlugin.default)("gridRow", [
		        [
		            "row",
		            [
		                "gridRow"
		            ]
		        ]
		    ]),
		    gridRowStart: (0, _createUtilityPlugin.default)("gridRowStart", [
		        [
		            "row-start",
		            [
		                "gridRowStart"
		            ]
		        ]
		    ]),
		    gridRowEnd: (0, _createUtilityPlugin.default)("gridRowEnd", [
		        [
		            "row-end",
		            [
		                "gridRowEnd"
		            ]
		        ]
		    ]),
		    float: ({ addUtilities  })=>{
		        addUtilities({
		            ".float-right": {
		                float: "right"
		            },
		            ".float-left": {
		                float: "left"
		            },
		            ".float-none": {
		                float: "none"
		            }
		        });
		    },
		    clear: ({ addUtilities  })=>{
		        addUtilities({
		            ".clear-left": {
		                clear: "left"
		            },
		            ".clear-right": {
		                clear: "right"
		            },
		            ".clear-both": {
		                clear: "both"
		            },
		            ".clear-none": {
		                clear: "none"
		            }
		        });
		    },
		    margin: (0, _createUtilityPlugin.default)("margin", [
		        [
		            "m",
		            [
		                "margin"
		            ]
		        ],
		        [
		            [
		                "mx",
		                [
		                    "margin-left",
		                    "margin-right"
		                ]
		            ],
		            [
		                "my",
		                [
		                    "margin-top",
		                    "margin-bottom"
		                ]
		            ]
		        ],
		        [
		            [
		                "ms",
		                [
		                    "margin-inline-start"
		                ]
		            ],
		            [
		                "me",
		                [
		                    "margin-inline-end"
		                ]
		            ],
		            [
		                "mt",
		                [
		                    "margin-top"
		                ]
		            ],
		            [
		                "mr",
		                [
		                    "margin-right"
		                ]
		            ],
		            [
		                "mb",
		                [
		                    "margin-bottom"
		                ]
		            ],
		            [
		                "ml",
		                [
		                    "margin-left"
		                ]
		            ]
		        ]
		    ], {
		        supportsNegativeValues: true
		    }),
		    boxSizing: ({ addUtilities  })=>{
		        addUtilities({
		            ".box-border": {
		                "box-sizing": "border-box"
		            },
		            ".box-content": {
		                "box-sizing": "content-box"
		            }
		        });
		    },
		    lineClamp: ({ matchUtilities , addUtilities , theme  })=>{
		        matchUtilities({
		            "line-clamp": (value)=>({
		                    overflow: "hidden",
		                    display: "-webkit-box",
		                    "-webkit-box-orient": "vertical",
		                    "-webkit-line-clamp": `${value}`
		                })
		        }, {
		            values: theme("lineClamp")
		        });
		        addUtilities({
		            ".line-clamp-none": {
		                overflow: "visible",
		                display: "block",
		                "-webkit-box-orient": "horizontal",
		                "-webkit-line-clamp": "none"
		            }
		        });
		    },
		    display: ({ addUtilities  })=>{
		        addUtilities({
		            ".block": {
		                display: "block"
		            },
		            ".inline-block": {
		                display: "inline-block"
		            },
		            ".inline": {
		                display: "inline"
		            },
		            ".flex": {
		                display: "flex"
		            },
		            ".inline-flex": {
		                display: "inline-flex"
		            },
		            ".table": {
		                display: "table"
		            },
		            ".inline-table": {
		                display: "inline-table"
		            },
		            ".table-caption": {
		                display: "table-caption"
		            },
		            ".table-cell": {
		                display: "table-cell"
		            },
		            ".table-column": {
		                display: "table-column"
		            },
		            ".table-column-group": {
		                display: "table-column-group"
		            },
		            ".table-footer-group": {
		                display: "table-footer-group"
		            },
		            ".table-header-group": {
		                display: "table-header-group"
		            },
		            ".table-row-group": {
		                display: "table-row-group"
		            },
		            ".table-row": {
		                display: "table-row"
		            },
		            ".flow-root": {
		                display: "flow-root"
		            },
		            ".grid": {
		                display: "grid"
		            },
		            ".inline-grid": {
		                display: "inline-grid"
		            },
		            ".contents": {
		                display: "contents"
		            },
		            ".list-item": {
		                display: "list-item"
		            },
		            ".hidden": {
		                display: "none"
		            }
		        });
		    },
		    aspectRatio: (0, _createUtilityPlugin.default)("aspectRatio", [
		        [
		            "aspect",
		            [
		                "aspect-ratio"
		            ]
		        ]
		    ]),
		    height: (0, _createUtilityPlugin.default)("height", [
		        [
		            "h",
		            [
		                "height"
		            ]
		        ]
		    ]),
		    maxHeight: (0, _createUtilityPlugin.default)("maxHeight", [
		        [
		            "max-h",
		            [
		                "maxHeight"
		            ]
		        ]
		    ]),
		    minHeight: (0, _createUtilityPlugin.default)("minHeight", [
		        [
		            "min-h",
		            [
		                "minHeight"
		            ]
		        ]
		    ]),
		    width: (0, _createUtilityPlugin.default)("width", [
		        [
		            "w",
		            [
		                "width"
		            ]
		        ]
		    ]),
		    minWidth: (0, _createUtilityPlugin.default)("minWidth", [
		        [
		            "min-w",
		            [
		                "minWidth"
		            ]
		        ]
		    ]),
		    maxWidth: (0, _createUtilityPlugin.default)("maxWidth", [
		        [
		            "max-w",
		            [
		                "maxWidth"
		            ]
		        ]
		    ]),
		    flex: (0, _createUtilityPlugin.default)("flex"),
		    flexShrink: (0, _createUtilityPlugin.default)("flexShrink", [
		        [
		            "flex-shrink",
		            [
		                "flex-shrink"
		            ]
		        ],
		        [
		            "shrink",
		            [
		                "flex-shrink"
		            ]
		        ]
		    ]),
		    flexGrow: (0, _createUtilityPlugin.default)("flexGrow", [
		        [
		            "flex-grow",
		            [
		                "flex-grow"
		            ]
		        ],
		        [
		            "grow",
		            [
		                "flex-grow"
		            ]
		        ]
		    ]),
		    flexBasis: (0, _createUtilityPlugin.default)("flexBasis", [
		        [
		            "basis",
		            [
		                "flex-basis"
		            ]
		        ]
		    ]),
		    tableLayout: ({ addUtilities  })=>{
		        addUtilities({
		            ".table-auto": {
		                "table-layout": "auto"
		            },
		            ".table-fixed": {
		                "table-layout": "fixed"
		            }
		        });
		    },
		    captionSide: ({ addUtilities  })=>{
		        addUtilities({
		            ".caption-top": {
		                "caption-side": "top"
		            },
		            ".caption-bottom": {
		                "caption-side": "bottom"
		            }
		        });
		    },
		    borderCollapse: ({ addUtilities  })=>{
		        addUtilities({
		            ".border-collapse": {
		                "border-collapse": "collapse"
		            },
		            ".border-separate": {
		                "border-collapse": "separate"
		            }
		        });
		    },
		    borderSpacing: ({ addDefaults , matchUtilities , theme  })=>{
		        addDefaults("border-spacing", {
		            "--tw-border-spacing-x": 0,
		            "--tw-border-spacing-y": 0
		        });
		        matchUtilities({
		            "border-spacing": (value)=>{
		                return {
		                    "--tw-border-spacing-x": value,
		                    "--tw-border-spacing-y": value,
		                    "@defaults border-spacing": {},
		                    "border-spacing": "var(--tw-border-spacing-x) var(--tw-border-spacing-y)"
		                };
		            },
		            "border-spacing-x": (value)=>{
		                return {
		                    "--tw-border-spacing-x": value,
		                    "@defaults border-spacing": {},
		                    "border-spacing": "var(--tw-border-spacing-x) var(--tw-border-spacing-y)"
		                };
		            },
		            "border-spacing-y": (value)=>{
		                return {
		                    "--tw-border-spacing-y": value,
		                    "@defaults border-spacing": {},
		                    "border-spacing": "var(--tw-border-spacing-x) var(--tw-border-spacing-y)"
		                };
		            }
		        }, {
		            values: theme("borderSpacing")
		        });
		    },
		    transformOrigin: (0, _createUtilityPlugin.default)("transformOrigin", [
		        [
		            "origin",
		            [
		                "transformOrigin"
		            ]
		        ]
		    ]),
		    translate: (0, _createUtilityPlugin.default)("translate", [
		        [
		            [
		                "translate-x",
		                [
		                    [
		                        "@defaults transform",
		                        {}
		                    ],
		                    "--tw-translate-x",
		                    [
		                        "transform",
		                        cssTransformValue
		                    ]
		                ]
		            ],
		            [
		                "translate-y",
		                [
		                    [
		                        "@defaults transform",
		                        {}
		                    ],
		                    "--tw-translate-y",
		                    [
		                        "transform",
		                        cssTransformValue
		                    ]
		                ]
		            ]
		        ]
		    ], {
		        supportsNegativeValues: true
		    }),
		    rotate: (0, _createUtilityPlugin.default)("rotate", [
		        [
		            "rotate",
		            [
		                [
		                    "@defaults transform",
		                    {}
		                ],
		                "--tw-rotate",
		                [
		                    "transform",
		                    cssTransformValue
		                ]
		            ]
		        ]
		    ], {
		        supportsNegativeValues: true
		    }),
		    skew: (0, _createUtilityPlugin.default)("skew", [
		        [
		            [
		                "skew-x",
		                [
		                    [
		                        "@defaults transform",
		                        {}
		                    ],
		                    "--tw-skew-x",
		                    [
		                        "transform",
		                        cssTransformValue
		                    ]
		                ]
		            ],
		            [
		                "skew-y",
		                [
		                    [
		                        "@defaults transform",
		                        {}
		                    ],
		                    "--tw-skew-y",
		                    [
		                        "transform",
		                        cssTransformValue
		                    ]
		                ]
		            ]
		        ]
		    ], {
		        supportsNegativeValues: true
		    }),
		    scale: (0, _createUtilityPlugin.default)("scale", [
		        [
		            "scale",
		            [
		                [
		                    "@defaults transform",
		                    {}
		                ],
		                "--tw-scale-x",
		                "--tw-scale-y",
		                [
		                    "transform",
		                    cssTransformValue
		                ]
		            ]
		        ],
		        [
		            [
		                "scale-x",
		                [
		                    [
		                        "@defaults transform",
		                        {}
		                    ],
		                    "--tw-scale-x",
		                    [
		                        "transform",
		                        cssTransformValue
		                    ]
		                ]
		            ],
		            [
		                "scale-y",
		                [
		                    [
		                        "@defaults transform",
		                        {}
		                    ],
		                    "--tw-scale-y",
		                    [
		                        "transform",
		                        cssTransformValue
		                    ]
		                ]
		            ]
		        ]
		    ], {
		        supportsNegativeValues: true
		    }),
		    transform: ({ addDefaults , addUtilities  })=>{
		        addDefaults("transform", {
		            "--tw-translate-x": "0",
		            "--tw-translate-y": "0",
		            "--tw-rotate": "0",
		            "--tw-skew-x": "0",
		            "--tw-skew-y": "0",
		            "--tw-scale-x": "1",
		            "--tw-scale-y": "1"
		        });
		        addUtilities({
		            ".transform": {
		                "@defaults transform": {},
		                transform: cssTransformValue
		            },
		            ".transform-cpu": {
		                transform: cssTransformValue
		            },
		            ".transform-gpu": {
		                transform: cssTransformValue.replace("translate(var(--tw-translate-x), var(--tw-translate-y))", "translate3d(var(--tw-translate-x), var(--tw-translate-y), 0)")
		            },
		            ".transform-none": {
		                transform: "none"
		            }
		        });
		    },
		    animation: ({ matchUtilities , theme , config  })=>{
		        let prefixName = (name)=>`${config("prefix")}${(0, _escapeClassName.default)(name)}`;
		        var _theme;
		        let keyframes = Object.fromEntries(Object.entries((_theme = theme("keyframes")) !== null && _theme !== void 0 ? _theme : {}).map(([key, value])=>{
		            return [
		                key,
		                {
		                    [`@keyframes ${prefixName(key)}`]: value
		                }
		            ];
		        }));
		        matchUtilities({
		            animate: (value)=>{
		                let animations = (0, _parseAnimationValue.default)(value);
		                return [
		                    ...animations.flatMap((animation)=>keyframes[animation.name]),
		                    {
		                        animation: animations.map(({ name , value  })=>{
		                            if (name === undefined || keyframes[name] === undefined) {
		                                return value;
		                            }
		                            return value.replace(name, prefixName(name));
		                        }).join(", ")
		                    }
		                ];
		            }
		        }, {
		            values: theme("animation")
		        });
		    },
		    cursor: (0, _createUtilityPlugin.default)("cursor"),
		    touchAction: ({ addDefaults , addUtilities  })=>{
		        addDefaults("touch-action", {
		            "--tw-pan-x": " ",
		            "--tw-pan-y": " ",
		            "--tw-pinch-zoom": " "
		        });
		        let cssTouchActionValue = "var(--tw-pan-x) var(--tw-pan-y) var(--tw-pinch-zoom)";
		        addUtilities({
		            ".touch-auto": {
		                "touch-action": "auto"
		            },
		            ".touch-none": {
		                "touch-action": "none"
		            },
		            ".touch-pan-x": {
		                "@defaults touch-action": {},
		                "--tw-pan-x": "pan-x",
		                "touch-action": cssTouchActionValue
		            },
		            ".touch-pan-left": {
		                "@defaults touch-action": {},
		                "--tw-pan-x": "pan-left",
		                "touch-action": cssTouchActionValue
		            },
		            ".touch-pan-right": {
		                "@defaults touch-action": {},
		                "--tw-pan-x": "pan-right",
		                "touch-action": cssTouchActionValue
		            },
		            ".touch-pan-y": {
		                "@defaults touch-action": {},
		                "--tw-pan-y": "pan-y",
		                "touch-action": cssTouchActionValue
		            },
		            ".touch-pan-up": {
		                "@defaults touch-action": {},
		                "--tw-pan-y": "pan-up",
		                "touch-action": cssTouchActionValue
		            },
		            ".touch-pan-down": {
		                "@defaults touch-action": {},
		                "--tw-pan-y": "pan-down",
		                "touch-action": cssTouchActionValue
		            },
		            ".touch-pinch-zoom": {
		                "@defaults touch-action": {},
		                "--tw-pinch-zoom": "pinch-zoom",
		                "touch-action": cssTouchActionValue
		            },
		            ".touch-manipulation": {
		                "touch-action": "manipulation"
		            }
		        });
		    },
		    userSelect: ({ addUtilities  })=>{
		        addUtilities({
		            ".select-none": {
		                "user-select": "none"
		            },
		            ".select-text": {
		                "user-select": "text"
		            },
		            ".select-all": {
		                "user-select": "all"
		            },
		            ".select-auto": {
		                "user-select": "auto"
		            }
		        });
		    },
		    resize: ({ addUtilities  })=>{
		        addUtilities({
		            ".resize-none": {
		                resize: "none"
		            },
		            ".resize-y": {
		                resize: "vertical"
		            },
		            ".resize-x": {
		                resize: "horizontal"
		            },
		            ".resize": {
		                resize: "both"
		            }
		        });
		    },
		    scrollSnapType: ({ addDefaults , addUtilities  })=>{
		        addDefaults("scroll-snap-type", {
		            "--tw-scroll-snap-strictness": "proximity"
		        });
		        addUtilities({
		            ".snap-none": {
		                "scroll-snap-type": "none"
		            },
		            ".snap-x": {
		                "@defaults scroll-snap-type": {},
		                "scroll-snap-type": "x var(--tw-scroll-snap-strictness)"
		            },
		            ".snap-y": {
		                "@defaults scroll-snap-type": {},
		                "scroll-snap-type": "y var(--tw-scroll-snap-strictness)"
		            },
		            ".snap-both": {
		                "@defaults scroll-snap-type": {},
		                "scroll-snap-type": "both var(--tw-scroll-snap-strictness)"
		            },
		            ".snap-mandatory": {
		                "--tw-scroll-snap-strictness": "mandatory"
		            },
		            ".snap-proximity": {
		                "--tw-scroll-snap-strictness": "proximity"
		            }
		        });
		    },
		    scrollSnapAlign: ({ addUtilities  })=>{
		        addUtilities({
		            ".snap-start": {
		                "scroll-snap-align": "start"
		            },
		            ".snap-end": {
		                "scroll-snap-align": "end"
		            },
		            ".snap-center": {
		                "scroll-snap-align": "center"
		            },
		            ".snap-align-none": {
		                "scroll-snap-align": "none"
		            }
		        });
		    },
		    scrollSnapStop: ({ addUtilities  })=>{
		        addUtilities({
		            ".snap-normal": {
		                "scroll-snap-stop": "normal"
		            },
		            ".snap-always": {
		                "scroll-snap-stop": "always"
		            }
		        });
		    },
		    scrollMargin: (0, _createUtilityPlugin.default)("scrollMargin", [
		        [
		            "scroll-m",
		            [
		                "scroll-margin"
		            ]
		        ],
		        [
		            [
		                "scroll-mx",
		                [
		                    "scroll-margin-left",
		                    "scroll-margin-right"
		                ]
		            ],
		            [
		                "scroll-my",
		                [
		                    "scroll-margin-top",
		                    "scroll-margin-bottom"
		                ]
		            ]
		        ],
		        [
		            [
		                "scroll-ms",
		                [
		                    "scroll-margin-inline-start"
		                ]
		            ],
		            [
		                "scroll-me",
		                [
		                    "scroll-margin-inline-end"
		                ]
		            ],
		            [
		                "scroll-mt",
		                [
		                    "scroll-margin-top"
		                ]
		            ],
		            [
		                "scroll-mr",
		                [
		                    "scroll-margin-right"
		                ]
		            ],
		            [
		                "scroll-mb",
		                [
		                    "scroll-margin-bottom"
		                ]
		            ],
		            [
		                "scroll-ml",
		                [
		                    "scroll-margin-left"
		                ]
		            ]
		        ]
		    ], {
		        supportsNegativeValues: true
		    }),
		    scrollPadding: (0, _createUtilityPlugin.default)("scrollPadding", [
		        [
		            "scroll-p",
		            [
		                "scroll-padding"
		            ]
		        ],
		        [
		            [
		                "scroll-px",
		                [
		                    "scroll-padding-left",
		                    "scroll-padding-right"
		                ]
		            ],
		            [
		                "scroll-py",
		                [
		                    "scroll-padding-top",
		                    "scroll-padding-bottom"
		                ]
		            ]
		        ],
		        [
		            [
		                "scroll-ps",
		                [
		                    "scroll-padding-inline-start"
		                ]
		            ],
		            [
		                "scroll-pe",
		                [
		                    "scroll-padding-inline-end"
		                ]
		            ],
		            [
		                "scroll-pt",
		                [
		                    "scroll-padding-top"
		                ]
		            ],
		            [
		                "scroll-pr",
		                [
		                    "scroll-padding-right"
		                ]
		            ],
		            [
		                "scroll-pb",
		                [
		                    "scroll-padding-bottom"
		                ]
		            ],
		            [
		                "scroll-pl",
		                [
		                    "scroll-padding-left"
		                ]
		            ]
		        ]
		    ]),
		    listStylePosition: ({ addUtilities  })=>{
		        addUtilities({
		            ".list-inside": {
		                "list-style-position": "inside"
		            },
		            ".list-outside": {
		                "list-style-position": "outside"
		            }
		        });
		    },
		    listStyleType: (0, _createUtilityPlugin.default)("listStyleType", [
		        [
		            "list",
		            [
		                "listStyleType"
		            ]
		        ]
		    ]),
		    listStyleImage: (0, _createUtilityPlugin.default)("listStyleImage", [
		        [
		            "list-image",
		            [
		                "listStyleImage"
		            ]
		        ]
		    ]),
		    appearance: ({ addUtilities  })=>{
		        addUtilities({
		            ".appearance-none": {
		                appearance: "none"
		            }
		        });
		    },
		    columns: (0, _createUtilityPlugin.default)("columns", [
		        [
		            "columns",
		            [
		                "columns"
		            ]
		        ]
		    ]),
		    breakBefore: ({ addUtilities  })=>{
		        addUtilities({
		            ".break-before-auto": {
		                "break-before": "auto"
		            },
		            ".break-before-avoid": {
		                "break-before": "avoid"
		            },
		            ".break-before-all": {
		                "break-before": "all"
		            },
		            ".break-before-avoid-page": {
		                "break-before": "avoid-page"
		            },
		            ".break-before-page": {
		                "break-before": "page"
		            },
		            ".break-before-left": {
		                "break-before": "left"
		            },
		            ".break-before-right": {
		                "break-before": "right"
		            },
		            ".break-before-column": {
		                "break-before": "column"
		            }
		        });
		    },
		    breakInside: ({ addUtilities  })=>{
		        addUtilities({
		            ".break-inside-auto": {
		                "break-inside": "auto"
		            },
		            ".break-inside-avoid": {
		                "break-inside": "avoid"
		            },
		            ".break-inside-avoid-page": {
		                "break-inside": "avoid-page"
		            },
		            ".break-inside-avoid-column": {
		                "break-inside": "avoid-column"
		            }
		        });
		    },
		    breakAfter: ({ addUtilities  })=>{
		        addUtilities({
		            ".break-after-auto": {
		                "break-after": "auto"
		            },
		            ".break-after-avoid": {
		                "break-after": "avoid"
		            },
		            ".break-after-all": {
		                "break-after": "all"
		            },
		            ".break-after-avoid-page": {
		                "break-after": "avoid-page"
		            },
		            ".break-after-page": {
		                "break-after": "page"
		            },
		            ".break-after-left": {
		                "break-after": "left"
		            },
		            ".break-after-right": {
		                "break-after": "right"
		            },
		            ".break-after-column": {
		                "break-after": "column"
		            }
		        });
		    },
		    gridAutoColumns: (0, _createUtilityPlugin.default)("gridAutoColumns", [
		        [
		            "auto-cols",
		            [
		                "gridAutoColumns"
		            ]
		        ]
		    ]),
		    gridAutoFlow: ({ addUtilities  })=>{
		        addUtilities({
		            ".grid-flow-row": {
		                gridAutoFlow: "row"
		            },
		            ".grid-flow-col": {
		                gridAutoFlow: "column"
		            },
		            ".grid-flow-dense": {
		                gridAutoFlow: "dense"
		            },
		            ".grid-flow-row-dense": {
		                gridAutoFlow: "row dense"
		            },
		            ".grid-flow-col-dense": {
		                gridAutoFlow: "column dense"
		            }
		        });
		    },
		    gridAutoRows: (0, _createUtilityPlugin.default)("gridAutoRows", [
		        [
		            "auto-rows",
		            [
		                "gridAutoRows"
		            ]
		        ]
		    ]),
		    gridTemplateColumns: (0, _createUtilityPlugin.default)("gridTemplateColumns", [
		        [
		            "grid-cols",
		            [
		                "gridTemplateColumns"
		            ]
		        ]
		    ]),
		    gridTemplateRows: (0, _createUtilityPlugin.default)("gridTemplateRows", [
		        [
		            "grid-rows",
		            [
		                "gridTemplateRows"
		            ]
		        ]
		    ]),
		    flexDirection: ({ addUtilities  })=>{
		        addUtilities({
		            ".flex-row": {
		                "flex-direction": "row"
		            },
		            ".flex-row-reverse": {
		                "flex-direction": "row-reverse"
		            },
		            ".flex-col": {
		                "flex-direction": "column"
		            },
		            ".flex-col-reverse": {
		                "flex-direction": "column-reverse"
		            }
		        });
		    },
		    flexWrap: ({ addUtilities  })=>{
		        addUtilities({
		            ".flex-wrap": {
		                "flex-wrap": "wrap"
		            },
		            ".flex-wrap-reverse": {
		                "flex-wrap": "wrap-reverse"
		            },
		            ".flex-nowrap": {
		                "flex-wrap": "nowrap"
		            }
		        });
		    },
		    placeContent: ({ addUtilities  })=>{
		        addUtilities({
		            ".place-content-center": {
		                "place-content": "center"
		            },
		            ".place-content-start": {
		                "place-content": "start"
		            },
		            ".place-content-end": {
		                "place-content": "end"
		            },
		            ".place-content-between": {
		                "place-content": "space-between"
		            },
		            ".place-content-around": {
		                "place-content": "space-around"
		            },
		            ".place-content-evenly": {
		                "place-content": "space-evenly"
		            },
		            ".place-content-baseline": {
		                "place-content": "baseline"
		            },
		            ".place-content-stretch": {
		                "place-content": "stretch"
		            }
		        });
		    },
		    placeItems: ({ addUtilities  })=>{
		        addUtilities({
		            ".place-items-start": {
		                "place-items": "start"
		            },
		            ".place-items-end": {
		                "place-items": "end"
		            },
		            ".place-items-center": {
		                "place-items": "center"
		            },
		            ".place-items-baseline": {
		                "place-items": "baseline"
		            },
		            ".place-items-stretch": {
		                "place-items": "stretch"
		            }
		        });
		    },
		    alignContent: ({ addUtilities  })=>{
		        addUtilities({
		            ".content-normal": {
		                "align-content": "normal"
		            },
		            ".content-center": {
		                "align-content": "center"
		            },
		            ".content-start": {
		                "align-content": "flex-start"
		            },
		            ".content-end": {
		                "align-content": "flex-end"
		            },
		            ".content-between": {
		                "align-content": "space-between"
		            },
		            ".content-around": {
		                "align-content": "space-around"
		            },
		            ".content-evenly": {
		                "align-content": "space-evenly"
		            },
		            ".content-baseline": {
		                "align-content": "baseline"
		            },
		            ".content-stretch": {
		                "align-content": "stretch"
		            }
		        });
		    },
		    alignItems: ({ addUtilities  })=>{
		        addUtilities({
		            ".items-start": {
		                "align-items": "flex-start"
		            },
		            ".items-end": {
		                "align-items": "flex-end"
		            },
		            ".items-center": {
		                "align-items": "center"
		            },
		            ".items-baseline": {
		                "align-items": "baseline"
		            },
		            ".items-stretch": {
		                "align-items": "stretch"
		            }
		        });
		    },
		    justifyContent: ({ addUtilities  })=>{
		        addUtilities({
		            ".justify-normal": {
		                "justify-content": "normal"
		            },
		            ".justify-start": {
		                "justify-content": "flex-start"
		            },
		            ".justify-end": {
		                "justify-content": "flex-end"
		            },
		            ".justify-center": {
		                "justify-content": "center"
		            },
		            ".justify-between": {
		                "justify-content": "space-between"
		            },
		            ".justify-around": {
		                "justify-content": "space-around"
		            },
		            ".justify-evenly": {
		                "justify-content": "space-evenly"
		            },
		            ".justify-stretch": {
		                "justify-content": "stretch"
		            }
		        });
		    },
		    justifyItems: ({ addUtilities  })=>{
		        addUtilities({
		            ".justify-items-start": {
		                "justify-items": "start"
		            },
		            ".justify-items-end": {
		                "justify-items": "end"
		            },
		            ".justify-items-center": {
		                "justify-items": "center"
		            },
		            ".justify-items-stretch": {
		                "justify-items": "stretch"
		            }
		        });
		    },
		    gap: (0, _createUtilityPlugin.default)("gap", [
		        [
		            "gap",
		            [
		                "gap"
		            ]
		        ],
		        [
		            [
		                "gap-x",
		                [
		                    "columnGap"
		                ]
		            ],
		            [
		                "gap-y",
		                [
		                    "rowGap"
		                ]
		            ]
		        ]
		    ]),
		    space: ({ matchUtilities , addUtilities , theme  })=>{
		        matchUtilities({
		            "space-x": (value)=>{
		                value = value === "0" ? "0px" : value;
		                if (_sharedState.env.OXIDE) {
		                    return {
		                        "& > :not([hidden]) ~ :not([hidden])": {
		                            "--tw-space-x-reverse": "0",
		                            "margin-inline-end": `calc(${value} * var(--tw-space-x-reverse))`,
		                            "margin-inline-start": `calc(${value} * calc(1 - var(--tw-space-x-reverse)))`
		                        }
		                    };
		                }
		                return {
		                    "& > :not([hidden]) ~ :not([hidden])": {
		                        "--tw-space-x-reverse": "0",
		                        "margin-right": `calc(${value} * var(--tw-space-x-reverse))`,
		                        "margin-left": `calc(${value} * calc(1 - var(--tw-space-x-reverse)))`
		                    }
		                };
		            },
		            "space-y": (value)=>{
		                value = value === "0" ? "0px" : value;
		                return {
		                    "& > :not([hidden]) ~ :not([hidden])": {
		                        "--tw-space-y-reverse": "0",
		                        "margin-top": `calc(${value} * calc(1 - var(--tw-space-y-reverse)))`,
		                        "margin-bottom": `calc(${value} * var(--tw-space-y-reverse))`
		                    }
		                };
		            }
		        }, {
		            values: theme("space"),
		            supportsNegativeValues: true
		        });
		        addUtilities({
		            ".space-y-reverse > :not([hidden]) ~ :not([hidden])": {
		                "--tw-space-y-reverse": "1"
		            },
		            ".space-x-reverse > :not([hidden]) ~ :not([hidden])": {
		                "--tw-space-x-reverse": "1"
		            }
		        });
		    },
		    divideWidth: ({ matchUtilities , addUtilities , theme  })=>{
		        matchUtilities({
		            "divide-x": (value)=>{
		                value = value === "0" ? "0px" : value;
		                if (_sharedState.env.OXIDE) {
		                    return {
		                        "& > :not([hidden]) ~ :not([hidden])": {
		                            "@defaults border-width": {},
		                            "--tw-divide-x-reverse": "0",
		                            "border-inline-end-width": `calc(${value} * var(--tw-divide-x-reverse))`,
		                            "border-inline-start-width": `calc(${value} * calc(1 - var(--tw-divide-x-reverse)))`
		                        }
		                    };
		                }
		                return {
		                    "& > :not([hidden]) ~ :not([hidden])": {
		                        "@defaults border-width": {},
		                        "--tw-divide-x-reverse": "0",
		                        "border-right-width": `calc(${value} * var(--tw-divide-x-reverse))`,
		                        "border-left-width": `calc(${value} * calc(1 - var(--tw-divide-x-reverse)))`
		                    }
		                };
		            },
		            "divide-y": (value)=>{
		                value = value === "0" ? "0px" : value;
		                return {
		                    "& > :not([hidden]) ~ :not([hidden])": {
		                        "@defaults border-width": {},
		                        "--tw-divide-y-reverse": "0",
		                        "border-top-width": `calc(${value} * calc(1 - var(--tw-divide-y-reverse)))`,
		                        "border-bottom-width": `calc(${value} * var(--tw-divide-y-reverse))`
		                    }
		                };
		            }
		        }, {
		            values: theme("divideWidth"),
		            type: [
		                "line-width",
		                "length",
		                "any"
		            ]
		        });
		        addUtilities({
		            ".divide-y-reverse > :not([hidden]) ~ :not([hidden])": {
		                "@defaults border-width": {},
		                "--tw-divide-y-reverse": "1"
		            },
		            ".divide-x-reverse > :not([hidden]) ~ :not([hidden])": {
		                "@defaults border-width": {},
		                "--tw-divide-x-reverse": "1"
		            }
		        });
		    },
		    divideStyle: ({ addUtilities  })=>{
		        addUtilities({
		            ".divide-solid > :not([hidden]) ~ :not([hidden])": {
		                "border-style": "solid"
		            },
		            ".divide-dashed > :not([hidden]) ~ :not([hidden])": {
		                "border-style": "dashed"
		            },
		            ".divide-dotted > :not([hidden]) ~ :not([hidden])": {
		                "border-style": "dotted"
		            },
		            ".divide-double > :not([hidden]) ~ :not([hidden])": {
		                "border-style": "double"
		            },
		            ".divide-none > :not([hidden]) ~ :not([hidden])": {
		                "border-style": "none"
		            }
		        });
		    },
		    divideColor: ({ matchUtilities , theme , corePlugins  })=>{
		        matchUtilities({
		            divide: (value)=>{
		                if (!corePlugins("divideOpacity")) {
		                    return {
		                        ["& > :not([hidden]) ~ :not([hidden])"]: {
		                            "border-color": (0, _toColorValue.default)(value)
		                        }
		                    };
		                }
		                return {
		                    ["& > :not([hidden]) ~ :not([hidden])"]: (0, _withAlphaVariable.default)({
		                        color: value,
		                        property: "border-color",
		                        variable: "--tw-divide-opacity"
		                    })
		                };
		            }
		        }, {
		            values: (({ DEFAULT: _ , ...colors })=>colors)((0, _flattenColorPalette.default)(theme("divideColor"))),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    divideOpacity: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "divide-opacity": (value)=>{
		                return {
		                    [`& > :not([hidden]) ~ :not([hidden])`]: {
		                        "--tw-divide-opacity": value
		                    }
		                };
		            }
		        }, {
		            values: theme("divideOpacity")
		        });
		    },
		    placeSelf: ({ addUtilities  })=>{
		        addUtilities({
		            ".place-self-auto": {
		                "place-self": "auto"
		            },
		            ".place-self-start": {
		                "place-self": "start"
		            },
		            ".place-self-end": {
		                "place-self": "end"
		            },
		            ".place-self-center": {
		                "place-self": "center"
		            },
		            ".place-self-stretch": {
		                "place-self": "stretch"
		            }
		        });
		    },
		    alignSelf: ({ addUtilities  })=>{
		        addUtilities({
		            ".self-auto": {
		                "align-self": "auto"
		            },
		            ".self-start": {
		                "align-self": "flex-start"
		            },
		            ".self-end": {
		                "align-self": "flex-end"
		            },
		            ".self-center": {
		                "align-self": "center"
		            },
		            ".self-stretch": {
		                "align-self": "stretch"
		            },
		            ".self-baseline": {
		                "align-self": "baseline"
		            }
		        });
		    },
		    justifySelf: ({ addUtilities  })=>{
		        addUtilities({
		            ".justify-self-auto": {
		                "justify-self": "auto"
		            },
		            ".justify-self-start": {
		                "justify-self": "start"
		            },
		            ".justify-self-end": {
		                "justify-self": "end"
		            },
		            ".justify-self-center": {
		                "justify-self": "center"
		            },
		            ".justify-self-stretch": {
		                "justify-self": "stretch"
		            }
		        });
		    },
		    overflow: ({ addUtilities  })=>{
		        addUtilities({
		            ".overflow-auto": {
		                overflow: "auto"
		            },
		            ".overflow-hidden": {
		                overflow: "hidden"
		            },
		            ".overflow-clip": {
		                overflow: "clip"
		            },
		            ".overflow-visible": {
		                overflow: "visible"
		            },
		            ".overflow-scroll": {
		                overflow: "scroll"
		            },
		            ".overflow-x-auto": {
		                "overflow-x": "auto"
		            },
		            ".overflow-y-auto": {
		                "overflow-y": "auto"
		            },
		            ".overflow-x-hidden": {
		                "overflow-x": "hidden"
		            },
		            ".overflow-y-hidden": {
		                "overflow-y": "hidden"
		            },
		            ".overflow-x-clip": {
		                "overflow-x": "clip"
		            },
		            ".overflow-y-clip": {
		                "overflow-y": "clip"
		            },
		            ".overflow-x-visible": {
		                "overflow-x": "visible"
		            },
		            ".overflow-y-visible": {
		                "overflow-y": "visible"
		            },
		            ".overflow-x-scroll": {
		                "overflow-x": "scroll"
		            },
		            ".overflow-y-scroll": {
		                "overflow-y": "scroll"
		            }
		        });
		    },
		    overscrollBehavior: ({ addUtilities  })=>{
		        addUtilities({
		            ".overscroll-auto": {
		                "overscroll-behavior": "auto"
		            },
		            ".overscroll-contain": {
		                "overscroll-behavior": "contain"
		            },
		            ".overscroll-none": {
		                "overscroll-behavior": "none"
		            },
		            ".overscroll-y-auto": {
		                "overscroll-behavior-y": "auto"
		            },
		            ".overscroll-y-contain": {
		                "overscroll-behavior-y": "contain"
		            },
		            ".overscroll-y-none": {
		                "overscroll-behavior-y": "none"
		            },
		            ".overscroll-x-auto": {
		                "overscroll-behavior-x": "auto"
		            },
		            ".overscroll-x-contain": {
		                "overscroll-behavior-x": "contain"
		            },
		            ".overscroll-x-none": {
		                "overscroll-behavior-x": "none"
		            }
		        });
		    },
		    scrollBehavior: ({ addUtilities  })=>{
		        addUtilities({
		            ".scroll-auto": {
		                "scroll-behavior": "auto"
		            },
		            ".scroll-smooth": {
		                "scroll-behavior": "smooth"
		            }
		        });
		    },
		    textOverflow: ({ addUtilities  })=>{
		        addUtilities({
		            ".truncate": {
		                overflow: "hidden",
		                "text-overflow": "ellipsis",
		                "white-space": "nowrap"
		            },
		            ".overflow-ellipsis": {
		                "text-overflow": "ellipsis"
		            },
		            ".text-ellipsis": {
		                "text-overflow": "ellipsis"
		            },
		            ".text-clip": {
		                "text-overflow": "clip"
		            }
		        });
		    },
		    hyphens: ({ addUtilities  })=>{
		        addUtilities({
		            ".hyphens-none": {
		                hyphens: "none"
		            },
		            ".hyphens-manual": {
		                hyphens: "manual"
		            },
		            ".hyphens-auto": {
		                hyphens: "auto"
		            }
		        });
		    },
		    whitespace: ({ addUtilities  })=>{
		        addUtilities({
		            ".whitespace-normal": {
		                "white-space": "normal"
		            },
		            ".whitespace-nowrap": {
		                "white-space": "nowrap"
		            },
		            ".whitespace-pre": {
		                "white-space": "pre"
		            },
		            ".whitespace-pre-line": {
		                "white-space": "pre-line"
		            },
		            ".whitespace-pre-wrap": {
		                "white-space": "pre-wrap"
		            },
		            ".whitespace-break-spaces": {
		                "white-space": "break-spaces"
		            }
		        });
		    },
		    wordBreak: ({ addUtilities  })=>{
		        addUtilities({
		            ".break-normal": {
		                "overflow-wrap": "normal",
		                "word-break": "normal"
		            },
		            ".break-words": {
		                "overflow-wrap": "break-word"
		            },
		            ".break-all": {
		                "word-break": "break-all"
		            },
		            ".break-keep": {
		                "word-break": "keep-all"
		            }
		        });
		    },
		    borderRadius: (0, _createUtilityPlugin.default)("borderRadius", [
		        [
		            "rounded",
		            [
		                "border-radius"
		            ]
		        ],
		        [
		            [
		                "rounded-s",
		                [
		                    "border-start-start-radius",
		                    "border-end-start-radius"
		                ]
		            ],
		            [
		                "rounded-e",
		                [
		                    "border-start-end-radius",
		                    "border-end-end-radius"
		                ]
		            ],
		            [
		                "rounded-t",
		                [
		                    "border-top-left-radius",
		                    "border-top-right-radius"
		                ]
		            ],
		            [
		                "rounded-r",
		                [
		                    "border-top-right-radius",
		                    "border-bottom-right-radius"
		                ]
		            ],
		            [
		                "rounded-b",
		                [
		                    "border-bottom-right-radius",
		                    "border-bottom-left-radius"
		                ]
		            ],
		            [
		                "rounded-l",
		                [
		                    "border-top-left-radius",
		                    "border-bottom-left-radius"
		                ]
		            ]
		        ],
		        [
		            [
		                "rounded-ss",
		                [
		                    "border-start-start-radius"
		                ]
		            ],
		            [
		                "rounded-se",
		                [
		                    "border-start-end-radius"
		                ]
		            ],
		            [
		                "rounded-ee",
		                [
		                    "border-end-end-radius"
		                ]
		            ],
		            [
		                "rounded-es",
		                [
		                    "border-end-start-radius"
		                ]
		            ],
		            [
		                "rounded-tl",
		                [
		                    "border-top-left-radius"
		                ]
		            ],
		            [
		                "rounded-tr",
		                [
		                    "border-top-right-radius"
		                ]
		            ],
		            [
		                "rounded-br",
		                [
		                    "border-bottom-right-radius"
		                ]
		            ],
		            [
		                "rounded-bl",
		                [
		                    "border-bottom-left-radius"
		                ]
		            ]
		        ]
		    ]),
		    borderWidth: (0, _createUtilityPlugin.default)("borderWidth", [
		        [
		            "border",
		            [
		                [
		                    "@defaults border-width",
		                    {}
		                ],
		                "border-width"
		            ]
		        ],
		        [
		            [
		                "border-x",
		                [
		                    [
		                        "@defaults border-width",
		                        {}
		                    ],
		                    "border-left-width",
		                    "border-right-width"
		                ]
		            ],
		            [
		                "border-y",
		                [
		                    [
		                        "@defaults border-width",
		                        {}
		                    ],
		                    "border-top-width",
		                    "border-bottom-width"
		                ]
		            ]
		        ],
		        [
		            [
		                "border-s",
		                [
		                    [
		                        "@defaults border-width",
		                        {}
		                    ],
		                    "border-inline-start-width"
		                ]
		            ],
		            [
		                "border-e",
		                [
		                    [
		                        "@defaults border-width",
		                        {}
		                    ],
		                    "border-inline-end-width"
		                ]
		            ],
		            [
		                "border-t",
		                [
		                    [
		                        "@defaults border-width",
		                        {}
		                    ],
		                    "border-top-width"
		                ]
		            ],
		            [
		                "border-r",
		                [
		                    [
		                        "@defaults border-width",
		                        {}
		                    ],
		                    "border-right-width"
		                ]
		            ],
		            [
		                "border-b",
		                [
		                    [
		                        "@defaults border-width",
		                        {}
		                    ],
		                    "border-bottom-width"
		                ]
		            ],
		            [
		                "border-l",
		                [
		                    [
		                        "@defaults border-width",
		                        {}
		                    ],
		                    "border-left-width"
		                ]
		            ]
		        ]
		    ], {
		        type: [
		            "line-width",
		            "length"
		        ]
		    }),
		    borderStyle: ({ addUtilities  })=>{
		        addUtilities({
		            ".border-solid": {
		                "border-style": "solid"
		            },
		            ".border-dashed": {
		                "border-style": "dashed"
		            },
		            ".border-dotted": {
		                "border-style": "dotted"
		            },
		            ".border-double": {
		                "border-style": "double"
		            },
		            ".border-hidden": {
		                "border-style": "hidden"
		            },
		            ".border-none": {
		                "border-style": "none"
		            }
		        });
		    },
		    borderColor: ({ matchUtilities , theme , corePlugins  })=>{
		        matchUtilities({
		            border: (value)=>{
		                if (!corePlugins("borderOpacity")) {
		                    return {
		                        "border-color": (0, _toColorValue.default)(value)
		                    };
		                }
		                return (0, _withAlphaVariable.default)({
		                    color: value,
		                    property: "border-color",
		                    variable: "--tw-border-opacity"
		                });
		            }
		        }, {
		            values: (({ DEFAULT: _ , ...colors })=>colors)((0, _flattenColorPalette.default)(theme("borderColor"))),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		        matchUtilities({
		            "border-x": (value)=>{
		                if (!corePlugins("borderOpacity")) {
		                    return {
		                        "border-left-color": (0, _toColorValue.default)(value),
		                        "border-right-color": (0, _toColorValue.default)(value)
		                    };
		                }
		                return (0, _withAlphaVariable.default)({
		                    color: value,
		                    property: [
		                        "border-left-color",
		                        "border-right-color"
		                    ],
		                    variable: "--tw-border-opacity"
		                });
		            },
		            "border-y": (value)=>{
		                if (!corePlugins("borderOpacity")) {
		                    return {
		                        "border-top-color": (0, _toColorValue.default)(value),
		                        "border-bottom-color": (0, _toColorValue.default)(value)
		                    };
		                }
		                return (0, _withAlphaVariable.default)({
		                    color: value,
		                    property: [
		                        "border-top-color",
		                        "border-bottom-color"
		                    ],
		                    variable: "--tw-border-opacity"
		                });
		            }
		        }, {
		            values: (({ DEFAULT: _ , ...colors })=>colors)((0, _flattenColorPalette.default)(theme("borderColor"))),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		        matchUtilities({
		            "border-s": (value)=>{
		                if (!corePlugins("borderOpacity")) {
		                    return {
		                        "border-inline-start-color": (0, _toColorValue.default)(value)
		                    };
		                }
		                return (0, _withAlphaVariable.default)({
		                    color: value,
		                    property: "border-inline-start-color",
		                    variable: "--tw-border-opacity"
		                });
		            },
		            "border-e": (value)=>{
		                if (!corePlugins("borderOpacity")) {
		                    return {
		                        "border-inline-end-color": (0, _toColorValue.default)(value)
		                    };
		                }
		                return (0, _withAlphaVariable.default)({
		                    color: value,
		                    property: "border-inline-end-color",
		                    variable: "--tw-border-opacity"
		                });
		            },
		            "border-t": (value)=>{
		                if (!corePlugins("borderOpacity")) {
		                    return {
		                        "border-top-color": (0, _toColorValue.default)(value)
		                    };
		                }
		                return (0, _withAlphaVariable.default)({
		                    color: value,
		                    property: "border-top-color",
		                    variable: "--tw-border-opacity"
		                });
		            },
		            "border-r": (value)=>{
		                if (!corePlugins("borderOpacity")) {
		                    return {
		                        "border-right-color": (0, _toColorValue.default)(value)
		                    };
		                }
		                return (0, _withAlphaVariable.default)({
		                    color: value,
		                    property: "border-right-color",
		                    variable: "--tw-border-opacity"
		                });
		            },
		            "border-b": (value)=>{
		                if (!corePlugins("borderOpacity")) {
		                    return {
		                        "border-bottom-color": (0, _toColorValue.default)(value)
		                    };
		                }
		                return (0, _withAlphaVariable.default)({
		                    color: value,
		                    property: "border-bottom-color",
		                    variable: "--tw-border-opacity"
		                });
		            },
		            "border-l": (value)=>{
		                if (!corePlugins("borderOpacity")) {
		                    return {
		                        "border-left-color": (0, _toColorValue.default)(value)
		                    };
		                }
		                return (0, _withAlphaVariable.default)({
		                    color: value,
		                    property: "border-left-color",
		                    variable: "--tw-border-opacity"
		                });
		            }
		        }, {
		            values: (({ DEFAULT: _ , ...colors })=>colors)((0, _flattenColorPalette.default)(theme("borderColor"))),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    borderOpacity: (0, _createUtilityPlugin.default)("borderOpacity", [
		        [
		            "border-opacity",
		            [
		                "--tw-border-opacity"
		            ]
		        ]
		    ]),
		    backgroundColor: ({ matchUtilities , theme , corePlugins  })=>{
		        matchUtilities({
		            bg: (value)=>{
		                if (!corePlugins("backgroundOpacity")) {
		                    return {
		                        "background-color": (0, _toColorValue.default)(value)
		                    };
		                }
		                return (0, _withAlphaVariable.default)({
		                    color: value,
		                    property: "background-color",
		                    variable: "--tw-bg-opacity"
		                });
		            }
		        }, {
		            values: (0, _flattenColorPalette.default)(theme("backgroundColor")),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    backgroundOpacity: (0, _createUtilityPlugin.default)("backgroundOpacity", [
		        [
		            "bg-opacity",
		            [
		                "--tw-bg-opacity"
		            ]
		        ]
		    ]),
		    backgroundImage: (0, _createUtilityPlugin.default)("backgroundImage", [
		        [
		            "bg",
		            [
		                "background-image"
		            ]
		        ]
		    ], {
		        type: [
		            "lookup",
		            "image",
		            "url"
		        ]
		    }),
		    gradientColorStops: (()=>{
		        function transparentTo(value) {
		            return (0, _withAlphaVariable.withAlphaValue)(value, 0, "rgb(255 255 255 / 0)");
		        }
		        return function({ matchUtilities , theme  }) {
		            let options = {
		                values: (0, _flattenColorPalette.default)(theme("gradientColorStops")),
		                type: [
		                    "color",
		                    "any"
		                ]
		            };
		            let positionOptions = {
		                values: theme("gradientColorStopPositions"),
		                type: [
		                    "length",
		                    "percentage"
		                ]
		            };
		            matchUtilities({
		                from: (value)=>{
		                    let transparentToValue = transparentTo(value);
		                    return {
		                        "--tw-gradient-from": `${(0, _toColorValue.default)(value, "from")} var(--tw-gradient-from-position)`,
		                        "--tw-gradient-from-position": " ",
		                        "--tw-gradient-to": `${transparentToValue}  var(--tw-gradient-from-position)`,
		                        "--tw-gradient-to-position": " ",
		                        "--tw-gradient-stops": `var(--tw-gradient-from), var(--tw-gradient-to)`
		                    };
		                }
		            }, options);
		            matchUtilities({
		                from: (value)=>{
		                    return {
		                        "--tw-gradient-from-position": value
		                    };
		                }
		            }, positionOptions);
		            matchUtilities({
		                via: (value)=>{
		                    let transparentToValue = transparentTo(value);
		                    return {
		                        "--tw-gradient-via-position": " ",
		                        "--tw-gradient-to": `${transparentToValue}  var(--tw-gradient-to-position)`,
		                        "--tw-gradient-to-position": " ",
		                        "--tw-gradient-stops": `var(--tw-gradient-from), ${(0, _toColorValue.default)(value, "via")} var(--tw-gradient-via-position), var(--tw-gradient-to)`
		                    };
		                }
		            }, options);
		            matchUtilities({
		                via: (value)=>{
		                    return {
		                        "--tw-gradient-via-position": value
		                    };
		                }
		            }, positionOptions);
		            matchUtilities({
		                to: (value)=>({
		                        "--tw-gradient-to": `${(0, _toColorValue.default)(value, "to")} var(--tw-gradient-to-position)`,
		                        "--tw-gradient-to-position": " "
		                    })
		            }, options);
		            matchUtilities({
		                to: (value)=>{
		                    return {
		                        "--tw-gradient-to-position": value
		                    };
		                }
		            }, positionOptions);
		        };
		    })(),
		    boxDecorationBreak: ({ addUtilities  })=>{
		        addUtilities({
		            ".decoration-slice": {
		                "box-decoration-break": "slice"
		            },
		            ".decoration-clone": {
		                "box-decoration-break": "clone"
		            },
		            ".box-decoration-slice": {
		                "box-decoration-break": "slice"
		            },
		            ".box-decoration-clone": {
		                "box-decoration-break": "clone"
		            }
		        });
		    },
		    backgroundSize: (0, _createUtilityPlugin.default)("backgroundSize", [
		        [
		            "bg",
		            [
		                "background-size"
		            ]
		        ]
		    ], {
		        type: [
		            "lookup",
		            "length",
		            "percentage",
		            "size"
		        ]
		    }),
		    backgroundAttachment: ({ addUtilities  })=>{
		        addUtilities({
		            ".bg-fixed": {
		                "background-attachment": "fixed"
		            },
		            ".bg-local": {
		                "background-attachment": "local"
		            },
		            ".bg-scroll": {
		                "background-attachment": "scroll"
		            }
		        });
		    },
		    backgroundClip: ({ addUtilities  })=>{
		        addUtilities({
		            ".bg-clip-border": {
		                "background-clip": "border-box"
		            },
		            ".bg-clip-padding": {
		                "background-clip": "padding-box"
		            },
		            ".bg-clip-content": {
		                "background-clip": "content-box"
		            },
		            ".bg-clip-text": {
		                "background-clip": "text"
		            }
		        });
		    },
		    backgroundPosition: (0, _createUtilityPlugin.default)("backgroundPosition", [
		        [
		            "bg",
		            [
		                "background-position"
		            ]
		        ]
		    ], {
		        type: [
		            "lookup",
		            [
		                "position",
		                {
		                    preferOnConflict: true
		                }
		            ]
		        ]
		    }),
		    backgroundRepeat: ({ addUtilities  })=>{
		        addUtilities({
		            ".bg-repeat": {
		                "background-repeat": "repeat"
		            },
		            ".bg-no-repeat": {
		                "background-repeat": "no-repeat"
		            },
		            ".bg-repeat-x": {
		                "background-repeat": "repeat-x"
		            },
		            ".bg-repeat-y": {
		                "background-repeat": "repeat-y"
		            },
		            ".bg-repeat-round": {
		                "background-repeat": "round"
		            },
		            ".bg-repeat-space": {
		                "background-repeat": "space"
		            }
		        });
		    },
		    backgroundOrigin: ({ addUtilities  })=>{
		        addUtilities({
		            ".bg-origin-border": {
		                "background-origin": "border-box"
		            },
		            ".bg-origin-padding": {
		                "background-origin": "padding-box"
		            },
		            ".bg-origin-content": {
		                "background-origin": "content-box"
		            }
		        });
		    },
		    fill: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            fill: (value)=>{
		                return {
		                    fill: (0, _toColorValue.default)(value)
		                };
		            }
		        }, {
		            values: (0, _flattenColorPalette.default)(theme("fill")),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    stroke: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            stroke: (value)=>{
		                return {
		                    stroke: (0, _toColorValue.default)(value)
		                };
		            }
		        }, {
		            values: (0, _flattenColorPalette.default)(theme("stroke")),
		            type: [
		                "color",
		                "url",
		                "any"
		            ]
		        });
		    },
		    strokeWidth: (0, _createUtilityPlugin.default)("strokeWidth", [
		        [
		            "stroke",
		            [
		                "stroke-width"
		            ]
		        ]
		    ], {
		        type: [
		            "length",
		            "number",
		            "percentage"
		        ]
		    }),
		    objectFit: ({ addUtilities  })=>{
		        addUtilities({
		            ".object-contain": {
		                "object-fit": "contain"
		            },
		            ".object-cover": {
		                "object-fit": "cover"
		            },
		            ".object-fill": {
		                "object-fit": "fill"
		            },
		            ".object-none": {
		                "object-fit": "none"
		            },
		            ".object-scale-down": {
		                "object-fit": "scale-down"
		            }
		        });
		    },
		    objectPosition: (0, _createUtilityPlugin.default)("objectPosition", [
		        [
		            "object",
		            [
		                "object-position"
		            ]
		        ]
		    ]),
		    padding: (0, _createUtilityPlugin.default)("padding", [
		        [
		            "p",
		            [
		                "padding"
		            ]
		        ],
		        [
		            [
		                "px",
		                [
		                    "padding-left",
		                    "padding-right"
		                ]
		            ],
		            [
		                "py",
		                [
		                    "padding-top",
		                    "padding-bottom"
		                ]
		            ]
		        ],
		        [
		            [
		                "ps",
		                [
		                    "padding-inline-start"
		                ]
		            ],
		            [
		                "pe",
		                [
		                    "padding-inline-end"
		                ]
		            ],
		            [
		                "pt",
		                [
		                    "padding-top"
		                ]
		            ],
		            [
		                "pr",
		                [
		                    "padding-right"
		                ]
		            ],
		            [
		                "pb",
		                [
		                    "padding-bottom"
		                ]
		            ],
		            [
		                "pl",
		                [
		                    "padding-left"
		                ]
		            ]
		        ]
		    ]),
		    textAlign: ({ addUtilities  })=>{
		        addUtilities({
		            ".text-left": {
		                "text-align": "left"
		            },
		            ".text-center": {
		                "text-align": "center"
		            },
		            ".text-right": {
		                "text-align": "right"
		            },
		            ".text-justify": {
		                "text-align": "justify"
		            },
		            ".text-start": {
		                "text-align": "start"
		            },
		            ".text-end": {
		                "text-align": "end"
		            }
		        });
		    },
		    textIndent: (0, _createUtilityPlugin.default)("textIndent", [
		        [
		            "indent",
		            [
		                "text-indent"
		            ]
		        ]
		    ], {
		        supportsNegativeValues: true
		    }),
		    verticalAlign: ({ addUtilities , matchUtilities  })=>{
		        addUtilities({
		            ".align-baseline": {
		                "vertical-align": "baseline"
		            },
		            ".align-top": {
		                "vertical-align": "top"
		            },
		            ".align-middle": {
		                "vertical-align": "middle"
		            },
		            ".align-bottom": {
		                "vertical-align": "bottom"
		            },
		            ".align-text-top": {
		                "vertical-align": "text-top"
		            },
		            ".align-text-bottom": {
		                "vertical-align": "text-bottom"
		            },
		            ".align-sub": {
		                "vertical-align": "sub"
		            },
		            ".align-super": {
		                "vertical-align": "super"
		            }
		        });
		        matchUtilities({
		            align: (value)=>({
		                    "vertical-align": value
		                })
		        });
		    },
		    fontFamily: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            font: (value)=>{
		                let [families, options = {}] = Array.isArray(value) && (0, _isPlainObject.default)(value[1]) ? value : [
		                    value
		                ];
		                let { fontFeatureSettings , fontVariationSettings  } = options;
		                return {
		                    "font-family": Array.isArray(families) ? families.join(", ") : families,
		                    ...fontFeatureSettings === undefined ? {} : {
		                        "font-feature-settings": fontFeatureSettings
		                    },
		                    ...fontVariationSettings === undefined ? {} : {
		                        "font-variation-settings": fontVariationSettings
		                    }
		                };
		            }
		        }, {
		            values: theme("fontFamily"),
		            type: [
		                "lookup",
		                "generic-name",
		                "family-name"
		            ]
		        });
		    },
		    fontSize: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            text: (value, { modifier  })=>{
		                let [fontSize, options] = Array.isArray(value) ? value : [
		                    value
		                ];
		                if (modifier) {
		                    return {
		                        "font-size": fontSize,
		                        "line-height": modifier
		                    };
		                }
		                let { lineHeight , letterSpacing , fontWeight  } = (0, _isPlainObject.default)(options) ? options : {
		                    lineHeight: options
		                };
		                return {
		                    "font-size": fontSize,
		                    ...lineHeight === undefined ? {} : {
		                        "line-height": lineHeight
		                    },
		                    ...letterSpacing === undefined ? {} : {
		                        "letter-spacing": letterSpacing
		                    },
		                    ...fontWeight === undefined ? {} : {
		                        "font-weight": fontWeight
		                    }
		                };
		            }
		        }, {
		            values: theme("fontSize"),
		            modifiers: theme("lineHeight"),
		            type: [
		                "absolute-size",
		                "relative-size",
		                "length",
		                "percentage"
		            ]
		        });
		    },
		    fontWeight: (0, _createUtilityPlugin.default)("fontWeight", [
		        [
		            "font",
		            [
		                "fontWeight"
		            ]
		        ]
		    ], {
		        type: [
		            "lookup",
		            "number",
		            "any"
		        ]
		    }),
		    textTransform: ({ addUtilities  })=>{
		        addUtilities({
		            ".uppercase": {
		                "text-transform": "uppercase"
		            },
		            ".lowercase": {
		                "text-transform": "lowercase"
		            },
		            ".capitalize": {
		                "text-transform": "capitalize"
		            },
		            ".normal-case": {
		                "text-transform": "none"
		            }
		        });
		    },
		    fontStyle: ({ addUtilities  })=>{
		        addUtilities({
		            ".italic": {
		                "font-style": "italic"
		            },
		            ".not-italic": {
		                "font-style": "normal"
		            }
		        });
		    },
		    fontVariantNumeric: ({ addDefaults , addUtilities  })=>{
		        let cssFontVariantNumericValue = "var(--tw-ordinal) var(--tw-slashed-zero) var(--tw-numeric-figure) var(--tw-numeric-spacing) var(--tw-numeric-fraction)";
		        addDefaults("font-variant-numeric", {
		            "--tw-ordinal": " ",
		            "--tw-slashed-zero": " ",
		            "--tw-numeric-figure": " ",
		            "--tw-numeric-spacing": " ",
		            "--tw-numeric-fraction": " "
		        });
		        addUtilities({
		            ".normal-nums": {
		                "font-variant-numeric": "normal"
		            },
		            ".ordinal": {
		                "@defaults font-variant-numeric": {},
		                "--tw-ordinal": "ordinal",
		                "font-variant-numeric": cssFontVariantNumericValue
		            },
		            ".slashed-zero": {
		                "@defaults font-variant-numeric": {},
		                "--tw-slashed-zero": "slashed-zero",
		                "font-variant-numeric": cssFontVariantNumericValue
		            },
		            ".lining-nums": {
		                "@defaults font-variant-numeric": {},
		                "--tw-numeric-figure": "lining-nums",
		                "font-variant-numeric": cssFontVariantNumericValue
		            },
		            ".oldstyle-nums": {
		                "@defaults font-variant-numeric": {},
		                "--tw-numeric-figure": "oldstyle-nums",
		                "font-variant-numeric": cssFontVariantNumericValue
		            },
		            ".proportional-nums": {
		                "@defaults font-variant-numeric": {},
		                "--tw-numeric-spacing": "proportional-nums",
		                "font-variant-numeric": cssFontVariantNumericValue
		            },
		            ".tabular-nums": {
		                "@defaults font-variant-numeric": {},
		                "--tw-numeric-spacing": "tabular-nums",
		                "font-variant-numeric": cssFontVariantNumericValue
		            },
		            ".diagonal-fractions": {
		                "@defaults font-variant-numeric": {},
		                "--tw-numeric-fraction": "diagonal-fractions",
		                "font-variant-numeric": cssFontVariantNumericValue
		            },
		            ".stacked-fractions": {
		                "@defaults font-variant-numeric": {},
		                "--tw-numeric-fraction": "stacked-fractions",
		                "font-variant-numeric": cssFontVariantNumericValue
		            }
		        });
		    },
		    lineHeight: (0, _createUtilityPlugin.default)("lineHeight", [
		        [
		            "leading",
		            [
		                "lineHeight"
		            ]
		        ]
		    ]),
		    letterSpacing: (0, _createUtilityPlugin.default)("letterSpacing", [
		        [
		            "tracking",
		            [
		                "letterSpacing"
		            ]
		        ]
		    ], {
		        supportsNegativeValues: true
		    }),
		    textColor: ({ matchUtilities , theme , corePlugins  })=>{
		        matchUtilities({
		            text: (value)=>{
		                if (!corePlugins("textOpacity")) {
		                    return {
		                        color: (0, _toColorValue.default)(value)
		                    };
		                }
		                return (0, _withAlphaVariable.default)({
		                    color: value,
		                    property: "color",
		                    variable: "--tw-text-opacity"
		                });
		            }
		        }, {
		            values: (0, _flattenColorPalette.default)(theme("textColor")),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    textOpacity: (0, _createUtilityPlugin.default)("textOpacity", [
		        [
		            "text-opacity",
		            [
		                "--tw-text-opacity"
		            ]
		        ]
		    ]),
		    textDecoration: ({ addUtilities  })=>{
		        addUtilities({
		            ".underline": {
		                "text-decoration-line": "underline"
		            },
		            ".overline": {
		                "text-decoration-line": "overline"
		            },
		            ".line-through": {
		                "text-decoration-line": "line-through"
		            },
		            ".no-underline": {
		                "text-decoration-line": "none"
		            }
		        });
		    },
		    textDecorationColor: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            decoration: (value)=>{
		                return {
		                    "text-decoration-color": (0, _toColorValue.default)(value)
		                };
		            }
		        }, {
		            values: (0, _flattenColorPalette.default)(theme("textDecorationColor")),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    textDecorationStyle: ({ addUtilities  })=>{
		        addUtilities({
		            ".decoration-solid": {
		                "text-decoration-style": "solid"
		            },
		            ".decoration-double": {
		                "text-decoration-style": "double"
		            },
		            ".decoration-dotted": {
		                "text-decoration-style": "dotted"
		            },
		            ".decoration-dashed": {
		                "text-decoration-style": "dashed"
		            },
		            ".decoration-wavy": {
		                "text-decoration-style": "wavy"
		            }
		        });
		    },
		    textDecorationThickness: (0, _createUtilityPlugin.default)("textDecorationThickness", [
		        [
		            "decoration",
		            [
		                "text-decoration-thickness"
		            ]
		        ]
		    ], {
		        type: [
		            "length",
		            "percentage"
		        ]
		    }),
		    textUnderlineOffset: (0, _createUtilityPlugin.default)("textUnderlineOffset", [
		        [
		            "underline-offset",
		            [
		                "text-underline-offset"
		            ]
		        ]
		    ], {
		        type: [
		            "length",
		            "percentage",
		            "any"
		        ]
		    }),
		    fontSmoothing: ({ addUtilities  })=>{
		        addUtilities({
		            ".antialiased": {
		                "-webkit-font-smoothing": "antialiased",
		                "-moz-osx-font-smoothing": "grayscale"
		            },
		            ".subpixel-antialiased": {
		                "-webkit-font-smoothing": "auto",
		                "-moz-osx-font-smoothing": "auto"
		            }
		        });
		    },
		    placeholderColor: ({ matchUtilities , theme , corePlugins  })=>{
		        matchUtilities({
		            placeholder: (value)=>{
		                if (!corePlugins("placeholderOpacity")) {
		                    return {
		                        "&::placeholder": {
		                            color: (0, _toColorValue.default)(value)
		                        }
		                    };
		                }
		                return {
		                    "&::placeholder": (0, _withAlphaVariable.default)({
		                        color: value,
		                        property: "color",
		                        variable: "--tw-placeholder-opacity"
		                    })
		                };
		            }
		        }, {
		            values: (0, _flattenColorPalette.default)(theme("placeholderColor")),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    placeholderOpacity: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "placeholder-opacity": (value)=>{
		                return {
		                    ["&::placeholder"]: {
		                        "--tw-placeholder-opacity": value
		                    }
		                };
		            }
		        }, {
		            values: theme("placeholderOpacity")
		        });
		    },
		    caretColor: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            caret: (value)=>{
		                return {
		                    "caret-color": (0, _toColorValue.default)(value)
		                };
		            }
		        }, {
		            values: (0, _flattenColorPalette.default)(theme("caretColor")),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    accentColor: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            accent: (value)=>{
		                return {
		                    "accent-color": (0, _toColorValue.default)(value)
		                };
		            }
		        }, {
		            values: (0, _flattenColorPalette.default)(theme("accentColor")),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    opacity: (0, _createUtilityPlugin.default)("opacity", [
		        [
		            "opacity",
		            [
		                "opacity"
		            ]
		        ]
		    ]),
		    backgroundBlendMode: ({ addUtilities  })=>{
		        addUtilities({
		            ".bg-blend-normal": {
		                "background-blend-mode": "normal"
		            },
		            ".bg-blend-multiply": {
		                "background-blend-mode": "multiply"
		            },
		            ".bg-blend-screen": {
		                "background-blend-mode": "screen"
		            },
		            ".bg-blend-overlay": {
		                "background-blend-mode": "overlay"
		            },
		            ".bg-blend-darken": {
		                "background-blend-mode": "darken"
		            },
		            ".bg-blend-lighten": {
		                "background-blend-mode": "lighten"
		            },
		            ".bg-blend-color-dodge": {
		                "background-blend-mode": "color-dodge"
		            },
		            ".bg-blend-color-burn": {
		                "background-blend-mode": "color-burn"
		            },
		            ".bg-blend-hard-light": {
		                "background-blend-mode": "hard-light"
		            },
		            ".bg-blend-soft-light": {
		                "background-blend-mode": "soft-light"
		            },
		            ".bg-blend-difference": {
		                "background-blend-mode": "difference"
		            },
		            ".bg-blend-exclusion": {
		                "background-blend-mode": "exclusion"
		            },
		            ".bg-blend-hue": {
		                "background-blend-mode": "hue"
		            },
		            ".bg-blend-saturation": {
		                "background-blend-mode": "saturation"
		            },
		            ".bg-blend-color": {
		                "background-blend-mode": "color"
		            },
		            ".bg-blend-luminosity": {
		                "background-blend-mode": "luminosity"
		            }
		        });
		    },
		    mixBlendMode: ({ addUtilities  })=>{
		        addUtilities({
		            ".mix-blend-normal": {
		                "mix-blend-mode": "normal"
		            },
		            ".mix-blend-multiply": {
		                "mix-blend-mode": "multiply"
		            },
		            ".mix-blend-screen": {
		                "mix-blend-mode": "screen"
		            },
		            ".mix-blend-overlay": {
		                "mix-blend-mode": "overlay"
		            },
		            ".mix-blend-darken": {
		                "mix-blend-mode": "darken"
		            },
		            ".mix-blend-lighten": {
		                "mix-blend-mode": "lighten"
		            },
		            ".mix-blend-color-dodge": {
		                "mix-blend-mode": "color-dodge"
		            },
		            ".mix-blend-color-burn": {
		                "mix-blend-mode": "color-burn"
		            },
		            ".mix-blend-hard-light": {
		                "mix-blend-mode": "hard-light"
		            },
		            ".mix-blend-soft-light": {
		                "mix-blend-mode": "soft-light"
		            },
		            ".mix-blend-difference": {
		                "mix-blend-mode": "difference"
		            },
		            ".mix-blend-exclusion": {
		                "mix-blend-mode": "exclusion"
		            },
		            ".mix-blend-hue": {
		                "mix-blend-mode": "hue"
		            },
		            ".mix-blend-saturation": {
		                "mix-blend-mode": "saturation"
		            },
		            ".mix-blend-color": {
		                "mix-blend-mode": "color"
		            },
		            ".mix-blend-luminosity": {
		                "mix-blend-mode": "luminosity"
		            },
		            ".mix-blend-plus-lighter": {
		                "mix-blend-mode": "plus-lighter"
		            }
		        });
		    },
		    boxShadow: (()=>{
		        let transformValue = (0, _transformThemeValue.default)("boxShadow");
		        let defaultBoxShadow = [
		            `var(--tw-ring-offset-shadow, 0 0 #0000)`,
		            `var(--tw-ring-shadow, 0 0 #0000)`,
		            `var(--tw-shadow)`
		        ].join(", ");
		        return function({ matchUtilities , addDefaults , theme  }) {
		            addDefaults(" box-shadow", {
		                "--tw-ring-offset-shadow": "0 0 #0000",
		                "--tw-ring-shadow": "0 0 #0000",
		                "--tw-shadow": "0 0 #0000",
		                "--tw-shadow-colored": "0 0 #0000"
		            });
		            matchUtilities({
		                shadow: (value)=>{
		                    value = transformValue(value);
		                    let ast = (0, _parseBoxShadowValue.parseBoxShadowValue)(value);
		                    for (let shadow of ast){
		                        // Don't override color if the whole shadow is a variable
		                        if (!shadow.valid) {
		                            continue;
		                        }
		                        shadow.color = "var(--tw-shadow-color)";
		                    }
		                    return {
		                        "@defaults box-shadow": {},
		                        "--tw-shadow": value === "none" ? "0 0 #0000" : value,
		                        "--tw-shadow-colored": value === "none" ? "0 0 #0000" : (0, _parseBoxShadowValue.formatBoxShadowValue)(ast),
		                        "box-shadow": defaultBoxShadow
		                    };
		                }
		            }, {
		                values: theme("boxShadow"),
		                type: [
		                    "shadow"
		                ]
		            });
		        };
		    })(),
		    boxShadowColor: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            shadow: (value)=>{
		                return {
		                    "--tw-shadow-color": (0, _toColorValue.default)(value),
		                    "--tw-shadow": "var(--tw-shadow-colored)"
		                };
		            }
		        }, {
		            values: (0, _flattenColorPalette.default)(theme("boxShadowColor")),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    outlineStyle: ({ addUtilities  })=>{
		        addUtilities({
		            ".outline-none": {
		                outline: "2px solid transparent",
		                "outline-offset": "2px"
		            },
		            ".outline": {
		                "outline-style": "solid"
		            },
		            ".outline-dashed": {
		                "outline-style": "dashed"
		            },
		            ".outline-dotted": {
		                "outline-style": "dotted"
		            },
		            ".outline-double": {
		                "outline-style": "double"
		            }
		        });
		    },
		    outlineWidth: (0, _createUtilityPlugin.default)("outlineWidth", [
		        [
		            "outline",
		            [
		                "outline-width"
		            ]
		        ]
		    ], {
		        type: [
		            "length",
		            "number",
		            "percentage"
		        ]
		    }),
		    outlineOffset: (0, _createUtilityPlugin.default)("outlineOffset", [
		        [
		            "outline-offset",
		            [
		                "outline-offset"
		            ]
		        ]
		    ], {
		        type: [
		            "length",
		            "number",
		            "percentage",
		            "any"
		        ],
		        supportsNegativeValues: true
		    }),
		    outlineColor: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            outline: (value)=>{
		                return {
		                    "outline-color": (0, _toColorValue.default)(value)
		                };
		            }
		        }, {
		            values: (0, _flattenColorPalette.default)(theme("outlineColor")),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    ringWidth: ({ matchUtilities , addDefaults , addUtilities , theme , config  })=>{
		        let ringColorDefault = (()=>{
		            var _theme, _theme1;
		            if ((0, _featureFlags.flagEnabled)(config(), "respectDefaultRingColorOpacity")) {
		                return theme("ringColor.DEFAULT");
		            }
		            let ringOpacityDefault = theme("ringOpacity.DEFAULT", "0.5");
		            if (!((_theme = theme("ringColor")) === null || _theme === void 0 ? void 0 : _theme.DEFAULT)) {
		                return `rgb(147 197 253 / ${ringOpacityDefault})`;
		            }
		            return (0, _withAlphaVariable.withAlphaValue)((_theme1 = theme("ringColor")) === null || _theme1 === void 0 ? void 0 : _theme1.DEFAULT, ringOpacityDefault, `rgb(147 197 253 / ${ringOpacityDefault})`);
		        })();
		        addDefaults("ring-width", {
		            "--tw-ring-inset": " ",
		            "--tw-ring-offset-width": theme("ringOffsetWidth.DEFAULT", "0px"),
		            "--tw-ring-offset-color": theme("ringOffsetColor.DEFAULT", "#fff"),
		            "--tw-ring-color": ringColorDefault,
		            "--tw-ring-offset-shadow": "0 0 #0000",
		            "--tw-ring-shadow": "0 0 #0000",
		            "--tw-shadow": "0 0 #0000",
		            "--tw-shadow-colored": "0 0 #0000"
		        });
		        matchUtilities({
		            ring: (value)=>{
		                return {
		                    "@defaults ring-width": {},
		                    "--tw-ring-offset-shadow": `var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color)`,
		                    "--tw-ring-shadow": `var(--tw-ring-inset) 0 0 0 calc(${value} + var(--tw-ring-offset-width)) var(--tw-ring-color)`,
		                    "box-shadow": [
		                        `var(--tw-ring-offset-shadow)`,
		                        `var(--tw-ring-shadow)`,
		                        `var(--tw-shadow, 0 0 #0000)`
		                    ].join(", ")
		                };
		            }
		        }, {
		            values: theme("ringWidth"),
		            type: "length"
		        });
		        addUtilities({
		            ".ring-inset": {
		                "@defaults ring-width": {},
		                "--tw-ring-inset": "inset"
		            }
		        });
		    },
		    ringColor: ({ matchUtilities , theme , corePlugins  })=>{
		        matchUtilities({
		            ring: (value)=>{
		                if (!corePlugins("ringOpacity")) {
		                    return {
		                        "--tw-ring-color": (0, _toColorValue.default)(value)
		                    };
		                }
		                return (0, _withAlphaVariable.default)({
		                    color: value,
		                    property: "--tw-ring-color",
		                    variable: "--tw-ring-opacity"
		                });
		            }
		        }, {
		            values: Object.fromEntries(Object.entries((0, _flattenColorPalette.default)(theme("ringColor"))).filter(([modifier])=>modifier !== "DEFAULT")),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    ringOpacity: (helpers)=>{
		        let { config  } = helpers;
		        return (0, _createUtilityPlugin.default)("ringOpacity", [
		            [
		                "ring-opacity",
		                [
		                    "--tw-ring-opacity"
		                ]
		            ]
		        ], {
		            filterDefault: !(0, _featureFlags.flagEnabled)(config(), "respectDefaultRingColorOpacity")
		        })(helpers);
		    },
		    ringOffsetWidth: (0, _createUtilityPlugin.default)("ringOffsetWidth", [
		        [
		            "ring-offset",
		            [
		                "--tw-ring-offset-width"
		            ]
		        ]
		    ], {
		        type: "length"
		    }),
		    ringOffsetColor: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "ring-offset": (value)=>{
		                return {
		                    "--tw-ring-offset-color": (0, _toColorValue.default)(value)
		                };
		            }
		        }, {
		            values: (0, _flattenColorPalette.default)(theme("ringOffsetColor")),
		            type: [
		                "color",
		                "any"
		            ]
		        });
		    },
		    blur: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            blur: (value)=>{
		                return {
		                    "--tw-blur": `blur(${value})`,
		                    "@defaults filter": {},
		                    filter: cssFilterValue
		                };
		            }
		        }, {
		            values: theme("blur")
		        });
		    },
		    brightness: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            brightness: (value)=>{
		                return {
		                    "--tw-brightness": `brightness(${value})`,
		                    "@defaults filter": {},
		                    filter: cssFilterValue
		                };
		            }
		        }, {
		            values: theme("brightness")
		        });
		    },
		    contrast: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            contrast: (value)=>{
		                return {
		                    "--tw-contrast": `contrast(${value})`,
		                    "@defaults filter": {},
		                    filter: cssFilterValue
		                };
		            }
		        }, {
		            values: theme("contrast")
		        });
		    },
		    dropShadow: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "drop-shadow": (value)=>{
		                return {
		                    "--tw-drop-shadow": Array.isArray(value) ? value.map((v)=>`drop-shadow(${v})`).join(" ") : `drop-shadow(${value})`,
		                    "@defaults filter": {},
		                    filter: cssFilterValue
		                };
		            }
		        }, {
		            values: theme("dropShadow")
		        });
		    },
		    grayscale: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            grayscale: (value)=>{
		                return {
		                    "--tw-grayscale": `grayscale(${value})`,
		                    "@defaults filter": {},
		                    filter: cssFilterValue
		                };
		            }
		        }, {
		            values: theme("grayscale")
		        });
		    },
		    hueRotate: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "hue-rotate": (value)=>{
		                return {
		                    "--tw-hue-rotate": `hue-rotate(${value})`,
		                    "@defaults filter": {},
		                    filter: cssFilterValue
		                };
		            }
		        }, {
		            values: theme("hueRotate"),
		            supportsNegativeValues: true
		        });
		    },
		    invert: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            invert: (value)=>{
		                return {
		                    "--tw-invert": `invert(${value})`,
		                    "@defaults filter": {},
		                    filter: cssFilterValue
		                };
		            }
		        }, {
		            values: theme("invert")
		        });
		    },
		    saturate: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            saturate: (value)=>{
		                return {
		                    "--tw-saturate": `saturate(${value})`,
		                    "@defaults filter": {},
		                    filter: cssFilterValue
		                };
		            }
		        }, {
		            values: theme("saturate")
		        });
		    },
		    sepia: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            sepia: (value)=>{
		                return {
		                    "--tw-sepia": `sepia(${value})`,
		                    "@defaults filter": {},
		                    filter: cssFilterValue
		                };
		            }
		        }, {
		            values: theme("sepia")
		        });
		    },
		    filter: ({ addDefaults , addUtilities  })=>{
		        addDefaults("filter", {
		            "--tw-blur": " ",
		            "--tw-brightness": " ",
		            "--tw-contrast": " ",
		            "--tw-grayscale": " ",
		            "--tw-hue-rotate": " ",
		            "--tw-invert": " ",
		            "--tw-saturate": " ",
		            "--tw-sepia": " ",
		            "--tw-drop-shadow": " "
		        });
		        addUtilities({
		            ".filter": {
		                "@defaults filter": {},
		                filter: cssFilterValue
		            },
		            ".filter-none": {
		                filter: "none"
		            }
		        });
		    },
		    backdropBlur: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "backdrop-blur": (value)=>{
		                return {
		                    "--tw-backdrop-blur": `blur(${value})`,
		                    "@defaults backdrop-filter": {},
		                    "backdrop-filter": cssBackdropFilterValue
		                };
		            }
		        }, {
		            values: theme("backdropBlur")
		        });
		    },
		    backdropBrightness: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "backdrop-brightness": (value)=>{
		                return {
		                    "--tw-backdrop-brightness": `brightness(${value})`,
		                    "@defaults backdrop-filter": {},
		                    "backdrop-filter": cssBackdropFilterValue
		                };
		            }
		        }, {
		            values: theme("backdropBrightness")
		        });
		    },
		    backdropContrast: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "backdrop-contrast": (value)=>{
		                return {
		                    "--tw-backdrop-contrast": `contrast(${value})`,
		                    "@defaults backdrop-filter": {},
		                    "backdrop-filter": cssBackdropFilterValue
		                };
		            }
		        }, {
		            values: theme("backdropContrast")
		        });
		    },
		    backdropGrayscale: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "backdrop-grayscale": (value)=>{
		                return {
		                    "--tw-backdrop-grayscale": `grayscale(${value})`,
		                    "@defaults backdrop-filter": {},
		                    "backdrop-filter": cssBackdropFilterValue
		                };
		            }
		        }, {
		            values: theme("backdropGrayscale")
		        });
		    },
		    backdropHueRotate: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "backdrop-hue-rotate": (value)=>{
		                return {
		                    "--tw-backdrop-hue-rotate": `hue-rotate(${value})`,
		                    "@defaults backdrop-filter": {},
		                    "backdrop-filter": cssBackdropFilterValue
		                };
		            }
		        }, {
		            values: theme("backdropHueRotate"),
		            supportsNegativeValues: true
		        });
		    },
		    backdropInvert: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "backdrop-invert": (value)=>{
		                return {
		                    "--tw-backdrop-invert": `invert(${value})`,
		                    "@defaults backdrop-filter": {},
		                    "backdrop-filter": cssBackdropFilterValue
		                };
		            }
		        }, {
		            values: theme("backdropInvert")
		        });
		    },
		    backdropOpacity: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "backdrop-opacity": (value)=>{
		                return {
		                    "--tw-backdrop-opacity": `opacity(${value})`,
		                    "@defaults backdrop-filter": {},
		                    "backdrop-filter": cssBackdropFilterValue
		                };
		            }
		        }, {
		            values: theme("backdropOpacity")
		        });
		    },
		    backdropSaturate: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "backdrop-saturate": (value)=>{
		                return {
		                    "--tw-backdrop-saturate": `saturate(${value})`,
		                    "@defaults backdrop-filter": {},
		                    "backdrop-filter": cssBackdropFilterValue
		                };
		            }
		        }, {
		            values: theme("backdropSaturate")
		        });
		    },
		    backdropSepia: ({ matchUtilities , theme  })=>{
		        matchUtilities({
		            "backdrop-sepia": (value)=>{
		                return {
		                    "--tw-backdrop-sepia": `sepia(${value})`,
		                    "@defaults backdrop-filter": {},
		                    "backdrop-filter": cssBackdropFilterValue
		                };
		            }
		        }, {
		            values: theme("backdropSepia")
		        });
		    },
		    backdropFilter: ({ addDefaults , addUtilities  })=>{
		        addDefaults("backdrop-filter", {
		            "--tw-backdrop-blur": " ",
		            "--tw-backdrop-brightness": " ",
		            "--tw-backdrop-contrast": " ",
		            "--tw-backdrop-grayscale": " ",
		            "--tw-backdrop-hue-rotate": " ",
		            "--tw-backdrop-invert": " ",
		            "--tw-backdrop-opacity": " ",
		            "--tw-backdrop-saturate": " ",
		            "--tw-backdrop-sepia": " "
		        });
		        addUtilities({
		            ".backdrop-filter": {
		                "@defaults backdrop-filter": {},
		                "backdrop-filter": cssBackdropFilterValue
		            },
		            ".backdrop-filter-none": {
		                "backdrop-filter": "none"
		            }
		        });
		    },
		    transitionProperty: ({ matchUtilities , theme  })=>{
		        let defaultTimingFunction = theme("transitionTimingFunction.DEFAULT");
		        let defaultDuration = theme("transitionDuration.DEFAULT");
		        matchUtilities({
		            transition: (value)=>{
		                return {
		                    "transition-property": value,
		                    ...value === "none" ? {} : {
		                        "transition-timing-function": defaultTimingFunction,
		                        "transition-duration": defaultDuration
		                    }
		                };
		            }
		        }, {
		            values: theme("transitionProperty")
		        });
		    },
		    transitionDelay: (0, _createUtilityPlugin.default)("transitionDelay", [
		        [
		            "delay",
		            [
		                "transitionDelay"
		            ]
		        ]
		    ]),
		    transitionDuration: (0, _createUtilityPlugin.default)("transitionDuration", [
		        [
		            "duration",
		            [
		                "transitionDuration"
		            ]
		        ]
		    ], {
		        filterDefault: true
		    }),
		    transitionTimingFunction: (0, _createUtilityPlugin.default)("transitionTimingFunction", [
		        [
		            "ease",
		            [
		                "transitionTimingFunction"
		            ]
		        ]
		    ], {
		        filterDefault: true
		    }),
		    willChange: (0, _createUtilityPlugin.default)("willChange", [
		        [
		            "will-change",
		            [
		                "will-change"
		            ]
		        ]
		    ]),
		    content: (0, _createUtilityPlugin.default)("content", [
		        [
		            "content",
		            [
		                "--tw-content",
		                [
		                    "content",
		                    "var(--tw-content)"
		                ]
		            ]
		        ]
		    ])
		};
} (corePlugins));
	return corePlugins;
}

var isSyntacticallyValidPropertyValue = {};

var hasRequiredIsSyntacticallyValidPropertyValue;

function requireIsSyntacticallyValidPropertyValue () {
	if (hasRequiredIsSyntacticallyValidPropertyValue) return isSyntacticallyValidPropertyValue;
	hasRequiredIsSyntacticallyValidPropertyValue = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, // Arbitrary values must contain balanced brackets (), [] and {}. Escaped
		// values don't count, and brackets inside quotes also don't count.
		//
		// E.g.: w-[this-is]w-[weird-and-invalid]
		// E.g.: w-[this-is\\]w-\\[weird-but-valid]
		// E.g.: content-['this-is-also-valid]-weirdly-enough']
		"default", {
		    enumerable: true,
		    get: ()=>isSyntacticallyValidPropertyValue
		});
		let matchingBrackets = new Map([
		    [
		        "{",
		        "}"
		    ],
		    [
		        "[",
		        "]"
		    ],
		    [
		        "(",
		        ")"
		    ]
		]);
		let inverseMatchingBrackets = new Map(Array.from(matchingBrackets.entries()).map(([k, v])=>[
		        v,
		        k
		    ]));
		let quotes = new Set([
		    '"',
		    "'",
		    "`"
		]);
		function isSyntacticallyValidPropertyValue(value) {
		    let stack = [];
		    let inQuotes = false;
		    for(let i = 0; i < value.length; i++){
		        let char = value[i];
		        if (char === ":" && !inQuotes && stack.length === 0) {
		            return false;
		        }
		        // Non-escaped quotes allow us to "allow" anything in between
		        if (quotes.has(char) && value[i - 1] !== "\\") {
		            inQuotes = !inQuotes;
		        }
		        if (inQuotes) continue;
		        if (value[i - 1] === "\\") continue; // Escaped
		        if (matchingBrackets.has(char)) {
		            stack.push(char);
		        } else if (inverseMatchingBrackets.has(char)) {
		            let inverse = inverseMatchingBrackets.get(char);
		            // Nothing to pop from, therefore it is unbalanced
		            if (stack.length <= 0) {
		                return false;
		            }
		            // Popped value must match the inverse value, otherwise it is unbalanced
		            if (stack.pop() !== inverse) {
		                return false;
		            }
		        }
		    }
		    // If there is still something on the stack, it is also unbalanced
		    if (stack.length > 0) {
		        return false;
		    }
		    // All good, totally balanced!
		    return true;
		}
} (isSyntacticallyValidPropertyValue));
	return isSyntacticallyValidPropertyValue;
}

var generateRules = {};

var formatVariantSelector = {};

var hasRequiredFormatVariantSelector;

function requireFormatVariantSelector () {
	if (hasRequiredFormatVariantSelector) return formatVariantSelector;
	hasRequiredFormatVariantSelector = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    formatVariantSelector: ()=>formatVariantSelector,
		    eliminateIrrelevantSelectors: ()=>eliminateIrrelevantSelectors,
		    finalizeSelector: ()=>finalizeSelector,
		    handleMergePseudo: ()=>handleMergePseudo,
		    collectPseudoElements: ()=>collectPseudoElements,
		    sortSelector: ()=>sortSelector
		});
		const _postcssSelectorParser = /*#__PURE__*/ _interopRequireDefault(requireDist());
		const _unesc = /*#__PURE__*/ _interopRequireDefault(requireUnesc());
		const _escapeClassName = /*#__PURE__*/ _interopRequireDefault(requireEscapeClassName());
		const _prefixSelector = /*#__PURE__*/ _interopRequireDefault(requirePrefixSelector());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		/** @typedef {import('postcss-selector-parser').Root} Root */ /** @typedef {import('postcss-selector-parser').Selector} Selector */ /** @typedef {import('postcss-selector-parser').Pseudo} Pseudo */ /** @typedef {import('postcss-selector-parser').Node} Node */ /** @typedef {{format: string, isArbitraryVariant: boolean}[]} RawFormats */ /** @typedef {import('postcss-selector-parser').Root} ParsedFormats */ /** @typedef {RawFormats | ParsedFormats} AcceptedFormats */ let MERGE = ":merge";
		function formatVariantSelector(formats, { context , candidate  }) {
		    var _context_tailwindConfig_prefix;
		    let prefix = (_context_tailwindConfig_prefix = context === null || context === void 0 ? void 0 : context.tailwindConfig.prefix) !== null && _context_tailwindConfig_prefix !== void 0 ? _context_tailwindConfig_prefix : "";
		    // Parse the format selector into an AST
		    let parsedFormats = formats.map((format)=>{
		        let ast = (0, _postcssSelectorParser.default)().astSync(format.format);
		        return {
		            ...format,
		            ast: format.isArbitraryVariant ? ast : (0, _prefixSelector.default)(prefix, ast)
		        };
		    });
		    // We start with the candidate selector
		    let formatAst = _postcssSelectorParser.default.root({
		        nodes: [
		            _postcssSelectorParser.default.selector({
		                nodes: [
		                    _postcssSelectorParser.default.className({
		                        value: (0, _escapeClassName.default)(candidate)
		                    })
		                ]
		            })
		        ]
		    });
		    // And iteratively merge each format selector into the candidate selector
		    for (let { ast  } of parsedFormats){
		        [formatAst, ast] = handleMergePseudo(formatAst, ast);
		        // 2. Merge the format selector into the current selector AST
		        ast.walkNesting((nesting)=>nesting.replaceWith(...formatAst.nodes[0].nodes));
		        // 3. Keep going!
		        formatAst = ast;
		    }
		    return formatAst;
		}
		/**
		 * Given any node in a selector this gets the "simple" selector it's a part of
		 * A simple selector is just a list of nodes without any combinators
		 * Technically :is(), :not(), :has(), etc… can have combinators but those are nested
		 * inside the relevant node and won't be picked up so they're fine to ignore
		 *
		 * @param {Node} node
		 * @returns {Node[]}
		 **/ function simpleSelectorForNode(node) {
		    /** @type {Node[]} */ let nodes = [];
		    // Walk backwards until we hit a combinator node (or the start)
		    while(node.prev() && node.prev().type !== "combinator"){
		        node = node.prev();
		    }
		    // Now record all non-combinator nodes until we hit one (or the end)
		    while(node && node.type !== "combinator"){
		        nodes.push(node);
		        node = node.next();
		    }
		    return nodes;
		}
		/**
		 * Resorts the nodes in a selector to ensure they're in the correct order
		 * Tags go before classes, and pseudo classes go after classes
		 *
		 * @param {Selector} sel
		 * @returns {Selector}
		 **/ function resortSelector(sel) {
		    sel.sort((a, b)=>{
		        if (a.type === "tag" && b.type === "class") {
		            return -1;
		        } else if (a.type === "class" && b.type === "tag") {
		            return 1;
		        } else if (a.type === "class" && b.type === "pseudo" && b.value.startsWith("::")) {
		            return -1;
		        } else if (a.type === "pseudo" && a.value.startsWith("::") && b.type === "class") {
		            return 1;
		        }
		        return sel.index(a) - sel.index(b);
		    });
		    return sel;
		}
		function eliminateIrrelevantSelectors(sel, base) {
		    let hasClassesMatchingCandidate = false;
		    sel.walk((child)=>{
		        if (child.type === "class" && child.value === base) {
		            hasClassesMatchingCandidate = true;
		            return false // Stop walking
		            ;
		        }
		    });
		    if (!hasClassesMatchingCandidate) {
		        sel.remove();
		    }
		// We do NOT recursively eliminate sub selectors that don't have the base class
		// as this is NOT a safe operation. For example, if we have:
		// `.space-x-2 > :not([hidden]) ~ :not([hidden])`
		// We cannot remove the [hidden] from the :not() because it would change the
		// meaning of the selector.
		// TODO: Can we do this for :matches, :is, and :where?
		}
		function finalizeSelector(current, formats, { context , candidate , base  }) {
		    var _context_tailwindConfig;
		    var _context_tailwindConfig_separator;
		    let separator = (_context_tailwindConfig_separator = context === null || context === void 0 ? void 0 : (_context_tailwindConfig = context.tailwindConfig) === null || _context_tailwindConfig === void 0 ? void 0 : _context_tailwindConfig.separator) !== null && _context_tailwindConfig_separator !== void 0 ? _context_tailwindConfig_separator : ":";
		    // Split by the separator, but ignore the separator inside square brackets:
		    //
		    // E.g.: dark:lg:hover:[paint-order:markers]
		    //           ┬  ┬     ┬            ┬
		    //           │  │     │            ╰── We will not split here
		    //           ╰──┴─────┴─────────────── We will split here
		    //
		    base = base !== null && base !== void 0 ? base : candidate.split(new RegExp(`\\${separator}(?![^[]*\\])`)).pop();
		    // Parse the selector into an AST
		    let selector = (0, _postcssSelectorParser.default)().astSync(current);
		    // Normalize escaped classes, e.g.:
		    //
		    // The idea would be to replace the escaped `base` in the selector with the
		    // `format`. However, in css you can escape the same selector in a few
		    // different ways. This would result in different strings and therefore we
		    // can't replace it properly.
		    //
		    //               base: bg-[rgb(255,0,0)]
		    //   base in selector: bg-\\[rgb\\(255\\,0\\,0\\)\\]
		    //       escaped base: bg-\\[rgb\\(255\\2c 0\\2c 0\\)\\]
		    //
		    selector.walkClasses((node)=>{
		        if (node.raws && node.value.includes(base)) {
		            node.raws.value = (0, _escapeClassName.default)((0, _unesc.default)(node.raws.value));
		        }
		    });
		    // Remove extraneous selectors that do not include the base candidate
		    selector.each((sel)=>eliminateIrrelevantSelectors(sel, base));
		    // If there are no formats that means there were no variants added to the candidate
		    // so we can just return the selector as-is
		    let formatAst = Array.isArray(formats) ? formatVariantSelector(formats, {
		        context,
		        candidate
		    }) : formats;
		    if (formatAst === null) {
		        return selector.toString();
		    }
		    let simpleStart = _postcssSelectorParser.default.comment({
		        value: "/*__simple__*/"
		    });
		    let simpleEnd = _postcssSelectorParser.default.comment({
		        value: "/*__simple__*/"
		    });
		    // We can safely replace the escaped base now, since the `base` section is
		    // now in a normalized escaped value.
		    selector.walkClasses((node)=>{
		        if (node.value !== base) {
		            return;
		        }
		        let parent = node.parent;
		        let formatNodes = formatAst.nodes[0].nodes;
		        // Perf optimization: if the parent is a single class we can just replace it and be done
		        if (parent.nodes.length === 1) {
		            node.replaceWith(...formatNodes);
		            return;
		        }
		        let simpleSelector = simpleSelectorForNode(node);
		        parent.insertBefore(simpleSelector[0], simpleStart);
		        parent.insertAfter(simpleSelector[simpleSelector.length - 1], simpleEnd);
		        for (let child of formatNodes){
		            parent.insertBefore(simpleSelector[0], child.clone());
		        }
		        node.remove();
		        // Re-sort the simple selector to ensure it's in the correct order
		        simpleSelector = simpleSelectorForNode(simpleStart);
		        let firstNode = parent.index(simpleStart);
		        parent.nodes.splice(firstNode, simpleSelector.length, ...resortSelector(_postcssSelectorParser.default.selector({
		            nodes: simpleSelector
		        })).nodes);
		        simpleStart.remove();
		        simpleEnd.remove();
		    });
		    // Remove unnecessary pseudo selectors that we used as placeholders
		    selector.walkPseudos((p)=>{
		        if (p.value === MERGE) {
		            p.replaceWith(p.nodes);
		        }
		    });
		    // Move pseudo elements to the end of the selector (if necessary)
		    selector.each((sel)=>{
		        let [pseudoElements] = collectPseudoElements(sel);
		        if (pseudoElements.length > 0) {
		            sel.nodes.push(...pseudoElements.sort(sortSelector));
		        }
		    });
		    return selector.toString();
		}
		function handleMergePseudo(selector, format) {
		    /** @type {{pseudo: Pseudo, value: string}[]} */ let merges = [];
		    // Find all :merge() pseudo-classes in `selector`
		    selector.walkPseudos((pseudo)=>{
		        if (pseudo.value === MERGE) {
		            merges.push({
		                pseudo,
		                value: pseudo.nodes[0].toString()
		            });
		        }
		    });
		    // Find all :merge() "attachments" in `format` and attach them to the matching selector in `selector`
		    format.walkPseudos((pseudo)=>{
		        if (pseudo.value !== MERGE) {
		            return;
		        }
		        let value = pseudo.nodes[0].toString();
		        // Does `selector` contain a :merge() pseudo-class with the same value?
		        let existing = merges.find((merge)=>merge.value === value);
		        // Nope so there's nothing to do
		        if (!existing) {
		            return;
		        }
		        // Everything after `:merge()` up to the next combinator is what is attached to the merged selector
		        let attachments = [];
		        let next = pseudo.next();
		        while(next && next.type !== "combinator"){
		            attachments.push(next);
		            next = next.next();
		        }
		        let combinator = next;
		        existing.pseudo.parent.insertAfter(existing.pseudo, _postcssSelectorParser.default.selector({
		            nodes: attachments.map((node)=>node.clone())
		        }));
		        pseudo.remove();
		        attachments.forEach((node)=>node.remove());
		        // What about this case:
		        // :merge(.group):focus > &
		        // :merge(.group):hover &
		        if (combinator && combinator.type === "combinator") {
		            combinator.remove();
		        }
		    });
		    return [
		        selector,
		        format
		    ];
		}
		// Note: As a rule, double colons (::) should be used instead of a single colon
		// (:). This distinguishes pseudo-classes from pseudo-elements. However, since
		// this distinction was not present in older versions of the W3C spec, most
		// browsers support both syntaxes for the original pseudo-elements.
		let pseudoElementsBC = [
		    ":before",
		    ":after",
		    ":first-line",
		    ":first-letter"
		];
		// These pseudo-elements _can_ be combined with other pseudo selectors AND the order does matter.
		let pseudoElementExceptions = [
		    "::file-selector-button",
		    // Webkit scroll bar pseudo elements can be combined with user-action pseudo classes
		    "::-webkit-scrollbar",
		    "::-webkit-scrollbar-button",
		    "::-webkit-scrollbar-thumb",
		    "::-webkit-scrollbar-track",
		    "::-webkit-scrollbar-track-piece",
		    "::-webkit-scrollbar-corner",
		    "::-webkit-resizer"
		];
		function collectPseudoElements(selector, force = false) {
		    /** @type {Node[]} */ let nodes = [];
		    let seenPseudoElement = null;
		    for (let node of [
		        ...selector.nodes
		    ]){
		        if (isPseudoElement(node, force)) {
		            nodes.push(node);
		            selector.removeChild(node);
		            seenPseudoElement = node.value;
		        } else if (seenPseudoElement !== null) {
		            if (pseudoElementExceptions.includes(seenPseudoElement) && isPseudoClass(node, force)) {
		                nodes.push(node);
		                selector.removeChild(node);
		            } else {
		                seenPseudoElement = null;
		            }
		        }
		        if (node === null || node === void 0 ? void 0 : node.nodes) {
		            let hasPseudoElementRestrictions = node.type === "pseudo" && (node.value === ":is" || node.value === ":has");
		            let [collected, seenPseudoElementInSelector] = collectPseudoElements(node, force || hasPseudoElementRestrictions);
		            if (seenPseudoElementInSelector) {
		                seenPseudoElement = seenPseudoElementInSelector;
		            }
		            nodes.push(...collected);
		        }
		    }
		    return [
		        nodes,
		        seenPseudoElement
		    ];
		}
		function sortSelector(a, z) {
		    // Both nodes are non-pseudo's so we can safely ignore them and keep
		    // them in the same order.
		    if (a.type !== "pseudo" && z.type !== "pseudo") {
		        return 0;
		    }
		    // If one of them is a combinator, we need to keep it in the same order
		    // because that means it will start a new "section" in the selector.
		    if (a.type === "combinator" ^ z.type === "combinator") {
		        return 0;
		    }
		    // One of the items is a pseudo and the other one isn't. Let's move
		    // the pseudo to the right.
		    if (a.type === "pseudo" ^ z.type === "pseudo") {
		        return (a.type === "pseudo") - (z.type === "pseudo");
		    }
		    // Both are pseudo's, move the pseudo elements (except for
		    // ::file-selector-button) to the right.
		    return isPseudoElement(a) - isPseudoElement(z);
		}
		function isPseudoElement(node, force = false) {
		    if (node.type !== "pseudo") return false;
		    if (pseudoElementExceptions.includes(node.value) && !force) return false;
		    return node.value.startsWith("::") || pseudoElementsBC.includes(node.value);
		}
		function isPseudoClass(node, force) {
		    return node.type === "pseudo" && !isPseudoElement(node, force);
		}
} (formatVariantSelector));
	return formatVariantSelector;
}

var applyImportantSelector = {};

var hasRequiredApplyImportantSelector;

function requireApplyImportantSelector () {
	if (hasRequiredApplyImportantSelector) return applyImportantSelector;
	hasRequiredApplyImportantSelector = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "applyImportantSelector", {
		    enumerable: true,
		    get: ()=>applyImportantSelector
		});
		const _postcssSelectorParser = /*#__PURE__*/ _interopRequireDefault(requireDist());
		const _formatVariantSelectorJs = requireFormatVariantSelector();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function applyImportantSelector(selector, important) {
		    let sel = (0, _postcssSelectorParser.default)().astSync(selector);
		    sel.each((sel)=>{
		        // Wrap with :is if it's not already wrapped
		        let isWrapped = sel.nodes[0].type === "pseudo" && sel.nodes[0].value === ":is" && sel.nodes.every((node)=>node.type !== "combinator");
		        if (!isWrapped) {
		            sel.nodes = [
		                _postcssSelectorParser.default.pseudo({
		                    value: ":is",
		                    nodes: [
		                        sel.clone()
		                    ]
		                })
		            ];
		        }
		        let [pseudoElements] = (0, _formatVariantSelectorJs.collectPseudoElements)(sel);
		        if (pseudoElements.length > 0) {
		            sel.nodes.push(...pseudoElements.sort(_formatVariantSelectorJs.sortSelector));
		        }
		    });
		    return `${important} ${sel.toString()}`;
		}
} (applyImportantSelector));
	return applyImportantSelector;
}

var hasRequiredGenerateRules;

function requireGenerateRules () {
	if (hasRequiredGenerateRules) return generateRules;
	hasRequiredGenerateRules = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    getClassNameFromSelector: ()=>getClassNameFromSelector,
		    resolveMatches: ()=>resolveMatches,
		    generateRules: ()=>generateRules
		});
		const _postcss = /*#__PURE__*/ _interopRequireDefault(requirePostcss());
		const _postcssSelectorParser = /*#__PURE__*/ _interopRequireDefault(requireDist());
		const _parseObjectStyles = /*#__PURE__*/ _interopRequireDefault(requireParseObjectStyles());
		const _isPlainObject = /*#__PURE__*/ _interopRequireDefault(requireIsPlainObject());
		const _prefixSelector = /*#__PURE__*/ _interopRequireDefault(requirePrefixSelector());
		const _pluginUtils = requirePluginUtils();
		const _log = /*#__PURE__*/ _interopRequireDefault(requireLog());
		const _sharedState = /*#__PURE__*/ _interopRequireWildcard(requireSharedState());
		const _formatVariantSelector = requireFormatVariantSelector();
		const _nameClass = requireNameClass();
		const _dataTypes = requireDataTypes();
		const _setupContextUtils = requireSetupContextUtils();
		const _isSyntacticallyValidPropertyValue = /*#__PURE__*/ _interopRequireDefault(requireIsSyntacticallyValidPropertyValue());
		const _splitAtTopLevelOnlyJs = requireSplitAtTopLevelOnly();
		const _featureFlags = requireFeatureFlags();
		const _applyImportantSelector = requireApplyImportantSelector();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function _getRequireWildcardCache(nodeInterop) {
		    if (typeof WeakMap !== "function") return null;
		    var cacheBabelInterop = new WeakMap();
		    var cacheNodeInterop = new WeakMap();
		    return (_getRequireWildcardCache = function(nodeInterop) {
		        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
		    })(nodeInterop);
		}
		function _interopRequireWildcard(obj, nodeInterop) {
		    if (!nodeInterop && obj && obj.__esModule) {
		        return obj;
		    }
		    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
		        return {
		            default: obj
		        };
		    }
		    var cache = _getRequireWildcardCache(nodeInterop);
		    if (cache && cache.has(obj)) {
		        return cache.get(obj);
		    }
		    var newObj = {};
		    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		    for(var key in obj){
		        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
		            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
		            if (desc && (desc.get || desc.set)) {
		                Object.defineProperty(newObj, key, desc);
		            } else {
		                newObj[key] = obj[key];
		            }
		        }
		    }
		    newObj.default = obj;
		    if (cache) {
		        cache.set(obj, newObj);
		    }
		    return newObj;
		}
		let classNameParser = (0, _postcssSelectorParser.default)((selectors)=>{
		    return selectors.first.filter(({ type  })=>type === "class").pop().value;
		});
		function getClassNameFromSelector(selector) {
		    return classNameParser.transformSync(selector);
		}
		// Generate match permutations for a class candidate, like:
		// ['ring-offset-blue', '100']
		// ['ring-offset', 'blue-100']
		// ['ring', 'offset-blue-100']
		// Example with dynamic classes:
		// ['grid-cols', '[[linename],1fr,auto]']
		// ['grid', 'cols-[[linename],1fr,auto]']
		function* candidatePermutations(candidate) {
		    let lastIndex = Infinity;
		    while(lastIndex >= 0){
		        let dashIdx;
		        let wasSlash = false;
		        if (lastIndex === Infinity && candidate.endsWith("]")) {
		            let bracketIdx = candidate.indexOf("[");
		            // If character before `[` isn't a dash or a slash, this isn't a dynamic class
		            // eg. string[]
		            if (candidate[bracketIdx - 1] === "-") {
		                dashIdx = bracketIdx - 1;
		            } else if (candidate[bracketIdx - 1] === "/") {
		                dashIdx = bracketIdx - 1;
		                wasSlash = true;
		            } else {
		                dashIdx = -1;
		            }
		        } else if (lastIndex === Infinity && candidate.includes("/")) {
		            dashIdx = candidate.lastIndexOf("/");
		            wasSlash = true;
		        } else {
		            dashIdx = candidate.lastIndexOf("-", lastIndex);
		        }
		        if (dashIdx < 0) {
		            break;
		        }
		        let prefix = candidate.slice(0, dashIdx);
		        let modifier = candidate.slice(wasSlash ? dashIdx : dashIdx + 1);
		        lastIndex = dashIdx - 1;
		        // TODO: This feels a bit hacky
		        if (prefix === "" || modifier === "/") {
		            continue;
		        }
		        yield [
		            prefix,
		            modifier
		        ];
		    }
		}
		function applyPrefix(matches, context) {
		    if (matches.length === 0 || context.tailwindConfig.prefix === "") {
		        return matches;
		    }
		    for (let match of matches){
		        let [meta] = match;
		        if (meta.options.respectPrefix) {
		            let container = _postcss.default.root({
		                nodes: [
		                    match[1].clone()
		                ]
		            });
		            let classCandidate = match[1].raws.tailwind.classCandidate;
		            container.walkRules((r)=>{
		                // If this is a negative utility with a dash *before* the prefix we
		                // have to ensure that the generated selector matches the candidate
		                // Not doing this will cause `-tw-top-1` to generate the class `.tw--top-1`
		                // The disconnect between candidate <-> class can cause @apply to hard crash.
		                let shouldPrependNegative = classCandidate.startsWith("-");
		                r.selector = (0, _prefixSelector.default)(context.tailwindConfig.prefix, r.selector, shouldPrependNegative);
		            });
		            match[1] = container.nodes[0];
		        }
		    }
		    return matches;
		}
		function applyImportant(matches, classCandidate) {
		    if (matches.length === 0) {
		        return matches;
		    }
		    let result = [];
		    for (let [meta, rule] of matches){
		        let container = _postcss.default.root({
		            nodes: [
		                rule.clone()
		            ]
		        });
		        container.walkRules((r)=>{
		            let ast = (0, _postcssSelectorParser.default)().astSync(r.selector);
		            // Remove extraneous selectors that do not include the base candidate
		            ast.each((sel)=>(0, _formatVariantSelector.eliminateIrrelevantSelectors)(sel, classCandidate));
		            // Update all instances of the base candidate to include the important marker
		            (0, _pluginUtils.updateAllClasses)(ast, (className)=>className === classCandidate ? `!${className}` : className);
		            r.selector = ast.toString();
		            r.walkDecls((d)=>d.important = true);
		        });
		        result.push([
		            {
		                ...meta,
		                important: true
		            },
		            container.nodes[0]
		        ]);
		    }
		    return result;
		}
		// Takes a list of rule tuples and applies a variant like `hover`, sm`,
		// whatever to it. We used to do some extra caching here to avoid generating
		// a variant of the same rule more than once, but this was never hit because
		// we cache at the entire selector level further up the tree.
		//
		// Technically you can get a cache hit if you have `hover:focus:text-center`
		// and `focus:hover:text-center` in the same project, but it doesn't feel
		// worth the complexity for that case.
		function applyVariant(variant, matches, context) {
		    if (matches.length === 0) {
		        return matches;
		    }
		    /** @type {{modifier: string | null, value: string | null}} */ let args = {
		        modifier: null,
		        value: _sharedState.NONE
		    };
		    // Retrieve "modifier"
		    {
		        let [baseVariant, ...modifiers] = (0, _splitAtTopLevelOnlyJs.splitAtTopLevelOnly)(variant, "/");
		        // This is a hack to support variants with `/` in them, like `ar-1/10/20:text-red-500`
		        // In this case 1/10 is a value but /20 is a modifier
		        if (modifiers.length > 1) {
		            baseVariant = baseVariant + "/" + modifiers.slice(0, -1).join("/");
		            modifiers = modifiers.slice(-1);
		        }
		        if (modifiers.length && !context.variantMap.has(variant)) {
		            variant = baseVariant;
		            args.modifier = modifiers[0];
		            if (!(0, _featureFlags.flagEnabled)(context.tailwindConfig, "generalizedModifiers")) {
		                return [];
		            }
		        }
		    }
		    // Retrieve "arbitrary value"
		    if (variant.endsWith("]") && !variant.startsWith("[")) {
		        // We either have:
		        //   @[200px]
		        //   group-[:hover]
		        //
		        // But we don't want:
		        //   @-[200px]        (`-` is incorrect)
		        //   group[:hover]    (`-` is missing)
		        let match = /(.)(-?)\[(.*)\]/g.exec(variant);
		        if (match) {
		            let [, char, seperator, value] = match;
		            // @-[200px] case
		            if (char === "@" && seperator === "-") return [];
		            // group[:hover] case
		            if (char !== "@" && seperator === "") return [];
		            variant = variant.replace(`${seperator}[${value}]`, "");
		            args.value = value;
		        }
		    }
		    // Register arbitrary variants
		    if (isArbitraryValue(variant) && !context.variantMap.has(variant)) {
		        let sort = context.offsets.recordVariant(variant);
		        let selector = (0, _dataTypes.normalize)(variant.slice(1, -1));
		        let selectors = (0, _splitAtTopLevelOnlyJs.splitAtTopLevelOnly)(selector, ",");
		        // We do not support multiple selectors for arbitrary variants
		        if (selectors.length > 1) {
		            return [];
		        }
		        if (!selectors.every(_setupContextUtils.isValidVariantFormatString)) {
		            return [];
		        }
		        let records = selectors.map((sel, idx)=>[
		                context.offsets.applyParallelOffset(sort, idx),
		                (0, _setupContextUtils.parseVariant)(sel.trim())
		            ]);
		        context.variantMap.set(variant, records);
		    }
		    if (context.variantMap.has(variant)) {
		        let isArbitraryVariant = isArbitraryValue(variant);
		        let variantFunctionTuples = context.variantMap.get(variant).slice();
		        let result = [];
		        for (let [meta, rule] of matches){
		            // Don't generate variants for user css
		            if (meta.layer === "user") {
		                continue;
		            }
		            let container = _postcss.default.root({
		                nodes: [
		                    rule.clone()
		                ]
		            });
		            for (let [variantSort, variantFunction, containerFromArray] of variantFunctionTuples){
		                let clone = (containerFromArray !== null && containerFromArray !== void 0 ? containerFromArray : container).clone();
		                let collectedFormats = [];
		                function prepareBackup() {
		                    // Already prepared, chicken out
		                    if (clone.raws.neededBackup) {
		                        return;
		                    }
		                    clone.raws.neededBackup = true;
		                    clone.walkRules((rule)=>rule.raws.originalSelector = rule.selector);
		                }
		                function modifySelectors(modifierFunction) {
		                    prepareBackup();
		                    clone.each((rule)=>{
		                        if (rule.type !== "rule") {
		                            return;
		                        }
		                        rule.selectors = rule.selectors.map((selector)=>{
		                            return modifierFunction({
		                                get className () {
		                                    return getClassNameFromSelector(selector);
		                                },
		                                selector
		                            });
		                        });
		                    });
		                    return clone;
		                }
		                let ruleWithVariant = variantFunction({
		                    // Public API
		                    get container () {
		                        prepareBackup();
		                        return clone;
		                    },
		                    separator: context.tailwindConfig.separator,
		                    modifySelectors,
		                    // Private API for now
		                    wrap (wrapper) {
		                        let nodes = clone.nodes;
		                        clone.removeAll();
		                        wrapper.append(nodes);
		                        clone.append(wrapper);
		                    },
		                    format (selectorFormat) {
		                        collectedFormats.push({
		                            format: selectorFormat,
		                            isArbitraryVariant
		                        });
		                    },
		                    args
		                });
		                // It can happen that a list of format strings is returned from within the function. In that
		                // case, we have to process them as well. We can use the existing `variantSort`.
		                if (Array.isArray(ruleWithVariant)) {
		                    for (let [idx, variantFunction1] of ruleWithVariant.entries()){
		                        // This is a little bit scary since we are pushing to an array of items that we are
		                        // currently looping over. However, you can also think of it like a processing queue
		                        // where you keep handling jobs until everything is done and each job can queue more
		                        // jobs if needed.
		                        variantFunctionTuples.push([
		                            context.offsets.applyParallelOffset(variantSort, idx),
		                            variantFunction1,
		                            // If the clone has been modified we have to pass that back
		                            // though so each rule can use the modified container
		                            clone.clone()
		                        ]);
		                    }
		                    continue;
		                }
		                if (typeof ruleWithVariant === "string") {
		                    collectedFormats.push({
		                        format: ruleWithVariant,
		                        isArbitraryVariant
		                    });
		                }
		                if (ruleWithVariant === null) {
		                    continue;
		                }
		                // We had to backup selectors, therefore we assume that somebody touched
		                // `container` or `modifySelectors`. Let's see if they did, so that we
		                // can restore the selectors, and collect the format strings.
		                if (clone.raws.neededBackup) {
		                    delete clone.raws.neededBackup;
		                    clone.walkRules((rule)=>{
		                        let before = rule.raws.originalSelector;
		                        if (!before) return;
		                        delete rule.raws.originalSelector;
		                        if (before === rule.selector) return; // No mutation happened
		                        let modified = rule.selector;
		                        // Rebuild the base selector, this is what plugin authors would do
		                        // as well. E.g.: `${variant}${separator}${className}`.
		                        // However, plugin authors probably also prepend or append certain
		                        // classes, pseudos, ids, ...
		                        let rebuiltBase = (0, _postcssSelectorParser.default)((selectors)=>{
		                            selectors.walkClasses((classNode)=>{
		                                classNode.value = `${variant}${context.tailwindConfig.separator}${classNode.value}`;
		                            });
		                        }).processSync(before);
		                        // Now that we know the original selector, the new selector, and
		                        // the rebuild part in between, we can replace the part that plugin
		                        // authors need to rebuild with `&`, and eventually store it in the
		                        // collectedFormats. Similar to what `format('...')` would do.
		                        //
		                        // E.g.:
		                        //                   variant: foo
		                        //                  selector: .markdown > p
		                        //      modified (by plugin): .foo .foo\\:markdown > p
		                        //    rebuiltBase (internal): .foo\\:markdown > p
		                        //                    format: .foo &
		                        collectedFormats.push({
		                            format: modified.replace(rebuiltBase, "&"),
		                            isArbitraryVariant
		                        });
		                        rule.selector = before;
		                    });
		                }
		                // This tracks the originating layer for the variant
		                // For example:
		                // .sm:underline {} is a variant of something in the utilities layer
		                // .sm:container {} is a variant of the container component
		                clone.nodes[0].raws.tailwind = {
		                    ...clone.nodes[0].raws.tailwind,
		                    parentLayer: meta.layer
		                };
		                var _meta_collectedFormats;
		                let withOffset = [
		                    {
		                        ...meta,
		                        sort: context.offsets.applyVariantOffset(meta.sort, variantSort, Object.assign(args, context.variantOptions.get(variant))),
		                        collectedFormats: ((_meta_collectedFormats = meta.collectedFormats) !== null && _meta_collectedFormats !== void 0 ? _meta_collectedFormats : []).concat(collectedFormats)
		                    },
		                    clone.nodes[0]
		                ];
		                result.push(withOffset);
		            }
		        }
		        return result;
		    }
		    return [];
		}
		function parseRules(rule, cache, options = {}) {
		    // PostCSS node
		    if (!(0, _isPlainObject.default)(rule) && !Array.isArray(rule)) {
		        return [
		            [
		                rule
		            ],
		            options
		        ];
		    }
		    // Tuple
		    if (Array.isArray(rule)) {
		        return parseRules(rule[0], cache, rule[1]);
		    }
		    // Simple object
		    if (!cache.has(rule)) {
		        cache.set(rule, (0, _parseObjectStyles.default)(rule));
		    }
		    return [
		        cache.get(rule),
		        options
		    ];
		}
		const IS_VALID_PROPERTY_NAME = /^[a-z_-]/;
		function isValidPropName(name) {
		    return IS_VALID_PROPERTY_NAME.test(name);
		}
		/**
		 * @param {string} declaration
		 * @returns {boolean}
		 */ function looksLikeUri(declaration) {
		    // Quick bailout for obvious non-urls
		    // This doesn't support schemes that don't use a leading // but that's unlikely to be a problem
		    if (!declaration.includes("://")) {
		        return false;
		    }
		    try {
		        const url = new URL(declaration);
		        return url.scheme !== "" && url.host !== "";
		    } catch (err) {
		        // Definitely not a valid url
		        return false;
		    }
		}
		function isParsableNode(node) {
		    let isParsable = true;
		    node.walkDecls((decl)=>{
		        if (!isParsableCssValue(decl.prop, decl.value)) {
		            isParsable = false;
		            return false;
		        }
		    });
		    return isParsable;
		}
		function isParsableCssValue(property, value) {
		    // We don't want to to treat [https://example.com] as a custom property
		    // Even though, according to the CSS grammar, it's a totally valid CSS declaration
		    // So we short-circuit here by checking if the custom property looks like a url
		    if (looksLikeUri(`${property}:${value}`)) {
		        return false;
		    }
		    try {
		        _postcss.default.parse(`a{${property}:${value}}`).toResult();
		        return true;
		    } catch (err) {
		        return false;
		    }
		}
		function extractArbitraryProperty(classCandidate, context) {
		    var _classCandidate_match;
		    let [, property, value] = (_classCandidate_match = classCandidate.match(/^\[([a-zA-Z0-9-_]+):(\S+)\]$/)) !== null && _classCandidate_match !== void 0 ? _classCandidate_match : [];
		    if (value === undefined) {
		        return null;
		    }
		    if (!isValidPropName(property)) {
		        return null;
		    }
		    if (!(0, _isSyntacticallyValidPropertyValue.default)(value)) {
		        return null;
		    }
		    let normalized = (0, _dataTypes.normalize)(value);
		    if (!isParsableCssValue(property, normalized)) {
		        return null;
		    }
		    let sort = context.offsets.arbitraryProperty();
		    return [
		        [
		            {
		                sort,
		                layer: "utilities"
		            },
		            ()=>({
		                    [(0, _nameClass.asClass)(classCandidate)]: {
		                        [property]: normalized
		                    }
		                })
		        ]
		    ];
		}
		function* resolveMatchedPlugins(classCandidate, context) {
		    if (context.candidateRuleMap.has(classCandidate)) {
		        yield [
		            context.candidateRuleMap.get(classCandidate),
		            "DEFAULT"
		        ];
		    }
		    yield* function*(arbitraryPropertyRule) {
		        if (arbitraryPropertyRule !== null) {
		            yield [
		                arbitraryPropertyRule,
		                "DEFAULT"
		            ];
		        }
		    }(extractArbitraryProperty(classCandidate, context));
		    let candidatePrefix = classCandidate;
		    let negative = false;
		    const twConfigPrefix = context.tailwindConfig.prefix;
		    const twConfigPrefixLen = twConfigPrefix.length;
		    const hasMatchingPrefix = candidatePrefix.startsWith(twConfigPrefix) || candidatePrefix.startsWith(`-${twConfigPrefix}`);
		    if (candidatePrefix[twConfigPrefixLen] === "-" && hasMatchingPrefix) {
		        negative = true;
		        candidatePrefix = twConfigPrefix + candidatePrefix.slice(twConfigPrefixLen + 1);
		    }
		    if (negative && context.candidateRuleMap.has(candidatePrefix)) {
		        yield [
		            context.candidateRuleMap.get(candidatePrefix),
		            "-DEFAULT"
		        ];
		    }
		    for (let [prefix, modifier] of candidatePermutations(candidatePrefix)){
		        if (context.candidateRuleMap.has(prefix)) {
		            yield [
		                context.candidateRuleMap.get(prefix),
		                negative ? `-${modifier}` : modifier
		            ];
		        }
		    }
		}
		function splitWithSeparator(input, separator) {
		    if (input === _sharedState.NOT_ON_DEMAND) {
		        return [
		            _sharedState.NOT_ON_DEMAND
		        ];
		    }
		    return (0, _splitAtTopLevelOnlyJs.splitAtTopLevelOnly)(input, separator);
		}
		function* recordCandidates(matches, classCandidate) {
		    for (const match of matches){
		        var _match__options;
		        var _match__options_preserveSource;
		        match[1].raws.tailwind = {
		            ...match[1].raws.tailwind,
		            classCandidate,
		            preserveSource: (_match__options_preserveSource = (_match__options = match[0].options) === null || _match__options === void 0 ? void 0 : _match__options.preserveSource) !== null && _match__options_preserveSource !== void 0 ? _match__options_preserveSource : false
		        };
		        yield match;
		    }
		}
		function* resolveMatches(candidate, context, original = candidate) {
		    let separator = context.tailwindConfig.separator;
		    let [classCandidate, ...variants] = splitWithSeparator(candidate, separator).reverse();
		    let important = false;
		    if (classCandidate.startsWith("!")) {
		        important = true;
		        classCandidate = classCandidate.slice(1);
		    }
		    if ((0, _featureFlags.flagEnabled)(context.tailwindConfig, "variantGrouping")) {
		        if (classCandidate.startsWith("(") && classCandidate.endsWith(")")) {
		            let base = variants.slice().reverse().join(separator);
		            for (let part of (0, _splitAtTopLevelOnlyJs.splitAtTopLevelOnly)(classCandidate.slice(1, -1), ",")){
		                yield* resolveMatches(base + separator + part, context, original);
		            }
		        }
		    }
		    // TODO: Reintroduce this in ways that doesn't break on false positives
		    // function sortAgainst(toSort, against) {
		    //   return toSort.slice().sort((a, z) => {
		    //     return bigSign(against.get(a)[0] - against.get(z)[0])
		    //   })
		    // }
		    // let sorted = sortAgainst(variants, context.variantMap)
		    // if (sorted.toString() !== variants.toString()) {
		    //   let corrected = sorted.reverse().concat(classCandidate).join(':')
		    //   throw new Error(`Class ${candidate} should be written as ${corrected}`)
		    // }
		    for (let matchedPlugins of resolveMatchedPlugins(classCandidate, context)){
		        let matches = [];
		        let typesByMatches = new Map();
		        let [plugins, modifier] = matchedPlugins;
		        let isOnlyPlugin = plugins.length === 1;
		        for (let [sort, plugin] of plugins){
		            let matchesPerPlugin = [];
		            if (typeof plugin === "function") {
		                for (let ruleSet of [].concat(plugin(modifier, {
		                    isOnlyPlugin
		                }))){
		                    let [rules, options] = parseRules(ruleSet, context.postCssNodeCache);
		                    for (let rule of rules){
		                        matchesPerPlugin.push([
		                            {
		                                ...sort,
		                                options: {
		                                    ...sort.options,
		                                    ...options
		                                }
		                            },
		                            rule
		                        ]);
		                    }
		                }
		            } else if (modifier === "DEFAULT" || modifier === "-DEFAULT") {
		                let ruleSet1 = plugin;
		                let [rules1, options1] = parseRules(ruleSet1, context.postCssNodeCache);
		                for (let rule1 of rules1){
		                    matchesPerPlugin.push([
		                        {
		                            ...sort,
		                            options: {
		                                ...sort.options,
		                                ...options1
		                            }
		                        },
		                        rule1
		                    ]);
		                }
		            }
		            if (matchesPerPlugin.length > 0) {
		                var _sort_options;
		                var _sort_options_types, _sort_options1;
		                let matchingTypes = Array.from((0, _pluginUtils.getMatchingTypes)((_sort_options_types = (_sort_options = sort.options) === null || _sort_options === void 0 ? void 0 : _sort_options.types) !== null && _sort_options_types !== void 0 ? _sort_options_types : [], modifier, (_sort_options1 = sort.options) !== null && _sort_options1 !== void 0 ? _sort_options1 : {}, context.tailwindConfig)).map(([_, type])=>type);
		                if (matchingTypes.length > 0) {
		                    typesByMatches.set(matchesPerPlugin, matchingTypes);
		                }
		                matches.push(matchesPerPlugin);
		            }
		        }
		        if (isArbitraryValue(modifier)) {
		            if (matches.length > 1) {
		                // Partition plugins in 2 categories so that we can start searching in the plugins that
		                // don't have `any` as a type first.
		                let [withAny, withoutAny] = matches.reduce((group, plugin)=>{
		                    let hasAnyType = plugin.some(([{ options  }])=>options.types.some(({ type  })=>type === "any"));
		                    if (hasAnyType) {
		                        group[0].push(plugin);
		                    } else {
		                        group[1].push(plugin);
		                    }
		                    return group;
		                }, [
		                    [],
		                    []
		                ]);
		                function findFallback(matches) {
		                    // If only a single plugin matches, let's take that one
		                    if (matches.length === 1) {
		                        return matches[0];
		                    }
		                    // Otherwise, find the plugin that creates a valid rule given the arbitrary value, and
		                    // also has the correct type which preferOnConflicts the plugin in case of clashes.
		                    return matches.find((rules)=>{
		                        let matchingTypes = typesByMatches.get(rules);
		                        return rules.some(([{ options  }, rule])=>{
		                            if (!isParsableNode(rule)) {
		                                return false;
		                            }
		                            return options.types.some(({ type , preferOnConflict  })=>matchingTypes.includes(type) && preferOnConflict);
		                        });
		                    });
		                }
		                var _findFallback;
		                // Try to find a fallback plugin, because we already know that multiple plugins matched for
		                // the given arbitrary value.
		                let fallback = (_findFallback = findFallback(withoutAny)) !== null && _findFallback !== void 0 ? _findFallback : findFallback(withAny);
		                if (fallback) {
		                    matches = [
		                        fallback
		                    ];
		                } else {
		                    var _typesByMatches_get;
		                    let typesPerPlugin = matches.map((match)=>new Set([
		                            ...(_typesByMatches_get = typesByMatches.get(match)) !== null && _typesByMatches_get !== void 0 ? _typesByMatches_get : []
		                        ]));
		                    // Remove duplicates, so that we can detect proper unique types for each plugin.
		                    for (let pluginTypes of typesPerPlugin){
		                        for (let type of pluginTypes){
		                            let removeFromOwnGroup = false;
		                            for (let otherGroup of typesPerPlugin){
		                                if (pluginTypes === otherGroup) continue;
		                                if (otherGroup.has(type)) {
		                                    otherGroup.delete(type);
		                                    removeFromOwnGroup = true;
		                                }
		                            }
		                            if (removeFromOwnGroup) pluginTypes.delete(type);
		                        }
		                    }
		                    let messages = [];
		                    for (let [idx, group] of typesPerPlugin.entries()){
		                        for (let type1 of group){
		                            let rules2 = matches[idx].map(([, rule])=>rule).flat().map((rule)=>rule.toString().split("\n").slice(1, -1) // Remove selector and closing '}'
		                                .map((line)=>line.trim()).map((x)=>`      ${x}`) // Re-indent
		                                .join("\n")).join("\n\n");
		                            messages.push(`  Use \`${candidate.replace("[", `[${type1}:`)}\` for \`${rules2.trim()}\``);
		                            break;
		                        }
		                    }
		                    _log.default.warn([
		                        `The class \`${candidate}\` is ambiguous and matches multiple utilities.`,
		                        ...messages,
		                        `If this is content and not a class, replace it with \`${candidate.replace("[", "&lsqb;").replace("]", "&rsqb;")}\` to silence this warning.`
		                    ]);
		                    continue;
		                }
		            }
		            matches = matches.map((list)=>list.filter((match)=>isParsableNode(match[1])));
		        }
		        matches = matches.flat();
		        matches = Array.from(recordCandidates(matches, classCandidate));
		        matches = applyPrefix(matches, context);
		        if (important) {
		            matches = applyImportant(matches, classCandidate);
		        }
		        for (let variant of variants){
		            matches = applyVariant(variant, matches, context);
		        }
		        for (let match of matches){
		            match[1].raws.tailwind = {
		                ...match[1].raws.tailwind,
		                candidate
		            };
		            // Apply final format selector
		            match = applyFinalFormat(match, {
		                context,
		                candidate,
		                original
		            });
		            // Skip rules with invalid selectors
		            // This will cause the candidate to be added to the "not class"
		            // cache skipping it entirely for future builds
		            if (match === null) {
		                continue;
		            }
		            yield match;
		        }
		    }
		}
		function applyFinalFormat(match, { context , candidate , original  }) {
		    if (!match[0].collectedFormats) {
		        return match;
		    }
		    let isValid = true;
		    let finalFormat;
		    try {
		        finalFormat = (0, _formatVariantSelector.formatVariantSelector)(match[0].collectedFormats, {
		            context,
		            candidate
		        });
		    } catch  {
		        // The format selector we produced is invalid
		        // This could be because:
		        // - A bug exists
		        // - A plugin introduced an invalid variant selector (ex: `addVariant('foo', '&;foo')`)
		        // - The user used an invalid arbitrary variant (ex: `[&;foo]:underline`)
		        // Either way the build will fail because of this
		        // We would rather that the build pass "silently" given that this could
		        // happen because of picking up invalid things when scanning content
		        // So we'll throw out the candidate instead
		        return null;
		    }
		    let container = _postcss.default.root({
		        nodes: [
		            match[1].clone()
		        ]
		    });
		    container.walkRules((rule)=>{
		        if (inKeyframes(rule)) {
		            return;
		        }
		        try {
		            rule.selector = (0, _formatVariantSelector.finalizeSelector)(rule.selector, finalFormat, {
		                candidate: original,
		                context
		            });
		        } catch  {
		            // If this selector is invalid we also want to skip it
		            // But it's likely that being invalid here means there's a bug in a plugin rather than too loosely matching content
		            isValid = false;
		            return false;
		        }
		    });
		    if (!isValid) {
		        return null;
		    }
		    match[1] = container.nodes[0];
		    return match;
		}
		function inKeyframes(rule) {
		    return rule.parent && rule.parent.type === "atrule" && rule.parent.name === "keyframes";
		}
		function getImportantStrategy(important) {
		    if (important === true) {
		        return (rule)=>{
		            if (inKeyframes(rule)) {
		                return;
		            }
		            rule.walkDecls((d)=>{
		                if (d.parent.type === "rule" && !inKeyframes(d.parent)) {
		                    d.important = true;
		                }
		            });
		        };
		    }
		    if (typeof important === "string") {
		        return (rule)=>{
		            if (inKeyframes(rule)) {
		                return;
		            }
		            rule.selectors = rule.selectors.map((selector)=>{
		                return (0, _applyImportantSelector.applyImportantSelector)(selector, important);
		            });
		        };
		    }
		}
		function generateRules(candidates, context) {
		    let allRules = [];
		    let strategy = getImportantStrategy(context.tailwindConfig.important);
		    for (let candidate of candidates){
		        if (context.notClassCache.has(candidate)) {
		            continue;
		        }
		        if (context.candidateRuleCache.has(candidate)) {
		            allRules = allRules.concat(Array.from(context.candidateRuleCache.get(candidate)));
		            continue;
		        }
		        let matches = Array.from(resolveMatches(candidate, context));
		        if (matches.length === 0) {
		            context.notClassCache.add(candidate);
		            continue;
		        }
		        context.classCache.set(candidate, matches);
		        var _context_candidateRuleCache_get;
		        let rules = (_context_candidateRuleCache_get = context.candidateRuleCache.get(candidate)) !== null && _context_candidateRuleCache_get !== void 0 ? _context_candidateRuleCache_get : new Set();
		        context.candidateRuleCache.set(candidate, rules);
		        for (const match of matches){
		            let [{ sort , options  }, rule] = match;
		            if (options.respectImportant && strategy) {
		                let container = _postcss.default.root({
		                    nodes: [
		                        rule.clone()
		                    ]
		                });
		                container.walkRules(strategy);
		                rule = container.nodes[0];
		            }
		            let newEntry = [
		                sort,
		                rule
		            ];
		            rules.add(newEntry);
		            context.ruleCache.add(newEntry);
		            allRules.push(newEntry);
		        }
		    }
		    return allRules;
		}
		function isArbitraryValue(input) {
		    return input.startsWith("[") && input.endsWith("]");
		}
} (generateRules));
	return generateRules;
}

var cacheInvalidation = {};

var hasRequiredCacheInvalidation;

function requireCacheInvalidation () {
	if (hasRequiredCacheInvalidation) return cacheInvalidation;
	hasRequiredCacheInvalidation = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "hasContentChanged", {
		    enumerable: true,
		    get: ()=>hasContentChanged
		});
		const _crypto = /*#__PURE__*/ _interopRequireDefault(require$$3);
		const _sharedState = /*#__PURE__*/ _interopRequireWildcard(requireSharedState());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function _getRequireWildcardCache(nodeInterop) {
		    if (typeof WeakMap !== "function") return null;
		    var cacheBabelInterop = new WeakMap();
		    var cacheNodeInterop = new WeakMap();
		    return (_getRequireWildcardCache = function(nodeInterop) {
		        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
		    })(nodeInterop);
		}
		function _interopRequireWildcard(obj, nodeInterop) {
		    if (!nodeInterop && obj && obj.__esModule) {
		        return obj;
		    }
		    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
		        return {
		            default: obj
		        };
		    }
		    var cache = _getRequireWildcardCache(nodeInterop);
		    if (cache && cache.has(obj)) {
		        return cache.get(obj);
		    }
		    var newObj = {};
		    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		    for(var key in obj){
		        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
		            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
		            if (desc && (desc.get || desc.set)) {
		                Object.defineProperty(newObj, key, desc);
		            } else {
		                newObj[key] = obj[key];
		            }
		        }
		    }
		    newObj.default = obj;
		    if (cache) {
		        cache.set(obj, newObj);
		    }
		    return newObj;
		}
		/**
		 * Calculate the hash of a string.
		 *
		 * This doesn't need to be cryptographically secure or
		 * anything like that since it's used only to detect
		 * when the CSS changes to invalidate the context.
		 *
		 * This is wrapped in a try/catch because it's really dependent
		 * on how Node itself is build and the environment and OpenSSL
		 * version / build that is installed on the user's machine.
		 *
		 * Based on the environment this can just outright fail.
		 *
		 * See https://github.com/nodejs/node/issues/40455
		 *
		 * @param {string} str
		 */ function getHash(str) {
		    try {
		        return _crypto.default.createHash("md5").update(str, "utf-8").digest("binary");
		    } catch (err) {
		        return "";
		    }
		}
		function hasContentChanged(sourcePath, root) {
		    let css = root.toString();
		    // We only care about files with @tailwind directives
		    // Other files use an existing context
		    if (!css.includes("@tailwind")) {
		        return false;
		    }
		    let existingHash = _sharedState.sourceHashMap.get(sourcePath);
		    let rootHash = getHash(css);
		    let didChange = existingHash !== rootHash;
		    _sharedState.sourceHashMap.set(sourcePath, rootHash);
		    return didChange;
		}
} (cacheInvalidation));
	return cacheInvalidation;
}

var offsets = {};

var bigSign = {};

var hasRequiredBigSign;

function requireBigSign () {
	if (hasRequiredBigSign) return bigSign;
	hasRequiredBigSign = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>bigSign
		});
		function bigSign(bigIntValue) {
		    return (bigIntValue > 0n) - (bigIntValue < 0n);
		}
} (bigSign));
	return bigSign;
}

var remapBitfield = {};

var hasRequiredRemapBitfield;

function requireRemapBitfield () {
	if (hasRequiredRemapBitfield) return remapBitfield;
	hasRequiredRemapBitfield = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "remapBitfield", {
		    enumerable: true,
		    get: ()=>remapBitfield
		});
		function remapBitfield(num, mapping) {
		    // Create masks for the old and new bits that are set
		    let oldMask = 0n;
		    let newMask = 0n;
		    for (let [oldBit, newBit] of mapping){
		        if (num & oldBit) {
		            oldMask = oldMask | oldBit;
		            newMask = newMask | newBit;
		        }
		    }
		    // Remove all old bits
		    // Set all new bits
		    return num & ~oldMask | newMask;
		}
} (remapBitfield));
	return remapBitfield;
}

var hasRequiredOffsets;

function requireOffsets () {
	if (hasRequiredOffsets) return offsets;
	hasRequiredOffsets = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "Offsets", {
		    enumerable: true,
		    get: ()=>Offsets
		});
		const _bigSign = /*#__PURE__*/ _interopRequireDefault(requireBigSign());
		const _remapBitfieldJs = requireRemapBitfield();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		class Offsets {
		    constructor(){
		        /**
		     * Offsets for the next rule in a given layer
		     *
		     * @type {Record<Layer, bigint>}
		     */ this.offsets = {
		            defaults: 0n,
		            base: 0n,
		            components: 0n,
		            utilities: 0n,
		            variants: 0n,
		            user: 0n
		        };
		        /**
		     * Positions for a given layer
		     *
		     * @type {Record<Layer, bigint>}
		     */ this.layerPositions = {
		            defaults: 0n,
		            base: 1n,
		            components: 2n,
		            utilities: 3n,
		            // There isn't technically a "user" layer, but we need to give it a position
		            // Because it's used for ordering user-css from @apply
		            user: 4n,
		            variants: 5n
		        };
		        /**
		     * The total number of functions currently registered across all variants (including arbitrary variants)
		     *
		     * @type {bigint}
		     */ this.reservedVariantBits = 0n;
		        /**
		     * Positions for a given variant
		     *
		     * @type {Map<string, bigint>}
		     */ this.variantOffsets = new Map();
		    }
		    /**
		   * @param {Layer} layer
		   * @returns {RuleOffset}
		   */ create(layer) {
		        return {
		            layer,
		            parentLayer: layer,
		            arbitrary: 0n,
		            variants: 0n,
		            parallelIndex: 0n,
		            index: this.offsets[layer]++,
		            options: []
		        };
		    }
		    /**
		   * @returns {RuleOffset}
		   */ arbitraryProperty() {
		        return {
		            ...this.create("utilities"),
		            arbitrary: 1n
		        };
		    }
		    /**
		   * Get the offset for a variant
		   *
		   * @param {string} variant
		   * @param {number} index
		   * @returns {RuleOffset}
		   */ forVariant(variant, index = 0) {
		        let offset = this.variantOffsets.get(variant);
		        if (offset === undefined) {
		            throw new Error(`Cannot find offset for unknown variant ${variant}`);
		        }
		        return {
		            ...this.create("variants"),
		            variants: offset << BigInt(index)
		        };
		    }
		    /**
		   * @param {RuleOffset} rule
		   * @param {RuleOffset} variant
		   * @param {VariantOption} options
		   * @returns {RuleOffset}
		   */ applyVariantOffset(rule, variant, options) {
		        options.variant = variant.variants;
		        return {
		            ...rule,
		            layer: "variants",
		            parentLayer: rule.layer === "variants" ? rule.parentLayer : rule.layer,
		            variants: rule.variants | variant.variants,
		            options: options.sort ? [].concat(options, rule.options) : rule.options,
		            // TODO: Technically this is wrong. We should be handling parallel index on a per variant basis.
		            // We'll take the max of all the parallel indexes for now.
		            // @ts-ignore
		            parallelIndex: max([
		                rule.parallelIndex,
		                variant.parallelIndex
		            ])
		        };
		    }
		    /**
		   * @param {RuleOffset} offset
		   * @param {number} parallelIndex
		   * @returns {RuleOffset}
		   */ applyParallelOffset(offset, parallelIndex) {
		        return {
		            ...offset,
		            parallelIndex: BigInt(parallelIndex)
		        };
		    }
		    /**
		   * Each variant gets 1 bit per function / rule registered.
		   * This is because multiple variants can be applied to a single rule and we need to know which ones are present and which ones are not.
		   * Additionally, every unique group of variants is grouped together in the stylesheet.
		   *
		   * This grouping is order-independent. For instance, we do not differentiate between `hover:focus` and `focus:hover`.
		   *
		   * @param {string[]} variants
		   * @param {(name: string) => number} getLength
		   */ recordVariants(variants, getLength) {
		        for (let variant of variants){
		            this.recordVariant(variant, getLength(variant));
		        }
		    }
		    /**
		   * The same as `recordVariants` but for a single arbitrary variant at runtime.
		   * @param {string} variant
		   * @param {number} fnCount
		   *
		   * @returns {RuleOffset} The highest offset for this variant
		   */ recordVariant(variant, fnCount = 1) {
		        this.variantOffsets.set(variant, 1n << this.reservedVariantBits);
		        // Ensure space is reserved for each "function" in the parallel variant
		        // by offsetting the next variant by the number of parallel variants
		        // in the one we just added.
		        // Single functions that return parallel variants are NOT handled separately here
		        // They're offset by 1 (or the number of functions) as usual
		        // And each rule returned is tracked separately since the functions are evaluated lazily.
		        // @see `RuleOffset.parallelIndex`
		        this.reservedVariantBits += BigInt(fnCount);
		        return {
		            ...this.create("variants"),
		            variants: this.variantOffsets.get(variant)
		        };
		    }
		    /**
		   * @param {RuleOffset} a
		   * @param {RuleOffset} b
		   * @returns {bigint}
		   */ compare(a, b) {
		        // Sort layers together
		        if (a.layer !== b.layer) {
		            return this.layerPositions[a.layer] - this.layerPositions[b.layer];
		        }
		        // When sorting the `variants` layer, we need to sort based on the parent layer as well within
		        // this variants layer.
		        if (a.parentLayer !== b.parentLayer) {
		            return this.layerPositions[a.parentLayer] - this.layerPositions[b.parentLayer];
		        }
		        // Sort based on the sorting function
		        for (let aOptions of a.options){
		            for (let bOptions of b.options){
		                if (aOptions.id !== bOptions.id) continue;
		                if (!aOptions.sort || !bOptions.sort) continue;
		                var _max;
		                let maxFnVariant = (_max = max([
		                    aOptions.variant,
		                    bOptions.variant
		                ])) !== null && _max !== void 0 ? _max : 0n;
		                // Create a mask of 0s from bits 1..N where N represents the mask of the Nth bit
		                let mask = ~(maxFnVariant | maxFnVariant - 1n);
		                let aVariantsAfterFn = a.variants & mask;
		                let bVariantsAfterFn = b.variants & mask;
		                // If the variants the same, we _can_ sort them
		                if (aVariantsAfterFn !== bVariantsAfterFn) {
		                    continue;
		                }
		                let result = aOptions.sort({
		                    value: aOptions.value,
		                    modifier: aOptions.modifier
		                }, {
		                    value: bOptions.value,
		                    modifier: bOptions.modifier
		                });
		                if (result !== 0) return result;
		            }
		        }
		        // Sort variants in the order they were registered
		        if (a.variants !== b.variants) {
		            return a.variants - b.variants;
		        }
		        // Make sure each rule returned by a parallel variant is sorted in ascending order
		        if (a.parallelIndex !== b.parallelIndex) {
		            return a.parallelIndex - b.parallelIndex;
		        }
		        // Always sort arbitrary properties after other utilities
		        if (a.arbitrary !== b.arbitrary) {
		            return a.arbitrary - b.arbitrary;
		        }
		        // Sort utilities, components, etc… in the order they were registered
		        return a.index - b.index;
		    }
		    /**
		   * Arbitrary variants are recorded in the order they're encountered.
		   * This means that the order is not stable between environments and sets of content files.
		   *
		   * In order to make the order stable, we need to remap the arbitrary variant offsets to
		   * be in alphabetical order starting from the offset of the first arbitrary variant.
		   */ recalculateVariantOffsets() {
		        // Sort the variants by their name
		        let variants = Array.from(this.variantOffsets.entries()).filter(([v])=>v.startsWith("[")).sort(([a], [z])=>fastCompare(a, z));
		        // Sort the list of offsets
		        // This is not necessarily a discrete range of numbers which is why
		        // we're using sort instead of creating a range from min/max
		        let newOffsets = variants.map(([, offset])=>offset).sort((a, z)=>(0, _bigSign.default)(a - z));
		        // Create a map from the old offsets to the new offsets in the new sort order
		        /** @type {[bigint, bigint][]} */ let mapping = variants.map(([, oldOffset], i)=>[
		                oldOffset,
		                newOffsets[i]
		            ]);
		        // Remove any variants that will not move letting us skip
		        // remapping if everything happens to be in order
		        return mapping.filter(([a, z])=>a !== z);
		    }
		    /**
		   * @template T
		   * @param {[RuleOffset, T][]} list
		   * @returns {[RuleOffset, T][]}
		   */ remapArbitraryVariantOffsets(list) {
		        let mapping = this.recalculateVariantOffsets();
		        // No arbitrary variants? Nothing to do.
		        // Everyhing already in order? Nothing to do.
		        if (mapping.length === 0) {
		            return list;
		        }
		        // Remap every variant offset in the list
		        return list.map((item)=>{
		            let [offset, rule] = item;
		            offset = {
		                ...offset,
		                variants: (0, _remapBitfieldJs.remapBitfield)(offset.variants, mapping)
		            };
		            return [
		                offset,
		                rule
		            ];
		        });
		    }
		    /**
		   * @template T
		   * @param {[RuleOffset, T][]} list
		   * @returns {[RuleOffset, T][]}
		   */ sort(list) {
		        list = this.remapArbitraryVariantOffsets(list);
		        return list.sort(([a], [b])=>(0, _bigSign.default)(this.compare(a, b)));
		    }
		}
		/**
		 *
		 * @param {bigint[]} nums
		 * @returns {bigint|null}
		 */ function max(nums) {
		    let max = null;
		    for (const num of nums){
		        max = max !== null && max !== void 0 ? max : num;
		        max = max > num ? max : num;
		    }
		    return max;
		}
		/**
		 * A fast ASCII order string comparison function.
		 *
		 * Using `.sort()` without a custom compare function is faster
		 * But you can only use that if you're sorting an array of
		 * only strings. If you're sorting strings inside objects
		 * or arrays, you need must use a custom compare function.
		 *
		 * @param {string} a
		 * @param {string} b
		 */ function fastCompare(a, b) {
		    let aLen = a.length;
		    let bLen = b.length;
		    let minLen = aLen < bLen ? aLen : bLen;
		    for(let i = 0; i < minLen; i++){
		        let cmp = a.charCodeAt(i) - b.charCodeAt(i);
		        if (cmp !== 0) return cmp;
		    }
		    return aLen - bLen;
		}
} (offsets));
	return offsets;
}

var hasRequiredSetupContextUtils;

function requireSetupContextUtils () {
	if (hasRequiredSetupContextUtils) return setupContextUtils;
	hasRequiredSetupContextUtils = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    isValidVariantFormatString: ()=>isValidVariantFormatString,
		    parseVariant: ()=>parseVariant,
		    getFileModifiedMap: ()=>getFileModifiedMap,
		    createContext: ()=>createContext,
		    getContext: ()=>getContext
		});
		const _fs = /*#__PURE__*/ _interopRequireDefault(require$$3);
		const _url = /*#__PURE__*/ _interopRequireDefault(require$$3);
		const _postcss = /*#__PURE__*/ _interopRequireDefault(requirePostcss());
		const _dlv = /*#__PURE__*/ _interopRequireDefault(requireDlv_umd());
		const _postcssSelectorParser = /*#__PURE__*/ _interopRequireDefault(requireDist());
		const _transformThemeValue = /*#__PURE__*/ _interopRequireDefault(requireTransformThemeValue());
		const _parseObjectStyles = /*#__PURE__*/ _interopRequireDefault(requireParseObjectStyles());
		const _prefixSelector = /*#__PURE__*/ _interopRequireDefault(requirePrefixSelector());
		const _isPlainObject = /*#__PURE__*/ _interopRequireDefault(requireIsPlainObject());
		const _escapeClassName = /*#__PURE__*/ _interopRequireDefault(requireEscapeClassName());
		const _nameClass = /*#__PURE__*/ _interopRequireWildcard(requireNameClass());
		const _pluginUtils = requirePluginUtils();
		const _corePlugins = requireCorePlugins();
		const _sharedState = /*#__PURE__*/ _interopRequireWildcard(requireSharedState());
		const _toPath = requireToPath();
		const _log = /*#__PURE__*/ _interopRequireDefault(requireLog());
		const _negateValue = /*#__PURE__*/ _interopRequireDefault(requireNegateValue());
		const _isSyntacticallyValidPropertyValue = /*#__PURE__*/ _interopRequireDefault(requireIsSyntacticallyValidPropertyValue());
		const _generateRules = requireGenerateRules();
		const _cacheInvalidationJs = requireCacheInvalidation();
		const _offsetsJs = requireOffsets();
		const _featureFlagsJs = requireFeatureFlags();
		const _formatVariantSelector = requireFormatVariantSelector();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function _getRequireWildcardCache(nodeInterop) {
		    if (typeof WeakMap !== "function") return null;
		    var cacheBabelInterop = new WeakMap();
		    var cacheNodeInterop = new WeakMap();
		    return (_getRequireWildcardCache = function(nodeInterop) {
		        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
		    })(nodeInterop);
		}
		function _interopRequireWildcard(obj, nodeInterop) {
		    if (!nodeInterop && obj && obj.__esModule) {
		        return obj;
		    }
		    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
		        return {
		            default: obj
		        };
		    }
		    var cache = _getRequireWildcardCache(nodeInterop);
		    if (cache && cache.has(obj)) {
		        return cache.get(obj);
		    }
		    var newObj = {};
		    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		    for(var key in obj){
		        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
		            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
		            if (desc && (desc.get || desc.set)) {
		                Object.defineProperty(newObj, key, desc);
		            } else {
		                newObj[key] = obj[key];
		            }
		        }
		    }
		    newObj.default = obj;
		    if (cache) {
		        cache.set(obj, newObj);
		    }
		    return newObj;
		}
		const VARIANT_TYPES = {
		    AddVariant: Symbol.for("ADD_VARIANT"),
		    MatchVariant: Symbol.for("MATCH_VARIANT")
		};
		const VARIANT_INFO = {
		    Base: 1 << 0,
		    Dynamic: 1 << 1
		};
		function prefix(context, selector) {
		    let prefix = context.tailwindConfig.prefix;
		    return typeof prefix === "function" ? prefix(selector) : prefix + selector;
		}
		function normalizeOptionTypes({ type ="any" , ...options }) {
		    let types = [].concat(type);
		    return {
		        ...options,
		        types: types.map((type)=>{
		            if (Array.isArray(type)) {
		                return {
		                    type: type[0],
		                    ...type[1]
		                };
		            }
		            return {
		                type,
		                preferOnConflict: false
		            };
		        })
		    };
		}
		function parseVariantFormatString(input) {
		    /** @type {string[]} */ let parts = [];
		    // When parsing whitespace around special characters are insignificant
		    // However, _inside_ of a variant they could be
		    // Because the selector could look like this
		    // @media { &[data-name="foo bar"] }
		    // This is why we do not skip whitespace
		    let current = "";
		    let depth = 0;
		    for(let idx = 0; idx < input.length; idx++){
		        let char = input[idx];
		        if (char === "\\") {
		            // Escaped characters are not special
		            current += "\\" + input[++idx];
		        } else if (char === "{") {
		            // Nested rule: start
		            ++depth;
		            parts.push(current.trim());
		            current = "";
		        } else if (char === "}") {
		            // Nested rule: end
		            if (--depth < 0) {
		                throw new Error(`Your { and } are unbalanced.`);
		            }
		            parts.push(current.trim());
		            current = "";
		        } else {
		            // Normal character
		            current += char;
		        }
		    }
		    if (current.length > 0) {
		        parts.push(current.trim());
		    }
		    parts = parts.filter((part)=>part !== "");
		    return parts;
		}
		function insertInto(list, value, { before =[]  } = {}) {
		    before = [].concat(before);
		    if (before.length <= 0) {
		        list.push(value);
		        return;
		    }
		    let idx = list.length - 1;
		    for (let other of before){
		        let iidx = list.indexOf(other);
		        if (iidx === -1) continue;
		        idx = Math.min(idx, iidx);
		    }
		    list.splice(idx, 0, value);
		}
		function parseStyles(styles) {
		    if (!Array.isArray(styles)) {
		        return parseStyles([
		            styles
		        ]);
		    }
		    return styles.flatMap((style)=>{
		        let isNode = !Array.isArray(style) && !(0, _isPlainObject.default)(style);
		        return isNode ? style : (0, _parseObjectStyles.default)(style);
		    });
		}
		function getClasses(selector, mutate) {
		    let parser = (0, _postcssSelectorParser.default)((selectors)=>{
		        let allClasses = [];
		        if (mutate) {
		            mutate(selectors);
		        }
		        selectors.walkClasses((classNode)=>{
		            allClasses.push(classNode.value);
		        });
		        return allClasses;
		    });
		    return parser.transformSync(selector);
		}
		function extractCandidates(node, state = {
		    containsNonOnDemandable: false
		}, depth = 0) {
		    let classes = [];
		    // Handle normal rules
		    if (node.type === "rule") {
		        // Ignore everything inside a :not(...). This allows you to write code like
		        // `div:not(.foo)`. If `.foo` is never found in your code, then we used to
		        // not generated it. But now we will ignore everything inside a `:not`, so
		        // that it still gets generated.
		        function ignoreNot(selectors) {
		            selectors.walkPseudos((pseudo)=>{
		                if (pseudo.value === ":not") {
		                    pseudo.remove();
		                }
		            });
		        }
		        for (let selector of node.selectors){
		            let classCandidates = getClasses(selector, ignoreNot);
		            // At least one of the selectors contains non-"on-demandable" candidates.
		            if (classCandidates.length === 0) {
		                state.containsNonOnDemandable = true;
		            }
		            for (let classCandidate of classCandidates){
		                classes.push(classCandidate);
		            }
		        }
		    } else if (node.type === "atrule") {
		        node.walkRules((rule)=>{
		            for (let classCandidate of rule.selectors.flatMap((selector)=>getClasses(selector))){
		                classes.push(classCandidate);
		            }
		        });
		    }
		    if (depth === 0) {
		        return [
		            state.containsNonOnDemandable || classes.length === 0,
		            classes
		        ];
		    }
		    return classes;
		}
		function withIdentifiers(styles) {
		    return parseStyles(styles).flatMap((node)=>{
		        let nodeMap = new Map();
		        let [containsNonOnDemandableSelectors, candidates] = extractCandidates(node);
		        // If this isn't "on-demandable", assign it a universal candidate to always include it.
		        if (containsNonOnDemandableSelectors) {
		            candidates.unshift(_sharedState.NOT_ON_DEMAND);
		        }
		        // However, it could be that it also contains "on-demandable" candidates.
		        // E.g.: `span, .foo {}`, in that case it should still be possible to use
		        // `@apply foo` for example.
		        return candidates.map((c)=>{
		            if (!nodeMap.has(node)) {
		                nodeMap.set(node, node);
		            }
		            return [
		                c,
		                nodeMap.get(node)
		            ];
		        });
		    });
		}
		function isValidVariantFormatString(format) {
		    return format.startsWith("@") || format.includes("&");
		}
		function parseVariant(variant) {
		    variant = variant.replace(/\n+/g, "").replace(/\s{1,}/g, " ").trim();
		    let fns = parseVariantFormatString(variant).map((str)=>{
		        if (!str.startsWith("@")) {
		            return ({ format  })=>format(str);
		        }
		        let [, name, params] = /@(.*?)( .+|[({].*)/g.exec(str);
		        return ({ wrap  })=>wrap(_postcss.default.atRule({
		                name,
		                params: params.trim()
		            }));
		    }).reverse();
		    return (api)=>{
		        for (let fn of fns){
		            fn(api);
		        }
		    };
		}
		/**
		 *
		 * @param {any} tailwindConfig
		 * @param {any} context
		 * @param {object} param2
		 * @param {Offsets} param2.offsets
		 */ function buildPluginApi(tailwindConfig, context, { variantList , variantMap , offsets , classList  }) {
		    function getConfigValue(path, defaultValue) {
		        return path ? (0, _dlv.default)(tailwindConfig, path, defaultValue) : tailwindConfig;
		    }
		    function applyConfiguredPrefix(selector) {
		        return (0, _prefixSelector.default)(tailwindConfig.prefix, selector);
		    }
		    function prefixIdentifier(identifier, options) {
		        if (identifier === _sharedState.NOT_ON_DEMAND) {
		            return _sharedState.NOT_ON_DEMAND;
		        }
		        if (!options.respectPrefix) {
		            return identifier;
		        }
		        return context.tailwindConfig.prefix + identifier;
		    }
		    function resolveThemeValue(path, defaultValue, opts = {}) {
		        let parts = (0, _toPath.toPath)(path);
		        let value = getConfigValue([
		            "theme",
		            ...parts
		        ], defaultValue);
		        return (0, _transformThemeValue.default)(parts[0])(value, opts);
		    }
		    let variantIdentifier = 0;
		    let api = {
		        postcss: _postcss.default,
		        prefix: applyConfiguredPrefix,
		        e: _escapeClassName.default,
		        config: getConfigValue,
		        theme: resolveThemeValue,
		        corePlugins: (path)=>{
		            if (Array.isArray(tailwindConfig.corePlugins)) {
		                return tailwindConfig.corePlugins.includes(path);
		            }
		            return getConfigValue([
		                "corePlugins",
		                path
		            ], true);
		        },
		        variants: ()=>{
		            // Preserved for backwards compatibility but not used in v3.0+
		            return [];
		        },
		        addBase (base) {
		            for (let [identifier, rule] of withIdentifiers(base)){
		                let prefixedIdentifier = prefixIdentifier(identifier, {});
		                let offset = offsets.create("base");
		                if (!context.candidateRuleMap.has(prefixedIdentifier)) {
		                    context.candidateRuleMap.set(prefixedIdentifier, []);
		                }
		                context.candidateRuleMap.get(prefixedIdentifier).push([
		                    {
		                        sort: offset,
		                        layer: "base"
		                    },
		                    rule
		                ]);
		            }
		        },
		        /**
		     * @param {string} group
		     * @param {Record<string, string | string[]>} declarations
		     */ addDefaults (group, declarations) {
		            const groups = {
		                [`@defaults ${group}`]: declarations
		            };
		            for (let [identifier, rule] of withIdentifiers(groups)){
		                let prefixedIdentifier = prefixIdentifier(identifier, {});
		                if (!context.candidateRuleMap.has(prefixedIdentifier)) {
		                    context.candidateRuleMap.set(prefixedIdentifier, []);
		                }
		                context.candidateRuleMap.get(prefixedIdentifier).push([
		                    {
		                        sort: offsets.create("defaults"),
		                        layer: "defaults"
		                    },
		                    rule
		                ]);
		            }
		        },
		        addComponents (components, options) {
		            let defaultOptions = {
		                preserveSource: false,
		                respectPrefix: true,
		                respectImportant: false
		            };
		            options = Object.assign({}, defaultOptions, Array.isArray(options) ? {} : options);
		            for (let [identifier, rule] of withIdentifiers(components)){
		                let prefixedIdentifier = prefixIdentifier(identifier, options);
		                classList.add(prefixedIdentifier);
		                if (!context.candidateRuleMap.has(prefixedIdentifier)) {
		                    context.candidateRuleMap.set(prefixedIdentifier, []);
		                }
		                context.candidateRuleMap.get(prefixedIdentifier).push([
		                    {
		                        sort: offsets.create("components"),
		                        layer: "components",
		                        options
		                    },
		                    rule
		                ]);
		            }
		        },
		        addUtilities (utilities, options) {
		            let defaultOptions = {
		                preserveSource: false,
		                respectPrefix: true,
		                respectImportant: true
		            };
		            options = Object.assign({}, defaultOptions, Array.isArray(options) ? {} : options);
		            for (let [identifier, rule] of withIdentifiers(utilities)){
		                let prefixedIdentifier = prefixIdentifier(identifier, options);
		                classList.add(prefixedIdentifier);
		                if (!context.candidateRuleMap.has(prefixedIdentifier)) {
		                    context.candidateRuleMap.set(prefixedIdentifier, []);
		                }
		                context.candidateRuleMap.get(prefixedIdentifier).push([
		                    {
		                        sort: offsets.create("utilities"),
		                        layer: "utilities",
		                        options
		                    },
		                    rule
		                ]);
		            }
		        },
		        matchUtilities: function(utilities, options) {
		            let defaultOptions = {
		                respectPrefix: true,
		                respectImportant: true,
		                modifiers: false
		            };
		            options = normalizeOptionTypes({
		                ...defaultOptions,
		                ...options
		            });
		            let offset = offsets.create("utilities");
		            for(let identifier in utilities){
		                let prefixedIdentifier = prefixIdentifier(identifier, options);
		                let rule = utilities[identifier];
		                classList.add([
		                    prefixedIdentifier,
		                    options
		                ]);
		                function wrapped(modifier, { isOnlyPlugin  }) {
		                    let [value, coercedType, utilityModifier] = (0, _pluginUtils.coerceValue)(options.types, modifier, options, tailwindConfig);
		                    if (value === undefined) {
		                        return [];
		                    }
		                    if (!options.types.some(({ type  })=>type === coercedType)) {
		                        if (isOnlyPlugin) {
		                            _log.default.warn([
		                                `Unnecessary typehint \`${coercedType}\` in \`${identifier}-${modifier}\`.`,
		                                `You can safely update it to \`${identifier}-${modifier.replace(coercedType + ":", "")}\`.`
		                            ]);
		                        } else {
		                            return [];
		                        }
		                    }
		                    if (!(0, _isSyntacticallyValidPropertyValue.default)(value)) {
		                        return [];
		                    }
		                    let extras = {
		                        get modifier () {
		                            if (!options.modifiers) {
		                                _log.default.warn(`modifier-used-without-options-for-${identifier}`, [
		                                    "Your plugin must set `modifiers: true` in its options to support modifiers."
		                                ]);
		                            }
		                            return utilityModifier;
		                        }
		                    };
		                    let modifiersEnabled = (0, _featureFlagsJs.flagEnabled)(tailwindConfig, "generalizedModifiers");
		                    let ruleSets = [].concat(modifiersEnabled ? rule(value, extras) : rule(value)).filter(Boolean).map((declaration)=>({
		                            [(0, _nameClass.default)(identifier, modifier)]: declaration
		                        }));
		                    return ruleSets;
		                }
		                let withOffsets = [
		                    {
		                        sort: offset,
		                        layer: "utilities",
		                        options
		                    },
		                    wrapped
		                ];
		                if (!context.candidateRuleMap.has(prefixedIdentifier)) {
		                    context.candidateRuleMap.set(prefixedIdentifier, []);
		                }
		                context.candidateRuleMap.get(prefixedIdentifier).push(withOffsets);
		            }
		        },
		        matchComponents: function(components, options) {
		            let defaultOptions = {
		                respectPrefix: true,
		                respectImportant: false,
		                modifiers: false
		            };
		            options = normalizeOptionTypes({
		                ...defaultOptions,
		                ...options
		            });
		            let offset = offsets.create("components");
		            for(let identifier in components){
		                let prefixedIdentifier = prefixIdentifier(identifier, options);
		                let rule = components[identifier];
		                classList.add([
		                    prefixedIdentifier,
		                    options
		                ]);
		                function wrapped(modifier, { isOnlyPlugin  }) {
		                    let [value, coercedType, utilityModifier] = (0, _pluginUtils.coerceValue)(options.types, modifier, options, tailwindConfig);
		                    if (value === undefined) {
		                        return [];
		                    }
		                    if (!options.types.some(({ type  })=>type === coercedType)) {
		                        if (isOnlyPlugin) {
		                            _log.default.warn([
		                                `Unnecessary typehint \`${coercedType}\` in \`${identifier}-${modifier}\`.`,
		                                `You can safely update it to \`${identifier}-${modifier.replace(coercedType + ":", "")}\`.`
		                            ]);
		                        } else {
		                            return [];
		                        }
		                    }
		                    if (!(0, _isSyntacticallyValidPropertyValue.default)(value)) {
		                        return [];
		                    }
		                    let extras = {
		                        get modifier () {
		                            if (!options.modifiers) {
		                                _log.default.warn(`modifier-used-without-options-for-${identifier}`, [
		                                    "Your plugin must set `modifiers: true` in its options to support modifiers."
		                                ]);
		                            }
		                            return utilityModifier;
		                        }
		                    };
		                    let modifiersEnabled = (0, _featureFlagsJs.flagEnabled)(tailwindConfig, "generalizedModifiers");
		                    let ruleSets = [].concat(modifiersEnabled ? rule(value, extras) : rule(value)).filter(Boolean).map((declaration)=>({
		                            [(0, _nameClass.default)(identifier, modifier)]: declaration
		                        }));
		                    return ruleSets;
		                }
		                let withOffsets = [
		                    {
		                        sort: offset,
		                        layer: "components",
		                        options
		                    },
		                    wrapped
		                ];
		                if (!context.candidateRuleMap.has(prefixedIdentifier)) {
		                    context.candidateRuleMap.set(prefixedIdentifier, []);
		                }
		                context.candidateRuleMap.get(prefixedIdentifier).push(withOffsets);
		            }
		        },
		        addVariant (variantName, variantFunctions, options = {}) {
		            variantFunctions = [].concat(variantFunctions).map((variantFunction)=>{
		                if (typeof variantFunction !== "string") {
		                    // Safelist public API functions
		                    return (api = {})=>{
		                        let { args , modifySelectors , container , separator , wrap , format  } = api;
		                        let result = variantFunction(Object.assign({
		                            modifySelectors,
		                            container,
		                            separator
		                        }, options.type === VARIANT_TYPES.MatchVariant && {
		                            args,
		                            wrap,
		                            format
		                        }));
		                        if (typeof result === "string" && !isValidVariantFormatString(result)) {
		                            throw new Error(`Your custom variant \`${variantName}\` has an invalid format string. Make sure it's an at-rule or contains a \`&\` placeholder.`);
		                        }
		                        if (Array.isArray(result)) {
		                            return result.filter((variant)=>typeof variant === "string").map((variant)=>parseVariant(variant));
		                        }
		                        // result may be undefined with legacy variants that use APIs like `modifySelectors`
		                        // result may also be a postcss node if someone was returning the result from `modifySelectors`
		                        return result && typeof result === "string" && parseVariant(result)(api);
		                    };
		                }
		                if (!isValidVariantFormatString(variantFunction)) {
		                    throw new Error(`Your custom variant \`${variantName}\` has an invalid format string. Make sure it's an at-rule or contains a \`&\` placeholder.`);
		                }
		                return parseVariant(variantFunction);
		            });
		            insertInto(variantList, variantName, options);
		            variantMap.set(variantName, variantFunctions);
		            context.variantOptions.set(variantName, options);
		        },
		        matchVariant (variant, variantFn, options) {
		            var _options_id;
		            // A unique identifier that "groups" these variants together.
		            // This is for internal use only which is why it is not present in the types
		            let id = (_options_id = options === null || options === void 0 ? void 0 : options.id) !== null && _options_id !== void 0 ? _options_id : ++variantIdentifier;
		            let isSpecial = variant === "@";
		            let modifiersEnabled = (0, _featureFlagsJs.flagEnabled)(tailwindConfig, "generalizedModifiers");
		            var _options_values;
		            for (let [key, value] of Object.entries((_options_values = options === null || options === void 0 ? void 0 : options.values) !== null && _options_values !== void 0 ? _options_values : {})){
		                if (key === "DEFAULT") continue;
		                api.addVariant(isSpecial ? `${variant}${key}` : `${variant}-${key}`, ({ args , container  })=>{
		                    return variantFn(value, modifiersEnabled ? {
		                        modifier: args === null || args === void 0 ? void 0 : args.modifier,
		                        container
		                    } : {
		                        container
		                    });
		                }, {
		                    ...options,
		                    value,
		                    id,
		                    type: VARIANT_TYPES.MatchVariant,
		                    variantInfo: VARIANT_INFO.Base
		                });
		            }
		            var _options_values1;
		            let hasDefault = "DEFAULT" in ((_options_values1 = options === null || options === void 0 ? void 0 : options.values) !== null && _options_values1 !== void 0 ? _options_values1 : {});
		            api.addVariant(variant, ({ args , container  })=>{
		                if ((args === null || args === void 0 ? void 0 : args.value) === _sharedState.NONE && !hasDefault) {
		                    return null;
		                }
		                var // (JetBrains) plugins.
		                _args_value;
		                return variantFn((args === null || args === void 0 ? void 0 : args.value) === _sharedState.NONE ? options.values.DEFAULT : (_args_value = args === null || args === void 0 ? void 0 : args.value) !== null && _args_value !== void 0 ? _args_value : typeof args === "string" ? args : "", modifiersEnabled ? {
		                    modifier: args === null || args === void 0 ? void 0 : args.modifier,
		                    container
		                } : {
		                    container
		                });
		            }, {
		                ...options,
		                id,
		                type: VARIANT_TYPES.MatchVariant,
		                variantInfo: VARIANT_INFO.Dynamic
		            });
		        }
		    };
		    return api;
		}
		let fileModifiedMapCache = new WeakMap();
		function getFileModifiedMap(context) {
		    if (!fileModifiedMapCache.has(context)) {
		        fileModifiedMapCache.set(context, new Map());
		    }
		    return fileModifiedMapCache.get(context);
		}
		function trackModified(files, fileModifiedMap) {
		    let changed = false;
		    let mtimesToCommit = new Map();
		    for (let file of files){
		        var _fs_statSync;
		        if (!file) continue;
		        let parsed = _url.default.parse(file);
		        let pathname = parsed.hash ? parsed.href.replace(parsed.hash, "") : parsed.href;
		        pathname = parsed.search ? pathname.replace(parsed.search, "") : pathname;
		        let newModified = (_fs_statSync = _fs.default.statSync(decodeURIComponent(pathname), {
		            throwIfNoEntry: false
		        })) === null || _fs_statSync === void 0 ? void 0 : _fs_statSync.mtimeMs;
		        if (!newModified) {
		            continue;
		        }
		        if (!fileModifiedMap.has(file) || newModified > fileModifiedMap.get(file)) {
		            changed = true;
		        }
		        mtimesToCommit.set(file, newModified);
		    }
		    return [
		        changed,
		        mtimesToCommit
		    ];
		}
		function extractVariantAtRules(node) {
		    node.walkAtRules((atRule)=>{
		        if ([
		            "responsive",
		            "variants"
		        ].includes(atRule.name)) {
		            extractVariantAtRules(atRule);
		            atRule.before(atRule.nodes);
		            atRule.remove();
		        }
		    });
		}
		function collectLayerPlugins(root) {
		    let layerPlugins = [];
		    root.each((node)=>{
		        if (node.type === "atrule" && [
		            "responsive",
		            "variants"
		        ].includes(node.name)) {
		            node.name = "layer";
		            node.params = "utilities";
		        }
		    });
		    // Walk @layer rules and treat them like plugins
		    root.walkAtRules("layer", (layerRule)=>{
		        extractVariantAtRules(layerRule);
		        if (layerRule.params === "base") {
		            for (let node of layerRule.nodes){
		                layerPlugins.push(function({ addBase  }) {
		                    addBase(node, {
		                        respectPrefix: false
		                    });
		                });
		            }
		            layerRule.remove();
		        } else if (layerRule.params === "components") {
		            for (let node1 of layerRule.nodes){
		                layerPlugins.push(function({ addComponents  }) {
		                    addComponents(node1, {
		                        respectPrefix: false,
		                        preserveSource: true
		                    });
		                });
		            }
		            layerRule.remove();
		        } else if (layerRule.params === "utilities") {
		            for (let node2 of layerRule.nodes){
		                layerPlugins.push(function({ addUtilities  }) {
		                    addUtilities(node2, {
		                        respectPrefix: false,
		                        preserveSource: true
		                    });
		                });
		            }
		            layerRule.remove();
		        }
		    });
		    return layerPlugins;
		}
		function resolvePlugins(context, root) {
		    let corePluginList = Object.entries({
		        ..._corePlugins.variantPlugins,
		        ..._corePlugins.corePlugins
		    }).map(([name, plugin])=>{
		        if (!context.tailwindConfig.corePlugins.includes(name)) {
		            return null;
		        }
		        return plugin;
		    }).filter(Boolean);
		    let userPlugins = context.tailwindConfig.plugins.map((plugin)=>{
		        if (plugin.__isOptionsFunction) {
		            plugin = plugin();
		        }
		        return typeof plugin === "function" ? plugin : plugin.handler;
		    });
		    let layerPlugins = collectLayerPlugins(root);
		    // TODO: This is a workaround for backwards compatibility, since custom variants
		    // were historically sorted before screen/stackable variants.
		    let beforeVariants = [
		        _corePlugins.variantPlugins["pseudoElementVariants"],
		        _corePlugins.variantPlugins["pseudoClassVariants"],
		        _corePlugins.variantPlugins["ariaVariants"],
		        _corePlugins.variantPlugins["dataVariants"]
		    ];
		    let afterVariants = [
		        _corePlugins.variantPlugins["supportsVariants"],
		        _corePlugins.variantPlugins["directionVariants"],
		        _corePlugins.variantPlugins["reducedMotionVariants"],
		        _corePlugins.variantPlugins["prefersContrastVariants"],
		        _corePlugins.variantPlugins["darkVariants"],
		        _corePlugins.variantPlugins["printVariant"],
		        _corePlugins.variantPlugins["screenVariants"],
		        _corePlugins.variantPlugins["orientationVariants"]
		    ];
		    return [
		        ...corePluginList,
		        ...beforeVariants,
		        ...userPlugins,
		        ...afterVariants,
		        ...layerPlugins
		    ];
		}
		function registerPlugins(plugins, context) {
		    let variantList = [];
		    let variantMap = new Map();
		    context.variantMap = variantMap;
		    let offsets = new _offsetsJs.Offsets();
		    context.offsets = offsets;
		    let classList = new Set();
		    let pluginApi = buildPluginApi(context.tailwindConfig, context, {
		        variantList,
		        variantMap,
		        offsets,
		        classList
		    });
		    for (let plugin of plugins){
		        if (Array.isArray(plugin)) {
		            for (let pluginItem of plugin){
		                pluginItem(pluginApi);
		            }
		        } else {
		            plugin === null || plugin === void 0 ? void 0 : plugin(pluginApi);
		        }
		    }
		    // Make sure to record bit masks for every variant
		    offsets.recordVariants(variantList, (variant)=>variantMap.get(variant).length);
		    // Build variantMap
		    for (let [variantName, variantFunctions] of variantMap.entries()){
		        context.variantMap.set(variantName, variantFunctions.map((variantFunction, idx)=>[
		                offsets.forVariant(variantName, idx),
		                variantFunction
		            ]));
		    }
		    var _context_tailwindConfig_safelist;
		    let safelist = ((_context_tailwindConfig_safelist = context.tailwindConfig.safelist) !== null && _context_tailwindConfig_safelist !== void 0 ? _context_tailwindConfig_safelist : []).filter(Boolean);
		    if (safelist.length > 0) {
		        let checks = [];
		        for (let value of safelist){
		            if (typeof value === "string") {
		                context.changedContent.push({
		                    content: value,
		                    extension: "html"
		                });
		                continue;
		            }
		            if (value instanceof RegExp) {
		                _log.default.warn("root-regex", [
		                    "Regular expressions in `safelist` work differently in Tailwind CSS v3.0.",
		                    "Update your `safelist` configuration to eliminate this warning.",
		                    "https://tailwindcss.com/docs/content-configuration#safelisting-classes"
		                ]);
		                continue;
		            }
		            checks.push(value);
		        }
		        if (checks.length > 0) {
		            let patternMatchingCount = new Map();
		            let prefixLength = context.tailwindConfig.prefix.length;
		            let checkImportantUtils = checks.some((check)=>check.pattern.source.includes("!"));
		            for (let util of classList){
		                let utils = Array.isArray(util) ? (()=>{
		                    let [utilName, options] = util;
		                    var _options_values;
		                    let values = Object.keys((_options_values = options === null || options === void 0 ? void 0 : options.values) !== null && _options_values !== void 0 ? _options_values : {});
		                    let classes = values.map((value)=>(0, _nameClass.formatClass)(utilName, value));
		                    if (options === null || options === void 0 ? void 0 : options.supportsNegativeValues) {
		                        // This is the normal negated version
		                        // e.g. `-inset-1` or `-tw-inset-1`
		                        classes = [
		                            ...classes,
		                            ...classes.map((cls)=>"-" + cls)
		                        ];
		                        // This is the negated version *after* the prefix
		                        // e.g. `tw--inset-1`
		                        // The prefix is already attached to util name
		                        // So we add the negative after the prefix
		                        classes = [
		                            ...classes,
		                            ...classes.map((cls)=>cls.slice(0, prefixLength) + "-" + cls.slice(prefixLength))
		                        ];
		                    }
		                    if (options.types.some(({ type  })=>type === "color")) {
		                        classes = [
		                            ...classes,
		                            ...classes.flatMap((cls)=>Object.keys(context.tailwindConfig.theme.opacity).map((opacity)=>`${cls}/${opacity}`))
		                        ];
		                    }
		                    if (checkImportantUtils && (options === null || options === void 0 ? void 0 : options.respectImportant)) {
		                        classes = [
		                            ...classes,
		                            ...classes.map((cls)=>"!" + cls)
		                        ];
		                    }
		                    return classes;
		                })() : [
		                    util
		                ];
		                for (let util1 of utils){
		                    for (let { pattern , variants =[]  } of checks){
		                        // RegExp with the /g flag are stateful, so let's reset the last
		                        // index pointer to reset the state.
		                        pattern.lastIndex = 0;
		                        if (!patternMatchingCount.has(pattern)) {
		                            patternMatchingCount.set(pattern, 0);
		                        }
		                        if (!pattern.test(util1)) continue;
		                        patternMatchingCount.set(pattern, patternMatchingCount.get(pattern) + 1);
		                        context.changedContent.push({
		                            content: util1,
		                            extension: "html"
		                        });
		                        for (let variant of variants){
		                            context.changedContent.push({
		                                content: variant + context.tailwindConfig.separator + util1,
		                                extension: "html"
		                            });
		                        }
		                    }
		                }
		            }
		            for (let [regex, count] of patternMatchingCount.entries()){
		                if (count !== 0) continue;
		                _log.default.warn([
		                    `The safelist pattern \`${regex}\` doesn't match any Tailwind CSS classes.`,
		                    "Fix this pattern or remove it from your `safelist` configuration.",
		                    "https://tailwindcss.com/docs/content-configuration#safelisting-classes"
		                ]);
		            }
		        }
		    }
		    var _context_tailwindConfig_darkMode, _concat_;
		    let darkClassName = (_concat_ = [].concat((_context_tailwindConfig_darkMode = context.tailwindConfig.darkMode) !== null && _context_tailwindConfig_darkMode !== void 0 ? _context_tailwindConfig_darkMode : "media")[1]) !== null && _concat_ !== void 0 ? _concat_ : "dark";
		    // A list of utilities that are used by certain Tailwind CSS utilities but
		    // that don't exist on their own. This will result in them "not existing" and
		    // sorting could be weird since you still require them in order to make the
		    // host utilities work properly. (Thanks Biology)
		    let parasiteUtilities = [
		        prefix(context, darkClassName),
		        prefix(context, "group"),
		        prefix(context, "peer")
		    ];
		    context.getClassOrder = function getClassOrder(classes) {
		        // Sort classes so they're ordered in a deterministic manner
		        let sorted = [
		            ...classes
		        ].sort((a, z)=>{
		            if (a === z) return 0;
		            if (a < z) return -1;
		            return 1;
		        });
		        // Non-util classes won't be generated, so we default them to null
		        let sortedClassNames = new Map(sorted.map((className)=>[
		                className,
		                null
		            ]));
		        // Sort all classes in order
		        // Non-tailwind classes won't be generated and will be left as `null`
		        let rules = (0, _generateRules.generateRules)(new Set(sorted), context);
		        rules = context.offsets.sort(rules);
		        let idx = BigInt(parasiteUtilities.length);
		        for (const [, rule] of rules){
		            sortedClassNames.set(rule.raws.tailwind.candidate, idx++);
		        }
		        return classes.map((className)=>{
		            var _sortedClassNames_get;
		            let order = (_sortedClassNames_get = sortedClassNames.get(className)) !== null && _sortedClassNames_get !== void 0 ? _sortedClassNames_get : null;
		            let parasiteIndex = parasiteUtilities.indexOf(className);
		            if (order === null && parasiteIndex !== -1) {
		                // This will make sure that it is at the very beginning of the
		                // `components` layer which technically means 'before any
		                // components'.
		                order = BigInt(parasiteIndex);
		            }
		            return [
		                className,
		                order
		            ];
		        });
		    };
		    // Generate a list of strings for autocompletion purposes, e.g.
		    // ['uppercase', 'lowercase', ...]
		    context.getClassList = function getClassList(options = {}) {
		        let output = [];
		        for (let util of classList){
		            if (Array.isArray(util)) {
		                var _utilOptions_types;
		                let [utilName, utilOptions] = util;
		                let negativeClasses = [];
		                var _utilOptions_modifiers;
		                let modifiers = Object.keys((_utilOptions_modifiers = utilOptions === null || utilOptions === void 0 ? void 0 : utilOptions.modifiers) !== null && _utilOptions_modifiers !== void 0 ? _utilOptions_modifiers : {});
		                if (utilOptions === null || utilOptions === void 0 ? void 0 : (_utilOptions_types = utilOptions.types) === null || _utilOptions_types === void 0 ? void 0 : _utilOptions_types.some(({ type  })=>type === "color")) {
		                    var _context_tailwindConfig_theme_opacity;
		                    modifiers.push(...Object.keys((_context_tailwindConfig_theme_opacity = context.tailwindConfig.theme.opacity) !== null && _context_tailwindConfig_theme_opacity !== void 0 ? _context_tailwindConfig_theme_opacity : {}));
		                }
		                let metadata = {
		                    modifiers
		                };
		                let includeMetadata = options.includeMetadata && modifiers.length > 0;
		                var _utilOptions_values;
		                for (let [key, value] of Object.entries((_utilOptions_values = utilOptions === null || utilOptions === void 0 ? void 0 : utilOptions.values) !== null && _utilOptions_values !== void 0 ? _utilOptions_values : {})){
		                    // Ignore undefined and null values
		                    if (value == null) {
		                        continue;
		                    }
		                    let cls = (0, _nameClass.formatClass)(utilName, key);
		                    output.push(includeMetadata ? [
		                        cls,
		                        metadata
		                    ] : cls);
		                    if ((utilOptions === null || utilOptions === void 0 ? void 0 : utilOptions.supportsNegativeValues) && (0, _negateValue.default)(value)) {
		                        let cls1 = (0, _nameClass.formatClass)(utilName, `-${key}`);
		                        negativeClasses.push(includeMetadata ? [
		                            cls1,
		                            metadata
		                        ] : cls1);
		                    }
		                }
		                output.push(...negativeClasses);
		            } else {
		                output.push(util);
		            }
		        }
		        return output;
		    };
		    // Generate a list of available variants with meta information of the type of variant.
		    context.getVariants = function getVariants() {
		        let result = [];
		        for (let [name, options] of context.variantOptions.entries()){
		            if (options.variantInfo === VARIANT_INFO.Base) continue;
		            var _options_values;
		            result.push({
		                name,
		                isArbitrary: options.type === Symbol.for("MATCH_VARIANT"),
		                values: Object.keys((_options_values = options.values) !== null && _options_values !== void 0 ? _options_values : {}),
		                hasDash: name !== "@",
		                selectors ({ modifier , value  } = {}) {
		                    let candidate = "__TAILWIND_PLACEHOLDER__";
		                    let rule = _postcss.default.rule({
		                        selector: `.${candidate}`
		                    });
		                    let container = _postcss.default.root({
		                        nodes: [
		                            rule.clone()
		                        ]
		                    });
		                    let before = container.toString();
		                    var _context_variantMap_get;
		                    let fns = ((_context_variantMap_get = context.variantMap.get(name)) !== null && _context_variantMap_get !== void 0 ? _context_variantMap_get : []).flatMap(([_, fn])=>fn);
		                    let formatStrings = [];
		                    for (let fn of fns){
		                        var _options_values;
		                        let localFormatStrings = [];
		                        var _options_values_value;
		                        let api = {
		                            args: {
		                                modifier,
		                                value: (_options_values_value = (_options_values = options.values) === null || _options_values === void 0 ? void 0 : _options_values[value]) !== null && _options_values_value !== void 0 ? _options_values_value : value
		                            },
		                            separator: context.tailwindConfig.separator,
		                            modifySelectors (modifierFunction) {
		                                // Run the modifierFunction over each rule
		                                container.each((rule)=>{
		                                    if (rule.type !== "rule") {
		                                        return;
		                                    }
		                                    rule.selectors = rule.selectors.map((selector)=>{
		                                        return modifierFunction({
		                                            get className () {
		                                                return (0, _generateRules.getClassNameFromSelector)(selector);
		                                            },
		                                            selector
		                                        });
		                                    });
		                                });
		                                return container;
		                            },
		                            format (str) {
		                                localFormatStrings.push(str);
		                            },
		                            wrap (wrapper) {
		                                localFormatStrings.push(`@${wrapper.name} ${wrapper.params} { & }`);
		                            },
		                            container
		                        };
		                        let ruleWithVariant = fn(api);
		                        if (localFormatStrings.length > 0) {
		                            formatStrings.push(localFormatStrings);
		                        }
		                        if (Array.isArray(ruleWithVariant)) {
		                            for (let variantFunction of ruleWithVariant){
		                                localFormatStrings = [];
		                                variantFunction(api);
		                                formatStrings.push(localFormatStrings);
		                            }
		                        }
		                    }
		                    // Reverse engineer the result of the `container`
		                    let manualFormatStrings = [];
		                    let after = container.toString();
		                    if (before !== after) {
		                        // Figure out all selectors
		                        container.walkRules((rule)=>{
		                            let modified = rule.selector;
		                            // Rebuild the base selector, this is what plugin authors would do
		                            // as well. E.g.: `${variant}${separator}${className}`.
		                            // However, plugin authors probably also prepend or append certain
		                            // classes, pseudos, ids, ...
		                            let rebuiltBase = (0, _postcssSelectorParser.default)((selectors)=>{
		                                selectors.walkClasses((classNode)=>{
		                                    classNode.value = `${name}${context.tailwindConfig.separator}${classNode.value}`;
		                                });
		                            }).processSync(modified);
		                            // Now that we know the original selector, the new selector, and
		                            // the rebuild part in between, we can replace the part that plugin
		                            // authors need to rebuild with `&`, and eventually store it in the
		                            // collectedFormats. Similar to what `format('...')` would do.
		                            //
		                            // E.g.:
		                            //                   variant: foo
		                            //                  selector: .markdown > p
		                            //      modified (by plugin): .foo .foo\\:markdown > p
		                            //    rebuiltBase (internal): .foo\\:markdown > p
		                            //                    format: .foo &
		                            manualFormatStrings.push(modified.replace(rebuiltBase, "&").replace(candidate, "&"));
		                        });
		                        // Figure out all atrules
		                        container.walkAtRules((atrule)=>{
		                            manualFormatStrings.push(`@${atrule.name} (${atrule.params}) { & }`);
		                        });
		                    }
		                    var _options_values1;
		                    let isArbitraryVariant = !(value in ((_options_values1 = options.values) !== null && _options_values1 !== void 0 ? _options_values1 : {}));
		                    formatStrings = formatStrings.map((format)=>format.map((str)=>({
		                                format: str,
		                                isArbitraryVariant
		                            })));
		                    manualFormatStrings = manualFormatStrings.map((format)=>({
		                            format,
		                            isArbitraryVariant
		                        }));
		                    let opts = {
		                        candidate,
		                        context
		                    };
		                    let result = formatStrings.map((formats)=>(0, _formatVariantSelector.finalizeSelector)(`.${candidate}`, (0, _formatVariantSelector.formatVariantSelector)(formats, opts), opts).replace(`.${candidate}`, "&").replace("{ & }", "").trim());
		                    if (manualFormatStrings.length > 0) {
		                        result.push((0, _formatVariantSelector.formatVariantSelector)(manualFormatStrings, opts).toString().replace(`.${candidate}`, "&"));
		                    }
		                    return result;
		                }
		            });
		        }
		        return result;
		    };
		}
		/**
		 * Mark as class as retroactively invalid
		 *
		 *
		 * @param {string} candidate
		 */ function markInvalidUtilityCandidate(context, candidate) {
		    if (!context.classCache.has(candidate)) {
		        return;
		    }
		    // Mark this as not being a real utility
		    context.notClassCache.add(candidate);
		    // Remove it from any candidate-specific caches
		    context.classCache.delete(candidate);
		    context.applyClassCache.delete(candidate);
		    context.candidateRuleMap.delete(candidate);
		    context.candidateRuleCache.delete(candidate);
		    // Ensure the stylesheet gets rebuilt
		    context.stylesheetCache = null;
		}
		/**
		 * Mark as class as retroactively invalid
		 *
		 * @param {import('postcss').Node} node
		 */ function markInvalidUtilityNode(context, node) {
		    let candidate = node.raws.tailwind.candidate;
		    if (!candidate) {
		        return;
		    }
		    for (const entry of context.ruleCache){
		        if (entry[1].raws.tailwind.candidate === candidate) {
		            context.ruleCache.delete(entry);
		        // context.postCssNodeCache.delete(node)
		        }
		    }
		    markInvalidUtilityCandidate(context, candidate);
		}
		function createContext(tailwindConfig, changedContent = [], root = _postcss.default.root()) {
		    var _tailwindConfig_blocklist;
		    let context = {
		        disposables: [],
		        ruleCache: new Set(),
		        candidateRuleCache: new Map(),
		        classCache: new Map(),
		        applyClassCache: new Map(),
		        // Seed the not class cache with the blocklist (which is only strings)
		        notClassCache: new Set((_tailwindConfig_blocklist = tailwindConfig.blocklist) !== null && _tailwindConfig_blocklist !== void 0 ? _tailwindConfig_blocklist : []),
		        postCssNodeCache: new Map(),
		        candidateRuleMap: new Map(),
		        tailwindConfig,
		        changedContent: changedContent,
		        variantMap: new Map(),
		        stylesheetCache: null,
		        variantOptions: new Map(),
		        markInvalidUtilityCandidate: (candidate)=>markInvalidUtilityCandidate(context, candidate),
		        markInvalidUtilityNode: (node)=>markInvalidUtilityNode(context, node)
		    };
		    let resolvedPlugins = resolvePlugins(context, root);
		    registerPlugins(resolvedPlugins, context);
		    return context;
		}
		let contextMap = _sharedState.contextMap;
		let configContextMap = _sharedState.configContextMap;
		let contextSourcesMap = _sharedState.contextSourcesMap;
		function getContext(root, result, tailwindConfig, userConfigPath, tailwindConfigHash, contextDependencies) {
		    let sourcePath = result.opts.from;
		    let isConfigFile = userConfigPath !== null;
		    _sharedState.env.DEBUG && console.log("Source path:", sourcePath);
		    let existingContext;
		    if (isConfigFile && contextMap.has(sourcePath)) {
		        existingContext = contextMap.get(sourcePath);
		    } else if (configContextMap.has(tailwindConfigHash)) {
		        let context = configContextMap.get(tailwindConfigHash);
		        contextSourcesMap.get(context).add(sourcePath);
		        contextMap.set(sourcePath, context);
		        existingContext = context;
		    }
		    let cssDidChange = (0, _cacheInvalidationJs.hasContentChanged)(sourcePath, root);
		    // If there's already a context in the cache and we don't need to
		    // reset the context, return the cached context.
		    if (existingContext) {
		        let [contextDependenciesChanged, mtimesToCommit] = trackModified([
		            ...contextDependencies
		        ], getFileModifiedMap(existingContext));
		        if (!contextDependenciesChanged && !cssDidChange) {
		            return [
		                existingContext,
		                false,
		                mtimesToCommit
		            ];
		        }
		    }
		    // If this source is in the context map, get the old context.
		    // Remove this source from the context sources for the old context,
		    // and clean up that context if no one else is using it. This can be
		    // called by many processes in rapid succession, so we check for presence
		    // first because the first process to run this code will wipe it out first.
		    if (contextMap.has(sourcePath)) {
		        let oldContext = contextMap.get(sourcePath);
		        if (contextSourcesMap.has(oldContext)) {
		            contextSourcesMap.get(oldContext).delete(sourcePath);
		            if (contextSourcesMap.get(oldContext).size === 0) {
		                contextSourcesMap.delete(oldContext);
		                for (let [tailwindConfigHash1, context1] of configContextMap){
		                    if (context1 === oldContext) {
		                        configContextMap.delete(tailwindConfigHash1);
		                    }
		                }
		                for (let disposable of oldContext.disposables.splice(0)){
		                    disposable(oldContext);
		                }
		            }
		        }
		    }
		    _sharedState.env.DEBUG && console.log("Setting up new context...");
		    let context2 = createContext(tailwindConfig, [], root);
		    Object.assign(context2, {
		        userConfigPath
		    });
		    let [, mtimesToCommit1] = trackModified([
		        ...contextDependencies
		    ], getFileModifiedMap(context2));
		    // ---
		    // Update all context tracking state
		    configContextMap.set(tailwindConfigHash, context2);
		    contextMap.set(sourcePath, context2);
		    if (!contextSourcesMap.has(context2)) {
		        contextSourcesMap.set(context2, new Set());
		    }
		    contextSourcesMap.get(context2).add(sourcePath);
		    return [
		        context2,
		        true,
		        mtimesToCommit1
		    ];
		}
} (setupContextUtils));
	return setupContextUtils;
}

var parseDependency = {};

var hasRequiredParseDependency;

function requireParseDependency () {
	if (hasRequiredParseDependency) return parseDependency;
	hasRequiredParseDependency = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>parseDependency
		});
		function parseDependency(contentPath) {
		    if (contentPath.ignore) {
		        return [];
		    }
		    if (!contentPath.glob) {
		        return [
		            {
		                type: "dependency",
		                file: contentPath.base
		            }
		        ];
		    }
		    if (({}).ROLLUP_WATCH === "true") {
		        // rollup-plugin-postcss does not support dir-dependency messages
		        // but directories can be watched in the same way as files
		        return [
		            {
		                type: "dependency",
		                file: contentPath.base
		            }
		        ];
		    }
		    return [
		        {
		            type: "dir-dependency",
		            dir: contentPath.base,
		            glob: contentPath.glob
		        }
		    ];
		}
} (parseDependency));
	return parseDependency;
}

var validateConfig = {};

var hasRequiredValidateConfig;

function requireValidateConfig () {
	if (hasRequiredValidateConfig) return validateConfig;
	hasRequiredValidateConfig = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "validateConfig", {
		    enumerable: true,
		    get: ()=>validateConfig
		});
		const _log = /*#__PURE__*/ _interopRequireDefault(requireLog());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function validateConfig(config) {
		    if (config.content.files.length === 0) {
		        _log.default.warn("content-problems", [
		            "The `content` option in your Tailwind CSS configuration is missing or empty.",
		            "Configure your content sources or your generated CSS will be missing styles.",
		            "https://tailwindcss.com/docs/content-configuration"
		        ]);
		    }
		    // Warn if the line-clamp plugin is installed
		    try {
		        let plugin = require("@tailwindcss/line-clamp");
		        if (config.plugins.includes(plugin)) {
		            _log.default.warn("line-clamp-in-core", [
		                "As of Tailwind CSS v3.3, the `@tailwindcss/line-clamp` plugin is now included by default.",
		                "Remove it from the `plugins` array in your configuration to eliminate this warning."
		            ]);
		            config.plugins = config.plugins.filter((p)=>p !== plugin);
		        }
		    } catch  {}
		    return config;
		}
} (validateConfig));
	return validateConfig;
}

var content = {};

/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */

var isExtglob;
var hasRequiredIsExtglob;

function requireIsExtglob () {
	if (hasRequiredIsExtglob) return isExtglob;
	hasRequiredIsExtglob = 1;
	isExtglob = function isExtglob(str) {
	  if (typeof str !== 'string' || str === '') {
	    return false;
	  }

	  var match;
	  while ((match = /(\\).|([@?!+*]\(.*\))/g.exec(str))) {
	    if (match[2]) return true;
	    str = str.slice(match.index + match[0].length);
	  }

	  return false;
	};
	return isExtglob;
}

/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var isGlob;
var hasRequiredIsGlob;

function requireIsGlob () {
	if (hasRequiredIsGlob) return isGlob;
	hasRequiredIsGlob = 1;
	var isExtglob = requireIsExtglob();
	var chars = { '{': '}', '(': ')', '[': ']'};
	var strictCheck = function(str) {
	  if (str[0] === '!') {
	    return true;
	  }
	  var index = 0;
	  var pipeIndex = -2;
	  var closeSquareIndex = -2;
	  var closeCurlyIndex = -2;
	  var closeParenIndex = -2;
	  var backSlashIndex = -2;
	  while (index < str.length) {
	    if (str[index] === '*') {
	      return true;
	    }

	    if (str[index + 1] === '?' && /[\].+)]/.test(str[index])) {
	      return true;
	    }

	    if (closeSquareIndex !== -1 && str[index] === '[' && str[index + 1] !== ']') {
	      if (closeSquareIndex < index) {
	        closeSquareIndex = str.indexOf(']', index);
	      }
	      if (closeSquareIndex > index) {
	        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
	          return true;
	        }
	        backSlashIndex = str.indexOf('\\', index);
	        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
	          return true;
	        }
	      }
	    }

	    if (closeCurlyIndex !== -1 && str[index] === '{' && str[index + 1] !== '}') {
	      closeCurlyIndex = str.indexOf('}', index);
	      if (closeCurlyIndex > index) {
	        backSlashIndex = str.indexOf('\\', index);
	        if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
	          return true;
	        }
	      }
	    }

	    if (closeParenIndex !== -1 && str[index] === '(' && str[index + 1] === '?' && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ')') {
	      closeParenIndex = str.indexOf(')', index);
	      if (closeParenIndex > index) {
	        backSlashIndex = str.indexOf('\\', index);
	        if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
	          return true;
	        }
	      }
	    }

	    if (pipeIndex !== -1 && str[index] === '(' && str[index + 1] !== '|') {
	      if (pipeIndex < index) {
	        pipeIndex = str.indexOf('|', index);
	      }
	      if (pipeIndex !== -1 && str[pipeIndex + 1] !== ')') {
	        closeParenIndex = str.indexOf(')', pipeIndex);
	        if (closeParenIndex > pipeIndex) {
	          backSlashIndex = str.indexOf('\\', pipeIndex);
	          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
	            return true;
	          }
	        }
	      }
	    }

	    if (str[index] === '\\') {
	      var open = str[index + 1];
	      index += 2;
	      var close = chars[open];

	      if (close) {
	        var n = str.indexOf(close, index);
	        if (n !== -1) {
	          index = n + 1;
	        }
	      }

	      if (str[index] === '!') {
	        return true;
	      }
	    } else {
	      index++;
	    }
	  }
	  return false;
	};

	var relaxedCheck = function(str) {
	  if (str[0] === '!') {
	    return true;
	  }
	  var index = 0;
	  while (index < str.length) {
	    if (/[*?{}()[\]]/.test(str[index])) {
	      return true;
	    }

	    if (str[index] === '\\') {
	      var open = str[index + 1];
	      index += 2;
	      var close = chars[open];

	      if (close) {
	        var n = str.indexOf(close, index);
	        if (n !== -1) {
	          index = n + 1;
	        }
	      }

	      if (str[index] === '!') {
	        return true;
	      }
	    } else {
	      index++;
	    }
	  }
	  return false;
	};

	isGlob = function isGlob(str, options) {
	  if (typeof str !== 'string' || str === '') {
	    return false;
	  }

	  if (isExtglob(str)) {
	    return true;
	  }

	  var check = strictCheck;

	  // optionally relax check
	  if (options && options.strict === false) {
	    check = relaxedCheck;
	  }

	  return check(str);
	};
	return isGlob;
}

var tasks = {};

var utils$3 = {};

var array = {};

var hasRequiredArray;

function requireArray () {
	if (hasRequiredArray) return array;
	hasRequiredArray = 1;
	Object.defineProperty(array, "__esModule", { value: true });
	array.splitWhen = array.flatten = void 0;
	function flatten(items) {
	    return items.reduce((collection, item) => [].concat(collection, item), []);
	}
	array.flatten = flatten;
	function splitWhen(items, predicate) {
	    const result = [[]];
	    let groupIndex = 0;
	    for (const item of items) {
	        if (predicate(item)) {
	            groupIndex++;
	            result[groupIndex] = [];
	        }
	        else {
	            result[groupIndex].push(item);
	        }
	    }
	    return result;
	}
	array.splitWhen = splitWhen;
	return array;
}

var errno = {};

var hasRequiredErrno;

function requireErrno () {
	if (hasRequiredErrno) return errno;
	hasRequiredErrno = 1;
	Object.defineProperty(errno, "__esModule", { value: true });
	errno.isEnoentCodeError = void 0;
	function isEnoentCodeError(error) {
	    return error.code === 'ENOENT';
	}
	errno.isEnoentCodeError = isEnoentCodeError;
	return errno;
}

var fs$3 = {};

var hasRequiredFs$3;

function requireFs$3 () {
	if (hasRequiredFs$3) return fs$3;
	hasRequiredFs$3 = 1;
	Object.defineProperty(fs$3, "__esModule", { value: true });
	fs$3.createDirentFromStats = void 0;
	class DirentFromStats {
	    constructor(name, stats) {
	        this.name = name;
	        this.isBlockDevice = stats.isBlockDevice.bind(stats);
	        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
	        this.isDirectory = stats.isDirectory.bind(stats);
	        this.isFIFO = stats.isFIFO.bind(stats);
	        this.isFile = stats.isFile.bind(stats);
	        this.isSocket = stats.isSocket.bind(stats);
	        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
	    }
	}
	function createDirentFromStats(name, stats) {
	    return new DirentFromStats(name, stats);
	}
	fs$3.createDirentFromStats = createDirentFromStats;
	return fs$3;
}

var path = {};

var hasRequiredPath;

function requirePath () {
	if (hasRequiredPath) return path;
	hasRequiredPath = 1;
	Object.defineProperty(path, "__esModule", { value: true });
	path.removeLeadingDotSegment = path.escape = path.makeAbsolute = path.unixify = void 0;
	const path$1 = require$$3;
	const LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2; // ./ or .\\
	const UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;
	/**
	 * Designed to work only with simple paths: `dir\\file`.
	 */
	function unixify(filepath) {
	    return filepath.replace(/\\/g, '/');
	}
	path.unixify = unixify;
	function makeAbsolute(cwd, filepath) {
	    return path$1.resolve(cwd, filepath);
	}
	path.makeAbsolute = makeAbsolute;
	function escape(pattern) {
	    return pattern.replace(UNESCAPED_GLOB_SYMBOLS_RE, '\\$2');
	}
	path.escape = escape;
	function removeLeadingDotSegment(entry) {
	    // We do not use `startsWith` because this is 10x slower than current implementation for some cases.
	    // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with
	    if (entry.charAt(0) === '.') {
	        const secondCharactery = entry.charAt(1);
	        if (secondCharactery === '/' || secondCharactery === '\\') {
	            return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
	        }
	    }
	    return entry;
	}
	path.removeLeadingDotSegment = removeLeadingDotSegment;
	return path;
}

var pattern = {};

var globParent$1;
var hasRequiredGlobParent$1;

function requireGlobParent$1 () {
	if (hasRequiredGlobParent$1) return globParent$1;
	hasRequiredGlobParent$1 = 1;

	var isGlob = requireIsGlob();
	var pathPosixDirname = require$$3.posix.dirname;
	var isWin32 = require$$3.platform() === 'win32';

	var slash = '/';
	var backslash = /\\/g;
	var enclosure = /[\{\[].*[\}\]]$/;
	var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
	var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;

	/**
	 * @param {string} str
	 * @param {Object} opts
	 * @param {boolean} [opts.flipBackslashes=true]
	 * @returns {string}
	 */
	globParent$1 = function globParent(str, opts) {
	  var options = Object.assign({ flipBackslashes: true }, opts);

	  // flip windows path separators
	  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
	    str = str.replace(backslash, slash);
	  }

	  // special case for strings ending in enclosure containing path separator
	  if (enclosure.test(str)) {
	    str += slash;
	  }

	  // preserves full path in case of trailing path separator
	  str += 'a';

	  // remove path parts that are globby
	  do {
	    str = pathPosixDirname(str);
	  } while (isGlob(str) || globby.test(str));

	  // remove escape chars and return result
	  return str.replace(escaped, '$1');
	};
	return globParent$1;
}

var utils$2 = {};

var hasRequiredUtils$3;

function requireUtils$3 () {
	if (hasRequiredUtils$3) return utils$2;
	hasRequiredUtils$3 = 1;
	(function (exports) {

		exports.isInteger = num => {
		  if (typeof num === 'number') {
		    return Number.isInteger(num);
		  }
		  if (typeof num === 'string' && num.trim() !== '') {
		    return Number.isInteger(Number(num));
		  }
		  return false;
		};

		/**
		 * Find a node of the given type
		 */

		exports.find = (node, type) => node.nodes.find(node => node.type === type);

		/**
		 * Find a node of the given type
		 */

		exports.exceedsLimit = (min, max, step = 1, limit) => {
		  if (limit === false) return false;
		  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;
		  return ((Number(max) - Number(min)) / Number(step)) >= limit;
		};

		/**
		 * Escape the given node with '\\' before node.value
		 */

		exports.escapeNode = (block, n = 0, type) => {
		  let node = block.nodes[n];
		  if (!node) return;

		  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {
		    if (node.escaped !== true) {
		      node.value = '\\' + node.value;
		      node.escaped = true;
		    }
		  }
		};

		/**
		 * Returns true if the given brace node should be enclosed in literal braces
		 */

		exports.encloseBrace = node => {
		  if (node.type !== 'brace') return false;
		  if ((node.commas >> 0 + node.ranges >> 0) === 0) {
		    node.invalid = true;
		    return true;
		  }
		  return false;
		};

		/**
		 * Returns true if a brace node is invalid.
		 */

		exports.isInvalidBrace = block => {
		  if (block.type !== 'brace') return false;
		  if (block.invalid === true || block.dollar) return true;
		  if ((block.commas >> 0 + block.ranges >> 0) === 0) {
		    block.invalid = true;
		    return true;
		  }
		  if (block.open !== true || block.close !== true) {
		    block.invalid = true;
		    return true;
		  }
		  return false;
		};

		/**
		 * Returns true if a node is an open or close node
		 */

		exports.isOpenOrClose = node => {
		  if (node.type === 'open' || node.type === 'close') {
		    return true;
		  }
		  return node.open === true || node.close === true;
		};

		/**
		 * Reduce an array of text nodes.
		 */

		exports.reduce = nodes => nodes.reduce((acc, node) => {
		  if (node.type === 'text') acc.push(node.value);
		  if (node.type === 'range') node.type = 'text';
		  return acc;
		}, []);

		/**
		 * Flatten an array
		 */

		exports.flatten = (...args) => {
		  const result = [];
		  const flat = arr => {
		    for (let i = 0; i < arr.length; i++) {
		      let ele = arr[i];
		      Array.isArray(ele) ? flat(ele) : ele !== void 0 && result.push(ele);
		    }
		    return result;
		  };
		  flat(args);
		  return result;
		};
} (utils$2));
	return utils$2;
}

var stringify;
var hasRequiredStringify$1;

function requireStringify$1 () {
	if (hasRequiredStringify$1) return stringify;
	hasRequiredStringify$1 = 1;

	const utils = requireUtils$3();

	stringify = (ast, options = {}) => {
	  let stringify = (node, parent = {}) => {
	    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
	    let invalidNode = node.invalid === true && options.escapeInvalid === true;
	    let output = '';

	    if (node.value) {
	      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
	        return '\\' + node.value;
	      }
	      return node.value;
	    }

	    if (node.value) {
	      return node.value;
	    }

	    if (node.nodes) {
	      for (let child of node.nodes) {
	        output += stringify(child);
	      }
	    }
	    return output;
	  };

	  return stringify(ast);
	};
	return stringify;
}

/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */

var isNumber;
var hasRequiredIsNumber;

function requireIsNumber () {
	if (hasRequiredIsNumber) return isNumber;
	hasRequiredIsNumber = 1;

	isNumber = function(num) {
	  if (typeof num === 'number') {
	    return num - num === 0;
	  }
	  if (typeof num === 'string' && num.trim() !== '') {
	    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
	  }
	  return false;
	};
	return isNumber;
}

/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */

var toRegexRange_1;
var hasRequiredToRegexRange;

function requireToRegexRange () {
	if (hasRequiredToRegexRange) return toRegexRange_1;
	hasRequiredToRegexRange = 1;

	const isNumber = requireIsNumber();

	const toRegexRange = (min, max, options) => {
	  if (isNumber(min) === false) {
	    throw new TypeError('toRegexRange: expected the first argument to be a number');
	  }

	  if (max === void 0 || min === max) {
	    return String(min);
	  }

	  if (isNumber(max) === false) {
	    throw new TypeError('toRegexRange: expected the second argument to be a number.');
	  }

	  let opts = { relaxZeros: true, ...options };
	  if (typeof opts.strictZeros === 'boolean') {
	    opts.relaxZeros = opts.strictZeros === false;
	  }

	  let relax = String(opts.relaxZeros);
	  let shorthand = String(opts.shorthand);
	  let capture = String(opts.capture);
	  let wrap = String(opts.wrap);
	  let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;

	  if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
	    return toRegexRange.cache[cacheKey].result;
	  }

	  let a = Math.min(min, max);
	  let b = Math.max(min, max);

	  if (Math.abs(a - b) === 1) {
	    let result = min + '|' + max;
	    if (opts.capture) {
	      return `(${result})`;
	    }
	    if (opts.wrap === false) {
	      return result;
	    }
	    return `(?:${result})`;
	  }

	  let isPadded = hasPadding(min) || hasPadding(max);
	  let state = { min, max, a, b };
	  let positives = [];
	  let negatives = [];

	  if (isPadded) {
	    state.isPadded = isPadded;
	    state.maxLen = String(state.max).length;
	  }

	  if (a < 0) {
	    let newMin = b < 0 ? Math.abs(b) : 1;
	    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
	    a = state.a = 0;
	  }

	  if (b >= 0) {
	    positives = splitToPatterns(a, b, state, opts);
	  }

	  state.negatives = negatives;
	  state.positives = positives;
	  state.result = collatePatterns(negatives, positives);

	  if (opts.capture === true) {
	    state.result = `(${state.result})`;
	  } else if (opts.wrap !== false && (positives.length + negatives.length) > 1) {
	    state.result = `(?:${state.result})`;
	  }

	  toRegexRange.cache[cacheKey] = state;
	  return state.result;
	};

	function collatePatterns(neg, pos, options) {
	  let onlyNegative = filterPatterns(neg, pos, '-', false) || [];
	  let onlyPositive = filterPatterns(pos, neg, '', false) || [];
	  let intersected = filterPatterns(neg, pos, '-?', true) || [];
	  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
	  return subpatterns.join('|');
	}

	function splitToRanges(min, max) {
	  let nines = 1;
	  let zeros = 1;

	  let stop = countNines(min, nines);
	  let stops = new Set([max]);

	  while (min <= stop && stop <= max) {
	    stops.add(stop);
	    nines += 1;
	    stop = countNines(min, nines);
	  }

	  stop = countZeros(max + 1, zeros) - 1;

	  while (min < stop && stop <= max) {
	    stops.add(stop);
	    zeros += 1;
	    stop = countZeros(max + 1, zeros) - 1;
	  }

	  stops = [...stops];
	  stops.sort(compare);
	  return stops;
	}

	/**
	 * Convert a range to a regex pattern
	 * @param {Number} `start`
	 * @param {Number} `stop`
	 * @return {String}
	 */

	function rangeToPattern(start, stop, options) {
	  if (start === stop) {
	    return { pattern: start, count: [], digits: 0 };
	  }

	  let zipped = zip(start, stop);
	  let digits = zipped.length;
	  let pattern = '';
	  let count = 0;

	  for (let i = 0; i < digits; i++) {
	    let [startDigit, stopDigit] = zipped[i];

	    if (startDigit === stopDigit) {
	      pattern += startDigit;

	    } else if (startDigit !== '0' || stopDigit !== '9') {
	      pattern += toCharacterClass(startDigit, stopDigit);

	    } else {
	      count++;
	    }
	  }

	  if (count) {
	    pattern += options.shorthand === true ? '\\d' : '[0-9]';
	  }

	  return { pattern, count: [count], digits };
	}

	function splitToPatterns(min, max, tok, options) {
	  let ranges = splitToRanges(min, max);
	  let tokens = [];
	  let start = min;
	  let prev;

	  for (let i = 0; i < ranges.length; i++) {
	    let max = ranges[i];
	    let obj = rangeToPattern(String(start), String(max), options);
	    let zeros = '';

	    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
	      if (prev.count.length > 1) {
	        prev.count.pop();
	      }

	      prev.count.push(obj.count[0]);
	      prev.string = prev.pattern + toQuantifier(prev.count);
	      start = max + 1;
	      continue;
	    }

	    if (tok.isPadded) {
	      zeros = padZeros(max, tok, options);
	    }

	    obj.string = zeros + obj.pattern + toQuantifier(obj.count);
	    tokens.push(obj);
	    start = max + 1;
	    prev = obj;
	  }

	  return tokens;
	}

	function filterPatterns(arr, comparison, prefix, intersection, options) {
	  let result = [];

	  for (let ele of arr) {
	    let { string } = ele;

	    // only push if _both_ are negative...
	    if (!intersection && !contains(comparison, 'string', string)) {
	      result.push(prefix + string);
	    }

	    // or _both_ are positive
	    if (intersection && contains(comparison, 'string', string)) {
	      result.push(prefix + string);
	    }
	  }
	  return result;
	}

	/**
	 * Zip strings
	 */

	function zip(a, b) {
	  let arr = [];
	  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);
	  return arr;
	}

	function compare(a, b) {
	  return a > b ? 1 : b > a ? -1 : 0;
	}

	function contains(arr, key, val) {
	  return arr.some(ele => ele[key] === val);
	}

	function countNines(min, len) {
	  return Number(String(min).slice(0, -len) + '9'.repeat(len));
	}

	function countZeros(integer, zeros) {
	  return integer - (integer % Math.pow(10, zeros));
	}

	function toQuantifier(digits) {
	  let [start = 0, stop = ''] = digits;
	  if (stop || start > 1) {
	    return `{${start + (stop ? ',' + stop : '')}}`;
	  }
	  return '';
	}

	function toCharacterClass(a, b, options) {
	  return `[${a}${(b - a === 1) ? '' : '-'}${b}]`;
	}

	function hasPadding(str) {
	  return /^-?(0+)\d/.test(str);
	}

	function padZeros(value, tok, options) {
	  if (!tok.isPadded) {
	    return value;
	  }

	  let diff = Math.abs(tok.maxLen - String(value).length);
	  let relax = options.relaxZeros !== false;

	  switch (diff) {
	    case 0:
	      return '';
	    case 1:
	      return relax ? '0?' : '0';
	    case 2:
	      return relax ? '0{0,2}' : '00';
	    default: {
	      return relax ? `0{0,${diff}}` : `0{${diff}}`;
	    }
	  }
	}

	/**
	 * Cache
	 */

	toRegexRange.cache = {};
	toRegexRange.clearCache = () => (toRegexRange.cache = {});

	/**
	 * Expose `toRegexRange`
	 */

	toRegexRange_1 = toRegexRange;
	return toRegexRange_1;
}

/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */

var fillRange;
var hasRequiredFillRange;

function requireFillRange () {
	if (hasRequiredFillRange) return fillRange;
	hasRequiredFillRange = 1;

	const util = require$$3;
	const toRegexRange = requireToRegexRange();

	const isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);

	const transform = toNumber => {
	  return value => toNumber === true ? Number(value) : String(value);
	};

	const isValidValue = value => {
	  return typeof value === 'number' || (typeof value === 'string' && value !== '');
	};

	const isNumber = num => Number.isInteger(+num);

	const zeros = input => {
	  let value = `${input}`;
	  let index = -1;
	  if (value[0] === '-') value = value.slice(1);
	  if (value === '0') return false;
	  while (value[++index] === '0');
	  return index > 0;
	};

	const stringify = (start, end, options) => {
	  if (typeof start === 'string' || typeof end === 'string') {
	    return true;
	  }
	  return options.stringify === true;
	};

	const pad = (input, maxLength, toNumber) => {
	  if (maxLength > 0) {
	    let dash = input[0] === '-' ? '-' : '';
	    if (dash) input = input.slice(1);
	    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));
	  }
	  if (toNumber === false) {
	    return String(input);
	  }
	  return input;
	};

	const toMaxLen = (input, maxLength) => {
	  let negative = input[0] === '-' ? '-' : '';
	  if (negative) {
	    input = input.slice(1);
	    maxLength--;
	  }
	  while (input.length < maxLength) input = '0' + input;
	  return negative ? ('-' + input) : input;
	};

	const toSequence = (parts, options) => {
	  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
	  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);

	  let prefix = options.capture ? '' : '?:';
	  let positives = '';
	  let negatives = '';
	  let result;

	  if (parts.positives.length) {
	    positives = parts.positives.join('|');
	  }

	  if (parts.negatives.length) {
	    negatives = `-(${prefix}${parts.negatives.join('|')})`;
	  }

	  if (positives && negatives) {
	    result = `${positives}|${negatives}`;
	  } else {
	    result = positives || negatives;
	  }

	  if (options.wrap) {
	    return `(${prefix}${result})`;
	  }

	  return result;
	};

	const toRange = (a, b, isNumbers, options) => {
	  if (isNumbers) {
	    return toRegexRange(a, b, { wrap: false, ...options });
	  }

	  let start = String.fromCharCode(a);
	  if (a === b) return start;

	  let stop = String.fromCharCode(b);
	  return `[${start}-${stop}]`;
	};

	const toRegex = (start, end, options) => {
	  if (Array.isArray(start)) {
	    let wrap = options.wrap === true;
	    let prefix = options.capture ? '' : '?:';
	    return wrap ? `(${prefix}${start.join('|')})` : start.join('|');
	  }
	  return toRegexRange(start, end, options);
	};

	const rangeError = (...args) => {
	  return new RangeError('Invalid range arguments: ' + util.inspect(...args));
	};

	const invalidRange = (start, end, options) => {
	  if (options.strictRanges === true) throw rangeError([start, end]);
	  return [];
	};

	const invalidStep = (step, options) => {
	  if (options.strictRanges === true) {
	    throw new TypeError(`Expected step "${step}" to be a number`);
	  }
	  return [];
	};

	const fillNumbers = (start, end, step = 1, options = {}) => {
	  let a = Number(start);
	  let b = Number(end);

	  if (!Number.isInteger(a) || !Number.isInteger(b)) {
	    if (options.strictRanges === true) throw rangeError([start, end]);
	    return [];
	  }

	  // fix negative zero
	  if (a === 0) a = 0;
	  if (b === 0) b = 0;

	  let descending = a > b;
	  let startString = String(start);
	  let endString = String(end);
	  let stepString = String(step);
	  step = Math.max(Math.abs(step), 1);

	  let padded = zeros(startString) || zeros(endString) || zeros(stepString);
	  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
	  let toNumber = padded === false && stringify(start, end, options) === false;
	  let format = options.transform || transform(toNumber);

	  if (options.toRegex && step === 1) {
	    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
	  }

	  let parts = { negatives: [], positives: [] };
	  let push = num => parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num));
	  let range = [];
	  let index = 0;

	  while (descending ? a >= b : a <= b) {
	    if (options.toRegex === true && step > 1) {
	      push(a);
	    } else {
	      range.push(pad(format(a, index), maxLen, toNumber));
	    }
	    a = descending ? a - step : a + step;
	    index++;
	  }

	  if (options.toRegex === true) {
	    return step > 1
	      ? toSequence(parts, options)
	      : toRegex(range, null, { wrap: false, ...options });
	  }

	  return range;
	};

	const fillLetters = (start, end, step = 1, options = {}) => {
	  if ((!isNumber(start) && start.length > 1) || (!isNumber(end) && end.length > 1)) {
	    return invalidRange(start, end, options);
	  }


	  let format = options.transform || (val => String.fromCharCode(val));
	  let a = `${start}`.charCodeAt(0);
	  let b = `${end}`.charCodeAt(0);

	  let descending = a > b;
	  let min = Math.min(a, b);
	  let max = Math.max(a, b);

	  if (options.toRegex && step === 1) {
	    return toRange(min, max, false, options);
	  }

	  let range = [];
	  let index = 0;

	  while (descending ? a >= b : a <= b) {
	    range.push(format(a, index));
	    a = descending ? a - step : a + step;
	    index++;
	  }

	  if (options.toRegex === true) {
	    return toRegex(range, null, { wrap: false, options });
	  }

	  return range;
	};

	const fill = (start, end, step, options = {}) => {
	  if (end == null && isValidValue(start)) {
	    return [start];
	  }

	  if (!isValidValue(start) || !isValidValue(end)) {
	    return invalidRange(start, end, options);
	  }

	  if (typeof step === 'function') {
	    return fill(start, end, 1, { transform: step });
	  }

	  if (isObject(step)) {
	    return fill(start, end, 0, step);
	  }

	  let opts = { ...options };
	  if (opts.capture === true) opts.wrap = true;
	  step = step || opts.step || 1;

	  if (!isNumber(step)) {
	    if (step != null && !isObject(step)) return invalidStep(step, opts);
	    return fill(start, end, 1, step);
	  }

	  if (isNumber(start) && isNumber(end)) {
	    return fillNumbers(start, end, step, opts);
	  }

	  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
	};

	fillRange = fill;
	return fillRange;
}

var compile_1;
var hasRequiredCompile;

function requireCompile () {
	if (hasRequiredCompile) return compile_1;
	hasRequiredCompile = 1;

	const fill = requireFillRange();
	const utils = requireUtils$3();

	const compile = (ast, options = {}) => {
	  let walk = (node, parent = {}) => {
	    let invalidBlock = utils.isInvalidBrace(parent);
	    let invalidNode = node.invalid === true && options.escapeInvalid === true;
	    let invalid = invalidBlock === true || invalidNode === true;
	    let prefix = options.escapeInvalid === true ? '\\' : '';
	    let output = '';

	    if (node.isOpen === true) {
	      return prefix + node.value;
	    }
	    if (node.isClose === true) {
	      return prefix + node.value;
	    }

	    if (node.type === 'open') {
	      return invalid ? (prefix + node.value) : '(';
	    }

	    if (node.type === 'close') {
	      return invalid ? (prefix + node.value) : ')';
	    }

	    if (node.type === 'comma') {
	      return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');
	    }

	    if (node.value) {
	      return node.value;
	    }

	    if (node.nodes && node.ranges > 0) {
	      let args = utils.reduce(node.nodes);
	      let range = fill(...args, { ...options, wrap: false, toRegex: true });

	      if (range.length !== 0) {
	        return args.length > 1 && range.length > 1 ? `(${range})` : range;
	      }
	    }

	    if (node.nodes) {
	      for (let child of node.nodes) {
	        output += walk(child, node);
	      }
	    }
	    return output;
	  };

	  return walk(ast);
	};

	compile_1 = compile;
	return compile_1;
}

var expand_1;
var hasRequiredExpand;

function requireExpand () {
	if (hasRequiredExpand) return expand_1;
	hasRequiredExpand = 1;

	const fill = requireFillRange();
	const stringify = requireStringify$1();
	const utils = requireUtils$3();

	const append = (queue = '', stash = '', enclose = false) => {
	  let result = [];

	  queue = [].concat(queue);
	  stash = [].concat(stash);

	  if (!stash.length) return queue;
	  if (!queue.length) {
	    return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;
	  }

	  for (let item of queue) {
	    if (Array.isArray(item)) {
	      for (let value of item) {
	        result.push(append(value, stash, enclose));
	      }
	    } else {
	      for (let ele of stash) {
	        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;
	        result.push(Array.isArray(ele) ? append(item, ele, enclose) : (item + ele));
	      }
	    }
	  }
	  return utils.flatten(result);
	};

	const expand = (ast, options = {}) => {
	  let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit;

	  let walk = (node, parent = {}) => {
	    node.queue = [];

	    let p = parent;
	    let q = parent.queue;

	    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {
	      p = p.parent;
	      q = p.queue;
	    }

	    if (node.invalid || node.dollar) {
	      q.push(append(q.pop(), stringify(node, options)));
	      return;
	    }

	    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {
	      q.push(append(q.pop(), ['{}']));
	      return;
	    }

	    if (node.nodes && node.ranges > 0) {
	      let args = utils.reduce(node.nodes);

	      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
	        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');
	      }

	      let range = fill(...args, options);
	      if (range.length === 0) {
	        range = stringify(node, options);
	      }

	      q.push(append(q.pop(), range));
	      node.nodes = [];
	      return;
	    }

	    let enclose = utils.encloseBrace(node);
	    let queue = node.queue;
	    let block = node;

	    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {
	      block = block.parent;
	      queue = block.queue;
	    }

	    for (let i = 0; i < node.nodes.length; i++) {
	      let child = node.nodes[i];

	      if (child.type === 'comma' && node.type === 'brace') {
	        if (i === 1) queue.push('');
	        queue.push('');
	        continue;
	      }

	      if (child.type === 'close') {
	        q.push(append(q.pop(), queue, enclose));
	        continue;
	      }

	      if (child.value && child.type !== 'open') {
	        queue.push(append(queue.pop(), child.value));
	        continue;
	      }

	      if (child.nodes) {
	        walk(child, node);
	      }
	    }

	    return queue;
	  };

	  return utils.flatten(walk(ast));
	};

	expand_1 = expand;
	return expand_1;
}

var constants$2;
var hasRequiredConstants$2;

function requireConstants$2 () {
	if (hasRequiredConstants$2) return constants$2;
	hasRequiredConstants$2 = 1;

	constants$2 = {
	  MAX_LENGTH: 1024 * 64,

	  // Digits
	  CHAR_0: '0', /* 0 */
	  CHAR_9: '9', /* 9 */

	  // Alphabet chars.
	  CHAR_UPPERCASE_A: 'A', /* A */
	  CHAR_LOWERCASE_A: 'a', /* a */
	  CHAR_UPPERCASE_Z: 'Z', /* Z */
	  CHAR_LOWERCASE_Z: 'z', /* z */

	  CHAR_LEFT_PARENTHESES: '(', /* ( */
	  CHAR_RIGHT_PARENTHESES: ')', /* ) */

	  CHAR_ASTERISK: '*', /* * */

	  // Non-alphabetic chars.
	  CHAR_AMPERSAND: '&', /* & */
	  CHAR_AT: '@', /* @ */
	  CHAR_BACKSLASH: '\\', /* \ */
	  CHAR_BACKTICK: '`', /* ` */
	  CHAR_CARRIAGE_RETURN: '\r', /* \r */
	  CHAR_CIRCUMFLEX_ACCENT: '^', /* ^ */
	  CHAR_COLON: ':', /* : */
	  CHAR_COMMA: ',', /* , */
	  CHAR_DOLLAR: '$', /* . */
	  CHAR_DOT: '.', /* . */
	  CHAR_DOUBLE_QUOTE: '"', /* " */
	  CHAR_EQUAL: '=', /* = */
	  CHAR_EXCLAMATION_MARK: '!', /* ! */
	  CHAR_FORM_FEED: '\f', /* \f */
	  CHAR_FORWARD_SLASH: '/', /* / */
	  CHAR_HASH: '#', /* # */
	  CHAR_HYPHEN_MINUS: '-', /* - */
	  CHAR_LEFT_ANGLE_BRACKET: '<', /* < */
	  CHAR_LEFT_CURLY_BRACE: '{', /* { */
	  CHAR_LEFT_SQUARE_BRACKET: '[', /* [ */
	  CHAR_LINE_FEED: '\n', /* \n */
	  CHAR_NO_BREAK_SPACE: '\u00A0', /* \u00A0 */
	  CHAR_PERCENT: '%', /* % */
	  CHAR_PLUS: '+', /* + */
	  CHAR_QUESTION_MARK: '?', /* ? */
	  CHAR_RIGHT_ANGLE_BRACKET: '>', /* > */
	  CHAR_RIGHT_CURLY_BRACE: '}', /* } */
	  CHAR_RIGHT_SQUARE_BRACKET: ']', /* ] */
	  CHAR_SEMICOLON: ';', /* ; */
	  CHAR_SINGLE_QUOTE: '\'', /* ' */
	  CHAR_SPACE: ' ', /*   */
	  CHAR_TAB: '\t', /* \t */
	  CHAR_UNDERSCORE: '_', /* _ */
	  CHAR_VERTICAL_LINE: '|', /* | */
	  CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\uFEFF' /* \uFEFF */
	};
	return constants$2;
}

var parse_1$1;
var hasRequiredParse$3;

function requireParse$3 () {
	if (hasRequiredParse$3) return parse_1$1;
	hasRequiredParse$3 = 1;

	const stringify = requireStringify$1();

	/**
	 * Constants
	 */

	const {
	  MAX_LENGTH,
	  CHAR_BACKSLASH, /* \ */
	  CHAR_BACKTICK, /* ` */
	  CHAR_COMMA, /* , */
	  CHAR_DOT, /* . */
	  CHAR_LEFT_PARENTHESES, /* ( */
	  CHAR_RIGHT_PARENTHESES, /* ) */
	  CHAR_LEFT_CURLY_BRACE, /* { */
	  CHAR_RIGHT_CURLY_BRACE, /* } */
	  CHAR_LEFT_SQUARE_BRACKET, /* [ */
	  CHAR_RIGHT_SQUARE_BRACKET, /* ] */
	  CHAR_DOUBLE_QUOTE, /* " */
	  CHAR_SINGLE_QUOTE, /* ' */
	  CHAR_NO_BREAK_SPACE,
	  CHAR_ZERO_WIDTH_NOBREAK_SPACE
	} = requireConstants$2();

	/**
	 * parse
	 */

	const parse = (input, options = {}) => {
	  if (typeof input !== 'string') {
	    throw new TypeError('Expected a string');
	  }

	  let opts = options || {};
	  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
	  if (input.length > max) {
	    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
	  }

	  let ast = { type: 'root', input, nodes: [] };
	  let stack = [ast];
	  let block = ast;
	  let prev = ast;
	  let brackets = 0;
	  let length = input.length;
	  let index = 0;
	  let depth = 0;
	  let value;

	  /**
	   * Helpers
	   */

	  const advance = () => input[index++];
	  const push = node => {
	    if (node.type === 'text' && prev.type === 'dot') {
	      prev.type = 'text';
	    }

	    if (prev && prev.type === 'text' && node.type === 'text') {
	      prev.value += node.value;
	      return;
	    }

	    block.nodes.push(node);
	    node.parent = block;
	    node.prev = prev;
	    prev = node;
	    return node;
	  };

	  push({ type: 'bos' });

	  while (index < length) {
	    block = stack[stack.length - 1];
	    value = advance();

	    /**
	     * Invalid chars
	     */

	    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
	      continue;
	    }

	    /**
	     * Escaped chars
	     */

	    if (value === CHAR_BACKSLASH) {
	      push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });
	      continue;
	    }

	    /**
	     * Right square bracket (literal): ']'
	     */

	    if (value === CHAR_RIGHT_SQUARE_BRACKET) {
	      push({ type: 'text', value: '\\' + value });
	      continue;
	    }

	    /**
	     * Left square bracket: '['
	     */

	    if (value === CHAR_LEFT_SQUARE_BRACKET) {
	      brackets++;
	      let next;

	      while (index < length && (next = advance())) {
	        value += next;

	        if (next === CHAR_LEFT_SQUARE_BRACKET) {
	          brackets++;
	          continue;
	        }

	        if (next === CHAR_BACKSLASH) {
	          value += advance();
	          continue;
	        }

	        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
	          brackets--;

	          if (brackets === 0) {
	            break;
	          }
	        }
	      }

	      push({ type: 'text', value });
	      continue;
	    }

	    /**
	     * Parentheses
	     */

	    if (value === CHAR_LEFT_PARENTHESES) {
	      block = push({ type: 'paren', nodes: [] });
	      stack.push(block);
	      push({ type: 'text', value });
	      continue;
	    }

	    if (value === CHAR_RIGHT_PARENTHESES) {
	      if (block.type !== 'paren') {
	        push({ type: 'text', value });
	        continue;
	      }
	      block = stack.pop();
	      push({ type: 'text', value });
	      block = stack[stack.length - 1];
	      continue;
	    }

	    /**
	     * Quotes: '|"|`
	     */

	    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
	      let open = value;
	      let next;

	      if (options.keepQuotes !== true) {
	        value = '';
	      }

	      while (index < length && (next = advance())) {
	        if (next === CHAR_BACKSLASH) {
	          value += next + advance();
	          continue;
	        }

	        if (next === open) {
	          if (options.keepQuotes === true) value += next;
	          break;
	        }

	        value += next;
	      }

	      push({ type: 'text', value });
	      continue;
	    }

	    /**
	     * Left curly brace: '{'
	     */

	    if (value === CHAR_LEFT_CURLY_BRACE) {
	      depth++;

	      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;
	      let brace = {
	        type: 'brace',
	        open: true,
	        close: false,
	        dollar,
	        depth,
	        commas: 0,
	        ranges: 0,
	        nodes: []
	      };

	      block = push(brace);
	      stack.push(block);
	      push({ type: 'open', value });
	      continue;
	    }

	    /**
	     * Right curly brace: '}'
	     */

	    if (value === CHAR_RIGHT_CURLY_BRACE) {
	      if (block.type !== 'brace') {
	        push({ type: 'text', value });
	        continue;
	      }

	      let type = 'close';
	      block = stack.pop();
	      block.close = true;

	      push({ type, value });
	      depth--;

	      block = stack[stack.length - 1];
	      continue;
	    }

	    /**
	     * Comma: ','
	     */

	    if (value === CHAR_COMMA && depth > 0) {
	      if (block.ranges > 0) {
	        block.ranges = 0;
	        let open = block.nodes.shift();
	        block.nodes = [open, { type: 'text', value: stringify(block) }];
	      }

	      push({ type: 'comma', value });
	      block.commas++;
	      continue;
	    }

	    /**
	     * Dot: '.'
	     */

	    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
	      let siblings = block.nodes;

	      if (depth === 0 || siblings.length === 0) {
	        push({ type: 'text', value });
	        continue;
	      }

	      if (prev.type === 'dot') {
	        block.range = [];
	        prev.value += value;
	        prev.type = 'range';

	        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
	          block.invalid = true;
	          block.ranges = 0;
	          prev.type = 'text';
	          continue;
	        }

	        block.ranges++;
	        block.args = [];
	        continue;
	      }

	      if (prev.type === 'range') {
	        siblings.pop();

	        let before = siblings[siblings.length - 1];
	        before.value += prev.value + value;
	        prev = before;
	        block.ranges--;
	        continue;
	      }

	      push({ type: 'dot', value });
	      continue;
	    }

	    /**
	     * Text
	     */

	    push({ type: 'text', value });
	  }

	  // Mark imbalanced braces and brackets as invalid
	  do {
	    block = stack.pop();

	    if (block.type !== 'root') {
	      block.nodes.forEach(node => {
	        if (!node.nodes) {
	          if (node.type === 'open') node.isOpen = true;
	          if (node.type === 'close') node.isClose = true;
	          if (!node.nodes) node.type = 'text';
	          node.invalid = true;
	        }
	      });

	      // get the location of the block on parent.nodes (block's siblings)
	      let parent = stack[stack.length - 1];
	      let index = parent.nodes.indexOf(block);
	      // replace the (invalid) block with it's nodes
	      parent.nodes.splice(index, 1, ...block.nodes);
	    }
	  } while (stack.length > 0);

	  push({ type: 'eos' });
	  return ast;
	};

	parse_1$1 = parse;
	return parse_1$1;
}

var braces_1;
var hasRequiredBraces;

function requireBraces () {
	if (hasRequiredBraces) return braces_1;
	hasRequiredBraces = 1;

	const stringify = requireStringify$1();
	const compile = requireCompile();
	const expand = requireExpand();
	const parse = requireParse$3();

	/**
	 * Expand the given pattern or create a regex-compatible string.
	 *
	 * ```js
	 * const braces = require('braces');
	 * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']
	 * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']
	 * ```
	 * @param {String} `str`
	 * @param {Object} `options`
	 * @return {String}
	 * @api public
	 */

	const braces = (input, options = {}) => {
	  let output = [];

	  if (Array.isArray(input)) {
	    for (let pattern of input) {
	      let result = braces.create(pattern, options);
	      if (Array.isArray(result)) {
	        output.push(...result);
	      } else {
	        output.push(result);
	      }
	    }
	  } else {
	    output = [].concat(braces.create(input, options));
	  }

	  if (options && options.expand === true && options.nodupes === true) {
	    output = [...new Set(output)];
	  }
	  return output;
	};

	/**
	 * Parse the given `str` with the given `options`.
	 *
	 * ```js
	 * // braces.parse(pattern, [, options]);
	 * const ast = braces.parse('a/{b,c}/d');
	 * console.log(ast);
	 * ```
	 * @param {String} pattern Brace pattern to parse
	 * @param {Object} options
	 * @return {Object} Returns an AST
	 * @api public
	 */

	braces.parse = (input, options = {}) => parse(input, options);

	/**
	 * Creates a braces string from an AST, or an AST node.
	 *
	 * ```js
	 * const braces = require('braces');
	 * let ast = braces.parse('foo/{a,b}/bar');
	 * console.log(stringify(ast.nodes[2])); //=> '{a,b}'
	 * ```
	 * @param {String} `input` Brace pattern or AST.
	 * @param {Object} `options`
	 * @return {Array} Returns an array of expanded values.
	 * @api public
	 */

	braces.stringify = (input, options = {}) => {
	  if (typeof input === 'string') {
	    return stringify(braces.parse(input, options), options);
	  }
	  return stringify(input, options);
	};

	/**
	 * Compiles a brace pattern into a regex-compatible, optimized string.
	 * This method is called by the main [braces](#braces) function by default.
	 *
	 * ```js
	 * const braces = require('braces');
	 * console.log(braces.compile('a/{b,c}/d'));
	 * //=> ['a/(b|c)/d']
	 * ```
	 * @param {String} `input` Brace pattern or AST.
	 * @param {Object} `options`
	 * @return {Array} Returns an array of expanded values.
	 * @api public
	 */

	braces.compile = (input, options = {}) => {
	  if (typeof input === 'string') {
	    input = braces.parse(input, options);
	  }
	  return compile(input, options);
	};

	/**
	 * Expands a brace pattern into an array. This method is called by the
	 * main [braces](#braces) function when `options.expand` is true. Before
	 * using this method it's recommended that you read the [performance notes](#performance))
	 * and advantages of using [.compile](#compile) instead.
	 *
	 * ```js
	 * const braces = require('braces');
	 * console.log(braces.expand('a/{b,c}/d'));
	 * //=> ['a/b/d', 'a/c/d'];
	 * ```
	 * @param {String} `pattern` Brace pattern
	 * @param {Object} `options`
	 * @return {Array} Returns an array of expanded values.
	 * @api public
	 */

	braces.expand = (input, options = {}) => {
	  if (typeof input === 'string') {
	    input = braces.parse(input, options);
	  }

	  let result = expand(input, options);

	  // filter out empty strings if specified
	  if (options.noempty === true) {
	    result = result.filter(Boolean);
	  }

	  // filter out duplicates if specified
	  if (options.nodupes === true) {
	    result = [...new Set(result)];
	  }

	  return result;
	};

	/**
	 * Processes a brace pattern and returns either an expanded array
	 * (if `options.expand` is true), a highly optimized regex-compatible string.
	 * This method is called by the main [braces](#braces) function.
	 *
	 * ```js
	 * const braces = require('braces');
	 * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
	 * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
	 * ```
	 * @param {String} `pattern` Brace pattern
	 * @param {Object} `options`
	 * @return {Array} Returns an array of expanded values.
	 * @api public
	 */

	braces.create = (input, options = {}) => {
	  if (input === '' || input.length < 3) {
	    return [input];
	  }

	 return options.expand !== true
	    ? braces.compile(input, options)
	    : braces.expand(input, options);
	};

	/**
	 * Expose "braces"
	 */

	braces_1 = braces;
	return braces_1;
}

var picomatchExports = {};
var picomatch = {
  get exports(){ return picomatchExports; },
  set exports(v){ picomatchExports = v; },
};

var utils$1 = {};

var constants$1;
var hasRequiredConstants$1;

function requireConstants$1 () {
	if (hasRequiredConstants$1) return constants$1;
	hasRequiredConstants$1 = 1;

	const path = require$$3;
	const WIN_SLASH = '\\\\/';
	const WIN_NO_SLASH = `[^${WIN_SLASH}]`;

	/**
	 * Posix glob regex
	 */

	const DOT_LITERAL = '\\.';
	const PLUS_LITERAL = '\\+';
	const QMARK_LITERAL = '\\?';
	const SLASH_LITERAL = '\\/';
	const ONE_CHAR = '(?=.)';
	const QMARK = '[^/]';
	const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
	const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
	const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
	const NO_DOT = `(?!${DOT_LITERAL})`;
	const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
	const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
	const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
	const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
	const STAR = `${QMARK}*?`;

	const POSIX_CHARS = {
	  DOT_LITERAL,
	  PLUS_LITERAL,
	  QMARK_LITERAL,
	  SLASH_LITERAL,
	  ONE_CHAR,
	  QMARK,
	  END_ANCHOR,
	  DOTS_SLASH,
	  NO_DOT,
	  NO_DOTS,
	  NO_DOT_SLASH,
	  NO_DOTS_SLASH,
	  QMARK_NO_DOT,
	  STAR,
	  START_ANCHOR
	};

	/**
	 * Windows glob regex
	 */

	const WINDOWS_CHARS = {
	  ...POSIX_CHARS,

	  SLASH_LITERAL: `[${WIN_SLASH}]`,
	  QMARK: WIN_NO_SLASH,
	  STAR: `${WIN_NO_SLASH}*?`,
	  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
	  NO_DOT: `(?!${DOT_LITERAL})`,
	  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
	  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
	  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
	  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
	  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
	  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
	};

	/**
	 * POSIX Bracket Regex
	 */

	const POSIX_REGEX_SOURCE = {
	  alnum: 'a-zA-Z0-9',
	  alpha: 'a-zA-Z',
	  ascii: '\\x00-\\x7F',
	  blank: ' \\t',
	  cntrl: '\\x00-\\x1F\\x7F',
	  digit: '0-9',
	  graph: '\\x21-\\x7E',
	  lower: 'a-z',
	  print: '\\x20-\\x7E ',
	  punct: '\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
	  space: ' \\t\\r\\n\\v\\f',
	  upper: 'A-Z',
	  word: 'A-Za-z0-9_',
	  xdigit: 'A-Fa-f0-9'
	};

	constants$1 = {
	  MAX_LENGTH: 1024 * 64,
	  POSIX_REGEX_SOURCE,

	  // regular expressions
	  REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
	  REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
	  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
	  REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
	  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
	  REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,

	  // Replace globs with equivalent patterns to reduce parsing time.
	  REPLACEMENTS: {
	    '***': '*',
	    '**/**': '**',
	    '**/**/**': '**'
	  },

	  // Digits
	  CHAR_0: 48, /* 0 */
	  CHAR_9: 57, /* 9 */

	  // Alphabet chars.
	  CHAR_UPPERCASE_A: 65, /* A */
	  CHAR_LOWERCASE_A: 97, /* a */
	  CHAR_UPPERCASE_Z: 90, /* Z */
	  CHAR_LOWERCASE_Z: 122, /* z */

	  CHAR_LEFT_PARENTHESES: 40, /* ( */
	  CHAR_RIGHT_PARENTHESES: 41, /* ) */

	  CHAR_ASTERISK: 42, /* * */

	  // Non-alphabetic chars.
	  CHAR_AMPERSAND: 38, /* & */
	  CHAR_AT: 64, /* @ */
	  CHAR_BACKWARD_SLASH: 92, /* \ */
	  CHAR_CARRIAGE_RETURN: 13, /* \r */
	  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */
	  CHAR_COLON: 58, /* : */
	  CHAR_COMMA: 44, /* , */
	  CHAR_DOT: 46, /* . */
	  CHAR_DOUBLE_QUOTE: 34, /* " */
	  CHAR_EQUAL: 61, /* = */
	  CHAR_EXCLAMATION_MARK: 33, /* ! */
	  CHAR_FORM_FEED: 12, /* \f */
	  CHAR_FORWARD_SLASH: 47, /* / */
	  CHAR_GRAVE_ACCENT: 96, /* ` */
	  CHAR_HASH: 35, /* # */
	  CHAR_HYPHEN_MINUS: 45, /* - */
	  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */
	  CHAR_LEFT_CURLY_BRACE: 123, /* { */
	  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */
	  CHAR_LINE_FEED: 10, /* \n */
	  CHAR_NO_BREAK_SPACE: 160, /* \u00A0 */
	  CHAR_PERCENT: 37, /* % */
	  CHAR_PLUS: 43, /* + */
	  CHAR_QUESTION_MARK: 63, /* ? */
	  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */
	  CHAR_RIGHT_CURLY_BRACE: 125, /* } */
	  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */
	  CHAR_SEMICOLON: 59, /* ; */
	  CHAR_SINGLE_QUOTE: 39, /* ' */
	  CHAR_SPACE: 32, /*   */
	  CHAR_TAB: 9, /* \t */
	  CHAR_UNDERSCORE: 95, /* _ */
	  CHAR_VERTICAL_LINE: 124, /* | */
	  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \uFEFF */

	  SEP: path.sep,

	  /**
	   * Create EXTGLOB_CHARS
	   */

	  extglobChars(chars) {
	    return {
	      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },
	      '?': { type: 'qmark', open: '(?:', close: ')?' },
	      '+': { type: 'plus', open: '(?:', close: ')+' },
	      '*': { type: 'star', open: '(?:', close: ')*' },
	      '@': { type: 'at', open: '(?:', close: ')' }
	    };
	  },

	  /**
	   * Create GLOB_CHARS
	   */

	  globChars(win32) {
	    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
	  }
	};
	return constants$1;
}

var hasRequiredUtils$2;

function requireUtils$2 () {
	if (hasRequiredUtils$2) return utils$1;
	hasRequiredUtils$2 = 1;
	(function (exports) {

		const path = require$$3;
		const win32 = process.platform === 'win32';
		const {
		  REGEX_BACKSLASH,
		  REGEX_REMOVE_BACKSLASH,
		  REGEX_SPECIAL_CHARS,
		  REGEX_SPECIAL_CHARS_GLOBAL
		} = requireConstants$1();

		exports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);
		exports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);
		exports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);
		exports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\$1');
		exports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');

		exports.removeBackslashes = str => {
		  return str.replace(REGEX_REMOVE_BACKSLASH, match => {
		    return match === '\\' ? '' : match;
		  });
		};

		exports.supportsLookbehinds = () => {
		  const segs = process.version.slice(1).split('.').map(Number);
		  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {
		    return true;
		  }
		  return false;
		};

		exports.isWindows = options => {
		  if (options && typeof options.windows === 'boolean') {
		    return options.windows;
		  }
		  return win32 === true || path.sep === '\\';
		};

		exports.escapeLast = (input, char, lastIdx) => {
		  const idx = input.lastIndexOf(char, lastIdx);
		  if (idx === -1) return input;
		  if (input[idx - 1] === '\\') return exports.escapeLast(input, char, idx - 1);
		  return `${input.slice(0, idx)}\\${input.slice(idx)}`;
		};

		exports.removePrefix = (input, state = {}) => {
		  let output = input;
		  if (output.startsWith('./')) {
		    output = output.slice(2);
		    state.prefix = './';
		  }
		  return output;
		};

		exports.wrapOutput = (input, state = {}, options = {}) => {
		  const prepend = options.contains ? '' : '^';
		  const append = options.contains ? '' : '$';

		  let output = `${prepend}(?:${input})${append}`;
		  if (state.negated === true) {
		    output = `(?:^(?!${output}).*$)`;
		  }
		  return output;
		};
} (utils$1));
	return utils$1;
}

var scan_1;
var hasRequiredScan;

function requireScan () {
	if (hasRequiredScan) return scan_1;
	hasRequiredScan = 1;

	const utils = requireUtils$2();
	const {
	  CHAR_ASTERISK,             /* * */
	  CHAR_AT,                   /* @ */
	  CHAR_BACKWARD_SLASH,       /* \ */
	  CHAR_COMMA,                /* , */
	  CHAR_DOT,                  /* . */
	  CHAR_EXCLAMATION_MARK,     /* ! */
	  CHAR_FORWARD_SLASH,        /* / */
	  CHAR_LEFT_CURLY_BRACE,     /* { */
	  CHAR_LEFT_PARENTHESES,     /* ( */
	  CHAR_LEFT_SQUARE_BRACKET,  /* [ */
	  CHAR_PLUS,                 /* + */
	  CHAR_QUESTION_MARK,        /* ? */
	  CHAR_RIGHT_CURLY_BRACE,    /* } */
	  CHAR_RIGHT_PARENTHESES,    /* ) */
	  CHAR_RIGHT_SQUARE_BRACKET  /* ] */
	} = requireConstants$1();

	const isPathSeparator = code => {
	  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
	};

	const depth = token => {
	  if (token.isPrefix !== true) {
	    token.depth = token.isGlobstar ? Infinity : 1;
	  }
	};

	/**
	 * Quickly scans a glob pattern and returns an object with a handful of
	 * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),
	 * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not
	 * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).
	 *
	 * ```js
	 * const pm = require('picomatch');
	 * console.log(pm.scan('foo/bar/*.js'));
	 * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }
	 * ```
	 * @param {String} `str`
	 * @param {Object} `options`
	 * @return {Object} Returns an object with tokens and regex source string.
	 * @api public
	 */

	const scan = (input, options) => {
	  const opts = options || {};

	  const length = input.length - 1;
	  const scanToEnd = opts.parts === true || opts.scanToEnd === true;
	  const slashes = [];
	  const tokens = [];
	  const parts = [];

	  let str = input;
	  let index = -1;
	  let start = 0;
	  let lastIndex = 0;
	  let isBrace = false;
	  let isBracket = false;
	  let isGlob = false;
	  let isExtglob = false;
	  let isGlobstar = false;
	  let braceEscaped = false;
	  let backslashes = false;
	  let negated = false;
	  let negatedExtglob = false;
	  let finished = false;
	  let braces = 0;
	  let prev;
	  let code;
	  let token = { value: '', depth: 0, isGlob: false };

	  const eos = () => index >= length;
	  const peek = () => str.charCodeAt(index + 1);
	  const advance = () => {
	    prev = code;
	    return str.charCodeAt(++index);
	  };

	  while (index < length) {
	    code = advance();
	    let next;

	    if (code === CHAR_BACKWARD_SLASH) {
	      backslashes = token.backslashes = true;
	      code = advance();

	      if (code === CHAR_LEFT_CURLY_BRACE) {
	        braceEscaped = true;
	      }
	      continue;
	    }

	    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
	      braces++;

	      while (eos() !== true && (code = advance())) {
	        if (code === CHAR_BACKWARD_SLASH) {
	          backslashes = token.backslashes = true;
	          advance();
	          continue;
	        }

	        if (code === CHAR_LEFT_CURLY_BRACE) {
	          braces++;
	          continue;
	        }

	        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
	          isBrace = token.isBrace = true;
	          isGlob = token.isGlob = true;
	          finished = true;

	          if (scanToEnd === true) {
	            continue;
	          }

	          break;
	        }

	        if (braceEscaped !== true && code === CHAR_COMMA) {
	          isBrace = token.isBrace = true;
	          isGlob = token.isGlob = true;
	          finished = true;

	          if (scanToEnd === true) {
	            continue;
	          }

	          break;
	        }

	        if (code === CHAR_RIGHT_CURLY_BRACE) {
	          braces--;

	          if (braces === 0) {
	            braceEscaped = false;
	            isBrace = token.isBrace = true;
	            finished = true;
	            break;
	          }
	        }
	      }

	      if (scanToEnd === true) {
	        continue;
	      }

	      break;
	    }

	    if (code === CHAR_FORWARD_SLASH) {
	      slashes.push(index);
	      tokens.push(token);
	      token = { value: '', depth: 0, isGlob: false };

	      if (finished === true) continue;
	      if (prev === CHAR_DOT && index === (start + 1)) {
	        start += 2;
	        continue;
	      }

	      lastIndex = index + 1;
	      continue;
	    }

	    if (opts.noext !== true) {
	      const isExtglobChar = code === CHAR_PLUS
	        || code === CHAR_AT
	        || code === CHAR_ASTERISK
	        || code === CHAR_QUESTION_MARK
	        || code === CHAR_EXCLAMATION_MARK;

	      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
	        isGlob = token.isGlob = true;
	        isExtglob = token.isExtglob = true;
	        finished = true;
	        if (code === CHAR_EXCLAMATION_MARK && index === start) {
	          negatedExtglob = true;
	        }

	        if (scanToEnd === true) {
	          while (eos() !== true && (code = advance())) {
	            if (code === CHAR_BACKWARD_SLASH) {
	              backslashes = token.backslashes = true;
	              code = advance();
	              continue;
	            }

	            if (code === CHAR_RIGHT_PARENTHESES) {
	              isGlob = token.isGlob = true;
	              finished = true;
	              break;
	            }
	          }
	          continue;
	        }
	        break;
	      }
	    }

	    if (code === CHAR_ASTERISK) {
	      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
	      isGlob = token.isGlob = true;
	      finished = true;

	      if (scanToEnd === true) {
	        continue;
	      }
	      break;
	    }

	    if (code === CHAR_QUESTION_MARK) {
	      isGlob = token.isGlob = true;
	      finished = true;

	      if (scanToEnd === true) {
	        continue;
	      }
	      break;
	    }

	    if (code === CHAR_LEFT_SQUARE_BRACKET) {
	      while (eos() !== true && (next = advance())) {
	        if (next === CHAR_BACKWARD_SLASH) {
	          backslashes = token.backslashes = true;
	          advance();
	          continue;
	        }

	        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
	          isBracket = token.isBracket = true;
	          isGlob = token.isGlob = true;
	          finished = true;
	          break;
	        }
	      }

	      if (scanToEnd === true) {
	        continue;
	      }

	      break;
	    }

	    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
	      negated = token.negated = true;
	      start++;
	      continue;
	    }

	    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
	      isGlob = token.isGlob = true;

	      if (scanToEnd === true) {
	        while (eos() !== true && (code = advance())) {
	          if (code === CHAR_LEFT_PARENTHESES) {
	            backslashes = token.backslashes = true;
	            code = advance();
	            continue;
	          }

	          if (code === CHAR_RIGHT_PARENTHESES) {
	            finished = true;
	            break;
	          }
	        }
	        continue;
	      }
	      break;
	    }

	    if (isGlob === true) {
	      finished = true;

	      if (scanToEnd === true) {
	        continue;
	      }

	      break;
	    }
	  }

	  if (opts.noext === true) {
	    isExtglob = false;
	    isGlob = false;
	  }

	  let base = str;
	  let prefix = '';
	  let glob = '';

	  if (start > 0) {
	    prefix = str.slice(0, start);
	    str = str.slice(start);
	    lastIndex -= start;
	  }

	  if (base && isGlob === true && lastIndex > 0) {
	    base = str.slice(0, lastIndex);
	    glob = str.slice(lastIndex);
	  } else if (isGlob === true) {
	    base = '';
	    glob = str;
	  } else {
	    base = str;
	  }

	  if (base && base !== '' && base !== '/' && base !== str) {
	    if (isPathSeparator(base.charCodeAt(base.length - 1))) {
	      base = base.slice(0, -1);
	    }
	  }

	  if (opts.unescape === true) {
	    if (glob) glob = utils.removeBackslashes(glob);

	    if (base && backslashes === true) {
	      base = utils.removeBackslashes(base);
	    }
	  }

	  const state = {
	    prefix,
	    input,
	    start,
	    base,
	    glob,
	    isBrace,
	    isBracket,
	    isGlob,
	    isExtglob,
	    isGlobstar,
	    negated,
	    negatedExtglob
	  };

	  if (opts.tokens === true) {
	    state.maxDepth = 0;
	    if (!isPathSeparator(code)) {
	      tokens.push(token);
	    }
	    state.tokens = tokens;
	  }

	  if (opts.parts === true || opts.tokens === true) {
	    let prevIndex;

	    for (let idx = 0; idx < slashes.length; idx++) {
	      const n = prevIndex ? prevIndex + 1 : start;
	      const i = slashes[idx];
	      const value = input.slice(n, i);
	      if (opts.tokens) {
	        if (idx === 0 && start !== 0) {
	          tokens[idx].isPrefix = true;
	          tokens[idx].value = prefix;
	        } else {
	          tokens[idx].value = value;
	        }
	        depth(tokens[idx]);
	        state.maxDepth += tokens[idx].depth;
	      }
	      if (idx !== 0 || value !== '') {
	        parts.push(value);
	      }
	      prevIndex = i;
	    }

	    if (prevIndex && prevIndex + 1 < input.length) {
	      const value = input.slice(prevIndex + 1);
	      parts.push(value);

	      if (opts.tokens) {
	        tokens[tokens.length - 1].value = value;
	        depth(tokens[tokens.length - 1]);
	        state.maxDepth += tokens[tokens.length - 1].depth;
	      }
	    }

	    state.slashes = slashes;
	    state.parts = parts;
	  }

	  return state;
	};

	scan_1 = scan;
	return scan_1;
}

var parse_1;
var hasRequiredParse$2;

function requireParse$2 () {
	if (hasRequiredParse$2) return parse_1;
	hasRequiredParse$2 = 1;

	const constants = requireConstants$1();
	const utils = requireUtils$2();

	/**
	 * Constants
	 */

	const {
	  MAX_LENGTH,
	  POSIX_REGEX_SOURCE,
	  REGEX_NON_SPECIAL_CHARS,
	  REGEX_SPECIAL_CHARS_BACKREF,
	  REPLACEMENTS
	} = constants;

	/**
	 * Helpers
	 */

	const expandRange = (args, options) => {
	  if (typeof options.expandRange === 'function') {
	    return options.expandRange(...args, options);
	  }

	  args.sort();
	  const value = `[${args.join('-')}]`;

	  try {
	    /* eslint-disable-next-line no-new */
	    new RegExp(value);
	  } catch (ex) {
	    return args.map(v => utils.escapeRegex(v)).join('..');
	  }

	  return value;
	};

	/**
	 * Create the message for a syntax error
	 */

	const syntaxError = (type, char) => {
	  return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
	};

	/**
	 * Parse the given input string.
	 * @param {String} input
	 * @param {Object} options
	 * @return {Object}
	 */

	const parse = (input, options) => {
	  if (typeof input !== 'string') {
	    throw new TypeError('Expected a string');
	  }

	  input = REPLACEMENTS[input] || input;

	  const opts = { ...options };
	  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;

	  let len = input.length;
	  if (len > max) {
	    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
	  }

	  const bos = { type: 'bos', value: '', output: opts.prepend || '' };
	  const tokens = [bos];

	  const capture = opts.capture ? '' : '?:';
	  const win32 = utils.isWindows(options);

	  // create constants based on platform, for windows or posix
	  const PLATFORM_CHARS = constants.globChars(win32);
	  const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);

	  const {
	    DOT_LITERAL,
	    PLUS_LITERAL,
	    SLASH_LITERAL,
	    ONE_CHAR,
	    DOTS_SLASH,
	    NO_DOT,
	    NO_DOT_SLASH,
	    NO_DOTS_SLASH,
	    QMARK,
	    QMARK_NO_DOT,
	    STAR,
	    START_ANCHOR
	  } = PLATFORM_CHARS;

	  const globstar = opts => {
	    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
	  };

	  const nodot = opts.dot ? '' : NO_DOT;
	  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
	  let star = opts.bash === true ? globstar(opts) : STAR;

	  if (opts.capture) {
	    star = `(${star})`;
	  }

	  // minimatch options support
	  if (typeof opts.noext === 'boolean') {
	    opts.noextglob = opts.noext;
	  }

	  const state = {
	    input,
	    index: -1,
	    start: 0,
	    dot: opts.dot === true,
	    consumed: '',
	    output: '',
	    prefix: '',
	    backtrack: false,
	    negated: false,
	    brackets: 0,
	    braces: 0,
	    parens: 0,
	    quotes: 0,
	    globstar: false,
	    tokens
	  };

	  input = utils.removePrefix(input, state);
	  len = input.length;

	  const extglobs = [];
	  const braces = [];
	  const stack = [];
	  let prev = bos;
	  let value;

	  /**
	   * Tokenizing helpers
	   */

	  const eos = () => state.index === len - 1;
	  const peek = state.peek = (n = 1) => input[state.index + n];
	  const advance = state.advance = () => input[++state.index] || '';
	  const remaining = () => input.slice(state.index + 1);
	  const consume = (value = '', num = 0) => {
	    state.consumed += value;
	    state.index += num;
	  };

	  const append = token => {
	    state.output += token.output != null ? token.output : token.value;
	    consume(token.value);
	  };

	  const negate = () => {
	    let count = 1;

	    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {
	      advance();
	      state.start++;
	      count++;
	    }

	    if (count % 2 === 0) {
	      return false;
	    }

	    state.negated = true;
	    state.start++;
	    return true;
	  };

	  const increment = type => {
	    state[type]++;
	    stack.push(type);
	  };

	  const decrement = type => {
	    state[type]--;
	    stack.pop();
	  };

	  /**
	   * Push tokens onto the tokens array. This helper speeds up
	   * tokenizing by 1) helping us avoid backtracking as much as possible,
	   * and 2) helping us avoid creating extra tokens when consecutive
	   * characters are plain text. This improves performance and simplifies
	   * lookbehinds.
	   */

	  const push = tok => {
	    if (prev.type === 'globstar') {
	      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');
	      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));

	      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {
	        state.output = state.output.slice(0, -prev.output.length);
	        prev.type = 'star';
	        prev.value = '*';
	        prev.output = star;
	        state.output += prev.output;
	      }
	    }

	    if (extglobs.length && tok.type !== 'paren') {
	      extglobs[extglobs.length - 1].inner += tok.value;
	    }

	    if (tok.value || tok.output) append(tok);
	    if (prev && prev.type === 'text' && tok.type === 'text') {
	      prev.value += tok.value;
	      prev.output = (prev.output || '') + tok.value;
	      return;
	    }

	    tok.prev = prev;
	    tokens.push(tok);
	    prev = tok;
	  };

	  const extglobOpen = (type, value) => {
	    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };

	    token.prev = prev;
	    token.parens = state.parens;
	    token.output = state.output;
	    const output = (opts.capture ? '(' : '') + token.open;

	    increment('parens');
	    push({ type, value, output: state.output ? '' : ONE_CHAR });
	    push({ type: 'paren', extglob: true, value: advance(), output });
	    extglobs.push(token);
	  };

	  const extglobClose = token => {
	    let output = token.close + (opts.capture ? ')' : '');
	    let rest;

	    if (token.type === 'negate') {
	      let extglobStar = star;

	      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {
	        extglobStar = globstar(opts);
	      }

	      if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
	        output = token.close = `)$))${extglobStar}`;
	      }

	      if (token.inner.includes('*') && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
	        // Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.
	        // In this case, we need to parse the string and use it in the output of the original pattern.
	        // Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.
	        //
	        // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.
	        const expression = parse(rest, { ...options, fastpaths: false }).output;

	        output = token.close = `)${expression})${extglobStar})`;
	      }

	      if (token.prev.type === 'bos') {
	        state.negatedExtglob = true;
	      }
	    }

	    push({ type: 'paren', extglob: true, value, output });
	    decrement('parens');
	  };

	  /**
	   * Fast paths
	   */

	  if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
	    let backslashes = false;

	    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
	      if (first === '\\') {
	        backslashes = true;
	        return m;
	      }

	      if (first === '?') {
	        if (esc) {
	          return esc + first + (rest ? QMARK.repeat(rest.length) : '');
	        }
	        if (index === 0) {
	          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');
	        }
	        return QMARK.repeat(chars.length);
	      }

	      if (first === '.') {
	        return DOT_LITERAL.repeat(chars.length);
	      }

	      if (first === '*') {
	        if (esc) {
	          return esc + first + (rest ? star : '');
	        }
	        return star;
	      }
	      return esc ? m : `\\${m}`;
	    });

	    if (backslashes === true) {
	      if (opts.unescape === true) {
	        output = output.replace(/\\/g, '');
	      } else {
	        output = output.replace(/\\+/g, m => {
	          return m.length % 2 === 0 ? '\\\\' : (m ? '\\' : '');
	        });
	      }
	    }

	    if (output === input && opts.contains === true) {
	      state.output = input;
	      return state;
	    }

	    state.output = utils.wrapOutput(output, state, options);
	    return state;
	  }

	  /**
	   * Tokenize input until we reach end-of-string
	   */

	  while (!eos()) {
	    value = advance();

	    if (value === '\u0000') {
	      continue;
	    }

	    /**
	     * Escaped characters
	     */

	    if (value === '\\') {
	      const next = peek();

	      if (next === '/' && opts.bash !== true) {
	        continue;
	      }

	      if (next === '.' || next === ';') {
	        continue;
	      }

	      if (!next) {
	        value += '\\';
	        push({ type: 'text', value });
	        continue;
	      }

	      // collapse slashes to reduce potential for exploits
	      const match = /^\\+/.exec(remaining());
	      let slashes = 0;

	      if (match && match[0].length > 2) {
	        slashes = match[0].length;
	        state.index += slashes;
	        if (slashes % 2 !== 0) {
	          value += '\\';
	        }
	      }

	      if (opts.unescape === true) {
	        value = advance();
	      } else {
	        value += advance();
	      }

	      if (state.brackets === 0) {
	        push({ type: 'text', value });
	        continue;
	      }
	    }

	    /**
	     * If we're inside a regex character class, continue
	     * until we reach the closing bracket.
	     */

	    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {
	      if (opts.posix !== false && value === ':') {
	        const inner = prev.value.slice(1);
	        if (inner.includes('[')) {
	          prev.posix = true;

	          if (inner.includes(':')) {
	            const idx = prev.value.lastIndexOf('[');
	            const pre = prev.value.slice(0, idx);
	            const rest = prev.value.slice(idx + 2);
	            const posix = POSIX_REGEX_SOURCE[rest];
	            if (posix) {
	              prev.value = pre + posix;
	              state.backtrack = true;
	              advance();

	              if (!bos.output && tokens.indexOf(prev) === 1) {
	                bos.output = ONE_CHAR;
	              }
	              continue;
	            }
	          }
	        }
	      }

	      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {
	        value = `\\${value}`;
	      }

	      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {
	        value = `\\${value}`;
	      }

	      if (opts.posix === true && value === '!' && prev.value === '[') {
	        value = '^';
	      }

	      prev.value += value;
	      append({ value });
	      continue;
	    }

	    /**
	     * If we're inside a quoted string, continue
	     * until we reach the closing double quote.
	     */

	    if (state.quotes === 1 && value !== '"') {
	      value = utils.escapeRegex(value);
	      prev.value += value;
	      append({ value });
	      continue;
	    }

	    /**
	     * Double quotes
	     */

	    if (value === '"') {
	      state.quotes = state.quotes === 1 ? 0 : 1;
	      if (opts.keepQuotes === true) {
	        push({ type: 'text', value });
	      }
	      continue;
	    }

	    /**
	     * Parentheses
	     */

	    if (value === '(') {
	      increment('parens');
	      push({ type: 'paren', value });
	      continue;
	    }

	    if (value === ')') {
	      if (state.parens === 0 && opts.strictBrackets === true) {
	        throw new SyntaxError(syntaxError('opening', '('));
	      }

	      const extglob = extglobs[extglobs.length - 1];
	      if (extglob && state.parens === extglob.parens + 1) {
	        extglobClose(extglobs.pop());
	        continue;
	      }

	      push({ type: 'paren', value, output: state.parens ? ')' : '\\)' });
	      decrement('parens');
	      continue;
	    }

	    /**
	     * Square brackets
	     */

	    if (value === '[') {
	      if (opts.nobracket === true || !remaining().includes(']')) {
	        if (opts.nobracket !== true && opts.strictBrackets === true) {
	          throw new SyntaxError(syntaxError('closing', ']'));
	        }

	        value = `\\${value}`;
	      } else {
	        increment('brackets');
	      }

	      push({ type: 'bracket', value });
	      continue;
	    }

	    if (value === ']') {
	      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {
	        push({ type: 'text', value, output: `\\${value}` });
	        continue;
	      }

	      if (state.brackets === 0) {
	        if (opts.strictBrackets === true) {
	          throw new SyntaxError(syntaxError('opening', '['));
	        }

	        push({ type: 'text', value, output: `\\${value}` });
	        continue;
	      }

	      decrement('brackets');

	      const prevValue = prev.value.slice(1);
	      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {
	        value = `/${value}`;
	      }

	      prev.value += value;
	      append({ value });

	      // when literal brackets are explicitly disabled
	      // assume we should match with a regex character class
	      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
	        continue;
	      }

	      const escaped = utils.escapeRegex(prev.value);
	      state.output = state.output.slice(0, -prev.value.length);

	      // when literal brackets are explicitly enabled
	      // assume we should escape the brackets to match literal characters
	      if (opts.literalBrackets === true) {
	        state.output += escaped;
	        prev.value = escaped;
	        continue;
	      }

	      // when the user specifies nothing, try to match both
	      prev.value = `(${capture}${escaped}|${prev.value})`;
	      state.output += prev.value;
	      continue;
	    }

	    /**
	     * Braces
	     */

	    if (value === '{' && opts.nobrace !== true) {
	      increment('braces');

	      const open = {
	        type: 'brace',
	        value,
	        output: '(',
	        outputIndex: state.output.length,
	        tokensIndex: state.tokens.length
	      };

	      braces.push(open);
	      push(open);
	      continue;
	    }

	    if (value === '}') {
	      const brace = braces[braces.length - 1];

	      if (opts.nobrace === true || !brace) {
	        push({ type: 'text', value, output: value });
	        continue;
	      }

	      let output = ')';

	      if (brace.dots === true) {
	        const arr = tokens.slice();
	        const range = [];

	        for (let i = arr.length - 1; i >= 0; i--) {
	          tokens.pop();
	          if (arr[i].type === 'brace') {
	            break;
	          }
	          if (arr[i].type !== 'dots') {
	            range.unshift(arr[i].value);
	          }
	        }

	        output = expandRange(range, opts);
	        state.backtrack = true;
	      }

	      if (brace.comma !== true && brace.dots !== true) {
	        const out = state.output.slice(0, brace.outputIndex);
	        const toks = state.tokens.slice(brace.tokensIndex);
	        brace.value = brace.output = '\\{';
	        value = output = '\\}';
	        state.output = out;
	        for (const t of toks) {
	          state.output += (t.output || t.value);
	        }
	      }

	      push({ type: 'brace', value, output });
	      decrement('braces');
	      braces.pop();
	      continue;
	    }

	    /**
	     * Pipes
	     */

	    if (value === '|') {
	      if (extglobs.length > 0) {
	        extglobs[extglobs.length - 1].conditions++;
	      }
	      push({ type: 'text', value });
	      continue;
	    }

	    /**
	     * Commas
	     */

	    if (value === ',') {
	      let output = value;

	      const brace = braces[braces.length - 1];
	      if (brace && stack[stack.length - 1] === 'braces') {
	        brace.comma = true;
	        output = '|';
	      }

	      push({ type: 'comma', value, output });
	      continue;
	    }

	    /**
	     * Slashes
	     */

	    if (value === '/') {
	      // if the beginning of the glob is "./", advance the start
	      // to the current index, and don't add the "./" characters
	      // to the state. This greatly simplifies lookbehinds when
	      // checking for BOS characters like "!" and "." (not "./")
	      if (prev.type === 'dot' && state.index === state.start + 1) {
	        state.start = state.index + 1;
	        state.consumed = '';
	        state.output = '';
	        tokens.pop();
	        prev = bos; // reset "prev" to the first token
	        continue;
	      }

	      push({ type: 'slash', value, output: SLASH_LITERAL });
	      continue;
	    }

	    /**
	     * Dots
	     */

	    if (value === '.') {
	      if (state.braces > 0 && prev.type === 'dot') {
	        if (prev.value === '.') prev.output = DOT_LITERAL;
	        const brace = braces[braces.length - 1];
	        prev.type = 'dots';
	        prev.output += value;
	        prev.value += value;
	        brace.dots = true;
	        continue;
	      }

	      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {
	        push({ type: 'text', value, output: DOT_LITERAL });
	        continue;
	      }

	      push({ type: 'dot', value, output: DOT_LITERAL });
	      continue;
	    }

	    /**
	     * Question marks
	     */

	    if (value === '?') {
	      const isGroup = prev && prev.value === '(';
	      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
	        extglobOpen('qmark', value);
	        continue;
	      }

	      if (prev && prev.type === 'paren') {
	        const next = peek();
	        let output = value;

	        if (next === '<' && !utils.supportsLookbehinds()) {
	          throw new Error('Node.js v10 or higher is required for regex lookbehinds');
	        }

	        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\w+>)/.test(remaining()))) {
	          output = `\\${value}`;
	        }

	        push({ type: 'text', value, output });
	        continue;
	      }

	      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {
	        push({ type: 'qmark', value, output: QMARK_NO_DOT });
	        continue;
	      }

	      push({ type: 'qmark', value, output: QMARK });
	      continue;
	    }

	    /**
	     * Exclamation
	     */

	    if (value === '!') {
	      if (opts.noextglob !== true && peek() === '(') {
	        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {
	          extglobOpen('negate', value);
	          continue;
	        }
	      }

	      if (opts.nonegate !== true && state.index === 0) {
	        negate();
	        continue;
	      }
	    }

	    /**
	     * Plus
	     */

	    if (value === '+') {
	      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
	        extglobOpen('plus', value);
	        continue;
	      }

	      if ((prev && prev.value === '(') || opts.regex === false) {
	        push({ type: 'plus', value, output: PLUS_LITERAL });
	        continue;
	      }

	      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {
	        push({ type: 'plus', value });
	        continue;
	      }

	      push({ type: 'plus', value: PLUS_LITERAL });
	      continue;
	    }

	    /**
	     * Plain text
	     */

	    if (value === '@') {
	      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
	        push({ type: 'at', extglob: true, value, output: '' });
	        continue;
	      }

	      push({ type: 'text', value });
	      continue;
	    }

	    /**
	     * Plain text
	     */

	    if (value !== '*') {
	      if (value === '$' || value === '^') {
	        value = `\\${value}`;
	      }

	      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
	      if (match) {
	        value += match[0];
	        state.index += match[0].length;
	      }

	      push({ type: 'text', value });
	      continue;
	    }

	    /**
	     * Stars
	     */

	    if (prev && (prev.type === 'globstar' || prev.star === true)) {
	      prev.type = 'star';
	      prev.star = true;
	      prev.value += value;
	      prev.output = star;
	      state.backtrack = true;
	      state.globstar = true;
	      consume(value);
	      continue;
	    }

	    let rest = remaining();
	    if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
	      extglobOpen('star', value);
	      continue;
	    }

	    if (prev.type === 'star') {
	      if (opts.noglobstar === true) {
	        consume(value);
	        continue;
	      }

	      const prior = prev.prev;
	      const before = prior.prev;
	      const isStart = prior.type === 'slash' || prior.type === 'bos';
	      const afterStar = before && (before.type === 'star' || before.type === 'globstar');

	      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {
	        push({ type: 'star', value, output: '' });
	        continue;
	      }

	      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');
	      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');
	      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {
	        push({ type: 'star', value, output: '' });
	        continue;
	      }

	      // strip consecutive `/**/`
	      while (rest.slice(0, 3) === '/**') {
	        const after = input[state.index + 4];
	        if (after && after !== '/') {
	          break;
	        }
	        rest = rest.slice(3);
	        consume('/**', 3);
	      }

	      if (prior.type === 'bos' && eos()) {
	        prev.type = 'globstar';
	        prev.value += value;
	        prev.output = globstar(opts);
	        state.output = prev.output;
	        state.globstar = true;
	        consume(value);
	        continue;
	      }

	      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {
	        state.output = state.output.slice(0, -(prior.output + prev.output).length);
	        prior.output = `(?:${prior.output}`;

	        prev.type = 'globstar';
	        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');
	        prev.value += value;
	        state.globstar = true;
	        state.output += prior.output + prev.output;
	        consume(value);
	        continue;
	      }

	      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {
	        const end = rest[1] !== void 0 ? '|$' : '';

	        state.output = state.output.slice(0, -(prior.output + prev.output).length);
	        prior.output = `(?:${prior.output}`;

	        prev.type = 'globstar';
	        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
	        prev.value += value;

	        state.output += prior.output + prev.output;
	        state.globstar = true;

	        consume(value + advance());

	        push({ type: 'slash', value: '/', output: '' });
	        continue;
	      }

	      if (prior.type === 'bos' && rest[0] === '/') {
	        prev.type = 'globstar';
	        prev.value += value;
	        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
	        state.output = prev.output;
	        state.globstar = true;
	        consume(value + advance());
	        push({ type: 'slash', value: '/', output: '' });
	        continue;
	      }

	      // remove single star from output
	      state.output = state.output.slice(0, -prev.output.length);

	      // reset previous token to globstar
	      prev.type = 'globstar';
	      prev.output = globstar(opts);
	      prev.value += value;

	      // reset output with globstar
	      state.output += prev.output;
	      state.globstar = true;
	      consume(value);
	      continue;
	    }

	    const token = { type: 'star', value, output: star };

	    if (opts.bash === true) {
	      token.output = '.*?';
	      if (prev.type === 'bos' || prev.type === 'slash') {
	        token.output = nodot + token.output;
	      }
	      push(token);
	      continue;
	    }

	    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {
	      token.output = value;
	      push(token);
	      continue;
	    }

	    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {
	      if (prev.type === 'dot') {
	        state.output += NO_DOT_SLASH;
	        prev.output += NO_DOT_SLASH;

	      } else if (opts.dot === true) {
	        state.output += NO_DOTS_SLASH;
	        prev.output += NO_DOTS_SLASH;

	      } else {
	        state.output += nodot;
	        prev.output += nodot;
	      }

	      if (peek() !== '*') {
	        state.output += ONE_CHAR;
	        prev.output += ONE_CHAR;
	      }
	    }

	    push(token);
	  }

	  while (state.brackets > 0) {
	    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));
	    state.output = utils.escapeLast(state.output, '[');
	    decrement('brackets');
	  }

	  while (state.parens > 0) {
	    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));
	    state.output = utils.escapeLast(state.output, '(');
	    decrement('parens');
	  }

	  while (state.braces > 0) {
	    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));
	    state.output = utils.escapeLast(state.output, '{');
	    decrement('braces');
	  }

	  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {
	    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });
	  }

	  // rebuild the output if we had to backtrack at any point
	  if (state.backtrack === true) {
	    state.output = '';

	    for (const token of state.tokens) {
	      state.output += token.output != null ? token.output : token.value;

	      if (token.suffix) {
	        state.output += token.suffix;
	      }
	    }
	  }

	  return state;
	};

	/**
	 * Fast paths for creating regular expressions for common glob patterns.
	 * This can significantly speed up processing and has very little downside
	 * impact when none of the fast paths match.
	 */

	parse.fastpaths = (input, options) => {
	  const opts = { ...options };
	  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
	  const len = input.length;
	  if (len > max) {
	    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
	  }

	  input = REPLACEMENTS[input] || input;
	  const win32 = utils.isWindows(options);

	  // create constants based on platform, for windows or posix
	  const {
	    DOT_LITERAL,
	    SLASH_LITERAL,
	    ONE_CHAR,
	    DOTS_SLASH,
	    NO_DOT,
	    NO_DOTS,
	    NO_DOTS_SLASH,
	    STAR,
	    START_ANCHOR
	  } = constants.globChars(win32);

	  const nodot = opts.dot ? NO_DOTS : NO_DOT;
	  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
	  const capture = opts.capture ? '' : '?:';
	  const state = { negated: false, prefix: '' };
	  let star = opts.bash === true ? '.*?' : STAR;

	  if (opts.capture) {
	    star = `(${star})`;
	  }

	  const globstar = opts => {
	    if (opts.noglobstar === true) return star;
	    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
	  };

	  const create = str => {
	    switch (str) {
	      case '*':
	        return `${nodot}${ONE_CHAR}${star}`;

	      case '.*':
	        return `${DOT_LITERAL}${ONE_CHAR}${star}`;

	      case '*.*':
	        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

	      case '*/*':
	        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;

	      case '**':
	        return nodot + globstar(opts);

	      case '**/*':
	        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;

	      case '**/*.*':
	        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

	      case '**/.*':
	        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;

	      default: {
	        const match = /^(.*?)\.(\w+)$/.exec(str);
	        if (!match) return;

	        const source = create(match[1]);
	        if (!source) return;

	        return source + DOT_LITERAL + match[2];
	      }
	    }
	  };

	  const output = utils.removePrefix(input, state);
	  let source = create(output);

	  if (source && opts.strictSlashes !== true) {
	    source += `${SLASH_LITERAL}?`;
	  }

	  return source;
	};

	parse_1 = parse;
	return parse_1;
}

var picomatch_1;
var hasRequiredPicomatch$1;

function requirePicomatch$1 () {
	if (hasRequiredPicomatch$1) return picomatch_1;
	hasRequiredPicomatch$1 = 1;

	const path = require$$3;
	const scan = requireScan();
	const parse = requireParse$2();
	const utils = requireUtils$2();
	const constants = requireConstants$1();
	const isObject = val => val && typeof val === 'object' && !Array.isArray(val);

	/**
	 * Creates a matcher function from one or more glob patterns. The
	 * returned function takes a string to match as its first argument,
	 * and returns true if the string is a match. The returned matcher
	 * function also takes a boolean as the second argument that, when true,
	 * returns an object with additional information.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * // picomatch(glob[, options]);
	 *
	 * const isMatch = picomatch('*.!(*a)');
	 * console.log(isMatch('a.a')); //=> false
	 * console.log(isMatch('a.b')); //=> true
	 * ```
	 * @name picomatch
	 * @param {String|Array} `globs` One or more glob patterns.
	 * @param {Object=} `options`
	 * @return {Function=} Returns a matcher function.
	 * @api public
	 */

	const picomatch = (glob, options, returnState = false) => {
	  if (Array.isArray(glob)) {
	    const fns = glob.map(input => picomatch(input, options, returnState));
	    const arrayMatcher = str => {
	      for (const isMatch of fns) {
	        const state = isMatch(str);
	        if (state) return state;
	      }
	      return false;
	    };
	    return arrayMatcher;
	  }

	  const isState = isObject(glob) && glob.tokens && glob.input;

	  if (glob === '' || (typeof glob !== 'string' && !isState)) {
	    throw new TypeError('Expected pattern to be a non-empty string');
	  }

	  const opts = options || {};
	  const posix = utils.isWindows(options);
	  const regex = isState
	    ? picomatch.compileRe(glob, options)
	    : picomatch.makeRe(glob, options, false, true);

	  const state = regex.state;
	  delete regex.state;

	  let isIgnored = () => false;
	  if (opts.ignore) {
	    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
	    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
	  }

	  const matcher = (input, returnObject = false) => {
	    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
	    const result = { glob, state, regex, posix, input, output, match, isMatch };

	    if (typeof opts.onResult === 'function') {
	      opts.onResult(result);
	    }

	    if (isMatch === false) {
	      result.isMatch = false;
	      return returnObject ? result : false;
	    }

	    if (isIgnored(input)) {
	      if (typeof opts.onIgnore === 'function') {
	        opts.onIgnore(result);
	      }
	      result.isMatch = false;
	      return returnObject ? result : false;
	    }

	    if (typeof opts.onMatch === 'function') {
	      opts.onMatch(result);
	    }
	    return returnObject ? result : true;
	  };

	  if (returnState) {
	    matcher.state = state;
	  }

	  return matcher;
	};

	/**
	 * Test `input` with the given `regex`. This is used by the main
	 * `picomatch()` function to test the input string.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * // picomatch.test(input, regex[, options]);
	 *
	 * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
	 * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
	 * ```
	 * @param {String} `input` String to test.
	 * @param {RegExp} `regex`
	 * @return {Object} Returns an object with matching info.
	 * @api public
	 */

	picomatch.test = (input, regex, options, { glob, posix } = {}) => {
	  if (typeof input !== 'string') {
	    throw new TypeError('Expected input to be a string');
	  }

	  if (input === '') {
	    return { isMatch: false, output: '' };
	  }

	  const opts = options || {};
	  const format = opts.format || (posix ? utils.toPosixSlashes : null);
	  let match = input === glob;
	  let output = (match && format) ? format(input) : input;

	  if (match === false) {
	    output = format ? format(input) : input;
	    match = output === glob;
	  }

	  if (match === false || opts.capture === true) {
	    if (opts.matchBase === true || opts.basename === true) {
	      match = picomatch.matchBase(input, regex, options, posix);
	    } else {
	      match = regex.exec(output);
	    }
	  }

	  return { isMatch: Boolean(match), match, output };
	};

	/**
	 * Match the basename of a filepath.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * // picomatch.matchBase(input, glob[, options]);
	 * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
	 * ```
	 * @param {String} `input` String to test.
	 * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
	 * @return {Boolean}
	 * @api public
	 */

	picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
	  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
	  return regex.test(path.basename(input));
	};

	/**
	 * Returns true if **any** of the given glob `patterns` match the specified `string`.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * // picomatch.isMatch(string, patterns[, options]);
	 *
	 * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
	 * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
	 * ```
	 * @param {String|Array} str The string to test.
	 * @param {String|Array} patterns One or more glob patterns to use for matching.
	 * @param {Object} [options] See available [options](#options).
	 * @return {Boolean} Returns true if any patterns match `str`
	 * @api public
	 */

	picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);

	/**
	 * Parse a glob pattern to create the source string for a regular
	 * expression.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * const result = picomatch.parse(pattern[, options]);
	 * ```
	 * @param {String} `pattern`
	 * @param {Object} `options`
	 * @return {Object} Returns an object with useful properties and output to be used as a regex source string.
	 * @api public
	 */

	picomatch.parse = (pattern, options) => {
	  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));
	  return parse(pattern, { ...options, fastpaths: false });
	};

	/**
	 * Scan a glob pattern to separate the pattern into segments.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * // picomatch.scan(input[, options]);
	 *
	 * const result = picomatch.scan('!./foo/*.js');
	 * console.log(result);
	 * { prefix: '!./',
	 *   input: '!./foo/*.js',
	 *   start: 3,
	 *   base: 'foo',
	 *   glob: '*.js',
	 *   isBrace: false,
	 *   isBracket: false,
	 *   isGlob: true,
	 *   isExtglob: false,
	 *   isGlobstar: false,
	 *   negated: true }
	 * ```
	 * @param {String} `input` Glob pattern to scan.
	 * @param {Object} `options`
	 * @return {Object} Returns an object with
	 * @api public
	 */

	picomatch.scan = (input, options) => scan(input, options);

	/**
	 * Compile a regular expression from the `state` object returned by the
	 * [parse()](#parse) method.
	 *
	 * @param {Object} `state`
	 * @param {Object} `options`
	 * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.
	 * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.
	 * @return {RegExp}
	 * @api public
	 */

	picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
	  if (returnOutput === true) {
	    return state.output;
	  }

	  const opts = options || {};
	  const prepend = opts.contains ? '' : '^';
	  const append = opts.contains ? '' : '$';

	  let source = `${prepend}(?:${state.output})${append}`;
	  if (state && state.negated === true) {
	    source = `^(?!${source}).*$`;
	  }

	  const regex = picomatch.toRegex(source, options);
	  if (returnState === true) {
	    regex.state = state;
	  }

	  return regex;
	};

	/**
	 * Create a regular expression from a parsed glob pattern.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * const state = picomatch.parse('*.js');
	 * // picomatch.compileRe(state[, options]);
	 *
	 * console.log(picomatch.compileRe(state));
	 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
	 * ```
	 * @param {String} `state` The object returned from the `.parse` method.
	 * @param {Object} `options`
	 * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.
	 * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.
	 * @return {RegExp} Returns a regex created from the given pattern.
	 * @api public
	 */

	picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
	  if (!input || typeof input !== 'string') {
	    throw new TypeError('Expected a non-empty string');
	  }

	  let parsed = { negated: false, fastpaths: true };

	  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {
	    parsed.output = parse.fastpaths(input, options);
	  }

	  if (!parsed.output) {
	    parsed = parse(input, options);
	  }

	  return picomatch.compileRe(parsed, options, returnOutput, returnState);
	};

	/**
	 * Create a regular expression from the given regex source string.
	 *
	 * ```js
	 * const picomatch = require('picomatch');
	 * // picomatch.toRegex(source[, options]);
	 *
	 * const { output } = picomatch.parse('*.js');
	 * console.log(picomatch.toRegex(output));
	 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
	 * ```
	 * @param {String} `source` Regular expression source string.
	 * @param {Object} `options`
	 * @return {RegExp}
	 * @api public
	 */

	picomatch.toRegex = (source, options) => {
	  try {
	    const opts = options || {};
	    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));
	  } catch (err) {
	    if (options && options.debug === true) throw err;
	    return /$^/;
	  }
	};

	/**
	 * Picomatch constants.
	 * @return {Object}
	 */

	picomatch.constants = constants;

	/**
	 * Expose "picomatch"
	 */

	picomatch_1 = picomatch;
	return picomatch_1;
}

var hasRequiredPicomatch;

function requirePicomatch () {
	if (hasRequiredPicomatch) return picomatchExports;
	hasRequiredPicomatch = 1;
	(function (module) {

		module.exports = requirePicomatch$1();
} (picomatch));
	return picomatchExports;
}

var micromatch_1;
var hasRequiredMicromatch;

function requireMicromatch () {
	if (hasRequiredMicromatch) return micromatch_1;
	hasRequiredMicromatch = 1;

	const util = require$$3;
	const braces = requireBraces();
	const picomatch = requirePicomatch();
	const utils = requireUtils$2();
	const isEmptyString = val => val === '' || val === './';

	/**
	 * Returns an array of strings that match one or more glob patterns.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm(list, patterns[, options]);
	 *
	 * console.log(mm(['a.js', 'a.txt'], ['*.js']));
	 * //=> [ 'a.js' ]
	 * ```
	 * @param {String|Array<string>} `list` List of strings to match.
	 * @param {String|Array<string>} `patterns` One or more glob patterns to use for matching.
	 * @param {Object} `options` See available [options](#options)
	 * @return {Array} Returns an array of matches
	 * @summary false
	 * @api public
	 */

	const micromatch = (list, patterns, options) => {
	  patterns = [].concat(patterns);
	  list = [].concat(list);

	  let omit = new Set();
	  let keep = new Set();
	  let items = new Set();
	  let negatives = 0;

	  let onResult = state => {
	    items.add(state.output);
	    if (options && options.onResult) {
	      options.onResult(state);
	    }
	  };

	  for (let i = 0; i < patterns.length; i++) {
	    let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
	    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
	    if (negated) negatives++;

	    for (let item of list) {
	      let matched = isMatch(item, true);

	      let match = negated ? !matched.isMatch : matched.isMatch;
	      if (!match) continue;

	      if (negated) {
	        omit.add(matched.output);
	      } else {
	        omit.delete(matched.output);
	        keep.add(matched.output);
	      }
	    }
	  }

	  let result = negatives === patterns.length ? [...items] : [...keep];
	  let matches = result.filter(item => !omit.has(item));

	  if (options && matches.length === 0) {
	    if (options.failglob === true) {
	      throw new Error(`No matches found for "${patterns.join(', ')}"`);
	    }

	    if (options.nonull === true || options.nullglob === true) {
	      return options.unescape ? patterns.map(p => p.replace(/\\/g, '')) : patterns;
	    }
	  }

	  return matches;
	};

	/**
	 * Backwards compatibility
	 */

	micromatch.match = micromatch;

	/**
	 * Returns a matcher function from the given glob `pattern` and `options`.
	 * The returned function takes a string to match as its only argument and returns
	 * true if the string is a match.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.matcher(pattern[, options]);
	 *
	 * const isMatch = mm.matcher('*.!(*a)');
	 * console.log(isMatch('a.a')); //=> false
	 * console.log(isMatch('a.b')); //=> true
	 * ```
	 * @param {String} `pattern` Glob pattern
	 * @param {Object} `options`
	 * @return {Function} Returns a matcher function.
	 * @api public
	 */

	micromatch.matcher = (pattern, options) => picomatch(pattern, options);

	/**
	 * Returns true if **any** of the given glob `patterns` match the specified `string`.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.isMatch(string, patterns[, options]);
	 *
	 * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true
	 * console.log(mm.isMatch('a.a', 'b.*')); //=> false
	 * ```
	 * @param {String} `str` The string to test.
	 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
	 * @param {Object} `[options]` See available [options](#options).
	 * @return {Boolean} Returns true if any patterns match `str`
	 * @api public
	 */

	micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);

	/**
	 * Backwards compatibility
	 */

	micromatch.any = micromatch.isMatch;

	/**
	 * Returns a list of strings that _**do not match any**_ of the given `patterns`.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.not(list, patterns[, options]);
	 *
	 * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
	 * //=> ['b.b', 'c.c']
	 * ```
	 * @param {Array} `list` Array of strings to match.
	 * @param {String|Array} `patterns` One or more glob pattern to use for matching.
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Array} Returns an array of strings that **do not match** the given patterns.
	 * @api public
	 */

	micromatch.not = (list, patterns, options = {}) => {
	  patterns = [].concat(patterns).map(String);
	  let result = new Set();
	  let items = [];

	  let onResult = state => {
	    if (options.onResult) options.onResult(state);
	    items.push(state.output);
	  };

	  let matches = new Set(micromatch(list, patterns, { ...options, onResult }));

	  for (let item of items) {
	    if (!matches.has(item)) {
	      result.add(item);
	    }
	  }
	  return [...result];
	};

	/**
	 * Returns true if the given `string` contains the given pattern. Similar
	 * to [.isMatch](#isMatch) but the pattern can match any part of the string.
	 *
	 * ```js
	 * var mm = require('micromatch');
	 * // mm.contains(string, pattern[, options]);
	 *
	 * console.log(mm.contains('aa/bb/cc', '*b'));
	 * //=> true
	 * console.log(mm.contains('aa/bb/cc', '*d'));
	 * //=> false
	 * ```
	 * @param {String} `str` The string to match.
	 * @param {String|Array} `patterns` Glob pattern to use for matching.
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Boolean} Returns true if any of the patterns matches any part of `str`.
	 * @api public
	 */

	micromatch.contains = (str, pattern, options) => {
	  if (typeof str !== 'string') {
	    throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
	  }

	  if (Array.isArray(pattern)) {
	    return pattern.some(p => micromatch.contains(str, p, options));
	  }

	  if (typeof pattern === 'string') {
	    if (isEmptyString(str) || isEmptyString(pattern)) {
	      return false;
	    }

	    if (str.includes(pattern) || (str.startsWith('./') && str.slice(2).includes(pattern))) {
	      return true;
	    }
	  }

	  return micromatch.isMatch(str, pattern, { ...options, contains: true });
	};

	/**
	 * Filter the keys of the given object with the given `glob` pattern
	 * and `options`. Does not attempt to match nested keys. If you need this feature,
	 * use [glob-object][] instead.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.matchKeys(object, patterns[, options]);
	 *
	 * const obj = { aa: 'a', ab: 'b', ac: 'c' };
	 * console.log(mm.matchKeys(obj, '*b'));
	 * //=> { ab: 'b' }
	 * ```
	 * @param {Object} `object` The object with keys to filter.
	 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Object} Returns an object with only keys that match the given patterns.
	 * @api public
	 */

	micromatch.matchKeys = (obj, patterns, options) => {
	  if (!utils.isObject(obj)) {
	    throw new TypeError('Expected the first argument to be an object');
	  }
	  let keys = micromatch(Object.keys(obj), patterns, options);
	  let res = {};
	  for (let key of keys) res[key] = obj[key];
	  return res;
	};

	/**
	 * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.some(list, patterns[, options]);
	 *
	 * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
	 * // true
	 * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
	 * // false
	 * ```
	 * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.
	 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Boolean} Returns true if any `patterns` matches any of the strings in `list`
	 * @api public
	 */

	micromatch.some = (list, patterns, options) => {
	  let items = [].concat(list);

	  for (let pattern of [].concat(patterns)) {
	    let isMatch = picomatch(String(pattern), options);
	    if (items.some(item => isMatch(item))) {
	      return true;
	    }
	  }
	  return false;
	};

	/**
	 * Returns true if every string in the given `list` matches
	 * any of the given glob `patterns`.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.every(list, patterns[, options]);
	 *
	 * console.log(mm.every('foo.js', ['foo.js']));
	 * // true
	 * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));
	 * // true
	 * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
	 * // false
	 * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));
	 * // false
	 * ```
	 * @param {String|Array} `list` The string or array of strings to test.
	 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Boolean} Returns true if all `patterns` matches all of the strings in `list`
	 * @api public
	 */

	micromatch.every = (list, patterns, options) => {
	  let items = [].concat(list);

	  for (let pattern of [].concat(patterns)) {
	    let isMatch = picomatch(String(pattern), options);
	    if (!items.every(item => isMatch(item))) {
	      return false;
	    }
	  }
	  return true;
	};

	/**
	 * Returns true if **all** of the given `patterns` match
	 * the specified string.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.all(string, patterns[, options]);
	 *
	 * console.log(mm.all('foo.js', ['foo.js']));
	 * // true
	 *
	 * console.log(mm.all('foo.js', ['*.js', '!foo.js']));
	 * // false
	 *
	 * console.log(mm.all('foo.js', ['*.js', 'foo.js']));
	 * // true
	 *
	 * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
	 * // true
	 * ```
	 * @param {String|Array} `str` The string to test.
	 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Boolean} Returns true if any patterns match `str`
	 * @api public
	 */

	micromatch.all = (str, patterns, options) => {
	  if (typeof str !== 'string') {
	    throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
	  }

	  return [].concat(patterns).every(p => picomatch(p, options)(str));
	};

	/**
	 * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.capture(pattern, string[, options]);
	 *
	 * console.log(mm.capture('test/*.js', 'test/foo.js'));
	 * //=> ['foo']
	 * console.log(mm.capture('test/*.js', 'foo/bar.css'));
	 * //=> null
	 * ```
	 * @param {String} `glob` Glob pattern to use for matching.
	 * @param {String} `input` String to match
	 * @param {Object} `options` See available [options](#options) for changing how matches are performed
	 * @return {Array|null} Returns an array of captures if the input matches the glob pattern, otherwise `null`.
	 * @api public
	 */

	micromatch.capture = (glob, input, options) => {
	  let posix = utils.isWindows(options);
	  let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
	  let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);

	  if (match) {
	    return match.slice(1).map(v => v === void 0 ? '' : v);
	  }
	};

	/**
	 * Create a regular expression from the given glob `pattern`.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * // mm.makeRe(pattern[, options]);
	 *
	 * console.log(mm.makeRe('*.js'));
	 * //=> /^(?:(\.[\\\/])?(?!\.)(?=.)[^\/]*?\.js)$/
	 * ```
	 * @param {String} `pattern` A glob pattern to convert to regex.
	 * @param {Object} `options`
	 * @return {RegExp} Returns a regex created from the given pattern.
	 * @api public
	 */

	micromatch.makeRe = (...args) => picomatch.makeRe(...args);

	/**
	 * Scan a glob pattern to separate the pattern into segments. Used
	 * by the [split](#split) method.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * const state = mm.scan(pattern[, options]);
	 * ```
	 * @param {String} `pattern`
	 * @param {Object} `options`
	 * @return {Object} Returns an object with
	 * @api public
	 */

	micromatch.scan = (...args) => picomatch.scan(...args);

	/**
	 * Parse a glob pattern to create the source string for a regular
	 * expression.
	 *
	 * ```js
	 * const mm = require('micromatch');
	 * const state = mm.parse(pattern[, options]);
	 * ```
	 * @param {String} `glob`
	 * @param {Object} `options`
	 * @return {Object} Returns an object with useful properties and output to be used as regex source string.
	 * @api public
	 */

	micromatch.parse = (patterns, options) => {
	  let res = [];
	  for (let pattern of [].concat(patterns || [])) {
	    for (let str of braces(String(pattern), options)) {
	      res.push(picomatch.parse(str, options));
	    }
	  }
	  return res;
	};

	/**
	 * Process the given brace `pattern`.
	 *
	 * ```js
	 * const { braces } = require('micromatch');
	 * console.log(braces('foo/{a,b,c}/bar'));
	 * //=> [ 'foo/(a|b|c)/bar' ]
	 *
	 * console.log(braces('foo/{a,b,c}/bar', { expand: true }));
	 * //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]
	 * ```
	 * @param {String} `pattern` String with brace pattern to process.
	 * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.
	 * @return {Array}
	 * @api public
	 */

	micromatch.braces = (pattern, options) => {
	  if (typeof pattern !== 'string') throw new TypeError('Expected a string');
	  if ((options && options.nobrace === true) || !/\{.*\}/.test(pattern)) {
	    return [pattern];
	  }
	  return braces(pattern, options);
	};

	/**
	 * Expand braces
	 */

	micromatch.braceExpand = (pattern, options) => {
	  if (typeof pattern !== 'string') throw new TypeError('Expected a string');
	  return micromatch.braces(pattern, { ...options, expand: true });
	};

	/**
	 * Expose micromatch
	 */

	micromatch_1 = micromatch;
	return micromatch_1;
}

var hasRequiredPattern;

function requirePattern () {
	if (hasRequiredPattern) return pattern;
	hasRequiredPattern = 1;
	Object.defineProperty(pattern, "__esModule", { value: true });
	pattern.matchAny = pattern.convertPatternsToRe = pattern.makeRe = pattern.getPatternParts = pattern.expandBraceExpansion = pattern.expandPatternsWithBraceExpansion = pattern.isAffectDepthOfReadingPattern = pattern.endsWithSlashGlobStar = pattern.hasGlobStar = pattern.getBaseDirectory = pattern.isPatternRelatedToParentDirectory = pattern.getPatternsOutsideCurrentDirectory = pattern.getPatternsInsideCurrentDirectory = pattern.getPositivePatterns = pattern.getNegativePatterns = pattern.isPositivePattern = pattern.isNegativePattern = pattern.convertToNegativePattern = pattern.convertToPositivePattern = pattern.isDynamicPattern = pattern.isStaticPattern = void 0;
	const path = require$$3;
	const globParent = requireGlobParent$1();
	const micromatch = requireMicromatch();
	const GLOBSTAR = '**';
	const ESCAPE_SYMBOL = '\\';
	const COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
	const REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
	const REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
	const GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
	const BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
	function isStaticPattern(pattern, options = {}) {
	    return !isDynamicPattern(pattern, options);
	}
	pattern.isStaticPattern = isStaticPattern;
	function isDynamicPattern(pattern, options = {}) {
	    /**
	     * A special case with an empty string is necessary for matching patterns that start with a forward slash.
	     * An empty string cannot be a dynamic pattern.
	     * For example, the pattern `/lib/*` will be spread into parts: '', 'lib', '*'.
	     */
	    if (pattern === '') {
	        return false;
	    }
	    /**
	     * When the `caseSensitiveMatch` option is disabled, all patterns must be marked as dynamic, because we cannot check
	     * filepath directly (without read directory).
	     */
	    if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
	        return true;
	    }
	    if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
	        return true;
	    }
	    if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
	        return true;
	    }
	    if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {
	        return true;
	    }
	    return false;
	}
	pattern.isDynamicPattern = isDynamicPattern;
	function hasBraceExpansion(pattern) {
	    const openingBraceIndex = pattern.indexOf('{');
	    if (openingBraceIndex === -1) {
	        return false;
	    }
	    const closingBraceIndex = pattern.indexOf('}', openingBraceIndex + 1);
	    if (closingBraceIndex === -1) {
	        return false;
	    }
	    const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);
	    return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
	}
	function convertToPositivePattern(pattern) {
	    return isNegativePattern(pattern) ? pattern.slice(1) : pattern;
	}
	pattern.convertToPositivePattern = convertToPositivePattern;
	function convertToNegativePattern(pattern) {
	    return '!' + pattern;
	}
	pattern.convertToNegativePattern = convertToNegativePattern;
	function isNegativePattern(pattern) {
	    return pattern.startsWith('!') && pattern[1] !== '(';
	}
	pattern.isNegativePattern = isNegativePattern;
	function isPositivePattern(pattern) {
	    return !isNegativePattern(pattern);
	}
	pattern.isPositivePattern = isPositivePattern;
	function getNegativePatterns(patterns) {
	    return patterns.filter(isNegativePattern);
	}
	pattern.getNegativePatterns = getNegativePatterns;
	function getPositivePatterns(patterns) {
	    return patterns.filter(isPositivePattern);
	}
	pattern.getPositivePatterns = getPositivePatterns;
	/**
	 * Returns patterns that can be applied inside the current directory.
	 *
	 * @example
	 * // ['./*', '*', 'a/*']
	 * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])
	 */
	function getPatternsInsideCurrentDirectory(patterns) {
	    return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));
	}
	pattern.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
	/**
	 * Returns patterns to be expanded relative to (outside) the current directory.
	 *
	 * @example
	 * // ['../*', './../*']
	 * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])
	 */
	function getPatternsOutsideCurrentDirectory(patterns) {
	    return patterns.filter(isPatternRelatedToParentDirectory);
	}
	pattern.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
	function isPatternRelatedToParentDirectory(pattern) {
	    return pattern.startsWith('..') || pattern.startsWith('./..');
	}
	pattern.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
	function getBaseDirectory(pattern) {
	    return globParent(pattern, { flipBackslashes: false });
	}
	pattern.getBaseDirectory = getBaseDirectory;
	function hasGlobStar(pattern) {
	    return pattern.includes(GLOBSTAR);
	}
	pattern.hasGlobStar = hasGlobStar;
	function endsWithSlashGlobStar(pattern) {
	    return pattern.endsWith('/' + GLOBSTAR);
	}
	pattern.endsWithSlashGlobStar = endsWithSlashGlobStar;
	function isAffectDepthOfReadingPattern(pattern) {
	    const basename = path.basename(pattern);
	    return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
	}
	pattern.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
	function expandPatternsWithBraceExpansion(patterns) {
	    return patterns.reduce((collection, pattern) => {
	        return collection.concat(expandBraceExpansion(pattern));
	    }, []);
	}
	pattern.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
	function expandBraceExpansion(pattern) {
	    return micromatch.braces(pattern, {
	        expand: true,
	        nodupes: true
	    });
	}
	pattern.expandBraceExpansion = expandBraceExpansion;
	function getPatternParts(pattern, options) {
	    let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));
	    /**
	     * The scan method returns an empty array in some cases.
	     * See micromatch/picomatch#58 for more details.
	     */
	    if (parts.length === 0) {
	        parts = [pattern];
	    }
	    /**
	     * The scan method does not return an empty part for the pattern with a forward slash.
	     * This is another part of micromatch/picomatch#58.
	     */
	    if (parts[0].startsWith('/')) {
	        parts[0] = parts[0].slice(1);
	        parts.unshift('');
	    }
	    return parts;
	}
	pattern.getPatternParts = getPatternParts;
	function makeRe(pattern, options) {
	    return micromatch.makeRe(pattern, options);
	}
	pattern.makeRe = makeRe;
	function convertPatternsToRe(patterns, options) {
	    return patterns.map((pattern) => makeRe(pattern, options));
	}
	pattern.convertPatternsToRe = convertPatternsToRe;
	function matchAny(entry, patternsRe) {
	    return patternsRe.some((patternRe) => patternRe.test(entry));
	}
	pattern.matchAny = matchAny;
	return pattern;
}

var stream$3 = {};

var merge2_1;
var hasRequiredMerge2;

function requireMerge2 () {
	if (hasRequiredMerge2) return merge2_1;
	hasRequiredMerge2 = 1;
	/*
	 * merge2
	 * https://github.com/teambition/merge2
	 *
	 * Copyright (c) 2014-2020 Teambition
	 * Licensed under the MIT license.
	 */
	const Stream = require$$3;
	const PassThrough = Stream.PassThrough;
	const slice = Array.prototype.slice;

	merge2_1 = merge2;

	function merge2 () {
	  const streamsQueue = [];
	  const args = slice.call(arguments);
	  let merging = false;
	  let options = args[args.length - 1];

	  if (options && !Array.isArray(options) && options.pipe == null) {
	    args.pop();
	  } else {
	    options = {};
	  }

	  const doEnd = options.end !== false;
	  const doPipeError = options.pipeError === true;
	  if (options.objectMode == null) {
	    options.objectMode = true;
	  }
	  if (options.highWaterMark == null) {
	    options.highWaterMark = 64 * 1024;
	  }
	  const mergedStream = PassThrough(options);

	  function addStream () {
	    for (let i = 0, len = arguments.length; i < len; i++) {
	      streamsQueue.push(pauseStreams(arguments[i], options));
	    }
	    mergeStream();
	    return this
	  }

	  function mergeStream () {
	    if (merging) {
	      return
	    }
	    merging = true;

	    let streams = streamsQueue.shift();
	    if (!streams) {
	      process.nextTick(endStream);
	      return
	    }
	    if (!Array.isArray(streams)) {
	      streams = [streams];
	    }

	    let pipesCount = streams.length + 1;

	    function next () {
	      if (--pipesCount > 0) {
	        return
	      }
	      merging = false;
	      mergeStream();
	    }

	    function pipe (stream) {
	      function onend () {
	        stream.removeListener('merge2UnpipeEnd', onend);
	        stream.removeListener('end', onend);
	        if (doPipeError) {
	          stream.removeListener('error', onerror);
	        }
	        next();
	      }
	      function onerror (err) {
	        mergedStream.emit('error', err);
	      }
	      // skip ended stream
	      if (stream._readableState.endEmitted) {
	        return next()
	      }

	      stream.on('merge2UnpipeEnd', onend);
	      stream.on('end', onend);

	      if (doPipeError) {
	        stream.on('error', onerror);
	      }

	      stream.pipe(mergedStream, { end: false });
	      // compatible for old stream
	      stream.resume();
	    }

	    for (let i = 0; i < streams.length; i++) {
	      pipe(streams[i]);
	    }

	    next();
	  }

	  function endStream () {
	    merging = false;
	    // emit 'queueDrain' when all streams merged.
	    mergedStream.emit('queueDrain');
	    if (doEnd) {
	      mergedStream.end();
	    }
	  }

	  mergedStream.setMaxListeners(0);
	  mergedStream.add = addStream;
	  mergedStream.on('unpipe', function (stream) {
	    stream.emit('merge2UnpipeEnd');
	  });

	  if (args.length) {
	    addStream.apply(null, args);
	  }
	  return mergedStream
	}

	// check and pause streams for pipe.
	function pauseStreams (streams, options) {
	  if (!Array.isArray(streams)) {
	    // Backwards-compat with old-style streams
	    if (!streams._readableState && streams.pipe) {
	      streams = streams.pipe(PassThrough(options));
	    }
	    if (!streams._readableState || !streams.pause || !streams.pipe) {
	      throw new Error('Only readable stream can be merged.')
	    }
	    streams.pause();
	  } else {
	    for (let i = 0, len = streams.length; i < len; i++) {
	      streams[i] = pauseStreams(streams[i], options);
	    }
	  }
	  return streams
	}
	return merge2_1;
}

var hasRequiredStream$3;

function requireStream$3 () {
	if (hasRequiredStream$3) return stream$3;
	hasRequiredStream$3 = 1;
	Object.defineProperty(stream$3, "__esModule", { value: true });
	stream$3.merge = void 0;
	const merge2 = requireMerge2();
	function merge(streams) {
	    const mergedStream = merge2(streams);
	    streams.forEach((stream) => {
	        stream.once('error', (error) => mergedStream.emit('error', error));
	    });
	    mergedStream.once('close', () => propagateCloseEventToSources(streams));
	    mergedStream.once('end', () => propagateCloseEventToSources(streams));
	    return mergedStream;
	}
	stream$3.merge = merge;
	function propagateCloseEventToSources(streams) {
	    streams.forEach((stream) => stream.emit('close'));
	}
	return stream$3;
}

var string = {};

var hasRequiredString;

function requireString () {
	if (hasRequiredString) return string;
	hasRequiredString = 1;
	Object.defineProperty(string, "__esModule", { value: true });
	string.isEmpty = string.isString = void 0;
	function isString(input) {
	    return typeof input === 'string';
	}
	string.isString = isString;
	function isEmpty(input) {
	    return input === '';
	}
	string.isEmpty = isEmpty;
	return string;
}

var hasRequiredUtils$1;

function requireUtils$1 () {
	if (hasRequiredUtils$1) return utils$3;
	hasRequiredUtils$1 = 1;
	Object.defineProperty(utils$3, "__esModule", { value: true });
	utils$3.string = utils$3.stream = utils$3.pattern = utils$3.path = utils$3.fs = utils$3.errno = utils$3.array = void 0;
	const array = requireArray();
	utils$3.array = array;
	const errno = requireErrno();
	utils$3.errno = errno;
	const fs = requireFs$3();
	utils$3.fs = fs;
	const path = requirePath();
	utils$3.path = path;
	const pattern = requirePattern();
	utils$3.pattern = pattern;
	const stream = requireStream$3();
	utils$3.stream = stream;
	const string = requireString();
	utils$3.string = string;
	return utils$3;
}

var hasRequiredTasks;

function requireTasks () {
	if (hasRequiredTasks) return tasks;
	hasRequiredTasks = 1;
	Object.defineProperty(tasks, "__esModule", { value: true });
	tasks.convertPatternGroupToTask = tasks.convertPatternGroupsToTasks = tasks.groupPatternsByBaseDirectory = tasks.getNegativePatternsAsPositive = tasks.getPositivePatterns = tasks.convertPatternsToTasks = tasks.generate = void 0;
	const utils = requireUtils$1();
	function generate(patterns, settings) {
	    const positivePatterns = getPositivePatterns(patterns);
	    const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);
	    const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));
	    const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));
	    const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, /* dynamic */ false);
	    const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, /* dynamic */ true);
	    return staticTasks.concat(dynamicTasks);
	}
	tasks.generate = generate;
	/**
	 * Returns tasks grouped by basic pattern directories.
	 *
	 * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.
	 * This is necessary because directory traversal starts at the base directory and goes deeper.
	 */
	function convertPatternsToTasks(positive, negative, dynamic) {
	    const tasks = [];
	    const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);
	    const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);
	    const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
	    const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
	    tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
	    /*
	     * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory
	     * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.
	     */
	    if ('.' in insideCurrentDirectoryGroup) {
	        tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));
	    }
	    else {
	        tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
	    }
	    return tasks;
	}
	tasks.convertPatternsToTasks = convertPatternsToTasks;
	function getPositivePatterns(patterns) {
	    return utils.pattern.getPositivePatterns(patterns);
	}
	tasks.getPositivePatterns = getPositivePatterns;
	function getNegativePatternsAsPositive(patterns, ignore) {
	    const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);
	    const positive = negative.map(utils.pattern.convertToPositivePattern);
	    return positive;
	}
	tasks.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
	function groupPatternsByBaseDirectory(patterns) {
	    const group = {};
	    return patterns.reduce((collection, pattern) => {
	        const base = utils.pattern.getBaseDirectory(pattern);
	        if (base in collection) {
	            collection[base].push(pattern);
	        }
	        else {
	            collection[base] = [pattern];
	        }
	        return collection;
	    }, group);
	}
	tasks.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
	function convertPatternGroupsToTasks(positive, negative, dynamic) {
	    return Object.keys(positive).map((base) => {
	        return convertPatternGroupToTask(base, positive[base], negative, dynamic);
	    });
	}
	tasks.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
	function convertPatternGroupToTask(base, positive, negative, dynamic) {
	    return {
	        dynamic,
	        positive,
	        negative,
	        base,
	        patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
	    };
	}
	tasks.convertPatternGroupToTask = convertPatternGroupToTask;
	return tasks;
}

var patterns = {};

var hasRequiredPatterns;

function requirePatterns () {
	if (hasRequiredPatterns) return patterns;
	hasRequiredPatterns = 1;
	Object.defineProperty(patterns, "__esModule", { value: true });
	patterns.removeDuplicateSlashes = patterns.transform = void 0;
	/**
	 * Matches a sequence of two or more consecutive slashes, excluding the first two slashes at the beginning of the string.
	 * The latter is due to the presence of the device path at the beginning of the UNC path.
	 * @todo rewrite to negative lookbehind with the next major release.
	 */
	const DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
	function transform(patterns) {
	    return patterns.map((pattern) => removeDuplicateSlashes(pattern));
	}
	patterns.transform = transform;
	/**
	 * This package only works with forward slashes as a path separator.
	 * Because of this, we cannot use the standard `path.normalize` method, because on Windows platform it will use of backslashes.
	 */
	function removeDuplicateSlashes(pattern) {
	    return pattern.replace(DOUBLE_SLASH_RE, '/');
	}
	patterns.removeDuplicateSlashes = removeDuplicateSlashes;
	return patterns;
}

var async$5 = {};

var async$4 = {};

var out$3 = {};

var async$3 = {};

var async$2 = {};

var out$2 = {};

var async$1 = {};

var out$1 = {};

var async = {};

var hasRequiredAsync$5;

function requireAsync$5 () {
	if (hasRequiredAsync$5) return async;
	hasRequiredAsync$5 = 1;
	Object.defineProperty(async, "__esModule", { value: true });
	async.read = void 0;
	function read(path, settings, callback) {
	    settings.fs.lstat(path, (lstatError, lstat) => {
	        if (lstatError !== null) {
	            callFailureCallback(callback, lstatError);
	            return;
	        }
	        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
	            callSuccessCallback(callback, lstat);
	            return;
	        }
	        settings.fs.stat(path, (statError, stat) => {
	            if (statError !== null) {
	                if (settings.throwErrorOnBrokenSymbolicLink) {
	                    callFailureCallback(callback, statError);
	                    return;
	                }
	                callSuccessCallback(callback, lstat);
	                return;
	            }
	            if (settings.markSymbolicLink) {
	                stat.isSymbolicLink = () => true;
	            }
	            callSuccessCallback(callback, stat);
	        });
	    });
	}
	async.read = read;
	function callFailureCallback(callback, error) {
	    callback(error);
	}
	function callSuccessCallback(callback, result) {
	    callback(null, result);
	}
	return async;
}

var sync$5 = {};

var hasRequiredSync$5;

function requireSync$5 () {
	if (hasRequiredSync$5) return sync$5;
	hasRequiredSync$5 = 1;
	Object.defineProperty(sync$5, "__esModule", { value: true });
	sync$5.read = void 0;
	function read(path, settings) {
	    const lstat = settings.fs.lstatSync(path);
	    if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
	        return lstat;
	    }
	    try {
	        const stat = settings.fs.statSync(path);
	        if (settings.markSymbolicLink) {
	            stat.isSymbolicLink = () => true;
	        }
	        return stat;
	    }
	    catch (error) {
	        if (!settings.throwErrorOnBrokenSymbolicLink) {
	            return lstat;
	        }
	        throw error;
	    }
	}
	sync$5.read = read;
	return sync$5;
}

var settings$3 = {};

var fs$2 = {};

var hasRequiredFs$2;

function requireFs$2 () {
	if (hasRequiredFs$2) return fs$2;
	hasRequiredFs$2 = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
		const fs = require$$3;
		exports.FILE_SYSTEM_ADAPTER = {
		    lstat: fs.lstat,
		    stat: fs.stat,
		    lstatSync: fs.lstatSync,
		    statSync: fs.statSync
		};
		function createFileSystemAdapter(fsMethods) {
		    if (fsMethods === undefined) {
		        return exports.FILE_SYSTEM_ADAPTER;
		    }
		    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
		}
		exports.createFileSystemAdapter = createFileSystemAdapter;
} (fs$2));
	return fs$2;
}

var hasRequiredSettings$3;

function requireSettings$3 () {
	if (hasRequiredSettings$3) return settings$3;
	hasRequiredSettings$3 = 1;
	Object.defineProperty(settings$3, "__esModule", { value: true });
	const fs = requireFs$2();
	class Settings {
	    constructor(_options = {}) {
	        this._options = _options;
	        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
	        this.fs = fs.createFileSystemAdapter(this._options.fs);
	        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
	        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
	    }
	    _getValue(option, value) {
	        return option !== null && option !== void 0 ? option : value;
	    }
	}
	settings$3.default = Settings;
	return settings$3;
}

var hasRequiredOut$3;

function requireOut$3 () {
	if (hasRequiredOut$3) return out$1;
	hasRequiredOut$3 = 1;
	Object.defineProperty(out$1, "__esModule", { value: true });
	out$1.statSync = out$1.stat = out$1.Settings = void 0;
	const async = requireAsync$5();
	const sync = requireSync$5();
	const settings_1 = requireSettings$3();
	out$1.Settings = settings_1.default;
	function stat(path, optionsOrSettingsOrCallback, callback) {
	    if (typeof optionsOrSettingsOrCallback === 'function') {
	        async.read(path, getSettings(), optionsOrSettingsOrCallback);
	        return;
	    }
	    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);
	}
	out$1.stat = stat;
	function statSync(path, optionsOrSettings) {
	    const settings = getSettings(optionsOrSettings);
	    return sync.read(path, settings);
	}
	out$1.statSync = statSync;
	function getSettings(settingsOrOptions = {}) {
	    if (settingsOrOptions instanceof settings_1.default) {
	        return settingsOrOptions;
	    }
	    return new settings_1.default(settingsOrOptions);
	}
	return out$1;
}

/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

var queueMicrotask_1;
var hasRequiredQueueMicrotask;

function requireQueueMicrotask () {
	if (hasRequiredQueueMicrotask) return queueMicrotask_1;
	hasRequiredQueueMicrotask = 1;
	let promise;

	queueMicrotask_1 = typeof queueMicrotask === 'function'
	  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : commonjsGlobal)
	  // reuse resolved promise, and allocate it lazily
	  : cb => (promise || (promise = Promise.resolve()))
	    .then(cb)
	    .catch(err => setTimeout(() => { throw err }, 0));
	return queueMicrotask_1;
}

/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

var runParallel_1;
var hasRequiredRunParallel;

function requireRunParallel () {
	if (hasRequiredRunParallel) return runParallel_1;
	hasRequiredRunParallel = 1;
	runParallel_1 = runParallel;

	const queueMicrotask = requireQueueMicrotask();

	function runParallel (tasks, cb) {
	  let results, pending, keys;
	  let isSync = true;

	  if (Array.isArray(tasks)) {
	    results = [];
	    pending = tasks.length;
	  } else {
	    keys = Object.keys(tasks);
	    results = {};
	    pending = keys.length;
	  }

	  function done (err) {
	    function end () {
	      if (cb) cb(err, results);
	      cb = null;
	    }
	    if (isSync) queueMicrotask(end);
	    else end();
	  }

	  function each (i, err, result) {
	    results[i] = result;
	    if (--pending === 0 || err) {
	      done(err);
	    }
	  }

	  if (!pending) {
	    // empty
	    done(null);
	  } else if (keys) {
	    // object
	    keys.forEach(function (key) {
	      tasks[key](function (err, result) { each(key, err, result); });
	    });
	  } else {
	    // array
	    tasks.forEach(function (task, i) {
	      task(function (err, result) { each(i, err, result); });
	    });
	  }

	  isSync = false;
	}
	return runParallel_1;
}

var constants = {};

var hasRequiredConstants;

function requireConstants () {
	if (hasRequiredConstants) return constants;
	hasRequiredConstants = 1;
	Object.defineProperty(constants, "__esModule", { value: true });
	constants.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
	const NODE_PROCESS_VERSION_PARTS = process.versions.node.split('.');
	if (NODE_PROCESS_VERSION_PARTS[0] === undefined || NODE_PROCESS_VERSION_PARTS[1] === undefined) {
	    throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
	}
	const MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
	const MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
	const SUPPORTED_MAJOR_VERSION = 10;
	const SUPPORTED_MINOR_VERSION = 10;
	const IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
	const IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
	/**
	 * IS `true` for Node.js 10.10 and greater.
	 */
	constants.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
	return constants;
}

var utils = {};

var fs$1 = {};

var hasRequiredFs$1;

function requireFs$1 () {
	if (hasRequiredFs$1) return fs$1;
	hasRequiredFs$1 = 1;
	Object.defineProperty(fs$1, "__esModule", { value: true });
	fs$1.createDirentFromStats = void 0;
	class DirentFromStats {
	    constructor(name, stats) {
	        this.name = name;
	        this.isBlockDevice = stats.isBlockDevice.bind(stats);
	        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
	        this.isDirectory = stats.isDirectory.bind(stats);
	        this.isFIFO = stats.isFIFO.bind(stats);
	        this.isFile = stats.isFile.bind(stats);
	        this.isSocket = stats.isSocket.bind(stats);
	        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
	    }
	}
	function createDirentFromStats(name, stats) {
	    return new DirentFromStats(name, stats);
	}
	fs$1.createDirentFromStats = createDirentFromStats;
	return fs$1;
}

var hasRequiredUtils;

function requireUtils () {
	if (hasRequiredUtils) return utils;
	hasRequiredUtils = 1;
	Object.defineProperty(utils, "__esModule", { value: true });
	utils.fs = void 0;
	const fs = requireFs$1();
	utils.fs = fs;
	return utils;
}

var common$1 = {};

var hasRequiredCommon$1;

function requireCommon$1 () {
	if (hasRequiredCommon$1) return common$1;
	hasRequiredCommon$1 = 1;
	Object.defineProperty(common$1, "__esModule", { value: true });
	common$1.joinPathSegments = void 0;
	function joinPathSegments(a, b, separator) {
	    /**
	     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).
	     */
	    if (a.endsWith(separator)) {
	        return a + b;
	    }
	    return a + separator + b;
	}
	common$1.joinPathSegments = joinPathSegments;
	return common$1;
}

var hasRequiredAsync$4;

function requireAsync$4 () {
	if (hasRequiredAsync$4) return async$1;
	hasRequiredAsync$4 = 1;
	Object.defineProperty(async$1, "__esModule", { value: true });
	async$1.readdir = async$1.readdirWithFileTypes = async$1.read = void 0;
	const fsStat = requireOut$3();
	const rpl = requireRunParallel();
	const constants_1 = requireConstants();
	const utils = requireUtils();
	const common = requireCommon$1();
	function read(directory, settings, callback) {
	    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
	        readdirWithFileTypes(directory, settings, callback);
	        return;
	    }
	    readdir(directory, settings, callback);
	}
	async$1.read = read;
	function readdirWithFileTypes(directory, settings, callback) {
	    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
	        if (readdirError !== null) {
	            callFailureCallback(callback, readdirError);
	            return;
	        }
	        const entries = dirents.map((dirent) => ({
	            dirent,
	            name: dirent.name,
	            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
	        }));
	        if (!settings.followSymbolicLinks) {
	            callSuccessCallback(callback, entries);
	            return;
	        }
	        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
	        rpl(tasks, (rplError, rplEntries) => {
	            if (rplError !== null) {
	                callFailureCallback(callback, rplError);
	                return;
	            }
	            callSuccessCallback(callback, rplEntries);
	        });
	    });
	}
	async$1.readdirWithFileTypes = readdirWithFileTypes;
	function makeRplTaskEntry(entry, settings) {
	    return (done) => {
	        if (!entry.dirent.isSymbolicLink()) {
	            done(null, entry);
	            return;
	        }
	        settings.fs.stat(entry.path, (statError, stats) => {
	            if (statError !== null) {
	                if (settings.throwErrorOnBrokenSymbolicLink) {
	                    done(statError);
	                    return;
	                }
	                done(null, entry);
	                return;
	            }
	            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
	            done(null, entry);
	        });
	    };
	}
	function readdir(directory, settings, callback) {
	    settings.fs.readdir(directory, (readdirError, names) => {
	        if (readdirError !== null) {
	            callFailureCallback(callback, readdirError);
	            return;
	        }
	        const tasks = names.map((name) => {
	            const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
	            return (done) => {
	                fsStat.stat(path, settings.fsStatSettings, (error, stats) => {
	                    if (error !== null) {
	                        done(error);
	                        return;
	                    }
	                    const entry = {
	                        name,
	                        path,
	                        dirent: utils.fs.createDirentFromStats(name, stats)
	                    };
	                    if (settings.stats) {
	                        entry.stats = stats;
	                    }
	                    done(null, entry);
	                });
	            };
	        });
	        rpl(tasks, (rplError, entries) => {
	            if (rplError !== null) {
	                callFailureCallback(callback, rplError);
	                return;
	            }
	            callSuccessCallback(callback, entries);
	        });
	    });
	}
	async$1.readdir = readdir;
	function callFailureCallback(callback, error) {
	    callback(error);
	}
	function callSuccessCallback(callback, result) {
	    callback(null, result);
	}
	return async$1;
}

var sync$4 = {};

var hasRequiredSync$4;

function requireSync$4 () {
	if (hasRequiredSync$4) return sync$4;
	hasRequiredSync$4 = 1;
	Object.defineProperty(sync$4, "__esModule", { value: true });
	sync$4.readdir = sync$4.readdirWithFileTypes = sync$4.read = void 0;
	const fsStat = requireOut$3();
	const constants_1 = requireConstants();
	const utils = requireUtils();
	const common = requireCommon$1();
	function read(directory, settings) {
	    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
	        return readdirWithFileTypes(directory, settings);
	    }
	    return readdir(directory, settings);
	}
	sync$4.read = read;
	function readdirWithFileTypes(directory, settings) {
	    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
	    return dirents.map((dirent) => {
	        const entry = {
	            dirent,
	            name: dirent.name,
	            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
	        };
	        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
	            try {
	                const stats = settings.fs.statSync(entry.path);
	                entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
	            }
	            catch (error) {
	                if (settings.throwErrorOnBrokenSymbolicLink) {
	                    throw error;
	                }
	            }
	        }
	        return entry;
	    });
	}
	sync$4.readdirWithFileTypes = readdirWithFileTypes;
	function readdir(directory, settings) {
	    const names = settings.fs.readdirSync(directory);
	    return names.map((name) => {
	        const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
	        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
	        const entry = {
	            name,
	            path: entryPath,
	            dirent: utils.fs.createDirentFromStats(name, stats)
	        };
	        if (settings.stats) {
	            entry.stats = stats;
	        }
	        return entry;
	    });
	}
	sync$4.readdir = readdir;
	return sync$4;
}

var settings$2 = {};

var fs = {};

var hasRequiredFs;

function requireFs () {
	if (hasRequiredFs) return fs;
	hasRequiredFs = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
		const fs = require$$3;
		exports.FILE_SYSTEM_ADAPTER = {
		    lstat: fs.lstat,
		    stat: fs.stat,
		    lstatSync: fs.lstatSync,
		    statSync: fs.statSync,
		    readdir: fs.readdir,
		    readdirSync: fs.readdirSync
		};
		function createFileSystemAdapter(fsMethods) {
		    if (fsMethods === undefined) {
		        return exports.FILE_SYSTEM_ADAPTER;
		    }
		    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
		}
		exports.createFileSystemAdapter = createFileSystemAdapter;
} (fs));
	return fs;
}

var hasRequiredSettings$2;

function requireSettings$2 () {
	if (hasRequiredSettings$2) return settings$2;
	hasRequiredSettings$2 = 1;
	Object.defineProperty(settings$2, "__esModule", { value: true });
	const path = require$$3;
	const fsStat = requireOut$3();
	const fs = requireFs();
	class Settings {
	    constructor(_options = {}) {
	        this._options = _options;
	        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
	        this.fs = fs.createFileSystemAdapter(this._options.fs);
	        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);
	        this.stats = this._getValue(this._options.stats, false);
	        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
	        this.fsStatSettings = new fsStat.Settings({
	            followSymbolicLink: this.followSymbolicLinks,
	            fs: this.fs,
	            throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
	        });
	    }
	    _getValue(option, value) {
	        return option !== null && option !== void 0 ? option : value;
	    }
	}
	settings$2.default = Settings;
	return settings$2;
}

var hasRequiredOut$2;

function requireOut$2 () {
	if (hasRequiredOut$2) return out$2;
	hasRequiredOut$2 = 1;
	Object.defineProperty(out$2, "__esModule", { value: true });
	out$2.Settings = out$2.scandirSync = out$2.scandir = void 0;
	const async = requireAsync$4();
	const sync = requireSync$4();
	const settings_1 = requireSettings$2();
	out$2.Settings = settings_1.default;
	function scandir(path, optionsOrSettingsOrCallback, callback) {
	    if (typeof optionsOrSettingsOrCallback === 'function') {
	        async.read(path, getSettings(), optionsOrSettingsOrCallback);
	        return;
	    }
	    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);
	}
	out$2.scandir = scandir;
	function scandirSync(path, optionsOrSettings) {
	    const settings = getSettings(optionsOrSettings);
	    return sync.read(path, settings);
	}
	out$2.scandirSync = scandirSync;
	function getSettings(settingsOrOptions = {}) {
	    if (settingsOrOptions instanceof settings_1.default) {
	        return settingsOrOptions;
	    }
	    return new settings_1.default(settingsOrOptions);
	}
	return out$2;
}

var queueExports = {};
var queue = {
  get exports(){ return queueExports; },
  set exports(v){ queueExports = v; },
};

var reusify_1;
var hasRequiredReusify;

function requireReusify () {
	if (hasRequiredReusify) return reusify_1;
	hasRequiredReusify = 1;

	function reusify (Constructor) {
	  var head = new Constructor();
	  var tail = head;

	  function get () {
	    var current = head;

	    if (current.next) {
	      head = current.next;
	    } else {
	      head = new Constructor();
	      tail = head;
	    }

	    current.next = null;

	    return current
	  }

	  function release (obj) {
	    tail.next = obj;
	    tail = obj;
	  }

	  return {
	    get: get,
	    release: release
	  }
	}

	reusify_1 = reusify;
	return reusify_1;
}

var hasRequiredQueue;

function requireQueue () {
	if (hasRequiredQueue) return queueExports;
	hasRequiredQueue = 1;

	/* eslint-disable no-var */

	var reusify = requireReusify();

	function fastqueue (context, worker, concurrency) {
	  if (typeof context === 'function') {
	    concurrency = worker;
	    worker = context;
	    context = null;
	  }

	  if (concurrency < 1) {
	    throw new Error('fastqueue concurrency must be greater than 1')
	  }

	  var cache = reusify(Task);
	  var queueHead = null;
	  var queueTail = null;
	  var _running = 0;
	  var errorHandler = null;

	  var self = {
	    push: push,
	    drain: noop,
	    saturated: noop,
	    pause: pause,
	    paused: false,
	    concurrency: concurrency,
	    running: running,
	    resume: resume,
	    idle: idle,
	    length: length,
	    getQueue: getQueue,
	    unshift: unshift,
	    empty: noop,
	    kill: kill,
	    killAndDrain: killAndDrain,
	    error: error
	  };

	  return self

	  function running () {
	    return _running
	  }

	  function pause () {
	    self.paused = true;
	  }

	  function length () {
	    var current = queueHead;
	    var counter = 0;

	    while (current) {
	      current = current.next;
	      counter++;
	    }

	    return counter
	  }

	  function getQueue () {
	    var current = queueHead;
	    var tasks = [];

	    while (current) {
	      tasks.push(current.value);
	      current = current.next;
	    }

	    return tasks
	  }

	  function resume () {
	    if (!self.paused) return
	    self.paused = false;
	    for (var i = 0; i < self.concurrency; i++) {
	      _running++;
	      release();
	    }
	  }

	  function idle () {
	    return _running === 0 && self.length() === 0
	  }

	  function push (value, done) {
	    var current = cache.get();

	    current.context = context;
	    current.release = release;
	    current.value = value;
	    current.callback = done || noop;
	    current.errorHandler = errorHandler;

	    if (_running === self.concurrency || self.paused) {
	      if (queueTail) {
	        queueTail.next = current;
	        queueTail = current;
	      } else {
	        queueHead = current;
	        queueTail = current;
	        self.saturated();
	      }
	    } else {
	      _running++;
	      worker.call(context, current.value, current.worked);
	    }
	  }

	  function unshift (value, done) {
	    var current = cache.get();

	    current.context = context;
	    current.release = release;
	    current.value = value;
	    current.callback = done || noop;

	    if (_running === self.concurrency || self.paused) {
	      if (queueHead) {
	        current.next = queueHead;
	        queueHead = current;
	      } else {
	        queueHead = current;
	        queueTail = current;
	        self.saturated();
	      }
	    } else {
	      _running++;
	      worker.call(context, current.value, current.worked);
	    }
	  }

	  function release (holder) {
	    if (holder) {
	      cache.release(holder);
	    }
	    var next = queueHead;
	    if (next) {
	      if (!self.paused) {
	        if (queueTail === queueHead) {
	          queueTail = null;
	        }
	        queueHead = next.next;
	        next.next = null;
	        worker.call(context, next.value, next.worked);
	        if (queueTail === null) {
	          self.empty();
	        }
	      } else {
	        _running--;
	      }
	    } else if (--_running === 0) {
	      self.drain();
	    }
	  }

	  function kill () {
	    queueHead = null;
	    queueTail = null;
	    self.drain = noop;
	  }

	  function killAndDrain () {
	    queueHead = null;
	    queueTail = null;
	    self.drain();
	    self.drain = noop;
	  }

	  function error (handler) {
	    errorHandler = handler;
	  }
	}

	function noop () {}

	function Task () {
	  this.value = null;
	  this.callback = noop;
	  this.next = null;
	  this.release = noop;
	  this.context = null;
	  this.errorHandler = null;

	  var self = this;

	  this.worked = function worked (err, result) {
	    var callback = self.callback;
	    var errorHandler = self.errorHandler;
	    var val = self.value;
	    self.value = null;
	    self.callback = noop;
	    if (self.errorHandler) {
	      errorHandler(err, val);
	    }
	    callback.call(self.context, err, result);
	    self.release(self);
	  };
	}

	function queueAsPromised (context, worker, concurrency) {
	  if (typeof context === 'function') {
	    concurrency = worker;
	    worker = context;
	    context = null;
	  }

	  function asyncWrapper (arg, cb) {
	    worker.call(this, arg)
	      .then(function (res) {
	        cb(null, res);
	      }, cb);
	  }

	  var queue = fastqueue(context, asyncWrapper, concurrency);

	  var pushCb = queue.push;
	  var unshiftCb = queue.unshift;

	  queue.push = push;
	  queue.unshift = unshift;
	  queue.drained = drained;

	  return queue

	  function push (value) {
	    var p = new Promise(function (resolve, reject) {
	      pushCb(value, function (err, result) {
	        if (err) {
	          reject(err);
	          return
	        }
	        resolve(result);
	      });
	    });

	    // Let's fork the promise chain to
	    // make the error bubble up to the user but
	    // not lead to a unhandledRejection
	    p.catch(noop);

	    return p
	  }

	  function unshift (value) {
	    var p = new Promise(function (resolve, reject) {
	      unshiftCb(value, function (err, result) {
	        if (err) {
	          reject(err);
	          return
	        }
	        resolve(result);
	      });
	    });

	    // Let's fork the promise chain to
	    // make the error bubble up to the user but
	    // not lead to a unhandledRejection
	    p.catch(noop);

	    return p
	  }

	  function drained () {
	    if (queue.idle()) {
	      return new Promise(function (resolve) {
	        resolve();
	      })
	    }

	    var previousDrain = queue.drain;

	    var p = new Promise(function (resolve) {
	      queue.drain = function () {
	        previousDrain();
	        resolve();
	      };
	    });

	    return p
	  }
	}

	queue.exports = fastqueue;
	queueExports.promise = queueAsPromised;
	return queueExports;
}

var common = {};

var hasRequiredCommon;

function requireCommon () {
	if (hasRequiredCommon) return common;
	hasRequiredCommon = 1;
	Object.defineProperty(common, "__esModule", { value: true });
	common.joinPathSegments = common.replacePathSegmentSeparator = common.isAppliedFilter = common.isFatalError = void 0;
	function isFatalError(settings, error) {
	    if (settings.errorFilter === null) {
	        return true;
	    }
	    return !settings.errorFilter(error);
	}
	common.isFatalError = isFatalError;
	function isAppliedFilter(filter, value) {
	    return filter === null || filter(value);
	}
	common.isAppliedFilter = isAppliedFilter;
	function replacePathSegmentSeparator(filepath, separator) {
	    return filepath.split(/[/\\]/).join(separator);
	}
	common.replacePathSegmentSeparator = replacePathSegmentSeparator;
	function joinPathSegments(a, b, separator) {
	    if (a === '') {
	        return b;
	    }
	    /**
	     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).
	     */
	    if (a.endsWith(separator)) {
	        return a + b;
	    }
	    return a + separator + b;
	}
	common.joinPathSegments = joinPathSegments;
	return common;
}

var reader$1 = {};

var hasRequiredReader$1;

function requireReader$1 () {
	if (hasRequiredReader$1) return reader$1;
	hasRequiredReader$1 = 1;
	Object.defineProperty(reader$1, "__esModule", { value: true });
	const common = requireCommon();
	class Reader {
	    constructor(_root, _settings) {
	        this._root = _root;
	        this._settings = _settings;
	        this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
	    }
	}
	reader$1.default = Reader;
	return reader$1;
}

var hasRequiredAsync$3;

function requireAsync$3 () {
	if (hasRequiredAsync$3) return async$2;
	hasRequiredAsync$3 = 1;
	Object.defineProperty(async$2, "__esModule", { value: true });
	const events_1 = require$$3;
	const fsScandir = requireOut$2();
	const fastq = requireQueue();
	const common = requireCommon();
	const reader_1 = requireReader$1();
	class AsyncReader extends reader_1.default {
	    constructor(_root, _settings) {
	        super(_root, _settings);
	        this._settings = _settings;
	        this._scandir = fsScandir.scandir;
	        this._emitter = new events_1.EventEmitter();
	        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
	        this._isFatalError = false;
	        this._isDestroyed = false;
	        this._queue.drain = () => {
	            if (!this._isFatalError) {
	                this._emitter.emit('end');
	            }
	        };
	    }
	    read() {
	        this._isFatalError = false;
	        this._isDestroyed = false;
	        setImmediate(() => {
	            this._pushToQueue(this._root, this._settings.basePath);
	        });
	        return this._emitter;
	    }
	    get isDestroyed() {
	        return this._isDestroyed;
	    }
	    destroy() {
	        if (this._isDestroyed) {
	            throw new Error('The reader is already destroyed');
	        }
	        this._isDestroyed = true;
	        this._queue.killAndDrain();
	    }
	    onEntry(callback) {
	        this._emitter.on('entry', callback);
	    }
	    onError(callback) {
	        this._emitter.once('error', callback);
	    }
	    onEnd(callback) {
	        this._emitter.once('end', callback);
	    }
	    _pushToQueue(directory, base) {
	        const queueItem = { directory, base };
	        this._queue.push(queueItem, (error) => {
	            if (error !== null) {
	                this._handleError(error);
	            }
	        });
	    }
	    _worker(item, done) {
	        this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
	            if (error !== null) {
	                done(error, undefined);
	                return;
	            }
	            for (const entry of entries) {
	                this._handleEntry(entry, item.base);
	            }
	            done(null, undefined);
	        });
	    }
	    _handleError(error) {
	        if (this._isDestroyed || !common.isFatalError(this._settings, error)) {
	            return;
	        }
	        this._isFatalError = true;
	        this._isDestroyed = true;
	        this._emitter.emit('error', error);
	    }
	    _handleEntry(entry, base) {
	        if (this._isDestroyed || this._isFatalError) {
	            return;
	        }
	        const fullpath = entry.path;
	        if (base !== undefined) {
	            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
	        }
	        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
	            this._emitEntry(entry);
	        }
	        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
	            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
	        }
	    }
	    _emitEntry(entry) {
	        this._emitter.emit('entry', entry);
	    }
	}
	async$2.default = AsyncReader;
	return async$2;
}

var hasRequiredAsync$2;

function requireAsync$2 () {
	if (hasRequiredAsync$2) return async$3;
	hasRequiredAsync$2 = 1;
	Object.defineProperty(async$3, "__esModule", { value: true });
	const async_1 = requireAsync$3();
	class AsyncProvider {
	    constructor(_root, _settings) {
	        this._root = _root;
	        this._settings = _settings;
	        this._reader = new async_1.default(this._root, this._settings);
	        this._storage = [];
	    }
	    read(callback) {
	        this._reader.onError((error) => {
	            callFailureCallback(callback, error);
	        });
	        this._reader.onEntry((entry) => {
	            this._storage.push(entry);
	        });
	        this._reader.onEnd(() => {
	            callSuccessCallback(callback, this._storage);
	        });
	        this._reader.read();
	    }
	}
	async$3.default = AsyncProvider;
	function callFailureCallback(callback, error) {
	    callback(error);
	}
	function callSuccessCallback(callback, entries) {
	    callback(null, entries);
	}
	return async$3;
}

var stream$2 = {};

var hasRequiredStream$2;

function requireStream$2 () {
	if (hasRequiredStream$2) return stream$2;
	hasRequiredStream$2 = 1;
	Object.defineProperty(stream$2, "__esModule", { value: true });
	const stream_1 = require$$3;
	const async_1 = requireAsync$3();
	class StreamProvider {
	    constructor(_root, _settings) {
	        this._root = _root;
	        this._settings = _settings;
	        this._reader = new async_1.default(this._root, this._settings);
	        this._stream = new stream_1.Readable({
	            objectMode: true,
	            read: () => { },
	            destroy: () => {
	                if (!this._reader.isDestroyed) {
	                    this._reader.destroy();
	                }
	            }
	        });
	    }
	    read() {
	        this._reader.onError((error) => {
	            this._stream.emit('error', error);
	        });
	        this._reader.onEntry((entry) => {
	            this._stream.push(entry);
	        });
	        this._reader.onEnd(() => {
	            this._stream.push(null);
	        });
	        this._reader.read();
	        return this._stream;
	    }
	}
	stream$2.default = StreamProvider;
	return stream$2;
}

var sync$3 = {};

var sync$2 = {};

var hasRequiredSync$3;

function requireSync$3 () {
	if (hasRequiredSync$3) return sync$2;
	hasRequiredSync$3 = 1;
	Object.defineProperty(sync$2, "__esModule", { value: true });
	const fsScandir = requireOut$2();
	const common = requireCommon();
	const reader_1 = requireReader$1();
	class SyncReader extends reader_1.default {
	    constructor() {
	        super(...arguments);
	        this._scandir = fsScandir.scandirSync;
	        this._storage = [];
	        this._queue = new Set();
	    }
	    read() {
	        this._pushToQueue(this._root, this._settings.basePath);
	        this._handleQueue();
	        return this._storage;
	    }
	    _pushToQueue(directory, base) {
	        this._queue.add({ directory, base });
	    }
	    _handleQueue() {
	        for (const item of this._queue.values()) {
	            this._handleDirectory(item.directory, item.base);
	        }
	    }
	    _handleDirectory(directory, base) {
	        try {
	            const entries = this._scandir(directory, this._settings.fsScandirSettings);
	            for (const entry of entries) {
	                this._handleEntry(entry, base);
	            }
	        }
	        catch (error) {
	            this._handleError(error);
	        }
	    }
	    _handleError(error) {
	        if (!common.isFatalError(this._settings, error)) {
	            return;
	        }
	        throw error;
	    }
	    _handleEntry(entry, base) {
	        const fullpath = entry.path;
	        if (base !== undefined) {
	            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
	        }
	        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
	            this._pushToStorage(entry);
	        }
	        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
	            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
	        }
	    }
	    _pushToStorage(entry) {
	        this._storage.push(entry);
	    }
	}
	sync$2.default = SyncReader;
	return sync$2;
}

var hasRequiredSync$2;

function requireSync$2 () {
	if (hasRequiredSync$2) return sync$3;
	hasRequiredSync$2 = 1;
	Object.defineProperty(sync$3, "__esModule", { value: true });
	const sync_1 = requireSync$3();
	class SyncProvider {
	    constructor(_root, _settings) {
	        this._root = _root;
	        this._settings = _settings;
	        this._reader = new sync_1.default(this._root, this._settings);
	    }
	    read() {
	        return this._reader.read();
	    }
	}
	sync$3.default = SyncProvider;
	return sync$3;
}

var settings$1 = {};

var hasRequiredSettings$1;

function requireSettings$1 () {
	if (hasRequiredSettings$1) return settings$1;
	hasRequiredSettings$1 = 1;
	Object.defineProperty(settings$1, "__esModule", { value: true });
	const path = require$$3;
	const fsScandir = requireOut$2();
	class Settings {
	    constructor(_options = {}) {
	        this._options = _options;
	        this.basePath = this._getValue(this._options.basePath, undefined);
	        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
	        this.deepFilter = this._getValue(this._options.deepFilter, null);
	        this.entryFilter = this._getValue(this._options.entryFilter, null);
	        this.errorFilter = this._getValue(this._options.errorFilter, null);
	        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);
	        this.fsScandirSettings = new fsScandir.Settings({
	            followSymbolicLinks: this._options.followSymbolicLinks,
	            fs: this._options.fs,
	            pathSegmentSeparator: this._options.pathSegmentSeparator,
	            stats: this._options.stats,
	            throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
	        });
	    }
	    _getValue(option, value) {
	        return option !== null && option !== void 0 ? option : value;
	    }
	}
	settings$1.default = Settings;
	return settings$1;
}

var hasRequiredOut$1;

function requireOut$1 () {
	if (hasRequiredOut$1) return out$3;
	hasRequiredOut$1 = 1;
	Object.defineProperty(out$3, "__esModule", { value: true });
	out$3.Settings = out$3.walkStream = out$3.walkSync = out$3.walk = void 0;
	const async_1 = requireAsync$2();
	const stream_1 = requireStream$2();
	const sync_1 = requireSync$2();
	const settings_1 = requireSettings$1();
	out$3.Settings = settings_1.default;
	function walk(directory, optionsOrSettingsOrCallback, callback) {
	    if (typeof optionsOrSettingsOrCallback === 'function') {
	        new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
	        return;
	    }
	    new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
	}
	out$3.walk = walk;
	function walkSync(directory, optionsOrSettings) {
	    const settings = getSettings(optionsOrSettings);
	    const provider = new sync_1.default(directory, settings);
	    return provider.read();
	}
	out$3.walkSync = walkSync;
	function walkStream(directory, optionsOrSettings) {
	    const settings = getSettings(optionsOrSettings);
	    const provider = new stream_1.default(directory, settings);
	    return provider.read();
	}
	out$3.walkStream = walkStream;
	function getSettings(settingsOrOptions = {}) {
	    if (settingsOrOptions instanceof settings_1.default) {
	        return settingsOrOptions;
	    }
	    return new settings_1.default(settingsOrOptions);
	}
	return out$3;
}

var reader = {};

var hasRequiredReader;

function requireReader () {
	if (hasRequiredReader) return reader;
	hasRequiredReader = 1;
	Object.defineProperty(reader, "__esModule", { value: true });
	const path = require$$3;
	const fsStat = requireOut$3();
	const utils = requireUtils$1();
	class Reader {
	    constructor(_settings) {
	        this._settings = _settings;
	        this._fsStatSettings = new fsStat.Settings({
	            followSymbolicLink: this._settings.followSymbolicLinks,
	            fs: this._settings.fs,
	            throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
	        });
	    }
	    _getFullEntryPath(filepath) {
	        return path.resolve(this._settings.cwd, filepath);
	    }
	    _makeEntry(stats, pattern) {
	        const entry = {
	            name: pattern,
	            path: pattern,
	            dirent: utils.fs.createDirentFromStats(pattern, stats)
	        };
	        if (this._settings.stats) {
	            entry.stats = stats;
	        }
	        return entry;
	    }
	    _isFatalError(error) {
	        return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
	    }
	}
	reader.default = Reader;
	return reader;
}

var stream$1 = {};

var hasRequiredStream$1;

function requireStream$1 () {
	if (hasRequiredStream$1) return stream$1;
	hasRequiredStream$1 = 1;
	Object.defineProperty(stream$1, "__esModule", { value: true });
	const stream_1 = require$$3;
	const fsStat = requireOut$3();
	const fsWalk = requireOut$1();
	const reader_1 = requireReader();
	class ReaderStream extends reader_1.default {
	    constructor() {
	        super(...arguments);
	        this._walkStream = fsWalk.walkStream;
	        this._stat = fsStat.stat;
	    }
	    dynamic(root, options) {
	        return this._walkStream(root, options);
	    }
	    static(patterns, options) {
	        const filepaths = patterns.map(this._getFullEntryPath, this);
	        const stream = new stream_1.PassThrough({ objectMode: true });
	        stream._write = (index, _enc, done) => {
	            return this._getEntry(filepaths[index], patterns[index], options)
	                .then((entry) => {
	                if (entry !== null && options.entryFilter(entry)) {
	                    stream.push(entry);
	                }
	                if (index === filepaths.length - 1) {
	                    stream.end();
	                }
	                done();
	            })
	                .catch(done);
	        };
	        for (let i = 0; i < filepaths.length; i++) {
	            stream.write(i);
	        }
	        return stream;
	    }
	    _getEntry(filepath, pattern, options) {
	        return this._getStat(filepath)
	            .then((stats) => this._makeEntry(stats, pattern))
	            .catch((error) => {
	            if (options.errorFilter(error)) {
	                return null;
	            }
	            throw error;
	        });
	    }
	    _getStat(filepath) {
	        return new Promise((resolve, reject) => {
	            this._stat(filepath, this._fsStatSettings, (error, stats) => {
	                return error === null ? resolve(stats) : reject(error);
	            });
	        });
	    }
	}
	stream$1.default = ReaderStream;
	return stream$1;
}

var hasRequiredAsync$1;

function requireAsync$1 () {
	if (hasRequiredAsync$1) return async$4;
	hasRequiredAsync$1 = 1;
	Object.defineProperty(async$4, "__esModule", { value: true });
	const fsWalk = requireOut$1();
	const reader_1 = requireReader();
	const stream_1 = requireStream$1();
	class ReaderAsync extends reader_1.default {
	    constructor() {
	        super(...arguments);
	        this._walkAsync = fsWalk.walk;
	        this._readerStream = new stream_1.default(this._settings);
	    }
	    dynamic(root, options) {
	        return new Promise((resolve, reject) => {
	            this._walkAsync(root, options, (error, entries) => {
	                if (error === null) {
	                    resolve(entries);
	                }
	                else {
	                    reject(error);
	                }
	            });
	        });
	    }
	    async static(patterns, options) {
	        const entries = [];
	        const stream = this._readerStream.static(patterns, options);
	        // After #235, replace it with an asynchronous iterator.
	        return new Promise((resolve, reject) => {
	            stream.once('error', reject);
	            stream.on('data', (entry) => entries.push(entry));
	            stream.once('end', () => resolve(entries));
	        });
	    }
	}
	async$4.default = ReaderAsync;
	return async$4;
}

var provider = {};

var deep = {};

var partial = {};

var matcher = {};

var hasRequiredMatcher;

function requireMatcher () {
	if (hasRequiredMatcher) return matcher;
	hasRequiredMatcher = 1;
	Object.defineProperty(matcher, "__esModule", { value: true });
	const utils = requireUtils$1();
	class Matcher {
	    constructor(_patterns, _settings, _micromatchOptions) {
	        this._patterns = _patterns;
	        this._settings = _settings;
	        this._micromatchOptions = _micromatchOptions;
	        this._storage = [];
	        this._fillStorage();
	    }
	    _fillStorage() {
	        /**
	         * The original pattern may include `{,*,**,a/*}`, which will lead to problems with matching (unresolved level).
	         * So, before expand patterns with brace expansion into separated patterns.
	         */
	        const patterns = utils.pattern.expandPatternsWithBraceExpansion(this._patterns);
	        for (const pattern of patterns) {
	            const segments = this._getPatternSegments(pattern);
	            const sections = this._splitSegmentsIntoSections(segments);
	            this._storage.push({
	                complete: sections.length <= 1,
	                pattern,
	                segments,
	                sections
	            });
	        }
	    }
	    _getPatternSegments(pattern) {
	        const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
	        return parts.map((part) => {
	            const dynamic = utils.pattern.isDynamicPattern(part, this._settings);
	            if (!dynamic) {
	                return {
	                    dynamic: false,
	                    pattern: part
	                };
	            }
	            return {
	                dynamic: true,
	                pattern: part,
	                patternRe: utils.pattern.makeRe(part, this._micromatchOptions)
	            };
	        });
	    }
	    _splitSegmentsIntoSections(segments) {
	        return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));
	    }
	}
	matcher.default = Matcher;
	return matcher;
}

var hasRequiredPartial;

function requirePartial () {
	if (hasRequiredPartial) return partial;
	hasRequiredPartial = 1;
	Object.defineProperty(partial, "__esModule", { value: true });
	const matcher_1 = requireMatcher();
	class PartialMatcher extends matcher_1.default {
	    match(filepath) {
	        const parts = filepath.split('/');
	        const levels = parts.length;
	        const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
	        for (const pattern of patterns) {
	            const section = pattern.sections[0];
	            /**
	             * In this case, the pattern has a globstar and we must read all directories unconditionally,
	             * but only if the level has reached the end of the first group.
	             *
	             * fixtures/{a,b}/**
	             *  ^ true/false  ^ always true
	            */
	            if (!pattern.complete && levels > section.length) {
	                return true;
	            }
	            const match = parts.every((part, index) => {
	                const segment = pattern.segments[index];
	                if (segment.dynamic && segment.patternRe.test(part)) {
	                    return true;
	                }
	                if (!segment.dynamic && segment.pattern === part) {
	                    return true;
	                }
	                return false;
	            });
	            if (match) {
	                return true;
	            }
	        }
	        return false;
	    }
	}
	partial.default = PartialMatcher;
	return partial;
}

var hasRequiredDeep;

function requireDeep () {
	if (hasRequiredDeep) return deep;
	hasRequiredDeep = 1;
	Object.defineProperty(deep, "__esModule", { value: true });
	const utils = requireUtils$1();
	const partial_1 = requirePartial();
	class DeepFilter {
	    constructor(_settings, _micromatchOptions) {
	        this._settings = _settings;
	        this._micromatchOptions = _micromatchOptions;
	    }
	    getFilter(basePath, positive, negative) {
	        const matcher = this._getMatcher(positive);
	        const negativeRe = this._getNegativePatternsRe(negative);
	        return (entry) => this._filter(basePath, entry, matcher, negativeRe);
	    }
	    _getMatcher(patterns) {
	        return new partial_1.default(patterns, this._settings, this._micromatchOptions);
	    }
	    _getNegativePatternsRe(patterns) {
	        const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
	        return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
	    }
	    _filter(basePath, entry, matcher, negativeRe) {
	        if (this._isSkippedByDeep(basePath, entry.path)) {
	            return false;
	        }
	        if (this._isSkippedSymbolicLink(entry)) {
	            return false;
	        }
	        const filepath = utils.path.removeLeadingDotSegment(entry.path);
	        if (this._isSkippedByPositivePatterns(filepath, matcher)) {
	            return false;
	        }
	        return this._isSkippedByNegativePatterns(filepath, negativeRe);
	    }
	    _isSkippedByDeep(basePath, entryPath) {
	        /**
	         * Avoid unnecessary depth calculations when it doesn't matter.
	         */
	        if (this._settings.deep === Infinity) {
	            return false;
	        }
	        return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
	    }
	    _getEntryLevel(basePath, entryPath) {
	        const entryPathDepth = entryPath.split('/').length;
	        if (basePath === '') {
	            return entryPathDepth;
	        }
	        const basePathDepth = basePath.split('/').length;
	        return entryPathDepth - basePathDepth;
	    }
	    _isSkippedSymbolicLink(entry) {
	        return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
	    }
	    _isSkippedByPositivePatterns(entryPath, matcher) {
	        return !this._settings.baseNameMatch && !matcher.match(entryPath);
	    }
	    _isSkippedByNegativePatterns(entryPath, patternsRe) {
	        return !utils.pattern.matchAny(entryPath, patternsRe);
	    }
	}
	deep.default = DeepFilter;
	return deep;
}

var entry$1 = {};

var hasRequiredEntry$1;

function requireEntry$1 () {
	if (hasRequiredEntry$1) return entry$1;
	hasRequiredEntry$1 = 1;
	Object.defineProperty(entry$1, "__esModule", { value: true });
	const utils = requireUtils$1();
	class EntryFilter {
	    constructor(_settings, _micromatchOptions) {
	        this._settings = _settings;
	        this._micromatchOptions = _micromatchOptions;
	        this.index = new Map();
	    }
	    getFilter(positive, negative) {
	        const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);
	        const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);
	        return (entry) => this._filter(entry, positiveRe, negativeRe);
	    }
	    _filter(entry, positiveRe, negativeRe) {
	        if (this._settings.unique && this._isDuplicateEntry(entry)) {
	            return false;
	        }
	        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
	            return false;
	        }
	        if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {
	            return false;
	        }
	        const filepath = this._settings.baseNameMatch ? entry.name : entry.path;
	        const isDirectory = entry.dirent.isDirectory();
	        const isMatched = this._isMatchToPatterns(filepath, positiveRe, isDirectory) && !this._isMatchToPatterns(entry.path, negativeRe, isDirectory);
	        if (this._settings.unique && isMatched) {
	            this._createIndexRecord(entry);
	        }
	        return isMatched;
	    }
	    _isDuplicateEntry(entry) {
	        return this.index.has(entry.path);
	    }
	    _createIndexRecord(entry) {
	        this.index.set(entry.path, undefined);
	    }
	    _onlyFileFilter(entry) {
	        return this._settings.onlyFiles && !entry.dirent.isFile();
	    }
	    _onlyDirectoryFilter(entry) {
	        return this._settings.onlyDirectories && !entry.dirent.isDirectory();
	    }
	    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
	        if (!this._settings.absolute) {
	            return false;
	        }
	        const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);
	        return utils.pattern.matchAny(fullpath, patternsRe);
	    }
	    _isMatchToPatterns(entryPath, patternsRe, isDirectory) {
	        const filepath = utils.path.removeLeadingDotSegment(entryPath);
	        // Trying to match files and directories by patterns.
	        const isMatched = utils.pattern.matchAny(filepath, patternsRe);
	        // A pattern with a trailling slash can be used for directory matching.
	        // To apply such pattern, we need to add a tralling slash to the path.
	        if (!isMatched && isDirectory) {
	            return utils.pattern.matchAny(filepath + '/', patternsRe);
	        }
	        return isMatched;
	    }
	}
	entry$1.default = EntryFilter;
	return entry$1;
}

var error$1 = {};

var hasRequiredError$1;

function requireError$1 () {
	if (hasRequiredError$1) return error$1;
	hasRequiredError$1 = 1;
	Object.defineProperty(error$1, "__esModule", { value: true });
	const utils = requireUtils$1();
	class ErrorFilter {
	    constructor(_settings) {
	        this._settings = _settings;
	    }
	    getFilter() {
	        return (error) => this._isNonFatalError(error);
	    }
	    _isNonFatalError(error) {
	        return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
	    }
	}
	error$1.default = ErrorFilter;
	return error$1;
}

var entry = {};

var hasRequiredEntry;

function requireEntry () {
	if (hasRequiredEntry) return entry;
	hasRequiredEntry = 1;
	Object.defineProperty(entry, "__esModule", { value: true });
	const utils = requireUtils$1();
	class EntryTransformer {
	    constructor(_settings) {
	        this._settings = _settings;
	    }
	    getTransformer() {
	        return (entry) => this._transform(entry);
	    }
	    _transform(entry) {
	        let filepath = entry.path;
	        if (this._settings.absolute) {
	            filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
	            filepath = utils.path.unixify(filepath);
	        }
	        if (this._settings.markDirectories && entry.dirent.isDirectory()) {
	            filepath += '/';
	        }
	        if (!this._settings.objectMode) {
	            return filepath;
	        }
	        return Object.assign(Object.assign({}, entry), { path: filepath });
	    }
	}
	entry.default = EntryTransformer;
	return entry;
}

var hasRequiredProvider;

function requireProvider () {
	if (hasRequiredProvider) return provider;
	hasRequiredProvider = 1;
	Object.defineProperty(provider, "__esModule", { value: true });
	const path = require$$3;
	const deep_1 = requireDeep();
	const entry_1 = requireEntry$1();
	const error_1 = requireError$1();
	const entry_2 = requireEntry();
	class Provider {
	    constructor(_settings) {
	        this._settings = _settings;
	        this.errorFilter = new error_1.default(this._settings);
	        this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
	        this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
	        this.entryTransformer = new entry_2.default(this._settings);
	    }
	    _getRootDirectory(task) {
	        return path.resolve(this._settings.cwd, task.base);
	    }
	    _getReaderOptions(task) {
	        const basePath = task.base === '.' ? '' : task.base;
	        return {
	            basePath,
	            pathSegmentSeparator: '/',
	            concurrency: this._settings.concurrency,
	            deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
	            entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
	            errorFilter: this.errorFilter.getFilter(),
	            followSymbolicLinks: this._settings.followSymbolicLinks,
	            fs: this._settings.fs,
	            stats: this._settings.stats,
	            throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
	            transform: this.entryTransformer.getTransformer()
	        };
	    }
	    _getMicromatchOptions() {
	        return {
	            dot: this._settings.dot,
	            matchBase: this._settings.baseNameMatch,
	            nobrace: !this._settings.braceExpansion,
	            nocase: !this._settings.caseSensitiveMatch,
	            noext: !this._settings.extglob,
	            noglobstar: !this._settings.globstar,
	            posix: true,
	            strictSlashes: false
	        };
	    }
	}
	provider.default = Provider;
	return provider;
}

var hasRequiredAsync;

function requireAsync () {
	if (hasRequiredAsync) return async$5;
	hasRequiredAsync = 1;
	Object.defineProperty(async$5, "__esModule", { value: true });
	const async_1 = requireAsync$1();
	const provider_1 = requireProvider();
	class ProviderAsync extends provider_1.default {
	    constructor() {
	        super(...arguments);
	        this._reader = new async_1.default(this._settings);
	    }
	    async read(task) {
	        const root = this._getRootDirectory(task);
	        const options = this._getReaderOptions(task);
	        const entries = await this.api(root, task, options);
	        return entries.map((entry) => options.transform(entry));
	    }
	    api(root, task, options) {
	        if (task.dynamic) {
	            return this._reader.dynamic(root, options);
	        }
	        return this._reader.static(task.patterns, options);
	    }
	}
	async$5.default = ProviderAsync;
	return async$5;
}

var stream = {};

var hasRequiredStream;

function requireStream () {
	if (hasRequiredStream) return stream;
	hasRequiredStream = 1;
	Object.defineProperty(stream, "__esModule", { value: true });
	const stream_1 = require$$3;
	const stream_2 = requireStream$1();
	const provider_1 = requireProvider();
	class ProviderStream extends provider_1.default {
	    constructor() {
	        super(...arguments);
	        this._reader = new stream_2.default(this._settings);
	    }
	    read(task) {
	        const root = this._getRootDirectory(task);
	        const options = this._getReaderOptions(task);
	        const source = this.api(root, task, options);
	        const destination = new stream_1.Readable({ objectMode: true, read: () => { } });
	        source
	            .once('error', (error) => destination.emit('error', error))
	            .on('data', (entry) => destination.emit('data', options.transform(entry)))
	            .once('end', () => destination.emit('end'));
	        destination
	            .once('close', () => source.destroy());
	        return destination;
	    }
	    api(root, task, options) {
	        if (task.dynamic) {
	            return this._reader.dynamic(root, options);
	        }
	        return this._reader.static(task.patterns, options);
	    }
	}
	stream.default = ProviderStream;
	return stream;
}

var sync$1 = {};

var sync = {};

var hasRequiredSync$1;

function requireSync$1 () {
	if (hasRequiredSync$1) return sync;
	hasRequiredSync$1 = 1;
	Object.defineProperty(sync, "__esModule", { value: true });
	const fsStat = requireOut$3();
	const fsWalk = requireOut$1();
	const reader_1 = requireReader();
	class ReaderSync extends reader_1.default {
	    constructor() {
	        super(...arguments);
	        this._walkSync = fsWalk.walkSync;
	        this._statSync = fsStat.statSync;
	    }
	    dynamic(root, options) {
	        return this._walkSync(root, options);
	    }
	    static(patterns, options) {
	        const entries = [];
	        for (const pattern of patterns) {
	            const filepath = this._getFullEntryPath(pattern);
	            const entry = this._getEntry(filepath, pattern, options);
	            if (entry === null || !options.entryFilter(entry)) {
	                continue;
	            }
	            entries.push(entry);
	        }
	        return entries;
	    }
	    _getEntry(filepath, pattern, options) {
	        try {
	            const stats = this._getStat(filepath);
	            return this._makeEntry(stats, pattern);
	        }
	        catch (error) {
	            if (options.errorFilter(error)) {
	                return null;
	            }
	            throw error;
	        }
	    }
	    _getStat(filepath) {
	        return this._statSync(filepath, this._fsStatSettings);
	    }
	}
	sync.default = ReaderSync;
	return sync;
}

var hasRequiredSync;

function requireSync () {
	if (hasRequiredSync) return sync$1;
	hasRequiredSync = 1;
	Object.defineProperty(sync$1, "__esModule", { value: true });
	const sync_1 = requireSync$1();
	const provider_1 = requireProvider();
	class ProviderSync extends provider_1.default {
	    constructor() {
	        super(...arguments);
	        this._reader = new sync_1.default(this._settings);
	    }
	    read(task) {
	        const root = this._getRootDirectory(task);
	        const options = this._getReaderOptions(task);
	        const entries = this.api(root, task, options);
	        return entries.map(options.transform);
	    }
	    api(root, task, options) {
	        if (task.dynamic) {
	            return this._reader.dynamic(root, options);
	        }
	        return this._reader.static(task.patterns, options);
	    }
	}
	sync$1.default = ProviderSync;
	return sync$1;
}

var settings = {};

var hasRequiredSettings;

function requireSettings () {
	if (hasRequiredSettings) return settings;
	hasRequiredSettings = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
		const fs = require$$3;
		const os = require$$3;
		/**
		 * The `os.cpus` method can return zero. We expect the number of cores to be greater than zero.
		 * https://github.com/nodejs/node/blob/7faeddf23a98c53896f8b574a6e66589e8fb1eb8/lib/os.js#L106-L107
		 */
		const CPU_COUNT = Math.max(os.cpus().length, 1);
		exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
		    lstat: fs.lstat,
		    lstatSync: fs.lstatSync,
		    stat: fs.stat,
		    statSync: fs.statSync,
		    readdir: fs.readdir,
		    readdirSync: fs.readdirSync
		};
		class Settings {
		    constructor(_options = {}) {
		        this._options = _options;
		        this.absolute = this._getValue(this._options.absolute, false);
		        this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
		        this.braceExpansion = this._getValue(this._options.braceExpansion, true);
		        this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
		        this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
		        this.cwd = this._getValue(this._options.cwd, process.cwd());
		        this.deep = this._getValue(this._options.deep, Infinity);
		        this.dot = this._getValue(this._options.dot, false);
		        this.extglob = this._getValue(this._options.extglob, true);
		        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
		        this.fs = this._getFileSystemMethods(this._options.fs);
		        this.globstar = this._getValue(this._options.globstar, true);
		        this.ignore = this._getValue(this._options.ignore, []);
		        this.markDirectories = this._getValue(this._options.markDirectories, false);
		        this.objectMode = this._getValue(this._options.objectMode, false);
		        this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
		        this.onlyFiles = this._getValue(this._options.onlyFiles, true);
		        this.stats = this._getValue(this._options.stats, false);
		        this.suppressErrors = this._getValue(this._options.suppressErrors, false);
		        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
		        this.unique = this._getValue(this._options.unique, true);
		        if (this.onlyDirectories) {
		            this.onlyFiles = false;
		        }
		        if (this.stats) {
		            this.objectMode = true;
		        }
		    }
		    _getValue(option, value) {
		        return option === undefined ? value : option;
		    }
		    _getFileSystemMethods(methods = {}) {
		        return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
		    }
		}
		exports.default = Settings;
} (settings));
	return settings;
}

var out;
var hasRequiredOut;

function requireOut () {
	if (hasRequiredOut) return out;
	hasRequiredOut = 1;
	const taskManager = requireTasks();
	const patternManager = requirePatterns();
	const async_1 = requireAsync();
	const stream_1 = requireStream();
	const sync_1 = requireSync();
	const settings_1 = requireSettings();
	const utils = requireUtils$1();
	async function FastGlob(source, options) {
	    assertPatternsInput(source);
	    const works = getWorks(source, async_1.default, options);
	    const result = await Promise.all(works);
	    return utils.array.flatten(result);
	}
	// https://github.com/typescript-eslint/typescript-eslint/issues/60
	// eslint-disable-next-line no-redeclare
	(function (FastGlob) {
	    function sync(source, options) {
	        assertPatternsInput(source);
	        const works = getWorks(source, sync_1.default, options);
	        return utils.array.flatten(works);
	    }
	    FastGlob.sync = sync;
	    function stream(source, options) {
	        assertPatternsInput(source);
	        const works = getWorks(source, stream_1.default, options);
	        /**
	         * The stream returned by the provider cannot work with an asynchronous iterator.
	         * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.
	         * This affects performance (+25%). I don't see best solution right now.
	         */
	        return utils.stream.merge(works);
	    }
	    FastGlob.stream = stream;
	    function generateTasks(source, options) {
	        assertPatternsInput(source);
	        const patterns = patternManager.transform([].concat(source));
	        const settings = new settings_1.default(options);
	        return taskManager.generate(patterns, settings);
	    }
	    FastGlob.generateTasks = generateTasks;
	    function isDynamicPattern(source, options) {
	        assertPatternsInput(source);
	        const settings = new settings_1.default(options);
	        return utils.pattern.isDynamicPattern(source, settings);
	    }
	    FastGlob.isDynamicPattern = isDynamicPattern;
	    function escapePath(source) {
	        assertPatternsInput(source);
	        return utils.path.escape(source);
	    }
	    FastGlob.escapePath = escapePath;
	})(FastGlob || (FastGlob = {}));
	function getWorks(source, _Provider, options) {
	    const patterns = patternManager.transform([].concat(source));
	    const settings = new settings_1.default(options);
	    const tasks = taskManager.generate(patterns, settings);
	    const provider = new _Provider(settings);
	    return tasks.map(provider.read, provider);
	}
	function assertPatternsInput(input) {
	    const source = [].concat(input);
	    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
	    if (!isValidSource) {
	        throw new TypeError('Patterns must be a string (non empty) or an array of strings');
	    }
	}
	out = FastGlob;
	return out;
}

/*!
 * normalize-path <https://github.com/jonschlinkert/normalize-path>
 *
 * Copyright (c) 2014-2018, Jon Schlinkert.
 * Released under the MIT License.
 */

var normalizePath;
var hasRequiredNormalizePath;

function requireNormalizePath () {
	if (hasRequiredNormalizePath) return normalizePath;
	hasRequiredNormalizePath = 1;
	normalizePath = function(path, stripTrailing) {
	  if (typeof path !== 'string') {
	    throw new TypeError('expected path to be a string');
	  }

	  if (path === '\\' || path === '/') return '/';

	  var len = path.length;
	  if (len <= 1) return path;

	  // ensure that win32 namespaces has two leading slashes, so that the path is
	  // handled properly by the win32 version of path.parse() after being normalized
	  // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces
	  var prefix = '';
	  if (len > 4 && path[3] === '\\') {
	    var ch = path[2];
	    if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\') {
	      path = path.slice(2);
	      prefix = '//';
	    }
	  }

	  var segs = path.split(/[/\\]+/);
	  if (stripTrailing !== false && segs[segs.length - 1] === '') {
	    segs.pop();
	  }
	  return prefix + segs.join('/');
	};
	return normalizePath;
}

var parseGlob = {};

var globParent;
var hasRequiredGlobParent;

function requireGlobParent () {
	if (hasRequiredGlobParent) return globParent;
	hasRequiredGlobParent = 1;

	var isGlob = requireIsGlob();
	var pathPosixDirname = require$$3.posix.dirname;
	var isWin32 = require$$3.platform() === 'win32';

	var slash = '/';
	var backslash = /\\/g;
	var escaped = /\\([!*?|[\](){}])/g;

	/**
	 * @param {string} str
	 * @param {Object} opts
	 * @param {boolean} [opts.flipBackslashes=true]
	 */
	globParent = function globParent(str, opts) {
	  var options = Object.assign({ flipBackslashes: true }, opts);

	  // flip windows path separators
	  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
	    str = str.replace(backslash, slash);
	  }

	  // special case for strings ending in enclosure containing path separator
	  if (isEnclosure(str)) {
	    str += slash;
	  }

	  // preserves full path in case of trailing path separator
	  str += 'a';

	  // remove path parts that are globby
	  do {
	    str = pathPosixDirname(str);
	  } while (isGlobby(str));

	  // remove escape chars and return result
	  return str.replace(escaped, '$1');
	};

	function isEnclosure(str) {
	  var lastChar = str.slice(-1);

	  var enclosureStart;
	  switch (lastChar) {
	    case '}':
	      enclosureStart = '{';
	      break;
	    case ']':
	      enclosureStart = '[';
	      break;
	    default:
	      return false;
	  }

	  var foundIndex = str.indexOf(enclosureStart);
	  if (foundIndex < 0) {
	    return false;
	  }

	  return str.slice(foundIndex + 1, -1).includes(slash);
	}

	function isGlobby(str) {
	  if (/\([^()]+$/.test(str)) {
	    return true;
	  }
	  if (str[0] === '{' || str[0] === '[') {
	    return true;
	  }
	  if (/[^\\][{[]/.test(str)) {
	    return true;
	  }
	  return isGlob(str);
	}
	return globParent;
}

var hasRequiredParseGlob;

function requireParseGlob () {
	if (hasRequiredParseGlob) return parseGlob;
	hasRequiredParseGlob = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "parseGlob", {
		    enumerable: true,
		    get: ()=>parseGlob
		});
		const _globParent = /*#__PURE__*/ _interopRequireDefault(requireGlobParent());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function parseGlob(pattern) {
		    let glob = pattern;
		    let base = (0, _globParent.default)(pattern);
		    if (base !== ".") {
		        glob = pattern.substr(base.length);
		        if (glob.charAt(0) === "/") {
		            glob = glob.substr(1);
		        }
		    }
		    if (glob.substr(0, 2) === "./") {
		        glob = glob.substr(2);
		    }
		    if (glob.charAt(0) === "/") {
		        glob = glob.substr(1);
		    }
		    return {
		        base,
		        glob
		    };
		}
} (parseGlob));
	return parseGlob;
}

var hasRequiredContent;

function requireContent () {
	if (hasRequiredContent) return content;
	hasRequiredContent = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    parseCandidateFiles: ()=>parseCandidateFiles,
		    resolvedChangedContent: ()=>resolvedChangedContent
		});
		const _fs = /*#__PURE__*/ _interopRequireDefault(require$$3);
		const _path = /*#__PURE__*/ _interopRequireDefault(require$$3);
		const _isGlob = /*#__PURE__*/ _interopRequireDefault(requireIsGlob());
		const _fastGlob = /*#__PURE__*/ _interopRequireDefault(requireOut());
		const _normalizePath = /*#__PURE__*/ _interopRequireDefault(requireNormalizePath());
		const _parseGlob = requireParseGlob();
		const _sharedState = requireSharedState();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function parseCandidateFiles(context, tailwindConfig) {
		    let files = tailwindConfig.content.files;
		    // Normalize the file globs
		    files = files.filter((filePath)=>typeof filePath === "string");
		    files = files.map(_normalizePath.default);
		    // Split into included and excluded globs
		    let tasks = _fastGlob.default.generateTasks(files);
		    /** @type {ContentPath[]} */ let included = [];
		    /** @type {ContentPath[]} */ let excluded = [];
		    for (const task of tasks){
		        included.push(...task.positive.map((filePath)=>parseFilePath(filePath, false)));
		        excluded.push(...task.negative.map((filePath)=>parseFilePath(filePath, true)));
		    }
		    let paths = [
		        ...included,
		        ...excluded
		    ];
		    // Resolve paths relative to the config file or cwd
		    paths = resolveRelativePaths(context, paths);
		    // Resolve symlinks if possible
		    paths = paths.flatMap(resolvePathSymlinks);
		    // Update cached patterns
		    paths = paths.map(resolveGlobPattern);
		    return paths;
		}
		/**
		 *
		 * @param {string} filePath
		 * @param {boolean} ignore
		 * @returns {ContentPath}
		 */ function parseFilePath(filePath, ignore) {
		    let contentPath = {
		        original: filePath,
		        base: filePath,
		        ignore,
		        pattern: filePath,
		        glob: null
		    };
		    if ((0, _isGlob.default)(filePath)) {
		        Object.assign(contentPath, (0, _parseGlob.parseGlob)(filePath));
		    }
		    return contentPath;
		}
		/**
		 *
		 * @param {ContentPath} contentPath
		 * @returns {ContentPath}
		 */ function resolveGlobPattern(contentPath) {
		    // This is required for Windows support to properly pick up Glob paths.
		    // Afaik, this technically shouldn't be needed but there's probably
		    // some internal, direct path matching with a normalized path in
		    // a package which can't handle mixed directory separators
		    let base = (0, _normalizePath.default)(contentPath.base);
		    // If the user's file path contains any special characters (like parens) for instance fast-glob
		    // is like "OOOH SHINY" and treats them as such. So we have to escape the base path to fix this
		    base = _fastGlob.default.escapePath(base);
		    contentPath.pattern = contentPath.glob ? `${base}/${contentPath.glob}` : base;
		    contentPath.pattern = contentPath.ignore ? `!${contentPath.pattern}` : contentPath.pattern;
		    return contentPath;
		}
		/**
		 * Resolve each path relative to the config file (when possible) if the experimental flag is enabled
		 * Otherwise, resolve relative to the current working directory
		 *
		 * @param {any} context
		 * @param {ContentPath[]} contentPaths
		 * @returns {ContentPath[]}
		 */ function resolveRelativePaths(context, contentPaths) {
		    let resolveFrom = [];
		    // Resolve base paths relative to the config file (when possible) if the experimental flag is enabled
		    if (context.userConfigPath && context.tailwindConfig.content.relative) {
		        resolveFrom = [
		            _path.default.dirname(context.userConfigPath)
		        ];
		    }
		    return contentPaths.map((contentPath)=>{
		        contentPath.base = _path.default.resolve(...resolveFrom, contentPath.base);
		        return contentPath;
		    });
		}
		/**
		 * Resolve the symlink for the base directory / file in each path
		 * These are added as additional dependencies to watch for changes because
		 * some tools (like webpack) will only watch the actual file or directory
		 * but not the symlink itself even in projects that use monorepos.
		 *
		 * @param {ContentPath} contentPath
		 * @returns {ContentPath[]}
		 */ function resolvePathSymlinks(contentPath) {
		    let paths = [
		        contentPath
		    ];
		    try {
		        let resolvedPath = _fs.default.realpathSync(contentPath.base);
		        if (resolvedPath !== contentPath.base) {
		            paths.push({
		                ...contentPath,
		                base: resolvedPath
		            });
		        }
		    } catch  {
		    // TODO: log this?
		    }
		    return paths;
		}
		function resolvedChangedContent(context, candidateFiles, fileModifiedMap) {
		    let changedContent = context.tailwindConfig.content.files.filter((item)=>typeof item.raw === "string").map(({ raw , extension ="html"  })=>({
		            content: raw,
		            extension
		        }));
		    let [changedFiles, mTimesToCommit] = resolveChangedFiles(candidateFiles, fileModifiedMap);
		    for (let changedFile of changedFiles){
		        let extension = _path.default.extname(changedFile).slice(1);
		        changedContent.push({
		            file: changedFile,
		            extension
		        });
		    }
		    return [
		        changedContent,
		        mTimesToCommit
		    ];
		}
		/**
		 *
		 * @param {ContentPath[]} candidateFiles
		 * @param {Map<string, number>} fileModifiedMap
		 * @returns {[Set<string>, Map<string, number>]}
		 */ function resolveChangedFiles(candidateFiles, fileModifiedMap) {
		    let paths = candidateFiles.map((contentPath)=>contentPath.pattern);
		    let mTimesToCommit = new Map();
		    let changedFiles = new Set();
		    _sharedState.env.DEBUG && console.time("Finding changed files");
		    let files = _fastGlob.default.sync(paths, {
		        absolute: true
		    });
		    for (let file of files){
		        let prevModified = fileModifiedMap.get(file) || -Infinity;
		        let modified = _fs.default.statSync(file).mtimeMs;
		        if (modified > prevModified) {
		            changedFiles.add(file);
		            mTimesToCommit.set(file, modified);
		        }
		    }
		    _sharedState.env.DEBUG && console.timeEnd("Finding changed files");
		    return [
		        changedFiles,
		        mTimesToCommit
		    ];
		}
} (content));
	return content;
}

var loadConfig = {};

var jitiExports = {};
var jiti = {
  get exports(){ return jitiExports; },
  set exports(v){ jitiExports = v; },
};

var hasRequiredJiti;

function requireJiti () {
	if (hasRequiredJiti) return jitiExports;
	hasRequiredJiti = 1;
	(function (module) {
		(()=>{var __webpack_modules__={"./node_modules/.pnpm/create-require@1.1.1/node_modules/create-require/create-require.js":(module,__unused_webpack_exports,__webpack_require__)=>{const nativeModule=__webpack_require__("module"),path=__webpack_require__("path"),fs=__webpack_require__("fs");module.exports=function(filename){return filename||(filename=process.cwd()),function(path){try{return fs.lstatSync(path).isDirectory()}catch(e){return !1}}(filename)&&(filename=path.join(filename,"index.js")),nativeModule.createRequire?nativeModule.createRequire(filename):nativeModule.createRequireFromPath?nativeModule.createRequireFromPath(filename):function(filename){const mod=new nativeModule.Module(filename,null);return mod.filename=filename,mod.paths=nativeModule.Module._nodeModulePaths(path.dirname(filename)),mod._compile("module.exports = require;",filename),mod.exports}(filename)};},"./node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{const Yallist=__webpack_require__("./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js"),MAX=Symbol("max"),LENGTH=Symbol("length"),LENGTH_CALCULATOR=Symbol("lengthCalculator"),ALLOW_STALE=Symbol("allowStale"),MAX_AGE=Symbol("maxAge"),DISPOSE=Symbol("dispose"),NO_DISPOSE_ON_SET=Symbol("noDisposeOnSet"),LRU_LIST=Symbol("lruList"),CACHE=Symbol("cache"),UPDATE_AGE_ON_GET=Symbol("updateAgeOnGet"),naiveLength=()=>1;const get=(self,key,doUse)=>{const node=self[CACHE].get(key);if(node){const hit=node.value;if(isStale(self,hit)){if(del(self,node),!self[ALLOW_STALE])return}else doUse&&(self[UPDATE_AGE_ON_GET]&&(node.value.now=Date.now()),self[LRU_LIST].unshiftNode(node));return hit.value}},isStale=(self,hit)=>{if(!hit||!hit.maxAge&&!self[MAX_AGE])return !1;const diff=Date.now()-hit.now;return hit.maxAge?diff>hit.maxAge:self[MAX_AGE]&&diff>self[MAX_AGE]},trim=self=>{if(self[LENGTH]>self[MAX])for(let walker=self[LRU_LIST].tail;self[LENGTH]>self[MAX]&&null!==walker;){const prev=walker.prev;del(self,walker),walker=prev;}},del=(self,node)=>{if(node){const hit=node.value;self[DISPOSE]&&self[DISPOSE](hit.key,hit.value),self[LENGTH]-=hit.length,self[CACHE].delete(hit.key),self[LRU_LIST].removeNode(node);}};class Entry{constructor(key,value,length,now,maxAge){this.key=key,this.value=value,this.length=length,this.now=now,this.maxAge=maxAge||0;}}const forEachStep=(self,fn,node,thisp)=>{let hit=node.value;isStale(self,hit)&&(del(self,node),self[ALLOW_STALE]||(hit=void 0)),hit&&fn.call(thisp,hit.value,hit.key,self);};module.exports=class{constructor(options){if("number"==typeof options&&(options={max:options}),options||(options={}),options.max&&("number"!=typeof options.max||options.max<0))throw new TypeError("max must be a non-negative number");this[MAX]=options.max||1/0;const lc=options.length||naiveLength;if(this[LENGTH_CALCULATOR]="function"!=typeof lc?naiveLength:lc,this[ALLOW_STALE]=options.stale||!1,options.maxAge&&"number"!=typeof options.maxAge)throw new TypeError("maxAge must be a number");this[MAX_AGE]=options.maxAge||0,this[DISPOSE]=options.dispose,this[NO_DISPOSE_ON_SET]=options.noDisposeOnSet||!1,this[UPDATE_AGE_ON_GET]=options.updateAgeOnGet||!1,this.reset();}set max(mL){if("number"!=typeof mL||mL<0)throw new TypeError("max must be a non-negative number");this[MAX]=mL||1/0,trim(this);}get max(){return this[MAX]}set allowStale(allowStale){this[ALLOW_STALE]=!!allowStale;}get allowStale(){return this[ALLOW_STALE]}set maxAge(mA){if("number"!=typeof mA)throw new TypeError("maxAge must be a non-negative number");this[MAX_AGE]=mA,trim(this);}get maxAge(){return this[MAX_AGE]}set lengthCalculator(lC){"function"!=typeof lC&&(lC=naiveLength),lC!==this[LENGTH_CALCULATOR]&&(this[LENGTH_CALCULATOR]=lC,this[LENGTH]=0,this[LRU_LIST].forEach((hit=>{hit.length=this[LENGTH_CALCULATOR](hit.value,hit.key),this[LENGTH]+=hit.length;}))),trim(this);}get lengthCalculator(){return this[LENGTH_CALCULATOR]}get length(){return this[LENGTH]}get itemCount(){return this[LRU_LIST].length}rforEach(fn,thisp){thisp=thisp||this;for(let walker=this[LRU_LIST].tail;null!==walker;){const prev=walker.prev;forEachStep(this,fn,walker,thisp),walker=prev;}}forEach(fn,thisp){thisp=thisp||this;for(let walker=this[LRU_LIST].head;null!==walker;){const next=walker.next;forEachStep(this,fn,walker,thisp),walker=next;}}keys(){return this[LRU_LIST].toArray().map((k=>k.key))}values(){return this[LRU_LIST].toArray().map((k=>k.value))}reset(){this[DISPOSE]&&this[LRU_LIST]&&this[LRU_LIST].length&&this[LRU_LIST].forEach((hit=>this[DISPOSE](hit.key,hit.value))),this[CACHE]=new Map,this[LRU_LIST]=new Yallist,this[LENGTH]=0;}dump(){return this[LRU_LIST].map((hit=>!isStale(this,hit)&&{k:hit.key,v:hit.value,e:hit.now+(hit.maxAge||0)})).toArray().filter((h=>h))}dumpLru(){return this[LRU_LIST]}set(key,value,maxAge){if((maxAge=maxAge||this[MAX_AGE])&&"number"!=typeof maxAge)throw new TypeError("maxAge must be a number");const now=maxAge?Date.now():0,len=this[LENGTH_CALCULATOR](value,key);if(this[CACHE].has(key)){if(len>this[MAX])return del(this,this[CACHE].get(key)),!1;const item=this[CACHE].get(key).value;return this[DISPOSE]&&(this[NO_DISPOSE_ON_SET]||this[DISPOSE](key,item.value)),item.now=now,item.maxAge=maxAge,item.value=value,this[LENGTH]+=len-item.length,item.length=len,this.get(key),trim(this),!0}const hit=new Entry(key,value,len,now,maxAge);return hit.length>this[MAX]?(this[DISPOSE]&&this[DISPOSE](key,value),!1):(this[LENGTH]+=hit.length,this[LRU_LIST].unshift(hit),this[CACHE].set(key,this[LRU_LIST].head),trim(this),!0)}has(key){if(!this[CACHE].has(key))return !1;const hit=this[CACHE].get(key).value;return !isStale(this,hit)}get(key){return get(this,key,!0)}peek(key){return get(this,key,!1)}pop(){const node=this[LRU_LIST].tail;return node?(del(this,node),node.value):null}del(key){del(this,this[CACHE].get(key));}load(arr){this.reset();const now=Date.now();for(let l=arr.length-1;l>=0;l--){const hit=arr[l],expiresAt=hit.e||0;if(0===expiresAt)this.set(hit.k,hit.v);else {const maxAge=expiresAt-now;maxAge>0&&this.set(hit.k,hit.v,maxAge);}}}prune(){this[CACHE].forEach(((value,key)=>get(this,key,!1)));}};},"./node_modules/.pnpm/mlly@1.2.0/node_modules/mlly/dist lazy recursive":module=>{function webpackEmptyAsyncContext(req){return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}))}webpackEmptyAsyncContext.keys=()=>[],webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id="./node_modules/.pnpm/mlly@1.2.0/node_modules/mlly/dist lazy recursive",module.exports=webpackEmptyAsyncContext;},"./node_modules/.pnpm/object-hash@3.0.0/node_modules/object-hash/index.js":(module,exports,__webpack_require__)=>{var crypto=__webpack_require__("crypto");function objectHash(object,options){return function(object,options){var hashingStream;hashingStream="passthrough"!==options.algorithm?crypto.createHash(options.algorithm):new PassThrough;void 0===hashingStream.write&&(hashingStream.write=hashingStream.update,hashingStream.end=hashingStream.update);var hasher=typeHasher(options,hashingStream);hasher.dispatch(object),hashingStream.update||hashingStream.end("");if(hashingStream.digest)return hashingStream.digest("buffer"===options.encoding?void 0:options.encoding);var buf=hashingStream.read();if("buffer"===options.encoding)return buf;return buf.toString(options.encoding)}(object,options=applyDefaults(object,options))}(exports=module.exports=objectHash).sha1=function(object){return objectHash(object)},exports.keys=function(object){return objectHash(object,{excludeValues:!0,algorithm:"sha1",encoding:"hex"})},exports.MD5=function(object){return objectHash(object,{algorithm:"md5",encoding:"hex"})},exports.keysMD5=function(object){return objectHash(object,{algorithm:"md5",encoding:"hex",excludeValues:!0})};var hashes=crypto.getHashes?crypto.getHashes().slice():["sha1","md5"];hashes.push("passthrough");var encodings=["buffer","hex","binary","base64"];function applyDefaults(object,sourceOptions){sourceOptions=sourceOptions||{};var options={};if(options.algorithm=sourceOptions.algorithm||"sha1",options.encoding=sourceOptions.encoding||"hex",options.excludeValues=!!sourceOptions.excludeValues,options.algorithm=options.algorithm.toLowerCase(),options.encoding=options.encoding.toLowerCase(),options.ignoreUnknown=!0===sourceOptions.ignoreUnknown,options.respectType=!1!==sourceOptions.respectType,options.respectFunctionNames=!1!==sourceOptions.respectFunctionNames,options.respectFunctionProperties=!1!==sourceOptions.respectFunctionProperties,options.unorderedArrays=!0===sourceOptions.unorderedArrays,options.unorderedSets=!1!==sourceOptions.unorderedSets,options.unorderedObjects=!1!==sourceOptions.unorderedObjects,options.replacer=sourceOptions.replacer||void 0,options.excludeKeys=sourceOptions.excludeKeys||void 0,void 0===object)throw new Error("Object argument required.");for(var i=0;i<hashes.length;++i)hashes[i].toLowerCase()===options.algorithm.toLowerCase()&&(options.algorithm=hashes[i]);if(-1===hashes.indexOf(options.algorithm))throw new Error('Algorithm "'+options.algorithm+'"  not supported. supported values: '+hashes.join(", "));if(-1===encodings.indexOf(options.encoding)&&"passthrough"!==options.algorithm)throw new Error('Encoding "'+options.encoding+'"  not supported. supported values: '+encodings.join(", "));return options}function isNativeFunction(f){if("function"!=typeof f)return !1;return null!=/^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(f))}function typeHasher(options,writeTo,context){context=context||[];var write=function(str){return writeTo.update?writeTo.update(str,"utf8"):writeTo.write(str,"utf8")};return {dispatch:function(value){options.replacer&&(value=options.replacer(value));var type=typeof value;return null===value&&(type="null"),this["_"+type](value)},_object:function(object){var objString=Object.prototype.toString.call(object),objType=/\[object (.*)\]/i.exec(objString);objType=(objType=objType?objType[1]:"unknown:["+objString+"]").toLowerCase();var objectNumber;if((objectNumber=context.indexOf(object))>=0)return this.dispatch("[CIRCULAR:"+objectNumber+"]");if(context.push(object),"undefined"!=typeof Buffer&&Buffer.isBuffer&&Buffer.isBuffer(object))return write("buffer:"),write(object);if("object"===objType||"function"===objType||"asyncfunction"===objType){var keys=Object.keys(object);options.unorderedObjects&&(keys=keys.sort()),!1===options.respectType||isNativeFunction(object)||keys.splice(0,0,"prototype","__proto__","constructor"),options.excludeKeys&&(keys=keys.filter((function(key){return !options.excludeKeys(key)}))),write("object:"+keys.length+":");var self=this;return keys.forEach((function(key){self.dispatch(key),write(":"),options.excludeValues||self.dispatch(object[key]),write(",");}))}if(!this["_"+objType]){if(options.ignoreUnknown)return write("["+objType+"]");throw new Error('Unknown object type "'+objType+'"')}this["_"+objType](object);},_array:function(arr,unordered){unordered=void 0!==unordered?unordered:!1!==options.unorderedArrays;var self=this;if(write("array:"+arr.length+":"),!unordered||arr.length<=1)return arr.forEach((function(entry){return self.dispatch(entry)}));var contextAdditions=[],entries=arr.map((function(entry){var strm=new PassThrough,localContext=context.slice();return typeHasher(options,strm,localContext).dispatch(entry),contextAdditions=contextAdditions.concat(localContext.slice(context.length)),strm.read().toString()}));return context=context.concat(contextAdditions),entries.sort(),this._array(entries,!1)},_date:function(date){return write("date:"+date.toJSON())},_symbol:function(sym){return write("symbol:"+sym.toString())},_error:function(err){return write("error:"+err.toString())},_boolean:function(bool){return write("bool:"+bool.toString())},_string:function(string){write("string:"+string.length+":"),write(string.toString());},_function:function(fn){write("fn:"),isNativeFunction(fn)?this.dispatch("[native]"):this.dispatch(fn.toString()),!1!==options.respectFunctionNames&&this.dispatch("function-name:"+String(fn.name)),options.respectFunctionProperties&&this._object(fn);},_number:function(number){return write("number:"+number.toString())},_xml:function(xml){return write("xml:"+xml.toString())},_null:function(){return write("Null")},_undefined:function(){return write("Undefined")},_regexp:function(regex){return write("regex:"+regex.toString())},_uint8array:function(arr){return write("uint8array:"),this.dispatch(Array.prototype.slice.call(arr))},_uint8clampedarray:function(arr){return write("uint8clampedarray:"),this.dispatch(Array.prototype.slice.call(arr))},_int8array:function(arr){return write("int8array:"),this.dispatch(Array.prototype.slice.call(arr))},_uint16array:function(arr){return write("uint16array:"),this.dispatch(Array.prototype.slice.call(arr))},_int16array:function(arr){return write("int16array:"),this.dispatch(Array.prototype.slice.call(arr))},_uint32array:function(arr){return write("uint32array:"),this.dispatch(Array.prototype.slice.call(arr))},_int32array:function(arr){return write("int32array:"),this.dispatch(Array.prototype.slice.call(arr))},_float32array:function(arr){return write("float32array:"),this.dispatch(Array.prototype.slice.call(arr))},_float64array:function(arr){return write("float64array:"),this.dispatch(Array.prototype.slice.call(arr))},_arraybuffer:function(arr){return write("arraybuffer:"),this.dispatch(new Uint8Array(arr))},_url:function(url){return write("url:"+url.toString())},_map:function(map){write("map:");var arr=Array.from(map);return this._array(arr,!1!==options.unorderedSets)},_set:function(set){write("set:");var arr=Array.from(set);return this._array(arr,!1!==options.unorderedSets)},_file:function(file){return write("file:"),this.dispatch([file.name,file.size,file.type,file.lastModfied])},_blob:function(){if(options.ignoreUnknown)return write("[blob]");throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n')},_domwindow:function(){return write("domwindow")},_bigint:function(number){return write("bigint:"+number.toString())},_process:function(){return write("process")},_timer:function(){return write("timer")},_pipe:function(){return write("pipe")},_tcp:function(){return write("tcp")},_udp:function(){return write("udp")},_tty:function(){return write("tty")},_statwatcher:function(){return write("statwatcher")},_securecontext:function(){return write("securecontext")},_connection:function(){return write("connection")},_zlib:function(){return write("zlib")},_context:function(){return write("context")},_nodescript:function(){return write("nodescript")},_httpparser:function(){return write("httpparser")},_dataview:function(){return write("dataview")},_signal:function(){return write("signal")},_fsevent:function(){return write("fsevent")},_tlswrap:function(){return write("tlswrap")}}}function PassThrough(){return {buf:"",write:function(b){this.buf+=b;},end:function(b){this.buf+=b;},read:function(){return this.buf}}}exports.writeToStream=function(object,options,stream){return void 0===stream&&(stream=options,options={}),typeHasher(options=applyDefaults(object,options),stream).dispatch(object)};},"./node_modules/.pnpm/pirates@4.0.5/node_modules/pirates/lib/index.js":(module,exports,__webpack_require__)=>{module=__webpack_require__.nmd(module),Object.defineProperty(exports,"__esModule",{value:!0}),exports.addHook=function(hook,opts={}){let reverted=!1;const loaders=[],oldLoaders=[];let exts;const originalJSLoader=Module._extensions[".js"],matcher=opts.matcher||null,ignoreNodeModules=!1!==opts.ignoreNodeModules;exts=opts.extensions||opts.exts||opts.extension||opts.ext||[".js"],Array.isArray(exts)||(exts=[exts]);return exts.forEach((ext=>{if("string"!=typeof ext)throw new TypeError(`Invalid Extension: ${ext}`);const oldLoader=Module._extensions[ext]||originalJSLoader;oldLoaders[ext]=Module._extensions[ext],loaders[ext]=Module._extensions[ext]=function(mod,filename){let compile;reverted||function(filename,exts,matcher,ignoreNodeModules){if("string"!=typeof filename)return !1;if(-1===exts.indexOf(_path.default.extname(filename)))return !1;const resolvedFilename=_path.default.resolve(filename);if(ignoreNodeModules&&nodeModulesRegex.test(resolvedFilename))return !1;if(matcher&&"function"==typeof matcher)return !!matcher(resolvedFilename);return !0}(filename,exts,matcher,ignoreNodeModules)&&(compile=mod._compile,mod._compile=function(code){mod._compile=compile;const newCode=hook(code,filename);if("string"!=typeof newCode)throw new Error(HOOK_RETURNED_NOTHING_ERROR_MESSAGE);return mod._compile(newCode,filename)}),oldLoader(mod,filename);};})),function(){reverted||(reverted=!0,exts.forEach((ext=>{Module._extensions[ext]===loaders[ext]&&(oldLoaders[ext]?Module._extensions[ext]=oldLoaders[ext]:delete Module._extensions[ext]);})));}};var _module=_interopRequireDefault(__webpack_require__("module")),_path=_interopRequireDefault(__webpack_require__("path"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const nodeModulesRegex=/^(?:.*[\\/])?node_modules(?:[\\/].*)?$/,Module=module.constructor.length>1?module.constructor:_module.default,HOOK_RETURNED_NOTHING_ERROR_MESSAGE="[Pirates] A hook returned a non-string, or nothing at all! This is a violation of intergalactic law!\n--------------------\nIf you have no idea what this means or what Pirates is, let me explain: Pirates is a module that makes is easy to implement require hooks. One of the require hooks you're using uses it. One of these require hooks didn't return anything from it's handler, so we don't know what to do. You might want to debug this.";},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/comparator.js":(module,__unused_webpack_exports,__webpack_require__)=>{const ANY=Symbol("SemVer ANY");class Comparator{static get ANY(){return ANY}constructor(comp,options){if(options=parseOptions(options),comp instanceof Comparator){if(comp.loose===!!options.loose)return comp;comp=comp.value;}debug("comparator",comp,options),this.options=options,this.loose=!!options.loose,this.parse(comp),this.semver===ANY?this.value="":this.value=this.operator+this.semver.version,debug("comp",this);}parse(comp){const r=this.options.loose?re[t.COMPARATORLOOSE]:re[t.COMPARATOR],m=comp.match(r);if(!m)throw new TypeError(`Invalid comparator: ${comp}`);this.operator=void 0!==m[1]?m[1]:"","="===this.operator&&(this.operator=""),m[2]?this.semver=new SemVer(m[2],this.options.loose):this.semver=ANY;}toString(){return this.value}test(version){if(debug("Comparator.test",version,this.options.loose),this.semver===ANY||version===ANY)return !0;if("string"==typeof version)try{version=new SemVer(version,this.options);}catch(er){return !1}return cmp(version,this.operator,this.semver,this.options)}intersects(comp,options){if(!(comp instanceof Comparator))throw new TypeError("a Comparator is required");if(options&&"object"==typeof options||(options={loose:!!options,includePrerelease:!1}),""===this.operator)return ""===this.value||new Range(comp.value,options).test(this.value);if(""===comp.operator)return ""===comp.value||new Range(this.value,options).test(comp.semver);const sameDirectionIncreasing=!(">="!==this.operator&&">"!==this.operator||">="!==comp.operator&&">"!==comp.operator),sameDirectionDecreasing=!("<="!==this.operator&&"<"!==this.operator||"<="!==comp.operator&&"<"!==comp.operator),sameSemVer=this.semver.version===comp.semver.version,differentDirectionsInclusive=!(">="!==this.operator&&"<="!==this.operator||">="!==comp.operator&&"<="!==comp.operator),oppositeDirectionsLessThan=cmp(this.semver,"<",comp.semver,options)&&(">="===this.operator||">"===this.operator)&&("<="===comp.operator||"<"===comp.operator),oppositeDirectionsGreaterThan=cmp(this.semver,">",comp.semver,options)&&("<="===this.operator||"<"===this.operator)&&(">="===comp.operator||">"===comp.operator);return sameDirectionIncreasing||sameDirectionDecreasing||sameSemVer&&differentDirectionsInclusive||oppositeDirectionsLessThan||oppositeDirectionsGreaterThan}}module.exports=Comparator;const parseOptions=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/parse-options.js"),{re,t}=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js"),cmp=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/cmp.js"),debug=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/debug.js"),SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"),Range=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js":(module,__unused_webpack_exports,__webpack_require__)=>{class Range{constructor(range,options){if(options=parseOptions(options),range instanceof Range)return range.loose===!!options.loose&&range.includePrerelease===!!options.includePrerelease?range:new Range(range.raw,options);if(range instanceof Comparator)return this.raw=range.value,this.set=[[range]],this.format(),this;if(this.options=options,this.loose=!!options.loose,this.includePrerelease=!!options.includePrerelease,this.raw=range,this.set=range.split("||").map((r=>this.parseRange(r.trim()))).filter((c=>c.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${range}`);if(this.set.length>1){const first=this.set[0];if(this.set=this.set.filter((c=>!isNullSet(c[0]))),0===this.set.length)this.set=[first];else if(this.set.length>1)for(const c of this.set)if(1===c.length&&isAny(c[0])){this.set=[c];break}}this.format();}format(){return this.range=this.set.map((comps=>comps.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(range){range=range.trim();const memoKey=`parseRange:${Object.keys(this.options).join(",")}:${range}`,cached=cache.get(memoKey);if(cached)return cached;const loose=this.options.loose,hr=loose?re[t.HYPHENRANGELOOSE]:re[t.HYPHENRANGE];range=range.replace(hr,hyphenReplace(this.options.includePrerelease)),debug("hyphen replace",range),range=range.replace(re[t.COMPARATORTRIM],comparatorTrimReplace),debug("comparator trim",range);let rangeList=(range=(range=(range=range.replace(re[t.TILDETRIM],tildeTrimReplace)).replace(re[t.CARETTRIM],caretTrimReplace)).split(/\s+/).join(" ")).split(" ").map((comp=>parseComparator(comp,this.options))).join(" ").split(/\s+/).map((comp=>replaceGTE0(comp,this.options)));loose&&(rangeList=rangeList.filter((comp=>(debug("loose invalid filter",comp,this.options),!!comp.match(re[t.COMPARATORLOOSE]))))),debug("range list",rangeList);const rangeMap=new Map,comparators=rangeList.map((comp=>new Comparator(comp,this.options)));for(const comp of comparators){if(isNullSet(comp))return [comp];rangeMap.set(comp.value,comp);}rangeMap.size>1&&rangeMap.has("")&&rangeMap.delete("");const result=[...rangeMap.values()];return cache.set(memoKey,result),result}intersects(range,options){if(!(range instanceof Range))throw new TypeError("a Range is required");return this.set.some((thisComparators=>isSatisfiable(thisComparators,options)&&range.set.some((rangeComparators=>isSatisfiable(rangeComparators,options)&&thisComparators.every((thisComparator=>rangeComparators.every((rangeComparator=>thisComparator.intersects(rangeComparator,options)))))))))}test(version){if(!version)return !1;if("string"==typeof version)try{version=new SemVer(version,this.options);}catch(er){return !1}for(let i=0;i<this.set.length;i++)if(testSet(this.set[i],version,this.options))return !0;return !1}}module.exports=Range;const cache=new(__webpack_require__("./node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js"))({max:1e3}),parseOptions=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/parse-options.js"),Comparator=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/comparator.js"),debug=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/debug.js"),SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"),{re,t,comparatorTrimReplace,tildeTrimReplace,caretTrimReplace}=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js"),isNullSet=c=>"<0.0.0-0"===c.value,isAny=c=>""===c.value,isSatisfiable=(comparators,options)=>{let result=!0;const remainingComparators=comparators.slice();let testComparator=remainingComparators.pop();for(;result&&remainingComparators.length;)result=remainingComparators.every((otherComparator=>testComparator.intersects(otherComparator,options))),testComparator=remainingComparators.pop();return result},parseComparator=(comp,options)=>(debug("comp",comp,options),comp=replaceCarets(comp,options),debug("caret",comp),comp=replaceTildes(comp,options),debug("tildes",comp),comp=replaceXRanges(comp,options),debug("xrange",comp),comp=replaceStars(comp,options),debug("stars",comp),comp),isX=id=>!id||"x"===id.toLowerCase()||"*"===id,replaceTildes=(comp,options)=>comp.trim().split(/\s+/).map((c=>replaceTilde(c,options))).join(" "),replaceTilde=(comp,options)=>{const r=options.loose?re[t.TILDELOOSE]:re[t.TILDE];return comp.replace(r,((_,M,m,p,pr)=>{let ret;return debug("tilde",comp,_,M,m,p,pr),isX(M)?ret="":isX(m)?ret=`>=${M}.0.0 <${+M+1}.0.0-0`:isX(p)?ret=`>=${M}.${m}.0 <${M}.${+m+1}.0-0`:pr?(debug("replaceTilde pr",pr),ret=`>=${M}.${m}.${p}-${pr} <${M}.${+m+1}.0-0`):ret=`>=${M}.${m}.${p} <${M}.${+m+1}.0-0`,debug("tilde return",ret),ret}))},replaceCarets=(comp,options)=>comp.trim().split(/\s+/).map((c=>replaceCaret(c,options))).join(" "),replaceCaret=(comp,options)=>{debug("caret",comp,options);const r=options.loose?re[t.CARETLOOSE]:re[t.CARET],z=options.includePrerelease?"-0":"";return comp.replace(r,((_,M,m,p,pr)=>{let ret;return debug("caret",comp,_,M,m,p,pr),isX(M)?ret="":isX(m)?ret=`>=${M}.0.0${z} <${+M+1}.0.0-0`:isX(p)?ret="0"===M?`>=${M}.${m}.0${z} <${M}.${+m+1}.0-0`:`>=${M}.${m}.0${z} <${+M+1}.0.0-0`:pr?(debug("replaceCaret pr",pr),ret="0"===M?"0"===m?`>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p+1}-0`:`>=${M}.${m}.${p}-${pr} <${M}.${+m+1}.0-0`:`>=${M}.${m}.${p}-${pr} <${+M+1}.0.0-0`):(debug("no pr"),ret="0"===M?"0"===m?`>=${M}.${m}.${p}${z} <${M}.${m}.${+p+1}-0`:`>=${M}.${m}.${p}${z} <${M}.${+m+1}.0-0`:`>=${M}.${m}.${p} <${+M+1}.0.0-0`),debug("caret return",ret),ret}))},replaceXRanges=(comp,options)=>(debug("replaceXRanges",comp,options),comp.split(/\s+/).map((c=>replaceXRange(c,options))).join(" ")),replaceXRange=(comp,options)=>{comp=comp.trim();const r=options.loose?re[t.XRANGELOOSE]:re[t.XRANGE];return comp.replace(r,((ret,gtlt,M,m,p,pr)=>{debug("xRange",comp,ret,gtlt,M,m,p,pr);const xM=isX(M),xm=xM||isX(m),xp=xm||isX(p),anyX=xp;return "="===gtlt&&anyX&&(gtlt=""),pr=options.includePrerelease?"-0":"",xM?ret=">"===gtlt||"<"===gtlt?"<0.0.0-0":"*":gtlt&&anyX?(xm&&(m=0),p=0,">"===gtlt?(gtlt=">=",xm?(M=+M+1,m=0,p=0):(m=+m+1,p=0)):"<="===gtlt&&(gtlt="<",xm?M=+M+1:m=+m+1),"<"===gtlt&&(pr="-0"),ret=`${gtlt+M}.${m}.${p}${pr}`):xm?ret=`>=${M}.0.0${pr} <${+M+1}.0.0-0`:xp&&(ret=`>=${M}.${m}.0${pr} <${M}.${+m+1}.0-0`),debug("xRange return",ret),ret}))},replaceStars=(comp,options)=>(debug("replaceStars",comp,options),comp.trim().replace(re[t.STAR],"")),replaceGTE0=(comp,options)=>(debug("replaceGTE0",comp,options),comp.trim().replace(re[options.includePrerelease?t.GTE0PRE:t.GTE0],"")),hyphenReplace=incPr=>($0,from,fM,fm,fp,fpr,fb,to,tM,tm,tp,tpr,tb)=>`${from=isX(fM)?"":isX(fm)?`>=${fM}.0.0${incPr?"-0":""}`:isX(fp)?`>=${fM}.${fm}.0${incPr?"-0":""}`:fpr?`>=${from}`:`>=${from}${incPr?"-0":""}`} ${to=isX(tM)?"":isX(tm)?`<${+tM+1}.0.0-0`:isX(tp)?`<${tM}.${+tm+1}.0-0`:tpr?`<=${tM}.${tm}.${tp}-${tpr}`:incPr?`<${tM}.${tm}.${+tp+1}-0`:`<=${to}`}`.trim(),testSet=(set,version,options)=>{for(let i=0;i<set.length;i++)if(!set[i].test(version))return !1;if(version.prerelease.length&&!options.includePrerelease){for(let i=0;i<set.length;i++)if(debug(set[i].semver),set[i].semver!==Comparator.ANY&&set[i].semver.prerelease.length>0){const allowed=set[i].semver;if(allowed.major===version.major&&allowed.minor===version.minor&&allowed.patch===version.patch)return !0}return !1}return !0};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js":(module,__unused_webpack_exports,__webpack_require__)=>{const debug=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/debug.js"),{MAX_LENGTH,MAX_SAFE_INTEGER}=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/constants.js"),{re,t}=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js"),parseOptions=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/parse-options.js"),{compareIdentifiers}=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/identifiers.js");class SemVer{constructor(version,options){if(options=parseOptions(options),version instanceof SemVer){if(version.loose===!!options.loose&&version.includePrerelease===!!options.includePrerelease)return version;version=version.version;}else if("string"!=typeof version)throw new TypeError(`Invalid Version: ${version}`);if(version.length>MAX_LENGTH)throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);debug("SemVer",version,options),this.options=options,this.loose=!!options.loose,this.includePrerelease=!!options.includePrerelease;const m=version.trim().match(options.loose?re[t.LOOSE]:re[t.FULL]);if(!m)throw new TypeError(`Invalid Version: ${version}`);if(this.raw=version,this.major=+m[1],this.minor=+m[2],this.patch=+m[3],this.major>MAX_SAFE_INTEGER||this.major<0)throw new TypeError("Invalid major version");if(this.minor>MAX_SAFE_INTEGER||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>MAX_SAFE_INTEGER||this.patch<0)throw new TypeError("Invalid patch version");m[4]?this.prerelease=m[4].split(".").map((id=>{if(/^[0-9]+$/.test(id)){const num=+id;if(num>=0&&num<MAX_SAFE_INTEGER)return num}return id})):this.prerelease=[],this.build=m[5]?m[5].split("."):[],this.format();}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(other){if(debug("SemVer.compare",this.version,this.options,other),!(other instanceof SemVer)){if("string"==typeof other&&other===this.version)return 0;other=new SemVer(other,this.options);}return other.version===this.version?0:this.compareMain(other)||this.comparePre(other)}compareMain(other){return other instanceof SemVer||(other=new SemVer(other,this.options)),compareIdentifiers(this.major,other.major)||compareIdentifiers(this.minor,other.minor)||compareIdentifiers(this.patch,other.patch)}comparePre(other){if(other instanceof SemVer||(other=new SemVer(other,this.options)),this.prerelease.length&&!other.prerelease.length)return -1;if(!this.prerelease.length&&other.prerelease.length)return 1;if(!this.prerelease.length&&!other.prerelease.length)return 0;let i=0;do{const a=this.prerelease[i],b=other.prerelease[i];if(debug("prerelease compare",i,a,b),void 0===a&&void 0===b)return 0;if(void 0===b)return 1;if(void 0===a)return -1;if(a!==b)return compareIdentifiers(a,b)}while(++i)}compareBuild(other){other instanceof SemVer||(other=new SemVer(other,this.options));let i=0;do{const a=this.build[i],b=other.build[i];if(debug("prerelease compare",i,a,b),void 0===a&&void 0===b)return 0;if(void 0===b)return 1;if(void 0===a)return -1;if(a!==b)return compareIdentifiers(a,b)}while(++i)}inc(release,identifier){switch(release){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",identifier);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",identifier);break;case"prepatch":this.prerelease.length=0,this.inc("patch",identifier),this.inc("pre",identifier);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",identifier),this.inc("pre",identifier);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else {let i=this.prerelease.length;for(;--i>=0;)"number"==typeof this.prerelease[i]&&(this.prerelease[i]++,i=-2);-1===i&&this.prerelease.push(0);}identifier&&(0===compareIdentifiers(this.prerelease[0],identifier)?isNaN(this.prerelease[1])&&(this.prerelease=[identifier,0]):this.prerelease=[identifier,0]);break;default:throw new Error(`invalid increment argument: ${release}`)}return this.format(),this.raw=this.version,this}}module.exports=SemVer;},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/clean.js":(module,__unused_webpack_exports,__webpack_require__)=>{const parse=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js");module.exports=(version,options)=>{const s=parse(version.trim().replace(/^[=v]+/,""),options);return s?s.version:null};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/cmp.js":(module,__unused_webpack_exports,__webpack_require__)=>{const eq=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/eq.js"),neq=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/neq.js"),gt=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gt.js"),gte=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gte.js"),lt=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lt.js"),lte=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lte.js");module.exports=(a,op,b,loose)=>{switch(op){case"===":return "object"==typeof a&&(a=a.version),"object"==typeof b&&(b=b.version),a===b;case"!==":return "object"==typeof a&&(a=a.version),"object"==typeof b&&(b=b.version),a!==b;case"":case"=":case"==":return eq(a,b,loose);case"!=":return neq(a,b,loose);case">":return gt(a,b,loose);case">=":return gte(a,b,loose);case"<":return lt(a,b,loose);case"<=":return lte(a,b,loose);default:throw new TypeError(`Invalid operator: ${op}`)}};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/coerce.js":(module,__unused_webpack_exports,__webpack_require__)=>{const SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"),parse=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js"),{re,t}=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js");module.exports=(version,options)=>{if(version instanceof SemVer)return version;if("number"==typeof version&&(version=String(version)),"string"!=typeof version)return null;let match=null;if((options=options||{}).rtl){let next;for(;(next=re[t.COERCERTL].exec(version))&&(!match||match.index+match[0].length!==version.length);)match&&next.index+next[0].length===match.index+match[0].length||(match=next),re[t.COERCERTL].lastIndex=next.index+next[1].length+next[2].length;re[t.COERCERTL].lastIndex=-1;}else match=version.match(re[t.COERCE]);return null===match?null:parse(`${match[2]}.${match[3]||"0"}.${match[4]||"0"}`,options)};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare-build.js":(module,__unused_webpack_exports,__webpack_require__)=>{const SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js");module.exports=(a,b,loose)=>{const versionA=new SemVer(a,loose),versionB=new SemVer(b,loose);return versionA.compare(versionB)||versionA.compareBuild(versionB)};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare-loose.js":(module,__unused_webpack_exports,__webpack_require__)=>{const compare=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");module.exports=(a,b)=>compare(a,b,!0);},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js":(module,__unused_webpack_exports,__webpack_require__)=>{const SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js");module.exports=(a,b,loose)=>new SemVer(a,loose).compare(new SemVer(b,loose));},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/diff.js":(module,__unused_webpack_exports,__webpack_require__)=>{const parse=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js"),eq=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/eq.js");module.exports=(version1,version2)=>{if(eq(version1,version2))return null;{const v1=parse(version1),v2=parse(version2),hasPre=v1.prerelease.length||v2.prerelease.length,prefix=hasPre?"pre":"",defaultResult=hasPre?"prerelease":"";for(const key in v1)if(("major"===key||"minor"===key||"patch"===key)&&v1[key]!==v2[key])return prefix+key;return defaultResult}};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/eq.js":(module,__unused_webpack_exports,__webpack_require__)=>{const compare=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");module.exports=(a,b,loose)=>0===compare(a,b,loose);},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gt.js":(module,__unused_webpack_exports,__webpack_require__)=>{const compare=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");module.exports=(a,b,loose)=>compare(a,b,loose)>0;},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gte.js":(module,__unused_webpack_exports,__webpack_require__)=>{const compare=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");module.exports=(a,b,loose)=>compare(a,b,loose)>=0;},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/inc.js":(module,__unused_webpack_exports,__webpack_require__)=>{const SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js");module.exports=(version,release,options,identifier)=>{"string"==typeof options&&(identifier=options,options=void 0);try{return new SemVer(version instanceof SemVer?version.version:version,options).inc(release,identifier).version}catch(er){return null}};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lt.js":(module,__unused_webpack_exports,__webpack_require__)=>{const compare=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");module.exports=(a,b,loose)=>compare(a,b,loose)<0;},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lte.js":(module,__unused_webpack_exports,__webpack_require__)=>{const compare=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");module.exports=(a,b,loose)=>compare(a,b,loose)<=0;},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/major.js":(module,__unused_webpack_exports,__webpack_require__)=>{const SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js");module.exports=(a,loose)=>new SemVer(a,loose).major;},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/minor.js":(module,__unused_webpack_exports,__webpack_require__)=>{const SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js");module.exports=(a,loose)=>new SemVer(a,loose).minor;},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/neq.js":(module,__unused_webpack_exports,__webpack_require__)=>{const compare=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");module.exports=(a,b,loose)=>0!==compare(a,b,loose);},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js":(module,__unused_webpack_exports,__webpack_require__)=>{const{MAX_LENGTH}=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/constants.js"),{re,t}=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js"),SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"),parseOptions=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/parse-options.js");module.exports=(version,options)=>{if(options=parseOptions(options),version instanceof SemVer)return version;if("string"!=typeof version)return null;if(version.length>MAX_LENGTH)return null;if(!(options.loose?re[t.LOOSE]:re[t.FULL]).test(version))return null;try{return new SemVer(version,options)}catch(er){return null}};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/patch.js":(module,__unused_webpack_exports,__webpack_require__)=>{const SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js");module.exports=(a,loose)=>new SemVer(a,loose).patch;},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/prerelease.js":(module,__unused_webpack_exports,__webpack_require__)=>{const parse=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js");module.exports=(version,options)=>{const parsed=parse(version,options);return parsed&&parsed.prerelease.length?parsed.prerelease:null};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/rcompare.js":(module,__unused_webpack_exports,__webpack_require__)=>{const compare=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");module.exports=(a,b,loose)=>compare(b,a,loose);},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/rsort.js":(module,__unused_webpack_exports,__webpack_require__)=>{const compareBuild=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare-build.js");module.exports=(list,loose)=>list.sort(((a,b)=>compareBuild(b,a,loose)));},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/satisfies.js":(module,__unused_webpack_exports,__webpack_require__)=>{const Range=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");module.exports=(version,range,options)=>{try{range=new Range(range,options);}catch(er){return !1}return range.test(version)};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/sort.js":(module,__unused_webpack_exports,__webpack_require__)=>{const compareBuild=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare-build.js");module.exports=(list,loose)=>list.sort(((a,b)=>compareBuild(a,b,loose)));},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/valid.js":(module,__unused_webpack_exports,__webpack_require__)=>{const parse=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js");module.exports=(version,options)=>{const v=parse(version,options);return v?v.version:null};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{const internalRe=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js"),constants=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/constants.js"),SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"),identifiers=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/identifiers.js"),parse=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/parse.js"),valid=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/valid.js"),clean=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/clean.js"),inc=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/inc.js"),diff=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/diff.js"),major=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/major.js"),minor=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/minor.js"),patch=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/patch.js"),prerelease=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/prerelease.js"),compare=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js"),rcompare=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/rcompare.js"),compareLoose=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare-loose.js"),compareBuild=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare-build.js"),sort=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/sort.js"),rsort=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/rsort.js"),gt=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gt.js"),lt=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lt.js"),eq=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/eq.js"),neq=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/neq.js"),gte=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gte.js"),lte=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lte.js"),cmp=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/cmp.js"),coerce=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/coerce.js"),Comparator=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/comparator.js"),Range=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js"),satisfies=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/satisfies.js"),toComparators=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/to-comparators.js"),maxSatisfying=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/max-satisfying.js"),minSatisfying=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/min-satisfying.js"),minVersion=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/min-version.js"),validRange=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/valid.js"),outside=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/outside.js"),gtr=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/gtr.js"),ltr=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/ltr.js"),intersects=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/intersects.js"),simplifyRange=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/simplify.js"),subset=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/subset.js");module.exports={parse,valid,clean,inc,diff,major,minor,patch,prerelease,compare,rcompare,compareLoose,compareBuild,sort,rsort,gt,lt,eq,neq,gte,lte,cmp,coerce,Comparator,Range,satisfies,toComparators,maxSatisfying,minSatisfying,minVersion,validRange,outside,gtr,ltr,intersects,simplifyRange,subset,SemVer,re:internalRe.re,src:internalRe.src,tokens:internalRe.t,SEMVER_SPEC_VERSION:constants.SEMVER_SPEC_VERSION,compareIdentifiers:identifiers.compareIdentifiers,rcompareIdentifiers:identifiers.rcompareIdentifiers};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/constants.js":module=>{const MAX_SAFE_INTEGER=Number.MAX_SAFE_INTEGER||9007199254740991;module.exports={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER,MAX_SAFE_COMPONENT_LENGTH:16};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/debug.js":module=>{const debug="object"==typeof process&&process.env&&({}).NODE_DEBUG&&/\bsemver\b/i.test(({}).NODE_DEBUG)?(...args)=>console.error("SEMVER",...args):()=>{};module.exports=debug;},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/identifiers.js":module=>{const numeric=/^[0-9]+$/,compareIdentifiers=(a,b)=>{const anum=numeric.test(a),bnum=numeric.test(b);return anum&&bnum&&(a=+a,b=+b),a===b?0:anum&&!bnum?-1:bnum&&!anum?1:a<b?-1:1};module.exports={compareIdentifiers,rcompareIdentifiers:(a,b)=>compareIdentifiers(b,a)};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/parse-options.js":module=>{const opts=["includePrerelease","loose","rtl"];module.exports=options=>options?"object"!=typeof options?{loose:!0}:opts.filter((k=>options[k])).reduce(((o,k)=>(o[k]=!0,o)),{}):{};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js":(module,exports,__webpack_require__)=>{const{MAX_SAFE_COMPONENT_LENGTH}=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/constants.js"),debug=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/debug.js"),re=(exports=module.exports={}).re=[],src=exports.src=[],t=exports.t={};let R=0;const createToken=(name,value,isGlobal)=>{const index=R++;debug(name,index,value),t[name]=index,src[index]=value,re[index]=new RegExp(value,isGlobal?"g":void 0);};createToken("NUMERICIDENTIFIER","0|[1-9]\\d*"),createToken("NUMERICIDENTIFIERLOOSE","[0-9]+"),createToken("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),createToken("MAINVERSION",`(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`),createToken("MAINVERSIONLOOSE",`(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`),createToken("PRERELEASEIDENTIFIER",`(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`),createToken("PRERELEASEIDENTIFIERLOOSE",`(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`),createToken("PRERELEASE",`(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`),createToken("PRERELEASELOOSE",`(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`),createToken("BUILDIDENTIFIER","[0-9A-Za-z-]+"),createToken("BUILD",`(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`),createToken("FULLPLAIN",`v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`),createToken("FULL",`^${src[t.FULLPLAIN]}$`),createToken("LOOSEPLAIN",`[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`),createToken("LOOSE",`^${src[t.LOOSEPLAIN]}$`),createToken("GTLT","((?:<|>)?=?)"),createToken("XRANGEIDENTIFIERLOOSE",`${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),createToken("XRANGEIDENTIFIER",`${src[t.NUMERICIDENTIFIER]}|x|X|\\*`),createToken("XRANGEPLAIN",`[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`),createToken("XRANGEPLAINLOOSE",`[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`),createToken("XRANGE",`^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`),createToken("XRANGELOOSE",`^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`),createToken("COERCE",`(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`),createToken("COERCERTL",src[t.COERCE],!0),createToken("LONETILDE","(?:~>?)"),createToken("TILDETRIM",`(\\s*)${src[t.LONETILDE]}\\s+`,!0),exports.tildeTrimReplace="$1~",createToken("TILDE",`^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`),createToken("TILDELOOSE",`^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`),createToken("LONECARET","(?:\\^)"),createToken("CARETTRIM",`(\\s*)${src[t.LONECARET]}\\s+`,!0),exports.caretTrimReplace="$1^",createToken("CARET",`^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`),createToken("CARETLOOSE",`^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`),createToken("COMPARATORLOOSE",`^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`),createToken("COMPARATOR",`^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`),createToken("COMPARATORTRIM",`(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`,!0),exports.comparatorTrimReplace="$1$2$3",createToken("HYPHENRANGE",`^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`),createToken("HYPHENRANGELOOSE",`^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`),createToken("STAR","(<|>)?=?\\s*\\*"),createToken("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$"),createToken("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$");},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/gtr.js":(module,__unused_webpack_exports,__webpack_require__)=>{const outside=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/outside.js");module.exports=(version,range,options)=>outside(version,range,">",options);},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/intersects.js":(module,__unused_webpack_exports,__webpack_require__)=>{const Range=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");module.exports=(r1,r2,options)=>(r1=new Range(r1,options),r2=new Range(r2,options),r1.intersects(r2));},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/ltr.js":(module,__unused_webpack_exports,__webpack_require__)=>{const outside=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/outside.js");module.exports=(version,range,options)=>outside(version,range,"<",options);},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/max-satisfying.js":(module,__unused_webpack_exports,__webpack_require__)=>{const SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"),Range=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");module.exports=(versions,range,options)=>{let max=null,maxSV=null,rangeObj=null;try{rangeObj=new Range(range,options);}catch(er){return null}return versions.forEach((v=>{rangeObj.test(v)&&(max&&-1!==maxSV.compare(v)||(max=v,maxSV=new SemVer(max,options)));})),max};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/min-satisfying.js":(module,__unused_webpack_exports,__webpack_require__)=>{const SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"),Range=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");module.exports=(versions,range,options)=>{let min=null,minSV=null,rangeObj=null;try{rangeObj=new Range(range,options);}catch(er){return null}return versions.forEach((v=>{rangeObj.test(v)&&(min&&1!==minSV.compare(v)||(min=v,minSV=new SemVer(min,options)));})),min};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/min-version.js":(module,__unused_webpack_exports,__webpack_require__)=>{const SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"),Range=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js"),gt=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gt.js");module.exports=(range,loose)=>{range=new Range(range,loose);let minver=new SemVer("0.0.0");if(range.test(minver))return minver;if(minver=new SemVer("0.0.0-0"),range.test(minver))return minver;minver=null;for(let i=0;i<range.set.length;++i){const comparators=range.set[i];let setMin=null;comparators.forEach((comparator=>{const compver=new SemVer(comparator.semver.version);switch(comparator.operator){case">":0===compver.prerelease.length?compver.patch++:compver.prerelease.push(0),compver.raw=compver.format();case"":case">=":setMin&&!gt(compver,setMin)||(setMin=compver);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${comparator.operator}`)}})),!setMin||minver&&!gt(minver,setMin)||(minver=setMin);}return minver&&range.test(minver)?minver:null};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/outside.js":(module,__unused_webpack_exports,__webpack_require__)=>{const SemVer=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"),Comparator=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/comparator.js"),{ANY}=Comparator,Range=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js"),satisfies=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/satisfies.js"),gt=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gt.js"),lt=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lt.js"),lte=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lte.js"),gte=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gte.js");module.exports=(version,range,hilo,options)=>{let gtfn,ltefn,ltfn,comp,ecomp;switch(version=new SemVer(version,options),range=new Range(range,options),hilo){case">":gtfn=gt,ltefn=lte,ltfn=lt,comp=">",ecomp=">=";break;case"<":gtfn=lt,ltefn=gte,ltfn=gt,comp="<",ecomp="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(satisfies(version,range,options))return !1;for(let i=0;i<range.set.length;++i){const comparators=range.set[i];let high=null,low=null;if(comparators.forEach((comparator=>{comparator.semver===ANY&&(comparator=new Comparator(">=0.0.0")),high=high||comparator,low=low||comparator,gtfn(comparator.semver,high.semver,options)?high=comparator:ltfn(comparator.semver,low.semver,options)&&(low=comparator);})),high.operator===comp||high.operator===ecomp)return !1;if((!low.operator||low.operator===comp)&&ltefn(version,low.semver))return !1;if(low.operator===ecomp&&ltfn(version,low.semver))return !1}return !0};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/simplify.js":(module,__unused_webpack_exports,__webpack_require__)=>{const satisfies=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/satisfies.js"),compare=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js");module.exports=(versions,range,options)=>{const set=[];let first=null,prev=null;const v=versions.sort(((a,b)=>compare(a,b,options)));for(const version of v){satisfies(version,range,options)?(prev=version,first||(first=version)):(prev&&set.push([first,prev]),prev=null,first=null);}first&&set.push([first,null]);const ranges=[];for(const[min,max]of set)min===max?ranges.push(min):max||min!==v[0]?max?min===v[0]?ranges.push(`<=${max}`):ranges.push(`${min} - ${max}`):ranges.push(`>=${min}`):ranges.push("*");const simplified=ranges.join(" || "),original="string"==typeof range.raw?range.raw:String(range);return simplified.length<original.length?simplified:range};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/subset.js":(module,__unused_webpack_exports,__webpack_require__)=>{const Range=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js"),Comparator=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/comparator.js"),{ANY}=Comparator,satisfies=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/satisfies.js"),compare=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js"),simpleSubset=(sub,dom,options)=>{if(sub===dom)return !0;if(1===sub.length&&sub[0].semver===ANY){if(1===dom.length&&dom[0].semver===ANY)return !0;sub=options.includePrerelease?[new Comparator(">=0.0.0-0")]:[new Comparator(">=0.0.0")];}if(1===dom.length&&dom[0].semver===ANY){if(options.includePrerelease)return !0;dom=[new Comparator(">=0.0.0")];}const eqSet=new Set;let gt,lt,gtltComp,higher,lower,hasDomLT,hasDomGT;for(const c of sub)">"===c.operator||">="===c.operator?gt=higherGT(gt,c,options):"<"===c.operator||"<="===c.operator?lt=lowerLT(lt,c,options):eqSet.add(c.semver);if(eqSet.size>1)return null;if(gt&&lt){if(gtltComp=compare(gt.semver,lt.semver,options),gtltComp>0)return null;if(0===gtltComp&&(">="!==gt.operator||"<="!==lt.operator))return null}for(const eq of eqSet){if(gt&&!satisfies(eq,String(gt),options))return null;if(lt&&!satisfies(eq,String(lt),options))return null;for(const c of dom)if(!satisfies(eq,String(c),options))return !1;return !0}let needDomLTPre=!(!lt||options.includePrerelease||!lt.semver.prerelease.length)&&lt.semver,needDomGTPre=!(!gt||options.includePrerelease||!gt.semver.prerelease.length)&&gt.semver;needDomLTPre&&1===needDomLTPre.prerelease.length&&"<"===lt.operator&&0===needDomLTPre.prerelease[0]&&(needDomLTPre=!1);for(const c of dom){if(hasDomGT=hasDomGT||">"===c.operator||">="===c.operator,hasDomLT=hasDomLT||"<"===c.operator||"<="===c.operator,gt)if(needDomGTPre&&c.semver.prerelease&&c.semver.prerelease.length&&c.semver.major===needDomGTPre.major&&c.semver.minor===needDomGTPre.minor&&c.semver.patch===needDomGTPre.patch&&(needDomGTPre=!1),">"===c.operator||">="===c.operator){if(higher=higherGT(gt,c,options),higher===c&&higher!==gt)return !1}else if(">="===gt.operator&&!satisfies(gt.semver,String(c),options))return !1;if(lt)if(needDomLTPre&&c.semver.prerelease&&c.semver.prerelease.length&&c.semver.major===needDomLTPre.major&&c.semver.minor===needDomLTPre.minor&&c.semver.patch===needDomLTPre.patch&&(needDomLTPre=!1),"<"===c.operator||"<="===c.operator){if(lower=lowerLT(lt,c,options),lower===c&&lower!==lt)return !1}else if("<="===lt.operator&&!satisfies(lt.semver,String(c),options))return !1;if(!c.operator&&(lt||gt)&&0!==gtltComp)return !1}return !(gt&&hasDomLT&&!lt&&0!==gtltComp)&&(!(lt&&hasDomGT&&!gt&&0!==gtltComp)&&(!needDomGTPre&&!needDomLTPre))},higherGT=(a,b,options)=>{if(!a)return b;const comp=compare(a.semver,b.semver,options);return comp>0?a:comp<0||">"===b.operator&&">="===a.operator?b:a},lowerLT=(a,b,options)=>{if(!a)return b;const comp=compare(a.semver,b.semver,options);return comp<0?a:comp>0||"<"===b.operator&&"<="===a.operator?b:a};module.exports=(sub,dom,options={})=>{if(sub===dom)return !0;sub=new Range(sub,options),dom=new Range(dom,options);let sawNonNull=!1;OUTER:for(const simpleSub of sub.set){for(const simpleDom of dom.set){const isSub=simpleSubset(simpleSub,simpleDom,options);if(sawNonNull=sawNonNull||null!==isSub,isSub)continue OUTER}if(sawNonNull)return !1}return !0};},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/to-comparators.js":(module,__unused_webpack_exports,__webpack_require__)=>{const Range=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");module.exports=(range,options)=>new Range(range,options).set.map((comp=>comp.map((c=>c.value)).join(" ").trim().split(" ")));},"./node_modules/.pnpm/semver@7.3.8/node_modules/semver/ranges/valid.js":(module,__unused_webpack_exports,__webpack_require__)=>{const Range=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js");module.exports=(range,options)=>{try{return new Range(range,options).range||"*"}catch(er){return null}};},"./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js":module=>{module.exports=function(Yallist){Yallist.prototype[Symbol.iterator]=function*(){for(let walker=this.head;walker;walker=walker.next)yield walker.value;};};},"./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js":(module,__unused_webpack_exports,__webpack_require__)=>{function Yallist(list){var self=this;if(self instanceof Yallist||(self=new Yallist),self.tail=null,self.head=null,self.length=0,list&&"function"==typeof list.forEach)list.forEach((function(item){self.push(item);}));else if(arguments.length>0)for(var i=0,l=arguments.length;i<l;i++)self.push(arguments[i]);return self}function insert(self,node,value){var inserted=node===self.head?new Node(value,null,node,self):new Node(value,node,node.next,self);return null===inserted.next&&(self.tail=inserted),null===inserted.prev&&(self.head=inserted),self.length++,inserted}function push(self,item){self.tail=new Node(item,self.tail,null,self),self.head||(self.head=self.tail),self.length++;}function unshift(self,item){self.head=new Node(item,null,self.head,self),self.tail||(self.tail=self.head),self.length++;}function Node(value,prev,next,list){if(!(this instanceof Node))return new Node(value,prev,next,list);this.list=list,this.value=value,prev?(prev.next=this,this.prev=prev):this.prev=null,next?(next.prev=this,this.next=next):this.next=null;}module.exports=Yallist,Yallist.Node=Node,Yallist.create=Yallist,Yallist.prototype.removeNode=function(node){if(node.list!==this)throw new Error("removing node which does not belong to this list");var next=node.next,prev=node.prev;return next&&(next.prev=prev),prev&&(prev.next=next),node===this.head&&(this.head=next),node===this.tail&&(this.tail=prev),node.list.length--,node.next=null,node.prev=null,node.list=null,next},Yallist.prototype.unshiftNode=function(node){if(node!==this.head){node.list&&node.list.removeNode(node);var head=this.head;node.list=this,node.next=head,head&&(head.prev=node),this.head=node,this.tail||(this.tail=node),this.length++;}},Yallist.prototype.pushNode=function(node){if(node!==this.tail){node.list&&node.list.removeNode(node);var tail=this.tail;node.list=this,node.prev=tail,tail&&(tail.next=node),this.tail=node,this.head||(this.head=node),this.length++;}},Yallist.prototype.push=function(){for(var i=0,l=arguments.length;i<l;i++)push(this,arguments[i]);return this.length},Yallist.prototype.unshift=function(){for(var i=0,l=arguments.length;i<l;i++)unshift(this,arguments[i]);return this.length},Yallist.prototype.pop=function(){if(this.tail){var res=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,res}},Yallist.prototype.shift=function(){if(this.head){var res=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,res}},Yallist.prototype.forEach=function(fn,thisp){thisp=thisp||this;for(var walker=this.head,i=0;null!==walker;i++)fn.call(thisp,walker.value,i,this),walker=walker.next;},Yallist.prototype.forEachReverse=function(fn,thisp){thisp=thisp||this;for(var walker=this.tail,i=this.length-1;null!==walker;i--)fn.call(thisp,walker.value,i,this),walker=walker.prev;},Yallist.prototype.get=function(n){for(var i=0,walker=this.head;null!==walker&&i<n;i++)walker=walker.next;if(i===n&&null!==walker)return walker.value},Yallist.prototype.getReverse=function(n){for(var i=0,walker=this.tail;null!==walker&&i<n;i++)walker=walker.prev;if(i===n&&null!==walker)return walker.value},Yallist.prototype.map=function(fn,thisp){thisp=thisp||this;for(var res=new Yallist,walker=this.head;null!==walker;)res.push(fn.call(thisp,walker.value,this)),walker=walker.next;return res},Yallist.prototype.mapReverse=function(fn,thisp){thisp=thisp||this;for(var res=new Yallist,walker=this.tail;null!==walker;)res.push(fn.call(thisp,walker.value,this)),walker=walker.prev;return res},Yallist.prototype.reduce=function(fn,initial){var acc,walker=this.head;if(arguments.length>1)acc=initial;else {if(!this.head)throw new TypeError("Reduce of empty list with no initial value");walker=this.head.next,acc=this.head.value;}for(var i=0;null!==walker;i++)acc=fn(acc,walker.value,i),walker=walker.next;return acc},Yallist.prototype.reduceReverse=function(fn,initial){var acc,walker=this.tail;if(arguments.length>1)acc=initial;else {if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");walker=this.tail.prev,acc=this.tail.value;}for(var i=this.length-1;null!==walker;i--)acc=fn(acc,walker.value,i),walker=walker.prev;return acc},Yallist.prototype.toArray=function(){for(var arr=new Array(this.length),i=0,walker=this.head;null!==walker;i++)arr[i]=walker.value,walker=walker.next;return arr},Yallist.prototype.toArrayReverse=function(){for(var arr=new Array(this.length),i=0,walker=this.tail;null!==walker;i++)arr[i]=walker.value,walker=walker.prev;return arr},Yallist.prototype.slice=function(from,to){(to=to||this.length)<0&&(to+=this.length),(from=from||0)<0&&(from+=this.length);var ret=new Yallist;if(to<from||to<0)return ret;from<0&&(from=0),to>this.length&&(to=this.length);for(var i=0,walker=this.head;null!==walker&&i<from;i++)walker=walker.next;for(;null!==walker&&i<to;i++,walker=walker.next)ret.push(walker.value);return ret},Yallist.prototype.sliceReverse=function(from,to){(to=to||this.length)<0&&(to+=this.length),(from=from||0)<0&&(from+=this.length);var ret=new Yallist;if(to<from||to<0)return ret;from<0&&(from=0),to>this.length&&(to=this.length);for(var i=this.length,walker=this.tail;null!==walker&&i>to;i--)walker=walker.prev;for(;null!==walker&&i>from;i--,walker=walker.prev)ret.push(walker.value);return ret},Yallist.prototype.splice=function(start,deleteCount,...nodes){start>this.length&&(start=this.length-1),start<0&&(start=this.length+start);for(var i=0,walker=this.head;null!==walker&&i<start;i++)walker=walker.next;var ret=[];for(i=0;walker&&i<deleteCount;i++)ret.push(walker.value),walker=this.removeNode(walker);null===walker&&(walker=this.tail),walker!==this.head&&walker!==this.tail&&(walker=walker.prev);for(i=0;i<nodes.length;i++)walker=insert(this,walker,nodes[i]);return ret},Yallist.prototype.reverse=function(){for(var head=this.head,tail=this.tail,walker=head;null!==walker;walker=walker.prev){var p=walker.prev;walker.prev=walker.next,walker.next=p;}return this.head=tail,this.tail=head,this};try{__webpack_require__("./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js")(Yallist);}catch(er){}},crypto:module=>{module.exports=require$$3;},fs:module=>{module.exports=require$$3;},module:module=>{module.exports=require$$3;},path:module=>{module.exports=require$$3;}},__webpack_module_cache__={};function __webpack_require__(moduleId){var cachedModule=__webpack_module_cache__[moduleId];if(void 0!==cachedModule)return cachedModule.exports;var module=__webpack_module_cache__[moduleId]={id:moduleId,loaded:!1,exports:{}};return __webpack_modules__[moduleId](module,module.exports,__webpack_require__),module.loaded=!0,module.exports}__webpack_require__.n=module=>{var getter=module&&module.__esModule?()=>module.default:()=>module;return __webpack_require__.d(getter,{a:getter}),getter},__webpack_require__.d=(exports,definition)=>{for(var key in definition)__webpack_require__.o(definition,key)&&!__webpack_require__.o(exports,key)&&Object.defineProperty(exports,key,{enumerable:!0,get:definition[key]});},__webpack_require__.o=(obj,prop)=>Object.prototype.hasOwnProperty.call(obj,prop),__webpack_require__.nmd=module=>(module.paths=[],module.children||(module.children=[]),module);var __webpack_exports__={};(()=>{__webpack_require__.d(__webpack_exports__,{default:()=>createJITI});var external_fs_=__webpack_require__("fs"),external_module_=__webpack_require__("module");const external_perf_hooks_namespaceObject=require$$3,external_os_namespaceObject=require$$3,external_vm_namespaceObject=require$$3;var external_vm_default=__webpack_require__.n(external_vm_namespaceObject);const external_url_namespaceObject=require$$3;function normalizeWindowsPath(input=""){return input&&input.includes("\\")?input.replace(/\\/g,"/"):input}const _UNC_REGEX=/^[/\\]{2}/,_IS_ABSOLUTE_RE=/^[/\\](?![/\\])|^[/\\]{2}(?!\.)|^[A-Za-z]:[/\\]/,_DRIVE_LETTER_RE=/^[A-Za-z]:$/,normalize=function(path){if(0===path.length)return ".";const isUNCPath=(path=normalizeWindowsPath(path)).match(_UNC_REGEX),isPathAbsolute=isAbsolute(path),trailingSeparator="/"===path[path.length-1];return 0===(path=normalizeString(path,!isPathAbsolute)).length?isPathAbsolute?"/":trailingSeparator?"./":".":(trailingSeparator&&(path+="/"),_DRIVE_LETTER_RE.test(path)&&(path+="/"),isUNCPath?isPathAbsolute?`//${path}`:`//./${path}`:isPathAbsolute&&!isAbsolute(path)?`/${path}`:path)},join=function(...arguments_){if(0===arguments_.length)return ".";let joined;for(const argument of arguments_)argument&&argument.length>0&&(void 0===joined?joined=argument:joined+=`/${argument}`);return void 0===joined?".":normalize(joined.replace(/\/\/+/g,"/"))};function normalizeString(path,allowAboveRoot){let res="",lastSegmentLength=0,lastSlash=-1,dots=0,char=null;for(let index=0;index<=path.length;++index){if(index<path.length)char=path[index];else {if("/"===char)break;char="/";}if("/"===char){if(lastSlash===index-1||1===dots);else if(2===dots){if(res.length<2||2!==lastSegmentLength||"."!==res[res.length-1]||"."!==res[res.length-2]){if(res.length>2){const lastSlashIndex=res.lastIndexOf("/");-1===lastSlashIndex?(res="",lastSegmentLength=0):(res=res.slice(0,lastSlashIndex),lastSegmentLength=res.length-1-res.lastIndexOf("/")),lastSlash=index,dots=0;continue}if(res.length>0){res="",lastSegmentLength=0,lastSlash=index,dots=0;continue}}allowAboveRoot&&(res+=res.length>0?"/..":"..",lastSegmentLength=2);}else res.length>0?res+=`/${path.slice(lastSlash+1,index)}`:res=path.slice(lastSlash+1,index),lastSegmentLength=index-lastSlash-1;lastSlash=index,dots=0;}else "."===char&&-1!==dots?++dots:dots=-1;}return res}const isAbsolute=function(p){return _IS_ABSOLUTE_RE.test(p)},_EXTNAME_RE=/.(\.[^./]+)$/,pathe_92c04245_extname=function(p){const match=_EXTNAME_RE.exec(normalizeWindowsPath(p));return match&&match[1]||""},pathe_92c04245_dirname=function(p){const segments=normalizeWindowsPath(p).replace(/\/$/,"").split("/").slice(0,-1);return 1===segments.length&&_DRIVE_LETTER_RE.test(segments[0])&&(segments[0]+="/"),segments.join("/")||(isAbsolute(p)?"/":".")},basename=function(p,extension){const lastSegment=normalizeWindowsPath(p).split("/").pop();return extension&&lastSegment.endsWith(extension)?lastSegment.slice(0,-extension.length):lastSegment},suspectProtoRx=/"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/,suspectConstructorRx=/"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/,JsonSigRx=/^\s*["[{]|^\s*-?\d[\d.]{0,14}\s*$/;function jsonParseTransform(key,value){if(!("__proto__"===key||"constructor"===key&&value&&"object"==typeof value&&"prototype"in value))return value}function destr(value,options={}){if("string"!=typeof value)return value;const _lval=value.toLowerCase().trim();if("true"===_lval)return !0;if("false"===_lval)return !1;if("null"===_lval)return null;if("nan"===_lval)return Number.NaN;if("infinity"===_lval)return Number.POSITIVE_INFINITY;if("undefined"!==_lval){if(!JsonSigRx.test(value)){if(options.strict)throw new SyntaxError("Invalid JSON");return value}try{return suspectProtoRx.test(value)||suspectConstructorRx.test(value)?JSON.parse(value,jsonParseTransform):JSON.parse(value)}catch(error){if(options.strict)throw error;return value}}}function escapeStringRegexp(string){if("string"!=typeof string)throw new TypeError("Expected a string");return string.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&").replace(/-/g,"\\x2d")}var create_require=__webpack_require__("./node_modules/.pnpm/create-require@1.1.1/node_modules/create-require/create-require.js"),create_require_default=__webpack_require__.n(create_require),semver=__webpack_require__("./node_modules/.pnpm/semver@7.3.8/node_modules/semver/index.js");const pathSeparators=new Set(["/","\\",void 0]),normalizedAliasSymbol=Symbol.for("pathe:normalizedAlias");function normalizeAliases(_aliases){if(_aliases[normalizedAliasSymbol])return _aliases;const aliases=Object.fromEntries(Object.entries(_aliases).sort((([a],[b])=>function(a,b){return b.split("/").length-a.split("/").length}(a,b))));for(const key in aliases)for(const alias in aliases)alias===key||key.startsWith(alias)||aliases[key].startsWith(alias)&&pathSeparators.has(aliases[key][alias.length])&&(aliases[key]=aliases[alias]+aliases[key].slice(alias.length));return Object.defineProperty(aliases,normalizedAliasSymbol,{value:!0,enumerable:!1}),aliases}var lib=__webpack_require__("./node_modules/.pnpm/pirates@4.0.5/node_modules/pirates/lib/index.js"),object_hash=__webpack_require__("./node_modules/.pnpm/object-hash@3.0.0/node_modules/object-hash/index.js"),object_hash_default=__webpack_require__.n(object_hash),astralIdentifierCodes=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239],astralIdentifierStartCodes=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191],nonASCIIidentifierStartChars="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",reservedWords={3:"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",5:"class enum extends super const export import",6:"enum",strict:"implements interface let package private protected public static yield",strictBind:"eval arguments"},ecma5AndLessKeywords="break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this",keywords$1={5:ecma5AndLessKeywords,"5module":ecma5AndLessKeywords+" export import",6:ecma5AndLessKeywords+" const class extends export import super"},keywordRelationalOperator=/^in(stanceof)?$/,nonASCIIidentifierStart=new RegExp("["+nonASCIIidentifierStartChars+"]"),nonASCIIidentifier=new RegExp("["+nonASCIIidentifierStartChars+"‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿]");function isInAstralSet(code,set){for(var pos=65536,i=0;i<set.length;i+=2){if((pos+=set[i])>code)return !1;if((pos+=set[i+1])>=code)return !0}return !1}function isIdentifierStart(code,astral){return code<65?36===code:code<91||(code<97?95===code:code<123||(code<=65535?code>=170&&nonASCIIidentifierStart.test(String.fromCharCode(code)):!1!==astral&&isInAstralSet(code,astralIdentifierStartCodes)))}function isIdentifierChar(code,astral){return code<48?36===code:code<58||!(code<65)&&(code<91||(code<97?95===code:code<123||(code<=65535?code>=170&&nonASCIIidentifier.test(String.fromCharCode(code)):!1!==astral&&(isInAstralSet(code,astralIdentifierStartCodes)||isInAstralSet(code,astralIdentifierCodes)))))}var TokenType=function(label,conf){void 0===conf&&(conf={}),this.label=label,this.keyword=conf.keyword,this.beforeExpr=!!conf.beforeExpr,this.startsExpr=!!conf.startsExpr,this.isLoop=!!conf.isLoop,this.isAssign=!!conf.isAssign,this.prefix=!!conf.prefix,this.postfix=!!conf.postfix,this.binop=conf.binop||null,this.updateContext=null;};function binop(name,prec){return new TokenType(name,{beforeExpr:!0,binop:prec})}var beforeExpr={beforeExpr:!0},startsExpr={startsExpr:!0},keywords={};function kw(name,options){return void 0===options&&(options={}),options.keyword=name,keywords[name]=new TokenType(name,options)}var types$1={num:new TokenType("num",startsExpr),regexp:new TokenType("regexp",startsExpr),string:new TokenType("string",startsExpr),name:new TokenType("name",startsExpr),privateId:new TokenType("privateId",startsExpr),eof:new TokenType("eof"),bracketL:new TokenType("[",{beforeExpr:!0,startsExpr:!0}),bracketR:new TokenType("]"),braceL:new TokenType("{",{beforeExpr:!0,startsExpr:!0}),braceR:new TokenType("}"),parenL:new TokenType("(",{beforeExpr:!0,startsExpr:!0}),parenR:new TokenType(")"),comma:new TokenType(",",beforeExpr),semi:new TokenType(";",beforeExpr),colon:new TokenType(":",beforeExpr),dot:new TokenType("."),question:new TokenType("?",beforeExpr),questionDot:new TokenType("?."),arrow:new TokenType("=>",beforeExpr),template:new TokenType("template"),invalidTemplate:new TokenType("invalidTemplate"),ellipsis:new TokenType("...",beforeExpr),backQuote:new TokenType("`",startsExpr),dollarBraceL:new TokenType("${",{beforeExpr:!0,startsExpr:!0}),eq:new TokenType("=",{beforeExpr:!0,isAssign:!0}),assign:new TokenType("_=",{beforeExpr:!0,isAssign:!0}),incDec:new TokenType("++/--",{prefix:!0,postfix:!0,startsExpr:!0}),prefix:new TokenType("!/~",{beforeExpr:!0,prefix:!0,startsExpr:!0}),logicalOR:binop("||",1),logicalAND:binop("&&",2),bitwiseOR:binop("|",3),bitwiseXOR:binop("^",4),bitwiseAND:binop("&",5),equality:binop("==/!=/===/!==",6),relational:binop("</>/<=/>=",7),bitShift:binop("<</>>/>>>",8),plusMin:new TokenType("+/-",{beforeExpr:!0,binop:9,prefix:!0,startsExpr:!0}),modulo:binop("%",10),star:binop("*",10),slash:binop("/",10),starstar:new TokenType("**",{beforeExpr:!0}),coalesce:binop("??",1),_break:kw("break"),_case:kw("case",beforeExpr),_catch:kw("catch"),_continue:kw("continue"),_debugger:kw("debugger"),_default:kw("default",beforeExpr),_do:kw("do",{isLoop:!0,beforeExpr:!0}),_else:kw("else",beforeExpr),_finally:kw("finally"),_for:kw("for",{isLoop:!0}),_function:kw("function",startsExpr),_if:kw("if"),_return:kw("return",beforeExpr),_switch:kw("switch"),_throw:kw("throw",beforeExpr),_try:kw("try"),_var:kw("var"),_const:kw("const"),_while:kw("while",{isLoop:!0}),_with:kw("with"),_new:kw("new",{beforeExpr:!0,startsExpr:!0}),_this:kw("this",startsExpr),_super:kw("super",startsExpr),_class:kw("class",startsExpr),_extends:kw("extends",beforeExpr),_export:kw("export"),_import:kw("import",startsExpr),_null:kw("null",startsExpr),_true:kw("true",startsExpr),_false:kw("false",startsExpr),_in:kw("in",{beforeExpr:!0,binop:7}),_instanceof:kw("instanceof",{beforeExpr:!0,binop:7}),_typeof:kw("typeof",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_void:kw("void",{beforeExpr:!0,prefix:!0,startsExpr:!0}),_delete:kw("delete",{beforeExpr:!0,prefix:!0,startsExpr:!0})},lineBreak=/\r\n?|\n|\u2028|\u2029/,lineBreakG=new RegExp(lineBreak.source,"g");function isNewLine(code){return 10===code||13===code||8232===code||8233===code}function nextLineBreak(code,from,end){void 0===end&&(end=code.length);for(var i=from;i<end;i++){var next=code.charCodeAt(i);if(isNewLine(next))return i<end-1&&13===next&&10===code.charCodeAt(i+1)?i+2:i+1}return -1}var nonASCIIwhitespace=/[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/,skipWhiteSpace=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,ref=Object.prototype,acorn_hasOwnProperty=ref.hasOwnProperty,acorn_toString=ref.toString,hasOwn=Object.hasOwn||function(obj,propName){return acorn_hasOwnProperty.call(obj,propName)},isArray=Array.isArray||function(obj){return "[object Array]"===acorn_toString.call(obj)};function wordsRegexp(words){return new RegExp("^(?:"+words.replace(/ /g,"|")+")$")}function codePointToString(code){return code<=65535?String.fromCharCode(code):(code-=65536,String.fromCharCode(55296+(code>>10),56320+(1023&code)))}var loneSurrogate=/(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/,Position=function(line,col){this.line=line,this.column=col;};Position.prototype.offset=function(n){return new Position(this.line,this.column+n)};var SourceLocation=function(p,start,end){this.start=start,this.end=end,null!==p.sourceFile&&(this.source=p.sourceFile);};function getLineInfo(input,offset){for(var line=1,cur=0;;){var nextBreak=nextLineBreak(input,cur,offset);if(nextBreak<0)return new Position(line,offset-cur);++line,cur=nextBreak;}}var defaultOptions={ecmaVersion:null,sourceType:"script",onInsertedSemicolon:null,onTrailingComma:null,allowReserved:null,allowReturnOutsideFunction:!1,allowImportExportEverywhere:!1,allowAwaitOutsideFunction:null,allowSuperOutsideMethod:null,allowHashBang:!1,locations:!1,onToken:null,onComment:null,ranges:!1,program:null,sourceFile:null,directSourceFile:null,preserveParens:!1},warnedAboutEcmaVersion=!1;function getOptions(opts){var options={};for(var opt in defaultOptions)options[opt]=opts&&hasOwn(opts,opt)?opts[opt]:defaultOptions[opt];if("latest"===options.ecmaVersion?options.ecmaVersion=1e8:null==options.ecmaVersion?(!warnedAboutEcmaVersion&&"object"==typeof console&&console.warn&&(warnedAboutEcmaVersion=!0,console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")),options.ecmaVersion=11):options.ecmaVersion>=2015&&(options.ecmaVersion-=2009),null==options.allowReserved&&(options.allowReserved=options.ecmaVersion<5),opts&&null!=opts.allowHashBang||(options.allowHashBang=options.ecmaVersion>=14),isArray(options.onToken)){var tokens=options.onToken;options.onToken=function(token){return tokens.push(token)};}return isArray(options.onComment)&&(options.onComment=function(options,array){return function(block,text,start,end,startLoc,endLoc){var comment={type:block?"Block":"Line",value:text,start,end};options.locations&&(comment.loc=new SourceLocation(this,startLoc,endLoc)),options.ranges&&(comment.range=[start,end]),array.push(comment);}}(options,options.onComment)),options}var SCOPE_FUNCTION=2,SCOPE_ASYNC=4,SCOPE_GENERATOR=8,SCOPE_VAR=257|SCOPE_FUNCTION;function functionFlags(async,generator){return SCOPE_FUNCTION|(async?SCOPE_ASYNC:0)|(generator?SCOPE_GENERATOR:0)}var Parser=function(options,input,startPos){this.options=options=getOptions(options),this.sourceFile=options.sourceFile,this.keywords=wordsRegexp(keywords$1[options.ecmaVersion>=6?6:"module"===options.sourceType?"5module":5]);var reserved="";!0!==options.allowReserved&&(reserved=reservedWords[options.ecmaVersion>=6?6:5===options.ecmaVersion?5:3],"module"===options.sourceType&&(reserved+=" await")),this.reservedWords=wordsRegexp(reserved);var reservedStrict=(reserved?reserved+" ":"")+reservedWords.strict;this.reservedWordsStrict=wordsRegexp(reservedStrict),this.reservedWordsStrictBind=wordsRegexp(reservedStrict+" "+reservedWords.strictBind),this.input=String(input),this.containsEsc=!1,startPos?(this.pos=startPos,this.lineStart=this.input.lastIndexOf("\n",startPos-1)+1,this.curLine=this.input.slice(0,this.lineStart).split(lineBreak).length):(this.pos=this.lineStart=0,this.curLine=1),this.type=types$1.eof,this.value=null,this.start=this.end=this.pos,this.startLoc=this.endLoc=this.curPosition(),this.lastTokEndLoc=this.lastTokStartLoc=null,this.lastTokStart=this.lastTokEnd=this.pos,this.context=this.initialContext(),this.exprAllowed=!0,this.inModule="module"===options.sourceType,this.strict=this.inModule||this.strictDirective(this.pos),this.potentialArrowAt=-1,this.potentialArrowInForAwait=!1,this.yieldPos=this.awaitPos=this.awaitIdentPos=0,this.labels=[],this.undefinedExports=Object.create(null),0===this.pos&&options.allowHashBang&&"#!"===this.input.slice(0,2)&&this.skipLineComment(2),this.scopeStack=[],this.enterScope(1),this.regexpState=null,this.privateNameStack=[];},prototypeAccessors={inFunction:{configurable:!0},inGenerator:{configurable:!0},inAsync:{configurable:!0},canAwait:{configurable:!0},allowSuper:{configurable:!0},allowDirectSuper:{configurable:!0},treatFunctionsAsVar:{configurable:!0},allowNewDotTarget:{configurable:!0},inClassStaticBlock:{configurable:!0}};Parser.prototype.parse=function(){var node=this.options.program||this.startNode();return this.nextToken(),this.parseTopLevel(node)},prototypeAccessors.inFunction.get=function(){return (this.currentVarScope().flags&SCOPE_FUNCTION)>0},prototypeAccessors.inGenerator.get=function(){return (this.currentVarScope().flags&SCOPE_GENERATOR)>0&&!this.currentVarScope().inClassFieldInit},prototypeAccessors.inAsync.get=function(){return (this.currentVarScope().flags&SCOPE_ASYNC)>0&&!this.currentVarScope().inClassFieldInit},prototypeAccessors.canAwait.get=function(){for(var i=this.scopeStack.length-1;i>=0;i--){var scope=this.scopeStack[i];if(scope.inClassFieldInit||256&scope.flags)return !1;if(scope.flags&SCOPE_FUNCTION)return (scope.flags&SCOPE_ASYNC)>0}return this.inModule&&this.options.ecmaVersion>=13||this.options.allowAwaitOutsideFunction},prototypeAccessors.allowSuper.get=function(){var ref=this.currentThisScope(),flags=ref.flags,inClassFieldInit=ref.inClassFieldInit;return (64&flags)>0||inClassFieldInit||this.options.allowSuperOutsideMethod},prototypeAccessors.allowDirectSuper.get=function(){return (128&this.currentThisScope().flags)>0},prototypeAccessors.treatFunctionsAsVar.get=function(){return this.treatFunctionsAsVarInScope(this.currentScope())},prototypeAccessors.allowNewDotTarget.get=function(){var ref=this.currentThisScope(),flags=ref.flags,inClassFieldInit=ref.inClassFieldInit;return (flags&(256|SCOPE_FUNCTION))>0||inClassFieldInit},prototypeAccessors.inClassStaticBlock.get=function(){return (256&this.currentVarScope().flags)>0},Parser.extend=function(){for(var plugins=[],len=arguments.length;len--;)plugins[len]=arguments[len];for(var cls=this,i=0;i<plugins.length;i++)cls=plugins[i](cls);return cls},Parser.parse=function(input,options){return new this(options,input).parse()},Parser.parseExpressionAt=function(input,pos,options){var parser=new this(options,input,pos);return parser.nextToken(),parser.parseExpression()},Parser.tokenizer=function(input,options){return new this(options,input)},Object.defineProperties(Parser.prototype,prototypeAccessors);var pp$9=Parser.prototype,literal=/^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;pp$9.strictDirective=function(start){if(this.options.ecmaVersion<5)return !1;for(;;){skipWhiteSpace.lastIndex=start,start+=skipWhiteSpace.exec(this.input)[0].length;var match=literal.exec(this.input.slice(start));if(!match)return !1;if("use strict"===(match[1]||match[2])){skipWhiteSpace.lastIndex=start+match[0].length;var spaceAfter=skipWhiteSpace.exec(this.input),end=spaceAfter.index+spaceAfter[0].length,next=this.input.charAt(end);return ";"===next||"}"===next||lineBreak.test(spaceAfter[0])&&!(/[(`.[+\-/*%<>=,?^&]/.test(next)||"!"===next&&"="===this.input.charAt(end+1))}start+=match[0].length,skipWhiteSpace.lastIndex=start,start+=skipWhiteSpace.exec(this.input)[0].length,";"===this.input[start]&&start++;}},pp$9.eat=function(type){return this.type===type&&(this.next(),!0)},pp$9.isContextual=function(name){return this.type===types$1.name&&this.value===name&&!this.containsEsc},pp$9.eatContextual=function(name){return !!this.isContextual(name)&&(this.next(),!0)},pp$9.expectContextual=function(name){this.eatContextual(name)||this.unexpected();},pp$9.canInsertSemicolon=function(){return this.type===types$1.eof||this.type===types$1.braceR||lineBreak.test(this.input.slice(this.lastTokEnd,this.start))},pp$9.insertSemicolon=function(){if(this.canInsertSemicolon())return this.options.onInsertedSemicolon&&this.options.onInsertedSemicolon(this.lastTokEnd,this.lastTokEndLoc),!0},pp$9.semicolon=function(){this.eat(types$1.semi)||this.insertSemicolon()||this.unexpected();},pp$9.afterTrailingComma=function(tokType,notNext){if(this.type===tokType)return this.options.onTrailingComma&&this.options.onTrailingComma(this.lastTokStart,this.lastTokStartLoc),notNext||this.next(),!0},pp$9.expect=function(type){this.eat(type)||this.unexpected();},pp$9.unexpected=function(pos){this.raise(null!=pos?pos:this.start,"Unexpected token");};var DestructuringErrors=function(){this.shorthandAssign=this.trailingComma=this.parenthesizedAssign=this.parenthesizedBind=this.doubleProto=-1;};pp$9.checkPatternErrors=function(refDestructuringErrors,isAssign){if(refDestructuringErrors){refDestructuringErrors.trailingComma>-1&&this.raiseRecoverable(refDestructuringErrors.trailingComma,"Comma is not permitted after the rest element");var parens=isAssign?refDestructuringErrors.parenthesizedAssign:refDestructuringErrors.parenthesizedBind;parens>-1&&this.raiseRecoverable(parens,isAssign?"Assigning to rvalue":"Parenthesized pattern");}},pp$9.checkExpressionErrors=function(refDestructuringErrors,andThrow){if(!refDestructuringErrors)return !1;var shorthandAssign=refDestructuringErrors.shorthandAssign,doubleProto=refDestructuringErrors.doubleProto;if(!andThrow)return shorthandAssign>=0||doubleProto>=0;shorthandAssign>=0&&this.raise(shorthandAssign,"Shorthand property assignments are valid only in destructuring patterns"),doubleProto>=0&&this.raiseRecoverable(doubleProto,"Redefinition of __proto__ property");},pp$9.checkYieldAwaitInDefaultParams=function(){this.yieldPos&&(!this.awaitPos||this.yieldPos<this.awaitPos)&&this.raise(this.yieldPos,"Yield expression cannot be a default value"),this.awaitPos&&this.raise(this.awaitPos,"Await expression cannot be a default value");},pp$9.isSimpleAssignTarget=function(expr){return "ParenthesizedExpression"===expr.type?this.isSimpleAssignTarget(expr.expression):"Identifier"===expr.type||"MemberExpression"===expr.type};var pp$8=Parser.prototype;pp$8.parseTopLevel=function(node){var exports=Object.create(null);for(node.body||(node.body=[]);this.type!==types$1.eof;){var stmt=this.parseStatement(null,!0,exports);node.body.push(stmt);}if(this.inModule)for(var i=0,list=Object.keys(this.undefinedExports);i<list.length;i+=1){var name=list[i];this.raiseRecoverable(this.undefinedExports[name].start,"Export '"+name+"' is not defined");}return this.adaptDirectivePrologue(node.body),this.next(),node.sourceType=this.options.sourceType,this.finishNode(node,"Program")};var loopLabel={kind:"loop"},switchLabel={kind:"switch"};pp$8.isLet=function(context){if(this.options.ecmaVersion<6||!this.isContextual("let"))return !1;skipWhiteSpace.lastIndex=this.pos;var skip=skipWhiteSpace.exec(this.input),next=this.pos+skip[0].length,nextCh=this.input.charCodeAt(next);if(91===nextCh||92===nextCh)return !0;if(context)return !1;if(123===nextCh||nextCh>55295&&nextCh<56320)return !0;if(isIdentifierStart(nextCh,!0)){for(var pos=next+1;isIdentifierChar(nextCh=this.input.charCodeAt(pos),!0);)++pos;if(92===nextCh||nextCh>55295&&nextCh<56320)return !0;var ident=this.input.slice(next,pos);if(!keywordRelationalOperator.test(ident))return !0}return !1},pp$8.isAsyncFunction=function(){if(this.options.ecmaVersion<8||!this.isContextual("async"))return !1;skipWhiteSpace.lastIndex=this.pos;var after,skip=skipWhiteSpace.exec(this.input),next=this.pos+skip[0].length;return !(lineBreak.test(this.input.slice(this.pos,next))||"function"!==this.input.slice(next,next+8)||next+8!==this.input.length&&(isIdentifierChar(after=this.input.charCodeAt(next+8))||after>55295&&after<56320))},pp$8.parseStatement=function(context,topLevel,exports){var kind,starttype=this.type,node=this.startNode();switch(this.isLet(context)&&(starttype=types$1._var,kind="let"),starttype){case types$1._break:case types$1._continue:return this.parseBreakContinueStatement(node,starttype.keyword);case types$1._debugger:return this.parseDebuggerStatement(node);case types$1._do:return this.parseDoStatement(node);case types$1._for:return this.parseForStatement(node);case types$1._function:return context&&(this.strict||"if"!==context&&"label"!==context)&&this.options.ecmaVersion>=6&&this.unexpected(),this.parseFunctionStatement(node,!1,!context);case types$1._class:return context&&this.unexpected(),this.parseClass(node,!0);case types$1._if:return this.parseIfStatement(node);case types$1._return:return this.parseReturnStatement(node);case types$1._switch:return this.parseSwitchStatement(node);case types$1._throw:return this.parseThrowStatement(node);case types$1._try:return this.parseTryStatement(node);case types$1._const:case types$1._var:return kind=kind||this.value,context&&"var"!==kind&&this.unexpected(),this.parseVarStatement(node,kind);case types$1._while:return this.parseWhileStatement(node);case types$1._with:return this.parseWithStatement(node);case types$1.braceL:return this.parseBlock(!0,node);case types$1.semi:return this.parseEmptyStatement(node);case types$1._export:case types$1._import:if(this.options.ecmaVersion>10&&starttype===types$1._import){skipWhiteSpace.lastIndex=this.pos;var skip=skipWhiteSpace.exec(this.input),next=this.pos+skip[0].length,nextCh=this.input.charCodeAt(next);if(40===nextCh||46===nextCh)return this.parseExpressionStatement(node,this.parseExpression())}return this.options.allowImportExportEverywhere||(topLevel||this.raise(this.start,"'import' and 'export' may only appear at the top level"),this.inModule||this.raise(this.start,"'import' and 'export' may appear only with 'sourceType: module'")),starttype===types$1._import?this.parseImport(node):this.parseExport(node,exports);default:if(this.isAsyncFunction())return context&&this.unexpected(),this.next(),this.parseFunctionStatement(node,!0,!context);var maybeName=this.value,expr=this.parseExpression();return starttype===types$1.name&&"Identifier"===expr.type&&this.eat(types$1.colon)?this.parseLabeledStatement(node,maybeName,expr,context):this.parseExpressionStatement(node,expr)}},pp$8.parseBreakContinueStatement=function(node,keyword){var isBreak="break"===keyword;this.next(),this.eat(types$1.semi)||this.insertSemicolon()?node.label=null:this.type!==types$1.name?this.unexpected():(node.label=this.parseIdent(),this.semicolon());for(var i=0;i<this.labels.length;++i){var lab=this.labels[i];if(null==node.label||lab.name===node.label.name){if(null!=lab.kind&&(isBreak||"loop"===lab.kind))break;if(node.label&&isBreak)break}}return i===this.labels.length&&this.raise(node.start,"Unsyntactic "+keyword),this.finishNode(node,isBreak?"BreakStatement":"ContinueStatement")},pp$8.parseDebuggerStatement=function(node){return this.next(),this.semicolon(),this.finishNode(node,"DebuggerStatement")},pp$8.parseDoStatement=function(node){return this.next(),this.labels.push(loopLabel),node.body=this.parseStatement("do"),this.labels.pop(),this.expect(types$1._while),node.test=this.parseParenExpression(),this.options.ecmaVersion>=6?this.eat(types$1.semi):this.semicolon(),this.finishNode(node,"DoWhileStatement")},pp$8.parseForStatement=function(node){this.next();var awaitAt=this.options.ecmaVersion>=9&&this.canAwait&&this.eatContextual("await")?this.lastTokStart:-1;if(this.labels.push(loopLabel),this.enterScope(0),this.expect(types$1.parenL),this.type===types$1.semi)return awaitAt>-1&&this.unexpected(awaitAt),this.parseFor(node,null);var isLet=this.isLet();if(this.type===types$1._var||this.type===types$1._const||isLet){var init$1=this.startNode(),kind=isLet?"let":this.value;return this.next(),this.parseVar(init$1,!0,kind),this.finishNode(init$1,"VariableDeclaration"),(this.type===types$1._in||this.options.ecmaVersion>=6&&this.isContextual("of"))&&1===init$1.declarations.length?(this.options.ecmaVersion>=9&&(this.type===types$1._in?awaitAt>-1&&this.unexpected(awaitAt):node.await=awaitAt>-1),this.parseForIn(node,init$1)):(awaitAt>-1&&this.unexpected(awaitAt),this.parseFor(node,init$1))}var startsWithLet=this.isContextual("let"),isForOf=!1,refDestructuringErrors=new DestructuringErrors,init=this.parseExpression(!(awaitAt>-1)||"await",refDestructuringErrors);return this.type===types$1._in||(isForOf=this.options.ecmaVersion>=6&&this.isContextual("of"))?(this.options.ecmaVersion>=9&&(this.type===types$1._in?awaitAt>-1&&this.unexpected(awaitAt):node.await=awaitAt>-1),startsWithLet&&isForOf&&this.raise(init.start,"The left-hand side of a for-of loop may not start with 'let'."),this.toAssignable(init,!1,refDestructuringErrors),this.checkLValPattern(init),this.parseForIn(node,init)):(this.checkExpressionErrors(refDestructuringErrors,!0),awaitAt>-1&&this.unexpected(awaitAt),this.parseFor(node,init))},pp$8.parseFunctionStatement=function(node,isAsync,declarationPosition){return this.next(),this.parseFunction(node,FUNC_STATEMENT|(declarationPosition?0:FUNC_HANGING_STATEMENT),!1,isAsync)},pp$8.parseIfStatement=function(node){return this.next(),node.test=this.parseParenExpression(),node.consequent=this.parseStatement("if"),node.alternate=this.eat(types$1._else)?this.parseStatement("if"):null,this.finishNode(node,"IfStatement")},pp$8.parseReturnStatement=function(node){return this.inFunction||this.options.allowReturnOutsideFunction||this.raise(this.start,"'return' outside of function"),this.next(),this.eat(types$1.semi)||this.insertSemicolon()?node.argument=null:(node.argument=this.parseExpression(),this.semicolon()),this.finishNode(node,"ReturnStatement")},pp$8.parseSwitchStatement=function(node){var cur;this.next(),node.discriminant=this.parseParenExpression(),node.cases=[],this.expect(types$1.braceL),this.labels.push(switchLabel),this.enterScope(0);for(var sawDefault=!1;this.type!==types$1.braceR;)if(this.type===types$1._case||this.type===types$1._default){var isCase=this.type===types$1._case;cur&&this.finishNode(cur,"SwitchCase"),node.cases.push(cur=this.startNode()),cur.consequent=[],this.next(),isCase?cur.test=this.parseExpression():(sawDefault&&this.raiseRecoverable(this.lastTokStart,"Multiple default clauses"),sawDefault=!0,cur.test=null),this.expect(types$1.colon);}else cur||this.unexpected(),cur.consequent.push(this.parseStatement(null));return this.exitScope(),cur&&this.finishNode(cur,"SwitchCase"),this.next(),this.labels.pop(),this.finishNode(node,"SwitchStatement")},pp$8.parseThrowStatement=function(node){return this.next(),lineBreak.test(this.input.slice(this.lastTokEnd,this.start))&&this.raise(this.lastTokEnd,"Illegal newline after throw"),node.argument=this.parseExpression(),this.semicolon(),this.finishNode(node,"ThrowStatement")};var empty$1=[];pp$8.parseTryStatement=function(node){if(this.next(),node.block=this.parseBlock(),node.handler=null,this.type===types$1._catch){var clause=this.startNode();if(this.next(),this.eat(types$1.parenL)){clause.param=this.parseBindingAtom();var simple="Identifier"===clause.param.type;this.enterScope(simple?32:0),this.checkLValPattern(clause.param,simple?4:2),this.expect(types$1.parenR);}else this.options.ecmaVersion<10&&this.unexpected(),clause.param=null,this.enterScope(0);clause.body=this.parseBlock(!1),this.exitScope(),node.handler=this.finishNode(clause,"CatchClause");}return node.finalizer=this.eat(types$1._finally)?this.parseBlock():null,node.handler||node.finalizer||this.raise(node.start,"Missing catch or finally clause"),this.finishNode(node,"TryStatement")},pp$8.parseVarStatement=function(node,kind){return this.next(),this.parseVar(node,!1,kind),this.semicolon(),this.finishNode(node,"VariableDeclaration")},pp$8.parseWhileStatement=function(node){return this.next(),node.test=this.parseParenExpression(),this.labels.push(loopLabel),node.body=this.parseStatement("while"),this.labels.pop(),this.finishNode(node,"WhileStatement")},pp$8.parseWithStatement=function(node){return this.strict&&this.raise(this.start,"'with' in strict mode"),this.next(),node.object=this.parseParenExpression(),node.body=this.parseStatement("with"),this.finishNode(node,"WithStatement")},pp$8.parseEmptyStatement=function(node){return this.next(),this.finishNode(node,"EmptyStatement")},pp$8.parseLabeledStatement=function(node,maybeName,expr,context){for(var i$1=0,list=this.labels;i$1<list.length;i$1+=1){list[i$1].name===maybeName&&this.raise(expr.start,"Label '"+maybeName+"' is already declared");}for(var kind=this.type.isLoop?"loop":this.type===types$1._switch?"switch":null,i=this.labels.length-1;i>=0;i--){var label$1=this.labels[i];if(label$1.statementStart!==node.start)break;label$1.statementStart=this.start,label$1.kind=kind;}return this.labels.push({name:maybeName,kind,statementStart:this.start}),node.body=this.parseStatement(context?-1===context.indexOf("label")?context+"label":context:"label"),this.labels.pop(),node.label=expr,this.finishNode(node,"LabeledStatement")},pp$8.parseExpressionStatement=function(node,expr){return node.expression=expr,this.semicolon(),this.finishNode(node,"ExpressionStatement")},pp$8.parseBlock=function(createNewLexicalScope,node,exitStrict){for(void 0===createNewLexicalScope&&(createNewLexicalScope=!0),void 0===node&&(node=this.startNode()),node.body=[],this.expect(types$1.braceL),createNewLexicalScope&&this.enterScope(0);this.type!==types$1.braceR;){var stmt=this.parseStatement(null);node.body.push(stmt);}return exitStrict&&(this.strict=!1),this.next(),createNewLexicalScope&&this.exitScope(),this.finishNode(node,"BlockStatement")},pp$8.parseFor=function(node,init){return node.init=init,this.expect(types$1.semi),node.test=this.type===types$1.semi?null:this.parseExpression(),this.expect(types$1.semi),node.update=this.type===types$1.parenR?null:this.parseExpression(),this.expect(types$1.parenR),node.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(node,"ForStatement")},pp$8.parseForIn=function(node,init){var isForIn=this.type===types$1._in;return this.next(),"VariableDeclaration"===init.type&&null!=init.declarations[0].init&&(!isForIn||this.options.ecmaVersion<8||this.strict||"var"!==init.kind||"Identifier"!==init.declarations[0].id.type)&&this.raise(init.start,(isForIn?"for-in":"for-of")+" loop variable declaration may not have an initializer"),node.left=init,node.right=isForIn?this.parseExpression():this.parseMaybeAssign(),this.expect(types$1.parenR),node.body=this.parseStatement("for"),this.exitScope(),this.labels.pop(),this.finishNode(node,isForIn?"ForInStatement":"ForOfStatement")},pp$8.parseVar=function(node,isFor,kind){for(node.declarations=[],node.kind=kind;;){var decl=this.startNode();if(this.parseVarId(decl,kind),this.eat(types$1.eq)?decl.init=this.parseMaybeAssign(isFor):"const"!==kind||this.type===types$1._in||this.options.ecmaVersion>=6&&this.isContextual("of")?"Identifier"===decl.id.type||isFor&&(this.type===types$1._in||this.isContextual("of"))?decl.init=null:this.raise(this.lastTokEnd,"Complex binding patterns require an initialization value"):this.unexpected(),node.declarations.push(this.finishNode(decl,"VariableDeclarator")),!this.eat(types$1.comma))break}return node},pp$8.parseVarId=function(decl,kind){decl.id=this.parseBindingAtom(),this.checkLValPattern(decl.id,"var"===kind?1:2,!1);};var FUNC_STATEMENT=1,FUNC_HANGING_STATEMENT=2;function isPrivateNameConflicted(privateNameMap,element){var name=element.key.name,curr=privateNameMap[name],next="true";return "MethodDefinition"!==element.type||"get"!==element.kind&&"set"!==element.kind||(next=(element.static?"s":"i")+element.kind),"iget"===curr&&"iset"===next||"iset"===curr&&"iget"===next||"sget"===curr&&"sset"===next||"sset"===curr&&"sget"===next?(privateNameMap[name]="true",!1):!!curr||(privateNameMap[name]=next,!1)}function checkKeyName(node,name){var computed=node.computed,key=node.key;return !computed&&("Identifier"===key.type&&key.name===name||"Literal"===key.type&&key.value===name)}pp$8.parseFunction=function(node,statement,allowExpressionBody,isAsync,forInit){this.initFunction(node),(this.options.ecmaVersion>=9||this.options.ecmaVersion>=6&&!isAsync)&&(this.type===types$1.star&&statement&FUNC_HANGING_STATEMENT&&this.unexpected(),node.generator=this.eat(types$1.star)),this.options.ecmaVersion>=8&&(node.async=!!isAsync),statement&FUNC_STATEMENT&&(node.id=4&statement&&this.type!==types$1.name?null:this.parseIdent(),!node.id||statement&FUNC_HANGING_STATEMENT||this.checkLValSimple(node.id,this.strict||node.generator||node.async?this.treatFunctionsAsVar?1:2:3));var oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldAwaitIdentPos=this.awaitIdentPos;return this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(functionFlags(node.async,node.generator)),statement&FUNC_STATEMENT||(node.id=this.type===types$1.name?this.parseIdent():null),this.parseFunctionParams(node),this.parseFunctionBody(node,allowExpressionBody,!1,forInit),this.yieldPos=oldYieldPos,this.awaitPos=oldAwaitPos,this.awaitIdentPos=oldAwaitIdentPos,this.finishNode(node,statement&FUNC_STATEMENT?"FunctionDeclaration":"FunctionExpression")},pp$8.parseFunctionParams=function(node){this.expect(types$1.parenL),node.params=this.parseBindingList(types$1.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams();},pp$8.parseClass=function(node,isStatement){this.next();var oldStrict=this.strict;this.strict=!0,this.parseClassId(node,isStatement),this.parseClassSuper(node);var privateNameMap=this.enterClassBody(),classBody=this.startNode(),hadConstructor=!1;for(classBody.body=[],this.expect(types$1.braceL);this.type!==types$1.braceR;){var element=this.parseClassElement(null!==node.superClass);element&&(classBody.body.push(element),"MethodDefinition"===element.type&&"constructor"===element.kind?(hadConstructor&&this.raise(element.start,"Duplicate constructor in the same class"),hadConstructor=!0):element.key&&"PrivateIdentifier"===element.key.type&&isPrivateNameConflicted(privateNameMap,element)&&this.raiseRecoverable(element.key.start,"Identifier '#"+element.key.name+"' has already been declared"));}return this.strict=oldStrict,this.next(),node.body=this.finishNode(classBody,"ClassBody"),this.exitClassBody(),this.finishNode(node,isStatement?"ClassDeclaration":"ClassExpression")},pp$8.parseClassElement=function(constructorAllowsSuper){if(this.eat(types$1.semi))return null;var ecmaVersion=this.options.ecmaVersion,node=this.startNode(),keyName="",isGenerator=!1,isAsync=!1,kind="method",isStatic=!1;if(this.eatContextual("static")){if(ecmaVersion>=13&&this.eat(types$1.braceL))return this.parseClassStaticBlock(node),node;this.isClassElementNameStart()||this.type===types$1.star?isStatic=!0:keyName="static";}if(node.static=isStatic,!keyName&&ecmaVersion>=8&&this.eatContextual("async")&&(!this.isClassElementNameStart()&&this.type!==types$1.star||this.canInsertSemicolon()?keyName="async":isAsync=!0),!keyName&&(ecmaVersion>=9||!isAsync)&&this.eat(types$1.star)&&(isGenerator=!0),!keyName&&!isAsync&&!isGenerator){var lastValue=this.value;(this.eatContextual("get")||this.eatContextual("set"))&&(this.isClassElementNameStart()?kind=lastValue:keyName=lastValue);}if(keyName?(node.computed=!1,node.key=this.startNodeAt(this.lastTokStart,this.lastTokStartLoc),node.key.name=keyName,this.finishNode(node.key,"Identifier")):this.parseClassElementName(node),ecmaVersion<13||this.type===types$1.parenL||"method"!==kind||isGenerator||isAsync){var isConstructor=!node.static&&checkKeyName(node,"constructor"),allowsDirectSuper=isConstructor&&constructorAllowsSuper;isConstructor&&"method"!==kind&&this.raise(node.key.start,"Constructor can't have get/set modifier"),node.kind=isConstructor?"constructor":kind,this.parseClassMethod(node,isGenerator,isAsync,allowsDirectSuper);}else this.parseClassField(node);return node},pp$8.isClassElementNameStart=function(){return this.type===types$1.name||this.type===types$1.privateId||this.type===types$1.num||this.type===types$1.string||this.type===types$1.bracketL||this.type.keyword},pp$8.parseClassElementName=function(element){this.type===types$1.privateId?("constructor"===this.value&&this.raise(this.start,"Classes can't have an element named '#constructor'"),element.computed=!1,element.key=this.parsePrivateIdent()):this.parsePropertyName(element);},pp$8.parseClassMethod=function(method,isGenerator,isAsync,allowsDirectSuper){var key=method.key;"constructor"===method.kind?(isGenerator&&this.raise(key.start,"Constructor can't be a generator"),isAsync&&this.raise(key.start,"Constructor can't be an async method")):method.static&&checkKeyName(method,"prototype")&&this.raise(key.start,"Classes may not have a static property named prototype");var value=method.value=this.parseMethod(isGenerator,isAsync,allowsDirectSuper);return "get"===method.kind&&0!==value.params.length&&this.raiseRecoverable(value.start,"getter should have no params"),"set"===method.kind&&1!==value.params.length&&this.raiseRecoverable(value.start,"setter should have exactly one param"),"set"===method.kind&&"RestElement"===value.params[0].type&&this.raiseRecoverable(value.params[0].start,"Setter cannot use rest params"),this.finishNode(method,"MethodDefinition")},pp$8.parseClassField=function(field){if(checkKeyName(field,"constructor")?this.raise(field.key.start,"Classes can't have a field named 'constructor'"):field.static&&checkKeyName(field,"prototype")&&this.raise(field.key.start,"Classes can't have a static field named 'prototype'"),this.eat(types$1.eq)){var scope=this.currentThisScope(),inClassFieldInit=scope.inClassFieldInit;scope.inClassFieldInit=!0,field.value=this.parseMaybeAssign(),scope.inClassFieldInit=inClassFieldInit;}else field.value=null;return this.semicolon(),this.finishNode(field,"PropertyDefinition")},pp$8.parseClassStaticBlock=function(node){node.body=[];var oldLabels=this.labels;for(this.labels=[],this.enterScope(320);this.type!==types$1.braceR;){var stmt=this.parseStatement(null);node.body.push(stmt);}return this.next(),this.exitScope(),this.labels=oldLabels,this.finishNode(node,"StaticBlock")},pp$8.parseClassId=function(node,isStatement){this.type===types$1.name?(node.id=this.parseIdent(),isStatement&&this.checkLValSimple(node.id,2,!1)):(!0===isStatement&&this.unexpected(),node.id=null);},pp$8.parseClassSuper=function(node){node.superClass=this.eat(types$1._extends)?this.parseExprSubscripts(null,!1):null;},pp$8.enterClassBody=function(){var element={declared:Object.create(null),used:[]};return this.privateNameStack.push(element),element.declared},pp$8.exitClassBody=function(){for(var ref=this.privateNameStack.pop(),declared=ref.declared,used=ref.used,len=this.privateNameStack.length,parent=0===len?null:this.privateNameStack[len-1],i=0;i<used.length;++i){var id=used[i];hasOwn(declared,id.name)||(parent?parent.used.push(id):this.raiseRecoverable(id.start,"Private field '#"+id.name+"' must be declared in an enclosing class"));}},pp$8.parseExport=function(node,exports){if(this.next(),this.eat(types$1.star))return this.options.ecmaVersion>=11&&(this.eatContextual("as")?(node.exported=this.parseModuleExportName(),this.checkExport(exports,node.exported,this.lastTokStart)):node.exported=null),this.expectContextual("from"),this.type!==types$1.string&&this.unexpected(),node.source=this.parseExprAtom(),this.semicolon(),this.finishNode(node,"ExportAllDeclaration");if(this.eat(types$1._default)){var isAsync;if(this.checkExport(exports,"default",this.lastTokStart),this.type===types$1._function||(isAsync=this.isAsyncFunction())){var fNode=this.startNode();this.next(),isAsync&&this.next(),node.declaration=this.parseFunction(fNode,4|FUNC_STATEMENT,!1,isAsync);}else if(this.type===types$1._class){var cNode=this.startNode();node.declaration=this.parseClass(cNode,"nullableID");}else node.declaration=this.parseMaybeAssign(),this.semicolon();return this.finishNode(node,"ExportDefaultDeclaration")}if(this.shouldParseExportStatement())node.declaration=this.parseStatement(null),"VariableDeclaration"===node.declaration.type?this.checkVariableExport(exports,node.declaration.declarations):this.checkExport(exports,node.declaration.id,node.declaration.id.start),node.specifiers=[],node.source=null;else {if(node.declaration=null,node.specifiers=this.parseExportSpecifiers(exports),this.eatContextual("from"))this.type!==types$1.string&&this.unexpected(),node.source=this.parseExprAtom();else {for(var i=0,list=node.specifiers;i<list.length;i+=1){var spec=list[i];this.checkUnreserved(spec.local),this.checkLocalExport(spec.local),"Literal"===spec.local.type&&this.raise(spec.local.start,"A string literal cannot be used as an exported binding without `from`.");}node.source=null;}this.semicolon();}return this.finishNode(node,"ExportNamedDeclaration")},pp$8.checkExport=function(exports,name,pos){exports&&("string"!=typeof name&&(name="Identifier"===name.type?name.name:name.value),hasOwn(exports,name)&&this.raiseRecoverable(pos,"Duplicate export '"+name+"'"),exports[name]=!0);},pp$8.checkPatternExport=function(exports,pat){var type=pat.type;if("Identifier"===type)this.checkExport(exports,pat,pat.start);else if("ObjectPattern"===type)for(var i=0,list=pat.properties;i<list.length;i+=1){var prop=list[i];this.checkPatternExport(exports,prop);}else if("ArrayPattern"===type)for(var i$1=0,list$1=pat.elements;i$1<list$1.length;i$1+=1){var elt=list$1[i$1];elt&&this.checkPatternExport(exports,elt);}else "Property"===type?this.checkPatternExport(exports,pat.value):"AssignmentPattern"===type?this.checkPatternExport(exports,pat.left):"RestElement"===type?this.checkPatternExport(exports,pat.argument):"ParenthesizedExpression"===type&&this.checkPatternExport(exports,pat.expression);},pp$8.checkVariableExport=function(exports,decls){if(exports)for(var i=0,list=decls;i<list.length;i+=1){var decl=list[i];this.checkPatternExport(exports,decl.id);}},pp$8.shouldParseExportStatement=function(){return "var"===this.type.keyword||"const"===this.type.keyword||"class"===this.type.keyword||"function"===this.type.keyword||this.isLet()||this.isAsyncFunction()},pp$8.parseExportSpecifiers=function(exports){var nodes=[],first=!0;for(this.expect(types$1.braceL);!this.eat(types$1.braceR);){if(first)first=!1;else if(this.expect(types$1.comma),this.afterTrailingComma(types$1.braceR))break;var node=this.startNode();node.local=this.parseModuleExportName(),node.exported=this.eatContextual("as")?this.parseModuleExportName():node.local,this.checkExport(exports,node.exported,node.exported.start),nodes.push(this.finishNode(node,"ExportSpecifier"));}return nodes},pp$8.parseImport=function(node){return this.next(),this.type===types$1.string?(node.specifiers=empty$1,node.source=this.parseExprAtom()):(node.specifiers=this.parseImportSpecifiers(),this.expectContextual("from"),node.source=this.type===types$1.string?this.parseExprAtom():this.unexpected()),this.semicolon(),this.finishNode(node,"ImportDeclaration")},pp$8.parseImportSpecifiers=function(){var nodes=[],first=!0;if(this.type===types$1.name){var node=this.startNode();if(node.local=this.parseIdent(),this.checkLValSimple(node.local,2),nodes.push(this.finishNode(node,"ImportDefaultSpecifier")),!this.eat(types$1.comma))return nodes}if(this.type===types$1.star){var node$1=this.startNode();return this.next(),this.expectContextual("as"),node$1.local=this.parseIdent(),this.checkLValSimple(node$1.local,2),nodes.push(this.finishNode(node$1,"ImportNamespaceSpecifier")),nodes}for(this.expect(types$1.braceL);!this.eat(types$1.braceR);){if(first)first=!1;else if(this.expect(types$1.comma),this.afterTrailingComma(types$1.braceR))break;var node$2=this.startNode();node$2.imported=this.parseModuleExportName(),this.eatContextual("as")?node$2.local=this.parseIdent():(this.checkUnreserved(node$2.imported),node$2.local=node$2.imported),this.checkLValSimple(node$2.local,2),nodes.push(this.finishNode(node$2,"ImportSpecifier"));}return nodes},pp$8.parseModuleExportName=function(){if(this.options.ecmaVersion>=13&&this.type===types$1.string){var stringLiteral=this.parseLiteral(this.value);return loneSurrogate.test(stringLiteral.value)&&this.raise(stringLiteral.start,"An export name cannot include a lone surrogate."),stringLiteral}return this.parseIdent(!0)},pp$8.adaptDirectivePrologue=function(statements){for(var i=0;i<statements.length&&this.isDirectiveCandidate(statements[i]);++i)statements[i].directive=statements[i].expression.raw.slice(1,-1);},pp$8.isDirectiveCandidate=function(statement){return this.options.ecmaVersion>=5&&"ExpressionStatement"===statement.type&&"Literal"===statement.expression.type&&"string"==typeof statement.expression.value&&('"'===this.input[statement.start]||"'"===this.input[statement.start])};var pp$7=Parser.prototype;pp$7.toAssignable=function(node,isBinding,refDestructuringErrors){if(this.options.ecmaVersion>=6&&node)switch(node.type){case"Identifier":this.inAsync&&"await"===node.name&&this.raise(node.start,"Cannot use 'await' as identifier inside an async function");break;case"ObjectPattern":case"ArrayPattern":case"AssignmentPattern":case"RestElement":break;case"ObjectExpression":node.type="ObjectPattern",refDestructuringErrors&&this.checkPatternErrors(refDestructuringErrors,!0);for(var i=0,list=node.properties;i<list.length;i+=1){var prop=list[i];this.toAssignable(prop,isBinding),"RestElement"!==prop.type||"ArrayPattern"!==prop.argument.type&&"ObjectPattern"!==prop.argument.type||this.raise(prop.argument.start,"Unexpected token");}break;case"Property":"init"!==node.kind&&this.raise(node.key.start,"Object pattern can't contain getter or setter"),this.toAssignable(node.value,isBinding);break;case"ArrayExpression":node.type="ArrayPattern",refDestructuringErrors&&this.checkPatternErrors(refDestructuringErrors,!0),this.toAssignableList(node.elements,isBinding);break;case"SpreadElement":node.type="RestElement",this.toAssignable(node.argument,isBinding),"AssignmentPattern"===node.argument.type&&this.raise(node.argument.start,"Rest elements cannot have a default value");break;case"AssignmentExpression":"="!==node.operator&&this.raise(node.left.end,"Only '=' operator can be used for specifying default value."),node.type="AssignmentPattern",delete node.operator,this.toAssignable(node.left,isBinding);break;case"ParenthesizedExpression":this.toAssignable(node.expression,isBinding,refDestructuringErrors);break;case"ChainExpression":this.raiseRecoverable(node.start,"Optional chaining cannot appear in left-hand side");break;case"MemberExpression":if(!isBinding)break;default:this.raise(node.start,"Assigning to rvalue");}else refDestructuringErrors&&this.checkPatternErrors(refDestructuringErrors,!0);return node},pp$7.toAssignableList=function(exprList,isBinding){for(var end=exprList.length,i=0;i<end;i++){var elt=exprList[i];elt&&this.toAssignable(elt,isBinding);}if(end){var last=exprList[end-1];6===this.options.ecmaVersion&&isBinding&&last&&"RestElement"===last.type&&"Identifier"!==last.argument.type&&this.unexpected(last.argument.start);}return exprList},pp$7.parseSpread=function(refDestructuringErrors){var node=this.startNode();return this.next(),node.argument=this.parseMaybeAssign(!1,refDestructuringErrors),this.finishNode(node,"SpreadElement")},pp$7.parseRestBinding=function(){var node=this.startNode();return this.next(),6===this.options.ecmaVersion&&this.type!==types$1.name&&this.unexpected(),node.argument=this.parseBindingAtom(),this.finishNode(node,"RestElement")},pp$7.parseBindingAtom=function(){if(this.options.ecmaVersion>=6)switch(this.type){case types$1.bracketL:var node=this.startNode();return this.next(),node.elements=this.parseBindingList(types$1.bracketR,!0,!0),this.finishNode(node,"ArrayPattern");case types$1.braceL:return this.parseObj(!0)}return this.parseIdent()},pp$7.parseBindingList=function(close,allowEmpty,allowTrailingComma){for(var elts=[],first=!0;!this.eat(close);)if(first?first=!1:this.expect(types$1.comma),allowEmpty&&this.type===types$1.comma)elts.push(null);else {if(allowTrailingComma&&this.afterTrailingComma(close))break;if(this.type===types$1.ellipsis){var rest=this.parseRestBinding();this.parseBindingListItem(rest),elts.push(rest),this.type===types$1.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.expect(close);break}var elem=this.parseMaybeDefault(this.start,this.startLoc);this.parseBindingListItem(elem),elts.push(elem);}return elts},pp$7.parseBindingListItem=function(param){return param},pp$7.parseMaybeDefault=function(startPos,startLoc,left){if(left=left||this.parseBindingAtom(),this.options.ecmaVersion<6||!this.eat(types$1.eq))return left;var node=this.startNodeAt(startPos,startLoc);return node.left=left,node.right=this.parseMaybeAssign(),this.finishNode(node,"AssignmentPattern")},pp$7.checkLValSimple=function(expr,bindingType,checkClashes){void 0===bindingType&&(bindingType=0);var isBind=0!==bindingType;switch(expr.type){case"Identifier":this.strict&&this.reservedWordsStrictBind.test(expr.name)&&this.raiseRecoverable(expr.start,(isBind?"Binding ":"Assigning to ")+expr.name+" in strict mode"),isBind&&(2===bindingType&&"let"===expr.name&&this.raiseRecoverable(expr.start,"let is disallowed as a lexically bound name"),checkClashes&&(hasOwn(checkClashes,expr.name)&&this.raiseRecoverable(expr.start,"Argument name clash"),checkClashes[expr.name]=!0),5!==bindingType&&this.declareName(expr.name,bindingType,expr.start));break;case"ChainExpression":this.raiseRecoverable(expr.start,"Optional chaining cannot appear in left-hand side");break;case"MemberExpression":isBind&&this.raiseRecoverable(expr.start,"Binding member expression");break;case"ParenthesizedExpression":return isBind&&this.raiseRecoverable(expr.start,"Binding parenthesized expression"),this.checkLValSimple(expr.expression,bindingType,checkClashes);default:this.raise(expr.start,(isBind?"Binding":"Assigning to")+" rvalue");}},pp$7.checkLValPattern=function(expr,bindingType,checkClashes){switch(void 0===bindingType&&(bindingType=0),expr.type){case"ObjectPattern":for(var i=0,list=expr.properties;i<list.length;i+=1){var prop=list[i];this.checkLValInnerPattern(prop,bindingType,checkClashes);}break;case"ArrayPattern":for(var i$1=0,list$1=expr.elements;i$1<list$1.length;i$1+=1){var elem=list$1[i$1];elem&&this.checkLValInnerPattern(elem,bindingType,checkClashes);}break;default:this.checkLValSimple(expr,bindingType,checkClashes);}},pp$7.checkLValInnerPattern=function(expr,bindingType,checkClashes){switch(void 0===bindingType&&(bindingType=0),expr.type){case"Property":this.checkLValInnerPattern(expr.value,bindingType,checkClashes);break;case"AssignmentPattern":this.checkLValPattern(expr.left,bindingType,checkClashes);break;case"RestElement":this.checkLValPattern(expr.argument,bindingType,checkClashes);break;default:this.checkLValPattern(expr,bindingType,checkClashes);}};var TokContext=function(token,isExpr,preserveSpace,override,generator){this.token=token,this.isExpr=!!isExpr,this.preserveSpace=!!preserveSpace,this.override=override,this.generator=!!generator;},types={b_stat:new TokContext("{",!1),b_expr:new TokContext("{",!0),b_tmpl:new TokContext("${",!1),p_stat:new TokContext("(",!1),p_expr:new TokContext("(",!0),q_tmpl:new TokContext("`",!0,!0,(function(p){return p.tryReadTemplateToken()})),f_stat:new TokContext("function",!1),f_expr:new TokContext("function",!0),f_expr_gen:new TokContext("function",!0,!1,null,!0),f_gen:new TokContext("function",!1,!1,null,!0)},pp$6=Parser.prototype;pp$6.initialContext=function(){return [types.b_stat]},pp$6.curContext=function(){return this.context[this.context.length-1]},pp$6.braceIsBlock=function(prevType){var parent=this.curContext();return parent===types.f_expr||parent===types.f_stat||(prevType!==types$1.colon||parent!==types.b_stat&&parent!==types.b_expr?prevType===types$1._return||prevType===types$1.name&&this.exprAllowed?lineBreak.test(this.input.slice(this.lastTokEnd,this.start)):prevType===types$1._else||prevType===types$1.semi||prevType===types$1.eof||prevType===types$1.parenR||prevType===types$1.arrow||(prevType===types$1.braceL?parent===types.b_stat:prevType!==types$1._var&&prevType!==types$1._const&&prevType!==types$1.name&&!this.exprAllowed):!parent.isExpr)},pp$6.inGeneratorContext=function(){for(var i=this.context.length-1;i>=1;i--){var context=this.context[i];if("function"===context.token)return context.generator}return !1},pp$6.updateContext=function(prevType){var update,type=this.type;type.keyword&&prevType===types$1.dot?this.exprAllowed=!1:(update=type.updateContext)?update.call(this,prevType):this.exprAllowed=type.beforeExpr;},pp$6.overrideContext=function(tokenCtx){this.curContext()!==tokenCtx&&(this.context[this.context.length-1]=tokenCtx);},types$1.parenR.updateContext=types$1.braceR.updateContext=function(){if(1!==this.context.length){var out=this.context.pop();out===types.b_stat&&"function"===this.curContext().token&&(out=this.context.pop()),this.exprAllowed=!out.isExpr;}else this.exprAllowed=!0;},types$1.braceL.updateContext=function(prevType){this.context.push(this.braceIsBlock(prevType)?types.b_stat:types.b_expr),this.exprAllowed=!0;},types$1.dollarBraceL.updateContext=function(){this.context.push(types.b_tmpl),this.exprAllowed=!0;},types$1.parenL.updateContext=function(prevType){var statementParens=prevType===types$1._if||prevType===types$1._for||prevType===types$1._with||prevType===types$1._while;this.context.push(statementParens?types.p_stat:types.p_expr),this.exprAllowed=!0;},types$1.incDec.updateContext=function(){},types$1._function.updateContext=types$1._class.updateContext=function(prevType){!prevType.beforeExpr||prevType===types$1._else||prevType===types$1.semi&&this.curContext()!==types.p_stat||prevType===types$1._return&&lineBreak.test(this.input.slice(this.lastTokEnd,this.start))||(prevType===types$1.colon||prevType===types$1.braceL)&&this.curContext()===types.b_stat?this.context.push(types.f_stat):this.context.push(types.f_expr),this.exprAllowed=!1;},types$1.backQuote.updateContext=function(){this.curContext()===types.q_tmpl?this.context.pop():this.context.push(types.q_tmpl),this.exprAllowed=!1;},types$1.star.updateContext=function(prevType){if(prevType===types$1._function){var index=this.context.length-1;this.context[index]===types.f_expr?this.context[index]=types.f_expr_gen:this.context[index]=types.f_gen;}this.exprAllowed=!0;},types$1.name.updateContext=function(prevType){var allowed=!1;this.options.ecmaVersion>=6&&prevType!==types$1.dot&&("of"===this.value&&!this.exprAllowed||"yield"===this.value&&this.inGeneratorContext())&&(allowed=!0),this.exprAllowed=allowed;};var pp$5=Parser.prototype;function isPrivateFieldAccess(node){return "MemberExpression"===node.type&&"PrivateIdentifier"===node.property.type||"ChainExpression"===node.type&&isPrivateFieldAccess(node.expression)}pp$5.checkPropClash=function(prop,propHash,refDestructuringErrors){if(!(this.options.ecmaVersion>=9&&"SpreadElement"===prop.type||this.options.ecmaVersion>=6&&(prop.computed||prop.method||prop.shorthand))){var name,key=prop.key;switch(key.type){case"Identifier":name=key.name;break;case"Literal":name=String(key.value);break;default:return}var kind=prop.kind;if(this.options.ecmaVersion>=6)"__proto__"===name&&"init"===kind&&(propHash.proto&&(refDestructuringErrors?refDestructuringErrors.doubleProto<0&&(refDestructuringErrors.doubleProto=key.start):this.raiseRecoverable(key.start,"Redefinition of __proto__ property")),propHash.proto=!0);else {var other=propHash[name="$"+name];if(other)("init"===kind?this.strict&&other.init||other.get||other.set:other.init||other[kind])&&this.raiseRecoverable(key.start,"Redefinition of property");else other=propHash[name]={init:!1,get:!1,set:!1};other[kind]=!0;}}},pp$5.parseExpression=function(forInit,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc,expr=this.parseMaybeAssign(forInit,refDestructuringErrors);if(this.type===types$1.comma){var node=this.startNodeAt(startPos,startLoc);for(node.expressions=[expr];this.eat(types$1.comma);)node.expressions.push(this.parseMaybeAssign(forInit,refDestructuringErrors));return this.finishNode(node,"SequenceExpression")}return expr},pp$5.parseMaybeAssign=function(forInit,refDestructuringErrors,afterLeftParse){if(this.isContextual("yield")){if(this.inGenerator)return this.parseYield(forInit);this.exprAllowed=!1;}var ownDestructuringErrors=!1,oldParenAssign=-1,oldTrailingComma=-1,oldDoubleProto=-1;refDestructuringErrors?(oldParenAssign=refDestructuringErrors.parenthesizedAssign,oldTrailingComma=refDestructuringErrors.trailingComma,oldDoubleProto=refDestructuringErrors.doubleProto,refDestructuringErrors.parenthesizedAssign=refDestructuringErrors.trailingComma=-1):(refDestructuringErrors=new DestructuringErrors,ownDestructuringErrors=!0);var startPos=this.start,startLoc=this.startLoc;this.type!==types$1.parenL&&this.type!==types$1.name||(this.potentialArrowAt=this.start,this.potentialArrowInForAwait="await"===forInit);var left=this.parseMaybeConditional(forInit,refDestructuringErrors);if(afterLeftParse&&(left=afterLeftParse.call(this,left,startPos,startLoc)),this.type.isAssign){var node=this.startNodeAt(startPos,startLoc);return node.operator=this.value,this.type===types$1.eq&&(left=this.toAssignable(left,!1,refDestructuringErrors)),ownDestructuringErrors||(refDestructuringErrors.parenthesizedAssign=refDestructuringErrors.trailingComma=refDestructuringErrors.doubleProto=-1),refDestructuringErrors.shorthandAssign>=left.start&&(refDestructuringErrors.shorthandAssign=-1),this.type===types$1.eq?this.checkLValPattern(left):this.checkLValSimple(left),node.left=left,this.next(),node.right=this.parseMaybeAssign(forInit),oldDoubleProto>-1&&(refDestructuringErrors.doubleProto=oldDoubleProto),this.finishNode(node,"AssignmentExpression")}return ownDestructuringErrors&&this.checkExpressionErrors(refDestructuringErrors,!0),oldParenAssign>-1&&(refDestructuringErrors.parenthesizedAssign=oldParenAssign),oldTrailingComma>-1&&(refDestructuringErrors.trailingComma=oldTrailingComma),left},pp$5.parseMaybeConditional=function(forInit,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc,expr=this.parseExprOps(forInit,refDestructuringErrors);if(this.checkExpressionErrors(refDestructuringErrors))return expr;if(this.eat(types$1.question)){var node=this.startNodeAt(startPos,startLoc);return node.test=expr,node.consequent=this.parseMaybeAssign(),this.expect(types$1.colon),node.alternate=this.parseMaybeAssign(forInit),this.finishNode(node,"ConditionalExpression")}return expr},pp$5.parseExprOps=function(forInit,refDestructuringErrors){var startPos=this.start,startLoc=this.startLoc,expr=this.parseMaybeUnary(refDestructuringErrors,!1,!1,forInit);return this.checkExpressionErrors(refDestructuringErrors)||expr.start===startPos&&"ArrowFunctionExpression"===expr.type?expr:this.parseExprOp(expr,startPos,startLoc,-1,forInit)},pp$5.parseExprOp=function(left,leftStartPos,leftStartLoc,minPrec,forInit){var prec=this.type.binop;if(null!=prec&&(!forInit||this.type!==types$1._in)&&prec>minPrec){var logical=this.type===types$1.logicalOR||this.type===types$1.logicalAND,coalesce=this.type===types$1.coalesce;coalesce&&(prec=types$1.logicalAND.binop);var op=this.value;this.next();var startPos=this.start,startLoc=this.startLoc,right=this.parseExprOp(this.parseMaybeUnary(null,!1,!1,forInit),startPos,startLoc,prec,forInit),node=this.buildBinary(leftStartPos,leftStartLoc,left,right,op,logical||coalesce);return (logical&&this.type===types$1.coalesce||coalesce&&(this.type===types$1.logicalOR||this.type===types$1.logicalAND))&&this.raiseRecoverable(this.start,"Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"),this.parseExprOp(node,leftStartPos,leftStartLoc,minPrec,forInit)}return left},pp$5.buildBinary=function(startPos,startLoc,left,right,op,logical){"PrivateIdentifier"===right.type&&this.raise(right.start,"Private identifier can only be left side of binary expression");var node=this.startNodeAt(startPos,startLoc);return node.left=left,node.operator=op,node.right=right,this.finishNode(node,logical?"LogicalExpression":"BinaryExpression")},pp$5.parseMaybeUnary=function(refDestructuringErrors,sawUnary,incDec,forInit){var expr,startPos=this.start,startLoc=this.startLoc;if(this.isContextual("await")&&this.canAwait)expr=this.parseAwait(forInit),sawUnary=!0;else if(this.type.prefix){var node=this.startNode(),update=this.type===types$1.incDec;node.operator=this.value,node.prefix=!0,this.next(),node.argument=this.parseMaybeUnary(null,!0,update,forInit),this.checkExpressionErrors(refDestructuringErrors,!0),update?this.checkLValSimple(node.argument):this.strict&&"delete"===node.operator&&"Identifier"===node.argument.type?this.raiseRecoverable(node.start,"Deleting local variable in strict mode"):"delete"===node.operator&&isPrivateFieldAccess(node.argument)?this.raiseRecoverable(node.start,"Private fields can not be deleted"):sawUnary=!0,expr=this.finishNode(node,update?"UpdateExpression":"UnaryExpression");}else if(sawUnary||this.type!==types$1.privateId){if(expr=this.parseExprSubscripts(refDestructuringErrors,forInit),this.checkExpressionErrors(refDestructuringErrors))return expr;for(;this.type.postfix&&!this.canInsertSemicolon();){var node$1=this.startNodeAt(startPos,startLoc);node$1.operator=this.value,node$1.prefix=!1,node$1.argument=expr,this.checkLValSimple(expr),this.next(),expr=this.finishNode(node$1,"UpdateExpression");}}else (forInit||0===this.privateNameStack.length)&&this.unexpected(),expr=this.parsePrivateIdent(),this.type!==types$1._in&&this.unexpected();return incDec||!this.eat(types$1.starstar)?expr:sawUnary?void this.unexpected(this.lastTokStart):this.buildBinary(startPos,startLoc,expr,this.parseMaybeUnary(null,!1,!1,forInit),"**",!1)},pp$5.parseExprSubscripts=function(refDestructuringErrors,forInit){var startPos=this.start,startLoc=this.startLoc,expr=this.parseExprAtom(refDestructuringErrors,forInit);if("ArrowFunctionExpression"===expr.type&&")"!==this.input.slice(this.lastTokStart,this.lastTokEnd))return expr;var result=this.parseSubscripts(expr,startPos,startLoc,!1,forInit);return refDestructuringErrors&&"MemberExpression"===result.type&&(refDestructuringErrors.parenthesizedAssign>=result.start&&(refDestructuringErrors.parenthesizedAssign=-1),refDestructuringErrors.parenthesizedBind>=result.start&&(refDestructuringErrors.parenthesizedBind=-1),refDestructuringErrors.trailingComma>=result.start&&(refDestructuringErrors.trailingComma=-1)),result},pp$5.parseSubscripts=function(base,startPos,startLoc,noCalls,forInit){for(var maybeAsyncArrow=this.options.ecmaVersion>=8&&"Identifier"===base.type&&"async"===base.name&&this.lastTokEnd===base.end&&!this.canInsertSemicolon()&&base.end-base.start==5&&this.potentialArrowAt===base.start,optionalChained=!1;;){var element=this.parseSubscript(base,startPos,startLoc,noCalls,maybeAsyncArrow,optionalChained,forInit);if(element.optional&&(optionalChained=!0),element===base||"ArrowFunctionExpression"===element.type){if(optionalChained){var chainNode=this.startNodeAt(startPos,startLoc);chainNode.expression=element,element=this.finishNode(chainNode,"ChainExpression");}return element}base=element;}},pp$5.parseSubscript=function(base,startPos,startLoc,noCalls,maybeAsyncArrow,optionalChained,forInit){var optionalSupported=this.options.ecmaVersion>=11,optional=optionalSupported&&this.eat(types$1.questionDot);noCalls&&optional&&this.raise(this.lastTokStart,"Optional chaining cannot appear in the callee of new expressions");var computed=this.eat(types$1.bracketL);if(computed||optional&&this.type!==types$1.parenL&&this.type!==types$1.backQuote||this.eat(types$1.dot)){var node=this.startNodeAt(startPos,startLoc);node.object=base,computed?(node.property=this.parseExpression(),this.expect(types$1.bracketR)):this.type===types$1.privateId&&"Super"!==base.type?node.property=this.parsePrivateIdent():node.property=this.parseIdent("never"!==this.options.allowReserved),node.computed=!!computed,optionalSupported&&(node.optional=optional),base=this.finishNode(node,"MemberExpression");}else if(!noCalls&&this.eat(types$1.parenL)){var refDestructuringErrors=new DestructuringErrors,oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldAwaitIdentPos=this.awaitIdentPos;this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0;var exprList=this.parseExprList(types$1.parenR,this.options.ecmaVersion>=8,!1,refDestructuringErrors);if(maybeAsyncArrow&&!optional&&!this.canInsertSemicolon()&&this.eat(types$1.arrow))return this.checkPatternErrors(refDestructuringErrors,!1),this.checkYieldAwaitInDefaultParams(),this.awaitIdentPos>0&&this.raise(this.awaitIdentPos,"Cannot use 'await' as identifier inside an async function"),this.yieldPos=oldYieldPos,this.awaitPos=oldAwaitPos,this.awaitIdentPos=oldAwaitIdentPos,this.parseArrowExpression(this.startNodeAt(startPos,startLoc),exprList,!0,forInit);this.checkExpressionErrors(refDestructuringErrors,!0),this.yieldPos=oldYieldPos||this.yieldPos,this.awaitPos=oldAwaitPos||this.awaitPos,this.awaitIdentPos=oldAwaitIdentPos||this.awaitIdentPos;var node$1=this.startNodeAt(startPos,startLoc);node$1.callee=base,node$1.arguments=exprList,optionalSupported&&(node$1.optional=optional),base=this.finishNode(node$1,"CallExpression");}else if(this.type===types$1.backQuote){(optional||optionalChained)&&this.raise(this.start,"Optional chaining cannot appear in the tag of tagged template expressions");var node$2=this.startNodeAt(startPos,startLoc);node$2.tag=base,node$2.quasi=this.parseTemplate({isTagged:!0}),base=this.finishNode(node$2,"TaggedTemplateExpression");}return base},pp$5.parseExprAtom=function(refDestructuringErrors,forInit){this.type===types$1.slash&&this.readRegexp();var node,canBeArrow=this.potentialArrowAt===this.start;switch(this.type){case types$1._super:return this.allowSuper||this.raise(this.start,"'super' keyword outside a method"),node=this.startNode(),this.next(),this.type!==types$1.parenL||this.allowDirectSuper||this.raise(node.start,"super() call outside constructor of a subclass"),this.type!==types$1.dot&&this.type!==types$1.bracketL&&this.type!==types$1.parenL&&this.unexpected(),this.finishNode(node,"Super");case types$1._this:return node=this.startNode(),this.next(),this.finishNode(node,"ThisExpression");case types$1.name:var startPos=this.start,startLoc=this.startLoc,containsEsc=this.containsEsc,id=this.parseIdent(!1);if(this.options.ecmaVersion>=8&&!containsEsc&&"async"===id.name&&!this.canInsertSemicolon()&&this.eat(types$1._function))return this.overrideContext(types.f_expr),this.parseFunction(this.startNodeAt(startPos,startLoc),0,!1,!0,forInit);if(canBeArrow&&!this.canInsertSemicolon()){if(this.eat(types$1.arrow))return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),[id],!1,forInit);if(this.options.ecmaVersion>=8&&"async"===id.name&&this.type===types$1.name&&!containsEsc&&(!this.potentialArrowInForAwait||"of"!==this.value||this.containsEsc))return id=this.parseIdent(!1),!this.canInsertSemicolon()&&this.eat(types$1.arrow)||this.unexpected(),this.parseArrowExpression(this.startNodeAt(startPos,startLoc),[id],!0,forInit)}return id;case types$1.regexp:var value=this.value;return (node=this.parseLiteral(value.value)).regex={pattern:value.pattern,flags:value.flags},node;case types$1.num:case types$1.string:return this.parseLiteral(this.value);case types$1._null:case types$1._true:case types$1._false:return (node=this.startNode()).value=this.type===types$1._null?null:this.type===types$1._true,node.raw=this.type.keyword,this.next(),this.finishNode(node,"Literal");case types$1.parenL:var start=this.start,expr=this.parseParenAndDistinguishExpression(canBeArrow,forInit);return refDestructuringErrors&&(refDestructuringErrors.parenthesizedAssign<0&&!this.isSimpleAssignTarget(expr)&&(refDestructuringErrors.parenthesizedAssign=start),refDestructuringErrors.parenthesizedBind<0&&(refDestructuringErrors.parenthesizedBind=start)),expr;case types$1.bracketL:return node=this.startNode(),this.next(),node.elements=this.parseExprList(types$1.bracketR,!0,!0,refDestructuringErrors),this.finishNode(node,"ArrayExpression");case types$1.braceL:return this.overrideContext(types.b_expr),this.parseObj(!1,refDestructuringErrors);case types$1._function:return node=this.startNode(),this.next(),this.parseFunction(node,0);case types$1._class:return this.parseClass(this.startNode(),!1);case types$1._new:return this.parseNew();case types$1.backQuote:return this.parseTemplate();case types$1._import:return this.options.ecmaVersion>=11?this.parseExprImport():this.unexpected();default:this.unexpected();}},pp$5.parseExprImport=function(){var node=this.startNode();this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword import");var meta=this.parseIdent(!0);switch(this.type){case types$1.parenL:return this.parseDynamicImport(node);case types$1.dot:return node.meta=meta,this.parseImportMeta(node);default:this.unexpected();}},pp$5.parseDynamicImport=function(node){if(this.next(),node.source=this.parseMaybeAssign(),!this.eat(types$1.parenR)){var errorPos=this.start;this.eat(types$1.comma)&&this.eat(types$1.parenR)?this.raiseRecoverable(errorPos,"Trailing comma is not allowed in import()"):this.unexpected(errorPos);}return this.finishNode(node,"ImportExpression")},pp$5.parseImportMeta=function(node){this.next();var containsEsc=this.containsEsc;return node.property=this.parseIdent(!0),"meta"!==node.property.name&&this.raiseRecoverable(node.property.start,"The only valid meta property for import is 'import.meta'"),containsEsc&&this.raiseRecoverable(node.start,"'import.meta' must not contain escaped characters"),"module"===this.options.sourceType||this.options.allowImportExportEverywhere||this.raiseRecoverable(node.start,"Cannot use 'import.meta' outside a module"),this.finishNode(node,"MetaProperty")},pp$5.parseLiteral=function(value){var node=this.startNode();return node.value=value,node.raw=this.input.slice(this.start,this.end),110===node.raw.charCodeAt(node.raw.length-1)&&(node.bigint=node.raw.slice(0,-1).replace(/_/g,"")),this.next(),this.finishNode(node,"Literal")},pp$5.parseParenExpression=function(){this.expect(types$1.parenL);var val=this.parseExpression();return this.expect(types$1.parenR),val},pp$5.parseParenAndDistinguishExpression=function(canBeArrow,forInit){var val,startPos=this.start,startLoc=this.startLoc,allowTrailingComma=this.options.ecmaVersion>=8;if(this.options.ecmaVersion>=6){this.next();var spreadStart,innerStartPos=this.start,innerStartLoc=this.startLoc,exprList=[],first=!0,lastIsComma=!1,refDestructuringErrors=new DestructuringErrors,oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos;for(this.yieldPos=0,this.awaitPos=0;this.type!==types$1.parenR;){if(first?first=!1:this.expect(types$1.comma),allowTrailingComma&&this.afterTrailingComma(types$1.parenR,!0)){lastIsComma=!0;break}if(this.type===types$1.ellipsis){spreadStart=this.start,exprList.push(this.parseParenItem(this.parseRestBinding())),this.type===types$1.comma&&this.raise(this.start,"Comma is not permitted after the rest element");break}exprList.push(this.parseMaybeAssign(!1,refDestructuringErrors,this.parseParenItem));}var innerEndPos=this.lastTokEnd,innerEndLoc=this.lastTokEndLoc;if(this.expect(types$1.parenR),canBeArrow&&!this.canInsertSemicolon()&&this.eat(types$1.arrow))return this.checkPatternErrors(refDestructuringErrors,!1),this.checkYieldAwaitInDefaultParams(),this.yieldPos=oldYieldPos,this.awaitPos=oldAwaitPos,this.parseParenArrowList(startPos,startLoc,exprList,forInit);exprList.length&&!lastIsComma||this.unexpected(this.lastTokStart),spreadStart&&this.unexpected(spreadStart),this.checkExpressionErrors(refDestructuringErrors,!0),this.yieldPos=oldYieldPos||this.yieldPos,this.awaitPos=oldAwaitPos||this.awaitPos,exprList.length>1?((val=this.startNodeAt(innerStartPos,innerStartLoc)).expressions=exprList,this.finishNodeAt(val,"SequenceExpression",innerEndPos,innerEndLoc)):val=exprList[0];}else val=this.parseParenExpression();if(this.options.preserveParens){var par=this.startNodeAt(startPos,startLoc);return par.expression=val,this.finishNode(par,"ParenthesizedExpression")}return val},pp$5.parseParenItem=function(item){return item},pp$5.parseParenArrowList=function(startPos,startLoc,exprList,forInit){return this.parseArrowExpression(this.startNodeAt(startPos,startLoc),exprList,!1,forInit)};var empty=[];pp$5.parseNew=function(){this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword new");var node=this.startNode(),meta=this.parseIdent(!0);if(this.options.ecmaVersion>=6&&this.eat(types$1.dot)){node.meta=meta;var containsEsc=this.containsEsc;return node.property=this.parseIdent(!0),"target"!==node.property.name&&this.raiseRecoverable(node.property.start,"The only valid meta property for new is 'new.target'"),containsEsc&&this.raiseRecoverable(node.start,"'new.target' must not contain escaped characters"),this.allowNewDotTarget||this.raiseRecoverable(node.start,"'new.target' can only be used in functions and class static block"),this.finishNode(node,"MetaProperty")}var startPos=this.start,startLoc=this.startLoc,isImport=this.type===types$1._import;return node.callee=this.parseSubscripts(this.parseExprAtom(),startPos,startLoc,!0,!1),isImport&&"ImportExpression"===node.callee.type&&this.raise(startPos,"Cannot use new with import()"),this.eat(types$1.parenL)?node.arguments=this.parseExprList(types$1.parenR,this.options.ecmaVersion>=8,!1):node.arguments=empty,this.finishNode(node,"NewExpression")},pp$5.parseTemplateElement=function(ref){var isTagged=ref.isTagged,elem=this.startNode();return this.type===types$1.invalidTemplate?(isTagged||this.raiseRecoverable(this.start,"Bad escape sequence in untagged template literal"),elem.value={raw:this.value,cooked:null}):elem.value={raw:this.input.slice(this.start,this.end).replace(/\r\n?/g,"\n"),cooked:this.value},this.next(),elem.tail=this.type===types$1.backQuote,this.finishNode(elem,"TemplateElement")},pp$5.parseTemplate=function(ref){void 0===ref&&(ref={});var isTagged=ref.isTagged;void 0===isTagged&&(isTagged=!1);var node=this.startNode();this.next(),node.expressions=[];var curElt=this.parseTemplateElement({isTagged});for(node.quasis=[curElt];!curElt.tail;)this.type===types$1.eof&&this.raise(this.pos,"Unterminated template literal"),this.expect(types$1.dollarBraceL),node.expressions.push(this.parseExpression()),this.expect(types$1.braceR),node.quasis.push(curElt=this.parseTemplateElement({isTagged}));return this.next(),this.finishNode(node,"TemplateLiteral")},pp$5.isAsyncProp=function(prop){return !prop.computed&&"Identifier"===prop.key.type&&"async"===prop.key.name&&(this.type===types$1.name||this.type===types$1.num||this.type===types$1.string||this.type===types$1.bracketL||this.type.keyword||this.options.ecmaVersion>=9&&this.type===types$1.star)&&!lineBreak.test(this.input.slice(this.lastTokEnd,this.start))},pp$5.parseObj=function(isPattern,refDestructuringErrors){var node=this.startNode(),first=!0,propHash={};for(node.properties=[],this.next();!this.eat(types$1.braceR);){if(first)first=!1;else if(this.expect(types$1.comma),this.options.ecmaVersion>=5&&this.afterTrailingComma(types$1.braceR))break;var prop=this.parseProperty(isPattern,refDestructuringErrors);isPattern||this.checkPropClash(prop,propHash,refDestructuringErrors),node.properties.push(prop);}return this.finishNode(node,isPattern?"ObjectPattern":"ObjectExpression")},pp$5.parseProperty=function(isPattern,refDestructuringErrors){var isGenerator,isAsync,startPos,startLoc,prop=this.startNode();if(this.options.ecmaVersion>=9&&this.eat(types$1.ellipsis))return isPattern?(prop.argument=this.parseIdent(!1),this.type===types$1.comma&&this.raise(this.start,"Comma is not permitted after the rest element"),this.finishNode(prop,"RestElement")):(prop.argument=this.parseMaybeAssign(!1,refDestructuringErrors),this.type===types$1.comma&&refDestructuringErrors&&refDestructuringErrors.trailingComma<0&&(refDestructuringErrors.trailingComma=this.start),this.finishNode(prop,"SpreadElement"));this.options.ecmaVersion>=6&&(prop.method=!1,prop.shorthand=!1,(isPattern||refDestructuringErrors)&&(startPos=this.start,startLoc=this.startLoc),isPattern||(isGenerator=this.eat(types$1.star)));var containsEsc=this.containsEsc;return this.parsePropertyName(prop),!isPattern&&!containsEsc&&this.options.ecmaVersion>=8&&!isGenerator&&this.isAsyncProp(prop)?(isAsync=!0,isGenerator=this.options.ecmaVersion>=9&&this.eat(types$1.star),this.parsePropertyName(prop)):isAsync=!1,this.parsePropertyValue(prop,isPattern,isGenerator,isAsync,startPos,startLoc,refDestructuringErrors,containsEsc),this.finishNode(prop,"Property")},pp$5.parsePropertyValue=function(prop,isPattern,isGenerator,isAsync,startPos,startLoc,refDestructuringErrors,containsEsc){if((isGenerator||isAsync)&&this.type===types$1.colon&&this.unexpected(),this.eat(types$1.colon))prop.value=isPattern?this.parseMaybeDefault(this.start,this.startLoc):this.parseMaybeAssign(!1,refDestructuringErrors),prop.kind="init";else if(this.options.ecmaVersion>=6&&this.type===types$1.parenL)isPattern&&this.unexpected(),prop.kind="init",prop.method=!0,prop.value=this.parseMethod(isGenerator,isAsync);else if(isPattern||containsEsc||!(this.options.ecmaVersion>=5)||prop.computed||"Identifier"!==prop.key.type||"get"!==prop.key.name&&"set"!==prop.key.name||this.type===types$1.comma||this.type===types$1.braceR||this.type===types$1.eq)this.options.ecmaVersion>=6&&!prop.computed&&"Identifier"===prop.key.type?((isGenerator||isAsync)&&this.unexpected(),this.checkUnreserved(prop.key),"await"!==prop.key.name||this.awaitIdentPos||(this.awaitIdentPos=startPos),prop.kind="init",isPattern?prop.value=this.parseMaybeDefault(startPos,startLoc,this.copyNode(prop.key)):this.type===types$1.eq&&refDestructuringErrors?(refDestructuringErrors.shorthandAssign<0&&(refDestructuringErrors.shorthandAssign=this.start),prop.value=this.parseMaybeDefault(startPos,startLoc,this.copyNode(prop.key))):prop.value=this.copyNode(prop.key),prop.shorthand=!0):this.unexpected();else {(isGenerator||isAsync)&&this.unexpected(),prop.kind=prop.key.name,this.parsePropertyName(prop),prop.value=this.parseMethod(!1);var paramCount="get"===prop.kind?0:1;if(prop.value.params.length!==paramCount){var start=prop.value.start;"get"===prop.kind?this.raiseRecoverable(start,"getter should have no params"):this.raiseRecoverable(start,"setter should have exactly one param");}else "set"===prop.kind&&"RestElement"===prop.value.params[0].type&&this.raiseRecoverable(prop.value.params[0].start,"Setter cannot use rest params");}},pp$5.parsePropertyName=function(prop){if(this.options.ecmaVersion>=6){if(this.eat(types$1.bracketL))return prop.computed=!0,prop.key=this.parseMaybeAssign(),this.expect(types$1.bracketR),prop.key;prop.computed=!1;}return prop.key=this.type===types$1.num||this.type===types$1.string?this.parseExprAtom():this.parseIdent("never"!==this.options.allowReserved)},pp$5.initFunction=function(node){node.id=null,this.options.ecmaVersion>=6&&(node.generator=node.expression=!1),this.options.ecmaVersion>=8&&(node.async=!1);},pp$5.parseMethod=function(isGenerator,isAsync,allowDirectSuper){var node=this.startNode(),oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldAwaitIdentPos=this.awaitIdentPos;return this.initFunction(node),this.options.ecmaVersion>=6&&(node.generator=isGenerator),this.options.ecmaVersion>=8&&(node.async=!!isAsync),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,this.enterScope(64|functionFlags(isAsync,node.generator)|(allowDirectSuper?128:0)),this.expect(types$1.parenL),node.params=this.parseBindingList(types$1.parenR,!1,this.options.ecmaVersion>=8),this.checkYieldAwaitInDefaultParams(),this.parseFunctionBody(node,!1,!0,!1),this.yieldPos=oldYieldPos,this.awaitPos=oldAwaitPos,this.awaitIdentPos=oldAwaitIdentPos,this.finishNode(node,"FunctionExpression")},pp$5.parseArrowExpression=function(node,params,isAsync,forInit){var oldYieldPos=this.yieldPos,oldAwaitPos=this.awaitPos,oldAwaitIdentPos=this.awaitIdentPos;return this.enterScope(16|functionFlags(isAsync,!1)),this.initFunction(node),this.options.ecmaVersion>=8&&(node.async=!!isAsync),this.yieldPos=0,this.awaitPos=0,this.awaitIdentPos=0,node.params=this.toAssignableList(params,!0),this.parseFunctionBody(node,!0,!1,forInit),this.yieldPos=oldYieldPos,this.awaitPos=oldAwaitPos,this.awaitIdentPos=oldAwaitIdentPos,this.finishNode(node,"ArrowFunctionExpression")},pp$5.parseFunctionBody=function(node,isArrowFunction,isMethod,forInit){var isExpression=isArrowFunction&&this.type!==types$1.braceL,oldStrict=this.strict,useStrict=!1;if(isExpression)node.body=this.parseMaybeAssign(forInit),node.expression=!0,this.checkParams(node,!1);else {var nonSimple=this.options.ecmaVersion>=7&&!this.isSimpleParamList(node.params);oldStrict&&!nonSimple||(useStrict=this.strictDirective(this.end))&&nonSimple&&this.raiseRecoverable(node.start,"Illegal 'use strict' directive in function with non-simple parameter list");var oldLabels=this.labels;this.labels=[],useStrict&&(this.strict=!0),this.checkParams(node,!oldStrict&&!useStrict&&!isArrowFunction&&!isMethod&&this.isSimpleParamList(node.params)),this.strict&&node.id&&this.checkLValSimple(node.id,5),node.body=this.parseBlock(!1,void 0,useStrict&&!oldStrict),node.expression=!1,this.adaptDirectivePrologue(node.body.body),this.labels=oldLabels;}this.exitScope();},pp$5.isSimpleParamList=function(params){for(var i=0,list=params;i<list.length;i+=1){if("Identifier"!==list[i].type)return !1}return !0},pp$5.checkParams=function(node,allowDuplicates){for(var nameHash=Object.create(null),i=0,list=node.params;i<list.length;i+=1){var param=list[i];this.checkLValInnerPattern(param,1,allowDuplicates?null:nameHash);}},pp$5.parseExprList=function(close,allowTrailingComma,allowEmpty,refDestructuringErrors){for(var elts=[],first=!0;!this.eat(close);){if(first)first=!1;else if(this.expect(types$1.comma),allowTrailingComma&&this.afterTrailingComma(close))break;var elt=void 0;allowEmpty&&this.type===types$1.comma?elt=null:this.type===types$1.ellipsis?(elt=this.parseSpread(refDestructuringErrors),refDestructuringErrors&&this.type===types$1.comma&&refDestructuringErrors.trailingComma<0&&(refDestructuringErrors.trailingComma=this.start)):elt=this.parseMaybeAssign(!1,refDestructuringErrors),elts.push(elt);}return elts},pp$5.checkUnreserved=function(ref){var start=ref.start,end=ref.end,name=ref.name;(this.inGenerator&&"yield"===name&&this.raiseRecoverable(start,"Cannot use 'yield' as identifier inside a generator"),this.inAsync&&"await"===name&&this.raiseRecoverable(start,"Cannot use 'await' as identifier inside an async function"),this.currentThisScope().inClassFieldInit&&"arguments"===name&&this.raiseRecoverable(start,"Cannot use 'arguments' in class field initializer"),!this.inClassStaticBlock||"arguments"!==name&&"await"!==name||this.raise(start,"Cannot use "+name+" in class static initialization block"),this.keywords.test(name)&&this.raise(start,"Unexpected keyword '"+name+"'"),this.options.ecmaVersion<6&&-1!==this.input.slice(start,end).indexOf("\\"))||(this.strict?this.reservedWordsStrict:this.reservedWords).test(name)&&(this.inAsync||"await"!==name||this.raiseRecoverable(start,"Cannot use keyword 'await' outside an async function"),this.raiseRecoverable(start,"The keyword '"+name+"' is reserved"));},pp$5.parseIdent=function(liberal){var node=this.startNode();return this.type===types$1.name?node.name=this.value:this.type.keyword?(node.name=this.type.keyword,"class"!==node.name&&"function"!==node.name||this.lastTokEnd===this.lastTokStart+1&&46===this.input.charCodeAt(this.lastTokStart)||this.context.pop()):this.unexpected(),this.next(!!liberal),this.finishNode(node,"Identifier"),liberal||(this.checkUnreserved(node),"await"!==node.name||this.awaitIdentPos||(this.awaitIdentPos=node.start)),node},pp$5.parsePrivateIdent=function(){var node=this.startNode();return this.type===types$1.privateId?node.name=this.value:this.unexpected(),this.next(),this.finishNode(node,"PrivateIdentifier"),0===this.privateNameStack.length?this.raise(node.start,"Private field '#"+node.name+"' must be declared in an enclosing class"):this.privateNameStack[this.privateNameStack.length-1].used.push(node),node},pp$5.parseYield=function(forInit){this.yieldPos||(this.yieldPos=this.start);var node=this.startNode();return this.next(),this.type===types$1.semi||this.canInsertSemicolon()||this.type!==types$1.star&&!this.type.startsExpr?(node.delegate=!1,node.argument=null):(node.delegate=this.eat(types$1.star),node.argument=this.parseMaybeAssign(forInit)),this.finishNode(node,"YieldExpression")},pp$5.parseAwait=function(forInit){this.awaitPos||(this.awaitPos=this.start);var node=this.startNode();return this.next(),node.argument=this.parseMaybeUnary(null,!0,!1,forInit),this.finishNode(node,"AwaitExpression")};var pp$4=Parser.prototype;pp$4.raise=function(pos,message){var loc=getLineInfo(this.input,pos);message+=" ("+loc.line+":"+loc.column+")";var err=new SyntaxError(message);throw err.pos=pos,err.loc=loc,err.raisedAt=this.pos,err},pp$4.raiseRecoverable=pp$4.raise,pp$4.curPosition=function(){if(this.options.locations)return new Position(this.curLine,this.pos-this.lineStart)};var pp$3=Parser.prototype,Scope=function(flags){this.flags=flags,this.var=[],this.lexical=[],this.functions=[],this.inClassFieldInit=!1;};pp$3.enterScope=function(flags){this.scopeStack.push(new Scope(flags));},pp$3.exitScope=function(){this.scopeStack.pop();},pp$3.treatFunctionsAsVarInScope=function(scope){return scope.flags&SCOPE_FUNCTION||!this.inModule&&1&scope.flags},pp$3.declareName=function(name,bindingType,pos){var redeclared=!1;if(2===bindingType){var scope=this.currentScope();redeclared=scope.lexical.indexOf(name)>-1||scope.functions.indexOf(name)>-1||scope.var.indexOf(name)>-1,scope.lexical.push(name),this.inModule&&1&scope.flags&&delete this.undefinedExports[name];}else if(4===bindingType){this.currentScope().lexical.push(name);}else if(3===bindingType){var scope$2=this.currentScope();redeclared=this.treatFunctionsAsVar?scope$2.lexical.indexOf(name)>-1:scope$2.lexical.indexOf(name)>-1||scope$2.var.indexOf(name)>-1,scope$2.functions.push(name);}else for(var i=this.scopeStack.length-1;i>=0;--i){var scope$3=this.scopeStack[i];if(scope$3.lexical.indexOf(name)>-1&&!(32&scope$3.flags&&scope$3.lexical[0]===name)||!this.treatFunctionsAsVarInScope(scope$3)&&scope$3.functions.indexOf(name)>-1){redeclared=!0;break}if(scope$3.var.push(name),this.inModule&&1&scope$3.flags&&delete this.undefinedExports[name],scope$3.flags&SCOPE_VAR)break}redeclared&&this.raiseRecoverable(pos,"Identifier '"+name+"' has already been declared");},pp$3.checkLocalExport=function(id){-1===this.scopeStack[0].lexical.indexOf(id.name)&&-1===this.scopeStack[0].var.indexOf(id.name)&&(this.undefinedExports[id.name]=id);},pp$3.currentScope=function(){return this.scopeStack[this.scopeStack.length-1]},pp$3.currentVarScope=function(){for(var i=this.scopeStack.length-1;;i--){var scope=this.scopeStack[i];if(scope.flags&SCOPE_VAR)return scope}},pp$3.currentThisScope=function(){for(var i=this.scopeStack.length-1;;i--){var scope=this.scopeStack[i];if(scope.flags&SCOPE_VAR&&!(16&scope.flags))return scope}};var Node=function(parser,pos,loc){this.type="",this.start=pos,this.end=0,parser.options.locations&&(this.loc=new SourceLocation(parser,loc)),parser.options.directSourceFile&&(this.sourceFile=parser.options.directSourceFile),parser.options.ranges&&(this.range=[pos,0]);},pp$2=Parser.prototype;function finishNodeAt(node,type,pos,loc){return node.type=type,node.end=pos,this.options.locations&&(node.loc.end=loc),this.options.ranges&&(node.range[1]=pos),node}pp$2.startNode=function(){return new Node(this,this.start,this.startLoc)},pp$2.startNodeAt=function(pos,loc){return new Node(this,pos,loc)},pp$2.finishNode=function(node,type){return finishNodeAt.call(this,node,type,this.lastTokEnd,this.lastTokEndLoc)},pp$2.finishNodeAt=function(node,type,pos,loc){return finishNodeAt.call(this,node,type,pos,loc)},pp$2.copyNode=function(node){var newNode=new Node(this,node.start,this.startLoc);for(var prop in node)newNode[prop]=node[prop];return newNode};var ecma9BinaryProperties="ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS",ecma10BinaryProperties=ecma9BinaryProperties+" Extended_Pictographic",ecma12BinaryProperties=ecma10BinaryProperties+" EBase EComp EMod EPres ExtPict",unicodeBinaryProperties={9:ecma9BinaryProperties,10:ecma10BinaryProperties,11:ecma10BinaryProperties,12:ecma12BinaryProperties,13:ecma12BinaryProperties,14:ecma12BinaryProperties},unicodeGeneralCategoryValues="Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu",ecma9ScriptValues="Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb",ecma10ScriptValues=ecma9ScriptValues+" Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd",ecma11ScriptValues=ecma10ScriptValues+" Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho",ecma12ScriptValues=ecma11ScriptValues+" Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi",ecma13ScriptValues=ecma12ScriptValues+" Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith",unicodeScriptValues={9:ecma9ScriptValues,10:ecma10ScriptValues,11:ecma11ScriptValues,12:ecma12ScriptValues,13:ecma13ScriptValues,14:ecma13ScriptValues+" Kawi Nag_Mundari Nagm"},data={};function buildUnicodeData(ecmaVersion){var d=data[ecmaVersion]={binary:wordsRegexp(unicodeBinaryProperties[ecmaVersion]+" "+unicodeGeneralCategoryValues),nonBinary:{General_Category:wordsRegexp(unicodeGeneralCategoryValues),Script:wordsRegexp(unicodeScriptValues[ecmaVersion])}};d.nonBinary.Script_Extensions=d.nonBinary.Script,d.nonBinary.gc=d.nonBinary.General_Category,d.nonBinary.sc=d.nonBinary.Script,d.nonBinary.scx=d.nonBinary.Script_Extensions;}for(var i=0,list=[9,10,11,12,13,14];i<list.length;i+=1){buildUnicodeData(list[i]);}var pp$1=Parser.prototype,RegExpValidationState=function(parser){this.parser=parser,this.validFlags="gim"+(parser.options.ecmaVersion>=6?"uy":"")+(parser.options.ecmaVersion>=9?"s":"")+(parser.options.ecmaVersion>=13?"d":""),this.unicodeProperties=data[parser.options.ecmaVersion>=14?14:parser.options.ecmaVersion],this.source="",this.flags="",this.start=0,this.switchU=!1,this.switchN=!1,this.pos=0,this.lastIntValue=0,this.lastStringValue="",this.lastAssertionIsQuantifiable=!1,this.numCapturingParens=0,this.maxBackReference=0,this.groupNames=[],this.backReferenceNames=[];};function isSyntaxCharacter(ch){return 36===ch||ch>=40&&ch<=43||46===ch||63===ch||ch>=91&&ch<=94||ch>=123&&ch<=125}function isControlLetter(ch){return ch>=65&&ch<=90||ch>=97&&ch<=122}function isUnicodePropertyNameCharacter(ch){return isControlLetter(ch)||95===ch}function isUnicodePropertyValueCharacter(ch){return isUnicodePropertyNameCharacter(ch)||isDecimalDigit(ch)}function isDecimalDigit(ch){return ch>=48&&ch<=57}function isHexDigit(ch){return ch>=48&&ch<=57||ch>=65&&ch<=70||ch>=97&&ch<=102}function hexToInt(ch){return ch>=65&&ch<=70?ch-65+10:ch>=97&&ch<=102?ch-97+10:ch-48}function isOctalDigit(ch){return ch>=48&&ch<=55}RegExpValidationState.prototype.reset=function(start,pattern,flags){var unicode=-1!==flags.indexOf("u");this.start=0|start,this.source=pattern+"",this.flags=flags,this.switchU=unicode&&this.parser.options.ecmaVersion>=6,this.switchN=unicode&&this.parser.options.ecmaVersion>=9;},RegExpValidationState.prototype.raise=function(message){this.parser.raiseRecoverable(this.start,"Invalid regular expression: /"+this.source+"/: "+message);},RegExpValidationState.prototype.at=function(i,forceU){void 0===forceU&&(forceU=!1);var s=this.source,l=s.length;if(i>=l)return -1;var c=s.charCodeAt(i);if(!forceU&&!this.switchU||c<=55295||c>=57344||i+1>=l)return c;var next=s.charCodeAt(i+1);return next>=56320&&next<=57343?(c<<10)+next-56613888:c},RegExpValidationState.prototype.nextIndex=function(i,forceU){void 0===forceU&&(forceU=!1);var s=this.source,l=s.length;if(i>=l)return l;var next,c=s.charCodeAt(i);return !forceU&&!this.switchU||c<=55295||c>=57344||i+1>=l||(next=s.charCodeAt(i+1))<56320||next>57343?i+1:i+2},RegExpValidationState.prototype.current=function(forceU){return void 0===forceU&&(forceU=!1),this.at(this.pos,forceU)},RegExpValidationState.prototype.lookahead=function(forceU){return void 0===forceU&&(forceU=!1),this.at(this.nextIndex(this.pos,forceU),forceU)},RegExpValidationState.prototype.advance=function(forceU){void 0===forceU&&(forceU=!1),this.pos=this.nextIndex(this.pos,forceU);},RegExpValidationState.prototype.eat=function(ch,forceU){return void 0===forceU&&(forceU=!1),this.current(forceU)===ch&&(this.advance(forceU),!0)},pp$1.validateRegExpFlags=function(state){for(var validFlags=state.validFlags,flags=state.flags,i=0;i<flags.length;i++){var flag=flags.charAt(i);-1===validFlags.indexOf(flag)&&this.raise(state.start,"Invalid regular expression flag"),flags.indexOf(flag,i+1)>-1&&this.raise(state.start,"Duplicate regular expression flag");}},pp$1.validateRegExpPattern=function(state){this.regexp_pattern(state),!state.switchN&&this.options.ecmaVersion>=9&&state.groupNames.length>0&&(state.switchN=!0,this.regexp_pattern(state));},pp$1.regexp_pattern=function(state){state.pos=0,state.lastIntValue=0,state.lastStringValue="",state.lastAssertionIsQuantifiable=!1,state.numCapturingParens=0,state.maxBackReference=0,state.groupNames.length=0,state.backReferenceNames.length=0,this.regexp_disjunction(state),state.pos!==state.source.length&&(state.eat(41)&&state.raise("Unmatched ')'"),(state.eat(93)||state.eat(125))&&state.raise("Lone quantifier brackets")),state.maxBackReference>state.numCapturingParens&&state.raise("Invalid escape");for(var i=0,list=state.backReferenceNames;i<list.length;i+=1){var name=list[i];-1===state.groupNames.indexOf(name)&&state.raise("Invalid named capture referenced");}},pp$1.regexp_disjunction=function(state){for(this.regexp_alternative(state);state.eat(124);)this.regexp_alternative(state);this.regexp_eatQuantifier(state,!0)&&state.raise("Nothing to repeat"),state.eat(123)&&state.raise("Lone quantifier brackets");},pp$1.regexp_alternative=function(state){for(;state.pos<state.source.length&&this.regexp_eatTerm(state););},pp$1.regexp_eatTerm=function(state){return this.regexp_eatAssertion(state)?(state.lastAssertionIsQuantifiable&&this.regexp_eatQuantifier(state)&&state.switchU&&state.raise("Invalid quantifier"),!0):!!(state.switchU?this.regexp_eatAtom(state):this.regexp_eatExtendedAtom(state))&&(this.regexp_eatQuantifier(state),!0)},pp$1.regexp_eatAssertion=function(state){var start=state.pos;if(state.lastAssertionIsQuantifiable=!1,state.eat(94)||state.eat(36))return !0;if(state.eat(92)){if(state.eat(66)||state.eat(98))return !0;state.pos=start;}if(state.eat(40)&&state.eat(63)){var lookbehind=!1;if(this.options.ecmaVersion>=9&&(lookbehind=state.eat(60)),state.eat(61)||state.eat(33))return this.regexp_disjunction(state),state.eat(41)||state.raise("Unterminated group"),state.lastAssertionIsQuantifiable=!lookbehind,!0}return state.pos=start,!1},pp$1.regexp_eatQuantifier=function(state,noError){return void 0===noError&&(noError=!1),!!this.regexp_eatQuantifierPrefix(state,noError)&&(state.eat(63),!0)},pp$1.regexp_eatQuantifierPrefix=function(state,noError){return state.eat(42)||state.eat(43)||state.eat(63)||this.regexp_eatBracedQuantifier(state,noError)},pp$1.regexp_eatBracedQuantifier=function(state,noError){var start=state.pos;if(state.eat(123)){var min=0,max=-1;if(this.regexp_eatDecimalDigits(state)&&(min=state.lastIntValue,state.eat(44)&&this.regexp_eatDecimalDigits(state)&&(max=state.lastIntValue),state.eat(125)))return -1!==max&&max<min&&!noError&&state.raise("numbers out of order in {} quantifier"),!0;state.switchU&&!noError&&state.raise("Incomplete quantifier"),state.pos=start;}return !1},pp$1.regexp_eatAtom=function(state){return this.regexp_eatPatternCharacters(state)||state.eat(46)||this.regexp_eatReverseSolidusAtomEscape(state)||this.regexp_eatCharacterClass(state)||this.regexp_eatUncapturingGroup(state)||this.regexp_eatCapturingGroup(state)},pp$1.regexp_eatReverseSolidusAtomEscape=function(state){var start=state.pos;if(state.eat(92)){if(this.regexp_eatAtomEscape(state))return !0;state.pos=start;}return !1},pp$1.regexp_eatUncapturingGroup=function(state){var start=state.pos;if(state.eat(40)){if(state.eat(63)&&state.eat(58)){if(this.regexp_disjunction(state),state.eat(41))return !0;state.raise("Unterminated group");}state.pos=start;}return !1},pp$1.regexp_eatCapturingGroup=function(state){if(state.eat(40)){if(this.options.ecmaVersion>=9?this.regexp_groupSpecifier(state):63===state.current()&&state.raise("Invalid group"),this.regexp_disjunction(state),state.eat(41))return state.numCapturingParens+=1,!0;state.raise("Unterminated group");}return !1},pp$1.regexp_eatExtendedAtom=function(state){return state.eat(46)||this.regexp_eatReverseSolidusAtomEscape(state)||this.regexp_eatCharacterClass(state)||this.regexp_eatUncapturingGroup(state)||this.regexp_eatCapturingGroup(state)||this.regexp_eatInvalidBracedQuantifier(state)||this.regexp_eatExtendedPatternCharacter(state)},pp$1.regexp_eatInvalidBracedQuantifier=function(state){return this.regexp_eatBracedQuantifier(state,!0)&&state.raise("Nothing to repeat"),!1},pp$1.regexp_eatSyntaxCharacter=function(state){var ch=state.current();return !!isSyntaxCharacter(ch)&&(state.lastIntValue=ch,state.advance(),!0)},pp$1.regexp_eatPatternCharacters=function(state){for(var start=state.pos,ch=0;-1!==(ch=state.current())&&!isSyntaxCharacter(ch);)state.advance();return state.pos!==start},pp$1.regexp_eatExtendedPatternCharacter=function(state){var ch=state.current();return !(-1===ch||36===ch||ch>=40&&ch<=43||46===ch||63===ch||91===ch||94===ch||124===ch)&&(state.advance(),!0)},pp$1.regexp_groupSpecifier=function(state){if(state.eat(63)){if(this.regexp_eatGroupName(state))return -1!==state.groupNames.indexOf(state.lastStringValue)&&state.raise("Duplicate capture group name"),void state.groupNames.push(state.lastStringValue);state.raise("Invalid group");}},pp$1.regexp_eatGroupName=function(state){if(state.lastStringValue="",state.eat(60)){if(this.regexp_eatRegExpIdentifierName(state)&&state.eat(62))return !0;state.raise("Invalid capture group name");}return !1},pp$1.regexp_eatRegExpIdentifierName=function(state){if(state.lastStringValue="",this.regexp_eatRegExpIdentifierStart(state)){for(state.lastStringValue+=codePointToString(state.lastIntValue);this.regexp_eatRegExpIdentifierPart(state);)state.lastStringValue+=codePointToString(state.lastIntValue);return !0}return !1},pp$1.regexp_eatRegExpIdentifierStart=function(state){var start=state.pos,forceU=this.options.ecmaVersion>=11,ch=state.current(forceU);return state.advance(forceU),92===ch&&this.regexp_eatRegExpUnicodeEscapeSequence(state,forceU)&&(ch=state.lastIntValue),function(ch){return isIdentifierStart(ch,!0)||36===ch||95===ch}(ch)?(state.lastIntValue=ch,!0):(state.pos=start,!1)},pp$1.regexp_eatRegExpIdentifierPart=function(state){var start=state.pos,forceU=this.options.ecmaVersion>=11,ch=state.current(forceU);return state.advance(forceU),92===ch&&this.regexp_eatRegExpUnicodeEscapeSequence(state,forceU)&&(ch=state.lastIntValue),function(ch){return isIdentifierChar(ch,!0)||36===ch||95===ch||8204===ch||8205===ch}(ch)?(state.lastIntValue=ch,!0):(state.pos=start,!1)},pp$1.regexp_eatAtomEscape=function(state){return !!(this.regexp_eatBackReference(state)||this.regexp_eatCharacterClassEscape(state)||this.regexp_eatCharacterEscape(state)||state.switchN&&this.regexp_eatKGroupName(state))||(state.switchU&&(99===state.current()&&state.raise("Invalid unicode escape"),state.raise("Invalid escape")),!1)},pp$1.regexp_eatBackReference=function(state){var start=state.pos;if(this.regexp_eatDecimalEscape(state)){var n=state.lastIntValue;if(state.switchU)return n>state.maxBackReference&&(state.maxBackReference=n),!0;if(n<=state.numCapturingParens)return !0;state.pos=start;}return !1},pp$1.regexp_eatKGroupName=function(state){if(state.eat(107)){if(this.regexp_eatGroupName(state))return state.backReferenceNames.push(state.lastStringValue),!0;state.raise("Invalid named reference");}return !1},pp$1.regexp_eatCharacterEscape=function(state){return this.regexp_eatControlEscape(state)||this.regexp_eatCControlLetter(state)||this.regexp_eatZero(state)||this.regexp_eatHexEscapeSequence(state)||this.regexp_eatRegExpUnicodeEscapeSequence(state,!1)||!state.switchU&&this.regexp_eatLegacyOctalEscapeSequence(state)||this.regexp_eatIdentityEscape(state)},pp$1.regexp_eatCControlLetter=function(state){var start=state.pos;if(state.eat(99)){if(this.regexp_eatControlLetter(state))return !0;state.pos=start;}return !1},pp$1.regexp_eatZero=function(state){return 48===state.current()&&!isDecimalDigit(state.lookahead())&&(state.lastIntValue=0,state.advance(),!0)},pp$1.regexp_eatControlEscape=function(state){var ch=state.current();return 116===ch?(state.lastIntValue=9,state.advance(),!0):110===ch?(state.lastIntValue=10,state.advance(),!0):118===ch?(state.lastIntValue=11,state.advance(),!0):102===ch?(state.lastIntValue=12,state.advance(),!0):114===ch&&(state.lastIntValue=13,state.advance(),!0)},pp$1.regexp_eatControlLetter=function(state){var ch=state.current();return !!isControlLetter(ch)&&(state.lastIntValue=ch%32,state.advance(),!0)},pp$1.regexp_eatRegExpUnicodeEscapeSequence=function(state,forceU){void 0===forceU&&(forceU=!1);var ch,start=state.pos,switchU=forceU||state.switchU;if(state.eat(117)){if(this.regexp_eatFixedHexDigits(state,4)){var lead=state.lastIntValue;if(switchU&&lead>=55296&&lead<=56319){var leadSurrogateEnd=state.pos;if(state.eat(92)&&state.eat(117)&&this.regexp_eatFixedHexDigits(state,4)){var trail=state.lastIntValue;if(trail>=56320&&trail<=57343)return state.lastIntValue=1024*(lead-55296)+(trail-56320)+65536,!0}state.pos=leadSurrogateEnd,state.lastIntValue=lead;}return !0}if(switchU&&state.eat(123)&&this.regexp_eatHexDigits(state)&&state.eat(125)&&((ch=state.lastIntValue)>=0&&ch<=1114111))return !0;switchU&&state.raise("Invalid unicode escape"),state.pos=start;}return !1},pp$1.regexp_eatIdentityEscape=function(state){if(state.switchU)return !!this.regexp_eatSyntaxCharacter(state)||!!state.eat(47)&&(state.lastIntValue=47,!0);var ch=state.current();return !(99===ch||state.switchN&&107===ch)&&(state.lastIntValue=ch,state.advance(),!0)},pp$1.regexp_eatDecimalEscape=function(state){state.lastIntValue=0;var ch=state.current();if(ch>=49&&ch<=57){do{state.lastIntValue=10*state.lastIntValue+(ch-48),state.advance();}while((ch=state.current())>=48&&ch<=57);return !0}return !1},pp$1.regexp_eatCharacterClassEscape=function(state){var ch=state.current();if(function(ch){return 100===ch||68===ch||115===ch||83===ch||119===ch||87===ch}(ch))return state.lastIntValue=-1,state.advance(),!0;if(state.switchU&&this.options.ecmaVersion>=9&&(80===ch||112===ch)){if(state.lastIntValue=-1,state.advance(),state.eat(123)&&this.regexp_eatUnicodePropertyValueExpression(state)&&state.eat(125))return !0;state.raise("Invalid property name");}return !1},pp$1.regexp_eatUnicodePropertyValueExpression=function(state){var start=state.pos;if(this.regexp_eatUnicodePropertyName(state)&&state.eat(61)){var name=state.lastStringValue;if(this.regexp_eatUnicodePropertyValue(state)){var value=state.lastStringValue;return this.regexp_validateUnicodePropertyNameAndValue(state,name,value),!0}}if(state.pos=start,this.regexp_eatLoneUnicodePropertyNameOrValue(state)){var nameOrValue=state.lastStringValue;return this.regexp_validateUnicodePropertyNameOrValue(state,nameOrValue),!0}return !1},pp$1.regexp_validateUnicodePropertyNameAndValue=function(state,name,value){hasOwn(state.unicodeProperties.nonBinary,name)||state.raise("Invalid property name"),state.unicodeProperties.nonBinary[name].test(value)||state.raise("Invalid property value");},pp$1.regexp_validateUnicodePropertyNameOrValue=function(state,nameOrValue){state.unicodeProperties.binary.test(nameOrValue)||state.raise("Invalid property name");},pp$1.regexp_eatUnicodePropertyName=function(state){var ch=0;for(state.lastStringValue="";isUnicodePropertyNameCharacter(ch=state.current());)state.lastStringValue+=codePointToString(ch),state.advance();return ""!==state.lastStringValue},pp$1.regexp_eatUnicodePropertyValue=function(state){var ch=0;for(state.lastStringValue="";isUnicodePropertyValueCharacter(ch=state.current());)state.lastStringValue+=codePointToString(ch),state.advance();return ""!==state.lastStringValue},pp$1.regexp_eatLoneUnicodePropertyNameOrValue=function(state){return this.regexp_eatUnicodePropertyValue(state)},pp$1.regexp_eatCharacterClass=function(state){if(state.eat(91)){if(state.eat(94),this.regexp_classRanges(state),state.eat(93))return !0;state.raise("Unterminated character class");}return !1},pp$1.regexp_classRanges=function(state){for(;this.regexp_eatClassAtom(state);){var left=state.lastIntValue;if(state.eat(45)&&this.regexp_eatClassAtom(state)){var right=state.lastIntValue;!state.switchU||-1!==left&&-1!==right||state.raise("Invalid character class"),-1!==left&&-1!==right&&left>right&&state.raise("Range out of order in character class");}}},pp$1.regexp_eatClassAtom=function(state){var start=state.pos;if(state.eat(92)){if(this.regexp_eatClassEscape(state))return !0;if(state.switchU){var ch$1=state.current();(99===ch$1||isOctalDigit(ch$1))&&state.raise("Invalid class escape"),state.raise("Invalid escape");}state.pos=start;}var ch=state.current();return 93!==ch&&(state.lastIntValue=ch,state.advance(),!0)},pp$1.regexp_eatClassEscape=function(state){var start=state.pos;if(state.eat(98))return state.lastIntValue=8,!0;if(state.switchU&&state.eat(45))return state.lastIntValue=45,!0;if(!state.switchU&&state.eat(99)){if(this.regexp_eatClassControlLetter(state))return !0;state.pos=start;}return this.regexp_eatCharacterClassEscape(state)||this.regexp_eatCharacterEscape(state)},pp$1.regexp_eatClassControlLetter=function(state){var ch=state.current();return !(!isDecimalDigit(ch)&&95!==ch)&&(state.lastIntValue=ch%32,state.advance(),!0)},pp$1.regexp_eatHexEscapeSequence=function(state){var start=state.pos;if(state.eat(120)){if(this.regexp_eatFixedHexDigits(state,2))return !0;state.switchU&&state.raise("Invalid escape"),state.pos=start;}return !1},pp$1.regexp_eatDecimalDigits=function(state){var start=state.pos,ch=0;for(state.lastIntValue=0;isDecimalDigit(ch=state.current());)state.lastIntValue=10*state.lastIntValue+(ch-48),state.advance();return state.pos!==start},pp$1.regexp_eatHexDigits=function(state){var start=state.pos,ch=0;for(state.lastIntValue=0;isHexDigit(ch=state.current());)state.lastIntValue=16*state.lastIntValue+hexToInt(ch),state.advance();return state.pos!==start},pp$1.regexp_eatLegacyOctalEscapeSequence=function(state){if(this.regexp_eatOctalDigit(state)){var n1=state.lastIntValue;if(this.regexp_eatOctalDigit(state)){var n2=state.lastIntValue;n1<=3&&this.regexp_eatOctalDigit(state)?state.lastIntValue=64*n1+8*n2+state.lastIntValue:state.lastIntValue=8*n1+n2;}else state.lastIntValue=n1;return !0}return !1},pp$1.regexp_eatOctalDigit=function(state){var ch=state.current();return isOctalDigit(ch)?(state.lastIntValue=ch-48,state.advance(),!0):(state.lastIntValue=0,!1)},pp$1.regexp_eatFixedHexDigits=function(state,length){var start=state.pos;state.lastIntValue=0;for(var i=0;i<length;++i){var ch=state.current();if(!isHexDigit(ch))return state.pos=start,!1;state.lastIntValue=16*state.lastIntValue+hexToInt(ch),state.advance();}return !0};var Token=function(p){this.type=p.type,this.value=p.value,this.start=p.start,this.end=p.end,p.options.locations&&(this.loc=new SourceLocation(p,p.startLoc,p.endLoc)),p.options.ranges&&(this.range=[p.start,p.end]);},pp=Parser.prototype;function stringToBigInt(str){return "function"!=typeof BigInt?null:BigInt(str.replace(/_/g,""))}pp.next=function(ignoreEscapeSequenceInKeyword){!ignoreEscapeSequenceInKeyword&&this.type.keyword&&this.containsEsc&&this.raiseRecoverable(this.start,"Escape sequence in keyword "+this.type.keyword),this.options.onToken&&this.options.onToken(new Token(this)),this.lastTokEnd=this.end,this.lastTokStart=this.start,this.lastTokEndLoc=this.endLoc,this.lastTokStartLoc=this.startLoc,this.nextToken();},pp.getToken=function(){return this.next(),new Token(this)},"undefined"!=typeof Symbol&&(pp[Symbol.iterator]=function(){var this$1$1=this;return {next:function(){var token=this$1$1.getToken();return {done:token.type===types$1.eof,value:token}}}}),pp.nextToken=function(){var curContext=this.curContext();return curContext&&curContext.preserveSpace||this.skipSpace(),this.start=this.pos,this.options.locations&&(this.startLoc=this.curPosition()),this.pos>=this.input.length?this.finishToken(types$1.eof):curContext.override?curContext.override(this):void this.readToken(this.fullCharCodeAtPos())},pp.readToken=function(code){return isIdentifierStart(code,this.options.ecmaVersion>=6)||92===code?this.readWord():this.getTokenFromCode(code)},pp.fullCharCodeAtPos=function(){var code=this.input.charCodeAt(this.pos);if(code<=55295||code>=56320)return code;var next=this.input.charCodeAt(this.pos+1);return next<=56319||next>=57344?code:(code<<10)+next-56613888},pp.skipBlockComment=function(){var startLoc=this.options.onComment&&this.curPosition(),start=this.pos,end=this.input.indexOf("*/",this.pos+=2);if(-1===end&&this.raise(this.pos-2,"Unterminated comment"),this.pos=end+2,this.options.locations)for(var nextBreak=void 0,pos=start;(nextBreak=nextLineBreak(this.input,pos,this.pos))>-1;)++this.curLine,pos=this.lineStart=nextBreak;this.options.onComment&&this.options.onComment(!0,this.input.slice(start+2,end),start,this.pos,startLoc,this.curPosition());},pp.skipLineComment=function(startSkip){for(var start=this.pos,startLoc=this.options.onComment&&this.curPosition(),ch=this.input.charCodeAt(this.pos+=startSkip);this.pos<this.input.length&&!isNewLine(ch);)ch=this.input.charCodeAt(++this.pos);this.options.onComment&&this.options.onComment(!1,this.input.slice(start+startSkip,this.pos),start,this.pos,startLoc,this.curPosition());},pp.skipSpace=function(){loop:for(;this.pos<this.input.length;){var ch=this.input.charCodeAt(this.pos);switch(ch){case 32:case 160:++this.pos;break;case 13:10===this.input.charCodeAt(this.pos+1)&&++this.pos;case 10:case 8232:case 8233:++this.pos,this.options.locations&&(++this.curLine,this.lineStart=this.pos);break;case 47:switch(this.input.charCodeAt(this.pos+1)){case 42:this.skipBlockComment();break;case 47:this.skipLineComment(2);break;default:break loop}break;default:if(!(ch>8&&ch<14||ch>=5760&&nonASCIIwhitespace.test(String.fromCharCode(ch))))break loop;++this.pos;}}},pp.finishToken=function(type,val){this.end=this.pos,this.options.locations&&(this.endLoc=this.curPosition());var prevType=this.type;this.type=type,this.value=val,this.updateContext(prevType);},pp.readToken_dot=function(){var next=this.input.charCodeAt(this.pos+1);if(next>=48&&next<=57)return this.readNumber(!0);var next2=this.input.charCodeAt(this.pos+2);return this.options.ecmaVersion>=6&&46===next&&46===next2?(this.pos+=3,this.finishToken(types$1.ellipsis)):(++this.pos,this.finishToken(types$1.dot))},pp.readToken_slash=function(){var next=this.input.charCodeAt(this.pos+1);return this.exprAllowed?(++this.pos,this.readRegexp()):61===next?this.finishOp(types$1.assign,2):this.finishOp(types$1.slash,1)},pp.readToken_mult_modulo_exp=function(code){var next=this.input.charCodeAt(this.pos+1),size=1,tokentype=42===code?types$1.star:types$1.modulo;return this.options.ecmaVersion>=7&&42===code&&42===next&&(++size,tokentype=types$1.starstar,next=this.input.charCodeAt(this.pos+2)),61===next?this.finishOp(types$1.assign,size+1):this.finishOp(tokentype,size)},pp.readToken_pipe_amp=function(code){var next=this.input.charCodeAt(this.pos+1);if(next===code){if(this.options.ecmaVersion>=12)if(61===this.input.charCodeAt(this.pos+2))return this.finishOp(types$1.assign,3);return this.finishOp(124===code?types$1.logicalOR:types$1.logicalAND,2)}return 61===next?this.finishOp(types$1.assign,2):this.finishOp(124===code?types$1.bitwiseOR:types$1.bitwiseAND,1)},pp.readToken_caret=function(){return 61===this.input.charCodeAt(this.pos+1)?this.finishOp(types$1.assign,2):this.finishOp(types$1.bitwiseXOR,1)},pp.readToken_plus_min=function(code){var next=this.input.charCodeAt(this.pos+1);return next===code?45!==next||this.inModule||62!==this.input.charCodeAt(this.pos+2)||0!==this.lastTokEnd&&!lineBreak.test(this.input.slice(this.lastTokEnd,this.pos))?this.finishOp(types$1.incDec,2):(this.skipLineComment(3),this.skipSpace(),this.nextToken()):61===next?this.finishOp(types$1.assign,2):this.finishOp(types$1.plusMin,1)},pp.readToken_lt_gt=function(code){var next=this.input.charCodeAt(this.pos+1),size=1;return next===code?(size=62===code&&62===this.input.charCodeAt(this.pos+2)?3:2,61===this.input.charCodeAt(this.pos+size)?this.finishOp(types$1.assign,size+1):this.finishOp(types$1.bitShift,size)):33!==next||60!==code||this.inModule||45!==this.input.charCodeAt(this.pos+2)||45!==this.input.charCodeAt(this.pos+3)?(61===next&&(size=2),this.finishOp(types$1.relational,size)):(this.skipLineComment(4),this.skipSpace(),this.nextToken())},pp.readToken_eq_excl=function(code){var next=this.input.charCodeAt(this.pos+1);return 61===next?this.finishOp(types$1.equality,61===this.input.charCodeAt(this.pos+2)?3:2):61===code&&62===next&&this.options.ecmaVersion>=6?(this.pos+=2,this.finishToken(types$1.arrow)):this.finishOp(61===code?types$1.eq:types$1.prefix,1)},pp.readToken_question=function(){var ecmaVersion=this.options.ecmaVersion;if(ecmaVersion>=11){var next=this.input.charCodeAt(this.pos+1);if(46===next){var next2=this.input.charCodeAt(this.pos+2);if(next2<48||next2>57)return this.finishOp(types$1.questionDot,2)}if(63===next){if(ecmaVersion>=12)if(61===this.input.charCodeAt(this.pos+2))return this.finishOp(types$1.assign,3);return this.finishOp(types$1.coalesce,2)}}return this.finishOp(types$1.question,1)},pp.readToken_numberSign=function(){var code=35;if(this.options.ecmaVersion>=13&&(++this.pos,isIdentifierStart(code=this.fullCharCodeAtPos(),!0)||92===code))return this.finishToken(types$1.privateId,this.readWord1());this.raise(this.pos,"Unexpected character '"+codePointToString(code)+"'");},pp.getTokenFromCode=function(code){switch(code){case 46:return this.readToken_dot();case 40:return ++this.pos,this.finishToken(types$1.parenL);case 41:return ++this.pos,this.finishToken(types$1.parenR);case 59:return ++this.pos,this.finishToken(types$1.semi);case 44:return ++this.pos,this.finishToken(types$1.comma);case 91:return ++this.pos,this.finishToken(types$1.bracketL);case 93:return ++this.pos,this.finishToken(types$1.bracketR);case 123:return ++this.pos,this.finishToken(types$1.braceL);case 125:return ++this.pos,this.finishToken(types$1.braceR);case 58:return ++this.pos,this.finishToken(types$1.colon);case 96:if(this.options.ecmaVersion<6)break;return ++this.pos,this.finishToken(types$1.backQuote);case 48:var next=this.input.charCodeAt(this.pos+1);if(120===next||88===next)return this.readRadixNumber(16);if(this.options.ecmaVersion>=6){if(111===next||79===next)return this.readRadixNumber(8);if(98===next||66===next)return this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return this.readNumber(!1);case 34:case 39:return this.readString(code);case 47:return this.readToken_slash();case 37:case 42:return this.readToken_mult_modulo_exp(code);case 124:case 38:return this.readToken_pipe_amp(code);case 94:return this.readToken_caret();case 43:case 45:return this.readToken_plus_min(code);case 60:case 62:return this.readToken_lt_gt(code);case 61:case 33:return this.readToken_eq_excl(code);case 63:return this.readToken_question();case 126:return this.finishOp(types$1.prefix,1);case 35:return this.readToken_numberSign()}this.raise(this.pos,"Unexpected character '"+codePointToString(code)+"'");},pp.finishOp=function(type,size){var str=this.input.slice(this.pos,this.pos+size);return this.pos+=size,this.finishToken(type,str)},pp.readRegexp=function(){for(var escaped,inClass,start=this.pos;;){this.pos>=this.input.length&&this.raise(start,"Unterminated regular expression");var ch=this.input.charAt(this.pos);if(lineBreak.test(ch)&&this.raise(start,"Unterminated regular expression"),escaped)escaped=!1;else {if("["===ch)inClass=!0;else if("]"===ch&&inClass)inClass=!1;else if("/"===ch&&!inClass)break;escaped="\\"===ch;}++this.pos;}var pattern=this.input.slice(start,this.pos);++this.pos;var flagsStart=this.pos,flags=this.readWord1();this.containsEsc&&this.unexpected(flagsStart);var state=this.regexpState||(this.regexpState=new RegExpValidationState(this));state.reset(start,pattern,flags),this.validateRegExpFlags(state),this.validateRegExpPattern(state);var value=null;try{value=new RegExp(pattern,flags);}catch(e){}return this.finishToken(types$1.regexp,{pattern,flags,value})},pp.readInt=function(radix,len,maybeLegacyOctalNumericLiteral){for(var allowSeparators=this.options.ecmaVersion>=12&&void 0===len,isLegacyOctalNumericLiteral=maybeLegacyOctalNumericLiteral&&48===this.input.charCodeAt(this.pos),start=this.pos,total=0,lastCode=0,i=0,e=null==len?1/0:len;i<e;++i,++this.pos){var code=this.input.charCodeAt(this.pos),val=void 0;if(allowSeparators&&95===code)isLegacyOctalNumericLiteral&&this.raiseRecoverable(this.pos,"Numeric separator is not allowed in legacy octal numeric literals"),95===lastCode&&this.raiseRecoverable(this.pos,"Numeric separator must be exactly one underscore"),0===i&&this.raiseRecoverable(this.pos,"Numeric separator is not allowed at the first of digits"),lastCode=code;else {if((val=code>=97?code-97+10:code>=65?code-65+10:code>=48&&code<=57?code-48:1/0)>=radix)break;lastCode=code,total=total*radix+val;}}return allowSeparators&&95===lastCode&&this.raiseRecoverable(this.pos-1,"Numeric separator is not allowed at the last of digits"),this.pos===start||null!=len&&this.pos-start!==len?null:total},pp.readRadixNumber=function(radix){var start=this.pos;this.pos+=2;var val=this.readInt(radix);return null==val&&this.raise(this.start+2,"Expected number in radix "+radix),this.options.ecmaVersion>=11&&110===this.input.charCodeAt(this.pos)?(val=stringToBigInt(this.input.slice(start,this.pos)),++this.pos):isIdentifierStart(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(types$1.num,val)},pp.readNumber=function(startsWithDot){var start=this.pos;startsWithDot||null!==this.readInt(10,void 0,!0)||this.raise(start,"Invalid number");var octal=this.pos-start>=2&&48===this.input.charCodeAt(start);octal&&this.strict&&this.raise(start,"Invalid number");var next=this.input.charCodeAt(this.pos);if(!octal&&!startsWithDot&&this.options.ecmaVersion>=11&&110===next){var val$1=stringToBigInt(this.input.slice(start,this.pos));return ++this.pos,isIdentifierStart(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number"),this.finishToken(types$1.num,val$1)}octal&&/[89]/.test(this.input.slice(start,this.pos))&&(octal=!1),46!==next||octal||(++this.pos,this.readInt(10),next=this.input.charCodeAt(this.pos)),69!==next&&101!==next||octal||(43!==(next=this.input.charCodeAt(++this.pos))&&45!==next||++this.pos,null===this.readInt(10)&&this.raise(start,"Invalid number")),isIdentifierStart(this.fullCharCodeAtPos())&&this.raise(this.pos,"Identifier directly after number");var str,val=(str=this.input.slice(start,this.pos),octal?parseInt(str,8):parseFloat(str.replace(/_/g,"")));return this.finishToken(types$1.num,val)},pp.readCodePoint=function(){var code;if(123===this.input.charCodeAt(this.pos)){this.options.ecmaVersion<6&&this.unexpected();var codePos=++this.pos;code=this.readHexChar(this.input.indexOf("}",this.pos)-this.pos),++this.pos,code>1114111&&this.invalidStringToken(codePos,"Code point out of bounds");}else code=this.readHexChar(4);return code},pp.readString=function(quote){for(var out="",chunkStart=++this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated string constant");var ch=this.input.charCodeAt(this.pos);if(ch===quote)break;92===ch?(out+=this.input.slice(chunkStart,this.pos),out+=this.readEscapedChar(!1),chunkStart=this.pos):8232===ch||8233===ch?(this.options.ecmaVersion<10&&this.raise(this.start,"Unterminated string constant"),++this.pos,this.options.locations&&(this.curLine++,this.lineStart=this.pos)):(isNewLine(ch)&&this.raise(this.start,"Unterminated string constant"),++this.pos);}return out+=this.input.slice(chunkStart,this.pos++),this.finishToken(types$1.string,out)};var INVALID_TEMPLATE_ESCAPE_ERROR={};pp.tryReadTemplateToken=function(){this.inTemplateElement=!0;try{this.readTmplToken();}catch(err){if(err!==INVALID_TEMPLATE_ESCAPE_ERROR)throw err;this.readInvalidTemplateToken();}this.inTemplateElement=!1;},pp.invalidStringToken=function(position,message){if(this.inTemplateElement&&this.options.ecmaVersion>=9)throw INVALID_TEMPLATE_ESCAPE_ERROR;this.raise(position,message);},pp.readTmplToken=function(){for(var out="",chunkStart=this.pos;;){this.pos>=this.input.length&&this.raise(this.start,"Unterminated template");var ch=this.input.charCodeAt(this.pos);if(96===ch||36===ch&&123===this.input.charCodeAt(this.pos+1))return this.pos!==this.start||this.type!==types$1.template&&this.type!==types$1.invalidTemplate?(out+=this.input.slice(chunkStart,this.pos),this.finishToken(types$1.template,out)):36===ch?(this.pos+=2,this.finishToken(types$1.dollarBraceL)):(++this.pos,this.finishToken(types$1.backQuote));if(92===ch)out+=this.input.slice(chunkStart,this.pos),out+=this.readEscapedChar(!0),chunkStart=this.pos;else if(isNewLine(ch)){switch(out+=this.input.slice(chunkStart,this.pos),++this.pos,ch){case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:out+="\n";break;default:out+=String.fromCharCode(ch);}this.options.locations&&(++this.curLine,this.lineStart=this.pos),chunkStart=this.pos;}else ++this.pos;}},pp.readInvalidTemplateToken=function(){for(;this.pos<this.input.length;this.pos++)switch(this.input[this.pos]){case"\\":++this.pos;break;case"$":if("{"!==this.input[this.pos+1])break;case"`":return this.finishToken(types$1.invalidTemplate,this.input.slice(this.start,this.pos))}this.raise(this.start,"Unterminated template");},pp.readEscapedChar=function(inTemplate){var ch=this.input.charCodeAt(++this.pos);switch(++this.pos,ch){case 110:return "\n";case 114:return "\r";case 120:return String.fromCharCode(this.readHexChar(2));case 117:return codePointToString(this.readCodePoint());case 116:return "\t";case 98:return "\b";case 118:return "\v";case 102:return "\f";case 13:10===this.input.charCodeAt(this.pos)&&++this.pos;case 10:return this.options.locations&&(this.lineStart=this.pos,++this.curLine),"";case 56:case 57:if(this.strict&&this.invalidStringToken(this.pos-1,"Invalid escape sequence"),inTemplate){var codePos=this.pos-1;this.invalidStringToken(codePos,"Invalid escape sequence in template string");}default:if(ch>=48&&ch<=55){var octalStr=this.input.substr(this.pos-1,3).match(/^[0-7]+/)[0],octal=parseInt(octalStr,8);return octal>255&&(octalStr=octalStr.slice(0,-1),octal=parseInt(octalStr,8)),this.pos+=octalStr.length-1,ch=this.input.charCodeAt(this.pos),"0"===octalStr&&56!==ch&&57!==ch||!this.strict&&!inTemplate||this.invalidStringToken(this.pos-1-octalStr.length,inTemplate?"Octal literal in template string":"Octal literal in strict mode"),String.fromCharCode(octal)}return isNewLine(ch)?"":String.fromCharCode(ch)}},pp.readHexChar=function(len){var codePos=this.pos,n=this.readInt(16,len);return null===n&&this.invalidStringToken(codePos,"Bad character escape sequence"),n},pp.readWord1=function(){this.containsEsc=!1;for(var word="",first=!0,chunkStart=this.pos,astral=this.options.ecmaVersion>=6;this.pos<this.input.length;){var ch=this.fullCharCodeAtPos();if(isIdentifierChar(ch,astral))this.pos+=ch<=65535?1:2;else {if(92!==ch)break;this.containsEsc=!0,word+=this.input.slice(chunkStart,this.pos);var escStart=this.pos;117!==this.input.charCodeAt(++this.pos)&&this.invalidStringToken(this.pos,"Expecting Unicode escape sequence \\uXXXX"),++this.pos;var esc=this.readCodePoint();(first?isIdentifierStart:isIdentifierChar)(esc,astral)||this.invalidStringToken(escStart,"Invalid Unicode escape"),word+=codePointToString(esc),chunkStart=this.pos;}first=!1;}return word+this.input.slice(chunkStart,this.pos)},pp.readWord=function(){var word=this.readWord1(),type=types$1.name;return this.keywords.test(word)&&(type=keywords[word]),this.finishToken(type,word)};Parser.acorn={Parser,version:"8.8.2",defaultOptions,Position,SourceLocation,getLineInfo,Node,TokenType,tokTypes:types$1,keywordTypes:keywords,TokContext,tokContexts:types,isIdentifierChar,isIdentifierStart,Token,isNewLine,lineBreak,lineBreakG,nonASCIIwhitespace};const external_node_module_namespaceObject=require$$3,external_node_fs_namespaceObject=require$$3,external_node_url_namespaceObject=require$$3;const TRAILING_SLASH_RE=/\/$|\/\?/;function hasTrailingSlash(input="",queryParameters=!1){return queryParameters?TRAILING_SLASH_RE.test(input):input.endsWith("/")}function withTrailingSlash(input="",queryParameters=!1){if(!queryParameters)return input.endsWith("/")?input:input+"/";if(hasTrailingSlash(input,!0))return input||"/";const[s0,...s]=input.split("?");return s0+"/"+(s.length>0?`?${s.join("?")}`:"")}function hasLeadingSlash(input=""){return input.startsWith("/")}function withoutLeadingSlash(input=""){return (hasLeadingSlash(input)?input.slice(1):input)||"/"}function isNonEmptyURL(url){return url&&"/"!==url}function joinURL(base,...input){let url=base||"";for(const index of input.filter((url2=>isNonEmptyURL(url2))))url=url?withTrailingSlash(url)+withoutLeadingSlash(index):index;return url}const external_node_assert_namespaceObject=require$$3,external_node_process_namespaceObject=require$$3,external_node_path_namespaceObject=require$$3,external_node_v8_namespaceObject=require$$3,external_node_util_namespaceObject=require$$3,BUILTIN_MODULES=new Set(external_node_module_namespaceObject.builtinModules);function normalizeSlash(string_){return string_.replace(/\\/g,"/")}const isWindows="win32"===external_node_process_namespaceObject.platform,own$1={}.hasOwnProperty,codes={};const messages=new Map,nodeInternalPrefix="__node_internal_";let userStackTraceLimit;function createError(sym,value,def){return messages.set(sym,value),function(Base,key){return NodeError;function NodeError(...args){const limit=Error.stackTraceLimit;isErrorStackTraceLimitWritable()&&(Error.stackTraceLimit=0);const error=new Base;isErrorStackTraceLimitWritable()&&(Error.stackTraceLimit=limit);const message=function(key,args,self){const message=messages.get(key);if(external_node_assert_namespaceObject(void 0!==message,"expected `message` to be found"),"function"==typeof message)return external_node_assert_namespaceObject(message.length<=args.length,`Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${message.length}).`),Reflect.apply(message,self,args);const regex=/%[dfijoOs]/g;let expectedLength=0;for(;null!==regex.exec(message);)expectedLength++;return external_node_assert_namespaceObject(expectedLength===args.length,`Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`),0===args.length?message:(args.unshift(message),Reflect.apply(external_node_util_namespaceObject.format,null,args))}(key,args,error);return Object.defineProperties(error,{message:{value:message,enumerable:!1,writable:!0,configurable:!0},toString:{value(){return `${this.name} [${key}]: ${this.message}`},enumerable:!1,writable:!0,configurable:!0}}),captureLargerStackTrace(error),error.code=key,error}}(def,sym)}function isErrorStackTraceLimitWritable(){try{if(external_node_v8_namespaceObject.startupSnapshot.isBuildingSnapshot())return !1}catch{}const desc=Object.getOwnPropertyDescriptor(Error,"stackTraceLimit");return void 0===desc?Object.isExtensible(Error):own$1.call(desc,"writable")&&void 0!==desc.writable?desc.writable:void 0!==desc.set}codes.ERR_INVALID_MODULE_SPECIFIER=createError("ERR_INVALID_MODULE_SPECIFIER",((request,reason,base=undefined)=>`Invalid module "${request}" ${reason}${base?` imported from ${base}`:""}`),TypeError),codes.ERR_INVALID_PACKAGE_CONFIG=createError("ERR_INVALID_PACKAGE_CONFIG",((path,base,message)=>`Invalid package config ${path}${base?` while importing ${base}`:""}${message?`. ${message}`:""}`),Error),codes.ERR_INVALID_PACKAGE_TARGET=createError("ERR_INVALID_PACKAGE_TARGET",((pkgPath,key,target,isImport=!1,base=undefined)=>{const relError="string"==typeof target&&!isImport&&target.length>0&&!target.startsWith("./");return "."===key?(external_node_assert_namespaceObject(!1===isImport),`Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${pkgPath}package.json${base?` imported from ${base}`:""}${relError?'; targets must start with "./"':""}`):`Invalid "${isImport?"imports":"exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${pkgPath}package.json${base?` imported from ${base}`:""}${relError?'; targets must start with "./"':""}`}),Error),codes.ERR_MODULE_NOT_FOUND=createError("ERR_MODULE_NOT_FOUND",((path,base,type="package")=>`Cannot find ${type} '${path}' imported from ${base}`),Error),codes.ERR_NETWORK_IMPORT_DISALLOWED=createError("ERR_NETWORK_IMPORT_DISALLOWED","import of '%s' by %s is not supported: %s",Error),codes.ERR_PACKAGE_IMPORT_NOT_DEFINED=createError("ERR_PACKAGE_IMPORT_NOT_DEFINED",((specifier,packagePath,base)=>`Package import specifier "${specifier}" is not defined${packagePath?` in package ${packagePath}package.json`:""} imported from ${base}`),TypeError),codes.ERR_PACKAGE_PATH_NOT_EXPORTED=createError("ERR_PACKAGE_PATH_NOT_EXPORTED",((pkgPath,subpath,base=undefined)=>"."===subpath?`No "exports" main defined in ${pkgPath}package.json${base?` imported from ${base}`:""}`:`Package subpath '${subpath}' is not defined by "exports" in ${pkgPath}package.json${base?` imported from ${base}`:""}`),Error),codes.ERR_UNSUPPORTED_DIR_IMPORT=createError("ERR_UNSUPPORTED_DIR_IMPORT","Directory import '%s' is not supported resolving ES modules imported from %s",Error),codes.ERR_UNKNOWN_FILE_EXTENSION=createError("ERR_UNKNOWN_FILE_EXTENSION",((ext,path)=>`Unknown file extension "${ext}" for ${path}`),TypeError),codes.ERR_INVALID_ARG_VALUE=createError("ERR_INVALID_ARG_VALUE",((name,value,reason="is invalid")=>{let inspected=(0, external_node_util_namespaceObject.inspect)(value);inspected.length>128&&(inspected=`${inspected.slice(0,128)}...`);return `The ${name.includes(".")?"property":"argument"} '${name}' ${reason}. Received ${inspected}`}),TypeError),codes.ERR_UNSUPPORTED_ESM_URL_SCHEME=createError("ERR_UNSUPPORTED_ESM_URL_SCHEME",((url,supported)=>{let message=`Only URLs with a scheme in: ${function(array,type="and"){return array.length<3?array.join(` ${type} `):`${array.slice(0,-1).join(", ")}, ${type} ${array[array.length-1]}`}(supported)} are supported by the default ESM loader`;return isWindows&&2===url.protocol.length&&(message+=". On Windows, absolute paths must be valid file:// URLs"),message+=`. Received protocol '${url.protocol}'`,message}),Error);const captureLargerStackTrace=function(fn){const hidden=nodeInternalPrefix+fn.name;return Object.defineProperty(fn,"name",{value:hidden}),fn}((function(error){const stackTraceLimitIsWritable=isErrorStackTraceLimitWritable();return stackTraceLimitIsWritable&&(userStackTraceLimit=Error.stackTraceLimit,Error.stackTraceLimit=Number.POSITIVE_INFINITY),Error.captureStackTrace(error),stackTraceLimitIsWritable&&(Error.stackTraceLimit=userStackTraceLimit),error}));const{ERR_UNKNOWN_FILE_EXTENSION}=codes,dist_hasOwnProperty={}.hasOwnProperty,extensionFormatMap={__proto__:null,".cjs":"commonjs",".js":"module",".json":"json",".mjs":"module"};const protocolHandlers={__proto__:null,"data:":function(parsed){const{1:mime}=/^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname)||[null,null,null];return function(mime){return mime&&/\s*(text|application)\/javascript\s*(;\s*charset=utf-?8\s*)?/i.test(mime)?"module":"application/json"===mime?"json":null}(mime)},"file:":function(url,_context,ignoreErrors){const filepath=(0, external_node_url_namespaceObject.fileURLToPath)(url),ext=external_node_path_namespaceObject.extname(filepath);if(".js"===ext)return "module"===function(url){const packageConfig=getPackageScopeConfig(url);return packageConfig.type}(url)?"module":"commonjs";const format=extensionFormatMap[ext];if(format)return format;if(ignoreErrors)return;throw new ERR_UNKNOWN_FILE_EXTENSION(ext,filepath)},"http:":getHttpProtocolModuleFormat,"https:":getHttpProtocolModuleFormat,"node:":()=>"builtin"};function getHttpProtocolModuleFormat(){}const packageJsonReader={read:function(jsonPath){try{return {string:external_node_fs_namespaceObject.readFileSync(external_node_path_namespaceObject.toNamespacedPath(external_node_path_namespaceObject.join(external_node_path_namespaceObject.dirname(jsonPath),"package.json")),"utf8")}}catch(error){const exception=error;if("ENOENT"===exception.code)return {string:void 0};throw exception}}};const{ERR_INVALID_PACKAGE_CONFIG:ERR_INVALID_PACKAGE_CONFIG$1}=codes,packageJsonCache=new Map;function getPackageConfig(path,specifier,base){const existing=packageJsonCache.get(path);if(void 0!==existing)return existing;const source=packageJsonReader.read(path).string;if(void 0===source){const packageConfig={pjsonPath:path,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return packageJsonCache.set(path,packageConfig),packageConfig}let packageJson;try{packageJson=JSON.parse(source);}catch(error){const exception=error;throw new ERR_INVALID_PACKAGE_CONFIG$1(path,(base?`"${specifier}" from `:"")+(0, external_node_url_namespaceObject.fileURLToPath)(base||specifier),exception.message)}const{exports,imports,main,name,type}=packageJson,packageConfig={pjsonPath:path,exists:!0,main:"string"==typeof main?main:void 0,name:"string"==typeof name?name:void 0,type:"module"===type||"commonjs"===type?type:"none",exports,imports:imports&&"object"==typeof imports?imports:void 0};return packageJsonCache.set(path,packageConfig),packageConfig}function getPackageScopeConfig(resolved){let packageJsonUrl=new external_node_url_namespaceObject.URL("package.json",resolved);for(;;){if(packageJsonUrl.pathname.endsWith("node_modules/package.json"))break;const packageConfig=getPackageConfig((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl),resolved);if(packageConfig.exists)return packageConfig;const lastPackageJsonUrl=packageJsonUrl;if(packageJsonUrl=new external_node_url_namespaceObject.URL("../package.json",packageJsonUrl),packageJsonUrl.pathname===lastPackageJsonUrl.pathname)break}const packageJsonPath=(0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl),packageConfig={pjsonPath:packageJsonPath,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return packageJsonCache.set(packageJsonPath,packageConfig),packageConfig}const RegExpPrototypeSymbolReplace=RegExp.prototype[Symbol.replace],{ERR_NETWORK_IMPORT_DISALLOWED,ERR_INVALID_MODULE_SPECIFIER,ERR_INVALID_PACKAGE_CONFIG,ERR_INVALID_PACKAGE_TARGET,ERR_MODULE_NOT_FOUND,ERR_PACKAGE_IMPORT_NOT_DEFINED,ERR_PACKAGE_PATH_NOT_EXPORTED,ERR_UNSUPPORTED_DIR_IMPORT,ERR_UNSUPPORTED_ESM_URL_SCHEME}=codes,own={}.hasOwnProperty,invalidSegmentRegEx=/(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))?(\\|\/|$)/i,deprecatedInvalidSegmentRegEx=/(^|\\|\/)((\.|%2e)(\.|%2e)?|(n|%6e|%4e)(o|%6f|%4f)(d|%64|%44)(e|%65|%45)(_|%5f)(m|%6d|%4d)(o|%6f|%4f)(d|%64|%44)(u|%75|%55)(l|%6c|%4c)(e|%65|%45)(s|%73|%53))(\\|\/|$)/i,invalidPackageNameRegEx=/^\.|%|\\/,patternRegEx=/\*/g,encodedSepRegEx=/%2f|%5c/i,emittedPackageWarnings=new Set,doubleSlashRegEx=/[/\\]{2}/;function emitInvalidSegmentDeprecation(target,request,match,packageJsonUrl,internal,base,isTarget){const pjsonPath=(0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl),double=null!==doubleSlashRegEx.exec(isTarget?target:request);external_node_process_namespaceObject.emitWarning(`Use of deprecated ${double?"double slash":"leading or trailing slash matching"} resolving "${target}" for module request "${request}" ${request===match?"":`matched to "${match}" `}in the "${internal?"imports":"exports"}" field module resolution of the package at ${pjsonPath}${base?` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}`:""}.`,"DeprecationWarning","DEP0166");}function emitLegacyIndexDeprecation(url,packageJsonUrl,base,main){const format=function(url,context){return dist_hasOwnProperty.call(protocolHandlers,url.protocol)&&protocolHandlers[url.protocol](url,context,!0)||null}(url,{parentURL:base.href});if("module"!==format)return;const path=(0, external_node_url_namespaceObject.fileURLToPath)(url.href),pkgPath=(0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".",packageJsonUrl)),basePath=(0, external_node_url_namespaceObject.fileURLToPath)(base);main?external_node_process_namespaceObject.emitWarning(`Package ${pkgPath} has a "main" field set to ${JSON.stringify(main)}, excluding the full filename and extension to the resolved file at "${path.slice(pkgPath.length)}", imported from ${basePath}.\n Automatic extension resolution of the "main" field isdeprecated for ES modules.`,"DeprecationWarning","DEP0151"):external_node_process_namespaceObject.emitWarning(`No "main" or "exports" field defined in the package.json for ${pkgPath} resolving the main entry point "${path.slice(pkgPath.length)}", imported from ${basePath}.\nDefault "index" lookups for the main are deprecated for ES modules.`,"DeprecationWarning","DEP0151");}function tryStatSync(path){try{return (0,external_node_fs_namespaceObject.statSync)(path)}catch{return new external_node_fs_namespaceObject.Stats}}function fileExists(url){const stats=(0, external_node_fs_namespaceObject.statSync)(url,{throwIfNoEntry:!1}),isFile=stats?stats.isFile():void 0;return null!=isFile&&isFile}function legacyMainResolve(packageJsonUrl,packageConfig,base){let guess;if(void 0!==packageConfig.main){if(guess=new external_node_url_namespaceObject.URL(packageConfig.main,packageJsonUrl),fileExists(guess))return guess;const tries=[`./${packageConfig.main}.js`,`./${packageConfig.main}.json`,`./${packageConfig.main}.node`,`./${packageConfig.main}/index.js`,`./${packageConfig.main}/index.json`,`./${packageConfig.main}/index.node`];let i=-1;for(;++i<tries.length&&(guess=new external_node_url_namespaceObject.URL(tries[i],packageJsonUrl),!fileExists(guess));)guess=void 0;if(guess)return emitLegacyIndexDeprecation(guess,packageJsonUrl,base,packageConfig.main),guess}const tries=["./index.js","./index.json","./index.node"];let i=-1;for(;++i<tries.length&&(guess=new external_node_url_namespaceObject.URL(tries[i],packageJsonUrl),!fileExists(guess));)guess=void 0;if(guess)return emitLegacyIndexDeprecation(guess,packageJsonUrl,base,packageConfig.main),guess;throw new ERR_MODULE_NOT_FOUND((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".",packageJsonUrl)),(0, external_node_url_namespaceObject.fileURLToPath)(base))}function exportsNotFound(subpath,packageJsonUrl,base){return new ERR_PACKAGE_PATH_NOT_EXPORTED((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".",packageJsonUrl)),subpath,base&&(0, external_node_url_namespaceObject.fileURLToPath)(base))}function invalidPackageTarget(subpath,target,packageJsonUrl,internal,base){return target="object"==typeof target&&null!==target?JSON.stringify(target,null,""):`${target}`,new ERR_INVALID_PACKAGE_TARGET((0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".",packageJsonUrl)),subpath,target,internal,base&&(0, external_node_url_namespaceObject.fileURLToPath)(base))}function resolvePackageTargetString(target,subpath,match,packageJsonUrl,base,pattern,internal,isPathMap,conditions){if(""!==subpath&&!pattern&&"/"!==target[target.length-1])throw invalidPackageTarget(match,target,packageJsonUrl,internal,base);if(!target.startsWith("./")){if(internal&&!target.startsWith("../")&&!target.startsWith("/")){let isURL=!1;try{new external_node_url_namespaceObject.URL(target),isURL=!0;}catch{}if(!isURL){return packageResolve(pattern?RegExpPrototypeSymbolReplace.call(patternRegEx,target,(()=>subpath)):target+subpath,packageJsonUrl,conditions)}}throw invalidPackageTarget(match,target,packageJsonUrl,internal,base)}if(null!==invalidSegmentRegEx.exec(target.slice(2))){if(null!==deprecatedInvalidSegmentRegEx.exec(target.slice(2)))throw invalidPackageTarget(match,target,packageJsonUrl,internal,base);if(!isPathMap){const request=pattern?match.replace("*",(()=>subpath)):match+subpath;emitInvalidSegmentDeprecation(pattern?RegExpPrototypeSymbolReplace.call(patternRegEx,target,(()=>subpath)):target,request,match,packageJsonUrl,internal,base,!0);}}const resolved=new external_node_url_namespaceObject.URL(target,packageJsonUrl),resolvedPath=resolved.pathname,packagePath=new external_node_url_namespaceObject.URL(".",packageJsonUrl).pathname;if(!resolvedPath.startsWith(packagePath))throw invalidPackageTarget(match,target,packageJsonUrl,internal,base);if(""===subpath)return resolved;if(null!==invalidSegmentRegEx.exec(subpath)){const request=pattern?match.replace("*",(()=>subpath)):match+subpath;if(null===deprecatedInvalidSegmentRegEx.exec(subpath)){if(!isPathMap){emitInvalidSegmentDeprecation(pattern?RegExpPrototypeSymbolReplace.call(patternRegEx,target,(()=>subpath)):target,request,match,packageJsonUrl,internal,base,!1);}}else !function(request,match,packageJsonUrl,internal,base){const reason=`request is not a valid match in pattern "${match}" for the "${internal?"imports":"exports"}" resolution of ${(0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl)}`;throw new ERR_INVALID_MODULE_SPECIFIER(request,reason,base&&(0, external_node_url_namespaceObject.fileURLToPath)(base))}(request,match,packageJsonUrl,internal,base);}return pattern?new external_node_url_namespaceObject.URL(RegExpPrototypeSymbolReplace.call(patternRegEx,resolved.href,(()=>subpath))):new external_node_url_namespaceObject.URL(subpath,resolved)}function isArrayIndex(key){const keyNumber=Number(key);return `${keyNumber}`===key&&(keyNumber>=0&&keyNumber<4294967295)}function resolvePackageTarget(packageJsonUrl,target,subpath,packageSubpath,base,pattern,internal,isPathMap,conditions){if("string"==typeof target)return resolvePackageTargetString(target,subpath,packageSubpath,packageJsonUrl,base,pattern,internal,isPathMap,conditions);if(Array.isArray(target)){const targetList=target;if(0===targetList.length)return null;let lastException,i=-1;for(;++i<targetList.length;){const targetItem=targetList[i];let resolveResult;try{resolveResult=resolvePackageTarget(packageJsonUrl,targetItem,subpath,packageSubpath,base,pattern,internal,isPathMap,conditions);}catch(error){if(lastException=error,"ERR_INVALID_PACKAGE_TARGET"===error.code)continue;throw error}if(void 0!==resolveResult){if(null!==resolveResult)return resolveResult;lastException=null;}}if(null==lastException)return null;throw lastException}if("object"==typeof target&&null!==target){const keys=Object.getOwnPropertyNames(target);let i=-1;for(;++i<keys.length;){if(isArrayIndex(keys[i]))throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl),base,'"exports" cannot contain numeric property keys.')}for(i=-1;++i<keys.length;){const key=keys[i];if("default"===key||conditions&&conditions.has(key)){const resolveResult=resolvePackageTarget(packageJsonUrl,target[key],subpath,packageSubpath,base,pattern,internal,isPathMap,conditions);if(void 0===resolveResult)continue;return resolveResult}}return null}if(null===target)return null;throw invalidPackageTarget(packageSubpath,target,packageJsonUrl,internal,base)}function emitTrailingSlashPatternDeprecation(match,pjsonUrl,base){const pjsonPath=(0, external_node_url_namespaceObject.fileURLToPath)(pjsonUrl);emittedPackageWarnings.has(pjsonPath+"|"+match)||(emittedPackageWarnings.add(pjsonPath+"|"+match),external_node_process_namespaceObject.emitWarning(`Use of deprecated trailing slash pattern mapping "${match}" in the "exports" field module resolution of the package at ${pjsonPath}${base?` imported from ${(0, external_node_url_namespaceObject.fileURLToPath)(base)}`:""}. Mapping specifiers ending in "/" is no longer supported.`,"DeprecationWarning","DEP0155"));}function packageExportsResolve(packageJsonUrl,packageSubpath,packageConfig,base,conditions){let exports=packageConfig.exports;if(function(exports,packageJsonUrl,base){if("string"==typeof exports||Array.isArray(exports))return !0;if("object"!=typeof exports||null===exports)return !1;const keys=Object.getOwnPropertyNames(exports);let isConditionalSugar=!1,i=0,j=-1;for(;++j<keys.length;){const key=keys[j],curIsConditionalSugar=""===key||"."!==key[0];if(0==i++)isConditionalSugar=curIsConditionalSugar;else if(isConditionalSugar!==curIsConditionalSugar)throw new ERR_INVALID_PACKAGE_CONFIG((0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl),base,"\"exports\" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.")}return isConditionalSugar}(exports,packageJsonUrl,base)&&(exports={".":exports}),own.call(exports,packageSubpath)&&!packageSubpath.includes("*")&&!packageSubpath.endsWith("/")){const resolveResult=resolvePackageTarget(packageJsonUrl,exports[packageSubpath],"",packageSubpath,base,!1,!1,!1,conditions);if(null==resolveResult)throw exportsNotFound(packageSubpath,packageJsonUrl,base);return resolveResult}let bestMatch="",bestMatchSubpath="";const keys=Object.getOwnPropertyNames(exports);let i=-1;for(;++i<keys.length;){const key=keys[i],patternIndex=key.indexOf("*");if(-1!==patternIndex&&packageSubpath.startsWith(key.slice(0,patternIndex))){packageSubpath.endsWith("/")&&emitTrailingSlashPatternDeprecation(packageSubpath,packageJsonUrl,base);const patternTrailer=key.slice(patternIndex+1);packageSubpath.length>=key.length&&packageSubpath.endsWith(patternTrailer)&&1===patternKeyCompare(bestMatch,key)&&key.lastIndexOf("*")===patternIndex&&(bestMatch=key,bestMatchSubpath=packageSubpath.slice(patternIndex,packageSubpath.length-patternTrailer.length));}}if(bestMatch){const resolveResult=resolvePackageTarget(packageJsonUrl,exports[bestMatch],bestMatchSubpath,bestMatch,base,!0,!1,packageSubpath.endsWith("/"),conditions);if(null==resolveResult)throw exportsNotFound(packageSubpath,packageJsonUrl,base);return resolveResult}throw exportsNotFound(packageSubpath,packageJsonUrl,base)}function patternKeyCompare(a,b){const aPatternIndex=a.indexOf("*"),bPatternIndex=b.indexOf("*"),baseLengthA=-1===aPatternIndex?a.length:aPatternIndex+1,baseLengthB=-1===bPatternIndex?b.length:bPatternIndex+1;return baseLengthA>baseLengthB?-1:baseLengthB>baseLengthA||-1===aPatternIndex?1:-1===bPatternIndex||a.length>b.length?-1:b.length>a.length?1:0}function packageImportsResolve(name,base,conditions){if("#"===name||name.startsWith("#/")||name.endsWith("/")){throw new ERR_INVALID_MODULE_SPECIFIER(name,"is not a valid internal imports specifier name",(0, external_node_url_namespaceObject.fileURLToPath)(base))}let packageJsonUrl;const packageConfig=getPackageScopeConfig(base);if(packageConfig.exists){packageJsonUrl=(0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);const imports=packageConfig.imports;if(imports)if(own.call(imports,name)&&!name.includes("*")){const resolveResult=resolvePackageTarget(packageJsonUrl,imports[name],"",name,base,!1,!0,!1,conditions);if(null!=resolveResult)return resolveResult}else {let bestMatch="",bestMatchSubpath="";const keys=Object.getOwnPropertyNames(imports);let i=-1;for(;++i<keys.length;){const key=keys[i],patternIndex=key.indexOf("*");if(-1!==patternIndex&&name.startsWith(key.slice(0,-1))){const patternTrailer=key.slice(patternIndex+1);name.length>=key.length&&name.endsWith(patternTrailer)&&1===patternKeyCompare(bestMatch,key)&&key.lastIndexOf("*")===patternIndex&&(bestMatch=key,bestMatchSubpath=name.slice(patternIndex,name.length-patternTrailer.length));}}if(bestMatch){const resolveResult=resolvePackageTarget(packageJsonUrl,imports[bestMatch],bestMatchSubpath,bestMatch,base,!0,!0,!1,conditions);if(null!=resolveResult)return resolveResult}}}throw function(specifier,packageJsonUrl,base){return new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier,packageJsonUrl&&(0, external_node_url_namespaceObject.fileURLToPath)(new external_node_url_namespaceObject.URL(".",packageJsonUrl)),(0, external_node_url_namespaceObject.fileURLToPath)(base))}(name,packageJsonUrl,base)}function packageResolve(specifier,base,conditions){if(external_node_module_namespaceObject.builtinModules.includes(specifier))return new external_node_url_namespaceObject.URL("node:"+specifier);const{packageName,packageSubpath,isScoped}=function(specifier,base){let separatorIndex=specifier.indexOf("/"),validPackageName=!0,isScoped=!1;"@"===specifier[0]&&(isScoped=!0,-1===separatorIndex||0===specifier.length?validPackageName=!1:separatorIndex=specifier.indexOf("/",separatorIndex+1));const packageName=-1===separatorIndex?specifier:specifier.slice(0,separatorIndex);if(null!==invalidPackageNameRegEx.exec(packageName)&&(validPackageName=!1),!validPackageName)throw new ERR_INVALID_MODULE_SPECIFIER(specifier,"is not a valid package name",(0, external_node_url_namespaceObject.fileURLToPath)(base));return {packageName,packageSubpath:"."+(-1===separatorIndex?"":specifier.slice(separatorIndex)),isScoped}}(specifier,base),packageConfig=getPackageScopeConfig(base);if(packageConfig.exists){const packageJsonUrl=(0, external_node_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);if(packageConfig.name===packageName&&void 0!==packageConfig.exports&&null!==packageConfig.exports)return packageExportsResolve(packageJsonUrl,packageSubpath,packageConfig,base,conditions)}let lastPath,packageJsonUrl=new external_node_url_namespaceObject.URL("./node_modules/"+packageName+"/package.json",base),packageJsonPath=(0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);do{if(!tryStatSync(packageJsonPath.slice(0,-13)).isDirectory()){lastPath=packageJsonPath,packageJsonUrl=new external_node_url_namespaceObject.URL((isScoped?"../../../../node_modules/":"../../../node_modules/")+packageName+"/package.json",packageJsonUrl),packageJsonPath=(0, external_node_url_namespaceObject.fileURLToPath)(packageJsonUrl);continue}const packageConfig=getPackageConfig(packageJsonPath,specifier,base);return void 0!==packageConfig.exports&&null!==packageConfig.exports?packageExportsResolve(packageJsonUrl,packageSubpath,packageConfig,base,conditions):"."===packageSubpath?legacyMainResolve(packageJsonUrl,packageConfig,base):new external_node_url_namespaceObject.URL(packageSubpath,packageJsonUrl)}while(packageJsonPath.length!==lastPath.length);throw new ERR_MODULE_NOT_FOUND(packageName,(0, external_node_url_namespaceObject.fileURLToPath)(base))}function moduleResolve(specifier,base,conditions,preserveSymlinks){const isRemote="http:"===base.protocol||"https:"===base.protocol;let resolved;if(function(specifier){return ""!==specifier&&("/"===specifier[0]||function(specifier){if("."===specifier[0]){if(1===specifier.length||"/"===specifier[1])return !0;if("."===specifier[1]&&(2===specifier.length||"/"===specifier[2]))return !0}return !1}(specifier))}(specifier))resolved=new external_node_url_namespaceObject.URL(specifier,base);else if(isRemote||"#"!==specifier[0])try{resolved=new external_node_url_namespaceObject.URL(specifier);}catch{isRemote||(resolved=packageResolve(specifier,base,conditions));}else resolved=packageImportsResolve(specifier,base,conditions);return external_node_assert_namespaceObject(void 0!==resolved,"expected to be defined"),"file:"!==resolved.protocol?resolved:function(resolved,base,preserveSymlinks){if(null!==encodedSepRegEx.exec(resolved.pathname))throw new ERR_INVALID_MODULE_SPECIFIER(resolved.pathname,'must not include encoded "/" or "\\" characters',(0, external_node_url_namespaceObject.fileURLToPath)(base));const filePath=(0, external_node_url_namespaceObject.fileURLToPath)(resolved),stats=tryStatSync(filePath.endsWith("/")?filePath.slice(-1):filePath);if(stats.isDirectory()){const error=new ERR_UNSUPPORTED_DIR_IMPORT(filePath,(0, external_node_url_namespaceObject.fileURLToPath)(base));throw error.url=String(resolved),error}if(!stats.isFile())throw new ERR_MODULE_NOT_FOUND(filePath||resolved.pathname,base&&(0, external_node_url_namespaceObject.fileURLToPath)(base),"module");if(!preserveSymlinks){const real=(0, external_node_fs_namespaceObject.realpathSync)(filePath),{search,hash}=resolved;(resolved=(0, external_node_url_namespaceObject.pathToFileURL)(real+(filePath.endsWith(external_node_path_namespaceObject.sep)?"/":""))).search=search,resolved.hash=hash;}return resolved}(resolved,base,preserveSymlinks)}function fileURLToPath(id){return "string"!=typeof id||id.startsWith("file://")?normalizeSlash((0, external_node_url_namespaceObject.fileURLToPath)(id)):normalizeSlash(id)}const DEFAULT_CONDITIONS_SET=new Set(["node","import"]),DEFAULT_URL=(0, external_node_url_namespaceObject.pathToFileURL)(process.cwd()),DEFAULT_EXTENSIONS=[".mjs",".cjs",".js",".json"],NOT_FOUND_ERRORS=new Set(["ERR_MODULE_NOT_FOUND","ERR_UNSUPPORTED_DIR_IMPORT","MODULE_NOT_FOUND","ERR_PACKAGE_PATH_NOT_EXPORTED"]);function _tryModuleResolve(id,url,conditions){try{return moduleResolve(id,url,conditions)}catch(error){if(!NOT_FOUND_ERRORS.has(error.code))throw error}}function _resolve(id,options={}){if(/(node|data|http|https):/.test(id))return id;if(BUILTIN_MODULES.has(id))return "node:"+id;if(isAbsolute(id)&&(0, external_node_fs_namespaceObject.existsSync)(id)){const realPath2=(0, external_node_fs_namespaceObject.realpathSync)(fileURLToPath(id));return (0, external_node_url_namespaceObject.pathToFileURL)(realPath2).toString()}const conditionsSet=options.conditions?new Set(options.conditions):DEFAULT_CONDITIONS_SET,_urls=(Array.isArray(options.url)?options.url:[options.url]).filter(Boolean).map((u=>new URL(function(id){return "string"!=typeof id&&(id=id.toString()),/(node|data|http|https|file):/.test(id)?id:BUILTIN_MODULES.has(id)?"node:"+id:"file://"+encodeURI(normalizeSlash(id))}(u.toString()))));0===_urls.length&&_urls.push(DEFAULT_URL);const urls=[..._urls];for(const url of _urls)"file:"===url.protocol&&urls.push(new URL("./",url),new URL(joinURL(url.pathname,"_index.js"),url),new URL("node_modules",url));let resolved;for(const url of urls){if(resolved=_tryModuleResolve(id,url,conditionsSet),resolved)break;for(const prefix of ["","/index"]){for(const extension of options.extensions||DEFAULT_EXTENSIONS)if(resolved=_tryModuleResolve(id+prefix+extension,url,conditionsSet),resolved)break;if(resolved)break}if(resolved)break}if(!resolved){const error=new Error(`Cannot find module ${id} imported from ${urls.join(", ")}`);throw error.code="ERR_MODULE_NOT_FOUND",error}const realPath=(0, external_node_fs_namespaceObject.realpathSync)(fileURLToPath(resolved));return (0, external_node_url_namespaceObject.pathToFileURL)(realPath).toString()}function resolveSync(id,options){return _resolve(id,options)}function resolvePathSync(id,options){return fileURLToPath(resolveSync(id,options))}const ESM_RE=/([\s;]|^)(import[\s\w*,{}]*from|import\s*["'*{]|export\b\s*(?:[*{]|default|class|type|function|const|var|let|async function)|import\.meta\b)/m;function hasESMSyntax(code){return ESM_RE.test(code)}var external_crypto_=__webpack_require__("crypto");function md5(content,len=8){return (0, external_crypto_.createHash)("md5").update(content).digest("hex").slice(0,len)}const _EnvDebug=destr(({}).JITI_DEBUG),_EnvCache=destr(({}).JITI_CACHE),_EnvESMResolve=destr(({}).JITI_ESM_RESOLVE),_EnvRequireCache=destr(({}).JITI_REQUIRE_CACHE),_EnvSourceMaps=destr(({}).JITI_SOURCE_MAPS),_EnvAlias=destr(({}).JITI_ALIAS),_EnvTransform=destr(({}).JITI_TRANSFORM_MODULES),_EnvNative=destr(({}).JITI_NATIVE_MODULES),jiti_isWindows="win32"===(0, external_os_namespaceObject.platform)(),defaults={debug:_EnvDebug,cache:void 0===_EnvCache||!!_EnvCache,requireCache:void 0===_EnvRequireCache||!!_EnvRequireCache,sourceMaps:void 0!==_EnvSourceMaps&&!!_EnvSourceMaps,interopDefault:!1,esmResolve:_EnvESMResolve||!1,cacheVersion:"7",legacy:(0, semver.lt)(process.version||"0.0.0","14.0.0"),extensions:[".js",".mjs",".cjs",".ts",".mts",".cts",".json"],alias:_EnvAlias,nativeModules:_EnvNative||[],transformModules:_EnvTransform||[]},JS_EXT_RE=/\.(c|m)?j(sx?)$/,TS_EXT_RE=/\.(c|m)?t(sx?)$/;function createJITI(_filename,opts={},parentModule,requiredModules){(opts=Object.assign(Object.assign({},defaults),opts)).legacy&&(opts.cacheVersion+="-legacy"),opts.transformOptions&&(opts.cacheVersion+="-"+object_hash_default()(opts.transformOptions));const alias=opts.alias&&Object.keys(opts.alias).length>0?normalizeAliases(opts.alias||{}):null,nativeModules=["typescript","jiti",...opts.nativeModules||[]],transformModules=[...opts.transformModules||[]],isNativeRe=new RegExp(`node_modules/(${nativeModules.map((m=>escapeStringRegexp(m))).join("|")})/`),isTransformRe=new RegExp(`node_modules/(${transformModules.map((m=>escapeStringRegexp(m))).join("|")})/`);function debug(...args){opts.debug&&console.log("[jiti]",...args);}if(_filename||(_filename=process.cwd()),function(filename){try{return (0,external_fs_.lstatSync)(filename).isDirectory()}catch(_a){return !1}}(_filename)&&(_filename=join(_filename,"index.js")),!0===opts.cache&&(opts.cache=function(){let _tmpDir=(0, external_os_namespaceObject.tmpdir)();if(({}).TMPDIR&&_tmpDir===process.cwd()&&!({}).JITI_RESPECT_TMPDIR_ENV){_tmpDir=(0, external_os_namespaceObject.tmpdir)();}return join(_tmpDir,"node-jiti")}()),opts.cache)try{if((0,external_fs_.mkdirSync)(opts.cache,{recursive:!0}),!function(filename){try{return (0,external_fs_.accessSync)(filename,external_fs_.constants.W_OK),!0}catch(_a){return !1}}(opts.cache))throw new Error("directory is not writable")}catch(error){debug("Error creating cache directory at ",opts.cache,error),opts.cache=!1;}const nativeRequire=create_require_default()(jiti_isWindows?_filename.replace(/\//g,"\\"):_filename),tryResolve=(id,options)=>{try{return nativeRequire.resolve(id,options)}catch(_a){}},_url=(0, external_url_namespaceObject.pathToFileURL)(_filename),_additionalExts=[...opts.extensions].filter((ext=>".js"!==ext)),_resolve=(id,options)=>{let resolved,err;if(alias&&(id=function(path,aliases){const _path=normalizeWindowsPath(path);aliases=normalizeAliases(aliases);for(const alias in aliases)if(_path.startsWith(alias)&&pathSeparators.has(_path[alias.length]))return join(aliases[alias],_path.slice(alias.length));return _path}(id,alias)),opts.esmResolve){const conditionSets=[["node","require"],["node","import"]];for(const conditions of conditionSets){try{resolved=resolvePathSync(id,{url:_url,conditions});}catch(error){err=error;}if(resolved)return resolved}}try{return nativeRequire.resolve(id,options)}catch(error){err=error;}for(const ext of _additionalExts){if(resolved=tryResolve(id+ext,options)||tryResolve(id+"/index"+ext,options),resolved)return resolved;if(TS_EXT_RE.test((null==parentModule?void 0:parentModule.filename)||"")&&(resolved=tryResolve(id.replace(JS_EXT_RE,".$1t$2"),options),resolved))return resolved}throw err};function transform(topts){let code=function(filename,source,get){if(!opts.cache||!filename)return get();const sourceHash=` /* v${opts.cacheVersion}-${md5(source,16)} */`,filebase=basename(pathe_92c04245_dirname(filename))+"-"+basename(filename),cacheFile=join(opts.cache,filebase+"."+md5(filename)+".js");if((0, external_fs_.existsSync)(cacheFile)){const cacheSource=(0, external_fs_.readFileSync)(cacheFile,"utf8");if(cacheSource.endsWith(sourceHash))return debug("[cache hit]",filename,"~>",cacheFile),cacheSource}debug("[cache miss]",filename);const result=get();return result.includes("__JITI_ERROR__")||(0, external_fs_.writeFileSync)(cacheFile,result+sourceHash,"utf8"),result}(topts.filename,topts.source,(()=>{var _a;const res=opts.transform(Object.assign(Object.assign(Object.assign({legacy:opts.legacy},opts.transformOptions),{babel:Object.assign(Object.assign({},opts.sourceMaps?{sourceFileName:topts.filename,sourceMaps:"inline"}:{}),null===(_a=opts.transformOptions)||void 0===_a?void 0:_a.babel)}),topts));return res.error&&opts.debug&&debug(res.error),res.code}));return code.startsWith("#!")&&(code="// "+code),code}function _interopDefault(mod){return opts.interopDefault?function(sourceModule){if(null===(value=sourceModule)||"object"!=typeof value||!("default"in sourceModule))return sourceModule;var value;const newModule=sourceModule.default;for(const key in sourceModule)if("default"===key)try{key in newModule||Object.defineProperty(newModule,key,{enumerable:!1,configurable:!1,get:()=>newModule});}catch{}else try{key in newModule||Object.defineProperty(newModule,key,{enumerable:!0,configurable:!0,get:()=>sourceModule[key]});}catch{}return newModule}(mod):mod}function jiti(id){var _a,_b,_c;if(id.startsWith("node:")?id=id.slice(5):id.startsWith("file:")&&(id=(0, external_url_namespaceObject.fileURLToPath)(id)),external_module_.builtinModules.includes(id)||".pnp.js"===id)return nativeRequire(id);const filename=_resolve(id),ext=pathe_92c04245_extname(filename);if(".json"===ext){debug("[json]",filename);const jsonModule=nativeRequire(id);return Object.defineProperty(jsonModule,"default",{value:jsonModule}),jsonModule}if(ext&&!opts.extensions.includes(ext))return debug("[unknown]",filename),nativeRequire(id);if(isNativeRe.test(filename))return debug("[native]",filename),nativeRequire(id);if(requiredModules&&requiredModules[filename])return _interopDefault(null===(_a=requiredModules[filename])||void 0===_a?void 0:_a.exports);if(opts.requireCache&&nativeRequire.cache[filename])return _interopDefault(null===(_b=nativeRequire.cache[filename])||void 0===_b?void 0:_b.exports);let source=(0, external_fs_.readFileSync)(filename,"utf8");const isTypescript=".ts"===ext||".mts"===ext||".cts"===ext,isNativeModule=".mjs"===ext||".js"===ext&&"module"===(null===(_c=function(path){for(;path&&"."!==path&&"/"!==path;){path=join(path,"..");try{const pkg=(0,external_fs_.readFileSync)(join(path,"package.json"),"utf8");try{return JSON.parse(pkg)}catch(_a){}break}catch(_b){}}}(filename))||void 0===_c?void 0:_c.type),needsTranspile=!(".cjs"===ext)&&(isTypescript||isNativeModule||isTransformRe.test(filename)||hasESMSyntax(source)||opts.legacy&&source.match(/\?\.|\?\?/));const start=external_perf_hooks_namespaceObject.performance.now();if(needsTranspile){source=transform({filename,source,ts:isTypescript});debug("[transpile]"+(isNativeModule?" [esm]":""),filename,`(${Math.round(1e3*(external_perf_hooks_namespaceObject.performance.now()-start))/1e3}ms)`);}else try{return debug("[native]",filename),_interopDefault(nativeRequire(id))}catch(error){debug("Native require error:",error),debug("[fallback]",filename),source=transform({filename,source,ts:isTypescript});}const mod=new external_module_.Module(filename);let compiled;mod.filename=filename,parentModule&&(mod.parent=parentModule,Array.isArray(parentModule.children)&&!parentModule.children.includes(mod)&&parentModule.children.push(mod)),mod.require=createJITI(filename,opts,mod,requiredModules||{}),mod.path=pathe_92c04245_dirname(filename),mod.paths=external_module_.Module._nodeModulePaths(mod.path),requiredModules&&(requiredModules[filename]=mod),opts.requireCache&&(nativeRequire.cache[filename]=mod);try{compiled=external_vm_default().runInThisContext(external_module_.Module.wrap(source),{filename,lineOffset:0,displayErrors:!1});}catch(error){opts.requireCache&&delete nativeRequire.cache[filename],opts.onError(error);}try{compiled(mod.exports,mod.require,mod,mod.filename,pathe_92c04245_dirname(mod.filename));}catch(error){opts.requireCache&&delete nativeRequire.cache[filename],opts.onError(error);}if(requiredModules&&delete requiredModules[filename],mod.exports&&mod.exports.__JITI_ERROR__){const{filename,line,column,code,message}=mod.exports.__JITI_ERROR__,err=new Error(`${code}: ${message} \n ${`${filename}:${line}:${column}`}`);Error.captureStackTrace(err,jiti),opts.onError(err);}mod.loaded=!0;return _interopDefault(mod.exports)}return _resolve.paths=nativeRequire.resolve.paths,jiti.resolve=_resolve,jiti.cache=opts.requireCache?nativeRequire.cache:{},jiti.extensions=nativeRequire.extensions,jiti.main=nativeRequire.main,jiti.transform=transform,jiti.register=function(){return (0, lib.addHook)(((source,filename)=>jiti.transform({source,filename,ts:!!/\.[cm]?ts$/.test(filename)})),{exts:opts.extensions})},jiti}})(),module.exports=__webpack_exports__.default;})();
} (jiti));
	return jitiExports;
}

var babelExports = {};
var babel = {
  get exports(){ return babelExports; },
  set exports(v){ babelExports = v; },
};

var hasRequiredBabel;

function requireBabel () {
	if (hasRequiredBabel) return babelExports;
	hasRequiredBabel = 1;
	(function (module) {
		(()=>{var __webpack_modules__={"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files lazy recursive":module=>{function webpackEmptyAsyncContext(req){return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}))}webpackEmptyAsyncContext.keys=()=>[],webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id="./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files lazy recursive",module.exports=webpackEmptyAsyncContext;},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive",module.exports=webpackEmptyContext;},"./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-class-properties/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=(0, __webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api=>(api.assertVersion(7),{name:"syntax-class-properties",manipulateOptions(opts,parserOpts){parserOpts.plugins.push("classProperties","classPrivateProperties","classPrivateMethods");}})));exports.default=_default;},"./node_modules/.pnpm/@babel+plugin-syntax-export-namespace-from@7.8.3_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-export-namespace-from/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=(0, __webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api=>(api.assertVersion(7),{name:"syntax-export-namespace-from",manipulateOptions(opts,parserOpts){parserOpts.plugins.push("exportNamespaceFrom");}})));exports.default=_default;},"./node_modules/.pnpm/@babel+plugin-syntax-nullish-coalescing-operator@7.8.3_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-nullish-coalescing-operator/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=(0, __webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api=>(api.assertVersion(7),{name:"syntax-nullish-coalescing-operator",manipulateOptions(opts,parserOpts){parserOpts.plugins.push("nullishCoalescingOperator");}})));exports.default=_default;},"./node_modules/.pnpm/@babel+plugin-syntax-optional-chaining@7.8.3_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-optional-chaining/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=(0, __webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api=>(api.assertVersion(7),{name:"syntax-optional-chaining",manipulateOptions(opts,parserOpts){parserOpts.plugins.push("optionalChaining");}})));exports.default=_default;},"./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.2/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js":function(__unused_webpack_module,exports,__webpack_require__){!function(exports,setArray,sourcemapCodec,traceMapping){const COLUMN=0,SOURCES_INDEX=1,SOURCE_LINE=2,SOURCE_COLUMN=3,NAMES_INDEX=4,NO_NAME=-1;let addSegmentInternal;exports.addSegment=void 0,exports.addMapping=void 0,exports.maybeAddSegment=void 0,exports.maybeAddMapping=void 0,exports.setSourceContent=void 0,exports.toDecodedMap=void 0,exports.toEncodedMap=void 0,exports.fromMap=void 0,exports.allMappings=void 0;class GenMapping{constructor({file,sourceRoot}={}){this._names=new setArray.SetArray,this._sources=new setArray.SetArray,this._sourcesContent=[],this._mappings=[],this.file=file,this.sourceRoot=sourceRoot;}}function getLine(mappings,index){for(let i=mappings.length;i<=index;i++)mappings[i]=[];return mappings[index]}function getColumnIndex(line,genColumn){let index=line.length;for(let i=index-1;i>=0&&!(genColumn>=line[i][COLUMN]);index=i--);return index}function insert(array,index,value){for(let i=array.length;i>index;i--)array[i]=array[i-1];array[index]=value;}function removeEmptyFinalLines(mappings){const{length}=mappings;let len=length;for(let i=len-1;i>=0&&!(mappings[i].length>0);len=i,i--);len<length&&(mappings.length=len);}function putAll(strarr,array){for(let i=0;i<array.length;i++)setArray.put(strarr,array[i]);}function skipSourceless(line,index){return 0===index||1===line[index-1].length}function skipSource(line,index,sourcesIndex,sourceLine,sourceColumn,namesIndex){if(0===index)return !1;const prev=line[index-1];return 1!==prev.length&&sourcesIndex===prev[SOURCES_INDEX]&&sourceLine===prev[SOURCE_LINE]&&sourceColumn===prev[SOURCE_COLUMN]&&namesIndex===(5===prev.length?prev[NAMES_INDEX]:NO_NAME)}function addMappingInternal(skipable,map,mapping){const{generated,source,original,name,content}=mapping;if(!source)return addSegmentInternal(skipable,map,generated.line-1,generated.column,null,null,null,null,null);const s=source;return addSegmentInternal(skipable,map,generated.line-1,generated.column,s,original.line-1,original.column,name,content)}exports.addSegment=(map,genLine,genColumn,source,sourceLine,sourceColumn,name,content)=>addSegmentInternal(!1,map,genLine,genColumn,source,sourceLine,sourceColumn,name,content),exports.maybeAddSegment=(map,genLine,genColumn,source,sourceLine,sourceColumn,name,content)=>addSegmentInternal(!0,map,genLine,genColumn,source,sourceLine,sourceColumn,name,content),exports.addMapping=(map,mapping)=>addMappingInternal(!1,map,mapping),exports.maybeAddMapping=(map,mapping)=>addMappingInternal(!0,map,mapping),exports.setSourceContent=(map,source,content)=>{const{_sources:sources,_sourcesContent:sourcesContent}=map;sourcesContent[setArray.put(sources,source)]=content;},exports.toDecodedMap=map=>{const{file,sourceRoot,_mappings:mappings,_sources:sources,_sourcesContent:sourcesContent,_names:names}=map;return removeEmptyFinalLines(mappings),{version:3,file:file||void 0,names:names.array,sourceRoot:sourceRoot||void 0,sources:sources.array,sourcesContent,mappings}},exports.toEncodedMap=map=>{const decoded=exports.toDecodedMap(map);return Object.assign(Object.assign({},decoded),{mappings:sourcemapCodec.encode(decoded.mappings)})},exports.allMappings=map=>{const out=[],{_mappings:mappings,_sources:sources,_names:names}=map;for(let i=0;i<mappings.length;i++){const line=mappings[i];for(let j=0;j<line.length;j++){const seg=line[j],generated={line:i+1,column:seg[COLUMN]};let source,original,name;1!==seg.length&&(source=sources.array[seg[SOURCES_INDEX]],original={line:seg[SOURCE_LINE]+1,column:seg[SOURCE_COLUMN]},5===seg.length&&(name=names.array[seg[NAMES_INDEX]])),out.push({generated,source,original,name});}}return out},exports.fromMap=input=>{const map=new traceMapping.TraceMap(input),gen=new GenMapping({file:map.file,sourceRoot:map.sourceRoot});return putAll(gen._names,map.names),putAll(gen._sources,map.sources),gen._sourcesContent=map.sourcesContent||map.sources.map((()=>null)),gen._mappings=traceMapping.decodedMappings(map),gen},addSegmentInternal=(skipable,map,genLine,genColumn,source,sourceLine,sourceColumn,name,content)=>{const{_mappings:mappings,_sources:sources,_sourcesContent:sourcesContent,_names:names}=map,line=getLine(mappings,genLine),index=getColumnIndex(line,genColumn);if(!source){if(skipable&&skipSourceless(line,index))return;return insert(line,index,[genColumn])}const sourcesIndex=setArray.put(sources,source),namesIndex=name?setArray.put(names,name):NO_NAME;if(sourcesIndex===sourcesContent.length&&(sourcesContent[sourcesIndex]=null!=content?content:null),!skipable||!skipSource(line,index,sourcesIndex,sourceLine,sourceColumn,namesIndex))return insert(line,index,name?[genColumn,sourcesIndex,sourceLine,sourceColumn,namesIndex]:[genColumn,sourcesIndex,sourceLine,sourceColumn])},exports.GenMapping=GenMapping,Object.defineProperty(exports,"__esModule",{value:!0});}(exports,__webpack_require__("./node_modules/.pnpm/@jridgewell+set-array@1.1.2/node_modules/@jridgewell/set-array/dist/set-array.umd.js"),__webpack_require__("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.14/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"),__webpack_require__("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.17/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"));},"./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.0/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js":function(module){module.exports=function(){const schemeRegex=/^[\w+.-]+:\/\//,urlRegex=/^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/,fileRegex=/^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;var UrlType;function isAbsoluteUrl(input){return schemeRegex.test(input)}function isSchemeRelativeUrl(input){return input.startsWith("//")}function isAbsolutePath(input){return input.startsWith("/")}function isFileUrl(input){return input.startsWith("file:")}function isRelative(input){return /^[.?#]/.test(input)}function parseAbsoluteUrl(input){const match=urlRegex.exec(input);return makeUrl(match[1],match[2]||"",match[3],match[4]||"",match[5]||"/",match[6]||"",match[7]||"")}function parseFileUrl(input){const match=fileRegex.exec(input),path=match[2];return makeUrl("file:","",match[1]||"","",isAbsolutePath(path)?path:"/"+path,match[3]||"",match[4]||"")}function makeUrl(scheme,user,host,port,path,query,hash){return {scheme,user,host,port,path,query,hash,type:UrlType.Absolute}}function parseUrl(input){if(isSchemeRelativeUrl(input)){const url=parseAbsoluteUrl("http:"+input);return url.scheme="",url.type=UrlType.SchemeRelative,url}if(isAbsolutePath(input)){const url=parseAbsoluteUrl("http://foo.com"+input);return url.scheme="",url.host="",url.type=UrlType.AbsolutePath,url}if(isFileUrl(input))return parseFileUrl(input);if(isAbsoluteUrl(input))return parseAbsoluteUrl(input);const url=parseAbsoluteUrl("http://foo.com/"+input);return url.scheme="",url.host="",url.type=input?input.startsWith("?")?UrlType.Query:input.startsWith("#")?UrlType.Hash:UrlType.RelativePath:UrlType.Empty,url}function stripPathFilename(path){if(path.endsWith("/.."))return path;const index=path.lastIndexOf("/");return path.slice(0,index+1)}function mergePaths(url,base){normalizePath(base,base.type),"/"===url.path?url.path=base.path:url.path=stripPathFilename(base.path)+url.path;}function normalizePath(url,type){const rel=type<=UrlType.RelativePath,pieces=url.path.split("/");let pointer=1,positive=0,addTrailingSlash=!1;for(let i=1;i<pieces.length;i++){const piece=pieces[i];piece?(addTrailingSlash=!1,"."!==piece&&(".."!==piece?(pieces[pointer++]=piece,positive++):positive?(addTrailingSlash=!0,positive--,pointer--):rel&&(pieces[pointer++]=piece))):addTrailingSlash=!0;}let path="";for(let i=1;i<pointer;i++)path+="/"+pieces[i];(!path||addTrailingSlash&&!path.endsWith("/.."))&&(path+="/"),url.path=path;}function resolve(input,base){if(!input&&!base)return "";const url=parseUrl(input);let inputType=url.type;if(base&&inputType!==UrlType.Absolute){const baseUrl=parseUrl(base),baseType=baseUrl.type;switch(inputType){case UrlType.Empty:url.hash=baseUrl.hash;case UrlType.Hash:url.query=baseUrl.query;case UrlType.Query:case UrlType.RelativePath:mergePaths(url,baseUrl);case UrlType.AbsolutePath:url.user=baseUrl.user,url.host=baseUrl.host,url.port=baseUrl.port;case UrlType.SchemeRelative:url.scheme=baseUrl.scheme;}baseType>inputType&&(inputType=baseType);}normalizePath(url,inputType);const queryHash=url.query+url.hash;switch(inputType){case UrlType.Hash:case UrlType.Query:return queryHash;case UrlType.RelativePath:{const path=url.path.slice(1);return path?isRelative(base||input)&&!isRelative(path)?"./"+path+queryHash:path+queryHash:queryHash||"."}case UrlType.AbsolutePath:return url.path+queryHash;default:return url.scheme+"//"+url.user+url.host+url.port+url.path+queryHash}}return function(UrlType){UrlType[UrlType.Empty=1]="Empty",UrlType[UrlType.Hash=2]="Hash",UrlType[UrlType.Query=3]="Query",UrlType[UrlType.RelativePath=4]="RelativePath",UrlType[UrlType.AbsolutePath=5]="AbsolutePath",UrlType[UrlType.SchemeRelative=6]="SchemeRelative",UrlType[UrlType.Absolute=7]="Absolute";}(UrlType||(UrlType={})),resolve}();},"./node_modules/.pnpm/@jridgewell+set-array@1.1.2/node_modules/@jridgewell/set-array/dist/set-array.umd.js":function(__unused_webpack_module,exports){!function(exports){exports.get=void 0,exports.put=void 0,exports.pop=void 0;class SetArray{constructor(){this._indexes={__proto__:null},this.array=[];}}exports.get=(strarr,key)=>strarr._indexes[key],exports.put=(strarr,key)=>{const index=exports.get(strarr,key);if(void 0!==index)return index;const{array,_indexes:indexes}=strarr;return indexes[key]=array.push(key)-1},exports.pop=strarr=>{const{array,_indexes:indexes}=strarr;0!==array.length&&(indexes[array.pop()]=void 0);},exports.SetArray=SetArray,Object.defineProperty(exports,"__esModule",{value:!0});}(exports);},"./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.14/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js":function(__unused_webpack_module,exports){!function(exports){const comma=",".charCodeAt(0),semicolon=";".charCodeAt(0),chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",intToChar=new Uint8Array(64),charToInt=new Uint8Array(128);for(let i=0;i<chars.length;i++){const c=chars.charCodeAt(i);intToChar[i]=c,charToInt[c]=i;}const td="undefined"!=typeof TextDecoder?new TextDecoder:"undefined"!=typeof Buffer?{decode:buf=>Buffer.from(buf.buffer,buf.byteOffset,buf.byteLength).toString()}:{decode(buf){let out="";for(let i=0;i<buf.length;i++)out+=String.fromCharCode(buf[i]);return out}};function decode(mappings){const state=new Int32Array(5),decoded=[];let index=0;do{const semi=indexOf(mappings,index),line=[];let sorted=!0,lastCol=0;state[0]=0;for(let i=index;i<semi;i++){let seg;i=decodeInteger(mappings,i,state,0);const col=state[0];col<lastCol&&(sorted=!1),lastCol=col,hasMoreVlq(mappings,i,semi)?(i=decodeInteger(mappings,i,state,1),i=decodeInteger(mappings,i,state,2),i=decodeInteger(mappings,i,state,3),hasMoreVlq(mappings,i,semi)?(i=decodeInteger(mappings,i,state,4),seg=[col,state[1],state[2],state[3],state[4]]):seg=[col,state[1],state[2],state[3]]):seg=[col],line.push(seg);}sorted||sort(line),decoded.push(line),index=semi+1;}while(index<=mappings.length);return decoded}function indexOf(mappings,index){const idx=mappings.indexOf(";",index);return -1===idx?mappings.length:idx}function decodeInteger(mappings,pos,state,j){let value=0,shift=0,integer=0;do{const c=mappings.charCodeAt(pos++);integer=charToInt[c],value|=(31&integer)<<shift,shift+=5;}while(32&integer);const shouldNegate=1&value;return value>>>=1,shouldNegate&&(value=-2147483648|-value),state[j]+=value,pos}function hasMoreVlq(mappings,i,length){return !(i>=length)&&mappings.charCodeAt(i)!==comma}function sort(line){line.sort(sortComparator);}function sortComparator(a,b){return a[0]-b[0]}function encode(decoded){const state=new Int32Array(5),bufLength=16384,subLength=bufLength-36,buf=new Uint8Array(bufLength),sub=buf.subarray(0,subLength);let pos=0,out="";for(let i=0;i<decoded.length;i++){const line=decoded[i];if(i>0&&(pos===bufLength&&(out+=td.decode(buf),pos=0),buf[pos++]=semicolon),0!==line.length){state[0]=0;for(let j=0;j<line.length;j++){const segment=line[j];pos>subLength&&(out+=td.decode(sub),buf.copyWithin(0,subLength,pos),pos-=subLength),j>0&&(buf[pos++]=comma),pos=encodeInteger(buf,pos,state,segment,0),1!==segment.length&&(pos=encodeInteger(buf,pos,state,segment,1),pos=encodeInteger(buf,pos,state,segment,2),pos=encodeInteger(buf,pos,state,segment,3),4!==segment.length&&(pos=encodeInteger(buf,pos,state,segment,4)));}}}return out+td.decode(buf.subarray(0,pos))}function encodeInteger(buf,pos,state,segment,j){const next=segment[j];let num=next-state[j];state[j]=next,num=num<0?-num<<1|1:num<<1;do{let clamped=31&num;num>>>=5,num>0&&(clamped|=32),buf[pos++]=intToChar[clamped];}while(num>0);return pos}exports.decode=decode,exports.encode=encode,Object.defineProperty(exports,"__esModule",{value:!0});}(exports);},"./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.17/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js":function(__unused_webpack_module,exports,__webpack_require__){!function(exports,sourcemapCodec,resolveUri){function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var resolveUri__default=_interopDefaultLegacy(resolveUri);function resolve(input,base){return base&&!base.endsWith("/")&&(base+="/"),resolveUri__default.default(input,base)}function stripFilename(path){if(!path)return "";const index=path.lastIndexOf("/");return path.slice(0,index+1)}const COLUMN=0,SOURCES_INDEX=1,SOURCE_LINE=2,SOURCE_COLUMN=3,NAMES_INDEX=4,REV_GENERATED_LINE=1,REV_GENERATED_COLUMN=2;function maybeSort(mappings,owned){const unsortedIndex=nextUnsortedSegmentLine(mappings,0);if(unsortedIndex===mappings.length)return mappings;owned||(mappings=mappings.slice());for(let i=unsortedIndex;i<mappings.length;i=nextUnsortedSegmentLine(mappings,i+1))mappings[i]=sortSegments(mappings[i],owned);return mappings}function nextUnsortedSegmentLine(mappings,start){for(let i=start;i<mappings.length;i++)if(!isSorted(mappings[i]))return i;return mappings.length}function isSorted(line){for(let j=1;j<line.length;j++)if(line[j][COLUMN]<line[j-1][COLUMN])return !1;return !0}function sortSegments(line,owned){return owned||(line=line.slice()),line.sort(sortComparator)}function sortComparator(a,b){return a[COLUMN]-b[COLUMN]}let found=!1;function binarySearch(haystack,needle,low,high){for(;low<=high;){const mid=low+(high-low>>1),cmp=haystack[mid][COLUMN]-needle;if(0===cmp)return found=!0,mid;cmp<0?low=mid+1:high=mid-1;}return found=!1,low-1}function upperBound(haystack,needle,index){for(let i=index+1;i<haystack.length&&haystack[i][COLUMN]===needle;index=i++);return index}function lowerBound(haystack,needle,index){for(let i=index-1;i>=0&&haystack[i][COLUMN]===needle;index=i--);return index}function memoizedState(){return {lastKey:-1,lastNeedle:-1,lastIndex:-1}}function memoizedBinarySearch(haystack,needle,state,key){const{lastKey,lastNeedle,lastIndex}=state;let low=0,high=haystack.length-1;if(key===lastKey){if(needle===lastNeedle)return found=-1!==lastIndex&&haystack[lastIndex][COLUMN]===needle,lastIndex;needle>=lastNeedle?low=-1===lastIndex?0:lastIndex:high=lastIndex;}return state.lastKey=key,state.lastNeedle=needle,state.lastIndex=binarySearch(haystack,needle,low,high)}function buildBySources(decoded,memos){const sources=memos.map(buildNullArray);for(let i=0;i<decoded.length;i++){const line=decoded[i];for(let j=0;j<line.length;j++){const seg=line[j];if(1===seg.length)continue;const sourceIndex=seg[SOURCES_INDEX],sourceLine=seg[SOURCE_LINE],sourceColumn=seg[SOURCE_COLUMN],originalSource=sources[sourceIndex],originalLine=originalSource[sourceLine]||(originalSource[sourceLine]=[]),memo=memos[sourceIndex],index=upperBound(originalLine,sourceColumn,memoizedBinarySearch(originalLine,sourceColumn,memo,sourceLine));insert(originalLine,memo.lastIndex=index+1,[sourceColumn,i,seg[COLUMN]]);}}return sources}function insert(array,index,value){for(let i=array.length;i>index;i--)array[i]=array[i-1];array[index]=value;}function buildNullArray(){return {__proto__:null}}const AnyMap=function(map,mapUrl){const parsed="string"==typeof map?JSON.parse(map):map;if(!("sections"in parsed))return new TraceMap(parsed,mapUrl);const mappings=[],sources=[],sourcesContent=[],names=[];recurse(parsed,mapUrl,mappings,sources,sourcesContent,names,0,0,1/0,1/0);const joined={version:3,file:parsed.file,names,sources,sourcesContent,mappings};return exports.presortedDecodedMap(joined)};function recurse(input,mapUrl,mappings,sources,sourcesContent,names,lineOffset,columnOffset,stopLine,stopColumn){const{sections}=input;for(let i=0;i<sections.length;i++){const{map,offset}=sections[i];let sl=stopLine,sc=stopColumn;if(i+1<sections.length){const nextOffset=sections[i+1].offset;sl=Math.min(stopLine,lineOffset+nextOffset.line),sl===stopLine?sc=Math.min(stopColumn,columnOffset+nextOffset.column):sl<stopLine&&(sc=columnOffset+nextOffset.column);}addSection(map,mapUrl,mappings,sources,sourcesContent,names,lineOffset+offset.line,columnOffset+offset.column,sl,sc);}}function addSection(input,mapUrl,mappings,sources,sourcesContent,names,lineOffset,columnOffset,stopLine,stopColumn){if("sections"in input)return recurse(...arguments);const map=new TraceMap(input,mapUrl),sourcesOffset=sources.length,namesOffset=names.length,decoded=exports.decodedMappings(map),{resolvedSources,sourcesContent:contents}=map;if(append(sources,resolvedSources),append(names,map.names),contents)append(sourcesContent,contents);else for(let i=0;i<resolvedSources.length;i++)sourcesContent.push(null);for(let i=0;i<decoded.length;i++){const lineI=lineOffset+i;if(lineI>stopLine)return;const out=getLine(mappings,lineI),cOffset=0===i?columnOffset:0,line=decoded[i];for(let j=0;j<line.length;j++){const seg=line[j],column=cOffset+seg[COLUMN];if(lineI===stopLine&&column>=stopColumn)return;if(1===seg.length){out.push([column]);continue}const sourcesIndex=sourcesOffset+seg[SOURCES_INDEX],sourceLine=seg[SOURCE_LINE],sourceColumn=seg[SOURCE_COLUMN];out.push(4===seg.length?[column,sourcesIndex,sourceLine,sourceColumn]:[column,sourcesIndex,sourceLine,sourceColumn,namesOffset+seg[NAMES_INDEX]]);}}}function append(arr,other){for(let i=0;i<other.length;i++)arr.push(other[i]);}function getLine(arr,index){for(let i=arr.length;i<=index;i++)arr[i]=[];return arr[index]}const LINE_GTR_ZERO="`line` must be greater than 0 (lines start at line 1)",COL_GTR_EQ_ZERO="`column` must be greater than or equal to 0 (columns start at column 0)",LEAST_UPPER_BOUND=-1,GREATEST_LOWER_BOUND=1;exports.encodedMappings=void 0,exports.decodedMappings=void 0,exports.traceSegment=void 0,exports.originalPositionFor=void 0,exports.generatedPositionFor=void 0,exports.allGeneratedPositionsFor=void 0,exports.eachMapping=void 0,exports.sourceContentFor=void 0,exports.presortedDecodedMap=void 0,exports.decodedMap=void 0,exports.encodedMap=void 0;class TraceMap{constructor(map,mapUrl){const isString="string"==typeof map;if(!isString&&map._decodedMemo)return map;const parsed=isString?JSON.parse(map):map,{version,file,names,sourceRoot,sources,sourcesContent}=parsed;this.version=version,this.file=file,this.names=names,this.sourceRoot=sourceRoot,this.sources=sources,this.sourcesContent=sourcesContent;const from=resolve(sourceRoot||"",stripFilename(mapUrl));this.resolvedSources=sources.map((s=>resolve(s||"",from)));const{mappings}=parsed;"string"==typeof mappings?(this._encoded=mappings,this._decoded=void 0):(this._encoded=void 0,this._decoded=maybeSort(mappings,isString)),this._decodedMemo=memoizedState(),this._bySources=void 0,this._bySourceMemos=void 0;}}function clone(map,mappings){return {version:map.version,file:map.file,names:map.names,sourceRoot:map.sourceRoot,sources:map.sources,sourcesContent:map.sourcesContent,mappings}}function OMapping(source,line,column,name){return {source,line,column,name}}function GMapping(line,column){return {line,column}}function traceSegmentInternal(segments,memo,line,column,bias){let index=memoizedBinarySearch(segments,column,memo,line);return found?index=(bias===LEAST_UPPER_BOUND?upperBound:lowerBound)(segments,column,index):bias===LEAST_UPPER_BOUND&&index++,-1===index||index===segments.length?-1:index}function sliceGeneratedPositions(segments,memo,line,column,bias){let min=traceSegmentInternal(segments,memo,line,column,GREATEST_LOWER_BOUND);if(found||bias!==LEAST_UPPER_BOUND||min++,-1===min||min===segments.length)return [];const matchedColumn=found?column:segments[min][COLUMN];found||(min=lowerBound(segments,matchedColumn,min));const max=upperBound(segments,matchedColumn,min),result=[];for(;min<=max;min++){const segment=segments[min];result.push(GMapping(segment[REV_GENERATED_LINE]+1,segment[REV_GENERATED_COLUMN]));}return result}(()=>{function generatedPosition(map,source,line,column,bias,all){if(--line<0)throw new Error(LINE_GTR_ZERO);if(column<0)throw new Error(COL_GTR_EQ_ZERO);const{sources,resolvedSources}=map;let sourceIndex=sources.indexOf(source);if(-1===sourceIndex&&(sourceIndex=resolvedSources.indexOf(source)),-1===sourceIndex)return all?[]:GMapping(null,null);const segments=(map._bySources||(map._bySources=buildBySources(exports.decodedMappings(map),map._bySourceMemos=sources.map(memoizedState))))[sourceIndex][line];if(null==segments)return all?[]:GMapping(null,null);const memo=map._bySourceMemos[sourceIndex];if(all)return sliceGeneratedPositions(segments,memo,line,column,bias);const index=traceSegmentInternal(segments,memo,line,column,bias);if(-1===index)return GMapping(null,null);const segment=segments[index];return GMapping(segment[REV_GENERATED_LINE]+1,segment[REV_GENERATED_COLUMN])}exports.encodedMappings=map=>{var _a;return null!==(_a=map._encoded)&&void 0!==_a?_a:map._encoded=sourcemapCodec.encode(map._decoded)},exports.decodedMappings=map=>map._decoded||(map._decoded=sourcemapCodec.decode(map._encoded)),exports.traceSegment=(map,line,column)=>{const decoded=exports.decodedMappings(map);if(line>=decoded.length)return null;const segments=decoded[line],index=traceSegmentInternal(segments,map._decodedMemo,line,column,GREATEST_LOWER_BOUND);return -1===index?null:segments[index]},exports.originalPositionFor=(map,{line,column,bias})=>{if(--line<0)throw new Error(LINE_GTR_ZERO);if(column<0)throw new Error(COL_GTR_EQ_ZERO);const decoded=exports.decodedMappings(map);if(line>=decoded.length)return OMapping(null,null,null,null);const segments=decoded[line],index=traceSegmentInternal(segments,map._decodedMemo,line,column,bias||GREATEST_LOWER_BOUND);if(-1===index)return OMapping(null,null,null,null);const segment=segments[index];if(1===segment.length)return OMapping(null,null,null,null);const{names,resolvedSources}=map;return OMapping(resolvedSources[segment[SOURCES_INDEX]],segment[SOURCE_LINE]+1,segment[SOURCE_COLUMN],5===segment.length?names[segment[NAMES_INDEX]]:null)},exports.allGeneratedPositionsFor=(map,{source,line,column,bias})=>generatedPosition(map,source,line,column,bias||LEAST_UPPER_BOUND,!0),exports.generatedPositionFor=(map,{source,line,column,bias})=>generatedPosition(map,source,line,column,bias||GREATEST_LOWER_BOUND,!1),exports.eachMapping=(map,cb)=>{const decoded=exports.decodedMappings(map),{names,resolvedSources}=map;for(let i=0;i<decoded.length;i++){const line=decoded[i];for(let j=0;j<line.length;j++){const seg=line[j],generatedLine=i+1,generatedColumn=seg[0];let source=null,originalLine=null,originalColumn=null,name=null;1!==seg.length&&(source=resolvedSources[seg[1]],originalLine=seg[2]+1,originalColumn=seg[3]),5===seg.length&&(name=names[seg[4]]),cb({generatedLine,generatedColumn,source,originalLine,originalColumn,name});}}},exports.sourceContentFor=(map,source)=>{const{sources,resolvedSources,sourcesContent}=map;if(null==sourcesContent)return null;let index=sources.indexOf(source);return -1===index&&(index=resolvedSources.indexOf(source)),-1===index?null:sourcesContent[index]},exports.presortedDecodedMap=(map,mapUrl)=>{const tracer=new TraceMap(clone(map,[]),mapUrl);return tracer._decoded=map.mappings,tracer},exports.decodedMap=map=>clone(map,exports.decodedMappings(map)),exports.encodedMap=map=>clone(map,exports.encodedMappings(map));})(),exports.AnyMap=AnyMap,exports.GREATEST_LOWER_BOUND=GREATEST_LOWER_BOUND,exports.LEAST_UPPER_BOUND=LEAST_UPPER_BOUND,exports.TraceMap=TraceMap,Object.defineProperty(exports,"__esModule",{value:!0});}(exports,__webpack_require__("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.14/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"),__webpack_require__("./node_modules/.pnpm/@jridgewell+resolve-uri@3.1.0/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js"));},"./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/index.js":(module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(api){var transformImport=(0, _utils.createDynamicImportTransform)(api);return {manipulateOptions:function(opts,parserOpts){parserOpts.plugins.push("dynamicImport");},visitor:{Import:function(path){transformImport(this,path);}}}};var _utils=__webpack_require__("./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/utils.js");module.exports=exports.default;},"./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/utils.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0});var _slicedToArray=function(arr,i){if(Array.isArray(arr))return arr;if(Symbol.iterator in Object(arr))return function(arr,i){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err;}finally{try{!_n&&_i.return&&_i.return();}finally{if(_d)throw _e}}return _arr}(arr,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function getImportSource(t,callNode){var importArguments=callNode.arguments,importPath=_slicedToArray(importArguments,1)[0];return t.isStringLiteral(importPath)||t.isTemplateLiteral(importPath)?(t.removeComments(importPath),importPath):t.templateLiteral([t.templateElement({raw:"",cooked:""}),t.templateElement({raw:"",cooked:""},!0)],importArguments)}exports.getImportSource=getImportSource,exports.createDynamicImportTransform=function(_ref){var template=_ref.template,t=_ref.types,builders={static:{interop:template("Promise.resolve().then(() => INTEROP(require(SOURCE)))"),noInterop:template("Promise.resolve().then(() => require(SOURCE))")},dynamic:{interop:template("Promise.resolve(SOURCE).then(s => INTEROP(require(s)))"),noInterop:template("Promise.resolve(SOURCE).then(s => require(s))")}},visited="function"==typeof WeakSet&&new WeakSet;return function(context,path){if(visited){if(visited.has(path))return;visited.add(path);}var node,SOURCE=getImportSource(t,path.parent),builder=(node=SOURCE,t.isStringLiteral(node)||t.isTemplateLiteral(node)&&0===node.expressions.length?builders.static:builders.dynamic),newImport=context.opts.noInterop?builder.noInterop({SOURCE}):builder.interop({SOURCE,INTEROP:context.addHelper("interopRequireWildcard")});path.parentPath.replaceWith(newImport);}};},"./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{var _path=__webpack_require__("path");function isInType(path){switch(path.parent.type){case"TSTypeReference":case"TSQualifiedName":case"TSExpressionWithTypeArguments":case"TSTypeQuery":return !0;default:return !1}}module.exports=function(_ref){var types=_ref.types,decoratorExpressionForConstructor=function(decorator,param){return function(className){var resultantDecorator=types.callExpression(decorator.expression,[types.Identifier(className),types.Identifier("undefined"),types.NumericLiteral(param.key)]),resultantDecoratorWithFallback=types.logicalExpression("||",resultantDecorator,types.Identifier(className)),assignment=types.assignmentExpression("=",types.Identifier(className),resultantDecoratorWithFallback);return types.expressionStatement(assignment)}},decoratorExpressionForMethod=function(decorator,param){return function(className,functionName){var resultantDecorator=types.callExpression(decorator.expression,[types.Identifier("".concat(className,".prototype")),types.StringLiteral(functionName),types.NumericLiteral(param.key)]);return types.expressionStatement(resultantDecorator)}};return {visitor:{Program:function(path,state){var extension=(0, _path.extname)(state.file.opts.filename);".ts"!==extension&&".tsx"!==extension||function(){var decorators=Object.create(null);path.node.body.filter((function(it){var type=it.type,declaration=it.declaration;switch(type){case"ClassDeclaration":return !0;case"ExportNamedDeclaration":case"ExportDefaultDeclaration":return declaration&&"ClassDeclaration"===declaration.type;default:return !1}})).map((function(it){return "ClassDeclaration"===it.type?it:it.declaration})).forEach((function(clazz){clazz.body.body.forEach((function(body){(body.params||[]).forEach((function(param){(param.decorators||[]).forEach((function(decorator){decorator.expression.callee?decorators[decorator.expression.callee.name]=decorator:decorators[decorator.expression.name]=decorator;}));}));}));}));var _iteratorNormalCompletion=!0,_didIteratorError=!1,_iteratorError=void 0;try{for(var _step,_iterator=path.get("body")[Symbol.iterator]();!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=!0){var stmt=_step.value;if("ImportDeclaration"===stmt.node.type){if(0===stmt.node.specifiers.length)continue;var _iteratorNormalCompletion2=!0,_didIteratorError2=!1,_iteratorError2=void 0;try{for(var _step2,_loop=function(){var specifier=_step2.value,binding=stmt.scope.getBinding(specifier.local.name);binding.referencePaths.length?binding.referencePaths.reduce((function(prev,next){return prev||isInType(next)}),!1)&&Object.keys(decorators).forEach((function(k){var decorator=decorators[k];(decorator.expression.arguments||[]).forEach((function(arg){arg.name===specifier.local.name&&binding.referencePaths.push({parent:decorator.expression});}));})):decorators[specifier.local.name]&&binding.referencePaths.push({parent:decorators[specifier.local.name]});},_iterator2=stmt.node.specifiers[Symbol.iterator]();!(_iteratorNormalCompletion2=(_step2=_iterator2.next()).done);_iteratorNormalCompletion2=!0)_loop();}catch(err){_didIteratorError2=!0,_iteratorError2=err;}finally{try{_iteratorNormalCompletion2||null==_iterator2.return||_iterator2.return();}finally{if(_didIteratorError2)throw _iteratorError2}}}}}catch(err){_didIteratorError=!0,_iteratorError=err;}finally{try{_iteratorNormalCompletion||null==_iterator.return||_iterator.return();}finally{if(_didIteratorError)throw _iteratorError}}}();},Function:function(path){var functionName="";path.node.id?functionName=path.node.id.name:path.node.key&&(functionName=path.node.key.name),(path.get("params")||[]).slice().forEach((function(param){var decorators=param.node.decorators||[],transformable=decorators.length;if(decorators.slice().forEach((function(decorator){if("ClassMethod"===path.type){var classIdentifier,parentNode=path.parentPath.parentPath,classDeclaration=path.findParent((function(p){return "ClassDeclaration"===p.type}));if(classDeclaration?classIdentifier=classDeclaration.node.id.name:(parentNode.insertAfter(null),classIdentifier=function(path){var assignment=path.findParent((function(p){return "AssignmentExpression"===p.node.type}));return "SequenceExpression"===assignment.node.right.type?assignment.node.right.expressions[1].name:"ClassExpression"===assignment.node.right.type?assignment.node.left.name:null}(path)),"constructor"===functionName){var expression=decoratorExpressionForConstructor(decorator,param)(classIdentifier);parentNode.insertAfter(expression);}else {var _expression=decoratorExpressionForMethod(decorator,param)(classIdentifier,functionName);parentNode.insertAfter(_expression);}}else {var className=path.findParent((function(p){return "VariableDeclarator"===p.node.type})).node.id.name;if(functionName===className){var _expression2=decoratorExpressionForConstructor(decorator,param)(className);if("body"===path.parentKey)path.insertAfter(_expression2);else path.findParent((function(p){return "body"===p.parentKey})).insertAfter(_expression2);}else {var classParent=path.findParent((function(p){return "CallExpression"===p.node.type})),_expression3=decoratorExpressionForMethod(decorator,param)(className,functionName);classParent.insertAfter(_expression3);}}})),transformable){var replacement=function(path){switch(path.node.type){case"ObjectPattern":return types.ObjectPattern(path.node.properties);case"AssignmentPattern":return types.AssignmentPattern(path.node.left,path.node.right);case"TSParameterProperty":return types.Identifier(path.node.parameter.name);default:return types.Identifier(path.node.name)}}(param);param.replaceWith(replacement);}}));}}}};},"./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/metadataVisitor.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.metadataVisitor=function(classPath,path){const field=path.node,classNode=classPath.node;switch(field.type){case"ClassMethod":const decorators="constructor"===field.kind?classNode.decorators:field.decorators;if(!decorators||0===decorators.length)return;decorators.push(createMetadataDesignDecorator("design:type",_core.types.identifier("Function"))),decorators.push(createMetadataDesignDecorator("design:paramtypes",_core.types.arrayExpression(field.params.map((param=>(0, _serializeType.serializeType)(classPath,param))))));break;case"ClassProperty":if(!field.decorators||0===field.decorators.length)return;if(!field.typeAnnotation||"TSTypeAnnotation"!==field.typeAnnotation.type)return;field.decorators.push(createMetadataDesignDecorator("design:type",(0, _serializeType.serializeType)(classPath,field)));}};var _core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_serializeType=__webpack_require__("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/serializeType.js");function createMetadataDesignDecorator(design,typeArg){return _core.types.decorator(_core.types.callExpression(_core.types.memberExpression(_core.types.identifier("Reflect"),_core.types.identifier("metadata")),[_core.types.stringLiteral(design),typeArg]))}},"./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/serializeType.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.serializeType=function(classPath,param){const node=getTypedNode(param);if(null==node)return createVoidZero();if(!node.typeAnnotation||"TSTypeAnnotation"!==node.typeAnnotation.type)return createVoidZero();const annotation=node.typeAnnotation.typeAnnotation;return serializeTypeNode(classPath.node.id?classPath.node.id.name:"",annotation)},exports.isClassType=isClassType;var _core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js");function createVoidZero(){return _core.types.unaryExpression("void",_core.types.numericLiteral(0))}function getTypedNode(param){return null==param?null:"ClassProperty"===param.type||"Identifier"===param.type||"ObjectPattern"===param.type?param:"AssignmentPattern"===param.type&&"Identifier"===param.left.type?param.left:"TSParameterProperty"===param.type?getTypedNode(param.parameter):null}function serializeTypeReferenceNode(className,node){const reference=serializeReference(node.typeName);return isClassType(className,reference)?_core.types.identifier("Object"):_core.types.conditionalExpression(_core.types.binaryExpression("===",_core.types.unaryExpression("typeof",reference),_core.types.stringLiteral("undefined")),_core.types.identifier("Object"),_core.types.cloneDeep(reference))}function isClassType(className,node){switch(node.type){case"Identifier":return node.name===className;case"MemberExpression":return isClassType(className,node.object);default:throw new Error(`The property expression at ${node.start} is not valid as a Type to be used in Reflect.metadata`)}}function serializeReference(typeName){return "Identifier"===typeName.type?_core.types.identifier(typeName.name):_core.types.memberExpression(serializeReference(typeName.left),typeName.right)}function serializeTypeNode(className,node){if(void 0===node)return _core.types.identifier("Object");switch(node.type){case"TSVoidKeyword":case"TSUndefinedKeyword":case"TSNullKeyword":case"TSNeverKeyword":return createVoidZero();case"TSParenthesizedType":return serializeTypeNode(className,node.typeAnnotation);case"TSFunctionType":case"TSConstructorType":return _core.types.identifier("Function");case"TSArrayType":case"TSTupleType":return _core.types.identifier("Array");case"TSTypePredicate":case"TSBooleanKeyword":return _core.types.identifier("Boolean");case"TSStringKeyword":return _core.types.identifier("String");case"TSObjectKeyword":return _core.types.identifier("Object");case"TSLiteralType":switch(node.literal.type){case"StringLiteral":return _core.types.identifier("String");case"NumericLiteral":return _core.types.identifier("Number");case"BooleanLiteral":return _core.types.identifier("Boolean");default:throw new Error("Bad type for decorator"+node.literal)}case"TSNumberKeyword":case"TSBigIntKeyword":return _core.types.identifier("Number");case"TSSymbolKeyword":return _core.types.identifier("Symbol");case"TSTypeReference":return serializeTypeReferenceNode(className,node);case"TSIntersectionType":case"TSUnionType":return serializeTypeList(className,node.types);case"TSConditionalType":return serializeTypeList(className,[node.trueType,node.falseType]);case"TSTypeQuery":case"TSTypeOperator":case"TSIndexedAccessType":case"TSMappedType":case"TSTypeLiteral":case"TSAnyKeyword":case"TSUnknownKeyword":case"TSThisType":break;default:throw new Error("Bad type for decorator")}return _core.types.identifier("Object")}function serializeTypeList(className,types){let serializedUnion;for(let typeNode of types){for(;"TSParenthesizedType"===typeNode.type;)typeNode=typeNode.typeAnnotation;if("TSNeverKeyword"===typeNode.type)continue;if("TSNullKeyword"===typeNode.type||"TSUndefinedKeyword"===typeNode.type)continue;const serializedIndividual=serializeTypeNode(className,typeNode);if(_core.types.isIdentifier(serializedIndividual)&&"Object"===serializedIndividual.name)return serializedIndividual;if(serializedUnion){if(!_core.types.isIdentifier(serializedUnion)||!_core.types.isIdentifier(serializedIndividual)||serializedUnion.name!==serializedIndividual.name)return _core.types.identifier("Object")}else serializedUnion=serializedIndividual;}return serializedUnion||createVoidZero()}},"./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/parameter/parameterVisitor.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.parameterVisitor=function(classPath,path){if("ClassMethod"!==path.type)return;if("ClassMethod"!==path.node.type)return;if("Identifier"!==path.node.key.type)return;const methodPath=path;(methodPath.get("params")||[]).slice().forEach((function(param){let resultantDecorator;null!=("Identifier"===param.node.type||"ObjectPattern"===param.node.type?param.node:"TSParameterProperty"===param.node.type&&"Identifier"===param.node.parameter.type?param.node.parameter:null)&&((param.node.decorators||[]).slice().forEach((function(decorator){"constructor"===methodPath.node.kind?(resultantDecorator=createParamDecorator(param.key,decorator.expression,!0),classPath.node.decorators||(classPath.node.decorators=[]),classPath.node.decorators.push(resultantDecorator)):(resultantDecorator=createParamDecorator(param.key,decorator.expression,!1),methodPath.node.decorators||(methodPath.node.decorators=[]),methodPath.node.decorators.push(resultantDecorator));})),resultantDecorator&&(param.node.decorators=null));}));};var _core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js");function createParamDecorator(paramIndex,decoratorExpression,isConstructor=!1){return _core.types.decorator(_core.types.functionExpression(null,[_core.types.identifier("target"),_core.types.identifier("key")],_core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(decoratorExpression,[_core.types.identifier("target"),_core.types.identifier(isConstructor?"undefined":"key"),_core.types.numericLiteral(paramIndex)]))])))}},"./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/plugin.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _helperPluginUtils=__webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"),_parameterVisitor=__webpack_require__("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/parameter/parameterVisitor.js"),_metadataVisitor=__webpack_require__("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/metadata/metadataVisitor.js"),_default=(0, _helperPluginUtils.declare)((api=>(api.assertVersion(7),{visitor:{Program(programPath){programPath.traverse({ClassDeclaration(path){for(const field of path.get("body").get("body"))"ClassMethod"!==field.type&&"ClassProperty"!==field.type||((0, _parameterVisitor.parameterVisitor)(path,field),(0, _metadataVisitor.metadataVisitor)(path,field));path.parentPath.scope.crawl();}});}}})));exports.default=_default;},"./node_modules/.pnpm/convert-source-map@1.9.0/node_modules/convert-source-map/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{var decodeBase64,fs=__webpack_require__("fs"),path=__webpack_require__("path");function Converter(sm,opts){(opts=opts||{}).isFileComment&&(sm=function(sm,dir){var r=exports.mapFileCommentRegex.exec(sm),filename=r[1]||r[2],filepath=path.resolve(dir,filename);try{return fs.readFileSync(filepath,"utf8")}catch(e){throw new Error("An error occurred while trying to read the map file at "+filepath+"\n"+e)}}(sm,opts.commentFileDir)),opts.hasComment&&(sm=function(sm){return sm.split(",").pop()}(sm)),opts.isEncoded&&(sm=decodeBase64(sm)),(opts.isJSON||opts.isEncoded)&&(sm=JSON.parse(sm)),this.sourcemap=sm;}Object.defineProperty(exports,"commentRegex",{get:function(){return /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/gm}}),Object.defineProperty(exports,"mapFileCommentRegex",{get:function(){return /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"`]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/gm}}),decodeBase64="undefined"!=typeof Buffer?"function"==typeof Buffer.from?function(base64){return Buffer.from(base64,"base64").toString()}:function(base64){if("number"==typeof value)throw new TypeError("The value to decode must not be of type number.");return new Buffer(base64,"base64").toString()}:function(base64){return decodeURIComponent(escape(atob(base64)))},Converter.prototype.toJSON=function(space){return JSON.stringify(this.sourcemap,null,space)},"undefined"!=typeof Buffer?"function"==typeof Buffer.from?Converter.prototype.toBase64=function(){var json=this.toJSON();return Buffer.from(json,"utf8").toString("base64")}:Converter.prototype.toBase64=function(){var json=this.toJSON();if("number"==typeof json)throw new TypeError("The json to encode must not be of type number.");return new Buffer(json,"utf8").toString("base64")}:Converter.prototype.toBase64=function(){var json=this.toJSON();return btoa(unescape(encodeURIComponent(json)))},Converter.prototype.toComment=function(options){var data="sourceMappingURL=data:application/json;charset=utf-8;base64,"+this.toBase64();return options&&options.multiline?"/*# "+data+" */":"//# "+data},Converter.prototype.toObject=function(){return JSON.parse(this.toJSON())},Converter.prototype.addProperty=function(key,value){if(this.sourcemap.hasOwnProperty(key))throw new Error('property "'+key+'" already exists on the sourcemap, use set property instead');return this.setProperty(key,value)},Converter.prototype.setProperty=function(key,value){return this.sourcemap[key]=value,this},Converter.prototype.getProperty=function(key){return this.sourcemap[key]},exports.fromObject=function(obj){return new Converter(obj)},exports.fromJSON=function(json){return new Converter(json,{isJSON:!0})},exports.fromBase64=function(base64){return new Converter(base64,{isEncoded:!0})},exports.fromComment=function(comment){return new Converter(comment=comment.replace(/^\/\*/g,"//").replace(/\*\/$/g,""),{isEncoded:!0,hasComment:!0})},exports.fromMapFileComment=function(comment,dir){return new Converter(comment,{commentFileDir:dir,isFileComment:!0,isJSON:!0})},exports.fromSource=function(content){var m=content.match(exports.commentRegex);return m?exports.fromComment(m.pop()):null},exports.fromMapFileSource=function(content,dir){var m=content.match(exports.mapFileCommentRegex);return m?exports.fromMapFileComment(m.pop(),dir):null},exports.removeComments=function(src){return src.replace(exports.commentRegex,"")},exports.removeMapFileComments=function(src){return src.replace(exports.mapFileCommentRegex,"")},exports.generateMapFileComment=function(file,options){var data="sourceMappingURL="+file;return options&&options.multiline?"/*# "+data+" */":"//# "+data};},"./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js":(module,exports,__webpack_require__)=>{exports.formatArgs=function(args){if(args[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+args[0]+(this.useColors?"%c ":" ")+"+"+module.exports.humanize(this.diff),!this.useColors)return;const c="color: "+this.color;args.splice(1,0,c,"color: inherit");let index=0,lastC=0;args[0].replace(/%[a-zA-Z%]/g,(match=>{"%%"!==match&&(index++,"%c"===match&&(lastC=index));})),args.splice(lastC,0,c);},exports.save=function(namespaces){try{namespaces?exports.storage.setItem("debug",namespaces):exports.storage.removeItem("debug");}catch(error){}},exports.load=function(){let r;try{r=exports.storage.getItem("debug");}catch(error){}!r&&"undefined"!=typeof process&&"env"in process&&(r=({}).DEBUG);return r},exports.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return !0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return !1;return "undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},exports.storage=function(){try{return localStorage}catch(error){}}(),exports.destroy=(()=>{let warned=!1;return ()=>{warned||(warned=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));}})(),exports.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],exports.log=console.debug||console.log||(()=>{}),module.exports=__webpack_require__("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js")(exports);const{formatters}=module.exports;formatters.j=function(v){try{return JSON.stringify(v)}catch(error){return "[UnexpectedJSONParseError]: "+error.message}};},"./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=function(env){function createDebug(namespace){let prevTime,namespacesCache,enabledCache,enableOverride=null;function debug(...args){if(!debug.enabled)return;const self=debug,curr=Number(new Date),ms=curr-(prevTime||curr);self.diff=ms,self.prev=prevTime,self.curr=curr,prevTime=curr,args[0]=createDebug.coerce(args[0]),"string"!=typeof args[0]&&args.unshift("%O");let index=0;args[0]=args[0].replace(/%([a-zA-Z%])/g,((match,format)=>{if("%%"===match)return "%";index++;const formatter=createDebug.formatters[format];if("function"==typeof formatter){const val=args[index];match=formatter.call(self,val),args.splice(index,1),index--;}return match})),createDebug.formatArgs.call(self,args);(self.log||createDebug.log).apply(self,args);}return debug.namespace=namespace,debug.useColors=createDebug.useColors(),debug.color=createDebug.selectColor(namespace),debug.extend=extend,debug.destroy=createDebug.destroy,Object.defineProperty(debug,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==enableOverride?enableOverride:(namespacesCache!==createDebug.namespaces&&(namespacesCache=createDebug.namespaces,enabledCache=createDebug.enabled(namespace)),enabledCache),set:v=>{enableOverride=v;}}),"function"==typeof createDebug.init&&createDebug.init(debug),debug}function extend(namespace,delimiter){const newDebug=createDebug(this.namespace+(void 0===delimiter?":":delimiter)+namespace);return newDebug.log=this.log,newDebug}function toNamespace(regexp){return regexp.toString().substring(2,regexp.toString().length-2).replace(/\.\*\?$/,"*")}return createDebug.debug=createDebug,createDebug.default=createDebug,createDebug.coerce=function(val){if(val instanceof Error)return val.stack||val.message;return val},createDebug.disable=function(){const namespaces=[...createDebug.names.map(toNamespace),...createDebug.skips.map(toNamespace).map((namespace=>"-"+namespace))].join(",");return createDebug.enable(""),namespaces},createDebug.enable=function(namespaces){let i;createDebug.save(namespaces),createDebug.namespaces=namespaces,createDebug.names=[],createDebug.skips=[];const split=("string"==typeof namespaces?namespaces:"").split(/[\s,]+/),len=split.length;for(i=0;i<len;i++)split[i]&&("-"===(namespaces=split[i].replace(/\*/g,".*?"))[0]?createDebug.skips.push(new RegExp("^"+namespaces.slice(1)+"$")):createDebug.names.push(new RegExp("^"+namespaces+"$")));},createDebug.enabled=function(name){if("*"===name[name.length-1])return !0;let i,len;for(i=0,len=createDebug.skips.length;i<len;i++)if(createDebug.skips[i].test(name))return !1;for(i=0,len=createDebug.names.length;i<len;i++)if(createDebug.names[i].test(name))return !0;return !1},createDebug.humanize=__webpack_require__("./node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js"),createDebug.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");},Object.keys(env).forEach((key=>{createDebug[key]=env[key];})),createDebug.names=[],createDebug.skips=[],createDebug.formatters={},createDebug.selectColor=function(namespace){let hash=0;for(let i=0;i<namespace.length;i++)hash=(hash<<5)-hash+namespace.charCodeAt(i),hash|=0;return createDebug.colors[Math.abs(hash)%createDebug.colors.length]},createDebug.enable(createDebug.load()),createDebug};},"./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"undefined"==typeof process||"renderer"===process.type||!0===process.browser||process.__nwjs?module.exports=__webpack_require__("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js"):module.exports=__webpack_require__("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js");},"./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js":(module,exports,__webpack_require__)=>{const tty=__webpack_require__("tty"),util=__webpack_require__("util");exports.init=function(debug){debug.inspectOpts={};const keys=Object.keys(exports.inspectOpts);for(let i=0;i<keys.length;i++)debug.inspectOpts[keys[i]]=exports.inspectOpts[keys[i]];},exports.log=function(...args){return process.stderr.write(util.format(...args)+"\n")},exports.formatArgs=function(args){const{namespace:name,useColors}=this;if(useColors){const c=this.color,colorCode="[3"+(c<8?c:"8;5;"+c),prefix=`  ${colorCode};1m${name} [0m`;args[0]=prefix+args[0].split("\n").join("\n"+prefix),args.push(colorCode+"m+"+module.exports.humanize(this.diff)+"[0m");}else args[0]=function(){if(exports.inspectOpts.hideDate)return "";return (new Date).toISOString()+" "}()+name+" "+args[0];},exports.save=function(namespaces){},exports.load=function(){return ({}).DEBUG},exports.useColors=function(){return "colors"in exports.inspectOpts?Boolean(exports.inspectOpts.colors):tty.isatty(process.stderr.fd)},exports.destroy=util.deprecate((()=>{}),"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."),exports.colors=[6,2,3,4,5,1];try{const supportsColor=__webpack_require__("./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js");supportsColor&&(supportsColor.stderr||supportsColor).level>=2&&(exports.colors=[20,21,26,27,32,33,38,39,40,41,42,43,44,45,56,57,62,63,68,69,74,75,76,77,78,79,80,81,92,93,98,99,112,113,128,129,134,135,148,149,160,161,162,163,164,165,166,167,168,169,170,171,172,173,178,179,184,185,196,197,198,199,200,201,202,203,204,205,206,207,208,209,214,215,220,221]);}catch(error){}exports.inspectOpts=Object.keys(process.env).filter((key=>/^debug_/i.test(key))).reduce(((obj,key)=>{const prop=key.substring(6).toLowerCase().replace(/_([a-z])/g,((_,k)=>k.toUpperCase()));let val=process.env[key];return val=!!/^(yes|on|true|enabled)$/i.test(val)||!/^(no|off|false|disabled)$/i.test(val)&&("null"===val?null:Number(val)),obj[prop]=val,obj}),{}),module.exports=__webpack_require__("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js")(exports);const{formatters}=module.exports;formatters.o=function(v){return this.inspectOpts.colors=this.useColors,util.inspect(v,this.inspectOpts).split("\n").map((str=>str.trim())).join(" ")},formatters.O=function(v){return this.inspectOpts.colors=this.useColors,util.inspect(v,this.inspectOpts)};},"./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js":module=>{const GENSYNC_START=Symbol.for("gensync:v1:start"),GENSYNC_SUSPEND=Symbol.for("gensync:v1:suspend"),GENSYNC_EXPECTED_START="GENSYNC_EXPECTED_START",GENSYNC_EXPECTED_SUSPEND="GENSYNC_EXPECTED_SUSPEND",GENSYNC_OPTIONS_ERROR="GENSYNC_OPTIONS_ERROR",GENSYNC_ERRBACK_NO_CALLBACK="GENSYNC_ERRBACK_NO_CALLBACK";function assertTypeof(type,name,value,allowUndefined){if(typeof value===type||allowUndefined&&void 0===value)return;let msg;throw msg=allowUndefined?`Expected opts.${name} to be either a ${type}, or undefined.`:`Expected opts.${name} to be a ${type}.`,makeError(msg,GENSYNC_OPTIONS_ERROR)}function makeError(msg,code){return Object.assign(new Error(msg),{code})}function buildOperation({name,arity,sync,async}){return setFunctionMetadata(name,arity,(function*(...args){const resume=yield GENSYNC_START;if(!resume){return sync.call(this,args)}let result;try{async.call(this,args,(value=>{result||(result={value},resume());}),(err=>{result||(result={err},resume());}));}catch(err){result={err},resume();}if(yield GENSYNC_SUSPEND,result.hasOwnProperty("err"))throw result.err;return result.value}))}function evaluateSync(gen){let value;for(;!({value}=gen.next()).done;)assertStart(value,gen);return value}function evaluateAsync(gen,resolve,reject){!function step(){try{let value;for(;!({value}=gen.next()).done;){assertStart(value,gen);let sync=!0,didSyncResume=!1;const out=gen.next((()=>{sync?didSyncResume=!0:step();}));if(sync=!1,assertSuspend(out,gen),!didSyncResume)return}return resolve(value)}catch(err){return reject(err)}}();}function assertStart(value,gen){value!==GENSYNC_START&&throwError(gen,makeError(`Got unexpected yielded value in gensync generator: ${JSON.stringify(value)}. Did you perhaps mean to use 'yield*' instead of 'yield'?`,GENSYNC_EXPECTED_START));}function assertSuspend({value,done},gen){(done||value!==GENSYNC_SUSPEND)&&throwError(gen,makeError(done?"Unexpected generator completion. If you get this, it is probably a gensync bug.":`Expected GENSYNC_SUSPEND, got ${JSON.stringify(value)}. If you get this, it is probably a gensync bug.`,GENSYNC_EXPECTED_SUSPEND));}function throwError(gen,err){throw gen.throw&&gen.throw(err),err}function setFunctionMetadata(name,arity,fn){if("string"==typeof name){const nameDesc=Object.getOwnPropertyDescriptor(fn,"name");nameDesc&&!nameDesc.configurable||Object.defineProperty(fn,"name",Object.assign(nameDesc||{},{configurable:!0,value:name}));}if("number"==typeof arity){const lengthDesc=Object.getOwnPropertyDescriptor(fn,"length");lengthDesc&&!lengthDesc.configurable||Object.defineProperty(fn,"length",Object.assign(lengthDesc||{},{configurable:!0,value:arity}));}return fn}module.exports=Object.assign((function(optsOrFn){let genFn=optsOrFn;return genFn="function"!=typeof optsOrFn?function({name,arity,sync,async,errback}){if(assertTypeof("string","name",name,!0),assertTypeof("number","arity",arity,!0),assertTypeof("function","sync",sync),assertTypeof("function","async",async,!0),assertTypeof("function","errback",errback,!0),async&&errback)throw makeError("Expected one of either opts.async or opts.errback, but got _both_.",GENSYNC_OPTIONS_ERROR);if("string"!=typeof name){let fnName;errback&&errback.name&&"errback"!==errback.name&&(fnName=errback.name),async&&async.name&&"async"!==async.name&&(fnName=async.name.replace(/Async$/,"")),sync&&sync.name&&"sync"!==sync.name&&(fnName=sync.name.replace(/Sync$/,"")),"string"==typeof fnName&&(name=fnName);}"number"!=typeof arity&&(arity=sync.length);return buildOperation({name,arity,sync:function(args){return sync.apply(this,args)},async:function(args,resolve,reject){async?async.apply(this,args).then(resolve,reject):errback?errback.call(this,...args,((err,value)=>{null==err?resolve(value):reject(err);})):resolve(sync.apply(this,args));}})}(optsOrFn):function(genFn){return setFunctionMetadata(genFn.name,genFn.length,(function(...args){return genFn.apply(this,args)}))}(optsOrFn),Object.assign(genFn,function(genFn){const fns={sync:function(...args){return evaluateSync(genFn.apply(this,args))},async:function(...args){return new Promise(((resolve,reject)=>{evaluateAsync(genFn.apply(this,args),resolve,reject);}))},errback:function(...args){const cb=args.pop();if("function"!=typeof cb)throw makeError("Asynchronous function called without callback",GENSYNC_ERRBACK_NO_CALLBACK);let gen;try{gen=genFn.apply(this,args);}catch(err){return void cb(err)}evaluateAsync(gen,(val=>cb(void 0,val)),(err=>cb(err)));}};return fns}(genFn))}),{all:buildOperation({name:"all",arity:1,sync:function(args){return Array.from(args[0]).map((item=>evaluateSync(item)))},async:function(args,resolve,reject){const items=Array.from(args[0]);if(0===items.length)return void Promise.resolve().then((()=>resolve([])));let count=0;const results=items.map((()=>{}));items.forEach(((item,i)=>{evaluateAsync(item,(val=>{results[i]=val,count+=1,count===results.length&&resolve(results);}),reject);}));}}),race:buildOperation({name:"race",arity:1,sync:function(args){const items=Array.from(args[0]);if(0===items.length)throw makeError("Must race at least 1 item","GENSYNC_RACE_NONEMPTY");return evaluateSync(items[0])},async:function(args,resolve,reject){const items=Array.from(args[0]);if(0===items.length)throw makeError("Must race at least 1 item","GENSYNC_RACE_NONEMPTY");for(const item of items)evaluateAsync(item,resolve,reject);}})});},"./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json");},"./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js":module=>{module.exports=(flag,argv=process.argv)=>{const prefix=flag.startsWith("-")?"":1===flag.length?"-":"--",position=argv.indexOf(prefix+flag),terminatorPosition=argv.indexOf("--");return -1!==position&&(-1===terminatorPosition||position<terminatorPosition)};},"./node_modules/.pnpm/jsesc@2.5.2/node_modules/jsesc/jsesc.js":module=>{const object={},hasOwnProperty=object.hasOwnProperty,forOwn=(object,callback)=>{for(const key in object)hasOwnProperty.call(object,key)&&callback(key,object[key]);},toString=object.toString,isArray=Array.isArray,isBuffer=Buffer.isBuffer,singleEscapes={'"':'\\"',"'":"\\'","\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t"},regexSingleEscape=/["'\\\b\f\n\r\t]/,regexDigit=/[0-9]/,regexWhitelist=/[ !#-&\(-\[\]-_a-~]/,jsesc=(argument,options)=>{const increaseIndentation=()=>{oldIndent=indent,++options.indentLevel,indent=options.indent.repeat(options.indentLevel);},defaults={escapeEverything:!1,minimal:!1,isScriptContext:!1,quotes:"single",wrap:!1,es6:!1,json:!1,compact:!0,lowercaseHex:!1,numbers:"decimal",indent:"\t",indentLevel:0,__inline1__:!1,__inline2__:!1},json=options&&options.json;var destination,source;json&&(defaults.quotes="double",defaults.wrap=!0),destination=defaults,"single"!=(options=(source=options)?(forOwn(source,((key,value)=>{destination[key]=value;})),destination):destination).quotes&&"double"!=options.quotes&&"backtick"!=options.quotes&&(options.quotes="single");const quote="double"==options.quotes?'"':"backtick"==options.quotes?"`":"'",compact=options.compact,lowercaseHex=options.lowercaseHex;let indent=options.indent.repeat(options.indentLevel),oldIndent="";const inline1=options.__inline1__,inline2=options.__inline2__,newLine=compact?"":"\n";let result,isEmpty=!0;const useBinNumbers="binary"==options.numbers,useOctNumbers="octal"==options.numbers,useDecNumbers="decimal"==options.numbers,useHexNumbers="hexadecimal"==options.numbers;if(json&&argument&&(value=>"function"==typeof value)(argument.toJSON)&&(argument=argument.toJSON()),!(value=>"string"==typeof value||"[object String]"==toString.call(value))(argument)){if((value=>"[object Map]"==toString.call(value))(argument))return 0==argument.size?"new Map()":(compact||(options.__inline1__=!0,options.__inline2__=!1),"new Map("+jsesc(Array.from(argument),options)+")");if((value=>"[object Set]"==toString.call(value))(argument))return 0==argument.size?"new Set()":"new Set("+jsesc(Array.from(argument),options)+")";if(isBuffer(argument))return 0==argument.length?"Buffer.from([])":"Buffer.from("+jsesc(Array.from(argument),options)+")";if(isArray(argument))return result=[],options.wrap=!0,inline1&&(options.__inline1__=!1,options.__inline2__=!0),inline2||increaseIndentation(),((array,callback)=>{const length=array.length;let index=-1;for(;++index<length;)callback(array[index]);})(argument,(value=>{isEmpty=!1,inline2&&(options.__inline2__=!1),result.push((compact||inline2?"":indent)+jsesc(value,options));})),isEmpty?"[]":inline2?"["+result.join(", ")+"]":"["+newLine+result.join(","+newLine)+newLine+(compact?"":oldIndent)+"]";if(!(value=>"number"==typeof value||"[object Number]"==toString.call(value))(argument))return (value=>"[object Object]"==toString.call(value))(argument)?(result=[],options.wrap=!0,increaseIndentation(),forOwn(argument,((key,value)=>{isEmpty=!1,result.push((compact?"":indent)+jsesc(key,options)+":"+(compact?"":" ")+jsesc(value,options));})),isEmpty?"{}":"{"+newLine+result.join(","+newLine)+newLine+(compact?"":oldIndent)+"}"):json?JSON.stringify(argument)||"null":String(argument);if(json)return JSON.stringify(argument);if(useDecNumbers)return String(argument);if(useHexNumbers){let hexadecimal=argument.toString(16);return lowercaseHex||(hexadecimal=hexadecimal.toUpperCase()),"0x"+hexadecimal}if(useBinNumbers)return "0b"+argument.toString(2);if(useOctNumbers)return "0o"+argument.toString(8)}const string=argument;let index=-1;const length=string.length;for(result="";++index<length;){const character=string.charAt(index);if(options.es6){const first=string.charCodeAt(index);if(first>=55296&&first<=56319&&length>index+1){const second=string.charCodeAt(index+1);if(second>=56320&&second<=57343){let hexadecimal=(1024*(first-55296)+second-56320+65536).toString(16);lowercaseHex||(hexadecimal=hexadecimal.toUpperCase()),result+="\\u{"+hexadecimal+"}",++index;continue}}}if(!options.escapeEverything){if(regexWhitelist.test(character)){result+=character;continue}if('"'==character){result+=quote==character?'\\"':character;continue}if("`"==character){result+=quote==character?"\\`":character;continue}if("'"==character){result+=quote==character?"\\'":character;continue}}if("\0"==character&&!json&&!regexDigit.test(string.charAt(index+1))){result+="\\0";continue}if(regexSingleEscape.test(character)){result+=singleEscapes[character];continue}const charCode=character.charCodeAt(0);if(options.minimal&&8232!=charCode&&8233!=charCode){result+=character;continue}let hexadecimal=charCode.toString(16);lowercaseHex||(hexadecimal=hexadecimal.toUpperCase());const longhand=hexadecimal.length>2||json,escaped="\\"+(longhand?"u":"x")+("0000"+hexadecimal).slice(longhand?-4:-2);result+=escaped;}return options.wrap&&(result=quote+result+quote),"`"==quote&&(result=result.replace(/\$\{/g,"\\${")),options.isScriptContext?result.replace(/<\/(script|style)/gi,"<\\/$1").replace(/<!--/g,json?"\\u003C!--":"\\x3C!--"):result};jsesc.version="2.5.2",module.exports=jsesc;},"./node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js":module=>{var s=1e3,m=60*s,h=60*m,d=24*h,w=7*d,y=365.25*d;function plural(ms,msAbs,n,name){var isPlural=msAbs>=1.5*n;return Math.round(ms/n)+" "+name+(isPlural?"s":"")}module.exports=function(val,options){options=options||{};var type=typeof val;if("string"===type&&val.length>0)return function(str){if((str=String(str)).length>100)return;var match=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);if(!match)return;var n=parseFloat(match[1]);switch((match[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*y;case"weeks":case"week":case"w":return n*w;case"days":case"day":case"d":return n*d;case"hours":case"hour":case"hrs":case"hr":case"h":return n*h;case"minutes":case"minute":case"mins":case"min":case"m":return n*m;case"seconds":case"second":case"secs":case"sec":case"s":return n*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}(val);if("number"===type&&isFinite(val))return options.long?function(ms){var msAbs=Math.abs(ms);if(msAbs>=d)return plural(ms,msAbs,d,"day");if(msAbs>=h)return plural(ms,msAbs,h,"hour");if(msAbs>=m)return plural(ms,msAbs,m,"minute");if(msAbs>=s)return plural(ms,msAbs,s,"second");return ms+" ms"}(val):function(ms){var msAbs=Math.abs(ms);if(msAbs>=d)return Math.round(ms/d)+"d";if(msAbs>=h)return Math.round(ms/h)+"h";if(msAbs>=m)return Math.round(ms/m)+"m";if(msAbs>=s)return Math.round(ms/s)+"s";return ms+"ms"}(val);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(val))};},"./node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js":(module,exports)=>{var debug;exports=module.exports=SemVer,debug="object"==typeof process&&process.env&&({}).NODE_DEBUG&&/\bsemver\b/i.test(({}).NODE_DEBUG)?function(){var args=Array.prototype.slice.call(arguments,0);args.unshift("SEMVER"),console.log.apply(console,args);}:function(){},exports.SEMVER_SPEC_VERSION="2.0.0";var MAX_LENGTH=256,MAX_SAFE_INTEGER=Number.MAX_SAFE_INTEGER||9007199254740991,re=exports.re=[],src=exports.src=[],t=exports.tokens={},R=0;function tok(n){t[n]=R++;}tok("NUMERICIDENTIFIER"),src[t.NUMERICIDENTIFIER]="0|[1-9]\\d*",tok("NUMERICIDENTIFIERLOOSE"),src[t.NUMERICIDENTIFIERLOOSE]="[0-9]+",tok("NONNUMERICIDENTIFIER"),src[t.NONNUMERICIDENTIFIER]="\\d*[a-zA-Z-][a-zA-Z0-9-]*",tok("MAINVERSION"),src[t.MAINVERSION]="("+src[t.NUMERICIDENTIFIER]+")\\.("+src[t.NUMERICIDENTIFIER]+")\\.("+src[t.NUMERICIDENTIFIER]+")",tok("MAINVERSIONLOOSE"),src[t.MAINVERSIONLOOSE]="("+src[t.NUMERICIDENTIFIERLOOSE]+")\\.("+src[t.NUMERICIDENTIFIERLOOSE]+")\\.("+src[t.NUMERICIDENTIFIERLOOSE]+")",tok("PRERELEASEIDENTIFIER"),src[t.PRERELEASEIDENTIFIER]="(?:"+src[t.NUMERICIDENTIFIER]+"|"+src[t.NONNUMERICIDENTIFIER]+")",tok("PRERELEASEIDENTIFIERLOOSE"),src[t.PRERELEASEIDENTIFIERLOOSE]="(?:"+src[t.NUMERICIDENTIFIERLOOSE]+"|"+src[t.NONNUMERICIDENTIFIER]+")",tok("PRERELEASE"),src[t.PRERELEASE]="(?:-("+src[t.PRERELEASEIDENTIFIER]+"(?:\\."+src[t.PRERELEASEIDENTIFIER]+")*))",tok("PRERELEASELOOSE"),src[t.PRERELEASELOOSE]="(?:-?("+src[t.PRERELEASEIDENTIFIERLOOSE]+"(?:\\."+src[t.PRERELEASEIDENTIFIERLOOSE]+")*))",tok("BUILDIDENTIFIER"),src[t.BUILDIDENTIFIER]="[0-9A-Za-z-]+",tok("BUILD"),src[t.BUILD]="(?:\\+("+src[t.BUILDIDENTIFIER]+"(?:\\."+src[t.BUILDIDENTIFIER]+")*))",tok("FULL"),tok("FULLPLAIN"),src[t.FULLPLAIN]="v?"+src[t.MAINVERSION]+src[t.PRERELEASE]+"?"+src[t.BUILD]+"?",src[t.FULL]="^"+src[t.FULLPLAIN]+"$",tok("LOOSEPLAIN"),src[t.LOOSEPLAIN]="[v=\\s]*"+src[t.MAINVERSIONLOOSE]+src[t.PRERELEASELOOSE]+"?"+src[t.BUILD]+"?",tok("LOOSE"),src[t.LOOSE]="^"+src[t.LOOSEPLAIN]+"$",tok("GTLT"),src[t.GTLT]="((?:<|>)?=?)",tok("XRANGEIDENTIFIERLOOSE"),src[t.XRANGEIDENTIFIERLOOSE]=src[t.NUMERICIDENTIFIERLOOSE]+"|x|X|\\*",tok("XRANGEIDENTIFIER"),src[t.XRANGEIDENTIFIER]=src[t.NUMERICIDENTIFIER]+"|x|X|\\*",tok("XRANGEPLAIN"),src[t.XRANGEPLAIN]="[v=\\s]*("+src[t.XRANGEIDENTIFIER]+")(?:\\.("+src[t.XRANGEIDENTIFIER]+")(?:\\.("+src[t.XRANGEIDENTIFIER]+")(?:"+src[t.PRERELEASE]+")?"+src[t.BUILD]+"?)?)?",tok("XRANGEPLAINLOOSE"),src[t.XRANGEPLAINLOOSE]="[v=\\s]*("+src[t.XRANGEIDENTIFIERLOOSE]+")(?:\\.("+src[t.XRANGEIDENTIFIERLOOSE]+")(?:\\.("+src[t.XRANGEIDENTIFIERLOOSE]+")(?:"+src[t.PRERELEASELOOSE]+")?"+src[t.BUILD]+"?)?)?",tok("XRANGE"),src[t.XRANGE]="^"+src[t.GTLT]+"\\s*"+src[t.XRANGEPLAIN]+"$",tok("XRANGELOOSE"),src[t.XRANGELOOSE]="^"+src[t.GTLT]+"\\s*"+src[t.XRANGEPLAINLOOSE]+"$",tok("COERCE"),src[t.COERCE]="(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])",tok("COERCERTL"),re[t.COERCERTL]=new RegExp(src[t.COERCE],"g"),tok("LONETILDE"),src[t.LONETILDE]="(?:~>?)",tok("TILDETRIM"),src[t.TILDETRIM]="(\\s*)"+src[t.LONETILDE]+"\\s+",re[t.TILDETRIM]=new RegExp(src[t.TILDETRIM],"g");tok("TILDE"),src[t.TILDE]="^"+src[t.LONETILDE]+src[t.XRANGEPLAIN]+"$",tok("TILDELOOSE"),src[t.TILDELOOSE]="^"+src[t.LONETILDE]+src[t.XRANGEPLAINLOOSE]+"$",tok("LONECARET"),src[t.LONECARET]="(?:\\^)",tok("CARETTRIM"),src[t.CARETTRIM]="(\\s*)"+src[t.LONECARET]+"\\s+",re[t.CARETTRIM]=new RegExp(src[t.CARETTRIM],"g");tok("CARET"),src[t.CARET]="^"+src[t.LONECARET]+src[t.XRANGEPLAIN]+"$",tok("CARETLOOSE"),src[t.CARETLOOSE]="^"+src[t.LONECARET]+src[t.XRANGEPLAINLOOSE]+"$",tok("COMPARATORLOOSE"),src[t.COMPARATORLOOSE]="^"+src[t.GTLT]+"\\s*("+src[t.LOOSEPLAIN]+")$|^$",tok("COMPARATOR"),src[t.COMPARATOR]="^"+src[t.GTLT]+"\\s*("+src[t.FULLPLAIN]+")$|^$",tok("COMPARATORTRIM"),src[t.COMPARATORTRIM]="(\\s*)"+src[t.GTLT]+"\\s*("+src[t.LOOSEPLAIN]+"|"+src[t.XRANGEPLAIN]+")",re[t.COMPARATORTRIM]=new RegExp(src[t.COMPARATORTRIM],"g");tok("HYPHENRANGE"),src[t.HYPHENRANGE]="^\\s*("+src[t.XRANGEPLAIN]+")\\s+-\\s+("+src[t.XRANGEPLAIN]+")\\s*$",tok("HYPHENRANGELOOSE"),src[t.HYPHENRANGELOOSE]="^\\s*("+src[t.XRANGEPLAINLOOSE]+")\\s+-\\s+("+src[t.XRANGEPLAINLOOSE]+")\\s*$",tok("STAR"),src[t.STAR]="(<|>)?=?\\s*\\*";for(var i=0;i<R;i++)debug(i,src[i]),re[i]||(re[i]=new RegExp(src[i]));function parse(version,options){if(options&&"object"==typeof options||(options={loose:!!options,includePrerelease:!1}),version instanceof SemVer)return version;if("string"!=typeof version)return null;if(version.length>MAX_LENGTH)return null;if(!(options.loose?re[t.LOOSE]:re[t.FULL]).test(version))return null;try{return new SemVer(version,options)}catch(er){return null}}function SemVer(version,options){if(options&&"object"==typeof options||(options={loose:!!options,includePrerelease:!1}),version instanceof SemVer){if(version.loose===options.loose)return version;version=version.version;}else if("string"!=typeof version)throw new TypeError("Invalid Version: "+version);if(version.length>MAX_LENGTH)throw new TypeError("version is longer than "+MAX_LENGTH+" characters");if(!(this instanceof SemVer))return new SemVer(version,options);debug("SemVer",version,options),this.options=options,this.loose=!!options.loose;var m=version.trim().match(options.loose?re[t.LOOSE]:re[t.FULL]);if(!m)throw new TypeError("Invalid Version: "+version);if(this.raw=version,this.major=+m[1],this.minor=+m[2],this.patch=+m[3],this.major>MAX_SAFE_INTEGER||this.major<0)throw new TypeError("Invalid major version");if(this.minor>MAX_SAFE_INTEGER||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>MAX_SAFE_INTEGER||this.patch<0)throw new TypeError("Invalid patch version");m[4]?this.prerelease=m[4].split(".").map((function(id){if(/^[0-9]+$/.test(id)){var num=+id;if(num>=0&&num<MAX_SAFE_INTEGER)return num}return id})):this.prerelease=[],this.build=m[5]?m[5].split("."):[],this.format();}exports.parse=parse,exports.valid=function(version,options){var v=parse(version,options);return v?v.version:null},exports.clean=function(version,options){var s=parse(version.trim().replace(/^[=v]+/,""),options);return s?s.version:null},exports.SemVer=SemVer,SemVer.prototype.format=function(){return this.version=this.major+"."+this.minor+"."+this.patch,this.prerelease.length&&(this.version+="-"+this.prerelease.join(".")),this.version},SemVer.prototype.toString=function(){return this.version},SemVer.prototype.compare=function(other){return debug("SemVer.compare",this.version,this.options,other),other instanceof SemVer||(other=new SemVer(other,this.options)),this.compareMain(other)||this.comparePre(other)},SemVer.prototype.compareMain=function(other){return other instanceof SemVer||(other=new SemVer(other,this.options)),compareIdentifiers(this.major,other.major)||compareIdentifiers(this.minor,other.minor)||compareIdentifiers(this.patch,other.patch)},SemVer.prototype.comparePre=function(other){if(other instanceof SemVer||(other=new SemVer(other,this.options)),this.prerelease.length&&!other.prerelease.length)return -1;if(!this.prerelease.length&&other.prerelease.length)return 1;if(!this.prerelease.length&&!other.prerelease.length)return 0;var i=0;do{var a=this.prerelease[i],b=other.prerelease[i];if(debug("prerelease compare",i,a,b),void 0===a&&void 0===b)return 0;if(void 0===b)return 1;if(void 0===a)return -1;if(a!==b)return compareIdentifiers(a,b)}while(++i)},SemVer.prototype.compareBuild=function(other){other instanceof SemVer||(other=new SemVer(other,this.options));var i=0;do{var a=this.build[i],b=other.build[i];if(debug("prerelease compare",i,a,b),void 0===a&&void 0===b)return 0;if(void 0===b)return 1;if(void 0===a)return -1;if(a!==b)return compareIdentifiers(a,b)}while(++i)},SemVer.prototype.inc=function(release,identifier){switch(release){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",identifier);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",identifier);break;case"prepatch":this.prerelease.length=0,this.inc("patch",identifier),this.inc("pre",identifier);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",identifier),this.inc("pre",identifier);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else {for(var i=this.prerelease.length;--i>=0;)"number"==typeof this.prerelease[i]&&(this.prerelease[i]++,i=-2);-1===i&&this.prerelease.push(0);}identifier&&(this.prerelease[0]===identifier?isNaN(this.prerelease[1])&&(this.prerelease=[identifier,0]):this.prerelease=[identifier,0]);break;default:throw new Error("invalid increment argument: "+release)}return this.format(),this.raw=this.version,this},exports.inc=function(version,release,loose,identifier){"string"==typeof loose&&(identifier=loose,loose=void 0);try{return new SemVer(version,loose).inc(release,identifier).version}catch(er){return null}},exports.diff=function(version1,version2){if(eq(version1,version2))return null;var v1=parse(version1),v2=parse(version2),prefix="";if(v1.prerelease.length||v2.prerelease.length){prefix="pre";var defaultResult="prerelease";}for(var key in v1)if(("major"===key||"minor"===key||"patch"===key)&&v1[key]!==v2[key])return prefix+key;return defaultResult},exports.compareIdentifiers=compareIdentifiers;var numeric=/^[0-9]+$/;function compareIdentifiers(a,b){var anum=numeric.test(a),bnum=numeric.test(b);return anum&&bnum&&(a=+a,b=+b),a===b?0:anum&&!bnum?-1:bnum&&!anum?1:a<b?-1:1}function compare(a,b,loose){return new SemVer(a,loose).compare(new SemVer(b,loose))}function gt(a,b,loose){return compare(a,b,loose)>0}function lt(a,b,loose){return compare(a,b,loose)<0}function eq(a,b,loose){return 0===compare(a,b,loose)}function neq(a,b,loose){return 0!==compare(a,b,loose)}function gte(a,b,loose){return compare(a,b,loose)>=0}function lte(a,b,loose){return compare(a,b,loose)<=0}function cmp(a,op,b,loose){switch(op){case"===":return "object"==typeof a&&(a=a.version),"object"==typeof b&&(b=b.version),a===b;case"!==":return "object"==typeof a&&(a=a.version),"object"==typeof b&&(b=b.version),a!==b;case"":case"=":case"==":return eq(a,b,loose);case"!=":return neq(a,b,loose);case">":return gt(a,b,loose);case">=":return gte(a,b,loose);case"<":return lt(a,b,loose);case"<=":return lte(a,b,loose);default:throw new TypeError("Invalid operator: "+op)}}function Comparator(comp,options){if(options&&"object"==typeof options||(options={loose:!!options,includePrerelease:!1}),comp instanceof Comparator){if(comp.loose===!!options.loose)return comp;comp=comp.value;}if(!(this instanceof Comparator))return new Comparator(comp,options);debug("comparator",comp,options),this.options=options,this.loose=!!options.loose,this.parse(comp),this.semver===ANY?this.value="":this.value=this.operator+this.semver.version,debug("comp",this);}exports.rcompareIdentifiers=function(a,b){return compareIdentifiers(b,a)},exports.major=function(a,loose){return new SemVer(a,loose).major},exports.minor=function(a,loose){return new SemVer(a,loose).minor},exports.patch=function(a,loose){return new SemVer(a,loose).patch},exports.compare=compare,exports.compareLoose=function(a,b){return compare(a,b,!0)},exports.compareBuild=function(a,b,loose){var versionA=new SemVer(a,loose),versionB=new SemVer(b,loose);return versionA.compare(versionB)||versionA.compareBuild(versionB)},exports.rcompare=function(a,b,loose){return compare(b,a,loose)},exports.sort=function(list,loose){return list.sort((function(a,b){return exports.compareBuild(a,b,loose)}))},exports.rsort=function(list,loose){return list.sort((function(a,b){return exports.compareBuild(b,a,loose)}))},exports.gt=gt,exports.lt=lt,exports.eq=eq,exports.neq=neq,exports.gte=gte,exports.lte=lte,exports.cmp=cmp,exports.Comparator=Comparator;var ANY={};function Range(range,options){if(options&&"object"==typeof options||(options={loose:!!options,includePrerelease:!1}),range instanceof Range)return range.loose===!!options.loose&&range.includePrerelease===!!options.includePrerelease?range:new Range(range.raw,options);if(range instanceof Comparator)return new Range(range.value,options);if(!(this instanceof Range))return new Range(range,options);if(this.options=options,this.loose=!!options.loose,this.includePrerelease=!!options.includePrerelease,this.raw=range,this.set=range.split(/\s*\|\|\s*/).map((function(range){return this.parseRange(range.trim())}),this).filter((function(c){return c.length})),!this.set.length)throw new TypeError("Invalid SemVer Range: "+range);this.format();}function isSatisfiable(comparators,options){for(var result=!0,remainingComparators=comparators.slice(),testComparator=remainingComparators.pop();result&&remainingComparators.length;)result=remainingComparators.every((function(otherComparator){return testComparator.intersects(otherComparator,options)})),testComparator=remainingComparators.pop();return result}function isX(id){return !id||"x"===id.toLowerCase()||"*"===id}function hyphenReplace($0,from,fM,fm,fp,fpr,fb,to,tM,tm,tp,tpr,tb){return ((from=isX(fM)?"":isX(fm)?">="+fM+".0.0":isX(fp)?">="+fM+"."+fm+".0":">="+from)+" "+(to=isX(tM)?"":isX(tm)?"<"+(+tM+1)+".0.0":isX(tp)?"<"+tM+"."+(+tm+1)+".0":tpr?"<="+tM+"."+tm+"."+tp+"-"+tpr:"<="+to)).trim()}function testSet(set,version,options){for(var i=0;i<set.length;i++)if(!set[i].test(version))return !1;if(version.prerelease.length&&!options.includePrerelease){for(i=0;i<set.length;i++)if(debug(set[i].semver),set[i].semver!==ANY&&set[i].semver.prerelease.length>0){var allowed=set[i].semver;if(allowed.major===version.major&&allowed.minor===version.minor&&allowed.patch===version.patch)return !0}return !1}return !0}function satisfies(version,range,options){try{range=new Range(range,options);}catch(er){return !1}return range.test(version)}function outside(version,range,hilo,options){var gtfn,ltefn,ltfn,comp,ecomp;switch(version=new SemVer(version,options),range=new Range(range,options),hilo){case">":gtfn=gt,ltefn=lte,ltfn=lt,comp=">",ecomp=">=";break;case"<":gtfn=lt,ltefn=gte,ltfn=gt,comp="<",ecomp="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(satisfies(version,range,options))return !1;for(var i=0;i<range.set.length;++i){var comparators=range.set[i],high=null,low=null;if(comparators.forEach((function(comparator){comparator.semver===ANY&&(comparator=new Comparator(">=0.0.0")),high=high||comparator,low=low||comparator,gtfn(comparator.semver,high.semver,options)?high=comparator:ltfn(comparator.semver,low.semver,options)&&(low=comparator);})),high.operator===comp||high.operator===ecomp)return !1;if((!low.operator||low.operator===comp)&&ltefn(version,low.semver))return !1;if(low.operator===ecomp&&ltfn(version,low.semver))return !1}return !0}Comparator.prototype.parse=function(comp){var r=this.options.loose?re[t.COMPARATORLOOSE]:re[t.COMPARATOR],m=comp.match(r);if(!m)throw new TypeError("Invalid comparator: "+comp);this.operator=void 0!==m[1]?m[1]:"","="===this.operator&&(this.operator=""),m[2]?this.semver=new SemVer(m[2],this.options.loose):this.semver=ANY;},Comparator.prototype.toString=function(){return this.value},Comparator.prototype.test=function(version){if(debug("Comparator.test",version,this.options.loose),this.semver===ANY||version===ANY)return !0;if("string"==typeof version)try{version=new SemVer(version,this.options);}catch(er){return !1}return cmp(version,this.operator,this.semver,this.options)},Comparator.prototype.intersects=function(comp,options){if(!(comp instanceof Comparator))throw new TypeError("a Comparator is required");var rangeTmp;if(options&&"object"==typeof options||(options={loose:!!options,includePrerelease:!1}),""===this.operator)return ""===this.value||(rangeTmp=new Range(comp.value,options),satisfies(this.value,rangeTmp,options));if(""===comp.operator)return ""===comp.value||(rangeTmp=new Range(this.value,options),satisfies(comp.semver,rangeTmp,options));var sameDirectionIncreasing=!(">="!==this.operator&&">"!==this.operator||">="!==comp.operator&&">"!==comp.operator),sameDirectionDecreasing=!("<="!==this.operator&&"<"!==this.operator||"<="!==comp.operator&&"<"!==comp.operator),sameSemVer=this.semver.version===comp.semver.version,differentDirectionsInclusive=!(">="!==this.operator&&"<="!==this.operator||">="!==comp.operator&&"<="!==comp.operator),oppositeDirectionsLessThan=cmp(this.semver,"<",comp.semver,options)&&(">="===this.operator||">"===this.operator)&&("<="===comp.operator||"<"===comp.operator),oppositeDirectionsGreaterThan=cmp(this.semver,">",comp.semver,options)&&("<="===this.operator||"<"===this.operator)&&(">="===comp.operator||">"===comp.operator);return sameDirectionIncreasing||sameDirectionDecreasing||sameSemVer&&differentDirectionsInclusive||oppositeDirectionsLessThan||oppositeDirectionsGreaterThan},exports.Range=Range,Range.prototype.format=function(){return this.range=this.set.map((function(comps){return comps.join(" ").trim()})).join("||").trim(),this.range},Range.prototype.toString=function(){return this.range},Range.prototype.parseRange=function(range){var loose=this.options.loose;range=range.trim();var hr=loose?re[t.HYPHENRANGELOOSE]:re[t.HYPHENRANGE];range=range.replace(hr,hyphenReplace),debug("hyphen replace",range),range=range.replace(re[t.COMPARATORTRIM],"$1$2$3"),debug("comparator trim",range,re[t.COMPARATORTRIM]),range=(range=(range=range.replace(re[t.TILDETRIM],"$1~")).replace(re[t.CARETTRIM],"$1^")).split(/\s+/).join(" ");var compRe=loose?re[t.COMPARATORLOOSE]:re[t.COMPARATOR],set=range.split(" ").map((function(comp){return function(comp,options){return debug("comp",comp,options),comp=function(comp,options){return comp.trim().split(/\s+/).map((function(comp){return function(comp,options){debug("caret",comp,options);var r=options.loose?re[t.CARETLOOSE]:re[t.CARET];return comp.replace(r,(function(_,M,m,p,pr){var ret;return debug("caret",comp,_,M,m,p,pr),isX(M)?ret="":isX(m)?ret=">="+M+".0.0 <"+(+M+1)+".0.0":isX(p)?ret="0"===M?">="+M+"."+m+".0 <"+M+"."+(+m+1)+".0":">="+M+"."+m+".0 <"+(+M+1)+".0.0":pr?(debug("replaceCaret pr",pr),ret="0"===M?"0"===m?">="+M+"."+m+"."+p+"-"+pr+" <"+M+"."+m+"."+(+p+1):">="+M+"."+m+"."+p+"-"+pr+" <"+M+"."+(+m+1)+".0":">="+M+"."+m+"."+p+"-"+pr+" <"+(+M+1)+".0.0"):(debug("no pr"),ret="0"===M?"0"===m?">="+M+"."+m+"."+p+" <"+M+"."+m+"."+(+p+1):">="+M+"."+m+"."+p+" <"+M+"."+(+m+1)+".0":">="+M+"."+m+"."+p+" <"+(+M+1)+".0.0"),debug("caret return",ret),ret}))}(comp,options)})).join(" ")}(comp,options),debug("caret",comp),comp=function(comp,options){return comp.trim().split(/\s+/).map((function(comp){return function(comp,options){var r=options.loose?re[t.TILDELOOSE]:re[t.TILDE];return comp.replace(r,(function(_,M,m,p,pr){var ret;return debug("tilde",comp,_,M,m,p,pr),isX(M)?ret="":isX(m)?ret=">="+M+".0.0 <"+(+M+1)+".0.0":isX(p)?ret=">="+M+"."+m+".0 <"+M+"."+(+m+1)+".0":pr?(debug("replaceTilde pr",pr),ret=">="+M+"."+m+"."+p+"-"+pr+" <"+M+"."+(+m+1)+".0"):ret=">="+M+"."+m+"."+p+" <"+M+"."+(+m+1)+".0",debug("tilde return",ret),ret}))}(comp,options)})).join(" ")}(comp,options),debug("tildes",comp),comp=function(comp,options){return debug("replaceXRanges",comp,options),comp.split(/\s+/).map((function(comp){return function(comp,options){comp=comp.trim();var r=options.loose?re[t.XRANGELOOSE]:re[t.XRANGE];return comp.replace(r,(function(ret,gtlt,M,m,p,pr){debug("xRange",comp,ret,gtlt,M,m,p,pr);var xM=isX(M),xm=xM||isX(m),xp=xm||isX(p),anyX=xp;return "="===gtlt&&anyX&&(gtlt=""),pr=options.includePrerelease?"-0":"",xM?ret=">"===gtlt||"<"===gtlt?"<0.0.0-0":"*":gtlt&&anyX?(xm&&(m=0),p=0,">"===gtlt?(gtlt=">=",xm?(M=+M+1,m=0,p=0):(m=+m+1,p=0)):"<="===gtlt&&(gtlt="<",xm?M=+M+1:m=+m+1),ret=gtlt+M+"."+m+"."+p+pr):xm?ret=">="+M+".0.0"+pr+" <"+(+M+1)+".0.0"+pr:xp&&(ret=">="+M+"."+m+".0"+pr+" <"+M+"."+(+m+1)+".0"+pr),debug("xRange return",ret),ret}))}(comp,options)})).join(" ")}(comp,options),debug("xrange",comp),comp=function(comp,options){return debug("replaceStars",comp,options),comp.trim().replace(re[t.STAR],"")}(comp,options),debug("stars",comp),comp}(comp,this.options)}),this).join(" ").split(/\s+/);return this.options.loose&&(set=set.filter((function(comp){return !!comp.match(compRe)}))),set=set.map((function(comp){return new Comparator(comp,this.options)}),this)},Range.prototype.intersects=function(range,options){if(!(range instanceof Range))throw new TypeError("a Range is required");return this.set.some((function(thisComparators){return isSatisfiable(thisComparators,options)&&range.set.some((function(rangeComparators){return isSatisfiable(rangeComparators,options)&&thisComparators.every((function(thisComparator){return rangeComparators.every((function(rangeComparator){return thisComparator.intersects(rangeComparator,options)}))}))}))}))},exports.toComparators=function(range,options){return new Range(range,options).set.map((function(comp){return comp.map((function(c){return c.value})).join(" ").trim().split(" ")}))},Range.prototype.test=function(version){if(!version)return !1;if("string"==typeof version)try{version=new SemVer(version,this.options);}catch(er){return !1}for(var i=0;i<this.set.length;i++)if(testSet(this.set[i],version,this.options))return !0;return !1},exports.satisfies=satisfies,exports.maxSatisfying=function(versions,range,options){var max=null,maxSV=null;try{var rangeObj=new Range(range,options);}catch(er){return null}return versions.forEach((function(v){rangeObj.test(v)&&(max&&-1!==maxSV.compare(v)||(maxSV=new SemVer(max=v,options)));})),max},exports.minSatisfying=function(versions,range,options){var min=null,minSV=null;try{var rangeObj=new Range(range,options);}catch(er){return null}return versions.forEach((function(v){rangeObj.test(v)&&(min&&1!==minSV.compare(v)||(minSV=new SemVer(min=v,options)));})),min},exports.minVersion=function(range,loose){range=new Range(range,loose);var minver=new SemVer("0.0.0");if(range.test(minver))return minver;if(minver=new SemVer("0.0.0-0"),range.test(minver))return minver;minver=null;for(var i=0;i<range.set.length;++i){range.set[i].forEach((function(comparator){var compver=new SemVer(comparator.semver.version);switch(comparator.operator){case">":0===compver.prerelease.length?compver.patch++:compver.prerelease.push(0),compver.raw=compver.format();case"":case">=":minver&&!gt(minver,compver)||(minver=compver);break;case"<":case"<=":break;default:throw new Error("Unexpected operation: "+comparator.operator)}}));}if(minver&&range.test(minver))return minver;return null},exports.validRange=function(range,options){try{return new Range(range,options).range||"*"}catch(er){return null}},exports.ltr=function(version,range,options){return outside(version,range,"<",options)},exports.gtr=function(version,range,options){return outside(version,range,">",options)},exports.outside=outside,exports.prerelease=function(version,options){var parsed=parse(version,options);return parsed&&parsed.prerelease.length?parsed.prerelease:null},exports.intersects=function(r1,r2,options){return r1=new Range(r1,options),r2=new Range(r2,options),r1.intersects(r2)},exports.coerce=function(version,options){if(version instanceof SemVer)return version;"number"==typeof version&&(version=String(version));if("string"!=typeof version)return null;var match=null;if((options=options||{}).rtl){for(var next;(next=re[t.COERCERTL].exec(version))&&(!match||match.index+match[0].length!==version.length);)match&&next.index+next[0].length===match.index+match[0].length||(match=next),re[t.COERCERTL].lastIndex=next.index+next[1].length+next[2].length;re[t.COERCERTL].lastIndex=-1;}else match=version.match(re[t.COERCE]);if(null===match)return null;return parse(match[2]+"."+(match[3]||"0")+"."+(match[4]||"0"),options)};},"./node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{const os=__webpack_require__("os"),tty=__webpack_require__("tty"),hasFlag=__webpack_require__("./node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"),{env}=process;let forceColor;function translateLevel(level){return 0!==level&&{level,hasBasic:!0,has256:level>=2,has16m:level>=3}}function supportsColor(haveStream,streamIsTTY){if(0===forceColor)return 0;if(hasFlag("color=16m")||hasFlag("color=full")||hasFlag("color=truecolor"))return 3;if(hasFlag("color=256"))return 2;if(haveStream&&!streamIsTTY&&void 0===forceColor)return 0;const min=forceColor||0;if("dumb"===env.TERM)return min;if("win32"===process.platform){const osRelease=os.release().split(".");return Number(osRelease[0])>=10&&Number(osRelease[2])>=10586?Number(osRelease[2])>=14931?3:2:1}if("CI"in env)return ["TRAVIS","CIRCLECI","APPVEYOR","GITLAB_CI","GITHUB_ACTIONS","BUILDKITE"].some((sign=>sign in env))||"codeship"===env.CI_NAME?1:min;if("TEAMCITY_VERSION"in env)return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION)?1:0;if("truecolor"===env.COLORTERM)return 3;if("TERM_PROGRAM"in env){const version=parseInt((env.TERM_PROGRAM_VERSION||"").split(".")[0],10);switch(env.TERM_PROGRAM){case"iTerm.app":return version>=3?3:2;case"Apple_Terminal":return 2}}return /-256(color)?$/i.test(env.TERM)?2:/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)||"COLORTERM"in env?1:min}hasFlag("no-color")||hasFlag("no-colors")||hasFlag("color=false")||hasFlag("color=never")?forceColor=0:(hasFlag("color")||hasFlag("colors")||hasFlag("color=true")||hasFlag("color=always"))&&(forceColor=1),"FORCE_COLOR"in env&&(forceColor="true"===env.FORCE_COLOR?1:"false"===env.FORCE_COLOR?0:0===env.FORCE_COLOR.length?1:Math.min(parseInt(env.FORCE_COLOR,10),3)),module.exports={supportsColor:function(stream){return translateLevel(supportsColor(stream,stream&&stream.isTTY))},stdout:translateLevel(supportsColor(!0,tty.isatty(1))),stderr:translateLevel(supportsColor(!0,tty.isatty(2)))};},"./node_modules/.pnpm/to-fast-properties@2.0.0/node_modules/to-fast-properties/index.js":module=>{let fastProto=null;function FastObject(o){if(null!==fastProto&&(fastProto.property,1)){const result=fastProto;return fastProto=FastObject.prototype=null,result}return fastProto=FastObject.prototype=null==o?Object.create(null):o,new FastObject}FastObject(),module.exports=function(o){return FastObject(o)};},"./stubs/babel-codeframe.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function codeFrameColumns(){return ""}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{codeFrameColumns:()=>codeFrameColumns});},"./stubs/helper-compilation-targets.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function getTargets(){return {}}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>getTargets});},assert:module=>{module.exports=require$$3;},fs:module=>{module.exports=require$$3;},module:module=>{module.exports=require$$3;},os:module=>{module.exports=require$$3;},path:module=>{module.exports=require$$3;},tty:module=>{module.exports=require$$3;},url:module=>{module.exports=require$$3;},util:module=>{module.exports=require$$3;},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.assertSimpleType=assertSimpleType,exports.makeStrongCache=makeStrongCache,exports.makeStrongCacheSync=function(handler){return synchronize(makeStrongCache(handler))},exports.makeWeakCache=makeWeakCache,exports.makeWeakCacheSync=function(handler){return synchronize(makeWeakCache(handler))};var _async=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/async.js"),_util=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/util.js");const synchronize=gen=>_gensync()(gen).sync;function*genTrue(){return !0}function makeWeakCache(handler){return makeCachedFunction(WeakMap,handler)}function makeStrongCache(handler){return makeCachedFunction(Map,handler)}function makeCachedFunction(CallCache,handler){const callCacheSync=new CallCache,callCacheAsync=new CallCache,futureCache=new CallCache;return function*(arg,data){const asyncContext=yield*(0, _async.isAsync)(),callCache=asyncContext?callCacheAsync:callCacheSync,cached=yield*function*(asyncContext,callCache,futureCache,arg,data){const cached=yield*getCachedValue(callCache,arg,data);if(cached.valid)return cached;if(asyncContext){const cached=yield*getCachedValue(futureCache,arg,data);if(cached.valid){return {valid:!0,value:yield*(0, _async.waitFor)(cached.value.promise)}}}return {valid:!1,value:null}}(asyncContext,callCache,futureCache,arg,data);if(cached.valid)return cached.value;const cache=new CacheConfigurator(data),handlerResult=handler(arg,cache);let finishLock,value;return value=(0, _util.isIterableIterator)(handlerResult)?yield*(0, _async.onFirstPause)(handlerResult,(()=>{finishLock=function(config,futureCache,arg){const finishLock=new Lock;return updateFunctionCache(futureCache,config,arg,finishLock),finishLock}(cache,futureCache,arg);})):handlerResult,updateFunctionCache(callCache,cache,arg,value),finishLock&&(futureCache.delete(arg),finishLock.release(value)),value}}function*getCachedValue(cache,arg,data){const cachedValue=cache.get(arg);if(cachedValue)for(const{value,valid}of cachedValue)if(yield*valid(data))return {valid:!0,value};return {valid:!1,value:null}}function updateFunctionCache(cache,config,arg,value){config.configured()||config.forever();let cachedValue=cache.get(arg);switch(config.deactivate(),config.mode()){case"forever":cachedValue=[{value,valid:genTrue}],cache.set(arg,cachedValue);break;case"invalidate":cachedValue=[{value,valid:config.validator()}],cache.set(arg,cachedValue);break;case"valid":cachedValue?cachedValue.push({value,valid:config.validator()}):(cachedValue=[{value,valid:config.validator()}],cache.set(arg,cachedValue));}}class CacheConfigurator{constructor(data){this._active=!0,this._never=!1,this._forever=!1,this._invalidate=!1,this._configured=!1,this._pairs=[],this._data=void 0,this._data=data;}simple(){return function(cache){function cacheFn(val){if("boolean"!=typeof val)return cache.using((()=>assertSimpleType(val())));val?cache.forever():cache.never();}return cacheFn.forever=()=>cache.forever(),cacheFn.never=()=>cache.never(),cacheFn.using=cb=>cache.using((()=>assertSimpleType(cb()))),cacheFn.invalidate=cb=>cache.invalidate((()=>assertSimpleType(cb()))),cacheFn}(this)}mode(){return this._never?"never":this._forever?"forever":this._invalidate?"invalidate":"valid"}forever(){if(!this._active)throw new Error("Cannot change caching after evaluation has completed.");if(this._never)throw new Error("Caching has already been configured with .never()");this._forever=!0,this._configured=!0;}never(){if(!this._active)throw new Error("Cannot change caching after evaluation has completed.");if(this._forever)throw new Error("Caching has already been configured with .forever()");this._never=!0,this._configured=!0;}using(handler){if(!this._active)throw new Error("Cannot change caching after evaluation has completed.");if(this._never||this._forever)throw new Error("Caching has already been configured with .never or .forever()");this._configured=!0;const key=handler(this._data),fn=(0, _async.maybeAsync)(handler,"You appear to be using an async cache handler, but Babel has been called synchronously");return (0, _async.isThenable)(key)?key.then((key=>(this._pairs.push([key,fn]),key))):(this._pairs.push([key,fn]),key)}invalidate(handler){return this._invalidate=!0,this.using(handler)}validator(){const pairs=this._pairs;return function*(data){for(const[key,fn]of pairs)if(key!==(yield*fn(data)))return !1;return !0}}deactivate(){this._active=!1;}configured(){return this._configured}}function assertSimpleType(value){if((0, _async.isThenable)(value))throw new Error("You appear to be using an async cache handler, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously handle your caching logic.");if(null!=value&&"string"!=typeof value&&"boolean"!=typeof value&&"number"!=typeof value)throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");return value}class Lock{constructor(){this.released=!1,this.promise=void 0,this._resolve=void 0,this.promise=new Promise((resolve=>{this._resolve=resolve;}));}release(value){this.released=!0,this._resolve(value);}}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/config-chain.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}function _debug(){const data=__webpack_require__("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");return _debug=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.buildPresetChain=function*(arg,context){const chain=yield*buildPresetChainWalker(arg,context);return chain?{plugins:dedupDescriptors(chain.plugins),presets:dedupDescriptors(chain.presets),options:chain.options.map((o=>normalizeOptions(o))),files:new Set}:null},exports.buildPresetChainWalker=void 0,exports.buildRootChain=function*(opts,context){let configReport,babelRcReport;const programmaticLogger=new _printer.ConfigPrinter,programmaticChain=yield*loadProgrammaticChain({options:opts,dirname:context.cwd},context,void 0,programmaticLogger);if(!programmaticChain)return null;const programmaticReport=yield*programmaticLogger.output();let configFile;"string"==typeof opts.configFile?configFile=yield*(0, _files.loadConfig)(opts.configFile,context.cwd,context.envName,context.caller):!1!==opts.configFile&&(configFile=yield*(0, _files.findRootConfig)(context.root,context.envName,context.caller));let{babelrc,babelrcRoots}=opts,babelrcRootsDirectory=context.cwd;const configFileChain=emptyChain(),configFileLogger=new _printer.ConfigPrinter;if(configFile){const validatedFile=validateConfigFile(configFile),result=yield*loadFileChain(validatedFile,context,void 0,configFileLogger);if(!result)return null;configReport=yield*configFileLogger.output(),void 0===babelrc&&(babelrc=validatedFile.options.babelrc),void 0===babelrcRoots&&(babelrcRootsDirectory=validatedFile.dirname,babelrcRoots=validatedFile.options.babelrcRoots),mergeChain(configFileChain,result);}let ignoreFile,babelrcFile,isIgnored=!1;const fileChain=emptyChain();if((!0===babelrc||void 0===babelrc)&&"string"==typeof context.filename){const pkgData=yield*(0, _files.findPackageData)(context.filename);if(pkgData&&function(context,pkgData,babelrcRoots,babelrcRootsDirectory){if("boolean"==typeof babelrcRoots)return babelrcRoots;const absoluteRoot=context.root;if(void 0===babelrcRoots)return -1!==pkgData.directories.indexOf(absoluteRoot);let babelrcPatterns=babelrcRoots;Array.isArray(babelrcPatterns)||(babelrcPatterns=[babelrcPatterns]);if(babelrcPatterns=babelrcPatterns.map((pat=>"string"==typeof pat?_path().resolve(babelrcRootsDirectory,pat):pat)),1===babelrcPatterns.length&&babelrcPatterns[0]===absoluteRoot)return -1!==pkgData.directories.indexOf(absoluteRoot);return babelrcPatterns.some((pat=>("string"==typeof pat&&(pat=(0, _patternToRegex.default)(pat,babelrcRootsDirectory)),pkgData.directories.some((directory=>matchPattern(pat,babelrcRootsDirectory,directory,context))))))}(context,pkgData,babelrcRoots,babelrcRootsDirectory)){if(({ignore:ignoreFile,config:babelrcFile}=yield*(0, _files.findRelativeConfig)(pkgData,context.envName,context.caller)),ignoreFile&&fileChain.files.add(ignoreFile.filepath),ignoreFile&&shouldIgnore(context,ignoreFile.ignore,null,ignoreFile.dirname)&&(isIgnored=!0),babelrcFile&&!isIgnored){const validatedFile=validateBabelrcFile(babelrcFile),babelrcLogger=new _printer.ConfigPrinter,result=yield*loadFileChain(validatedFile,context,void 0,babelrcLogger);result?(babelRcReport=yield*babelrcLogger.output(),mergeChain(fileChain,result)):isIgnored=!0;}babelrcFile&&isIgnored&&fileChain.files.add(babelrcFile.filepath);}}context.showConfig&&console.log(`Babel configs on "${context.filename}" (ascending priority):\n`+[configReport,babelRcReport,programmaticReport].filter((x=>!!x)).join("\n\n")+"\n-----End Babel configs-----");const chain=mergeChain(mergeChain(mergeChain(emptyChain(),configFileChain),fileChain),programmaticChain);return {plugins:isIgnored?[]:dedupDescriptors(chain.plugins),presets:isIgnored?[]:dedupDescriptors(chain.presets),options:isIgnored?[]:chain.options.map((o=>normalizeOptions(o))),fileHandling:isIgnored?"ignored":"transpile",ignore:ignoreFile||void 0,babelrc:babelrcFile||void 0,config:configFile||void 0,files:chain.files}};var _options=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/options.js"),_patternToRegex=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/pattern-to-regex.js"),_printer=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/printer.js"),_rewriteStackTrace=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"),_configError=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js"),_files=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/index.js"),_caching=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js"),_configDescriptors=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/config-descriptors.js");const debug=_debug()("babel:config:config-chain");const buildPresetChainWalker=makeChainWalker({root:preset=>loadPresetDescriptors(preset),env:(preset,envName)=>loadPresetEnvDescriptors(preset)(envName),overrides:(preset,index)=>loadPresetOverridesDescriptors(preset)(index),overridesEnv:(preset,index,envName)=>loadPresetOverridesEnvDescriptors(preset)(index)(envName),createLogger:()=>()=>{}});exports.buildPresetChainWalker=buildPresetChainWalker;const loadPresetDescriptors=(0, _caching.makeWeakCacheSync)((preset=>buildRootDescriptors(preset,preset.alias,_configDescriptors.createUncachedDescriptors))),loadPresetEnvDescriptors=(0, _caching.makeWeakCacheSync)((preset=>(0, _caching.makeStrongCacheSync)((envName=>buildEnvDescriptors(preset,preset.alias,_configDescriptors.createUncachedDescriptors,envName))))),loadPresetOverridesDescriptors=(0, _caching.makeWeakCacheSync)((preset=>(0, _caching.makeStrongCacheSync)((index=>buildOverrideDescriptors(preset,preset.alias,_configDescriptors.createUncachedDescriptors,index))))),loadPresetOverridesEnvDescriptors=(0, _caching.makeWeakCacheSync)((preset=>(0, _caching.makeStrongCacheSync)((index=>(0, _caching.makeStrongCacheSync)((envName=>buildOverrideEnvDescriptors(preset,preset.alias,_configDescriptors.createUncachedDescriptors,index,envName)))))));const validateConfigFile=(0, _caching.makeWeakCacheSync)((file=>({filepath:file.filepath,dirname:file.dirname,options:(0, _options.validate)("configfile",file.options,file.filepath)}))),validateBabelrcFile=(0, _caching.makeWeakCacheSync)((file=>({filepath:file.filepath,dirname:file.dirname,options:(0, _options.validate)("babelrcfile",file.options,file.filepath)}))),validateExtendFile=(0, _caching.makeWeakCacheSync)((file=>({filepath:file.filepath,dirname:file.dirname,options:(0, _options.validate)("extendsfile",file.options,file.filepath)}))),loadProgrammaticChain=makeChainWalker({root:input=>buildRootDescriptors(input,"base",_configDescriptors.createCachedDescriptors),env:(input,envName)=>buildEnvDescriptors(input,"base",_configDescriptors.createCachedDescriptors,envName),overrides:(input,index)=>buildOverrideDescriptors(input,"base",_configDescriptors.createCachedDescriptors,index),overridesEnv:(input,index,envName)=>buildOverrideEnvDescriptors(input,"base",_configDescriptors.createCachedDescriptors,index,envName),createLogger:(input,context,baseLogger)=>function(_,context,baseLogger){var _context$caller;if(!baseLogger)return ()=>{};return baseLogger.configure(context.showConfig,_printer.ChainFormatter.Programmatic,{callerName:null==(_context$caller=context.caller)?void 0:_context$caller.name})}(0,context,baseLogger)}),loadFileChainWalker=makeChainWalker({root:file=>loadFileDescriptors(file),env:(file,envName)=>loadFileEnvDescriptors(file)(envName),overrides:(file,index)=>loadFileOverridesDescriptors(file)(index),overridesEnv:(file,index,envName)=>loadFileOverridesEnvDescriptors(file)(index)(envName),createLogger:(file,context,baseLogger)=>function(filepath,context,baseLogger){if(!baseLogger)return ()=>{};return baseLogger.configure(context.showConfig,_printer.ChainFormatter.Config,{filepath})}(file.filepath,context,baseLogger)});function*loadFileChain(input,context,files,baseLogger){const chain=yield*loadFileChainWalker(input,context,files,baseLogger);return chain&&chain.files.add(input.filepath),chain}const loadFileDescriptors=(0, _caching.makeWeakCacheSync)((file=>buildRootDescriptors(file,file.filepath,_configDescriptors.createUncachedDescriptors))),loadFileEnvDescriptors=(0, _caching.makeWeakCacheSync)((file=>(0, _caching.makeStrongCacheSync)((envName=>buildEnvDescriptors(file,file.filepath,_configDescriptors.createUncachedDescriptors,envName))))),loadFileOverridesDescriptors=(0, _caching.makeWeakCacheSync)((file=>(0, _caching.makeStrongCacheSync)((index=>buildOverrideDescriptors(file,file.filepath,_configDescriptors.createUncachedDescriptors,index))))),loadFileOverridesEnvDescriptors=(0, _caching.makeWeakCacheSync)((file=>(0, _caching.makeStrongCacheSync)((index=>(0, _caching.makeStrongCacheSync)((envName=>buildOverrideEnvDescriptors(file,file.filepath,_configDescriptors.createUncachedDescriptors,index,envName)))))));function buildRootDescriptors({dirname,options},alias,descriptors){return descriptors(dirname,options,alias)}function buildEnvDescriptors({dirname,options},alias,descriptors,envName){const opts=options.env&&options.env[envName];return opts?descriptors(dirname,opts,`${alias}.env["${envName}"]`):null}function buildOverrideDescriptors({dirname,options},alias,descriptors,index){const opts=options.overrides&&options.overrides[index];if(!opts)throw new Error("Assertion failure - missing override");return descriptors(dirname,opts,`${alias}.overrides[${index}]`)}function buildOverrideEnvDescriptors({dirname,options},alias,descriptors,index,envName){const override=options.overrides&&options.overrides[index];if(!override)throw new Error("Assertion failure - missing override");const opts=override.env&&override.env[envName];return opts?descriptors(dirname,opts,`${alias}.overrides[${index}].env["${envName}"]`):null}function makeChainWalker({root,env,overrides,overridesEnv,createLogger}){return function*(input,context,files=new Set,baseLogger){const{dirname}=input,flattenedConfigs=[],rootOpts=root(input);if(configIsApplicable(rootOpts,dirname,context,input.filepath)){flattenedConfigs.push({config:rootOpts,envName:void 0,index:void 0});const envOpts=env(input,context.envName);envOpts&&configIsApplicable(envOpts,dirname,context,input.filepath)&&flattenedConfigs.push({config:envOpts,envName:context.envName,index:void 0}),(rootOpts.options.overrides||[]).forEach(((_,index)=>{const overrideOps=overrides(input,index);if(configIsApplicable(overrideOps,dirname,context,input.filepath)){flattenedConfigs.push({config:overrideOps,index,envName:void 0});const overrideEnvOpts=overridesEnv(input,index,context.envName);overrideEnvOpts&&configIsApplicable(overrideEnvOpts,dirname,context,input.filepath)&&flattenedConfigs.push({config:overrideEnvOpts,index,envName:context.envName});}}));}if(flattenedConfigs.some((({config:{options:{ignore,only}}})=>shouldIgnore(context,ignore,only,dirname))))return null;const chain=emptyChain(),logger=createLogger(input,context,baseLogger);for(const{config,index,envName}of flattenedConfigs){if(!(yield*mergeExtendsChain(chain,config.options,dirname,context,files,baseLogger)))return null;logger(config,index,envName),yield*mergeChainOpts(chain,config);}return chain}}function*mergeExtendsChain(chain,opts,dirname,context,files,baseLogger){if(void 0===opts.extends)return !0;const file=yield*(0, _files.loadConfig)(opts.extends,dirname,context.envName,context.caller);if(files.has(file))throw new Error(`Configuration cycle detected loading ${file.filepath}.\nFile already loaded following the config chain:\n`+Array.from(files,(file=>` - ${file.filepath}`)).join("\n"));files.add(file);const fileChain=yield*loadFileChain(validateExtendFile(file),context,files,baseLogger);return files.delete(file),!!fileChain&&(mergeChain(chain,fileChain),!0)}function mergeChain(target,source){target.options.push(...source.options),target.plugins.push(...source.plugins),target.presets.push(...source.presets);for(const file of source.files)target.files.add(file);return target}function*mergeChainOpts(target,{options,plugins,presets}){return target.options.push(options),target.plugins.push(...yield*plugins()),target.presets.push(...yield*presets()),target}function emptyChain(){return {options:[],presets:[],plugins:[],files:new Set}}function normalizeOptions(opts){const options=Object.assign({},opts);return delete options.extends,delete options.env,delete options.overrides,delete options.plugins,delete options.presets,delete options.passPerPreset,delete options.ignore,delete options.only,delete options.test,delete options.include,delete options.exclude,Object.prototype.hasOwnProperty.call(options,"sourceMap")&&(options.sourceMaps=options.sourceMap,delete options.sourceMap),options}function dedupDescriptors(items){const map=new Map,descriptors=[];for(const item of items)if("function"==typeof item.value){const fnKey=item.value;let nameMap=map.get(fnKey);nameMap||(nameMap=new Map,map.set(fnKey,nameMap));let desc=nameMap.get(item.name);desc?desc.value=item:(desc={value:item},descriptors.push(desc),item.ownPass||nameMap.set(item.name,desc));}else descriptors.push({value:item});return descriptors.reduce(((acc,desc)=>(acc.push(desc.value),acc)),[])}function configIsApplicable({options},dirname,context,configName){return (void 0===options.test||configFieldIsApplicable(context,options.test,dirname,configName))&&(void 0===options.include||configFieldIsApplicable(context,options.include,dirname,configName))&&(void 0===options.exclude||!configFieldIsApplicable(context,options.exclude,dirname,configName))}function configFieldIsApplicable(context,test,dirname,configName){return matchesPatterns(context,Array.isArray(test)?test:[test],dirname,configName)}function ignoreListReplacer(_key,value){return value instanceof RegExp?String(value):value}function shouldIgnore(context,ignore,only,dirname){if(ignore&&matchesPatterns(context,ignore,dirname)){var _context$filename;const message=`No config is applied to "${null!=(_context$filename=context.filename)?_context$filename:"(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(ignore,ignoreListReplacer)}\` from "${dirname}"`;return debug(message),context.showConfig&&console.log(message),!0}if(only&&!matchesPatterns(context,only,dirname)){var _context$filename2;const message=`No config is applied to "${null!=(_context$filename2=context.filename)?_context$filename2:"(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(only,ignoreListReplacer)}\` from "${dirname}"`;return debug(message),context.showConfig&&console.log(message),!0}return !1}function matchesPatterns(context,patterns,dirname,configName){return patterns.some((pattern=>matchPattern(pattern,dirname,context.filename,context,configName)))}function matchPattern(pattern,dirname,pathToTest,context,configName){if("function"==typeof pattern)return !!(0, _rewriteStackTrace.endHiddenCallStack)(pattern)(pathToTest,{dirname,envName:context.envName,caller:context.caller});if("string"!=typeof pathToTest)throw new _configError.default("Configuration contains string/RegExp pattern, but no filename was passed to Babel",configName);return "string"==typeof pattern&&(pattern=(0, _patternToRegex.default)(pattern,dirname)),pattern.test(pathToTest)}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/config-descriptors.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.createCachedDescriptors=function(dirname,options,alias){const{plugins,presets,passPerPreset}=options;return {options:optionsWithResolvedBrowserslistConfigFile(options,dirname),plugins:plugins?()=>createCachedPluginDescriptors(plugins,dirname)(alias):()=>handlerOf([]),presets:presets?()=>createCachedPresetDescriptors(presets,dirname)(alias)(!!passPerPreset):()=>handlerOf([])}},exports.createDescriptor=createDescriptor,exports.createUncachedDescriptors=function(dirname,options,alias){return {options:optionsWithResolvedBrowserslistConfigFile(options,dirname),plugins:(0, _functional.once)((()=>createPluginDescriptors(options.plugins||[],dirname,alias))),presets:(0, _functional.once)((()=>createPresetDescriptors(options.presets||[],dirname,alias,!!options.passPerPreset)))}};var _functional=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/functional.js"),_files=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/index.js"),_item=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/item.js"),_caching=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js"),_resolveTargets=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/resolve-targets.js");function*handlerOf(value){return value}function optionsWithResolvedBrowserslistConfigFile(options,dirname){return "string"==typeof options.browserslistConfigFile&&(options.browserslistConfigFile=(0, _resolveTargets.resolveBrowserslistConfigFile)(options.browserslistConfigFile,dirname)),options}const PRESET_DESCRIPTOR_CACHE=new WeakMap,createCachedPresetDescriptors=(0, _caching.makeWeakCacheSync)(((items,cache)=>{const dirname=cache.using((dir=>dir));return (0, _caching.makeStrongCacheSync)((alias=>(0, _caching.makeStrongCache)((function*(passPerPreset){return (yield*createPresetDescriptors(items,dirname,alias,passPerPreset)).map((desc=>loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE,desc)))}))))})),PLUGIN_DESCRIPTOR_CACHE=new WeakMap,createCachedPluginDescriptors=(0, _caching.makeWeakCacheSync)(((items,cache)=>{const dirname=cache.using((dir=>dir));return (0, _caching.makeStrongCache)((function*(alias){return (yield*createPluginDescriptors(items,dirname,alias)).map((desc=>loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE,desc)))}))})),DEFAULT_OPTIONS={};function loadCachedDescriptor(cache,desc){const{value,options=DEFAULT_OPTIONS}=desc;if(!1===options)return desc;let cacheByOptions=cache.get(value);cacheByOptions||(cacheByOptions=new WeakMap,cache.set(value,cacheByOptions));let possibilities=cacheByOptions.get(options);if(possibilities||(possibilities=[],cacheByOptions.set(options,possibilities)),-1===possibilities.indexOf(desc)){const matches=possibilities.filter((possibility=>{return b=desc,(a=possibility).name===b.name&&a.value===b.value&&a.options===b.options&&a.dirname===b.dirname&&a.alias===b.alias&&a.ownPass===b.ownPass&&(a.file&&a.file.request)===(b.file&&b.file.request)&&(a.file&&a.file.resolved)===(b.file&&b.file.resolved);var a,b;}));if(matches.length>0)return matches[0];possibilities.push(desc);}return desc}function*createPresetDescriptors(items,dirname,alias,passPerPreset){return yield*createDescriptors("preset",items,dirname,alias,passPerPreset)}function*createPluginDescriptors(items,dirname,alias){return yield*createDescriptors("plugin",items,dirname,alias)}function*createDescriptors(type,items,dirname,alias,ownPass){const descriptors=yield*_gensync().all(items.map(((item,index)=>createDescriptor(item,dirname,{type,alias:`${alias}$${index}`,ownPass:!!ownPass}))));return function(items){const map=new Map;for(const item of items){if("function"!=typeof item.value)continue;let nameMap=map.get(item.value);if(nameMap||(nameMap=new Set,map.set(item.value,nameMap)),nameMap.has(item.name)){const conflicts=items.filter((i=>i.value===item.value));throw new Error(["Duplicate plugin/preset detected.","If you'd like to use two separate instances of a plugin,","they need separate names, e.g.","","  plugins: [","    ['some-plugin', {}],","    ['some-plugin', {}, 'some unique name'],","  ]","","Duplicates detected are:",`${JSON.stringify(conflicts,null,2)}`].join("\n"))}nameMap.add(item.name);}}(descriptors),descriptors}function*createDescriptor(pair,dirname,{type,alias,ownPass}){const desc=(0, _item.getItemDescriptor)(pair);if(desc)return desc;let name,options,file,value=pair;Array.isArray(value)&&(3===value.length?[value,options,name]=value:[value,options]=value);let filepath=null;if("string"==typeof value){if("string"!=typeof type)throw new Error("To resolve a string-based item, the type of item must be given");const resolver="plugin"===type?_files.loadPlugin:_files.loadPreset,request=value;(({filepath,value}=yield*resolver(value,dirname))),file={request,resolved:filepath};}if(!value)throw new Error(`Unexpected falsy value: ${String(value)}`);if("object"==typeof value&&value.__esModule){if(!value.default)throw new Error("Must export a default export when using ES6 modules.");value=value.default;}if("object"!=typeof value&&"function"!=typeof value)throw new Error(`Unsupported format: ${typeof value}. Expected an object or a function.`);if(null!==filepath&&"object"==typeof value&&value)throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);return {name,alias:filepath||alias,value,options,dirname,ownPass,file}}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/configuration.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _debug(){const data=__webpack_require__("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");return _debug=function(){return data},data}function _fs(){const data=__webpack_require__("fs");return _fs=function(){return data},data}function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}function _json(){const data=__webpack_require__("./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs");return _json=function(){return data},data}function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.ROOT_CONFIG_FILENAMES=void 0,exports.findConfigUpwards=function(rootDir){let dirname=rootDir;for(;;){for(const filename of ROOT_CONFIG_FILENAMES)if(_fs().existsSync(_path().join(dirname,filename)))return dirname;const nextDir=_path().dirname(dirname);if(dirname===nextDir)break;dirname=nextDir;}return null},exports.findRelativeConfig=function*(packageData,envName,caller){let config=null,ignore=null;const dirname=_path().dirname(packageData.filepath);for(const loc of packageData.directories){var _packageData$pkg;if(!config)config=yield*loadOneConfig(RELATIVE_CONFIG_FILENAMES,loc,envName,caller,(null==(_packageData$pkg=packageData.pkg)?void 0:_packageData$pkg.dirname)===loc?packageToBabelConfig(packageData.pkg):null);if(!ignore){const ignoreLoc=_path().join(loc,BABELIGNORE_FILENAME);ignore=yield*readIgnoreConfig(ignoreLoc),ignore&&debug("Found ignore %o from %o.",ignore.filepath,dirname);}}return {config,ignore}},exports.findRootConfig=function(dirname,envName,caller){return loadOneConfig(ROOT_CONFIG_FILENAMES,dirname,envName,caller)},exports.loadConfig=function*(name,dirname,envName,caller){const filepath=(v=process.versions.node,w="8.9",v=v.split("."),w=w.split("."),+v[0]>+w[0]||v[0]==w[0]&&+v[1]>=+w[1]?__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").resolve:(r,{paths:[b]},M=__webpack_require__("module"))=>{let f=M._findPath(r,M._nodeModulePaths(b).concat(b));if(f)return f;throw f=new Error(`Cannot resolve module '${r}'`),f.code="MODULE_NOT_FOUND",f})(name,{paths:[dirname]}),conf=yield*readConfig(filepath,envName,caller);var v,w;if(!conf)throw new _configError.default("Config file contains no configuration data",filepath);return debug("Loaded config %o from %o.",name,dirname),conf},exports.resolveShowConfigPath=function*(dirname){const targetPath=({}).BABEL_SHOW_CONFIG_FOR;if(null!=targetPath){const absolutePath=_path().resolve(dirname,targetPath);if(!(yield*fs.stat(absolutePath)).isFile())throw new Error(`${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);return absolutePath}return null};var _caching=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js"),_configApi=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/config-api.js"),_utils=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/utils.js"),_moduleTypes=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/module-types.js"),_patternToRegex=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/pattern-to-regex.js"),_configError=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js"),fs=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/fs.js"),_rewriteStackTrace=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");const debug=_debug()("babel:config:loading:files:configuration"),ROOT_CONFIG_FILENAMES=["babel.config.js","babel.config.cjs","babel.config.mjs","babel.config.json","babel.config.cts"];exports.ROOT_CONFIG_FILENAMES=ROOT_CONFIG_FILENAMES;const RELATIVE_CONFIG_FILENAMES=[".babelrc",".babelrc.js",".babelrc.cjs",".babelrc.mjs",".babelrc.json",".babelrc.cts"],BABELIGNORE_FILENAME=".babelignore",LOADING_CONFIGS=new Set,readConfigCode=(0, _caching.makeStrongCache)((function*(filepath,cache){if(!_fs().existsSync(filepath))return cache.never(),null;if(LOADING_CONFIGS.has(filepath))return cache.never(),debug("Auto-ignoring usage of config %o.",filepath),{filepath,dirname:_path().dirname(filepath),options:{}};let options;try{LOADING_CONFIGS.add(filepath),options=yield*(0,_moduleTypes.default)(filepath,"You appear to be using a native ECMAScript module configuration file, which is only supported when running Babel asynchronously.");}finally{LOADING_CONFIGS.delete(filepath);}let assertCache=!1;if("function"==typeof options&&(yield*[],options=(0, _rewriteStackTrace.endHiddenCallStack)(options)((0, _configApi.makeConfigAPI)(cache)),assertCache=!0),!options||"object"!=typeof options||Array.isArray(options))throw new _configError.default("Configuration should be an exported JavaScript object.",filepath);if("function"==typeof options.then)throw new _configError.default("You appear to be using an async configuration, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously return your config.",filepath);return assertCache&&!cache.configured()&&function(filepath){throw new _configError.default('Caching was left unconfigured. Babel\'s plugins, presets, and .babelrc.js files can be configured\nfor various types of caching, using the first param of their handler functions:\n\nmodule.exports = function(api) {\n  // The API exposes the following:\n\n  // Cache the returned value forever and don\'t call this function again.\n  api.cache(true);\n\n  // Don\'t cache at all. Not recommended because it will be very slow.\n  api.cache(false);\n\n  // Cached based on the value of some function. If this function returns a value different from\n  // a previously-encountered value, the plugins will re-evaluate.\n  var env = api.cache(() => "production");\n\n  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for\n  // any possible NODE_ENV value that might come up during plugin execution.\n  var isProd = api.cache(() => "production" === "production");\n\n  // .cache(fn) will perform a linear search though instances to find the matching plugin based\n  // based on previous instantiated plugins. If you want to recreate the plugin and discard the\n  // previous instance whenever something changes, you may use:\n  var isProd = api.cache.invalidate(() => "production" === "production");\n\n  // Note, we also expose the following more-verbose versions of the above examples:\n  api.cache.forever(); // api.cache(true)\n  api.cache.never();   // api.cache(false)\n  api.cache.using(fn); // api.cache(fn)\n\n  // Return the value that will be cached.\n  return { };\n};',filepath)}(filepath),{filepath,dirname:_path().dirname(filepath),options}})),packageToBabelConfig=(0, _caching.makeWeakCacheSync)((file=>{const babel=file.options.babel;if(void 0===babel)return null;if("object"!=typeof babel||Array.isArray(babel)||null===babel)throw new _configError.default(".babel property must be an object",file.filepath);return {filepath:file.filepath,dirname:file.dirname,options:babel}})),readConfigJSON5=(0, _utils.makeStaticFileCache)(((filepath,content)=>{let options;try{options=_json().parse(content);}catch(err){throw new _configError.default(`Error while parsing config - ${err.message}`,filepath)}if(!options)throw new _configError.default("No config detected",filepath);if("object"!=typeof options)throw new _configError.default("Config returned typeof "+typeof options,filepath);if(Array.isArray(options))throw new _configError.default("Expected config object but found array",filepath);return delete options.$schema,{filepath,dirname:_path().dirname(filepath),options}})),readIgnoreConfig=(0, _utils.makeStaticFileCache)(((filepath,content)=>{const ignoreDir=_path().dirname(filepath),ignorePatterns=content.split("\n").map((line=>line.replace(/#(.*?)$/,"").trim())).filter((line=>!!line));for(const pattern of ignorePatterns)if("!"===pattern[0])throw new _configError.default("Negation of file paths is not supported.",filepath);return {filepath,dirname:_path().dirname(filepath),ignore:ignorePatterns.map((pattern=>(0, _patternToRegex.default)(pattern,ignoreDir)))}}));function*loadOneConfig(names,dirname,envName,caller,previousConfig=null){const config=(yield*_gensync().all(names.map((filename=>readConfig(_path().join(dirname,filename),envName,caller))))).reduce(((previousConfig,config)=>{if(config&&previousConfig)throw new _configError.default(`Multiple configuration files found. Please remove one:\n - ${_path().basename(previousConfig.filepath)}\n - ${config.filepath}\nfrom ${dirname}`);return config||previousConfig}),previousConfig);return config&&debug("Found configuration %o from %o.",config.filepath,dirname),config}function readConfig(filepath,envName,caller){switch(_path().extname(filepath)){case".js":case".cjs":case".mjs":case".cts":return readConfigCode(filepath,{envName,caller});default:return readConfigJSON5(filepath)}}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/import-meta-resolve.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(_x,_x2){return _resolve.apply(this,arguments)};var _importMetaResolve=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/vendor/import-meta-resolve.js");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value;}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw);}let import_;try{import_=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/import.cjs");}catch(_unused){}const importMetaResolveP=import_&&process.execArgv.includes("--experimental-import-meta-resolve")?import_("data:text/javascript,export default import.meta.resolve").then((m=>m.default||_importMetaResolve.resolve),(()=>_importMetaResolve.resolve)):Promise.resolve(_importMetaResolve.resolve);function _resolve(){var fn;return fn=function*(specifier,parent){return (yield importMetaResolveP)(specifier,parent)},_resolve=function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(void 0);}))},_resolve.apply(this,arguments)}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/import.cjs":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=function(filepath){return __webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files lazy recursive")(filepath)};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"ROOT_CONFIG_FILENAMES",{enumerable:!0,get:function(){return _configuration.ROOT_CONFIG_FILENAMES}}),Object.defineProperty(exports,"findConfigUpwards",{enumerable:!0,get:function(){return _configuration.findConfigUpwards}}),Object.defineProperty(exports,"findPackageData",{enumerable:!0,get:function(){return _package.findPackageData}}),Object.defineProperty(exports,"findRelativeConfig",{enumerable:!0,get:function(){return _configuration.findRelativeConfig}}),Object.defineProperty(exports,"findRootConfig",{enumerable:!0,get:function(){return _configuration.findRootConfig}}),Object.defineProperty(exports,"loadConfig",{enumerable:!0,get:function(){return _configuration.loadConfig}}),Object.defineProperty(exports,"loadPlugin",{enumerable:!0,get:function(){return plugins.loadPlugin}}),Object.defineProperty(exports,"loadPreset",{enumerable:!0,get:function(){return plugins.loadPreset}}),exports.resolvePreset=exports.resolvePlugin=void 0,Object.defineProperty(exports,"resolveShowConfigPath",{enumerable:!0,get:function(){return _configuration.resolveShowConfigPath}});var _package=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/package.js"),_configuration=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/configuration.js"),plugins=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/plugins.js");function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}const resolvePlugin=_gensync()(plugins.resolvePlugin).sync;exports.resolvePlugin=resolvePlugin;const resolvePreset=_gensync()(plugins.resolvePreset).sync;exports.resolvePreset=resolvePreset;},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/module-types.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function*(filepath,asyncError,fallbackToTranspiledModule=!1){switch(_path().extname(filepath)){case".cjs":return loadCjsDefault(filepath,fallbackToTranspiledModule);case".mjs":break;case".cts":return function(filepath){const ext=".cts",hasTsSupport=!!(__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[".ts"]||__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[".cts"]||__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[".mts"]);let handler;if(!hasTsSupport){const opts={babelrc:!1,configFile:!1,sourceType:"script",sourceMaps:"inline",presets:[[getTSPreset(filepath),Object.assign({disallowAmbiguousJSXLike:!0,allExtensions:!0,onlyRemoveTypeImports:!0,optimizeConstEnums:!0},{allowDeclareFields:!0})]]};handler=function(m,filename){return handler&&filename.endsWith(ext)?m._compile((0, _transformFile.transformFileSync)(filename,Object.assign({},opts,{filename})).code,filename):__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[".js"](m,filename)},__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext]=handler;}try{return (0,_rewriteStackTrace.endHiddenCallStack)(__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive"))(filepath)}finally{hasTsSupport||(__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext]===handler&&delete __webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").extensions[ext],handler=void 0);}}(filepath);default:try{return loadCjsDefault(filepath,fallbackToTranspiledModule)}catch(e){if("ERR_REQUIRE_ESM"!==e.code)throw e}}if(yield*(0, _async.isAsync)())return yield*(0, _async.waitFor)(function(_x){return _loadMjsDefault.apply(this,arguments)}(filepath));throw new _configError.default(asyncError,filepath)},exports.supportsESM=void 0;var _async=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/async.js");function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}function _url(){const data=__webpack_require__("url");return _url=function(){return data},data}function _semver(){const data=__webpack_require__("./node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js");return _semver=function(){return data},data}var _rewriteStackTrace=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"),_configError=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js"),_transformFile=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform-file.js");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value;}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw);}let import_;try{import_=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/import.cjs");}catch(_unused){}const supportsESM=_semver().satisfies(process.versions.node,"^12.17 || >=13.2");function loadCjsDefault(filepath,fallbackToTranspiledModule){const module=(0, _rewriteStackTrace.endHiddenCallStack)(__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive"))(filepath);return null!=module&&module.__esModule?module.default||(fallbackToTranspiledModule?module:void 0):module}function _loadMjsDefault(){var fn;return fn=function*(filepath){if(!import_)throw new _configError.default("Internal error: Native ECMAScript modules aren't supported by this platform.\n",filepath);return (yield (0, _rewriteStackTrace.endHiddenCallStack)(import_)((0, _url().pathToFileURL)(filepath))).default},_loadMjsDefault=function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(void 0);}))},_loadMjsDefault.apply(this,arguments)}function getTSPreset(filepath){try{return __webpack_require__("./node_modules/.pnpm/@babel+preset-typescript@7.21.0_@babel+core@7.21.3/node_modules/@babel/preset-typescript/lib/index.js")}catch(error){if("MODULE_NOT_FOUND"!==error.code)throw error;let message="You appear to be using a .cts file as Babel configuration, but the `@babel/preset-typescript` package was not found: please install it!";throw process.versions.pnp&&(message+='\nIf you are using Yarn Plug\'n\'Play, you may also need to add the following configuration to your .yarnrc.yml file:\n\npackageExtensions:\n\t"@babel/core@*":\n\t\tpeerDependencies:\n\t\t\t"@babel/preset-typescript": "*"\n'),new _configError.default(message,filepath)}}exports.supportsESM=supportsESM;},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/package.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.findPackageData=function*(filepath){let pkg=null;const directories=[];let isPackage=!0,dirname=_path().dirname(filepath);for(;!pkg&&"node_modules"!==_path().basename(dirname);){directories.push(dirname),pkg=yield*readConfigPackage(_path().join(dirname,PACKAGE_FILENAME));const nextLoc=_path().dirname(dirname);if(dirname===nextLoc){isPackage=!1;break}dirname=nextLoc;}return {filepath,directories,pkg,isPackage}};var _utils=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/utils.js"),_configError=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js");const PACKAGE_FILENAME="package.json",readConfigPackage=(0, _utils.makeStaticFileCache)(((filepath,content)=>{let options;try{options=JSON.parse(content);}catch(err){throw new _configError.default(`Error while parsing JSON - ${err.message}`,filepath)}if(!options)throw new Error(`${filepath}: No config detected`);if("object"!=typeof options)throw new _configError.default("Config returned typeof "+typeof options,filepath);if(Array.isArray(options))throw new _configError.default("Expected config object but found array",filepath);return {filepath,dirname:_path().dirname(filepath),options}}));},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/plugins.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _debug(){const data=__webpack_require__("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");return _debug=function(){return data},data}function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.loadPlugin=function*(name,dirname){const filepath=yield*resolvePlugin(name,dirname),value=yield*requireModule("plugin",filepath);return debug("Loaded plugin %o from %o.",name,dirname),{filepath,value}},exports.loadPreset=function*(name,dirname){const filepath=yield*resolvePreset(name,dirname),value=yield*requireModule("preset",filepath);return debug("Loaded preset %o from %o.",name,dirname),{filepath,value}},exports.resolvePlugin=resolvePlugin,exports.resolvePreset=resolvePreset;var _async=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/async.js"),_moduleTypes=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/module-types.js");function _url(){const data=__webpack_require__("url");return _url=function(){return data},data}var _importMetaResolve=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/import-meta-resolve.js");function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value;}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw);}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(void 0);}))}}const debug=_debug()("babel:config:loading:files:plugins"),EXACT_RE=/^module:/,BABEL_PLUGIN_PREFIX_RE=/^(?!@|module:|[^/]+\/|babel-plugin-)/,BABEL_PRESET_PREFIX_RE=/^(?!@|module:|[^/]+\/|babel-preset-)/,BABEL_PLUGIN_ORG_RE=/^(@babel\/)(?!plugin-|[^/]+\/)/,BABEL_PRESET_ORG_RE=/^(@babel\/)(?!preset-|[^/]+\/)/,OTHER_PLUGIN_ORG_RE=/^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/,OTHER_PRESET_ORG_RE=/^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/,OTHER_ORG_DEFAULT_RE=/^(@(?!babel$)[^/]+)$/;function*resolvePlugin(name,dirname){return yield*resolveStandardizedName("plugin",name,dirname)}function*resolvePreset(name,dirname){return yield*resolveStandardizedName("preset",name,dirname)}function standardizeName(type,name){if(_path().isAbsolute(name))return name;const isPreset="preset"===type;return name.replace(isPreset?BABEL_PRESET_PREFIX_RE:BABEL_PLUGIN_PREFIX_RE,`babel-${type}-`).replace(isPreset?BABEL_PRESET_ORG_RE:BABEL_PLUGIN_ORG_RE,`$1${type}-`).replace(isPreset?OTHER_PRESET_ORG_RE:OTHER_PLUGIN_ORG_RE,`$1babel-${type}-`).replace(OTHER_ORG_DEFAULT_RE,`$1/babel-${type}`).replace(EXACT_RE,"")}function*resolveAlternativesHelper(type,name){const standardizedName=standardizeName(type,name),{error,value}=yield standardizedName;if(!error)return value;if("MODULE_NOT_FOUND"!==error.code)throw error;standardizedName===name||(yield name).error||(error.message+=`\n- If you want to resolve "${name}", use "module:${name}"`),(yield standardizeName(type,"@babel/"+name)).error||(error.message+=`\n- Did you mean "@babel/${name}"?`);const oppositeType="preset"===type?"plugin":"preset";throw (yield standardizeName(oppositeType,name)).error||(error.message+=`\n- Did you accidentally pass a ${oppositeType} as a ${type}?`),error}function tryRequireResolve(id,{paths:[dirname]}){try{return {error:null,value:(v=process.versions.node,w="8.9",v=v.split("."),w=w.split("."),+v[0]>+w[0]||v[0]==w[0]&&+v[1]>=+w[1]?__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files sync recursive").resolve:(r,{paths:[b]},M=__webpack_require__("module"))=>{let f=M._findPath(r,M._nodeModulePaths(b).concat(b));if(f)return f;throw f=new Error(`Cannot resolve module '${r}'`),f.code="MODULE_NOT_FOUND",f})(id,{paths:[dirname]})}}catch(error){return {error,value:null}}var v,w;}function tryImportMetaResolve(_x,_x2){return _tryImportMetaResolve.apply(this,arguments)}function _tryImportMetaResolve(){return (_tryImportMetaResolve=_asyncToGenerator((function*(id,options){try{return {error:null,value:yield (0,_importMetaResolve.default)(id,options)}}catch(error){return {error,value:null}}}))).apply(this,arguments)}function resolveStandardizedNameForRequire(type,name,dirname){const it=resolveAlternativesHelper(type,name);let res=it.next();for(;!res.done;)res=it.next(tryRequireResolve(res.value,{paths:[dirname]}));return res.value}function _resolveStandardizedNameForImport(){return (_resolveStandardizedNameForImport=_asyncToGenerator((function*(type,name,dirname){const parentUrl=(0, _url().pathToFileURL)(_path().join(dirname,"./babel-virtual-resolve-base.js")).href,it=resolveAlternativesHelper(type,name);let res=it.next();for(;!res.done;)res=it.next(yield tryImportMetaResolve(res.value,parentUrl));return (0, _url().fileURLToPath)(res.value)}))).apply(this,arguments)}const resolveStandardizedName=_gensync()({sync:(type,name,dirname=process.cwd())=>resolveStandardizedNameForRequire(type,name,dirname),async:(type,name,dirname=process.cwd())=>_asyncToGenerator((function*(){if(!_moduleTypes.supportsESM)return resolveStandardizedNameForRequire(type,name,dirname);try{return yield function(_x3,_x4,_x5){return _resolveStandardizedNameForImport.apply(this,arguments)}(type,name,dirname)}catch(e){try{return resolveStandardizedNameForRequire(type,name,dirname)}catch(e2){if("MODULE_NOT_FOUND"===e.type)throw e;if("MODULE_NOT_FOUND"===e2.type)throw e2;throw e}}}))()});var LOADING_MODULES=new Set;function*requireModule(type,name){if(!(yield*(0, _async.isAsync)())&&LOADING_MODULES.has(name))throw new Error(`Reentrant ${type} detected trying to load "${name}". This module is not ignored and is trying to load itself while compiling itself, leading to a dependency cycle. We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.`);try{return LOADING_MODULES.add(name),yield*(0,_moduleTypes.default)(name,`You appear to be using a native ECMAScript module ${type}, which is only supported when running Babel asynchronously.`,!0)}catch(err){throw err.message=`[BABEL]: ${err.message} (While processing: ${name})`,err}finally{LOADING_MODULES.delete(name);}}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/utils.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.makeStaticFileCache=function(fn){return (0, _caching.makeStrongCache)((function*(filepath,cache){const cached=cache.invalidate((()=>function(filepath){if(!_fs2().existsSync(filepath))return null;try{return +_fs2().statSync(filepath).mtime}catch(e){if("ENOENT"!==e.code&&"ENOTDIR"!==e.code)throw e}return null}(filepath)));return null===cached?null:fn(filepath,yield*fs.readFile(filepath,"utf8"))}))};var _caching=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js"),fs=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/fs.js");function _fs2(){const data=__webpack_require__("fs");return _fs2=function(){return data},data}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/full.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _async=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/async.js"),_util=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/util.js"),context=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_plugin=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/plugin.js"),_item=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/item.js"),_configChain=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/config-chain.js"),_deepArray=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/deep-array.js");function _traverse(){const data=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js");return _traverse=function(){return data},data}var _caching=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js"),_options=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/options.js"),_plugins=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/plugins.js"),_configApi=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/config-api.js"),_partial=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/partial.js"),_configError=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js"),_default=_gensync()((function*(inputOpts){var _opts$assumptions;const result=yield*(0, _partial.default)(inputOpts);if(!result)return null;const{options,context,fileHandling}=result;if("ignored"===fileHandling)return null;const optionDefaults={},{plugins,presets}=options;if(!plugins||!presets)throw new Error("Assertion failure - plugins and presets exist");const presetContext=Object.assign({},context,{targets:options.targets}),toDescriptor=item=>{const desc=(0, _item.getItemDescriptor)(item);if(!desc)throw new Error("Assertion failure - must be config item");return desc},presetsDescriptors=presets.map(toDescriptor),initialPluginsDescriptors=plugins.map(toDescriptor),pluginDescriptorsByPass=[[]],passes=[],externalDependencies=[],ignored=yield*enhanceError(context,(function*recursePresetDescriptors(rawPresets,pluginDescriptorsPass){const presets=[];for(let i=0;i<rawPresets.length;i++){const descriptor=rawPresets[i];if(!1!==descriptor.options){try{var preset=yield*loadPresetDescriptor(descriptor,presetContext);}catch(e){throw "BABEL_UNKNOWN_OPTION"===e.code&&(0,_options.checkNoUnwrappedItemOptionPairs)(rawPresets,i,"preset",e),e}externalDependencies.push(preset.externalDependencies),descriptor.ownPass?presets.push({preset:preset.chain,pass:[]}):presets.unshift({preset:preset.chain,pass:pluginDescriptorsPass});}}if(presets.length>0){pluginDescriptorsByPass.splice(1,0,...presets.map((o=>o.pass)).filter((p=>p!==pluginDescriptorsPass)));for(const{preset,pass}of presets){if(!preset)return !0;pass.push(...preset.plugins);if(yield*recursePresetDescriptors(preset.presets,pass))return !0;preset.options.forEach((opts=>{(0,_util.mergeOptions)(optionDefaults,opts);}));}}}))(presetsDescriptors,pluginDescriptorsByPass[0]);if(ignored)return null;const opts=optionDefaults;(0, _util.mergeOptions)(opts,options);const pluginContext=Object.assign({},presetContext,{assumptions:null!=(_opts$assumptions=opts.assumptions)?_opts$assumptions:{}});return yield*enhanceError(context,(function*(){pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);for(const descs of pluginDescriptorsByPass){const pass=[];passes.push(pass);for(let i=0;i<descs.length;i++){const descriptor=descs[i];if(!1!==descriptor.options){try{var plugin=yield*loadPluginDescriptor(descriptor,pluginContext);}catch(e){throw "BABEL_UNKNOWN_PLUGIN_PROPERTY"===e.code&&(0,_options.checkNoUnwrappedItemOptionPairs)(descs,i,"plugin",e),e}pass.push(plugin),externalDependencies.push(plugin.externalDependencies);}}}}))(),opts.plugins=passes[0],opts.presets=passes.slice(1).filter((plugins=>plugins.length>0)).map((plugins=>({plugins}))),opts.passPerPreset=opts.presets.length>0,{options:opts,passes,externalDependencies:(0, _deepArray.finalize)(externalDependencies)}}));function enhanceError(context,fn){return function*(arg1,arg2){try{return yield*fn(arg1,arg2)}catch(e){var _context$filename;if(!/^\[BABEL\]/.test(e.message))e.message=`[BABEL] ${null!=(_context$filename=context.filename)?_context$filename:"unknown file"}: ${e.message}`;throw e}}}exports.default=_default;const makeDescriptorLoader=apiFactory=>(0, _caching.makeWeakCache)((function*({value,options,dirname,alias},cache){if(!1===options)throw new Error("Assertion failure");options=options||{};const externalDependencies=[];let item=value;if("function"==typeof value){const factory=(0, _async.maybeAsync)(value,"You appear to be using an async plugin/preset, but Babel has been called synchronously"),api=Object.assign({},context,apiFactory(cache,externalDependencies));try{item=yield*factory(api,options,dirname);}catch(e){throw alias&&(e.message+=` (While processing: ${JSON.stringify(alias)})`),e}}if(!item||"object"!=typeof item)throw new Error("Plugin/Preset did not return an object.");if((0, _async.isThenable)(item))throw yield*[],new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". (While processing: ${JSON.stringify(alias)})`);if(externalDependencies.length>0&&(!cache.configured()||"forever"===cache.mode())){let error=`A plugin/preset has external untracked dependencies (${externalDependencies[0]}), but the cache `;throw cache.configured()?error+=" has been configured to never be invalidated. ":error+="has not been configured to be invalidated when the external dependencies change. ",error+=`Plugins/presets should configure their cache to be invalidated when the external dependencies change, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`\n(While processing: ${JSON.stringify(alias)})`,new Error(error)}return {value:item,options,dirname,alias,externalDependencies:(0, _deepArray.finalize)(externalDependencies)}})),pluginDescriptorLoader=makeDescriptorLoader(_configApi.makePluginAPI),presetDescriptorLoader=makeDescriptorLoader(_configApi.makePresetAPI),instantiatePlugin=(0, _caching.makeWeakCache)((function*({value,options,dirname,alias,externalDependencies},cache){const pluginObj=(0, _plugins.validatePluginObject)(value),plugin=Object.assign({},pluginObj);if(plugin.visitor&&(plugin.visitor=_traverse().default.explode(Object.assign({},plugin.visitor))),plugin.inherits){const inheritsDescriptor={name:void 0,alias:`${alias}$inherits`,value:plugin.inherits,options,dirname},inherits=yield*(0, _async.forwardAsync)(loadPluginDescriptor,(run=>cache.invalidate((data=>run(inheritsDescriptor,data)))));plugin.pre=chain(inherits.pre,plugin.pre),plugin.post=chain(inherits.post,plugin.post),plugin.manipulateOptions=chain(inherits.manipulateOptions,plugin.manipulateOptions),plugin.visitor=_traverse().default.visitors.merge([inherits.visitor||{},plugin.visitor||{}]),inherits.externalDependencies.length>0&&(externalDependencies=0===externalDependencies.length?inherits.externalDependencies:(0, _deepArray.finalize)([externalDependencies,inherits.externalDependencies]));}return new _plugin.default(plugin,options,alias,externalDependencies)}));function*loadPluginDescriptor(descriptor,context){if(descriptor.value instanceof _plugin.default){if(descriptor.options)throw new Error("Passed options to an existing Plugin instance will not work.");return descriptor.value}return yield*instantiatePlugin(yield*pluginDescriptorLoader(descriptor,context),context)}const needsFilename=val=>val&&"function"!=typeof val,validateIfOptionNeedsFilename=(options,descriptor)=>{if(needsFilename(options.test)||needsFilename(options.include)||needsFilename(options.exclude)){const formattedPresetName=descriptor.name?`"${descriptor.name}"`:"/* your preset */";throw new _configError.default([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`,"```",`babel.transformSync(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`,"```","See https://babeljs.io/docs/en/options#filename for more information."].join("\n"))}},validatePreset=(preset,context,descriptor)=>{if(!context.filename){const{options}=preset;validateIfOptionNeedsFilename(options,descriptor),options.overrides&&options.overrides.forEach((overrideOptions=>validateIfOptionNeedsFilename(overrideOptions,descriptor)));}},instantiatePreset=(0, _caching.makeWeakCacheSync)((({value,dirname,alias,externalDependencies})=>({options:(0, _options.validate)("preset",value),alias,dirname,externalDependencies})));function*loadPresetDescriptor(descriptor,context){const preset=instantiatePreset(yield*presetDescriptorLoader(descriptor,context));return validatePreset(preset,context,descriptor),{chain:yield*(0, _configChain.buildPresetChain)(preset,context),externalDependencies:preset.externalDependencies}}function chain(a,b){const fns=[a,b].filter(Boolean);return fns.length<=1?fns[0]:function(...args){for(const fn of fns)fn.apply(this,args);}}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/config-api.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _semver(){const data=__webpack_require__("./node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js");return _semver=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.makeConfigAPI=makeConfigAPI,exports.makePluginAPI=function(cache,externalDependencies){return Object.assign({},makePresetAPI(cache,externalDependencies),{assumption:name=>cache.using((data=>data.assumptions[name]))})},exports.makePresetAPI=makePresetAPI;var _=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_caching=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/caching.js");function makeConfigAPI(cache){return {version:_.version,cache:cache.simple(),env:value=>cache.using((data=>void 0===value?data.envName:"function"==typeof value?(0, _caching.assertSimpleType)(value(data.envName)):(Array.isArray(value)?value:[value]).some((entry=>{if("string"!=typeof entry)throw new Error("Unexpected non-string value");return entry===data.envName})))),async:()=>!1,caller:cb=>cache.using((data=>(0, _caching.assertSimpleType)(cb(data.caller)))),assertVersion}}function makePresetAPI(cache,externalDependencies){return Object.assign({},makeConfigAPI(cache),{targets:()=>JSON.parse(cache.using((data=>JSON.stringify(data.targets)))),addExternalDependency:ref=>{externalDependencies.push(ref);}})}function assertVersion(range){if("number"==typeof range){if(!Number.isInteger(range))throw new Error("Expected string or integer value.");range=`^${range}.0.0-0`;}if("string"!=typeof range)throw new Error("Expected string or integer value.");if(_semver().satisfies(_.version,range))return;const limit=Error.stackTraceLimit;"number"==typeof limit&&limit<25&&(Error.stackTraceLimit=25);const err=new Error(`Requires Babel "${range}", but was loaded with "${_.version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);throw "number"==typeof limit&&(Error.stackTraceLimit=limit),Object.assign(err,{code:"BABEL_VERSION_UNSUPPORTED",version:_.version,range})}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/deep-array.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.finalize=function(deepArr){return Object.freeze(deepArr)},exports.flattenToSet=function(arr){const result=new Set,stack=[arr];for(;stack.length>0;)for(const el of stack.pop())Array.isArray(el)?stack.push(el):result.add(el);return result};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/environment.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.getEnv=function(defaultValue="development"){return ({}).BABEL_ENV||"production"||defaultValue};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.createConfigItem=function(target,options,callback){if(void 0!==callback)createConfigItemRunner.errback(target,options,callback);else {if("function"!=typeof options)return createConfigItemRunner.sync(target,options);createConfigItemRunner.errback(target,void 0,callback);}},exports.createConfigItemSync=exports.createConfigItemAsync=void 0,Object.defineProperty(exports,"default",{enumerable:!0,get:function(){return _full.default}}),exports.loadPartialConfigSync=exports.loadPartialConfigAsync=exports.loadPartialConfig=exports.loadOptionsSync=exports.loadOptionsAsync=exports.loadOptions=void 0;var _full=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/full.js"),_partial=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/partial.js"),_item=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/item.js");const loadOptionsRunner=_gensync()((function*(opts){var _config$options;const config=yield*(0, _full.default)(opts);return null!=(_config$options=null==config?void 0:config.options)?_config$options:null})),createConfigItemRunner=_gensync()(_item.createConfigItem),maybeErrback=runner=>(argOrCallback,maybeCallback)=>{let arg,callback;if(void 0===maybeCallback&&"function"==typeof argOrCallback?(callback=argOrCallback,arg=void 0):(callback=maybeCallback,arg=argOrCallback),!callback)return runner.sync(arg);runner.errback(arg,callback);},loadPartialConfig=maybeErrback(_partial.loadPartialConfig);exports.loadPartialConfig=loadPartialConfig;const loadPartialConfigSync=_partial.loadPartialConfig.sync;exports.loadPartialConfigSync=loadPartialConfigSync;const loadPartialConfigAsync=_partial.loadPartialConfig.async;exports.loadPartialConfigAsync=loadPartialConfigAsync;const loadOptions=maybeErrback(loadOptionsRunner);exports.loadOptions=loadOptions;const loadOptionsSync=loadOptionsRunner.sync;exports.loadOptionsSync=loadOptionsSync;const loadOptionsAsync=loadOptionsRunner.async;exports.loadOptionsAsync=loadOptionsAsync;const createConfigItemSync=createConfigItemRunner.sync;exports.createConfigItemSync=createConfigItemSync;const createConfigItemAsync=createConfigItemRunner.async;exports.createConfigItemAsync=createConfigItemAsync;},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/item.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.createConfigItem=function*(value,{dirname=".",type}={}){return createItemFromDescriptor(yield*(0, _configDescriptors.createDescriptor)(value,_path().resolve(dirname),{type,alias:"programmatic item"}))},exports.createItemFromDescriptor=createItemFromDescriptor,exports.getItemDescriptor=function(item){if(null!=item&&item[CONFIG_ITEM_BRAND])return item._descriptor;return};var _configDescriptors=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/config-descriptors.js");function createItemFromDescriptor(desc){return new ConfigItem(desc)}const CONFIG_ITEM_BRAND=Symbol.for("@babel/core@7 - ConfigItem");class ConfigItem{constructor(descriptor){this._descriptor=void 0,this[CONFIG_ITEM_BRAND]=!0,this.value=void 0,this.options=void 0,this.dirname=void 0,this.name=void 0,this.file=void 0,this._descriptor=descriptor,Object.defineProperty(this,"_descriptor",{enumerable:!1}),Object.defineProperty(this,CONFIG_ITEM_BRAND,{enumerable:!1}),this.value=this._descriptor.value,this.options=this._descriptor.options,this.dirname=this._descriptor.dirname,this.name=this._descriptor.name,this.file=this._descriptor.file?{request:this._descriptor.file.request,resolved:this._descriptor.file.resolved}:void 0,Object.freeze(this);}}Object.freeze(ConfigItem.prototype);},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/partial.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=loadPrivatePartialConfig,exports.loadPartialConfig=void 0;var _plugin=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/plugin.js"),_util=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/util.js"),_item=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/item.js"),_configChain=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/config-chain.js"),_environment=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/environment.js"),_options=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/options.js"),_files=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/index.js"),_resolveTargets=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/resolve-targets.js");const _excluded=["showIgnoredFiles"];function*loadPrivatePartialConfig(inputOpts){if(null!=inputOpts&&("object"!=typeof inputOpts||Array.isArray(inputOpts)))throw new Error("Babel options must be an object, null, or undefined");const args=inputOpts?(0, _options.validate)("arguments",inputOpts):{},{envName=(0, _environment.getEnv)(),cwd=".",root:rootDir=".",rootMode="root",caller,cloneInputAst=!0}=args,absoluteCwd=_path().resolve(cwd),absoluteRootDir=function(rootDir,rootMode){switch(rootMode){case"root":return rootDir;case"upward-optional":{const upwardRootDir=(0, _files.findConfigUpwards)(rootDir);return null===upwardRootDir?rootDir:upwardRootDir}case"upward":{const upwardRootDir=(0, _files.findConfigUpwards)(rootDir);if(null!==upwardRootDir)return upwardRootDir;throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${rootDir}".\nOne of the following config files must be in the directory tree: "${_files.ROOT_CONFIG_FILENAMES.join(", ")}".`),{code:"BABEL_ROOT_NOT_FOUND",dirname:rootDir})}default:throw new Error("Assertion failure - unknown rootMode value.")}}(_path().resolve(absoluteCwd,rootDir),rootMode),filename="string"==typeof args.filename?_path().resolve(cwd,args.filename):void 0,context={filename,cwd:absoluteCwd,root:absoluteRootDir,envName,caller,showConfig:(yield*(0, _files.resolveShowConfigPath)(absoluteCwd))===filename},configChain=yield*(0, _configChain.buildRootChain)(args,context);if(!configChain)return null;const merged={assumptions:{}};configChain.options.forEach((opts=>{(0, _util.mergeOptions)(merged,opts);}));return {options:Object.assign({},merged,{targets:(0, _resolveTargets.resolveTargets)(merged,absoluteRootDir),cloneInputAst,babelrc:!1,configFile:!1,browserslistConfigFile:!1,passPerPreset:!1,envName:context.envName,cwd:context.cwd,root:context.root,rootMode:"root",filename:"string"==typeof context.filename?context.filename:void 0,plugins:configChain.plugins.map((descriptor=>(0, _item.createItemFromDescriptor)(descriptor))),presets:configChain.presets.map((descriptor=>(0, _item.createItemFromDescriptor)(descriptor)))}),context,fileHandling:configChain.fileHandling,ignore:configChain.ignore,babelrc:configChain.babelrc,config:configChain.config,files:configChain.files}}const loadPartialConfig=_gensync()((function*(opts){let showIgnoredFiles=!1;if("object"==typeof opts&&null!==opts&&!Array.isArray(opts)){var _opts=opts;(({showIgnoredFiles}=_opts)),opts=function(source,excluded){if(null==source)return {};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_opts,_excluded);}const result=yield*loadPrivatePartialConfig(opts);if(!result)return null;const{options,babelrc,ignore,config,fileHandling,files}=result;return "ignored"!==fileHandling||showIgnoredFiles?((options.plugins||[]).forEach((item=>{if(item.value instanceof _plugin.default)throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()")})),new PartialConfig(options,babelrc?babelrc.filepath:void 0,ignore?ignore.filepath:void 0,config?config.filepath:void 0,fileHandling,files)):null}));exports.loadPartialConfig=loadPartialConfig;class PartialConfig{constructor(options,babelrc,ignore,config,fileHandling,files){this.options=void 0,this.babelrc=void 0,this.babelignore=void 0,this.config=void 0,this.fileHandling=void 0,this.files=void 0,this.options=options,this.babelignore=ignore,this.babelrc=babelrc,this.config=config,this.fileHandling=fileHandling,this.files=files,Object.freeze(this);}hasFilesystemConfig(){return void 0!==this.babelrc||void 0!==this.config}}Object.freeze(PartialConfig.prototype);},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/pattern-to-regex.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(pattern,dirname){const parts=_path().resolve(dirname,pattern).split(_path().sep);return new RegExp(["^",...parts.map(((part,i)=>{const last=i===parts.length-1;return "**"===part?last?starStarPatLast:starStarPat:"*"===part?last?starPatLast:starPat:0===part.indexOf("*.")?substitution+escapeRegExp(part.slice(1))+(last?endSep:sep):escapeRegExp(part)+(last?endSep:sep)}))].join(""))};const sep=`\\${_path().sep}`,endSep=`(?:${sep}|$)`,substitution=`[^${sep}]+`,starPat=`(?:${substitution}${sep})`,starPatLast=`(?:${substitution}${endSep})`,starStarPat=`${starPat}*?`,starStarPatLast=`${starPat}*?${starPatLast}?`;function escapeRegExp(string){return string.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&")}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/plugin.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _deepArray=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/deep-array.js");exports.default=class{constructor(plugin,options,key,externalDependencies=(0, _deepArray.finalize)([])){this.key=void 0,this.manipulateOptions=void 0,this.post=void 0,this.pre=void 0,this.visitor=void 0,this.parserOverride=void 0,this.generatorOverride=void 0,this.options=void 0,this.externalDependencies=void 0,this.key=plugin.name||key,this.manipulateOptions=plugin.manipulateOptions,this.post=plugin.post,this.pre=plugin.pre,this.visitor=plugin.visitor||{},this.parserOverride=plugin.parserOverride,this.generatorOverride=plugin.generatorOverride,this.options=options,this.externalDependencies=externalDependencies;}};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/printer.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.ConfigPrinter=exports.ChainFormatter=void 0;const ChainFormatter={Programmatic:0,Config:1};exports.ChainFormatter=ChainFormatter;const Formatter={title(type,callerName,filepath){let title="";return type===ChainFormatter.Programmatic?(title="programmatic options",callerName&&(title+=" from "+callerName)):title="config "+filepath,title},loc(index,envName){let loc="";return null!=index&&(loc+=`.overrides[${index}]`),null!=envName&&(loc+=`.env["${envName}"]`),loc},*optionsAndDescriptors(opt){const content=Object.assign({},opt.options);delete content.overrides,delete content.env;const pluginDescriptors=[...yield*opt.plugins()];pluginDescriptors.length&&(content.plugins=pluginDescriptors.map((d=>descriptorToConfig(d))));const presetDescriptors=[...yield*opt.presets()];return presetDescriptors.length&&(content.presets=[...presetDescriptors].map((d=>descriptorToConfig(d)))),JSON.stringify(content,void 0,2)}};function descriptorToConfig(d){var _d$file;let name=null==(_d$file=d.file)?void 0:_d$file.request;return null==name&&("object"==typeof d.value?name=d.value:"function"==typeof d.value&&(name=`[Function: ${d.value.toString().slice(0,50)} ... ]`)),null==name&&(name="[Unknown]"),void 0===d.options?name:null==d.name?[name,d.options]:[name,d.options,d.name]}class ConfigPrinter{constructor(){this._stack=[];}configure(enabled,type,{callerName,filepath}){return enabled?(content,index,envName)=>{this._stack.push({type,callerName,filepath,content,index,envName});}:()=>{}}static*format(config){let title=Formatter.title(config.type,config.callerName,config.filepath);const loc=Formatter.loc(config.index,config.envName);loc&&(title+=` ${loc}`);return `${title}\n${yield*Formatter.optionsAndDescriptors(config.content)}`}*output(){if(0===this._stack.length)return "";return (yield*_gensync().all(this._stack.map((s=>ConfigPrinter.format(s))))).join("\n\n")}}exports.ConfigPrinter=ConfigPrinter;},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/resolve-targets.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}function _helperCompilationTargets(){const data=__webpack_require__("./stubs/helper-compilation-targets.js");return _helperCompilationTargets=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.resolveBrowserslistConfigFile=function(browserslistConfigFile,configFileDir){return _path().resolve(configFileDir,browserslistConfigFile)},exports.resolveTargets=function(options,root){const optTargets=options.targets;let targets;"string"==typeof optTargets||Array.isArray(optTargets)?targets={browsers:optTargets}:optTargets&&(targets="esmodules"in optTargets?Object.assign({},optTargets,{esmodules:"intersect"}):optTargets);const{browserslistConfigFile}=options;let configFile,ignoreBrowserslistConfig=!1;"string"==typeof browserslistConfigFile?configFile=browserslistConfigFile:ignoreBrowserslistConfig=!1===browserslistConfigFile;return (0, _helperCompilationTargets().default)(targets,{ignoreBrowserslistConfig,configFile,configPath:root,browserslistEnv:options.browserslistEnv})};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/util.js":(__unused_webpack_module,exports)=>{function mergeDefaultFields(target,source){for(const k of Object.keys(source)){const val=source[k];void 0!==val&&(target[k]=val);}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.isIterableIterator=function(value){return !!value&&"function"==typeof value.next&&"function"==typeof value[Symbol.iterator]},exports.mergeOptions=function(target,source){for(const k of Object.keys(source))if("parserOpts"!==k&&"generatorOpts"!==k&&"assumptions"!==k||!source[k]){const val=source[k];void 0!==val&&(target[k]=val);}else {const parserOpts=source[k];mergeDefaultFields(target[k]||(target[k]={}),parserOpts);}};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/option-assertions.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _helperCompilationTargets(){const data=__webpack_require__("./stubs/helper-compilation-targets.js");return _helperCompilationTargets=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.access=access,exports.assertArray=assertArray,exports.assertAssumptions=function(loc,value){if(void 0===value)return;if("object"!=typeof value||null===value)throw new Error(`${msg(loc)} must be an object or undefined.`);let root=loc;do{root=root.parent;}while("root"!==root.type);const inPreset="preset"===root.source;for(const name of Object.keys(value)){const subLoc=access(loc,name);if(!_options.assumptionsNames.has(name))throw new Error(`${msg(subLoc)} is not a supported assumption.`);if("boolean"!=typeof value[name])throw new Error(`${msg(subLoc)} must be a boolean.`);if(inPreset&&!1===value[name])throw new Error(`${msg(subLoc)} cannot be set to 'false' inside presets.`)}return value},exports.assertBabelrcSearch=function(loc,value){if(void 0===value||"boolean"==typeof value)return value;if(Array.isArray(value))value.forEach(((item,i)=>{if(!checkValidTest(item))throw new Error(`${msg(access(loc,i))} must be a string/Function/RegExp.`)}));else if(!checkValidTest(value))throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(value)}`);return value},exports.assertBoolean=assertBoolean,exports.assertCallerMetadata=function(loc,value){const obj=assertObject(loc,value);if(obj){if("string"!=typeof obj.name)throw new Error(`${msg(loc)} set but does not contain "name" property string`);for(const prop of Object.keys(obj)){const propLoc=access(loc,prop),value=obj[prop];if(null!=value&&"boolean"!=typeof value&&"string"!=typeof value&&"number"!=typeof value)throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`)}}return value},exports.assertCompact=function(loc,value){if(void 0!==value&&"boolean"!=typeof value&&"auto"!==value)throw new Error(`${msg(loc)} must be a boolean, "auto", or undefined`);return value},exports.assertConfigApplicableTest=function(loc,value){if(void 0===value)return value;if(Array.isArray(value))value.forEach(((item,i)=>{if(!checkValidTest(item))throw new Error(`${msg(access(loc,i))} must be a string/Function/RegExp.`)}));else if(!checkValidTest(value))throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);return value},exports.assertConfigFileSearch=function(loc,value){if(void 0!==value&&"boolean"!=typeof value&&"string"!=typeof value)throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, got ${JSON.stringify(value)}`);return value},exports.assertFunction=function(loc,value){if(void 0!==value&&"function"!=typeof value)throw new Error(`${msg(loc)} must be a function, or undefined`);return value},exports.assertIgnoreList=function(loc,value){const arr=assertArray(loc,value);arr&&arr.forEach(((item,i)=>function(loc,value){if("string"!=typeof value&&"function"!=typeof value&&!(value instanceof RegExp))throw new Error(`${msg(loc)} must be an array of string/Function/RegExp values, or undefined`);return value}(access(loc,i),item)));return arr},exports.assertInputSourceMap=function(loc,value){if(void 0!==value&&"boolean"!=typeof value&&("object"!=typeof value||!value))throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);return value},exports.assertObject=assertObject,exports.assertPluginList=function(loc,value){const arr=assertArray(loc,value);arr&&arr.forEach(((item,i)=>function(loc,value){if(Array.isArray(value)){if(0===value.length)throw new Error(`${msg(loc)} must include an object`);if(value.length>3)throw new Error(`${msg(loc)} may only be a two-tuple or three-tuple`);if(assertPluginTarget(access(loc,0),value[0]),value.length>1){const opts=value[1];if(void 0!==opts&&!1!==opts&&("object"!=typeof opts||Array.isArray(opts)||null===opts))throw new Error(`${msg(access(loc,1))} must be an object, false, or undefined`)}if(3===value.length){const name=value[2];if(void 0!==name&&"string"!=typeof name)throw new Error(`${msg(access(loc,2))} must be a string, or undefined`)}}else assertPluginTarget(loc,value);return value}(access(loc,i),item)));return arr},exports.assertRootMode=function(loc,value){if(void 0!==value&&"root"!==value&&"upward"!==value&&"upward-optional"!==value)throw new Error(`${msg(loc)} must be a "root", "upward", "upward-optional" or undefined`);return value},exports.assertSourceMaps=function(loc,value){if(void 0!==value&&"boolean"!=typeof value&&"inline"!==value&&"both"!==value)throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);return value},exports.assertSourceType=function(loc,value){if(void 0!==value&&"module"!==value&&"script"!==value&&"unambiguous"!==value)throw new Error(`${msg(loc)} must be "module", "script", "unambiguous", or undefined`);return value},exports.assertString=function(loc,value){if(void 0!==value&&"string"!=typeof value)throw new Error(`${msg(loc)} must be a string, or undefined`);return value},exports.assertTargets=function(loc,value){if((0, _helperCompilationTargets().isBrowsersQueryValid)(value))return value;if("object"!=typeof value||!value||Array.isArray(value))throw new Error(`${msg(loc)} must be a string, an array of strings or an object`);const browsersLoc=access(loc,"browsers"),esmodulesLoc=access(loc,"esmodules");assertBrowsersList(browsersLoc,value.browsers),assertBoolean(esmodulesLoc,value.esmodules);for(const key of Object.keys(value)){const val=value[key],subLoc=access(loc,key);if("esmodules"===key)assertBoolean(subLoc,val);else if("browsers"===key)assertBrowsersList(subLoc,val);else {if(!Object.hasOwnProperty.call(_helperCompilationTargets().TargetNames,key)){const validTargets=Object.keys(_helperCompilationTargets().TargetNames).join(", ");throw new Error(`${msg(subLoc)} is not a valid target. Supported targets are ${validTargets}`)}assertBrowserVersion(subLoc,val);}}return value},exports.msg=msg;var _options=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/options.js");function msg(loc){switch(loc.type){case"root":return "";case"env":return `${msg(loc.parent)}.env["${loc.name}"]`;case"overrides":return `${msg(loc.parent)}.overrides[${loc.index}]`;case"option":return `${msg(loc.parent)}.${loc.name}`;case"access":return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;default:throw new Error(`Assertion failure: Unknown type ${loc.type}`)}}function access(loc,name){return {type:"access",name,parent:loc}}function assertBoolean(loc,value){if(void 0!==value&&"boolean"!=typeof value)throw new Error(`${msg(loc)} must be a boolean, or undefined`);return value}function assertObject(loc,value){if(void 0!==value&&("object"!=typeof value||Array.isArray(value)||!value))throw new Error(`${msg(loc)} must be an object, or undefined`);return value}function assertArray(loc,value){if(null!=value&&!Array.isArray(value))throw new Error(`${msg(loc)} must be an array, or undefined`);return value}function checkValidTest(value){return "string"==typeof value||"function"==typeof value||value instanceof RegExp}function assertPluginTarget(loc,value){if(("object"!=typeof value||!value)&&"string"!=typeof value&&"function"!=typeof value)throw new Error(`${msg(loc)} must be a string, object, function`);return value}function assertBrowsersList(loc,value){if(void 0!==value&&!(0, _helperCompilationTargets().isBrowsersQueryValid)(value))throw new Error(`${msg(loc)} must be undefined, a string or an array of strings`)}function assertBrowserVersion(loc,value){if(("number"!=typeof value||Math.round(value)!==value)&&"string"!=typeof value)throw new Error(`${msg(loc)} must be a string or an integer number`)}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/options.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.assumptionsNames=void 0,exports.checkNoUnwrappedItemOptionPairs=function(items,index,type,e){if(0===index)return;const lastItem=items[index-1],thisItem=items[index];lastItem.file&&void 0===lastItem.options&&"object"==typeof thisItem.value&&(e.message+=`\n- Maybe you meant to use\n"${type}s": [\n  ["${lastItem.file.request}", ${JSON.stringify(thisItem.value,void 0,2)}]\n]\nTo be a valid ${type}, its name and options should be wrapped in a pair of brackets`);},exports.validate=function(type,opts,filename){try{return validateNested({type:"root",source:type},opts)}catch(error){const configError=new _configError.default(error.message,filename);throw error.code&&(configError.code=error.code),configError}};var _removed=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/removed.js"),_optionAssertions=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/option-assertions.js"),_configError=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js");const ROOT_VALIDATORS={cwd:_optionAssertions.assertString,root:_optionAssertions.assertString,rootMode:_optionAssertions.assertRootMode,configFile:_optionAssertions.assertConfigFileSearch,caller:_optionAssertions.assertCallerMetadata,filename:_optionAssertions.assertString,filenameRelative:_optionAssertions.assertString,code:_optionAssertions.assertBoolean,ast:_optionAssertions.assertBoolean,cloneInputAst:_optionAssertions.assertBoolean,envName:_optionAssertions.assertString},BABELRC_VALIDATORS={babelrc:_optionAssertions.assertBoolean,babelrcRoots:_optionAssertions.assertBabelrcSearch},NONPRESET_VALIDATORS={extends:_optionAssertions.assertString,ignore:_optionAssertions.assertIgnoreList,only:_optionAssertions.assertIgnoreList,targets:_optionAssertions.assertTargets,browserslistConfigFile:_optionAssertions.assertConfigFileSearch,browserslistEnv:_optionAssertions.assertString},COMMON_VALIDATORS={inputSourceMap:_optionAssertions.assertInputSourceMap,presets:_optionAssertions.assertPluginList,plugins:_optionAssertions.assertPluginList,passPerPreset:_optionAssertions.assertBoolean,assumptions:_optionAssertions.assertAssumptions,env:function(loc,value){if("env"===loc.parent.type)throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);const parent=loc.parent,obj=(0, _optionAssertions.assertObject)(loc,value);if(obj)for(const envName of Object.keys(obj)){const env=(0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc,envName),obj[envName]);if(!env)continue;validateNested({type:"env",name:envName,parent},env);}return obj},overrides:function(loc,value){if("env"===loc.parent.type)throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);if("overrides"===loc.parent.type)throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);const parent=loc.parent,arr=(0, _optionAssertions.assertArray)(loc,value);if(arr)for(const[index,item]of arr.entries()){const objLoc=(0, _optionAssertions.access)(loc,index),env=(0, _optionAssertions.assertObject)(objLoc,item);if(!env)throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);validateNested({type:"overrides",index,parent},env);}return arr},test:_optionAssertions.assertConfigApplicableTest,include:_optionAssertions.assertConfigApplicableTest,exclude:_optionAssertions.assertConfigApplicableTest,retainLines:_optionAssertions.assertBoolean,comments:_optionAssertions.assertBoolean,shouldPrintComment:_optionAssertions.assertFunction,compact:_optionAssertions.assertCompact,minified:_optionAssertions.assertBoolean,auxiliaryCommentBefore:_optionAssertions.assertString,auxiliaryCommentAfter:_optionAssertions.assertString,sourceType:_optionAssertions.assertSourceType,wrapPluginVisitorMethod:_optionAssertions.assertFunction,highlightCode:_optionAssertions.assertBoolean,sourceMaps:_optionAssertions.assertSourceMaps,sourceMap:_optionAssertions.assertSourceMaps,sourceFileName:_optionAssertions.assertString,sourceRoot:_optionAssertions.assertString,parserOpts:_optionAssertions.assertObject,generatorOpts:_optionAssertions.assertObject};Object.assign(COMMON_VALIDATORS,{getModuleId:_optionAssertions.assertFunction,moduleRoot:_optionAssertions.assertString,moduleIds:_optionAssertions.assertBoolean,moduleId:_optionAssertions.assertString});const assumptionsNames=new Set(["arrayLikeIsIterable","constantReexports","constantSuper","enumerableModuleMeta","ignoreFunctionLength","ignoreToPrimitiveHint","iterableIsArray","mutableTemplateObject","noClassCalls","noDocumentAll","noIncompleteNsImportDetection","noNewArrows","objectRestNoSymbols","privateFieldsAsSymbols","privateFieldsAsProperties","pureGetters","setClassMethods","setComputedProperties","setPublicClassFields","setSpreadProperties","skipForOfIteratorClosing","superIsCallableConstructor"]);function getSource(loc){return "root"===loc.type?loc.source:getSource(loc.parent)}function validateNested(loc,opts){const type=getSource(loc);return function(opts){if(has(opts,"sourceMap")&&has(opts,"sourceMaps"))throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both")}(opts),Object.keys(opts).forEach((key=>{const optLoc={type:"option",name:key,parent:loc};if("preset"===type&&NONPRESET_VALIDATORS[key])throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);if("arguments"!==type&&ROOT_VALIDATORS[key])throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);if("arguments"!==type&&"configfile"!==type&&BABELRC_VALIDATORS[key]){if("babelrcfile"===type||"extendsfile"===type)throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, or babel.config.js/config file options`);throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`)}(COMMON_VALIDATORS[key]||NONPRESET_VALIDATORS[key]||BABELRC_VALIDATORS[key]||ROOT_VALIDATORS[key]||throwUnknownError)(optLoc,opts[key]);})),opts}function throwUnknownError(loc){const key=loc.name;if(_removed.default[key]){const{message,version=5}=_removed.default[key];throw new Error(`Using removed Babel ${version} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`)}{const unknownOptErr=new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);throw unknownOptErr.code="BABEL_UNKNOWN_OPTION",unknownOptErr}}function has(obj,key){return Object.prototype.hasOwnProperty.call(obj,key)}exports.assumptionsNames=assumptionsNames;},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/plugins.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.validatePluginObject=function(obj){const rootPath={type:"root",source:"plugin"};return Object.keys(obj).forEach((key=>{const validator=VALIDATORS[key];if(!validator){const invalidPluginPropertyError=new Error(`.${key} is not a valid Plugin property`);throw invalidPluginPropertyError.code="BABEL_UNKNOWN_PLUGIN_PROPERTY",invalidPluginPropertyError}validator({type:"option",name:key,parent:rootPath},obj[key]);})),obj};var _optionAssertions=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/option-assertions.js");const VALIDATORS={name:_optionAssertions.assertString,manipulateOptions:_optionAssertions.assertFunction,pre:_optionAssertions.assertFunction,post:_optionAssertions.assertFunction,inherits:_optionAssertions.assertFunction,visitor:function(loc,value){const obj=(0, _optionAssertions.assertObject)(loc,value);if(obj&&(Object.keys(obj).forEach((prop=>function(key,value){if(value&&"object"==typeof value)Object.keys(value).forEach((handler=>{if("enter"!==handler&&"exit"!==handler)throw new Error(`.visitor["${key}"] may only have .enter and/or .exit handlers.`)}));else if("function"!=typeof value)throw new Error(`.visitor["${key}"] must be a function`);return value}(prop,obj[prop]))),obj.enter||obj.exit))throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);return obj},parserOverride:_optionAssertions.assertFunction,generatorOverride:_optionAssertions.assertFunction};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/validation/removed.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;exports.default={auxiliaryComment:{message:"Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"},blacklist:{message:"Put the specific transforms you want in the `plugins` option"},breakConfig:{message:"This is not a necessary option in Babel 6"},experimental:{message:"Put the specific transforms you want in the `plugins` option"},externalHelpers:{message:"Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/"},extra:{message:""},jsxPragma:{message:"use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/"},loose:{message:"Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option."},metadataUsedHelpers:{message:"Not required anymore as this is enabled by default"},modules:{message:"Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules"},nonStandard:{message:"Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/"},optional:{message:"Put the specific transforms you want in the `plugins` option"},sourceMapName:{message:"The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves."},stage:{message:"Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"},whitelist:{message:"Put the specific transforms you want in the `plugins` option"},resolveModuleSource:{version:6,message:"Use `babel-plugin-module-resolver@3`'s 'resolvePath' options"},metadata:{version:6,message:"Generated plugin metadata is always included in the output result"},sourceMapTarget:{version:6,message:"The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves."}};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/config-error.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _rewriteStackTrace=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");class ConfigError extends Error{constructor(message,filename){super(message),(0, _rewriteStackTrace.expectedError)(this),filename&&(0, _rewriteStackTrace.injectVirtualStackFrame)(this,filename);}}exports.default=ConfigError;},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.beginHiddenCallStack=function(fn){return SUPPORTED?Object.defineProperty((function(...args){return setupPrepareStackTrace(),fn(...args)}),"name",{value:STOP_HIDING}):fn},exports.endHiddenCallStack=function(fn){return SUPPORTED?Object.defineProperty((function(...args){return fn(...args)}),"name",{value:START_HIDING}):fn},exports.expectedError=function(error){if(!SUPPORTED)return;return expectedErrors.add(error),error},exports.injectVirtualStackFrame=function(error,filename){if(!SUPPORTED)return;let frames=virtualFrames.get(error);frames||virtualFrames.set(error,frames=[]);return frames.push(function(filename){return Object.create({isNative:()=>!1,isConstructor:()=>!1,isToplevel:()=>!0,getFileName:()=>filename,getLineNumber:()=>{},getColumnNumber:()=>{},getFunctionName:()=>{},getMethodName:()=>{},getTypeName:()=>{},toString:()=>filename})}(filename)),error};const ErrorToString=Function.call.bind(Error.prototype.toString),SUPPORTED=!!Error.captureStackTrace,START_HIDING="startHiding - secret - don't use this - v1",STOP_HIDING="stopHiding - secret - don't use this - v1",expectedErrors=new WeakSet,virtualFrames=new WeakMap;function setupPrepareStackTrace(){setupPrepareStackTrace=()=>{};const{prepareStackTrace=defaultPrepareStackTrace}=Error;Error.stackTraceLimit&&(Error.stackTraceLimit=Math.max(Error.stackTraceLimit,50)),Error.prepareStackTrace=function(err,trace){let newTrace=[];let status=expectedErrors.has(err)?"hiding":"unknown";for(let i=0;i<trace.length;i++){const name=trace[i].getFunctionName();if(name===START_HIDING)status="hiding";else if(name===STOP_HIDING){if("hiding"===status)status="showing",virtualFrames.has(err)&&newTrace.unshift(...virtualFrames.get(err));else if("unknown"===status){newTrace=trace;break}}else "hiding"!==status&&newTrace.push(trace[i]);}return prepareStackTrace(err,newTrace)};}function defaultPrepareStackTrace(err,trace){return 0===trace.length?ErrorToString(err):`${ErrorToString(err)}\n    at ${trace.join("\n    at ")}`}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/async.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value;}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw);}function _asyncToGenerator(fn){return function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(void 0);}))}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.forwardAsync=function(action,cb){const g=_gensync()(action);return withKind((kind=>{const adapted=g[kind];return cb(adapted)}))},exports.isAsync=void 0,exports.isThenable=isThenable,exports.maybeAsync=function(fn,message){return _gensync()({sync(...args){const result=fn.apply(this,args);if(isThenable(result))throw new Error(message);return result},async(...args){return Promise.resolve(fn.apply(this,args))}})},exports.waitFor=exports.onFirstPause=void 0;const runGenerator=_gensync()((function*(item){return yield*item})),isAsync=_gensync()({sync:()=>!1,errback:cb=>cb(null,!0)});exports.isAsync=isAsync;const withKind=_gensync()({sync:cb=>cb("sync"),async:(_ref=_asyncToGenerator((function*(cb){return cb("async")})),function(_x){return _ref.apply(this,arguments)})});var _ref;const onFirstPause=_gensync()({name:"onFirstPause",arity:2,sync:function(item){return runGenerator.sync(item)},errback:function(item,firstPause,cb){let completed=!1;runGenerator.errback(item,((err,value)=>{completed=!0,cb(err,value);})),completed||firstPause();}});exports.onFirstPause=onFirstPause;const waitFor=_gensync()({sync:x=>x,async:(_ref2=_asyncToGenerator((function*(x){return x})),function(_x2){return _ref2.apply(this,arguments)})});var _ref2;function isThenable(val){return !(!val||"object"!=typeof val&&"function"!=typeof val||!val.then||"function"!=typeof val.then)}exports.waitFor=waitFor;},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/fs.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _fs(){const data=__webpack_require__("fs");return _fs=function(){return data},data}function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.stat=exports.readFile=void 0;const readFile=_gensync()({sync:_fs().readFileSync,errback:_fs().readFile});exports.readFile=readFile;const stat=_gensync()({sync:_fs().statSync,errback:_fs().stat});exports.stat=stat;},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/functional.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.once=function(fn){let result,resultP;return function*(){if(result)return result;if(!(yield*(0, _async.isAsync)()))return result=yield*fn();if(resultP)return yield*(0, _async.waitFor)(resultP);let resolve,reject;resultP=new Promise(((res,rej)=>{resolve=res,reject=rej;}));try{return result=yield*fn(),resultP=null,resolve(result),result}catch(error){throw reject(error),error}}};var _async=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/async.js");},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.DEFAULT_EXTENSIONS=void 0,Object.defineProperty(exports,"File",{enumerable:!0,get:function(){return _file.default}}),exports.OptionManager=void 0,exports.Plugin=function(alias){throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`)},Object.defineProperty(exports,"buildExternalHelpers",{enumerable:!0,get:function(){return _buildExternalHelpers.default}}),Object.defineProperty(exports,"createConfigItem",{enumerable:!0,get:function(){return _config.createConfigItem}}),Object.defineProperty(exports,"createConfigItemAsync",{enumerable:!0,get:function(){return _config.createConfigItemAsync}}),Object.defineProperty(exports,"createConfigItemSync",{enumerable:!0,get:function(){return _config.createConfigItemSync}}),Object.defineProperty(exports,"getEnv",{enumerable:!0,get:function(){return _environment.getEnv}}),Object.defineProperty(exports,"loadOptions",{enumerable:!0,get:function(){return _config.loadOptions}}),Object.defineProperty(exports,"loadOptionsAsync",{enumerable:!0,get:function(){return _config.loadOptionsAsync}}),Object.defineProperty(exports,"loadOptionsSync",{enumerable:!0,get:function(){return _config.loadOptionsSync}}),Object.defineProperty(exports,"loadPartialConfig",{enumerable:!0,get:function(){return _config.loadPartialConfig}}),Object.defineProperty(exports,"loadPartialConfigAsync",{enumerable:!0,get:function(){return _config.loadPartialConfigAsync}}),Object.defineProperty(exports,"loadPartialConfigSync",{enumerable:!0,get:function(){return _config.loadPartialConfigSync}}),Object.defineProperty(exports,"parse",{enumerable:!0,get:function(){return _parse.parse}}),Object.defineProperty(exports,"parseAsync",{enumerable:!0,get:function(){return _parse.parseAsync}}),Object.defineProperty(exports,"parseSync",{enumerable:!0,get:function(){return _parse.parseSync}}),Object.defineProperty(exports,"resolvePlugin",{enumerable:!0,get:function(){return _files.resolvePlugin}}),Object.defineProperty(exports,"resolvePreset",{enumerable:!0,get:function(){return _files.resolvePreset}}),Object.defineProperty(exports,"template",{enumerable:!0,get:function(){return _template().default}}),Object.defineProperty(exports,"tokTypes",{enumerable:!0,get:function(){return _parser().tokTypes}}),Object.defineProperty(exports,"transform",{enumerable:!0,get:function(){return _transform.transform}}),Object.defineProperty(exports,"transformAsync",{enumerable:!0,get:function(){return _transform.transformAsync}}),Object.defineProperty(exports,"transformFile",{enumerable:!0,get:function(){return _transformFile.transformFile}}),Object.defineProperty(exports,"transformFileAsync",{enumerable:!0,get:function(){return _transformFile.transformFileAsync}}),Object.defineProperty(exports,"transformFileSync",{enumerable:!0,get:function(){return _transformFile.transformFileSync}}),Object.defineProperty(exports,"transformFromAst",{enumerable:!0,get:function(){return _transformAst.transformFromAst}}),Object.defineProperty(exports,"transformFromAstAsync",{enumerable:!0,get:function(){return _transformAst.transformFromAstAsync}}),Object.defineProperty(exports,"transformFromAstSync",{enumerable:!0,get:function(){return _transformAst.transformFromAstSync}}),Object.defineProperty(exports,"transformSync",{enumerable:!0,get:function(){return _transform.transformSync}}),Object.defineProperty(exports,"traverse",{enumerable:!0,get:function(){return _traverse().default}}),exports.version=exports.types=void 0;var _file=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/file.js"),_buildExternalHelpers=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/tools/build-external-helpers.js"),_files=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/files/index.js"),_environment=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/environment.js");function _types(){const data=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");return _types=function(){return data},data}function _parser(){const data=__webpack_require__("./node_modules/.pnpm/@babel+parser@7.21.3/node_modules/@babel/parser/lib/index.js");return _parser=function(){return data},data}function _traverse(){const data=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js");return _traverse=function(){return data},data}function _template(){const data=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js");return _template=function(){return data},data}Object.defineProperty(exports,"types",{enumerable:!0,get:function(){return _types()}});var _config=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/index.js"),_transform=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform.js"),_transformFile=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform-file.js"),_transformAst=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform-ast.js"),_parse=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parse.js");__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js");exports.version="7.21.3";const DEFAULT_EXTENSIONS=Object.freeze([".js",".jsx",".es6",".es",".mjs",".cjs"]);exports.DEFAULT_EXTENSIONS=DEFAULT_EXTENSIONS;exports.OptionManager=class{init(opts){return (0, _config.loadOptionsSync)(opts)}};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parse.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.parse=void 0,exports.parseAsync=function(...args){return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.async)(...args)},exports.parseSync=function(...args){return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(...args)};var _config=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/index.js"),_parser=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parser/index.js"),_normalizeOpts=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/normalize-opts.js"),_rewriteStackTrace=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");const parseRunner=_gensync()((function*(code,opts){const config=yield*(0, _config.default)(opts);return null===config?null:yield*(0, _parser.default)(config.passes,(0, _normalizeOpts.default)(config),code)}));exports.parse=function(code,opts,callback){if("function"==typeof opts&&(callback=opts,opts=void 0),void 0===callback)return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(code,opts);(0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.errback)(code,opts,callback);};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parser/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _parser(){const data=__webpack_require__("./node_modules/.pnpm/@babel+parser@7.21.3/node_modules/@babel/parser/lib/index.js");return _parser=function(){return data},data}function _codeFrame(){const data=__webpack_require__("./stubs/babel-codeframe.js");return _codeFrame=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function*(pluginPasses,{parserOpts,highlightCode=!0,filename="unknown"},code){try{const results=[];for(const plugins of pluginPasses)for(const plugin of plugins){const{parserOverride}=plugin;if(parserOverride){const ast=parserOverride(code,parserOpts,_parser().parse);void 0!==ast&&results.push(ast);}}if(0===results.length)return (0,_parser().parse)(code,parserOpts);if(1===results.length){if(yield*[],"function"==typeof results[0].then)throw new Error("You appear to be using an async parser plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");return results[0]}throw new Error("More than one plugin attempted to override parsing.")}catch(err){"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"===err.code&&(err.message+="\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.");const{loc,missingPlugin}=err;if(loc){const codeFrame=(0, _codeFrame().codeFrameColumns)(code,{start:{line:loc.line,column:loc.column+1}},{highlightCode});err.message=missingPlugin?`${filename}: `+(0, _missingPluginHelper.default)(missingPlugin[0],loc,codeFrame):`${filename}: ${err.message}\n\n`+codeFrame,err.code="BABEL_PARSE_ERROR";}throw err}};var _missingPluginHelper=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js");},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(missingPluginName,loc,codeFrame){let helpMessage=`Support for the experimental syntax '${missingPluginName}' isn't currently enabled (${loc.line}:${loc.column+1}):\n\n`+codeFrame;const pluginInfo=pluginNameMap[missingPluginName];if(pluginInfo){const{syntax:syntaxPlugin,transform:transformPlugin}=pluginInfo;if(syntaxPlugin){const syntaxPluginInfo=getNameURLCombination(syntaxPlugin);if(transformPlugin){helpMessage+=`\n\nAdd ${getNameURLCombination(transformPlugin)} to the '${transformPlugin.name.startsWith("@babel/plugin")?"plugins":"presets"}' section of your Babel config to enable transformation.\nIf you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;}else helpMessage+=`\n\nAdd ${syntaxPluginInfo} to the 'plugins' section of your Babel config to enable parsing.`;}}return helpMessage};const pluginNameMap={asyncDoExpressions:{syntax:{name:"@babel/plugin-syntax-async-do-expressions",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions"}},decimal:{syntax:{name:"@babel/plugin-syntax-decimal",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal"}},decorators:{syntax:{name:"@babel/plugin-syntax-decorators",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators"},transform:{name:"@babel/plugin-proposal-decorators",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators"}},doExpressions:{syntax:{name:"@babel/plugin-syntax-do-expressions",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions"},transform:{name:"@babel/plugin-proposal-do-expressions",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions"}},exportDefaultFrom:{syntax:{name:"@babel/plugin-syntax-export-default-from",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from"},transform:{name:"@babel/plugin-proposal-export-default-from",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from"}},flow:{syntax:{name:"@babel/plugin-syntax-flow",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow"},transform:{name:"@babel/preset-flow",url:"https://github.com/babel/babel/tree/main/packages/babel-preset-flow"}},functionBind:{syntax:{name:"@babel/plugin-syntax-function-bind",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind"},transform:{name:"@babel/plugin-proposal-function-bind",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind"}},functionSent:{syntax:{name:"@babel/plugin-syntax-function-sent",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent"},transform:{name:"@babel/plugin-proposal-function-sent",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent"}},jsx:{syntax:{name:"@babel/plugin-syntax-jsx",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx"},transform:{name:"@babel/preset-react",url:"https://github.com/babel/babel/tree/main/packages/babel-preset-react"}},importAssertions:{syntax:{name:"@babel/plugin-syntax-import-assertions",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions"}},pipelineOperator:{syntax:{name:"@babel/plugin-syntax-pipeline-operator",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator"},transform:{name:"@babel/plugin-proposal-pipeline-operator",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator"}},recordAndTuple:{syntax:{name:"@babel/plugin-syntax-record-and-tuple",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple"}},regexpUnicodeSets:{syntax:{name:"@babel/plugin-syntax-unicode-sets-regex",url:"https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md"},transform:{name:"@babel/plugin-proposal-unicode-sets-regex",url:"https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md"}},throwExpressions:{syntax:{name:"@babel/plugin-syntax-throw-expressions",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions"},transform:{name:"@babel/plugin-proposal-throw-expressions",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions"}},typescript:{syntax:{name:"@babel/plugin-syntax-typescript",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript"},transform:{name:"@babel/preset-typescript",url:"https://github.com/babel/babel/tree/main/packages/babel-preset-typescript"}},asyncGenerators:{syntax:{name:"@babel/plugin-syntax-async-generators",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators"},transform:{name:"@babel/plugin-proposal-async-generator-functions",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-async-generator-functions"}},classProperties:{syntax:{name:"@babel/plugin-syntax-class-properties",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"},transform:{name:"@babel/plugin-proposal-class-properties",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-class-properties"}},classPrivateProperties:{syntax:{name:"@babel/plugin-syntax-class-properties",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"},transform:{name:"@babel/plugin-proposal-class-properties",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-class-properties"}},classPrivateMethods:{syntax:{name:"@babel/plugin-syntax-class-properties",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties"},transform:{name:"@babel/plugin-proposal-private-methods",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-private-methods"}},classStaticBlock:{syntax:{name:"@babel/plugin-syntax-class-static-block",url:"https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block"},transform:{name:"@babel/plugin-proposal-class-static-block",url:"https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-proposal-class-static-block"}},dynamicImport:{syntax:{name:"@babel/plugin-syntax-dynamic-import",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import"}},exportNamespaceFrom:{syntax:{name:"@babel/plugin-syntax-export-namespace-from",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from"},transform:{name:"@babel/plugin-proposal-export-namespace-from",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-namespace-from"}},importMeta:{syntax:{name:"@babel/plugin-syntax-import-meta",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta"}},logicalAssignment:{syntax:{name:"@babel/plugin-syntax-logical-assignment-operators",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators"},transform:{name:"@babel/plugin-proposal-logical-assignment-operators",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-logical-assignment-operators"}},moduleStringNames:{syntax:{name:"@babel/plugin-syntax-module-string-names",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names"}},numericSeparator:{syntax:{name:"@babel/plugin-syntax-numeric-separator",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator"},transform:{name:"@babel/plugin-proposal-numeric-separator",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-numeric-separator"}},nullishCoalescingOperator:{syntax:{name:"@babel/plugin-syntax-nullish-coalescing-operator",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator"},transform:{name:"@babel/plugin-proposal-nullish-coalescing-operator",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator"}},objectRestSpread:{syntax:{name:"@babel/plugin-syntax-object-rest-spread",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread"},transform:{name:"@babel/plugin-proposal-object-rest-spread",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-object-rest-spread"}},optionalCatchBinding:{syntax:{name:"@babel/plugin-syntax-optional-catch-binding",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding"},transform:{name:"@babel/plugin-proposal-optional-catch-binding",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-optional-catch-binding"}},optionalChaining:{syntax:{name:"@babel/plugin-syntax-optional-chaining",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining"},transform:{name:"@babel/plugin-proposal-optional-chaining",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-optional-chaining"}},privateIn:{syntax:{name:"@babel/plugin-syntax-private-property-in-object",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object"},transform:{name:"@babel/plugin-proposal-private-property-in-object",url:"https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-private-property-in-object"}}};pluginNameMap.privateIn.syntax=pluginNameMap.privateIn.transform;const getNameURLCombination=({name,url})=>`${name} (${url})`;},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/tools/build-external-helpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{function helpers(){const data=__webpack_require__("./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/index.js");return helpers=function(){return data},data}function _generator(){const data=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/index.js");return _generator=function(){return data},data}function _template(){const data=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js");return _template=function(){return data},data}function _t(){const data=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");return _t=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(allowlist,outputType="global"){let tree;const build={global:buildGlobal,module:buildModule,umd:buildUmd,var:buildVar}[outputType];if(!build)throw new Error(`Unsupported output type ${outputType}`);tree=build(allowlist);return (0, _generator().default)(tree).code};var _file=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/file.js");const{arrayExpression,assignmentExpression,binaryExpression,blockStatement,callExpression,cloneNode,conditionalExpression,exportNamedDeclaration,exportSpecifier,expressionStatement,functionExpression,identifier,memberExpression,objectExpression,program,stringLiteral,unaryExpression,variableDeclaration,variableDeclarator}=_t(),buildUmdWrapper=replacements=>_template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements);function buildGlobal(allowlist){const namespace=identifier("babelHelpers"),body=[],container=functionExpression(null,[identifier("global")],blockStatement(body)),tree=program([expressionStatement(callExpression(container,[conditionalExpression(binaryExpression("===",unaryExpression("typeof",identifier("global")),stringLiteral("undefined")),identifier("self"),identifier("global"))]))]);return body.push(variableDeclaration("var",[variableDeclarator(namespace,assignmentExpression("=",memberExpression(identifier("global"),namespace),objectExpression([])))])),buildHelpers(body,namespace,allowlist),tree}function buildModule(allowlist){const body=[],refs=buildHelpers(body,null,allowlist);return body.unshift(exportNamedDeclaration(null,Object.keys(refs).map((name=>exportSpecifier(cloneNode(refs[name]),identifier(name)))))),program(body,[],"module")}function buildUmd(allowlist){const namespace=identifier("babelHelpers"),body=[];return body.push(variableDeclaration("var",[variableDeclarator(namespace,identifier("global"))])),buildHelpers(body,namespace,allowlist),program([buildUmdWrapper({FACTORY_PARAMETERS:identifier("global"),BROWSER_ARGUMENTS:assignmentExpression("=",memberExpression(identifier("root"),namespace),objectExpression([])),COMMON_ARGUMENTS:identifier("exports"),AMD_ARGUMENTS:arrayExpression([stringLiteral("exports")]),FACTORY_BODY:body,UMD_ROOT:identifier("this")})])}function buildVar(allowlist){const namespace=identifier("babelHelpers"),body=[];body.push(variableDeclaration("var",[variableDeclarator(namespace,objectExpression([]))]));const tree=program(body);return buildHelpers(body,namespace,allowlist),body.push(expressionStatement(namespace)),tree}function buildHelpers(body,namespace,allowlist){const getHelperReference=name=>namespace?memberExpression(namespace,identifier(name)):identifier(`_${name}`),refs={};return helpers().list.forEach((function(name){if(allowlist&&allowlist.indexOf(name)<0)return;const ref=refs[name]=getHelperReference(name);helpers().ensure(name,_file.default);const{nodes}=helpers().get(name,getHelperReference,ref);body.push(...nodes);})),refs}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform-ast.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.transformFromAst=void 0,exports.transformFromAstAsync=function(...args){return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async)(...args)},exports.transformFromAstSync=function(...args){return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(...args)};var _config=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/index.js"),_transformation=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/index.js"),_rewriteStackTrace=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");const transformFromAstRunner=_gensync()((function*(ast,code,opts){const config=yield*(0, _config.default)(opts);if(null===config)return null;if(!ast)throw new Error("No AST given");return yield*(0, _transformation.run)(config,code,ast)}));exports.transformFromAst=function(ast,code,optsOrCallback,maybeCallback){let opts,callback;if("function"==typeof optsOrCallback?(callback=optsOrCallback,opts=void 0):(opts=optsOrCallback,callback=maybeCallback),void 0===callback)return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast,code,opts);(0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast,code,opts,callback);};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform-file.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.transformFile=function(...args){transformFileRunner.errback(...args);},exports.transformFileAsync=function(...args){return transformFileRunner.async(...args)},exports.transformFileSync=function(...args){return transformFileRunner.sync(...args)};var _config=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/index.js"),_transformation=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/index.js"),fs=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/gensync-utils/fs.js");const transformFileRunner=_gensync()((function*(filename,opts){const options=Object.assign({},opts,{filename}),config=yield*(0, _config.default)(options);if(null===config)return null;const code=yield*fs.readFile(filename,"utf8");return yield*(0, _transformation.run)(config,code)}));},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transform.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _gensync(){const data=__webpack_require__("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");return _gensync=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.transform=void 0,exports.transformAsync=function(...args){return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.async)(...args)},exports.transformSync=function(...args){return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(...args)};var _config=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/index.js"),_transformation=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/index.js"),_rewriteStackTrace=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");const transformRunner=_gensync()((function*(code,opts){const config=yield*(0, _config.default)(opts);return null===config?null:yield*(0, _transformation.run)(config,code)}));exports.transform=function(code,optsOrCallback,maybeCallback){let opts,callback;if("function"==typeof optsOrCallback?(callback=optsOrCallback,opts=void 0):(opts=optsOrCallback,callback=maybeCallback),void 0===callback)return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(code,opts);(0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.errback)(code,opts,callback);};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _traverse(){const data=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js");return _traverse=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(){LOADED_PLUGIN||(LOADED_PLUGIN=new _plugin.default(Object.assign({},blockHoistPlugin,{visitor:_traverse().default.explode(blockHoistPlugin.visitor)}),{}));return LOADED_PLUGIN};var _plugin=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/plugin.js");let LOADED_PLUGIN;const blockHoistPlugin={name:"internal.blockHoist",visitor:{Block:{exit({node}){const{body}=node;let max=Math.pow(2,30)-1,hasChange=!1;for(let i=0;i<body.length;i++){const p=priority(body[i]);if(p>max){hasChange=!0;break}max=p;}hasChange&&(node.body=function(body){const buckets=Object.create(null);for(let i=0;i<body.length;i++){const n=body[i],p=priority(n);(buckets[p]||(buckets[p]=[])).push(n);}const keys=Object.keys(buckets).map((k=>+k)).sort(((a,b)=>b-a));let index=0;for(const key of keys){const bucket=buckets[key];for(const n of bucket)body[index++]=n;}return body}(body.slice()));}}}};function priority(bodyNode){const priority=null==bodyNode?void 0:bodyNode._blockHoist;return null==priority?1:!0===priority?2:priority}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/file.js":(__unused_webpack_module,exports,__webpack_require__)=>{function helpers(){const data=__webpack_require__("./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/index.js");return helpers=function(){return data},data}function _traverse(){const data=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js");return _traverse=function(){return data},data}function _codeFrame(){const data=__webpack_require__("./stubs/babel-codeframe.js");return _codeFrame=function(){return data},data}function _t(){const data=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");return _t=function(){return data},data}function _helperModuleTransforms(){const data=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/index.js");return _helperModuleTransforms=function(){return data},data}function _semver(){const data=__webpack_require__("./node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js");return _semver=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;const{cloneNode,interpreterDirective}=_t(),errorVisitor={enter(path,state){const loc=path.node.loc;loc&&(state.loc=loc,path.stop());}};class File{constructor(options,{code,ast,inputMap}){this._map=new Map,this.opts=void 0,this.declarations={},this.path=void 0,this.ast=void 0,this.scope=void 0,this.metadata={},this.code="",this.inputMap=void 0,this.hub={file:this,getCode:()=>this.code,getScope:()=>this.scope,addHelper:this.addHelper.bind(this),buildError:this.buildCodeFrameError.bind(this)},this.opts=options,this.code=code,this.ast=ast,this.inputMap=inputMap,this.path=_traverse().NodePath.get({hub:this.hub,parentPath:null,parent:this.ast,container:this.ast,key:"program"}).setContext(),this.scope=this.path.scope;}get shebang(){const{interpreter}=this.path.node;return interpreter?interpreter.value:""}set shebang(value){value?this.path.get("interpreter").replaceWith(interpreterDirective(value)):this.path.get("interpreter").remove();}set(key,val){if("helpersNamespace"===key)throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to explore using 'helperGenerator' alongside 'file.availableHelper()'.");this._map.set(key,val);}get(key){return this._map.get(key)}has(key){return this._map.has(key)}getModuleName(){return (0, _helperModuleTransforms().getModuleName)(this.opts,this.opts)}addImport(){throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.")}availableHelper(name,versionRange){let minVersion;try{minVersion=helpers().minVersion(name);}catch(err){if("BABEL_HELPER_UNKNOWN"!==err.code)throw err;return !1}return "string"!=typeof versionRange||(_semver().valid(versionRange)&&(versionRange=`^${versionRange}`),!_semver().intersects(`<${minVersion}`,versionRange)&&!_semver().intersects(">=8.0.0",versionRange))}addHelper(name){const declar=this.declarations[name];if(declar)return cloneNode(declar);const generator=this.get("helperGenerator");if(generator){const res=generator(name);if(res)return res}helpers().ensure(name,File);const uid=this.declarations[name]=this.scope.generateUidIdentifier(name),dependencies={};for(const dep of helpers().getDependencies(name))dependencies[dep]=this.addHelper(dep);const{nodes,globals}=helpers().get(name,(dep=>dependencies[dep]),uid,Object.keys(this.scope.getAllBindings()));return globals.forEach((name=>{this.path.scope.hasBinding(name,!0)&&this.path.scope.rename(name);})),nodes.forEach((node=>{node._compact=!0;})),this.path.unshiftContainer("body",nodes),this.path.get("body").forEach((path=>{-1!==nodes.indexOf(path.node)&&path.isVariableDeclaration()&&this.scope.registerDeclaration(path);})),uid}addTemplateObject(){throw new Error("This function has been moved into the template literal transform itself.")}buildCodeFrameError(node,msg,_Error=SyntaxError){let loc=node&&(node.loc||node._loc);if(!loc&&node){const state={loc:null};(0, _traverse().default)(node,errorVisitor,this.scope,state),loc=state.loc;let txt="This is an error on an internal node. Probably an internal error.";loc&&(txt+=" Location has been estimated."),msg+=` (${txt})`;}if(loc){const{highlightCode=!0}=this.opts;msg+="\n"+(0, _codeFrame().codeFrameColumns)(this.code,{start:{line:loc.start.line,column:loc.start.column+1},end:loc.end&&loc.start.line===loc.end.line?{line:loc.end.line,column:loc.end.column+1}:void 0},{highlightCode});}return new _Error(msg)}}exports.default=File;},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/generate.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _convertSourceMap(){const data=__webpack_require__("./node_modules/.pnpm/convert-source-map@1.9.0/node_modules/convert-source-map/index.js");return _convertSourceMap=function(){return data},data}function _generator(){const data=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/index.js");return _generator=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(pluginPasses,file){const{opts,ast,code,inputMap}=file,{generatorOpts}=opts;generatorOpts.inputSourceMap=null==inputMap?void 0:inputMap.toObject();const results=[];for(const plugins of pluginPasses)for(const plugin of plugins){const{generatorOverride}=plugin;if(generatorOverride){const result=generatorOverride(ast,generatorOpts,code,_generator().default);void 0!==result&&results.push(result);}}let result;if(0===results.length)result=(0, _generator().default)(ast,generatorOpts,code);else {if(1!==results.length)throw new Error("More than one plugin attempted to override codegen.");if(result=results[0],"function"==typeof result.then)throw new Error("You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.")}let{code:outputCode,decodedMap:outputMap=result.map}=result;result.__mergedMap?outputMap=Object.assign({},result.map):outputMap&&(outputMap=inputMap?(0, _mergeMap.default)(inputMap.toObject(),outputMap,generatorOpts.sourceFileName):result.map);"inline"!==opts.sourceMaps&&"both"!==opts.sourceMaps||(outputCode+="\n"+_convertSourceMap().fromObject(outputMap).toComment());"inline"===opts.sourceMaps&&(outputMap=null);return {outputCode,outputMap}};var _mergeMap=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/merge-map.js");},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/merge-map.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _remapping(){const data=__webpack_require__("./node_modules/.pnpm/@ampproject+remapping@2.2.0/node_modules/@ampproject/remapping/dist/remapping.mjs");return _remapping=function(){return data},data}function rootless(map){return Object.assign({},map,{sourceRoot:null})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(inputMap,map,sourceFileName){const source=sourceFileName.replace(/\\/g,"/");let found=!1;const result=_remapping()(rootless(map),((s,ctx)=>s!==source||found?null:(found=!0,ctx.source="",rootless(inputMap))));"string"==typeof inputMap.sourceRoot&&(result.sourceRoot=inputMap.sourceRoot);return Object.assign({},result)};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _traverse(){const data=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js");return _traverse=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.run=function*(config,code,ast){const file=yield*(0, _normalizeFile.default)(config.passes,(0, _normalizeOpts.default)(config),code,ast),opts=file.opts;try{yield*function*(file,pluginPasses){for(const pluginPairs of pluginPasses){const passPairs=[],passes=[],visitors=[];for(const plugin of pluginPairs.concat([(0,_blockHoistPlugin.default)()])){const pass=new _pluginPass.default(file,plugin.key,plugin.options);passPairs.push([plugin,pass]),passes.push(pass),visitors.push(plugin.visitor);}for(const[plugin,pass]of passPairs){const fn=plugin.pre;if(fn){const result=fn.call(pass,file);if(yield*[],isThenable(result))throw new Error("You appear to be using an plugin with an async .pre, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.")}}const visitor=_traverse().default.visitors.merge(visitors,passes,file.opts.wrapPluginVisitorMethod);(0,_traverse().default)(file.ast,visitor,file.scope);for(const[plugin,pass]of passPairs){const fn=plugin.post;if(fn){const result=fn.call(pass,file);if(yield*[],isThenable(result))throw new Error("You appear to be using an plugin with an async .post, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.")}}}}(file,config.passes);}catch(e){var _opts$filename;throw e.message=`${null!=(_opts$filename=opts.filename)?_opts$filename:"unknown file"}: ${e.message}`,e.code||(e.code="BABEL_TRANSFORM_ERROR"),e}let outputCode,outputMap;try{!1!==opts.code&&({outputCode,outputMap}=(0,_generate.default)(config.passes,file));}catch(e){var _opts$filename2;throw e.message=`${null!=(_opts$filename2=opts.filename)?_opts$filename2:"unknown file"}: ${e.message}`,e.code||(e.code="BABEL_GENERATE_ERROR"),e}return {metadata:file.metadata,options:opts,ast:!0===opts.ast?file.ast:null,code:void 0===outputCode?null:outputCode,map:void 0===outputMap?null:outputMap,sourceType:file.ast.program.sourceType,externalDependencies:(0, _deepArray.flattenToSet)(config.externalDependencies)}};var _pluginPass=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/plugin-pass.js"),_blockHoistPlugin=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js"),_normalizeOpts=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/normalize-opts.js"),_normalizeFile=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/normalize-file.js"),_generate=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/generate.js"),_deepArray=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/config/helpers/deep-array.js");function isThenable(val){return !(!val||"object"!=typeof val&&"function"!=typeof val||!val.then||"function"!=typeof val.then)}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/normalize-file.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _fs(){const data=__webpack_require__("fs");return _fs=function(){return data},data}function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}function _debug(){const data=__webpack_require__("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");return _debug=function(){return data},data}function _t(){const data=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");return _t=function(){return data},data}function _convertSourceMap(){const data=__webpack_require__("./node_modules/.pnpm/convert-source-map@1.9.0/node_modules/convert-source-map/index.js");return _convertSourceMap=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function*(pluginPasses,options,code,ast){if(code=`${code||""}`,ast){if("Program"===ast.type)ast=file(ast,[],[]);else if("File"!==ast.type)throw new Error("AST root must be a Program or File node");options.cloneInputAst&&(ast=(0, _cloneDeep.default)(ast));}else ast=yield*(0, _parser.default)(pluginPasses,options,code);let inputMap=null;if(!1!==options.inputSourceMap){if("object"==typeof options.inputSourceMap&&(inputMap=_convertSourceMap().fromObject(options.inputSourceMap)),!inputMap){const lastComment=extractComments(INLINE_SOURCEMAP_REGEX,ast);if(lastComment)try{inputMap=_convertSourceMap().fromComment(lastComment);}catch(err){debug("discarding unknown inline input sourcemap",err);}}if(!inputMap){const lastComment=extractComments(EXTERNAL_SOURCEMAP_REGEX,ast);if("string"==typeof options.filename&&lastComment)try{const match=EXTERNAL_SOURCEMAP_REGEX.exec(lastComment),inputMapContent=_fs().readFileSync(_path().resolve(_path().dirname(options.filename),match[1]),"utf8");inputMap=_convertSourceMap().fromJSON(inputMapContent);}catch(err){debug("discarding unknown file input sourcemap",err);}else lastComment&&debug("discarding un-loadable file input sourcemap");}}return new _file.default(options,{code,ast,inputMap})};var _file=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/file/file.js"),_parser=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/parser/index.js"),_cloneDeep=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/util/clone-deep.js");const{file,traverseFast}=_t(),debug=_debug()("babel:transform:file"),INLINE_SOURCEMAP_REGEX=/^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/,EXTERNAL_SOURCEMAP_REGEX=/^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;function extractCommentsFromList(regex,comments,lastComment){return comments&&(comments=comments.filter((({value})=>!regex.test(value)||(lastComment=value,!1)))),[comments,lastComment]}function extractComments(regex,ast){let lastComment=null;return traverseFast(ast,(node=>{[node.leadingComments,lastComment]=extractCommentsFromList(regex,node.leadingComments,lastComment),[node.innerComments,lastComment]=extractCommentsFromList(regex,node.innerComments,lastComment),[node.trailingComments,lastComment]=extractCommentsFromList(regex,node.trailingComments,lastComment);})),lastComment}},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/normalize-opts.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(config){const{filename,cwd,filenameRelative="string"==typeof filename?_path().relative(cwd,filename):"unknown",sourceType="module",inputSourceMap,sourceMaps=!!inputSourceMap,sourceRoot=config.options.moduleRoot,sourceFileName=_path().basename(filenameRelative),comments=!0,compact="auto"}=config.options,opts=config.options,options=Object.assign({},opts,{parserOpts:Object.assign({sourceType:".mjs"===_path().extname(filenameRelative)?"module":sourceType,sourceFileName:filename,plugins:[]},opts.parserOpts),generatorOpts:Object.assign({filename,auxiliaryCommentBefore:opts.auxiliaryCommentBefore,auxiliaryCommentAfter:opts.auxiliaryCommentAfter,retainLines:opts.retainLines,comments,shouldPrintComment:opts.shouldPrintComment,compact,minified:opts.minified,sourceMaps,sourceRoot,sourceFileName},opts.generatorOpts)});for(const plugins of config.passes)for(const plugin of plugins)plugin.manipulateOptions&&plugin.manipulateOptions(options,options.parserOpts);return options};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/plugin-pass.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;class PluginPass{constructor(file,key,options){this._map=new Map,this.key=void 0,this.file=void 0,this.opts=void 0,this.cwd=void 0,this.filename=void 0,this.key=key,this.file=file,this.opts=options||{},this.cwd=file.opts.cwd,this.filename=file.opts.filename;}set(key,val){this._map.set(key,val);}get(key){return this._map.get(key)}availableHelper(name,versionRange){return this.file.availableHelper(name,versionRange)}addHelper(name){return this.file.addHelper(name)}addImport(){this.file.addImport();}buildCodeFrameError(node,msg,_Error){return this.file.buildCodeFrameError(node,msg,_Error)}}exports.default=PluginPass,PluginPass.prototype.getModuleName=function(){return this.file.getModuleName()};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/transformation/util/clone-deep.js":(__unused_webpack_module,exports)=>{function deepClone(value,cache){if(null!==value){if(cache.has(value))return cache.get(value);let cloned;if(Array.isArray(value)){cloned=new Array(value.length),cache.set(value,cloned);for(let i=0;i<value.length;i++)cloned[i]="object"!=typeof value[i]?value[i]:deepClone(value[i],cache);}else {cloned={},cache.set(value,cloned);const keys=Object.keys(value);for(let i=0;i<keys.length;i++){const key=keys[i];cloned[key]="object"!=typeof value[key]?value[key]:deepClone(value[key],cache);}}return cloned}return value}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(value){return "object"!=typeof value?value:deepClone(value,new Map)};},"./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/vendor/import-meta-resolve.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _url(){const data=__webpack_require__("url");return _url=function(){return data},data}function _fs(){const data=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return {default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key];}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(__webpack_require__("fs"),!0);return _fs=function(){return data},data}function _path(){const data=__webpack_require__("path");return _path=function(){return data},data}function _assert(){const data=__webpack_require__("assert");return _assert=function(){return data},data}function _util(){const data=__webpack_require__("util");return _util=function(){return data},data}function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return (_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function asyncGeneratorStep(gen,resolve,reject,_next,_throw,key,arg){try{var info=gen[key](arg),value=info.value;}catch(error){return void reject(error)}info.done?resolve(value):Promise.resolve(value).then(_next,_throw);}Object.defineProperty(exports,"__esModule",{value:!0}),exports.moduleResolve=moduleResolve,exports.resolve=function(_x,_x2){return _resolve.apply(this,arguments)};var re$3={exports:{}};var constants={SEMVER_SPEC_VERSION:"2.0.0",MAX_LENGTH:256,MAX_SAFE_INTEGER:Number.MAX_SAFE_INTEGER||9007199254740991,MAX_SAFE_COMPONENT_LENGTH:16};var debug_1="object"==typeof process&&process.env&&({}).NODE_DEBUG&&/\bsemver\b/i.test(({}).NODE_DEBUG)?(...args)=>console.error("SEMVER",...args):()=>{};!function(module,exports){const{MAX_SAFE_COMPONENT_LENGTH}=constants,debug=debug_1,re=(exports=module.exports={}).re=[],src=exports.src=[],t=exports.t={};let R=0;const createToken=(name,value,isGlobal)=>{const index=R++;debug(name,index,value),t[name]=index,src[index]=value,re[index]=new RegExp(value,isGlobal?"g":void 0);};createToken("NUMERICIDENTIFIER","0|[1-9]\\d*"),createToken("NUMERICIDENTIFIERLOOSE","[0-9]+"),createToken("NONNUMERICIDENTIFIER","\\d*[a-zA-Z-][a-zA-Z0-9-]*"),createToken("MAINVERSION",`(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`),createToken("MAINVERSIONLOOSE",`(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`),createToken("PRERELEASEIDENTIFIER",`(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`),createToken("PRERELEASEIDENTIFIERLOOSE",`(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`),createToken("PRERELEASE",`(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`),createToken("PRERELEASELOOSE",`(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`),createToken("BUILDIDENTIFIER","[0-9A-Za-z-]+"),createToken("BUILD",`(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`),createToken("FULLPLAIN",`v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`),createToken("FULL",`^${src[t.FULLPLAIN]}$`),createToken("LOOSEPLAIN",`[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`),createToken("LOOSE",`^${src[t.LOOSEPLAIN]}$`),createToken("GTLT","((?:<|>)?=?)"),createToken("XRANGEIDENTIFIERLOOSE",`${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`),createToken("XRANGEIDENTIFIER",`${src[t.NUMERICIDENTIFIER]}|x|X|\\*`),createToken("XRANGEPLAIN",`[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`),createToken("XRANGEPLAINLOOSE",`[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`),createToken("XRANGE",`^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`),createToken("XRANGELOOSE",`^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`),createToken("COERCE",`(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`),createToken("COERCERTL",src[t.COERCE],!0),createToken("LONETILDE","(?:~>?)"),createToken("TILDETRIM",`(\\s*)${src[t.LONETILDE]}\\s+`,!0),exports.tildeTrimReplace="$1~",createToken("TILDE",`^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`),createToken("TILDELOOSE",`^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`),createToken("LONECARET","(?:\\^)"),createToken("CARETTRIM",`(\\s*)${src[t.LONECARET]}\\s+`,!0),exports.caretTrimReplace="$1^",createToken("CARET",`^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`),createToken("CARETLOOSE",`^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`),createToken("COMPARATORLOOSE",`^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`),createToken("COMPARATOR",`^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`),createToken("COMPARATORTRIM",`(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`,!0),exports.comparatorTrimReplace="$1$2$3",createToken("HYPHENRANGE",`^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`),createToken("HYPHENRANGELOOSE",`^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`),createToken("STAR","(<|>)?=?\\s*\\*"),createToken("GTE0","^\\s*>=\\s*0\\.0\\.0\\s*$"),createToken("GTE0PRE","^\\s*>=\\s*0\\.0\\.0-0\\s*$");}(re$3,re$3.exports);const opts=["includePrerelease","loose","rtl"];var parseOptions_1=options=>options?"object"!=typeof options?{loose:!0}:opts.filter((k=>options[k])).reduce(((o,k)=>(o[k]=!0,o)),{}):{};const numeric=/^[0-9]+$/,compareIdentifiers$1=(a,b)=>{const anum=numeric.test(a),bnum=numeric.test(b);return anum&&bnum&&(a=+a,b=+b),a===b?0:anum&&!bnum?-1:bnum&&!anum?1:a<b?-1:1};var identifiers={compareIdentifiers:compareIdentifiers$1,rcompareIdentifiers:(a,b)=>compareIdentifiers$1(b,a)};const debug=debug_1,{MAX_LENGTH:MAX_LENGTH$1,MAX_SAFE_INTEGER}=constants,{re:re$2,t:t$2}=re$3.exports,parseOptions$1=parseOptions_1,{compareIdentifiers}=identifiers;class SemVer$c{constructor(version,options){if(options=parseOptions$1(options),version instanceof SemVer$c){if(version.loose===!!options.loose&&version.includePrerelease===!!options.includePrerelease)return version;version=version.version;}else if("string"!=typeof version)throw new TypeError(`Invalid Version: ${version}`);if(version.length>MAX_LENGTH$1)throw new TypeError(`version is longer than ${MAX_LENGTH$1} characters`);debug("SemVer",version,options),this.options=options,this.loose=!!options.loose,this.includePrerelease=!!options.includePrerelease;const m=version.trim().match(options.loose?re$2[t$2.LOOSE]:re$2[t$2.FULL]);if(!m)throw new TypeError(`Invalid Version: ${version}`);if(this.raw=version,this.major=+m[1],this.minor=+m[2],this.patch=+m[3],this.major>MAX_SAFE_INTEGER||this.major<0)throw new TypeError("Invalid major version");if(this.minor>MAX_SAFE_INTEGER||this.minor<0)throw new TypeError("Invalid minor version");if(this.patch>MAX_SAFE_INTEGER||this.patch<0)throw new TypeError("Invalid patch version");m[4]?this.prerelease=m[4].split(".").map((id=>{if(/^[0-9]+$/.test(id)){const num=+id;if(num>=0&&num<MAX_SAFE_INTEGER)return num}return id})):this.prerelease=[],this.build=m[5]?m[5].split("."):[],this.format();}format(){return this.version=`${this.major}.${this.minor}.${this.patch}`,this.prerelease.length&&(this.version+=`-${this.prerelease.join(".")}`),this.version}toString(){return this.version}compare(other){if(debug("SemVer.compare",this.version,this.options,other),!(other instanceof SemVer$c)){if("string"==typeof other&&other===this.version)return 0;other=new SemVer$c(other,this.options);}return other.version===this.version?0:this.compareMain(other)||this.comparePre(other)}compareMain(other){return other instanceof SemVer$c||(other=new SemVer$c(other,this.options)),compareIdentifiers(this.major,other.major)||compareIdentifiers(this.minor,other.minor)||compareIdentifiers(this.patch,other.patch)}comparePre(other){if(other instanceof SemVer$c||(other=new SemVer$c(other,this.options)),this.prerelease.length&&!other.prerelease.length)return -1;if(!this.prerelease.length&&other.prerelease.length)return 1;if(!this.prerelease.length&&!other.prerelease.length)return 0;let i=0;do{const a=this.prerelease[i],b=other.prerelease[i];if(debug("prerelease compare",i,a,b),void 0===a&&void 0===b)return 0;if(void 0===b)return 1;if(void 0===a)return -1;if(a!==b)return compareIdentifiers(a,b)}while(++i)}compareBuild(other){other instanceof SemVer$c||(other=new SemVer$c(other,this.options));let i=0;do{const a=this.build[i],b=other.build[i];if(debug("prerelease compare",i,a,b),void 0===a&&void 0===b)return 0;if(void 0===b)return 1;if(void 0===a)return -1;if(a!==b)return compareIdentifiers(a,b)}while(++i)}inc(release,identifier){switch(release){case"premajor":this.prerelease.length=0,this.patch=0,this.minor=0,this.major++,this.inc("pre",identifier);break;case"preminor":this.prerelease.length=0,this.patch=0,this.minor++,this.inc("pre",identifier);break;case"prepatch":this.prerelease.length=0,this.inc("patch",identifier),this.inc("pre",identifier);break;case"prerelease":0===this.prerelease.length&&this.inc("patch",identifier),this.inc("pre",identifier);break;case"major":0===this.minor&&0===this.patch&&0!==this.prerelease.length||this.major++,this.minor=0,this.patch=0,this.prerelease=[];break;case"minor":0===this.patch&&0!==this.prerelease.length||this.minor++,this.patch=0,this.prerelease=[];break;case"patch":0===this.prerelease.length&&this.patch++,this.prerelease=[];break;case"pre":if(0===this.prerelease.length)this.prerelease=[0];else {let i=this.prerelease.length;for(;--i>=0;)"number"==typeof this.prerelease[i]&&(this.prerelease[i]++,i=-2);-1===i&&this.prerelease.push(0);}identifier&&(0===compareIdentifiers(this.prerelease[0],identifier)?isNaN(this.prerelease[1])&&(this.prerelease=[identifier,0]):this.prerelease=[identifier,0]);break;default:throw new Error(`invalid increment argument: ${release}`)}return this.format(),this.raw=this.version,this}}var semver$2=SemVer$c;const{MAX_LENGTH}=constants,{re:re$1,t:t$1}=re$3.exports,SemVer$b=semver$2,parseOptions=parseOptions_1;var parse_1=(version,options)=>{if(options=parseOptions(options),version instanceof SemVer$b)return version;if("string"!=typeof version)return null;if(version.length>MAX_LENGTH)return null;if(!(options.loose?re$1[t$1.LOOSE]:re$1[t$1.FULL]).test(version))return null;try{return new SemVer$b(version,options)}catch(er){return null}};const parse$4=parse_1;var valid_1=(version,options)=>{const v=parse$4(version,options);return v?v.version:null};const parse$3=parse_1;var clean_1=(version,options)=>{const s=parse$3(version.trim().replace(/^[=v]+/,""),options);return s?s.version:null};const SemVer$a=semver$2;var inc_1=(version,release,options,identifier)=>{"string"==typeof options&&(identifier=options,options=void 0);try{return new SemVer$a(version instanceof SemVer$a?version.version:version,options).inc(release,identifier).version}catch(er){return null}};const SemVer$9=semver$2;var compare_1=(a,b,loose)=>new SemVer$9(a,loose).compare(new SemVer$9(b,loose));const compare$9=compare_1;var eq_1=(a,b,loose)=>0===compare$9(a,b,loose);const parse$2=parse_1,eq$1=eq_1;var diff_1=(version1,version2)=>{if(eq$1(version1,version2))return null;{const v1=parse$2(version1),v2=parse$2(version2),hasPre=v1.prerelease.length||v2.prerelease.length,prefix=hasPre?"pre":"",defaultResult=hasPre?"prerelease":"";for(const key in v1)if(("major"===key||"minor"===key||"patch"===key)&&v1[key]!==v2[key])return prefix+key;return defaultResult}};const SemVer$8=semver$2;var major_1=(a,loose)=>new SemVer$8(a,loose).major;const SemVer$7=semver$2;var minor_1=(a,loose)=>new SemVer$7(a,loose).minor;const SemVer$6=semver$2;var patch_1=(a,loose)=>new SemVer$6(a,loose).patch;const parse$1=parse_1;var prerelease_1=(version,options)=>{const parsed=parse$1(version,options);return parsed&&parsed.prerelease.length?parsed.prerelease:null};const compare$8=compare_1;var rcompare_1=(a,b,loose)=>compare$8(b,a,loose);const compare$7=compare_1;var compareLoose_1=(a,b)=>compare$7(a,b,!0);const SemVer$5=semver$2;var compareBuild_1=(a,b,loose)=>{const versionA=new SemVer$5(a,loose),versionB=new SemVer$5(b,loose);return versionA.compare(versionB)||versionA.compareBuild(versionB)};const compareBuild$1=compareBuild_1;var sort_1=(list,loose)=>list.sort(((a,b)=>compareBuild$1(a,b,loose)));const compareBuild=compareBuild_1;var rsort_1=(list,loose)=>list.sort(((a,b)=>compareBuild(b,a,loose)));const compare$6=compare_1;var gt_1=(a,b,loose)=>compare$6(a,b,loose)>0;const compare$5=compare_1;var lt_1=(a,b,loose)=>compare$5(a,b,loose)<0;const compare$4=compare_1;var neq_1=(a,b,loose)=>0!==compare$4(a,b,loose);const compare$3=compare_1;var gte_1=(a,b,loose)=>compare$3(a,b,loose)>=0;const compare$2=compare_1;var lte_1=(a,b,loose)=>compare$2(a,b,loose)<=0;const eq=eq_1,neq=neq_1,gt$2=gt_1,gte$1=gte_1,lt$1=lt_1,lte$1=lte_1;var cmp_1=(a,op,b,loose)=>{switch(op){case"===":return "object"==typeof a&&(a=a.version),"object"==typeof b&&(b=b.version),a===b;case"!==":return "object"==typeof a&&(a=a.version),"object"==typeof b&&(b=b.version),a!==b;case"":case"=":case"==":return eq(a,b,loose);case"!=":return neq(a,b,loose);case">":return gt$2(a,b,loose);case">=":return gte$1(a,b,loose);case"<":return lt$1(a,b,loose);case"<=":return lte$1(a,b,loose);default:throw new TypeError(`Invalid operator: ${op}`)}};const SemVer$4=semver$2,parse=parse_1,{re,t}=re$3.exports;var iterator,hasRequiredIterator,yallist,hasRequiredYallist,lruCache,hasRequiredLruCache,range,hasRequiredRange,comparator,hasRequiredComparator,coerce_1=(version,options)=>{if(version instanceof SemVer$4)return version;if("number"==typeof version&&(version=String(version)),"string"!=typeof version)return null;let match=null;if((options=options||{}).rtl){let next;for(;(next=re[t.COERCERTL].exec(version))&&(!match||match.index+match[0].length!==version.length);)match&&next.index+next[0].length===match.index+match[0].length||(match=next),re[t.COERCERTL].lastIndex=next.index+next[1].length+next[2].length;re[t.COERCERTL].lastIndex=-1;}else match=version.match(re[t.COERCE]);return null===match?null:parse(`${match[2]}.${match[3]||"0"}.${match[4]||"0"}`,options)};function requireYallist(){if(hasRequiredYallist)return yallist;function Yallist(list){var self=this;if(self instanceof Yallist||(self=new Yallist),self.tail=null,self.head=null,self.length=0,list&&"function"==typeof list.forEach)list.forEach((function(item){self.push(item);}));else if(arguments.length>0)for(var i=0,l=arguments.length;i<l;i++)self.push(arguments[i]);return self}function insert(self,node,value){var inserted=node===self.head?new Node(value,null,node,self):new Node(value,node,node.next,self);return null===inserted.next&&(self.tail=inserted),null===inserted.prev&&(self.head=inserted),self.length++,inserted}function push(self,item){self.tail=new Node(item,self.tail,null,self),self.head||(self.head=self.tail),self.length++;}function unshift(self,item){self.head=new Node(item,null,self.head,self),self.tail||(self.tail=self.head),self.length++;}function Node(value,prev,next,list){if(!(this instanceof Node))return new Node(value,prev,next,list);this.list=list,this.value=value,prev?(prev.next=this,this.prev=prev):this.prev=null,next?(next.prev=this,this.next=next):this.next=null;}hasRequiredYallist=1,yallist=Yallist,Yallist.Node=Node,Yallist.create=Yallist,Yallist.prototype.removeNode=function(node){if(node.list!==this)throw new Error("removing node which does not belong to this list");var next=node.next,prev=node.prev;return next&&(next.prev=prev),prev&&(prev.next=next),node===this.head&&(this.head=next),node===this.tail&&(this.tail=prev),node.list.length--,node.next=null,node.prev=null,node.list=null,next},Yallist.prototype.unshiftNode=function(node){if(node!==this.head){node.list&&node.list.removeNode(node);var head=this.head;node.list=this,node.next=head,head&&(head.prev=node),this.head=node,this.tail||(this.tail=node),this.length++;}},Yallist.prototype.pushNode=function(node){if(node!==this.tail){node.list&&node.list.removeNode(node);var tail=this.tail;node.list=this,node.prev=tail,tail&&(tail.next=node),this.tail=node,this.head||(this.head=node),this.length++;}},Yallist.prototype.push=function(){for(var i=0,l=arguments.length;i<l;i++)push(this,arguments[i]);return this.length},Yallist.prototype.unshift=function(){for(var i=0,l=arguments.length;i<l;i++)unshift(this,arguments[i]);return this.length},Yallist.prototype.pop=function(){if(this.tail){var res=this.tail.value;return this.tail=this.tail.prev,this.tail?this.tail.next=null:this.head=null,this.length--,res}},Yallist.prototype.shift=function(){if(this.head){var res=this.head.value;return this.head=this.head.next,this.head?this.head.prev=null:this.tail=null,this.length--,res}},Yallist.prototype.forEach=function(fn,thisp){thisp=thisp||this;for(var walker=this.head,i=0;null!==walker;i++)fn.call(thisp,walker.value,i,this),walker=walker.next;},Yallist.prototype.forEachReverse=function(fn,thisp){thisp=thisp||this;for(var walker=this.tail,i=this.length-1;null!==walker;i--)fn.call(thisp,walker.value,i,this),walker=walker.prev;},Yallist.prototype.get=function(n){for(var i=0,walker=this.head;null!==walker&&i<n;i++)walker=walker.next;if(i===n&&null!==walker)return walker.value},Yallist.prototype.getReverse=function(n){for(var i=0,walker=this.tail;null!==walker&&i<n;i++)walker=walker.prev;if(i===n&&null!==walker)return walker.value},Yallist.prototype.map=function(fn,thisp){thisp=thisp||this;for(var res=new Yallist,walker=this.head;null!==walker;)res.push(fn.call(thisp,walker.value,this)),walker=walker.next;return res},Yallist.prototype.mapReverse=function(fn,thisp){thisp=thisp||this;for(var res=new Yallist,walker=this.tail;null!==walker;)res.push(fn.call(thisp,walker.value,this)),walker=walker.prev;return res},Yallist.prototype.reduce=function(fn,initial){var acc,walker=this.head;if(arguments.length>1)acc=initial;else {if(!this.head)throw new TypeError("Reduce of empty list with no initial value");walker=this.head.next,acc=this.head.value;}for(var i=0;null!==walker;i++)acc=fn(acc,walker.value,i),walker=walker.next;return acc},Yallist.prototype.reduceReverse=function(fn,initial){var acc,walker=this.tail;if(arguments.length>1)acc=initial;else {if(!this.tail)throw new TypeError("Reduce of empty list with no initial value");walker=this.tail.prev,acc=this.tail.value;}for(var i=this.length-1;null!==walker;i--)acc=fn(acc,walker.value,i),walker=walker.prev;return acc},Yallist.prototype.toArray=function(){for(var arr=new Array(this.length),i=0,walker=this.head;null!==walker;i++)arr[i]=walker.value,walker=walker.next;return arr},Yallist.prototype.toArrayReverse=function(){for(var arr=new Array(this.length),i=0,walker=this.tail;null!==walker;i++)arr[i]=walker.value,walker=walker.prev;return arr},Yallist.prototype.slice=function(from,to){(to=to||this.length)<0&&(to+=this.length),(from=from||0)<0&&(from+=this.length);var ret=new Yallist;if(to<from||to<0)return ret;from<0&&(from=0),to>this.length&&(to=this.length);for(var i=0,walker=this.head;null!==walker&&i<from;i++)walker=walker.next;for(;null!==walker&&i<to;i++,walker=walker.next)ret.push(walker.value);return ret},Yallist.prototype.sliceReverse=function(from,to){(to=to||this.length)<0&&(to+=this.length),(from=from||0)<0&&(from+=this.length);var ret=new Yallist;if(to<from||to<0)return ret;from<0&&(from=0),to>this.length&&(to=this.length);for(var i=this.length,walker=this.tail;null!==walker&&i>to;i--)walker=walker.prev;for(;null!==walker&&i>from;i--,walker=walker.prev)ret.push(walker.value);return ret},Yallist.prototype.splice=function(start,deleteCount,...nodes){start>this.length&&(start=this.length-1),start<0&&(start=this.length+start);for(var i=0,walker=this.head;null!==walker&&i<start;i++)walker=walker.next;var ret=[];for(i=0;walker&&i<deleteCount;i++)ret.push(walker.value),walker=this.removeNode(walker);null===walker&&(walker=this.tail),walker!==this.head&&walker!==this.tail&&(walker=walker.prev);for(i=0;i<nodes.length;i++)walker=insert(this,walker,nodes[i]);return ret},Yallist.prototype.reverse=function(){for(var head=this.head,tail=this.tail,walker=head;null!==walker;walker=walker.prev){var p=walker.prev;walker.prev=walker.next,walker.next=p;}return this.head=tail,this.tail=head,this};try{(hasRequiredIterator?iterator:(hasRequiredIterator=1,iterator=function(Yallist){Yallist.prototype[Symbol.iterator]=function*(){for(let walker=this.head;walker;walker=walker.next)yield walker.value;};}))(Yallist);}catch(er){}return yallist}function requireRange(){if(hasRequiredRange)return range;hasRequiredRange=1;class Range{constructor(range,options){if(options=parseOptions(options),range instanceof Range)return range.loose===!!options.loose&&range.includePrerelease===!!options.includePrerelease?range:new Range(range.raw,options);if(range instanceof Comparator)return this.raw=range.value,this.set=[[range]],this.format(),this;if(this.options=options,this.loose=!!options.loose,this.includePrerelease=!!options.includePrerelease,this.raw=range,this.set=range.split("||").map((r=>this.parseRange(r.trim()))).filter((c=>c.length)),!this.set.length)throw new TypeError(`Invalid SemVer Range: ${range}`);if(this.set.length>1){const first=this.set[0];if(this.set=this.set.filter((c=>!isNullSet(c[0]))),0===this.set.length)this.set=[first];else if(this.set.length>1)for(const c of this.set)if(1===c.length&&isAny(c[0])){this.set=[c];break}}this.format();}format(){return this.range=this.set.map((comps=>comps.join(" ").trim())).join("||").trim(),this.range}toString(){return this.range}parseRange(range){range=range.trim();const memoKey=`parseRange:${Object.keys(this.options).join(",")}:${range}`,cached=cache.get(memoKey);if(cached)return cached;const loose=this.options.loose,hr=loose?re[t.HYPHENRANGELOOSE]:re[t.HYPHENRANGE];range=range.replace(hr,hyphenReplace(this.options.includePrerelease)),debug("hyphen replace",range),range=range.replace(re[t.COMPARATORTRIM],comparatorTrimReplace),debug("comparator trim",range);let rangeList=(range=(range=(range=range.replace(re[t.TILDETRIM],tildeTrimReplace)).replace(re[t.CARETTRIM],caretTrimReplace)).split(/\s+/).join(" ")).split(" ").map((comp=>parseComparator(comp,this.options))).join(" ").split(/\s+/).map((comp=>replaceGTE0(comp,this.options)));loose&&(rangeList=rangeList.filter((comp=>(debug("loose invalid filter",comp,this.options),!!comp.match(re[t.COMPARATORLOOSE]))))),debug("range list",rangeList);const rangeMap=new Map,comparators=rangeList.map((comp=>new Comparator(comp,this.options)));for(const comp of comparators){if(isNullSet(comp))return [comp];rangeMap.set(comp.value,comp);}rangeMap.size>1&&rangeMap.has("")&&rangeMap.delete("");const result=[...rangeMap.values()];return cache.set(memoKey,result),result}intersects(range,options){if(!(range instanceof Range))throw new TypeError("a Range is required");return this.set.some((thisComparators=>isSatisfiable(thisComparators,options)&&range.set.some((rangeComparators=>isSatisfiable(rangeComparators,options)&&thisComparators.every((thisComparator=>rangeComparators.every((rangeComparator=>thisComparator.intersects(rangeComparator,options)))))))))}test(version){if(!version)return !1;if("string"==typeof version)try{version=new SemVer(version,this.options);}catch(er){return !1}for(let i=0;i<this.set.length;i++)if(testSet(this.set[i],version,this.options))return !0;return !1}}range=Range;const LRU=function(){if(hasRequiredLruCache)return lruCache;hasRequiredLruCache=1;const Yallist=requireYallist(),MAX=Symbol("max"),LENGTH=Symbol("length"),LENGTH_CALCULATOR=Symbol("lengthCalculator"),ALLOW_STALE=Symbol("allowStale"),MAX_AGE=Symbol("maxAge"),DISPOSE=Symbol("dispose"),NO_DISPOSE_ON_SET=Symbol("noDisposeOnSet"),LRU_LIST=Symbol("lruList"),CACHE=Symbol("cache"),UPDATE_AGE_ON_GET=Symbol("updateAgeOnGet"),naiveLength=()=>1,get=(self,key,doUse)=>{const node=self[CACHE].get(key);if(node){const hit=node.value;if(isStale(self,hit)){if(del(self,node),!self[ALLOW_STALE])return}else doUse&&(self[UPDATE_AGE_ON_GET]&&(node.value.now=Date.now()),self[LRU_LIST].unshiftNode(node));return hit.value}},isStale=(self,hit)=>{if(!hit||!hit.maxAge&&!self[MAX_AGE])return !1;const diff=Date.now()-hit.now;return hit.maxAge?diff>hit.maxAge:self[MAX_AGE]&&diff>self[MAX_AGE]},trim=self=>{if(self[LENGTH]>self[MAX])for(let walker=self[LRU_LIST].tail;self[LENGTH]>self[MAX]&&null!==walker;){const prev=walker.prev;del(self,walker),walker=prev;}},del=(self,node)=>{if(node){const hit=node.value;self[DISPOSE]&&self[DISPOSE](hit.key,hit.value),self[LENGTH]-=hit.length,self[CACHE].delete(hit.key),self[LRU_LIST].removeNode(node);}};class Entry{constructor(key,value,length,now,maxAge){this.key=key,this.value=value,this.length=length,this.now=now,this.maxAge=maxAge||0;}}const forEachStep=(self,fn,node,thisp)=>{let hit=node.value;isStale(self,hit)&&(del(self,node),self[ALLOW_STALE]||(hit=void 0)),hit&&fn.call(thisp,hit.value,hit.key,self);};return lruCache=class{constructor(options){if("number"==typeof options&&(options={max:options}),options||(options={}),options.max&&("number"!=typeof options.max||options.max<0))throw new TypeError("max must be a non-negative number");this[MAX]=options.max||1/0;const lc=options.length||naiveLength;if(this[LENGTH_CALCULATOR]="function"!=typeof lc?naiveLength:lc,this[ALLOW_STALE]=options.stale||!1,options.maxAge&&"number"!=typeof options.maxAge)throw new TypeError("maxAge must be a number");this[MAX_AGE]=options.maxAge||0,this[DISPOSE]=options.dispose,this[NO_DISPOSE_ON_SET]=options.noDisposeOnSet||!1,this[UPDATE_AGE_ON_GET]=options.updateAgeOnGet||!1,this.reset();}set max(mL){if("number"!=typeof mL||mL<0)throw new TypeError("max must be a non-negative number");this[MAX]=mL||1/0,trim(this);}get max(){return this[MAX]}set allowStale(allowStale){this[ALLOW_STALE]=!!allowStale;}get allowStale(){return this[ALLOW_STALE]}set maxAge(mA){if("number"!=typeof mA)throw new TypeError("maxAge must be a non-negative number");this[MAX_AGE]=mA,trim(this);}get maxAge(){return this[MAX_AGE]}set lengthCalculator(lC){"function"!=typeof lC&&(lC=naiveLength),lC!==this[LENGTH_CALCULATOR]&&(this[LENGTH_CALCULATOR]=lC,this[LENGTH]=0,this[LRU_LIST].forEach((hit=>{hit.length=this[LENGTH_CALCULATOR](hit.value,hit.key),this[LENGTH]+=hit.length;}))),trim(this);}get lengthCalculator(){return this[LENGTH_CALCULATOR]}get length(){return this[LENGTH]}get itemCount(){return this[LRU_LIST].length}rforEach(fn,thisp){thisp=thisp||this;for(let walker=this[LRU_LIST].tail;null!==walker;){const prev=walker.prev;forEachStep(this,fn,walker,thisp),walker=prev;}}forEach(fn,thisp){thisp=thisp||this;for(let walker=this[LRU_LIST].head;null!==walker;){const next=walker.next;forEachStep(this,fn,walker,thisp),walker=next;}}keys(){return this[LRU_LIST].toArray().map((k=>k.key))}values(){return this[LRU_LIST].toArray().map((k=>k.value))}reset(){this[DISPOSE]&&this[LRU_LIST]&&this[LRU_LIST].length&&this[LRU_LIST].forEach((hit=>this[DISPOSE](hit.key,hit.value))),this[CACHE]=new Map,this[LRU_LIST]=new Yallist,this[LENGTH]=0;}dump(){return this[LRU_LIST].map((hit=>!isStale(this,hit)&&{k:hit.key,v:hit.value,e:hit.now+(hit.maxAge||0)})).toArray().filter((h=>h))}dumpLru(){return this[LRU_LIST]}set(key,value,maxAge){if((maxAge=maxAge||this[MAX_AGE])&&"number"!=typeof maxAge)throw new TypeError("maxAge must be a number");const now=maxAge?Date.now():0,len=this[LENGTH_CALCULATOR](value,key);if(this[CACHE].has(key)){if(len>this[MAX])return del(this,this[CACHE].get(key)),!1;const item=this[CACHE].get(key).value;return this[DISPOSE]&&(this[NO_DISPOSE_ON_SET]||this[DISPOSE](key,item.value)),item.now=now,item.maxAge=maxAge,item.value=value,this[LENGTH]+=len-item.length,item.length=len,this.get(key),trim(this),!0}const hit=new Entry(key,value,len,now,maxAge);return hit.length>this[MAX]?(this[DISPOSE]&&this[DISPOSE](key,value),!1):(this[LENGTH]+=hit.length,this[LRU_LIST].unshift(hit),this[CACHE].set(key,this[LRU_LIST].head),trim(this),!0)}has(key){if(!this[CACHE].has(key))return !1;const hit=this[CACHE].get(key).value;return !isStale(this,hit)}get(key){return get(this,key,!0)}peek(key){return get(this,key,!1)}pop(){const node=this[LRU_LIST].tail;return node?(del(this,node),node.value):null}del(key){del(this,this[CACHE].get(key));}load(arr){this.reset();const now=Date.now();for(let l=arr.length-1;l>=0;l--){const hit=arr[l],expiresAt=hit.e||0;if(0===expiresAt)this.set(hit.k,hit.v);else {const maxAge=expiresAt-now;maxAge>0&&this.set(hit.k,hit.v,maxAge);}}}prune(){this[CACHE].forEach(((value,key)=>get(this,key,!1)));}}}(),cache=new LRU({max:1e3}),parseOptions=parseOptions_1,Comparator=requireComparator(),debug=debug_1,SemVer=semver$2,{re,t,comparatorTrimReplace,tildeTrimReplace,caretTrimReplace}=re$3.exports,isNullSet=c=>"<0.0.0-0"===c.value,isAny=c=>""===c.value,isSatisfiable=(comparators,options)=>{let result=!0;const remainingComparators=comparators.slice();let testComparator=remainingComparators.pop();for(;result&&remainingComparators.length;)result=remainingComparators.every((otherComparator=>testComparator.intersects(otherComparator,options))),testComparator=remainingComparators.pop();return result},parseComparator=(comp,options)=>(debug("comp",comp,options),comp=replaceCarets(comp,options),debug("caret",comp),comp=replaceTildes(comp,options),debug("tildes",comp),comp=replaceXRanges(comp,options),debug("xrange",comp),comp=replaceStars(comp,options),debug("stars",comp),comp),isX=id=>!id||"x"===id.toLowerCase()||"*"===id,replaceTildes=(comp,options)=>comp.trim().split(/\s+/).map((c=>replaceTilde(c,options))).join(" "),replaceTilde=(comp,options)=>{const r=options.loose?re[t.TILDELOOSE]:re[t.TILDE];return comp.replace(r,((_,M,m,p,pr)=>{let ret;return debug("tilde",comp,_,M,m,p,pr),isX(M)?ret="":isX(m)?ret=`>=${M}.0.0 <${+M+1}.0.0-0`:isX(p)?ret=`>=${M}.${m}.0 <${M}.${+m+1}.0-0`:pr?(debug("replaceTilde pr",pr),ret=`>=${M}.${m}.${p}-${pr} <${M}.${+m+1}.0-0`):ret=`>=${M}.${m}.${p} <${M}.${+m+1}.0-0`,debug("tilde return",ret),ret}))},replaceCarets=(comp,options)=>comp.trim().split(/\s+/).map((c=>replaceCaret(c,options))).join(" "),replaceCaret=(comp,options)=>{debug("caret",comp,options);const r=options.loose?re[t.CARETLOOSE]:re[t.CARET],z=options.includePrerelease?"-0":"";return comp.replace(r,((_,M,m,p,pr)=>{let ret;return debug("caret",comp,_,M,m,p,pr),isX(M)?ret="":isX(m)?ret=`>=${M}.0.0${z} <${+M+1}.0.0-0`:isX(p)?ret="0"===M?`>=${M}.${m}.0${z} <${M}.${+m+1}.0-0`:`>=${M}.${m}.0${z} <${+M+1}.0.0-0`:pr?(debug("replaceCaret pr",pr),ret="0"===M?"0"===m?`>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p+1}-0`:`>=${M}.${m}.${p}-${pr} <${M}.${+m+1}.0-0`:`>=${M}.${m}.${p}-${pr} <${+M+1}.0.0-0`):(debug("no pr"),ret="0"===M?"0"===m?`>=${M}.${m}.${p}${z} <${M}.${m}.${+p+1}-0`:`>=${M}.${m}.${p}${z} <${M}.${+m+1}.0-0`:`>=${M}.${m}.${p} <${+M+1}.0.0-0`),debug("caret return",ret),ret}))},replaceXRanges=(comp,options)=>(debug("replaceXRanges",comp,options),comp.split(/\s+/).map((c=>replaceXRange(c,options))).join(" ")),replaceXRange=(comp,options)=>{comp=comp.trim();const r=options.loose?re[t.XRANGELOOSE]:re[t.XRANGE];return comp.replace(r,((ret,gtlt,M,m,p,pr)=>{debug("xRange",comp,ret,gtlt,M,m,p,pr);const xM=isX(M),xm=xM||isX(m),xp=xm||isX(p),anyX=xp;return "="===gtlt&&anyX&&(gtlt=""),pr=options.includePrerelease?"-0":"",xM?ret=">"===gtlt||"<"===gtlt?"<0.0.0-0":"*":gtlt&&anyX?(xm&&(m=0),p=0,">"===gtlt?(gtlt=">=",xm?(M=+M+1,m=0,p=0):(m=+m+1,p=0)):"<="===gtlt&&(gtlt="<",xm?M=+M+1:m=+m+1),"<"===gtlt&&(pr="-0"),ret=`${gtlt+M}.${m}.${p}${pr}`):xm?ret=`>=${M}.0.0${pr} <${+M+1}.0.0-0`:xp&&(ret=`>=${M}.${m}.0${pr} <${M}.${+m+1}.0-0`),debug("xRange return",ret),ret}))},replaceStars=(comp,options)=>(debug("replaceStars",comp,options),comp.trim().replace(re[t.STAR],"")),replaceGTE0=(comp,options)=>(debug("replaceGTE0",comp,options),comp.trim().replace(re[options.includePrerelease?t.GTE0PRE:t.GTE0],"")),hyphenReplace=incPr=>($0,from,fM,fm,fp,fpr,fb,to,tM,tm,tp,tpr,tb)=>`${from=isX(fM)?"":isX(fm)?`>=${fM}.0.0${incPr?"-0":""}`:isX(fp)?`>=${fM}.${fm}.0${incPr?"-0":""}`:fpr?`>=${from}`:`>=${from}${incPr?"-0":""}`} ${to=isX(tM)?"":isX(tm)?`<${+tM+1}.0.0-0`:isX(tp)?`<${tM}.${+tm+1}.0-0`:tpr?`<=${tM}.${tm}.${tp}-${tpr}`:incPr?`<${tM}.${tm}.${+tp+1}-0`:`<=${to}`}`.trim(),testSet=(set,version,options)=>{for(let i=0;i<set.length;i++)if(!set[i].test(version))return !1;if(version.prerelease.length&&!options.includePrerelease){for(let i=0;i<set.length;i++)if(debug(set[i].semver),set[i].semver!==Comparator.ANY&&set[i].semver.prerelease.length>0){const allowed=set[i].semver;if(allowed.major===version.major&&allowed.minor===version.minor&&allowed.patch===version.patch)return !0}return !1}return !0};return range}function requireComparator(){if(hasRequiredComparator)return comparator;hasRequiredComparator=1;const ANY=Symbol("SemVer ANY");class Comparator{static get ANY(){return ANY}constructor(comp,options){if(options=parseOptions(options),comp instanceof Comparator){if(comp.loose===!!options.loose)return comp;comp=comp.value;}debug("comparator",comp,options),this.options=options,this.loose=!!options.loose,this.parse(comp),this.semver===ANY?this.value="":this.value=this.operator+this.semver.version,debug("comp",this);}parse(comp){const r=this.options.loose?re[t.COMPARATORLOOSE]:re[t.COMPARATOR],m=comp.match(r);if(!m)throw new TypeError(`Invalid comparator: ${comp}`);this.operator=void 0!==m[1]?m[1]:"","="===this.operator&&(this.operator=""),m[2]?this.semver=new SemVer(m[2],this.options.loose):this.semver=ANY;}toString(){return this.value}test(version){if(debug("Comparator.test",version,this.options.loose),this.semver===ANY||version===ANY)return !0;if("string"==typeof version)try{version=new SemVer(version,this.options);}catch(er){return !1}return cmp(version,this.operator,this.semver,this.options)}intersects(comp,options){if(!(comp instanceof Comparator))throw new TypeError("a Comparator is required");if(options&&"object"==typeof options||(options={loose:!!options,includePrerelease:!1}),""===this.operator)return ""===this.value||new Range(comp.value,options).test(this.value);if(""===comp.operator)return ""===comp.value||new Range(this.value,options).test(comp.semver);const sameDirectionIncreasing=!(">="!==this.operator&&">"!==this.operator||">="!==comp.operator&&">"!==comp.operator),sameDirectionDecreasing=!("<="!==this.operator&&"<"!==this.operator||"<="!==comp.operator&&"<"!==comp.operator),sameSemVer=this.semver.version===comp.semver.version,differentDirectionsInclusive=!(">="!==this.operator&&"<="!==this.operator||">="!==comp.operator&&"<="!==comp.operator),oppositeDirectionsLessThan=cmp(this.semver,"<",comp.semver,options)&&(">="===this.operator||">"===this.operator)&&("<="===comp.operator||"<"===comp.operator),oppositeDirectionsGreaterThan=cmp(this.semver,">",comp.semver,options)&&("<="===this.operator||"<"===this.operator)&&(">="===comp.operator||">"===comp.operator);return sameDirectionIncreasing||sameDirectionDecreasing||sameSemVer&&differentDirectionsInclusive||oppositeDirectionsLessThan||oppositeDirectionsGreaterThan}}comparator=Comparator;const parseOptions=parseOptions_1,{re,t}=re$3.exports,cmp=cmp_1,debug=debug_1,SemVer=semver$2,Range=requireRange();return comparator}const Range$8=requireRange();var satisfies_1=(version,range,options)=>{try{range=new Range$8(range,options);}catch(er){return !1}return range.test(version)};const Range$7=requireRange();var toComparators_1=(range,options)=>new Range$7(range,options).set.map((comp=>comp.map((c=>c.value)).join(" ").trim().split(" ")));const SemVer$3=semver$2,Range$6=requireRange();var maxSatisfying_1=(versions,range,options)=>{let max=null,maxSV=null,rangeObj=null;try{rangeObj=new Range$6(range,options);}catch(er){return null}return versions.forEach((v=>{rangeObj.test(v)&&(max&&-1!==maxSV.compare(v)||(max=v,maxSV=new SemVer$3(max,options)));})),max};const SemVer$2=semver$2,Range$5=requireRange();var minSatisfying_1=(versions,range,options)=>{let min=null,minSV=null,rangeObj=null;try{rangeObj=new Range$5(range,options);}catch(er){return null}return versions.forEach((v=>{rangeObj.test(v)&&(min&&1!==minSV.compare(v)||(min=v,minSV=new SemVer$2(min,options)));})),min};const SemVer$1=semver$2,Range$4=requireRange(),gt$1=gt_1;var minVersion_1=(range,loose)=>{range=new Range$4(range,loose);let minver=new SemVer$1("0.0.0");if(range.test(minver))return minver;if(minver=new SemVer$1("0.0.0-0"),range.test(minver))return minver;minver=null;for(let i=0;i<range.set.length;++i){const comparators=range.set[i];let setMin=null;comparators.forEach((comparator=>{const compver=new SemVer$1(comparator.semver.version);switch(comparator.operator){case">":0===compver.prerelease.length?compver.patch++:compver.prerelease.push(0),compver.raw=compver.format();case"":case">=":setMin&&!gt$1(compver,setMin)||(setMin=compver);break;case"<":case"<=":break;default:throw new Error(`Unexpected operation: ${comparator.operator}`)}})),!setMin||minver&&!gt$1(minver,setMin)||(minver=setMin);}return minver&&range.test(minver)?minver:null};const Range$3=requireRange();var valid=(range,options)=>{try{return new Range$3(range,options).range||"*"}catch(er){return null}};const SemVer=semver$2,Comparator$1=requireComparator(),{ANY:ANY$1}=Comparator$1,Range$2=requireRange(),satisfies$2=satisfies_1,gt=gt_1,lt=lt_1,lte=lte_1,gte=gte_1;var outside_1=(version,range,hilo,options)=>{let gtfn,ltefn,ltfn,comp,ecomp;switch(version=new SemVer(version,options),range=new Range$2(range,options),hilo){case">":gtfn=gt,ltefn=lte,ltfn=lt,comp=">",ecomp=">=";break;case"<":gtfn=lt,ltefn=gte,ltfn=gt,comp="<",ecomp="<=";break;default:throw new TypeError('Must provide a hilo val of "<" or ">"')}if(satisfies$2(version,range,options))return !1;for(let i=0;i<range.set.length;++i){const comparators=range.set[i];let high=null,low=null;if(comparators.forEach((comparator=>{comparator.semver===ANY$1&&(comparator=new Comparator$1(">=0.0.0")),high=high||comparator,low=low||comparator,gtfn(comparator.semver,high.semver,options)?high=comparator:ltfn(comparator.semver,low.semver,options)&&(low=comparator);})),high.operator===comp||high.operator===ecomp)return !1;if((!low.operator||low.operator===comp)&&ltefn(version,low.semver))return !1;if(low.operator===ecomp&&ltfn(version,low.semver))return !1}return !0};const outside$1=outside_1;var gtr_1=(version,range,options)=>outside$1(version,range,">",options);const outside=outside_1;var ltr_1=(version,range,options)=>outside(version,range,"<",options);const Range$1=requireRange();var intersects_1=(r1,r2,options)=>(r1=new Range$1(r1,options),r2=new Range$1(r2,options),r1.intersects(r2));const satisfies$1=satisfies_1,compare$1=compare_1;const Range=requireRange(),Comparator=requireComparator(),{ANY}=Comparator,satisfies=satisfies_1,compare=compare_1,simpleSubset=(sub,dom,options)=>{if(sub===dom)return !0;if(1===sub.length&&sub[0].semver===ANY){if(1===dom.length&&dom[0].semver===ANY)return !0;sub=options.includePrerelease?[new Comparator(">=0.0.0-0")]:[new Comparator(">=0.0.0")];}if(1===dom.length&&dom[0].semver===ANY){if(options.includePrerelease)return !0;dom=[new Comparator(">=0.0.0")];}const eqSet=new Set;let gt,lt,gtltComp,higher,lower,hasDomLT,hasDomGT;for(const c of sub)">"===c.operator||">="===c.operator?gt=higherGT(gt,c,options):"<"===c.operator||"<="===c.operator?lt=lowerLT(lt,c,options):eqSet.add(c.semver);if(eqSet.size>1)return null;if(gt&&lt){if(gtltComp=compare(gt.semver,lt.semver,options),gtltComp>0)return null;if(0===gtltComp&&(">="!==gt.operator||"<="!==lt.operator))return null}for(const eq of eqSet){if(gt&&!satisfies(eq,String(gt),options))return null;if(lt&&!satisfies(eq,String(lt),options))return null;for(const c of dom)if(!satisfies(eq,String(c),options))return !1;return !0}let needDomLTPre=!(!lt||options.includePrerelease||!lt.semver.prerelease.length)&&lt.semver,needDomGTPre=!(!gt||options.includePrerelease||!gt.semver.prerelease.length)&&gt.semver;needDomLTPre&&1===needDomLTPre.prerelease.length&&"<"===lt.operator&&0===needDomLTPre.prerelease[0]&&(needDomLTPre=!1);for(const c of dom){if(hasDomGT=hasDomGT||">"===c.operator||">="===c.operator,hasDomLT=hasDomLT||"<"===c.operator||"<="===c.operator,gt)if(needDomGTPre&&c.semver.prerelease&&c.semver.prerelease.length&&c.semver.major===needDomGTPre.major&&c.semver.minor===needDomGTPre.minor&&c.semver.patch===needDomGTPre.patch&&(needDomGTPre=!1),">"===c.operator||">="===c.operator){if(higher=higherGT(gt,c,options),higher===c&&higher!==gt)return !1}else if(">="===gt.operator&&!satisfies(gt.semver,String(c),options))return !1;if(lt)if(needDomLTPre&&c.semver.prerelease&&c.semver.prerelease.length&&c.semver.major===needDomLTPre.major&&c.semver.minor===needDomLTPre.minor&&c.semver.patch===needDomLTPre.patch&&(needDomLTPre=!1),"<"===c.operator||"<="===c.operator){if(lower=lowerLT(lt,c,options),lower===c&&lower!==lt)return !1}else if("<="===lt.operator&&!satisfies(lt.semver,String(c),options))return !1;if(!c.operator&&(lt||gt)&&0!==gtltComp)return !1}return !(gt&&hasDomLT&&!lt&&0!==gtltComp)&&(!(lt&&hasDomGT&&!gt&&0!==gtltComp)&&(!needDomGTPre&&!needDomLTPre))},higherGT=(a,b,options)=>{if(!a)return b;const comp=compare(a.semver,b.semver,options);return comp>0?a:comp<0||">"===b.operator&&">="===a.operator?b:a},lowerLT=(a,b,options)=>{if(!a)return b;const comp=compare(a.semver,b.semver,options);return comp<0?a:comp>0||"<"===b.operator&&"<="===a.operator?b:a};var subset_1=(sub,dom,options={})=>{if(sub===dom)return !0;sub=new Range(sub,options),dom=new Range(dom,options);let sawNonNull=!1;OUTER:for(const simpleSub of sub.set){for(const simpleDom of dom.set){const isSub=simpleSubset(simpleSub,simpleDom,options);if(sawNonNull=sawNonNull||null!==isSub,isSub)continue OUTER}if(sawNonNull)return !1}return !0};const internalRe=re$3.exports;var semver$1={re:internalRe.re,src:internalRe.src,tokens:internalRe.t,SEMVER_SPEC_VERSION:constants.SEMVER_SPEC_VERSION,SemVer:semver$2,compareIdentifiers:identifiers.compareIdentifiers,rcompareIdentifiers:identifiers.rcompareIdentifiers,parse:parse_1,valid:valid_1,clean:clean_1,inc:inc_1,diff:diff_1,major:major_1,minor:minor_1,patch:patch_1,prerelease:prerelease_1,compare:compare_1,rcompare:rcompare_1,compareLoose:compareLoose_1,compareBuild:compareBuild_1,sort:sort_1,rsort:rsort_1,gt:gt_1,lt:lt_1,eq:eq_1,neq:neq_1,gte:gte_1,lte:lte_1,cmp:cmp_1,coerce:coerce_1,Comparator:requireComparator(),Range:requireRange(),satisfies:satisfies_1,toComparators:toComparators_1,maxSatisfying:maxSatisfying_1,minSatisfying:minSatisfying_1,minVersion:minVersion_1,validRange:valid,outside:outside_1,gtr:gtr_1,ltr:ltr_1,intersects:intersects_1,simplifyRange:(versions,range,options)=>{const set=[];let first=null,prev=null;const v=versions.sort(((a,b)=>compare$1(a,b,options)));for(const version of v){satisfies$1(version,range,options)?(prev=version,first||(first=version)):(prev&&set.push([first,prev]),prev=null,first=null);}first&&set.push([first,null]);const ranges=[];for(const[min,max]of set)min===max?ranges.push(min):max||min!==v[0]?max?min===v[0]?ranges.push(`<=${max}`):ranges.push(`${min} - ${max}`):ranges.push(`>=${min}`):ranges.push("*");const simplified=ranges.join(" || "),original="string"==typeof range.raw?range.raw:String(range);return simplified.length<original.length?simplified:range},subset:subset_1},semver=semver$1;const reader={read:function(jsonPath){return find(_path().dirname(jsonPath))}};function find(dir){try{return {string:_fs().default.readFileSync(_path().toNamespacedPath(_path().join(dir,"package.json")),"utf8")}}catch(error){if("ENOENT"===error.code){const parent=_path().dirname(dir);return dir!==parent?find(parent):{string:void 0}}throw error}}const isWindows="win32"===process.platform,own$1={}.hasOwnProperty,codes={},messages=new Map,nodeInternalPrefix="__node_internal_";let userStackTraceLimit;function createError(sym,value,def){return messages.set(sym,value),function(Base,key){return NodeError;function NodeError(...args){const limit=Error.stackTraceLimit;isErrorStackTraceLimitWritable()&&(Error.stackTraceLimit=0);const error=new Base;isErrorStackTraceLimitWritable()&&(Error.stackTraceLimit=limit);const message=function(key,args,self){const message=messages.get(key);if("function"==typeof message)return _assert()(message.length<=args.length,`Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${message.length}).`),Reflect.apply(message,self,args);const expectedLength=(message.match(/%[dfijoOs]/g)||[]).length;return _assert()(expectedLength===args.length,`Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`),0===args.length?message:(args.unshift(message),Reflect.apply(_util().format,null,args))}(key,args,error);return Object.defineProperty(error,"message",{value:message,enumerable:!1,writable:!0,configurable:!0}),Object.defineProperty(error,"toString",{value(){return `${this.name} [${key}]: ${this.message}`},enumerable:!1,writable:!0,configurable:!0}),addCodeToName(error,Base.name,key),error.code=key,error}}(def,sym)}codes.ERR_INVALID_MODULE_SPECIFIER=createError("ERR_INVALID_MODULE_SPECIFIER",((request,reason,base=undefined)=>`Invalid module "${request}" ${reason}${base?` imported from ${base}`:""}`),TypeError),codes.ERR_INVALID_PACKAGE_CONFIG=createError("ERR_INVALID_PACKAGE_CONFIG",((path,base,message)=>`Invalid package config ${path}${base?` while importing ${base}`:""}${message?`. ${message}`:""}`),Error),codes.ERR_INVALID_PACKAGE_TARGET=createError("ERR_INVALID_PACKAGE_TARGET",((pkgPath,key,target,isImport=!1,base=undefined)=>{const relError="string"==typeof target&&!isImport&&target.length>0&&!target.startsWith("./");return "."===key?(_assert()(!1===isImport),`Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${pkgPath}package.json${base?` imported from ${base}`:""}${relError?'; targets must start with "./"':""}`):`Invalid "${isImport?"imports":"exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${pkgPath}package.json${base?` imported from ${base}`:""}${relError?'; targets must start with "./"':""}`}),Error),codes.ERR_MODULE_NOT_FOUND=createError("ERR_MODULE_NOT_FOUND",((path,base,type="package")=>`Cannot find ${type} '${path}' imported from ${base}`),Error),codes.ERR_PACKAGE_IMPORT_NOT_DEFINED=createError("ERR_PACKAGE_IMPORT_NOT_DEFINED",((specifier,packagePath,base)=>`Package import specifier "${specifier}" is not defined${packagePath?` in package ${packagePath}package.json`:""} imported from ${base}`),TypeError),codes.ERR_PACKAGE_PATH_NOT_EXPORTED=createError("ERR_PACKAGE_PATH_NOT_EXPORTED",((pkgPath,subpath,base=undefined)=>"."===subpath?`No "exports" main defined in ${pkgPath}package.json${base?` imported from ${base}`:""}`:`Package subpath '${subpath}' is not defined by "exports" in ${pkgPath}package.json${base?` imported from ${base}`:""}`),Error),codes.ERR_UNSUPPORTED_DIR_IMPORT=createError("ERR_UNSUPPORTED_DIR_IMPORT","Directory import '%s' is not supported resolving ES modules imported from %s",Error),codes.ERR_UNKNOWN_FILE_EXTENSION=createError("ERR_UNKNOWN_FILE_EXTENSION",'Unknown file extension "%s" for %s',TypeError),codes.ERR_INVALID_ARG_VALUE=createError("ERR_INVALID_ARG_VALUE",((name,value,reason="is invalid")=>{let inspected=(0, _util().inspect)(value);inspected.length>128&&(inspected=`${inspected.slice(0,128)}...`);return `The ${name.includes(".")?"property":"argument"} '${name}' ${reason}. Received ${inspected}`}),TypeError),codes.ERR_UNSUPPORTED_ESM_URL_SCHEME=createError("ERR_UNSUPPORTED_ESM_URL_SCHEME",(url=>{let message="Only file and data URLs are supported by the default ESM loader";return isWindows&&2===url.protocol.length&&(message+=". On Windows, absolute paths must be valid file:// URLs"),message+=`. Received protocol '${url.protocol}'`,message}),Error);const addCodeToName=hideStackFrames((function(error,name,code){(error=captureLargerStackTrace(error)).name=`${name} [${code}]`,error.stack,"SystemError"===name?Object.defineProperty(error,"name",{value:name,enumerable:!1,writable:!0,configurable:!0}):delete error.name;}));function isErrorStackTraceLimitWritable(){const desc=Object.getOwnPropertyDescriptor(Error,"stackTraceLimit");return void 0===desc?Object.isExtensible(Error):own$1.call(desc,"writable")?desc.writable:void 0!==desc.set}function hideStackFrames(fn){const hidden=nodeInternalPrefix+fn.name;return Object.defineProperty(fn,"name",{value:hidden}),fn}const captureLargerStackTrace=hideStackFrames((function(error){const stackTraceLimitIsWritable=isErrorStackTraceLimitWritable();return stackTraceLimitIsWritable&&(userStackTraceLimit=Error.stackTraceLimit,Error.stackTraceLimit=Number.POSITIVE_INFINITY),Error.captureStackTrace(error),stackTraceLimitIsWritable&&(Error.stackTraceLimit=userStackTraceLimit),error}));const{ERR_UNKNOWN_FILE_EXTENSION}=codes,extensionFormatMap={__proto__:null,".cjs":"commonjs",".js":"module",".mjs":"module"};function defaultGetFormat(url){if(url.startsWith("node:"))return {format:"builtin"};const parsed=new(_url().URL)(url);if("data:"===parsed.protocol){const{1:mime}=/^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname)||[null,null];return {format:"text/javascript"===mime?"module":null}}if("file:"===parsed.protocol){const ext=_path().extname(parsed.pathname);let format;if(format=".js"===ext?"module"===function(url){const packageConfig=getPackageScopeConfig(url);return packageConfig.type}(parsed.href)?"module":"commonjs":extensionFormatMap[ext],!format)throw new ERR_UNKNOWN_FILE_EXTENSION(ext,(0, _url().fileURLToPath)(url));return {format:format||null}}return {format:null}}const listOfBuiltins=function({version=process.version,experimental=!1}={}){var coreModules=["assert","buffer","child_process","cluster","console","constants","crypto","dgram","dns","domain","events","fs","http","https","module","net","os","path","punycode","querystring","readline","repl","stream","string_decoder","sys","timers","tls","tty","url","util","vm","zlib"];return semver.lt(version,"6.0.0")&&coreModules.push("freelist"),semver.gte(version,"1.0.0")&&coreModules.push("v8"),semver.gte(version,"1.1.0")&&coreModules.push("process"),semver.gte(version,"8.0.0")&&coreModules.push("inspector"),semver.gte(version,"8.1.0")&&coreModules.push("async_hooks"),semver.gte(version,"8.4.0")&&coreModules.push("http2"),semver.gte(version,"8.5.0")&&coreModules.push("perf_hooks"),semver.gte(version,"10.0.0")&&coreModules.push("trace_events"),semver.gte(version,"10.5.0")&&(experimental||semver.gte(version,"12.0.0"))&&coreModules.push("worker_threads"),semver.gte(version,"12.16.0")&&experimental&&coreModules.push("wasi"),coreModules}(),{ERR_INVALID_MODULE_SPECIFIER,ERR_INVALID_PACKAGE_CONFIG,ERR_INVALID_PACKAGE_TARGET,ERR_MODULE_NOT_FOUND,ERR_PACKAGE_IMPORT_NOT_DEFINED,ERR_PACKAGE_PATH_NOT_EXPORTED,ERR_UNSUPPORTED_DIR_IMPORT,ERR_UNSUPPORTED_ESM_URL_SCHEME,ERR_INVALID_ARG_VALUE}=codes,own={}.hasOwnProperty,DEFAULT_CONDITIONS=Object.freeze(["node","import"]),DEFAULT_CONDITIONS_SET=new Set(DEFAULT_CONDITIONS),invalidSegmentRegEx=/(^|\\|\/)(\.\.?|node_modules)(\\|\/|$)/,patternRegEx=/\*/g,encodedSepRegEx=/%2f|%2c/i,emittedPackageWarnings=new Set,packageJsonCache=new Map;function emitFolderMapDeprecation(match,pjsonUrl,isExports,base){const pjsonPath=(0, _url().fileURLToPath)(pjsonUrl);emittedPackageWarnings.has(pjsonPath+"|"+match)||(emittedPackageWarnings.add(pjsonPath+"|"+match),process.emitWarning(`Use of deprecated folder mapping "${match}" in the ${isExports?'"exports"':'"imports"'} field module resolution of the package at ${pjsonPath}${base?` imported from ${(0, _url().fileURLToPath)(base)}`:""}.\nUpdate this package.json to use a subpath pattern like "${match}*".`,"DeprecationWarning","DEP0148"));}function emitLegacyIndexDeprecation(url,packageJsonUrl,base,main){const{format}=defaultGetFormat(url.href);if("module"!==format)return;const path=(0, _url().fileURLToPath)(url.href),pkgPath=(0, _url().fileURLToPath)(new(_url().URL)(".",packageJsonUrl)),basePath=(0, _url().fileURLToPath)(base);main?process.emitWarning(`Package ${pkgPath} has a "main" field set to ${JSON.stringify(main)}, excluding the full filename and extension to the resolved file at "${path.slice(pkgPath.length)}", imported from ${basePath}.\n Automatic extension resolution of the "main" field isdeprecated for ES modules.`,"DeprecationWarning","DEP0151"):process.emitWarning(`No "main" or "exports" field defined in the package.json for ${pkgPath} resolving the main entry point "${path.slice(pkgPath.length)}", imported from ${basePath}.\nDefault "index" lookups for the main are deprecated for ES modules.`,"DeprecationWarning","DEP0151");}function tryStatSync(path){try{return (0,_fs().statSync)(path)}catch(_unused){return new(_fs().Stats)}}function getPackageConfig(path,specifier,base){const existing=packageJsonCache.get(path);if(void 0!==existing)return existing;const source=reader.read(path).string;if(void 0===source){const packageConfig={pjsonPath:path,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return packageJsonCache.set(path,packageConfig),packageConfig}let packageJson;try{packageJson=JSON.parse(source);}catch(error){throw new ERR_INVALID_PACKAGE_CONFIG(path,(base?`"${specifier}" from `:"")+(0, _url().fileURLToPath)(base||specifier),error.message)}const{exports,imports,main,name,type}=packageJson,packageConfig={pjsonPath:path,exists:!0,main:"string"==typeof main?main:void 0,name:"string"==typeof name?name:void 0,type:"module"===type||"commonjs"===type?type:"none",exports,imports:imports&&"object"==typeof imports?imports:void 0};return packageJsonCache.set(path,packageConfig),packageConfig}function getPackageScopeConfig(resolved){let packageJsonUrl=new(_url().URL)("./package.json",resolved);for(;;){if(packageJsonUrl.pathname.endsWith("node_modules/package.json"))break;const packageConfig=getPackageConfig((0, _url().fileURLToPath)(packageJsonUrl),resolved);if(packageConfig.exists)return packageConfig;const lastPackageJsonUrl=packageJsonUrl;if(packageJsonUrl=new(_url().URL)("../package.json",packageJsonUrl),packageJsonUrl.pathname===lastPackageJsonUrl.pathname)break}const packageJsonPath=(0, _url().fileURLToPath)(packageJsonUrl),packageConfig={pjsonPath:packageJsonPath,exists:!1,main:void 0,name:void 0,type:"none",exports:void 0,imports:void 0};return packageJsonCache.set(packageJsonPath,packageConfig),packageConfig}function fileExists(url){return tryStatSync((0, _url().fileURLToPath)(url)).isFile()}function legacyMainResolve(packageJsonUrl,packageConfig,base){let guess;if(void 0!==packageConfig.main){if(guess=new(_url().URL)(`./${packageConfig.main}`,packageJsonUrl),fileExists(guess))return guess;const tries=[`./${packageConfig.main}.js`,`./${packageConfig.main}.json`,`./${packageConfig.main}.node`,`./${packageConfig.main}/index.js`,`./${packageConfig.main}/index.json`,`./${packageConfig.main}/index.node`];let i=-1;for(;++i<tries.length&&(guess=new(_url().URL)(tries[i],packageJsonUrl),!fileExists(guess));)guess=void 0;if(guess)return emitLegacyIndexDeprecation(guess,packageJsonUrl,base,packageConfig.main),guess}const tries=["./index.js","./index.json","./index.node"];let i=-1;for(;++i<tries.length&&(guess=new(_url().URL)(tries[i],packageJsonUrl),!fileExists(guess));)guess=void 0;if(guess)return emitLegacyIndexDeprecation(guess,packageJsonUrl,base,packageConfig.main),guess;throw new ERR_MODULE_NOT_FOUND((0, _url().fileURLToPath)(new(_url().URL)(".",packageJsonUrl)),(0, _url().fileURLToPath)(base))}function throwExportsNotFound(subpath,packageJsonUrl,base){throw new ERR_PACKAGE_PATH_NOT_EXPORTED((0, _url().fileURLToPath)(new(_url().URL)(".",packageJsonUrl)),subpath,base&&(0, _url().fileURLToPath)(base))}function throwInvalidPackageTarget(subpath,target,packageJsonUrl,internal,base){throw target="object"==typeof target&&null!==target?JSON.stringify(target,null,""):`${target}`,new ERR_INVALID_PACKAGE_TARGET((0, _url().fileURLToPath)(new(_url().URL)(".",packageJsonUrl)),subpath,target,internal,base&&(0, _url().fileURLToPath)(base))}function resolvePackageTargetString(target,subpath,match,packageJsonUrl,base,pattern,internal,conditions){if(""===subpath||pattern||"/"===target[target.length-1]||throwInvalidPackageTarget(match,target,packageJsonUrl,internal,base),!target.startsWith("./")){if(internal&&!target.startsWith("../")&&!target.startsWith("/")){let isURL=!1;try{new(_url().URL)(target),isURL=!0;}catch(_unused2){}if(!isURL){return packageResolve(pattern?target.replace(patternRegEx,subpath):target+subpath,packageJsonUrl,conditions)}}throwInvalidPackageTarget(match,target,packageJsonUrl,internal,base);}invalidSegmentRegEx.test(target.slice(2))&&throwInvalidPackageTarget(match,target,packageJsonUrl,internal,base);const resolved=new(_url().URL)(target,packageJsonUrl),resolvedPath=resolved.pathname,packagePath=new(_url().URL)(".",packageJsonUrl).pathname;return resolvedPath.startsWith(packagePath)||throwInvalidPackageTarget(match,target,packageJsonUrl,internal,base),""===subpath?resolved:(invalidSegmentRegEx.test(subpath)&&function(subpath,packageJsonUrl,internal,base){const reason=`request is not a valid subpath for the "${internal?"imports":"exports"}" resolution of ${(0, _url().fileURLToPath)(packageJsonUrl)}`;throw new ERR_INVALID_MODULE_SPECIFIER(subpath,reason,base&&(0, _url().fileURLToPath)(base))}(match+subpath,packageJsonUrl,internal,base),pattern?new(_url().URL)(resolved.href.replace(patternRegEx,subpath)):new(_url().URL)(subpath,resolved))}function isArrayIndex(key){const keyNumber=Number(key);return `${keyNumber}`===key&&(keyNumber>=0&&keyNumber<4294967295)}function resolvePackageTarget(packageJsonUrl,target,subpath,packageSubpath,base,pattern,internal,conditions){if("string"==typeof target)return resolvePackageTargetString(target,subpath,packageSubpath,packageJsonUrl,base,pattern,internal,conditions);if(Array.isArray(target)){const targetList=target;if(0===targetList.length)return null;let lastException,i=-1;for(;++i<targetList.length;){const targetItem=targetList[i];let resolved;try{resolved=resolvePackageTarget(packageJsonUrl,targetItem,subpath,packageSubpath,base,pattern,internal,conditions);}catch(error){if(lastException=error,"ERR_INVALID_PACKAGE_TARGET"===error.code)continue;throw error}if(void 0!==resolved){if(null!==resolved)return resolved;lastException=null;}}if(null==lastException)return lastException;throw lastException}if("object"!=typeof target||null===target){if(null===target)return null;throwInvalidPackageTarget(packageSubpath,target,packageJsonUrl,internal,base);}else {const keys=Object.getOwnPropertyNames(target);let i=-1;for(;++i<keys.length;){if(isArrayIndex(keys[i]))throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl),base,'"exports" cannot contain numeric property keys.')}for(i=-1;++i<keys.length;){const key=keys[i];if("default"===key||conditions&&conditions.has(key)){const resolved=resolvePackageTarget(packageJsonUrl,target[key],subpath,packageSubpath,base,pattern,internal,conditions);if(void 0===resolved)continue;return resolved}}}}function packageExportsResolve(packageJsonUrl,packageSubpath,packageConfig,base,conditions){let exports=packageConfig.exports;if(function(exports,packageJsonUrl,base){if("string"==typeof exports||Array.isArray(exports))return !0;if("object"!=typeof exports||null===exports)return !1;const keys=Object.getOwnPropertyNames(exports);let isConditionalSugar=!1,i=0,j=-1;for(;++j<keys.length;){const key=keys[j],curIsConditionalSugar=""===key||"."!==key[0];if(0==i++)isConditionalSugar=curIsConditionalSugar;else if(isConditionalSugar!==curIsConditionalSugar)throw new ERR_INVALID_PACKAGE_CONFIG((0, _url().fileURLToPath)(packageJsonUrl),base,"\"exports\" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.")}return isConditionalSugar}(exports,packageJsonUrl,base)&&(exports={".":exports}),own.call(exports,packageSubpath)){const resolved=resolvePackageTarget(packageJsonUrl,exports[packageSubpath],"",packageSubpath,base,!1,!1,conditions);return null==resolved&&throwExportsNotFound(packageSubpath,packageJsonUrl,base),{resolved,exact:!0}}let bestMatch="";const keys=Object.getOwnPropertyNames(exports);let i=-1;for(;++i<keys.length;){const key=keys[i];("*"===key[key.length-1]&&packageSubpath.startsWith(key.slice(0,-1))&&packageSubpath.length>=key.length&&key.length>bestMatch.length||"/"===key[key.length-1]&&packageSubpath.startsWith(key)&&key.length>bestMatch.length)&&(bestMatch=key);}if(bestMatch){const target=exports[bestMatch],pattern="*"===bestMatch[bestMatch.length-1],resolved=resolvePackageTarget(packageJsonUrl,target,packageSubpath.slice(bestMatch.length-(pattern?1:0)),bestMatch,base,pattern,!1,conditions);return null==resolved&&throwExportsNotFound(packageSubpath,packageJsonUrl,base),pattern||emitFolderMapDeprecation(bestMatch,packageJsonUrl,!0,base),{resolved,exact:pattern}}throwExportsNotFound(packageSubpath,packageJsonUrl,base);}function packageImportsResolve(name,base,conditions){if("#"===name||name.startsWith("#/")){throw new ERR_INVALID_MODULE_SPECIFIER(name,"is not a valid internal imports specifier name",(0, _url().fileURLToPath)(base))}let packageJsonUrl;const packageConfig=getPackageScopeConfig(base);if(packageConfig.exists){packageJsonUrl=(0, _url().pathToFileURL)(packageConfig.pjsonPath);const imports=packageConfig.imports;if(imports)if(own.call(imports,name)){const resolved=resolvePackageTarget(packageJsonUrl,imports[name],"",name,base,!1,!0,conditions);if(null!==resolved)return {resolved,exact:!0}}else {let bestMatch="";const keys=Object.getOwnPropertyNames(imports);let i=-1;for(;++i<keys.length;){const key=keys[i];("*"===key[key.length-1]&&name.startsWith(key.slice(0,-1))&&name.length>=key.length&&key.length>bestMatch.length||"/"===key[key.length-1]&&name.startsWith(key)&&key.length>bestMatch.length)&&(bestMatch=key);}if(bestMatch){const target=imports[bestMatch],pattern="*"===bestMatch[bestMatch.length-1],resolved=resolvePackageTarget(packageJsonUrl,target,name.slice(bestMatch.length-(pattern?1:0)),bestMatch,base,pattern,!0,conditions);if(null!==resolved)return pattern||emitFolderMapDeprecation(bestMatch,packageJsonUrl,!1,base),{resolved,exact:pattern}}}}!function(specifier,packageJsonUrl,base){throw new ERR_PACKAGE_IMPORT_NOT_DEFINED(specifier,packageJsonUrl&&(0, _url().fileURLToPath)(new(_url().URL)(".",packageJsonUrl)),(0, _url().fileURLToPath)(base))}(name,packageJsonUrl,base);}function packageResolve(specifier,base,conditions){const{packageName,packageSubpath,isScoped}=function(specifier,base){let separatorIndex=specifier.indexOf("/"),validPackageName=!0,isScoped=!1;"@"===specifier[0]&&(isScoped=!0,-1===separatorIndex||0===specifier.length?validPackageName=!1:separatorIndex=specifier.indexOf("/",separatorIndex+1));const packageName=-1===separatorIndex?specifier:specifier.slice(0,separatorIndex);let i=-1;for(;++i<packageName.length;)if("%"===packageName[i]||"\\"===packageName[i]){validPackageName=!1;break}if(!validPackageName)throw new ERR_INVALID_MODULE_SPECIFIER(specifier,"is not a valid package name",(0, _url().fileURLToPath)(base));return {packageName,packageSubpath:"."+(-1===separatorIndex?"":specifier.slice(separatorIndex)),isScoped}}(specifier,base),packageConfig=getPackageScopeConfig(base);if(packageConfig.exists){const packageJsonUrl=(0, _url().pathToFileURL)(packageConfig.pjsonPath);if(packageConfig.name===packageName&&void 0!==packageConfig.exports&&null!==packageConfig.exports)return packageExportsResolve(packageJsonUrl,packageSubpath,packageConfig,base,conditions).resolved}let lastPath,packageJsonUrl=new(_url().URL)("./node_modules/"+packageName+"/package.json",base),packageJsonPath=(0, _url().fileURLToPath)(packageJsonUrl);do{if(!tryStatSync(packageJsonPath.slice(0,-13)).isDirectory()){lastPath=packageJsonPath,packageJsonUrl=new(_url().URL)((isScoped?"../../../../node_modules/":"../../../node_modules/")+packageName+"/package.json",packageJsonUrl),packageJsonPath=(0, _url().fileURLToPath)(packageJsonUrl);continue}const packageConfig=getPackageConfig(packageJsonPath,specifier,base);return void 0!==packageConfig.exports&&null!==packageConfig.exports?packageExportsResolve(packageJsonUrl,packageSubpath,packageConfig,base,conditions).resolved:"."===packageSubpath?legacyMainResolve(packageJsonUrl,packageConfig,base):new(_url().URL)(packageSubpath,packageJsonUrl)}while(packageJsonPath.length!==lastPath.length);throw new ERR_MODULE_NOT_FOUND(packageName,(0, _url().fileURLToPath)(base))}function moduleResolve(specifier,base,conditions){let resolved;if(function(specifier){return ""!==specifier&&("/"===specifier[0]||function(specifier){if("."===specifier[0]){if(1===specifier.length||"/"===specifier[1])return !0;if("."===specifier[1]&&(2===specifier.length||"/"===specifier[2]))return !0}return !1}(specifier))}(specifier))resolved=new(_url().URL)(specifier,base);else if("#"===specifier[0])({resolved}=packageImportsResolve(specifier,base,conditions));else try{resolved=new(_url().URL)(specifier);}catch(_unused3){resolved=packageResolve(specifier,base,conditions);}return function(resolved,base){if(encodedSepRegEx.test(resolved.pathname))throw new ERR_INVALID_MODULE_SPECIFIER(resolved.pathname,'must not include encoded "/" or "\\" characters',(0, _url().fileURLToPath)(base));const path=(0, _url().fileURLToPath)(resolved),stats=tryStatSync(path.endsWith("/")?path.slice(-1):path);if(stats.isDirectory()){const error=new ERR_UNSUPPORTED_DIR_IMPORT(path,(0, _url().fileURLToPath)(base));throw error.url=String(resolved),error}if(!stats.isFile())throw new ERR_MODULE_NOT_FOUND(path||resolved.pathname,base&&(0, _url().fileURLToPath)(base),"module");return resolved}(resolved,base)}function defaultResolve(specifier,context={}){const{parentURL}=context;let parsed;try{if(parsed=new(_url().URL)(specifier),"data:"===parsed.protocol)return {url:specifier}}catch(_unused4){}if(parsed&&"node:"===parsed.protocol)return {url:specifier};if(parsed&&"file:"!==parsed.protocol&&"data:"!==parsed.protocol)throw new ERR_UNSUPPORTED_ESM_URL_SCHEME(parsed);if(listOfBuiltins.includes(specifier))return {url:"node:"+specifier};parentURL.startsWith("data:")&&new(_url().URL)(specifier,parentURL);const conditions=function(conditions){if(void 0!==conditions&&conditions!==DEFAULT_CONDITIONS){if(!Array.isArray(conditions))throw new ERR_INVALID_ARG_VALUE("conditions",conditions,"expected an array");return new Set(conditions)}return DEFAULT_CONDITIONS_SET}(context.conditions);let url=moduleResolve(specifier,new(_url().URL)(parentURL),conditions);const urlPath=(0, _url().fileURLToPath)(url),real=(0, _fs().realpathSync)(urlPath),old=url;return url=(0, _url().pathToFileURL)(real+(urlPath.endsWith(_path().sep)?"/":"")),url.search=old.search,url.hash=old.hash,{url:`${url}`}}function _resolve(){var fn;return fn=function*(specifier,parent){if(!parent)throw new Error("Please pass `parent`: `import-meta-resolve` cannot ponyfill that");try{return defaultResolve(specifier,{parentURL:parent}).url}catch(error){return "ERR_UNSUPPORTED_DIR_IMPORT"===error.code?error.url:Promise.reject(error)}},_resolve=function(){var self=this,args=arguments;return new Promise((function(resolve,reject){var gen=fn.apply(self,args);function _next(value){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"next",value);}function _throw(err){asyncGeneratorStep(gen,resolve,reject,_next,_throw,"throw",err);}_next(void 0);}))},_resolve.apply(this,arguments)}},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/buffer.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;exports.default=class{constructor(map){this._map=null,this._buf="",this._str="",this._appendCount=0,this._last=0,this._queue=[],this._queueCursor=0,this._canMarkIdName=!0,this._position={line:1,column:0},this._sourcePosition={identifierName:void 0,identifierNamePos:void 0,line:void 0,column:void 0,filename:void 0},this._map=map,this._allocQueue();}_allocQueue(){const queue=this._queue;for(let i=0;i<16;i++)queue.push({char:0,repeat:1,line:void 0,column:void 0,identifierName:void 0,identifierNamePos:void 0,filename:""});}_pushQueue(char,repeat,line,column,filename){const cursor=this._queueCursor;cursor===this._queue.length&&this._allocQueue();const item=this._queue[cursor];item.char=char,item.repeat=repeat,item.line=line,item.column=column,item.filename=filename,this._queueCursor++;}_popQueue(){if(0===this._queueCursor)throw new Error("Cannot pop from empty queue");return this._queue[--this._queueCursor]}get(){this._flush();const map=this._map,result={code:(this._buf+this._str).trimRight(),decodedMap:null==map?void 0:map.getDecoded(),get __mergedMap(){return this.map},get map(){const resultMap=map?map.get():null;return result.map=resultMap,resultMap},set map(value){Object.defineProperty(result,"map",{value,writable:!0});},get rawMappings(){const mappings=null==map?void 0:map.getRawMappings();return result.rawMappings=mappings,mappings},set rawMappings(value){Object.defineProperty(result,"rawMappings",{value,writable:!0});}};return result}append(str,maybeNewline){this._flush(),this._append(str,this._sourcePosition,maybeNewline);}appendChar(char){this._flush(),this._appendChar(char,1,this._sourcePosition);}queue(char){if(10===char)for(;0!==this._queueCursor;){const char=this._queue[this._queueCursor-1].char;if(32!==char&&9!==char)break;this._queueCursor--;}const sourcePosition=this._sourcePosition;this._pushQueue(char,1,sourcePosition.line,sourcePosition.column,sourcePosition.filename);}queueIndentation(char,repeat){this._pushQueue(char,repeat,void 0,void 0,void 0);}_flush(){const queueCursor=this._queueCursor,queue=this._queue;for(let i=0;i<queueCursor;i++){const item=queue[i];this._appendChar(item.char,item.repeat,item);}this._queueCursor=0;}_appendChar(char,repeat,sourcePos){this._last=char,this._str+=repeat>1?String.fromCharCode(char).repeat(repeat):String.fromCharCode(char),10!==char?(this._mark(sourcePos.line,sourcePos.column,sourcePos.identifierName,sourcePos.identifierNamePos,sourcePos.filename),this._position.column+=repeat):(this._position.line++,this._position.column=0),this._canMarkIdName&&(sourcePos.identifierName=void 0,sourcePos.identifierNamePos=void 0);}_append(str,sourcePos,maybeNewline){const len=str.length,position=this._position;if(this._last=str.charCodeAt(len-1),++this._appendCount>4096?(this._str,this._buf+=this._str,this._str=str,this._appendCount=0):this._str+=str,!maybeNewline&&!this._map)return void(position.column+=len);const{column,identifierName,identifierNamePos,filename}=sourcePos;let line=sourcePos.line;null==identifierName&&null==identifierNamePos||!this._canMarkIdName||(sourcePos.identifierName=void 0,sourcePos.identifierNamePos=void 0);let i=str.indexOf("\n"),last=0;for(0!==i&&this._mark(line,column,identifierName,identifierNamePos,filename);-1!==i;)position.line++,position.column=0,last=i+1,last<len&&void 0!==line&&this._mark(++line,0,null,null,filename),i=str.indexOf("\n",last);position.column+=len-last;}_mark(line,column,identifierName,identifierNamePos,filename){var _this$_map;null==(_this$_map=this._map)||_this$_map.mark(this._position,line,column,identifierName,identifierNamePos,filename);}removeTrailingNewline(){const queueCursor=this._queueCursor;0!==queueCursor&&10===this._queue[queueCursor-1].char&&this._queueCursor--;}removeLastSemicolon(){const queueCursor=this._queueCursor;0!==queueCursor&&59===this._queue[queueCursor-1].char&&this._queueCursor--;}getLastChar(){const queueCursor=this._queueCursor;return 0!==queueCursor?this._queue[queueCursor-1].char:this._last}getNewlineCount(){const queueCursor=this._queueCursor;let count=0;if(0===queueCursor)return 10===this._last?1:0;for(let i=queueCursor-1;i>=0&&10===this._queue[i].char;i--)count++;return count===queueCursor&&10===this._last?count+1:count}endsWithCharAndNewline(){const queue=this._queue,queueCursor=this._queueCursor;if(0!==queueCursor){if(10!==queue[queueCursor-1].char)return;return queueCursor>1?queue[queueCursor-2].char:this._last}}hasContent(){return 0!==this._queueCursor||!!this._last}exactSource(loc,cb){if(!this._map)return void cb();this.source("start",loc);const identifierName=loc.identifierName,sourcePos=this._sourcePosition;identifierName&&(this._canMarkIdName=!1,sourcePos.identifierName=identifierName),cb(),identifierName&&(this._canMarkIdName=!0,sourcePos.identifierName=void 0,sourcePos.identifierNamePos=void 0),this.source("end",loc);}source(prop,loc){this._map&&this._normalizePosition(prop,loc,0,0);}sourceWithOffset(prop,loc,lineOffset,columnOffset){this._map&&this._normalizePosition(prop,loc,lineOffset,columnOffset);}withSource(prop,loc,cb){this._map&&this.source(prop,loc),cb();}_normalizePosition(prop,loc,lineOffset,columnOffset){const pos=loc[prop],target=this._sourcePosition;pos&&(target.line=pos.line+lineOffset,target.column=pos.column+columnOffset,target.filename=loc.filename);}getCurrentColumn(){const queue=this._queue,queueCursor=this._queueCursor;let lastIndex=-1,len=0;for(let i=0;i<queueCursor;i++){const item=queue[i];10===item.char&&(lastIndex=len),len+=item.repeat;}return -1===lastIndex?this._position.column+len:len-1-lastIndex}getCurrentLine(){let count=0;const queue=this._queue;for(let i=0;i<this._queueCursor;i++)10===queue[i].char&&count++;return this._position.line+count}};},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/base.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.BlockStatement=function(node){var _node$directives2;this.tokenChar(123);const directivesLen=null==(_node$directives2=node.directives)?void 0:_node$directives2.length;if(directivesLen){var _node$directives$trai2;const newline=node.body.length?2:1;this.printSequence(node.directives,node,{indent:!0,trailingCommentsLineOffset:newline}),null!=(_node$directives$trai2=node.directives[directivesLen-1].trailingComments)&&_node$directives$trai2.length||this.newline(newline);}this.printSequence(node.body,node,{indent:!0}),this.sourceWithOffset("end",node.loc,0,-1),this.rightBrace();},exports.Directive=function(node){this.print(node.value,node),this.semicolon();},exports.DirectiveLiteral=function(node){const raw=this.getPossibleRaw(node);if(!this.format.minified&&void 0!==raw)return void this.token(raw);const{value}=node;if(unescapedDoubleQuoteRE.test(value)){if(unescapedSingleQuoteRE.test(value))throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");this.token(`'${value}'`);}else this.token(`"${value}"`);},exports.File=function(node){node.program&&this.print(node.program.interpreter,node);this.print(node.program,node);},exports.InterpreterDirective=function(node){this.token(`#!${node.value}`),this.newline(1,!0);},exports.Placeholder=function(node){this.token("%%"),this.print(node.name),this.token("%%"),"Statement"===node.expectedNode&&this.semicolon();},exports.Program=function(node){var _node$directives;this.noIndentInnerCommentsHere(),this.printInnerComments();const directivesLen=null==(_node$directives=node.directives)?void 0:_node$directives.length;if(directivesLen){var _node$directives$trai;const newline=node.body.length?2:1;this.printSequence(node.directives,node,{trailingCommentsLineOffset:newline}),null!=(_node$directives$trai=node.directives[directivesLen-1].trailingComments)&&_node$directives$trai.length||this.newline(newline);}this.printSequence(node.body,node);};const unescapedSingleQuoteRE=/(?:^|[^\\])(?:\\\\)*'/,unescapedDoubleQuoteRE=/(?:^|[^\\])(?:\\\\)*"/;},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/classes.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.ClassAccessorProperty=function(node){var _node$key$loc2,_node$key$loc2$end;this.printJoin(node.decorators,node);const endLine=null==(_node$key$loc2=node.key.loc)||null==(_node$key$loc2$end=_node$key$loc2.end)?void 0:_node$key$loc2$end.line;endLine&&this.catchUp(endLine);this.tsPrintClassMemberModifiers(node),this.word("accessor",!0),this.space(),node.computed?(this.tokenChar(91),this.print(node.key,node),this.tokenChar(93)):(this._variance(node),this.print(node.key,node));node.optional&&this.tokenChar(63);node.definite&&this.tokenChar(33);this.print(node.typeAnnotation,node),node.value&&(this.space(),this.tokenChar(61),this.space(),this.print(node.value,node));this.semicolon();},exports.ClassBody=function(node){this.tokenChar(123),0===node.body.length?this.tokenChar(125):(this.newline(),this.indent(),this.printSequence(node.body,node),this.dedent(),this.endsWith(10)||this.newline(),this.sourceWithOffset("end",node.loc,0,-1),this.rightBrace());},exports.ClassExpression=exports.ClassDeclaration=function(node,parent){(isExportDefaultDeclaration(parent)||isExportNamedDeclaration(parent))&&this._shouldPrintDecoratorsBeforeExport(parent)||this.printJoin(node.decorators,node);node.declare&&(this.word("declare"),this.space());node.abstract&&(this.word("abstract"),this.space());this.word("class"),node.id&&(this.space(),this.print(node.id,node));this.print(node.typeParameters,node),node.superClass&&(this.space(),this.word("extends"),this.space(),this.print(node.superClass,node),this.print(node.superTypeParameters,node));node.implements&&(this.space(),this.word("implements"),this.space(),this.printList(node.implements,node));this.space(),this.print(node.body,node);},exports.ClassMethod=function(node){this._classMethodHead(node),this.space(),this.print(node.body,node);},exports.ClassPrivateMethod=function(node){this._classMethodHead(node),this.space(),this.print(node.body,node);},exports.ClassPrivateProperty=function(node){this.printJoin(node.decorators,node),node.static&&(this.word("static"),this.space());this.print(node.key,node),this.print(node.typeAnnotation,node),node.value&&(this.space(),this.tokenChar(61),this.space(),this.print(node.value,node));this.semicolon();},exports.ClassProperty=function(node){var _node$key$loc,_node$key$loc$end;this.printJoin(node.decorators,node);const endLine=null==(_node$key$loc=node.key.loc)||null==(_node$key$loc$end=_node$key$loc.end)?void 0:_node$key$loc$end.line;endLine&&this.catchUp(endLine);this.tsPrintClassMemberModifiers(node),node.computed?(this.tokenChar(91),this.print(node.key,node),this.tokenChar(93)):(this._variance(node),this.print(node.key,node));node.optional&&this.tokenChar(63);node.definite&&this.tokenChar(33);this.print(node.typeAnnotation,node),node.value&&(this.space(),this.tokenChar(61),this.space(),this.print(node.value,node));this.semicolon();},exports.StaticBlock=function(node){this.word("static"),this.space(),this.tokenChar(123),0===node.body.length?this.tokenChar(125):(this.newline(),this.printSequence(node.body,node,{indent:!0}),this.sourceWithOffset("end",node.loc,0,-1),this.rightBrace());},exports._classMethodHead=function(node){var _node$key$loc3,_node$key$loc3$end;this.printJoin(node.decorators,node);const endLine=null==(_node$key$loc3=node.key.loc)||null==(_node$key$loc3$end=_node$key$loc3.end)?void 0:_node$key$loc3$end.line;endLine&&this.catchUp(endLine);this.tsPrintClassMemberModifiers(node),this._methodHead(node);};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{isExportDefaultDeclaration,isExportNamedDeclaration}=_t;},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/expressions.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.LogicalExpression=exports.BinaryExpression=exports.AssignmentExpression=function(node,parent){const parens=this.inForStatementInitCounter&&"in"===node.operator&&!n.needsParens(node,parent);parens&&this.tokenChar(40);this.print(node.left,node),this.space(),"in"===node.operator||"instanceof"===node.operator?this.word(node.operator):this.token(node.operator);this.space(),this.print(node.right,node),parens&&this.tokenChar(41);},exports.AssignmentPattern=function(node){this.print(node.left,node),node.left.optional&&this.tokenChar(63);this.print(node.left.typeAnnotation,node),this.space(),this.tokenChar(61),this.space(),this.print(node.right,node);},exports.AwaitExpression=function(node){this.word("await"),node.argument&&(this.space(),this.printTerminatorless(node.argument,node,!1));},exports.BindExpression=function(node){this.print(node.object,node),this.token("::"),this.print(node.callee,node);},exports.CallExpression=function(node){this.print(node.callee,node),this.print(node.typeArguments,node),this.print(node.typeParameters,node),this.tokenChar(40),this.printList(node.arguments,node),this.tokenChar(41);},exports.ConditionalExpression=function(node){this.print(node.test,node),this.space(),this.tokenChar(63),this.space(),this.print(node.consequent,node),this.space(),this.tokenChar(58),this.space(),this.print(node.alternate,node);},exports.Decorator=function(node){this.tokenChar(64);const{expression}=node;!function(node){if("ParenthesizedExpression"===node.type)return !1;return !isDecoratorMemberExpression("CallExpression"===node.type?node.callee:node)}(expression)?this.print(expression,node):(this.tokenChar(40),this.print(expression,node),this.tokenChar(41));this.newline();},exports.DoExpression=function(node){node.async&&(this.word("async",!0),this.space());this.word("do"),this.space(),this.print(node.body,node);},exports.EmptyStatement=function(){this.semicolon(!0);},exports.ExpressionStatement=function(node){this.print(node.expression,node),this.semicolon();},exports.Import=function(){this.word("import");},exports.MemberExpression=function(node){if(this.print(node.object,node),!node.computed&&isMemberExpression(node.property))throw new TypeError("Got a MemberExpression for MemberExpression property");let computed=node.computed;isLiteral(node.property)&&"number"==typeof node.property.value&&(computed=!0);computed?(this.tokenChar(91),this.print(node.property,node),this.tokenChar(93)):(this.tokenChar(46),this.print(node.property,node));},exports.MetaProperty=function(node){this.print(node.meta,node),this.tokenChar(46),this.print(node.property,node);},exports.ModuleExpression=function(node){this.word("module",!0),this.space(),this.tokenChar(123),this.indent();const{body}=node;(body.body.length||body.directives.length)&&this.newline();this.print(body,node),this.dedent(),this.sourceWithOffset("end",node.loc,0,-1),this.rightBrace();},exports.NewExpression=function(node,parent){if(this.word("new"),this.space(),this.print(node.callee,node),this.format.minified&&0===node.arguments.length&&!node.optional&&!isCallExpression(parent,{callee:node})&&!isMemberExpression(parent)&&!isNewExpression(parent))return;this.print(node.typeArguments,node),this.print(node.typeParameters,node),node.optional&&this.token("?.");this.tokenChar(40),this.printList(node.arguments,node),this.tokenChar(41);},exports.OptionalCallExpression=function(node){this.print(node.callee,node),this.print(node.typeParameters,node),node.optional&&this.token("?.");this.print(node.typeArguments,node),this.tokenChar(40),this.printList(node.arguments,node),this.tokenChar(41);},exports.OptionalMemberExpression=function(node){if(this.print(node.object,node),!node.computed&&isMemberExpression(node.property))throw new TypeError("Got a MemberExpression for MemberExpression property");let computed=node.computed;isLiteral(node.property)&&"number"==typeof node.property.value&&(computed=!0);node.optional&&this.token("?.");computed?(this.tokenChar(91),this.print(node.property,node),this.tokenChar(93)):(node.optional||this.tokenChar(46),this.print(node.property,node));},exports.ParenthesizedExpression=function(node){this.tokenChar(40),this.print(node.expression,node),this.tokenChar(41);},exports.PrivateName=function(node){this.tokenChar(35),this.print(node.id,node);},exports.SequenceExpression=function(node){this.printList(node.expressions,node);},exports.Super=function(){this.word("super");},exports.ThisExpression=function(){this.word("this");},exports.UnaryExpression=function(node){"void"===node.operator||"delete"===node.operator||"typeof"===node.operator||"throw"===node.operator?(this.word(node.operator),this.space()):this.token(node.operator);this.print(node.argument,node);},exports.UpdateExpression=function(node){node.prefix?(this.token(node.operator),this.print(node.argument,node)):(this.printTerminatorless(node.argument,node,!0),this.token(node.operator));},exports.V8IntrinsicIdentifier=function(node){this.tokenChar(37),this.word(node.name);},exports.YieldExpression=function(node){this.word("yield",!0),node.delegate?(this.tokenChar(42),node.argument&&(this.space(),this.print(node.argument,node))):node.argument&&(this.space(),this.printTerminatorless(node.argument,node,!1));},exports._shouldPrintDecoratorsBeforeExport=function(node){if("boolean"==typeof this.format.decoratorsBeforeExport)return this.format.decoratorsBeforeExport;return "number"==typeof node.start&&node.start===node.declaration.start};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),n=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/index.js");const{isCallExpression,isLiteral,isMemberExpression,isNewExpression}=_t;function isDecoratorMemberExpression(node){switch(node.type){case"Identifier":return !0;case"MemberExpression":return !node.computed&&"Identifier"===node.property.type&&isDecoratorMemberExpression(node.object);default:return !1}}},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/flow.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.AnyTypeAnnotation=function(){this.word("any");},exports.ArrayTypeAnnotation=function(node){this.print(node.elementType,node,!0),this.tokenChar(91),this.tokenChar(93);},exports.BooleanLiteralTypeAnnotation=function(node){this.word(node.value?"true":"false");},exports.BooleanTypeAnnotation=function(){this.word("boolean");},exports.DeclareClass=function(node,parent){isDeclareExportDeclaration(parent)||(this.word("declare"),this.space());this.word("class"),this.space(),this._interfaceish(node);},exports.DeclareExportAllDeclaration=function(node){this.word("declare"),this.space(),_modules.ExportAllDeclaration.call(this,node);},exports.DeclareExportDeclaration=function(node){this.word("declare"),this.space(),this.word("export"),this.space(),node.default&&(this.word("default"),this.space());FlowExportDeclaration.call(this,node);},exports.DeclareFunction=function(node,parent){isDeclareExportDeclaration(parent)||(this.word("declare"),this.space());this.word("function"),this.space(),this.print(node.id,node),this.print(node.id.typeAnnotation.typeAnnotation,node),node.predicate&&(this.space(),this.print(node.predicate,node));this.semicolon();},exports.DeclareInterface=function(node){this.word("declare"),this.space(),this.InterfaceDeclaration(node);},exports.DeclareModule=function(node){this.word("declare"),this.space(),this.word("module"),this.space(),this.print(node.id,node),this.space(),this.print(node.body,node);},exports.DeclareModuleExports=function(node){this.word("declare"),this.space(),this.word("module"),this.tokenChar(46),this.word("exports"),this.print(node.typeAnnotation,node);},exports.DeclareOpaqueType=function(node,parent){isDeclareExportDeclaration(parent)||(this.word("declare"),this.space());this.OpaqueType(node);},exports.DeclareTypeAlias=function(node){this.word("declare"),this.space(),this.TypeAlias(node);},exports.DeclareVariable=function(node,parent){isDeclareExportDeclaration(parent)||(this.word("declare"),this.space());this.word("var"),this.space(),this.print(node.id,node),this.print(node.id.typeAnnotation,node),this.semicolon();},exports.DeclaredPredicate=function(node){this.tokenChar(37),this.word("checks"),this.tokenChar(40),this.print(node.value,node),this.tokenChar(41);},exports.EmptyTypeAnnotation=function(){this.word("empty");},exports.EnumBooleanBody=function(node){const{explicitType}=node;enumExplicitType(this,"boolean",explicitType),enumBody(this,node);},exports.EnumBooleanMember=function(node){enumInitializedMember(this,node);},exports.EnumDeclaration=function(node){const{id,body}=node;this.word("enum"),this.space(),this.print(id,node),this.print(body,node);},exports.EnumDefaultedMember=function(node){const{id}=node;this.print(id,node),this.tokenChar(44);},exports.EnumNumberBody=function(node){const{explicitType}=node;enumExplicitType(this,"number",explicitType),enumBody(this,node);},exports.EnumNumberMember=function(node){enumInitializedMember(this,node);},exports.EnumStringBody=function(node){const{explicitType}=node;enumExplicitType(this,"string",explicitType),enumBody(this,node);},exports.EnumStringMember=function(node){enumInitializedMember(this,node);},exports.EnumSymbolBody=function(node){enumExplicitType(this,"symbol",!0),enumBody(this,node);},exports.ExistsTypeAnnotation=function(){this.tokenChar(42);},exports.FunctionTypeAnnotation=function(node,parent){this.print(node.typeParameters,node),this.tokenChar(40),node.this&&(this.word("this"),this.tokenChar(58),this.space(),this.print(node.this.typeAnnotation,node),(node.params.length||node.rest)&&(this.tokenChar(44),this.space()));this.printList(node.params,node),node.rest&&(node.params.length&&(this.tokenChar(44),this.space()),this.token("..."),this.print(node.rest,node));this.tokenChar(41),parent&&("ObjectTypeCallProperty"===parent.type||"ObjectTypeInternalSlot"===parent.type||"DeclareFunction"===parent.type||"ObjectTypeProperty"===parent.type&&parent.method)?this.tokenChar(58):(this.space(),this.token("=>"));this.space(),this.print(node.returnType,node);},exports.FunctionTypeParam=function(node){this.print(node.name,node),node.optional&&this.tokenChar(63);node.name&&(this.tokenChar(58),this.space());this.print(node.typeAnnotation,node);},exports.IndexedAccessType=function(node){this.print(node.objectType,node,!0),this.tokenChar(91),this.print(node.indexType,node),this.tokenChar(93);},exports.InferredPredicate=function(){this.tokenChar(37),this.word("checks");},exports.InterfaceDeclaration=function(node){this.word("interface"),this.space(),this._interfaceish(node);},exports.GenericTypeAnnotation=exports.ClassImplements=exports.InterfaceExtends=function(node){this.print(node.id,node),this.print(node.typeParameters,node,!0);},exports.InterfaceTypeAnnotation=function(node){this.word("interface"),node.extends&&node.extends.length&&(this.space(),this.word("extends"),this.space(),this.printList(node.extends,node));this.space(),this.print(node.body,node);},exports.IntersectionTypeAnnotation=function(node){this.printJoin(node.types,node,{separator:andSeparator});},exports.MixedTypeAnnotation=function(){this.word("mixed");},exports.NullLiteralTypeAnnotation=function(){this.word("null");},exports.NullableTypeAnnotation=function(node){this.tokenChar(63),this.print(node.typeAnnotation,node);},Object.defineProperty(exports,"NumberLiteralTypeAnnotation",{enumerable:!0,get:function(){return _types2.NumericLiteral}}),exports.NumberTypeAnnotation=function(){this.word("number");},exports.ObjectTypeAnnotation=function(node){node.exact?this.token("{|"):this.tokenChar(123);const props=[...node.properties,...node.callProperties||[],...node.indexers||[],...node.internalSlots||[]];props.length&&(this.newline(),this.space(),this.printJoin(props,node,{addNewlines(leading){if(leading&&!props[0])return 1},indent:!0,statement:!0,iterator:()=>{(1!==props.length||node.inexact)&&(this.tokenChar(44),this.space());}}),this.space());node.inexact&&(this.indent(),this.token("..."),props.length&&this.newline(),this.dedent());node.exact?this.token("|}"):this.tokenChar(125);},exports.ObjectTypeCallProperty=function(node){node.static&&(this.word("static"),this.space());this.print(node.value,node);},exports.ObjectTypeIndexer=function(node){node.static&&(this.word("static"),this.space());this._variance(node),this.tokenChar(91),node.id&&(this.print(node.id,node),this.tokenChar(58),this.space());this.print(node.key,node),this.tokenChar(93),this.tokenChar(58),this.space(),this.print(node.value,node);},exports.ObjectTypeInternalSlot=function(node){node.static&&(this.word("static"),this.space());this.tokenChar(91),this.tokenChar(91),this.print(node.id,node),this.tokenChar(93),this.tokenChar(93),node.optional&&this.tokenChar(63);node.method||(this.tokenChar(58),this.space());this.print(node.value,node);},exports.ObjectTypeProperty=function(node){node.proto&&(this.word("proto"),this.space());node.static&&(this.word("static"),this.space());"get"!==node.kind&&"set"!==node.kind||(this.word(node.kind),this.space());this._variance(node),this.print(node.key,node),node.optional&&this.tokenChar(63);node.method||(this.tokenChar(58),this.space());this.print(node.value,node);},exports.ObjectTypeSpreadProperty=function(node){this.token("..."),this.print(node.argument,node);},exports.OpaqueType=function(node){this.word("opaque"),this.space(),this.word("type"),this.space(),this.print(node.id,node),this.print(node.typeParameters,node),node.supertype&&(this.tokenChar(58),this.space(),this.print(node.supertype,node));node.impltype&&(this.space(),this.tokenChar(61),this.space(),this.print(node.impltype,node));this.semicolon();},exports.OptionalIndexedAccessType=function(node){this.print(node.objectType,node),node.optional&&this.token("?.");this.tokenChar(91),this.print(node.indexType,node),this.tokenChar(93);},exports.QualifiedTypeIdentifier=function(node){this.print(node.qualification,node),this.tokenChar(46),this.print(node.id,node);},Object.defineProperty(exports,"StringLiteralTypeAnnotation",{enumerable:!0,get:function(){return _types2.StringLiteral}}),exports.StringTypeAnnotation=function(){this.word("string");},exports.SymbolTypeAnnotation=function(){this.word("symbol");},exports.ThisTypeAnnotation=function(){this.word("this");},exports.TupleTypeAnnotation=function(node){this.tokenChar(91),this.printList(node.types,node),this.tokenChar(93);},exports.TypeAlias=function(node){this.word("type"),this.space(),this.print(node.id,node),this.print(node.typeParameters,node),this.space(),this.tokenChar(61),this.space(),this.print(node.right,node),this.semicolon();},exports.TypeAnnotation=function(node){this.tokenChar(58),this.space(),node.optional&&this.tokenChar(63);this.print(node.typeAnnotation,node);},exports.TypeCastExpression=function(node){this.tokenChar(40),this.print(node.expression,node),this.print(node.typeAnnotation,node),this.tokenChar(41);},exports.TypeParameter=function(node){this._variance(node),this.word(node.name),node.bound&&this.print(node.bound,node);node.default&&(this.space(),this.tokenChar(61),this.space(),this.print(node.default,node));},exports.TypeParameterDeclaration=exports.TypeParameterInstantiation=function(node){this.tokenChar(60),this.printList(node.params,node,{}),this.tokenChar(62);},exports.TypeofTypeAnnotation=function(node){this.word("typeof"),this.space(),this.print(node.argument,node);},exports.UnionTypeAnnotation=function(node){this.printJoin(node.types,node,{separator:orSeparator});},exports.Variance=function(node){"plus"===node.kind?this.tokenChar(43):this.tokenChar(45);},exports.VoidTypeAnnotation=function(){this.word("void");},exports._interfaceish=function(node){var _node$extends;this.print(node.id,node),this.print(node.typeParameters,node),null!=(_node$extends=node.extends)&&_node$extends.length&&(this.space(),this.word("extends"),this.space(),this.printList(node.extends,node));node.mixins&&node.mixins.length&&(this.space(),this.word("mixins"),this.space(),this.printList(node.mixins,node));node.implements&&node.implements.length&&(this.space(),this.word("implements"),this.space(),this.printList(node.implements,node));this.space(),this.print(node.body,node);},exports._variance=function(node){node.variance&&("plus"===node.variance.kind?this.tokenChar(43):"minus"===node.variance.kind&&this.tokenChar(45));};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_modules=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/modules.js"),_types2=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/types.js");const{isDeclareExportDeclaration,isStatement}=_t;function enumExplicitType(context,name,hasExplicitType){hasExplicitType&&(context.space(),context.word("of"),context.space(),context.word(name)),context.space();}function enumBody(context,node){const{members}=node;context.token("{"),context.indent(),context.newline();for(const member of members)context.print(member,node),context.newline();node.hasUnknownMembers&&(context.token("..."),context.newline()),context.dedent(),context.token("}");}function enumInitializedMember(context,node){const{id,init}=node;context.print(id,node),context.space(),context.token("="),context.space(),context.print(init,node),context.token(",");}function FlowExportDeclaration(node){if(node.declaration){const declar=node.declaration;this.print(declar,node),isStatement(declar)||this.semicolon();}else this.tokenChar(123),node.specifiers.length&&(this.space(),this.printList(node.specifiers,node),this.space()),this.tokenChar(125),node.source&&(this.space(),this.word("from"),this.space(),this.print(node.source,node)),this.semicolon();}function andSeparator(){this.space(),this.tokenChar(38),this.space();}function orSeparator(){this.space(),this.tokenChar(124),this.space();}},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0});var _templateLiterals=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/template-literals.js");Object.keys(_templateLiterals).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_templateLiterals[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _templateLiterals[key]}}));}));var _expressions=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/expressions.js");Object.keys(_expressions).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_expressions[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _expressions[key]}}));}));var _statements=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/statements.js");Object.keys(_statements).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_statements[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _statements[key]}}));}));var _classes=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/classes.js");Object.keys(_classes).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_classes[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _classes[key]}}));}));var _methods=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/methods.js");Object.keys(_methods).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_methods[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _methods[key]}}));}));var _modules=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/modules.js");Object.keys(_modules).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_modules[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _modules[key]}}));}));var _types=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/types.js");Object.keys(_types).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_types[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _types[key]}}));}));var _flow=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/flow.js");Object.keys(_flow).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_flow[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _flow[key]}}));}));var _base=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/base.js");Object.keys(_base).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_base[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _base[key]}}));}));var _jsx=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/jsx.js");Object.keys(_jsx).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_jsx[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _jsx[key]}}));}));var _typescript=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/typescript.js");Object.keys(_typescript).forEach((function(key){"default"!==key&&"__esModule"!==key&&(key in exports&&exports[key]===_typescript[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _typescript[key]}}));}));},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/jsx.js":(__unused_webpack_module,exports)=>{function spaceSeparator(){this.space();}Object.defineProperty(exports,"__esModule",{value:!0}),exports.JSXAttribute=function(node){this.print(node.name,node),node.value&&(this.tokenChar(61),this.print(node.value,node));},exports.JSXClosingElement=function(node){this.token("</"),this.print(node.name,node),this.tokenChar(62);},exports.JSXClosingFragment=function(){this.token("</"),this.tokenChar(62);},exports.JSXElement=function(node){const open=node.openingElement;if(this.print(open,node),open.selfClosing)return;this.indent();for(const child of node.children)this.print(child,node);this.dedent(),this.print(node.closingElement,node);},exports.JSXEmptyExpression=function(){this.printInnerComments();},exports.JSXExpressionContainer=function(node){this.tokenChar(123),this.print(node.expression,node),this.tokenChar(125);},exports.JSXFragment=function(node){this.print(node.openingFragment,node),this.indent();for(const child of node.children)this.print(child,node);this.dedent(),this.print(node.closingFragment,node);},exports.JSXIdentifier=function(node){this.word(node.name);},exports.JSXMemberExpression=function(node){this.print(node.object,node),this.tokenChar(46),this.print(node.property,node);},exports.JSXNamespacedName=function(node){this.print(node.namespace,node),this.tokenChar(58),this.print(node.name,node);},exports.JSXOpeningElement=function(node){this.tokenChar(60),this.print(node.name,node),this.print(node.typeParameters,node),node.attributes.length>0&&(this.space(),this.printJoin(node.attributes,node,{separator:spaceSeparator}));node.selfClosing?(this.space(),this.token("/>")):this.tokenChar(62);},exports.JSXOpeningFragment=function(){this.tokenChar(60),this.tokenChar(62);},exports.JSXSpreadAttribute=function(node){this.tokenChar(123),this.token("..."),this.print(node.argument,node),this.tokenChar(125);},exports.JSXSpreadChild=function(node){this.tokenChar(123),this.token("..."),this.print(node.expression,node),this.tokenChar(125);},exports.JSXText=function(node){const raw=this.getPossibleRaw(node);void 0!==raw?this.token(raw,!0):this.token(node.value,!0);};},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/methods.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.ArrowFunctionExpression=function(node,parent){node.async&&(this.word("async",!0),this.space());let firstParam;this.format.retainLines||1!==node.params.length||!isIdentifier(firstParam=node.params[0])||function(node,param){var _param$leadingComment,_param$trailingCommen;return !!(node.typeParameters||node.returnType||node.predicate||param.typeAnnotation||param.optional||null!=(_param$leadingComment=param.leadingComments)&&_param$leadingComment.length||null!=(_param$trailingCommen=param.trailingComments)&&_param$trailingCommen.length)}(node,firstParam)?this._params(node,void 0,parent):this.print(firstParam,node,!0);this._predicate(node,!0),this.space(),this.printInnerComments(),this.token("=>"),this.space(),this.print(node.body,node);},exports.FunctionDeclaration=exports.FunctionExpression=function(node,parent){this._functionHead(node,parent),this.space(),this.print(node.body,node);},exports._functionHead=function(node,parent){node.async&&(this.word("async"),this._endsWithInnerRaw=!1,this.space());this.word("function"),node.generator&&(this._endsWithInnerRaw=!1,this.tokenChar(42));this.space(),node.id&&this.print(node.id,node);this._params(node,node.id,parent),"TSDeclareFunction"!==node.type&&this._predicate(node);},exports._methodHead=function(node){const kind=node.kind,key=node.key;"get"!==kind&&"set"!==kind||(this.word(kind),this.space());node.async&&(this.word("async",!0),this.space());"method"!==kind&&"init"!==kind||node.generator&&this.tokenChar(42);node.computed?(this.tokenChar(91),this.print(key,node),this.tokenChar(93)):this.print(key,node);node.optional&&this.tokenChar(63);this._params(node,node.computed&&"StringLiteral"!==node.key.type?void 0:node.key,void 0);},exports._param=function(parameter,parent){this.printJoin(parameter.decorators,parameter),this.print(parameter,parent),parameter.optional&&this.tokenChar(63);this.print(parameter.typeAnnotation,parameter);},exports._parameters=function(parameters,parent){const paramLength=parameters.length;for(let i=0;i<paramLength;i++)this._param(parameters[i],parent),i<parameters.length-1&&(this.tokenChar(44),this.space());},exports._params=function(node,idNode,parentNode){this.print(node.typeParameters,node);const nameInfo=_getFuncIdName.call(this,idNode,parentNode);nameInfo&&this.sourceIdentifierName(nameInfo.name,nameInfo.pos);this.tokenChar(40),this._parameters(node.params,node),this.tokenChar(41);const noLineTerminator="ArrowFunctionExpression"===node.type;this.print(node.returnType,node,noLineTerminator),this._noLineTerminator=noLineTerminator;},exports._predicate=function(node,noLineTerminatorAfter){node.predicate&&(node.returnType||this.tokenChar(58),this.space(),this.print(node.predicate,node,noLineTerminatorAfter));};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{isIdentifier}=_t;function _getFuncIdName(idNode,parent){let nameInfo,id=idNode;if(!id&&parent){const parentType=parent.type;"VariableDeclarator"===parentType?id=parent.id:"AssignmentExpression"===parentType||"AssignmentPattern"===parentType?id=parent.left:"ObjectProperty"===parentType||"ClassProperty"===parentType?parent.computed&&"StringLiteral"!==parent.key.type||(id=parent.key):"ClassPrivateProperty"!==parentType&&"ClassAccessorProperty"!==parentType||(id=parent.key);}if(id){var _id$loc,_id$loc2;if("Identifier"===id.type)nameInfo={pos:null==(_id$loc=id.loc)?void 0:_id$loc.start,name:(null==(_id$loc2=id.loc)?void 0:_id$loc2.identifierName)||id.name};else if("PrivateName"===id.type){var _id$loc3;nameInfo={pos:null==(_id$loc3=id.loc)?void 0:_id$loc3.start,name:"#"+id.id.name};}else if("StringLiteral"===id.type){var _id$loc4;nameInfo={pos:null==(_id$loc4=id.loc)?void 0:_id$loc4.start,name:id.value};}return nameInfo}}},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/modules.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.ExportAllDeclaration=function(node){var _node$assertions;this.word("export"),this.space(),"type"===node.exportKind&&(this.word("type"),this.space());this.tokenChar(42),this.space(),this.word("from"),this.space(),null!=(_node$assertions=node.assertions)&&_node$assertions.length?(this.print(node.source,node,!0),this.space(),this._printAssertions(node)):this.print(node.source,node);this.semicolon();},exports.ExportDefaultDeclaration=function(node){maybePrintDecoratorsBeforeExport(this,node),this.word("export"),this.noIndentInnerCommentsHere(),this.space(),this.word("default"),this.space();const declar=node.declaration;this.print(declar,node),isStatement(declar)||this.semicolon();},exports.ExportDefaultSpecifier=function(node){this.print(node.exported,node);},exports.ExportNamedDeclaration=function(node){if(maybePrintDecoratorsBeforeExport(this,node),this.word("export"),this.space(),node.declaration){const declar=node.declaration;this.print(declar,node),isStatement(declar)||this.semicolon();}else {"type"===node.exportKind&&(this.word("type"),this.space());const specifiers=node.specifiers.slice(0);let hasSpecial=!1;for(;;){const first=specifiers[0];if(!isExportDefaultSpecifier(first)&&!isExportNamespaceSpecifier(first))break;hasSpecial=!0,this.print(specifiers.shift(),node),specifiers.length&&(this.tokenChar(44),this.space());}var _node$assertions2;if((specifiers.length||!specifiers.length&&!hasSpecial)&&(this.tokenChar(123),specifiers.length&&(this.space(),this.printList(specifiers,node),this.space()),this.tokenChar(125)),node.source)this.space(),this.word("from"),this.space(),null!=(_node$assertions2=node.assertions)&&_node$assertions2.length?(this.print(node.source,node,!0),this.space(),this._printAssertions(node)):this.print(node.source,node);this.semicolon();}},exports.ExportNamespaceSpecifier=function(node){this.tokenChar(42),this.space(),this.word("as"),this.space(),this.print(node.exported,node);},exports.ExportSpecifier=function(node){"type"===node.exportKind&&(this.word("type"),this.space());this.print(node.local,node),node.exported&&node.local.name!==node.exported.name&&(this.space(),this.word("as"),this.space(),this.print(node.exported,node));},exports.ImportAttribute=function(node){this.print(node.key),this.tokenChar(58),this.space(),this.print(node.value);},exports.ImportDeclaration=function(node){var _node$assertions3;this.word("import"),this.space();const isTypeKind="type"===node.importKind||"typeof"===node.importKind;isTypeKind?(this.noIndentInnerCommentsHere(),this.word(node.importKind),this.space()):node.module&&(this.noIndentInnerCommentsHere(),this.word("module"),this.space());const specifiers=node.specifiers.slice(0),hasSpecifiers=!!specifiers.length;for(;hasSpecifiers;){const first=specifiers[0];if(!isImportDefaultSpecifier(first)&&!isImportNamespaceSpecifier(first))break;this.print(specifiers.shift(),node),specifiers.length&&(this.tokenChar(44),this.space());}specifiers.length?(this.tokenChar(123),this.space(),this.printList(specifiers,node),this.space(),this.tokenChar(125)):isTypeKind&&!hasSpecifiers&&(this.tokenChar(123),this.tokenChar(125));(hasSpecifiers||isTypeKind)&&(this.space(),this.word("from"),this.space());null!=(_node$assertions3=node.assertions)&&_node$assertions3.length?(this.print(node.source,node,!0),this.space(),this._printAssertions(node)):this.print(node.source,node);var _node$attributes;null!=(_node$attributes=node.attributes)&&_node$attributes.length&&(this.space(),this.word("with"),this.space(),this.printList(node.attributes,node));this.semicolon();},exports.ImportDefaultSpecifier=function(node){this.print(node.local,node);},exports.ImportNamespaceSpecifier=function(node){this.tokenChar(42),this.space(),this.word("as"),this.space(),this.print(node.local,node);},exports.ImportSpecifier=function(node){"type"!==node.importKind&&"typeof"!==node.importKind||(this.word(node.importKind),this.space());this.print(node.imported,node),node.local&&node.local.name!==node.imported.name&&(this.space(),this.word("as"),this.space(),this.print(node.local,node));},exports._printAssertions=function(node){this.word("assert"),this.space(),this.tokenChar(123),this.space(),this.printList(node.assertions,node),this.space(),this.tokenChar(125);};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{isClassDeclaration,isExportDefaultSpecifier,isExportNamespaceSpecifier,isImportDefaultSpecifier,isImportNamespaceSpecifier,isStatement}=_t;function maybePrintDecoratorsBeforeExport(printer,node){isClassDeclaration(node.declaration)&&printer._shouldPrintDecoratorsBeforeExport(node)&&printer.printJoin(node.declaration.decorators,node);}},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/statements.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.BreakStatement=function(node){this.word("break"),printStatementAfterKeyword(this,node.label,node,!0);},exports.CatchClause=function(node){this.word("catch"),this.space(),node.param&&(this.tokenChar(40),this.print(node.param,node),this.print(node.param.typeAnnotation,node),this.tokenChar(41),this.space());this.print(node.body,node);},exports.ContinueStatement=function(node){this.word("continue"),printStatementAfterKeyword(this,node.label,node,!0);},exports.DebuggerStatement=function(){this.word("debugger"),this.semicolon();},exports.DoWhileStatement=function(node){this.word("do"),this.space(),this.print(node.body,node),this.space(),this.word("while"),this.space(),this.tokenChar(40),this.print(node.test,node),this.tokenChar(41),this.semicolon();},exports.ForOfStatement=exports.ForInStatement=void 0,exports.ForStatement=function(node){this.word("for"),this.space(),this.tokenChar(40),this.inForStatementInitCounter++,this.print(node.init,node),this.inForStatementInitCounter--,this.tokenChar(59),node.test&&(this.space(),this.print(node.test,node));this.tokenChar(59),node.update&&(this.space(),this.print(node.update,node));this.tokenChar(41),this.printBlock(node);},exports.IfStatement=function(node){this.word("if"),this.space(),this.tokenChar(40),this.print(node.test,node),this.tokenChar(41),this.space();const needsBlock=node.alternate&&isIfStatement(getLastStatement(node.consequent));needsBlock&&(this.tokenChar(123),this.newline(),this.indent());this.printAndIndentOnComments(node.consequent,node),needsBlock&&(this.dedent(),this.newline(),this.tokenChar(125));node.alternate&&(this.endsWith(125)&&this.space(),this.word("else"),this.space(),this.printAndIndentOnComments(node.alternate,node));},exports.LabeledStatement=function(node){this.print(node.label,node),this.tokenChar(58),this.space(),this.print(node.body,node);},exports.ReturnStatement=function(node){this.word("return"),printStatementAfterKeyword(this,node.argument,node,!1);},exports.SwitchCase=function(node){node.test?(this.word("case"),this.space(),this.print(node.test,node),this.tokenChar(58)):(this.word("default"),this.tokenChar(58));node.consequent.length&&(this.newline(),this.printSequence(node.consequent,node,{indent:!0}));},exports.SwitchStatement=function(node){this.word("switch"),this.space(),this.tokenChar(40),this.print(node.discriminant,node),this.tokenChar(41),this.space(),this.tokenChar(123),this.printSequence(node.cases,node,{indent:!0,addNewlines(leading,cas){if(!leading&&node.cases[node.cases.length-1]===cas)return -1}}),this.tokenChar(125);},exports.ThrowStatement=function(node){this.word("throw"),printStatementAfterKeyword(this,node.argument,node,!1);},exports.TryStatement=function(node){this.word("try"),this.space(),this.print(node.block,node),this.space(),node.handlers?this.print(node.handlers[0],node):this.print(node.handler,node);node.finalizer&&(this.space(),this.word("finally"),this.space(),this.print(node.finalizer,node));},exports.VariableDeclaration=function(node,parent){node.declare&&(this.word("declare"),this.space());const{kind}=node;this.word(kind,"using"===kind),this.space();let hasInits=!1;if(!isFor(parent))for(const declar of node.declarations)declar.init&&(hasInits=!0);if(this.printList(node.declarations,node,{separator:hasInits?function(){this.tokenChar(44),this.newline();}:void 0,indent:node.declarations.length>1}),isFor(parent))if(isForStatement(parent)){if(parent.init===node)return}else if(parent.left===node)return;this.semicolon();},exports.VariableDeclarator=function(node){this.print(node.id,node),node.definite&&this.tokenChar(33);this.print(node.id.typeAnnotation,node),node.init&&(this.space(),this.tokenChar(61),this.space(),this.print(node.init,node));},exports.WhileStatement=function(node){this.word("while"),this.space(),this.tokenChar(40),this.print(node.test,node),this.tokenChar(41),this.printBlock(node);},exports.WithStatement=function(node){this.word("with"),this.space(),this.tokenChar(40),this.print(node.object,node),this.tokenChar(41),this.printBlock(node);};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{isFor,isForStatement,isIfStatement,isStatement}=_t;function getLastStatement(statement){const{body}=statement;return !1===isStatement(body)?statement:getLastStatement(body)}function ForXStatement(node){this.word("for"),this.space();const isForOf="ForOfStatement"===node.type;isForOf&&node.await&&(this.word("await"),this.space()),this.noIndentInnerCommentsHere(),this.tokenChar(40),this.print(node.left,node),this.space(),this.word(isForOf?"of":"in"),this.space(),this.print(node.right,node),this.tokenChar(41),this.printBlock(node);}const ForInStatement=ForXStatement;exports.ForInStatement=ForInStatement;const ForOfStatement=ForXStatement;function printStatementAfterKeyword(printer,node,parent,isLabel){node&&(printer.space(),printer.printTerminatorless(node,parent,isLabel)),printer.semicolon();}exports.ForOfStatement=ForOfStatement;},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/template-literals.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.TaggedTemplateExpression=function(node){this.print(node.tag,node),this.print(node.typeParameters,node),this.print(node.quasi,node);},exports.TemplateElement=function(node,parent){const isFirst=parent.quasis[0]===node,isLast=parent.quasis[parent.quasis.length-1]===node,value=(isFirst?"`":"}")+node.value.raw+(isLast?"`":"${");this.token(value,!0);},exports.TemplateLiteral=function(node){const quasis=node.quasis;for(let i=0;i<quasis.length;i++)this.print(quasis[i],node),i+1<quasis.length&&this.print(node.expressions[i],node);};},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/types.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.ArgumentPlaceholder=function(){this.tokenChar(63);},exports.ArrayPattern=exports.ArrayExpression=function(node){const elems=node.elements,len=elems.length;this.tokenChar(91);for(let i=0;i<elems.length;i++){const elem=elems[i];elem?(i>0&&this.space(),this.print(elem,node),i<len-1&&this.tokenChar(44)):this.tokenChar(44);}this.tokenChar(93);},exports.BigIntLiteral=function(node){const raw=this.getPossibleRaw(node);if(!this.format.minified&&void 0!==raw)return void this.word(raw);this.word(node.value+"n");},exports.BooleanLiteral=function(node){this.word(node.value?"true":"false");},exports.DecimalLiteral=function(node){const raw=this.getPossibleRaw(node);if(!this.format.minified&&void 0!==raw)return void this.word(raw);this.word(node.value+"m");},exports.Identifier=function(node){var _node$loc;this.sourceIdentifierName((null==(_node$loc=node.loc)?void 0:_node$loc.identifierName)||node.name),this.word(node.name);},exports.NullLiteral=function(){this.word("null");},exports.NumericLiteral=function(node){const raw=this.getPossibleRaw(node),opts=this.format.jsescOption,value=node.value+"";opts.numbers?this.number(_jsesc(node.value,opts)):null==raw?this.number(value):this.format.minified?this.number(raw.length<value.length?raw:value):this.number(raw);},exports.ObjectPattern=exports.ObjectExpression=function(node){const props=node.properties;this.tokenChar(123),props.length&&(this.space(),this.printList(props,node,{indent:!0,statement:!0}),this.space());this.sourceWithOffset("end",node.loc,0,-1),this.tokenChar(125);},exports.ObjectMethod=function(node){this.printJoin(node.decorators,node),this._methodHead(node),this.space(),this.print(node.body,node);},exports.ObjectProperty=function(node){if(this.printJoin(node.decorators,node),node.computed)this.tokenChar(91),this.print(node.key,node),this.tokenChar(93);else {if(isAssignmentPattern(node.value)&&isIdentifier(node.key)&&node.key.name===node.value.left.name)return void this.print(node.value,node);if(this.print(node.key,node),node.shorthand&&isIdentifier(node.key)&&isIdentifier(node.value)&&node.key.name===node.value.name)return}this.tokenChar(58),this.space(),this.print(node.value,node);},exports.PipelineBareFunction=function(node){this.print(node.callee,node);},exports.PipelinePrimaryTopicReference=function(){this.tokenChar(35);},exports.PipelineTopicExpression=function(node){this.print(node.expression,node);},exports.RecordExpression=function(node){const props=node.properties;let startToken,endToken;if("bar"===this.format.recordAndTupleSyntaxType)startToken="{|",endToken="|}";else {if("hash"!==this.format.recordAndTupleSyntaxType&&null!=this.format.recordAndTupleSyntaxType)throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);startToken="#{",endToken="}";}this.token(startToken),props.length&&(this.space(),this.printList(props,node,{indent:!0,statement:!0}),this.space());this.token(endToken);},exports.RegExpLiteral=function(node){this.word(`/${node.pattern}/${node.flags}`);},exports.SpreadElement=exports.RestElement=function(node){this.token("..."),this.print(node.argument,node);},exports.StringLiteral=function(node){const raw=this.getPossibleRaw(node);if(!this.format.minified&&void 0!==raw)return void this.token(raw);const val=_jsesc(node.value,this.format.jsescOption);this.token(val);},exports.TopicReference=function(){const{topicToken}=this.format;if(!validTopicTokenSet.has(topicToken)){const givenTopicTokenJSON=JSON.stringify(topicToken),validTopics=Array.from(validTopicTokenSet,(v=>JSON.stringify(v)));throw new Error(`The "topicToken" generator option must be one of ${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`)}this.token(topicToken);},exports.TupleExpression=function(node){const elems=node.elements,len=elems.length;let startToken,endToken;if("bar"===this.format.recordAndTupleSyntaxType)startToken="[|",endToken="|]";else {if("hash"!==this.format.recordAndTupleSyntaxType)throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);startToken="#[",endToken="]";}this.token(startToken);for(let i=0;i<elems.length;i++){const elem=elems[i];elem&&(i>0&&this.space(),this.print(elem,node),i<len-1&&this.tokenChar(44));}this.token(endToken);};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_jsesc=__webpack_require__("./node_modules/.pnpm/jsesc@2.5.2/node_modules/jsesc/jsesc.js");const{isAssignmentPattern,isIdentifier}=_t;const validTopicTokenSet=new Set(["^^","@@","^","%","#"]);},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/typescript.js":(__unused_webpack_module,exports)=>{function tsPrintBraced(printer,members,node){if(printer.token("{"),members.length){printer.indent(),printer.newline();for(const member of members)printer.print(member,node),printer.newline();printer.dedent();}printer.sourceWithOffset("end",node.loc,0,-1),printer.rightBrace();}function tsPrintUnionOrIntersectionType(printer,node,sep){printer.printJoin(node.types,node,{separator(){this.space(),this.token(sep),this.space();}});}function tokenIfPlusMinus(self,tok){!0!==tok&&self.token(tok);}Object.defineProperty(exports,"__esModule",{value:!0}),exports.TSAnyKeyword=function(){this.word("any");},exports.TSArrayType=function(node){this.print(node.elementType,node,!0),this.token("[]");},exports.TSSatisfiesExpression=exports.TSAsExpression=function(node){var _expression$trailingC;const{type,expression,typeAnnotation}=node,forceParens=!(null==(_expression$trailingC=expression.trailingComments)||!_expression$trailingC.length);this.print(expression,node,!0,void 0,forceParens),this.space(),this.word("TSAsExpression"===type?"as":"satisfies"),this.space(),this.print(typeAnnotation,node);},exports.TSBigIntKeyword=function(){this.word("bigint");},exports.TSBooleanKeyword=function(){this.word("boolean");},exports.TSCallSignatureDeclaration=function(node){this.tsPrintSignatureDeclarationBase(node),this.tokenChar(59);},exports.TSConditionalType=function(node){this.print(node.checkType),this.space(),this.word("extends"),this.space(),this.print(node.extendsType),this.space(),this.tokenChar(63),this.space(),this.print(node.trueType),this.space(),this.tokenChar(58),this.space(),this.print(node.falseType);},exports.TSConstructSignatureDeclaration=function(node){this.word("new"),this.space(),this.tsPrintSignatureDeclarationBase(node),this.tokenChar(59);},exports.TSConstructorType=function(node){node.abstract&&(this.word("abstract"),this.space());this.word("new"),this.space(),this.tsPrintFunctionOrConstructorType(node);},exports.TSDeclareFunction=function(node,parent){node.declare&&(this.word("declare"),this.space());this._functionHead(node,parent),this.tokenChar(59);},exports.TSDeclareMethod=function(node){this._classMethodHead(node),this.tokenChar(59);},exports.TSEnumDeclaration=function(node){const{declare,const:isConst,id,members}=node;declare&&(this.word("declare"),this.space());isConst&&(this.word("const"),this.space());this.word("enum"),this.space(),this.print(id,node),this.space(),tsPrintBraced(this,members,node);},exports.TSEnumMember=function(node){const{id,initializer}=node;this.print(id,node),initializer&&(this.space(),this.tokenChar(61),this.space(),this.print(initializer,node));this.tokenChar(44);},exports.TSExportAssignment=function(node){this.word("export"),this.space(),this.tokenChar(61),this.space(),this.print(node.expression,node),this.tokenChar(59);},exports.TSExpressionWithTypeArguments=function(node){this.print(node.expression,node),this.print(node.typeParameters,node);},exports.TSExternalModuleReference=function(node){this.token("require("),this.print(node.expression,node),this.tokenChar(41);},exports.TSFunctionType=function(node){this.tsPrintFunctionOrConstructorType(node);},exports.TSImportEqualsDeclaration=function(node){const{isExport,id,moduleReference}=node;isExport&&(this.word("export"),this.space());this.word("import"),this.space(),this.print(id,node),this.space(),this.tokenChar(61),this.space(),this.print(moduleReference,node),this.tokenChar(59);},exports.TSImportType=function(node){const{argument,qualifier,typeParameters}=node;this.word("import"),this.tokenChar(40),this.print(argument,node),this.tokenChar(41),qualifier&&(this.tokenChar(46),this.print(qualifier,node));typeParameters&&this.print(typeParameters,node);},exports.TSIndexSignature=function(node){const{readonly,static:isStatic}=node;isStatic&&(this.word("static"),this.space());readonly&&(this.word("readonly"),this.space());this.tokenChar(91),this._parameters(node.parameters,node),this.tokenChar(93),this.print(node.typeAnnotation,node),this.tokenChar(59);},exports.TSIndexedAccessType=function(node){this.print(node.objectType,node,!0),this.tokenChar(91),this.print(node.indexType,node),this.tokenChar(93);},exports.TSInferType=function(node){this.token("infer"),this.space(),this.print(node.typeParameter);},exports.TSInstantiationExpression=function(node){this.print(node.expression,node),this.print(node.typeParameters,node);},exports.TSInterfaceBody=function(node){this.tsPrintTypeLiteralOrInterfaceBody(node.body,node);},exports.TSInterfaceDeclaration=function(node){const{declare,id,typeParameters,extends:extendz,body}=node;declare&&(this.word("declare"),this.space());this.word("interface"),this.space(),this.print(id,node),this.print(typeParameters,node),null!=extendz&&extendz.length&&(this.space(),this.word("extends"),this.space(),this.printList(extendz,node));this.space(),this.print(body,node);},exports.TSIntersectionType=function(node){tsPrintUnionOrIntersectionType(this,node,"&");},exports.TSIntrinsicKeyword=function(){this.word("intrinsic");},exports.TSLiteralType=function(node){this.print(node.literal,node);},exports.TSMappedType=function(node){const{nameType,optional,readonly,typeParameter}=node;this.tokenChar(123),this.space(),readonly&&(tokenIfPlusMinus(this,readonly),this.word("readonly"),this.space());this.tokenChar(91),this.word(typeParameter.name),this.space(),this.word("in"),this.space(),this.print(typeParameter.constraint,typeParameter),nameType&&(this.space(),this.word("as"),this.space(),this.print(nameType,node));this.tokenChar(93),optional&&(tokenIfPlusMinus(this,optional),this.tokenChar(63));this.tokenChar(58),this.space(),this.print(node.typeAnnotation,node),this.space(),this.tokenChar(125);},exports.TSMethodSignature=function(node){const{kind}=node;"set"!==kind&&"get"!==kind||(this.word(kind),this.space());this.tsPrintPropertyOrMethodName(node),this.tsPrintSignatureDeclarationBase(node),this.tokenChar(59);},exports.TSModuleBlock=function(node){tsPrintBraced(this,node.body,node);},exports.TSModuleDeclaration=function(node){const{declare,id}=node;declare&&(this.word("declare"),this.space());node.global||(this.word("Identifier"===id.type?"namespace":"module"),this.space());if(this.print(id,node),!node.body)return void this.tokenChar(59);let body=node.body;for(;"TSModuleDeclaration"===body.type;)this.tokenChar(46),this.print(body.id,body),body=body.body;this.space(),this.print(body,node);},exports.TSNamedTupleMember=function(node){this.print(node.label,node),node.optional&&this.tokenChar(63);this.tokenChar(58),this.space(),this.print(node.elementType,node);},exports.TSNamespaceExportDeclaration=function(node){this.word("export"),this.space(),this.word("as"),this.space(),this.word("namespace"),this.space(),this.print(node.id,node);},exports.TSNeverKeyword=function(){this.word("never");},exports.TSNonNullExpression=function(node){this.print(node.expression,node),this.tokenChar(33);},exports.TSNullKeyword=function(){this.word("null");},exports.TSNumberKeyword=function(){this.word("number");},exports.TSObjectKeyword=function(){this.word("object");},exports.TSOptionalType=function(node){this.print(node.typeAnnotation,node),this.tokenChar(63);},exports.TSParameterProperty=function(node){node.accessibility&&(this.word(node.accessibility),this.space());node.readonly&&(this.word("readonly"),this.space());this._param(node.parameter);},exports.TSParenthesizedType=function(node){this.tokenChar(40),this.print(node.typeAnnotation,node),this.tokenChar(41);},exports.TSPropertySignature=function(node){const{readonly,initializer}=node;readonly&&(this.word("readonly"),this.space());this.tsPrintPropertyOrMethodName(node),this.print(node.typeAnnotation,node),initializer&&(this.space(),this.tokenChar(61),this.space(),this.print(initializer,node));this.tokenChar(59);},exports.TSQualifiedName=function(node){this.print(node.left,node),this.tokenChar(46),this.print(node.right,node);},exports.TSRestType=function(node){this.token("..."),this.print(node.typeAnnotation,node);},exports.TSStringKeyword=function(){this.word("string");},exports.TSSymbolKeyword=function(){this.word("symbol");},exports.TSThisType=function(){this.word("this");},exports.TSTupleType=function(node){this.tokenChar(91),this.printList(node.elementTypes,node),this.tokenChar(93);},exports.TSTypeAliasDeclaration=function(node){const{declare,id,typeParameters,typeAnnotation}=node;declare&&(this.word("declare"),this.space());this.word("type"),this.space(),this.print(id,node),this.print(typeParameters,node),this.space(),this.tokenChar(61),this.space(),this.print(typeAnnotation,node),this.tokenChar(59);},exports.TSTypeAnnotation=function(node){this.tokenChar(58),this.space(),node.optional&&this.tokenChar(63);this.print(node.typeAnnotation,node);},exports.TSTypeAssertion=function(node){const{typeAnnotation,expression}=node;this.tokenChar(60),this.print(typeAnnotation,node),this.tokenChar(62),this.space(),this.print(expression,node);},exports.TSTypeLiteral=function(node){this.tsPrintTypeLiteralOrInterfaceBody(node.members,node);},exports.TSTypeOperator=function(node){this.word(node.operator),this.space(),this.print(node.typeAnnotation,node);},exports.TSTypeParameter=function(node){node.in&&(this.word("in"),this.space());node.out&&(this.word("out"),this.space());this.word(node.name),node.constraint&&(this.space(),this.word("extends"),this.space(),this.print(node.constraint,node));node.default&&(this.space(),this.tokenChar(61),this.space(),this.print(node.default,node));},exports.TSTypeParameterDeclaration=exports.TSTypeParameterInstantiation=function(node,parent){this.tokenChar(60),this.printList(node.params,node,{}),"ArrowFunctionExpression"===parent.type&&1===node.params.length&&this.tokenChar(44);this.tokenChar(62);},exports.TSTypePredicate=function(node){node.asserts&&(this.word("asserts"),this.space());this.print(node.parameterName),node.typeAnnotation&&(this.space(),this.word("is"),this.space(),this.print(node.typeAnnotation.typeAnnotation));},exports.TSTypeQuery=function(node){this.word("typeof"),this.space(),this.print(node.exprName),node.typeParameters&&this.print(node.typeParameters,node);},exports.TSTypeReference=function(node){this.print(node.typeName,node,!0),this.print(node.typeParameters,node,!0);},exports.TSUndefinedKeyword=function(){this.word("undefined");},exports.TSUnionType=function(node){tsPrintUnionOrIntersectionType(this,node,"|");},exports.TSUnknownKeyword=function(){this.word("unknown");},exports.TSVoidKeyword=function(){this.word("void");},exports.tsPrintClassMemberModifiers=function(node){const isField="ClassAccessorProperty"===node.type||"ClassProperty"===node.type;isField&&node.declare&&(this.word("declare"),this.space());node.accessibility&&(this.word(node.accessibility),this.space());node.static&&(this.word("static"),this.space());node.override&&(this.word("override"),this.space());node.abstract&&(this.word("abstract"),this.space());isField&&node.readonly&&(this.word("readonly"),this.space());},exports.tsPrintFunctionOrConstructorType=function(node){const{typeParameters}=node,parameters=node.parameters;this.print(typeParameters,node),this.tokenChar(40),this._parameters(parameters,node),this.tokenChar(41),this.space(),this.token("=>"),this.space();const returnType=node.typeAnnotation;this.print(returnType.typeAnnotation,node);},exports.tsPrintPropertyOrMethodName=function(node){node.computed&&this.tokenChar(91);this.print(node.key,node),node.computed&&this.tokenChar(93);node.optional&&this.tokenChar(63);},exports.tsPrintSignatureDeclarationBase=function(node){const{typeParameters}=node,parameters=node.parameters;this.print(typeParameters,node),this.tokenChar(40),this._parameters(parameters,node),this.tokenChar(41);const returnType=node.typeAnnotation;this.print(returnType,node);},exports.tsPrintTypeLiteralOrInterfaceBody=function(members,node){tsPrintBraced(this,members,node);};},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.CodeGenerator=void 0,exports.default=function(ast,opts,code){return new Generator(ast,opts,code).generate()};var _sourceMap=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/source-map.js"),_printer=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/printer.js");class Generator extends _printer.default{constructor(ast,opts={},code){const format=function(code,opts){const format={auxiliaryCommentBefore:opts.auxiliaryCommentBefore,auxiliaryCommentAfter:opts.auxiliaryCommentAfter,shouldPrintComment:opts.shouldPrintComment,retainLines:opts.retainLines,retainFunctionParens:opts.retainFunctionParens,comments:null==opts.comments||opts.comments,compact:opts.compact,minified:opts.minified,concise:opts.concise,indent:{adjustMultilineComment:!0,style:"  "},jsescOption:Object.assign({quotes:"double",wrap:!0,minimal:!1},opts.jsescOption),recordAndTupleSyntaxType:opts.recordAndTupleSyntaxType,topicToken:opts.topicToken};format.decoratorsBeforeExport=opts.decoratorsBeforeExport,format.jsescOption.json=opts.jsonCompatibleStrings,format.minified?(format.compact=!0,format.shouldPrintComment=format.shouldPrintComment||(()=>format.comments)):format.shouldPrintComment=format.shouldPrintComment||(value=>format.comments||value.includes("@license")||value.includes("@preserve"));"auto"===format.compact&&(format.compact="string"==typeof code&&code.length>5e5,format.compact&&console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${opts.filename} as it exceeds the max of 500KB.`));format.compact&&(format.indent.adjustMultilineComment=!1);const{auxiliaryCommentBefore,auxiliaryCommentAfter,shouldPrintComment}=format;auxiliaryCommentBefore&&!shouldPrintComment(auxiliaryCommentBefore)&&(format.auxiliaryCommentBefore=void 0);auxiliaryCommentAfter&&!shouldPrintComment(auxiliaryCommentAfter)&&(format.auxiliaryCommentAfter=void 0);return format}(code,opts);super(format,opts.sourceMaps?new _sourceMap.default(opts,code):null),this.ast=void 0,this.ast=ast;}generate(){return super.generate(this.ast)}}exports.CodeGenerator=class{constructor(ast,opts,code){this._generator=void 0,this._generator=new Generator(ast,opts,code);}generate(){return this._generator.generate()}};},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.needsParens=function(node,parent,printStack){if(!parent)return !1;if(isNewExpression(parent)&&parent.callee===node&&isOrHasCallExpression(node))return !0;return find(expandedParens,node,parent,printStack)},exports.needsWhitespace=needsWhitespace,exports.needsWhitespaceAfter=function(node,parent){return needsWhitespace(node,parent,2)},exports.needsWhitespaceBefore=function(node,parent){return needsWhitespace(node,parent,1)};var whitespace=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/whitespace.js"),parens=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/parentheses.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{FLIPPED_ALIAS_KEYS,isCallExpression,isExpressionStatement,isMemberExpression,isNewExpression}=_t;function expandAliases(obj){const newObj={};function add(type,func){const fn=newObj[type];newObj[type]=fn?function(node,parent,stack){const result=fn(node,parent,stack);return null==result?func(node,parent,stack):result}:func;}for(const type of Object.keys(obj)){const aliases=FLIPPED_ALIAS_KEYS[type];if(aliases)for(const alias of aliases)add(alias,obj[type]);else add(type,obj[type]);}return newObj}const expandedParens=expandAliases(parens),expandedWhitespaceNodes=expandAliases(whitespace.nodes);function find(obj,node,parent,printStack){const fn=obj[node.type];return fn?fn(node,parent,printStack):null}function isOrHasCallExpression(node){return !!isCallExpression(node)||isMemberExpression(node)&&isOrHasCallExpression(node.object)}function needsWhitespace(node,parent,type){if(!node)return !1;isExpressionStatement(node)&&(node=node.expression);const flag=find(expandedWhitespaceNodes,node,parent);return "number"==typeof flag&&0!=(flag&type)}},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/parentheses.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.ArrowFunctionExpression=function(node,parent){return isExportDeclaration(parent)||ConditionalExpression(node,parent)},exports.AssignmentExpression=function(node,parent){return !!isObjectPattern(node.left)||ConditionalExpression(node,parent)},exports.Binary=function(node,parent){if("**"===node.operator&&isBinaryExpression(parent,{operator:"**"}))return parent.left===node;if(isClassExtendsClause(node,parent))return !0;if(hasPostfixPart(node,parent)||isUnaryLike(parent)||isAwaitExpression(parent))return !0;if(isBinary(parent)){const parentOp=parent.operator,parentPos=PRECEDENCE[parentOp],nodeOp=node.operator,nodePos=PRECEDENCE[nodeOp];if(parentPos===nodePos&&parent.right===node&&!isLogicalExpression(parent)||parentPos>nodePos)return !0}},exports.BinaryExpression=function(node,parent){return "in"===node.operator&&(isVariableDeclarator(parent)||isFor(parent))},exports.ClassExpression=function(node,parent,printStack){return isFirstInContext(printStack,5)},exports.ConditionalExpression=ConditionalExpression,exports.DoExpression=function(node,parent,printStack){return !node.async&&isFirstInContext(printStack,1)},exports.FunctionExpression=function(node,parent,printStack){return isFirstInContext(printStack,5)},exports.FunctionTypeAnnotation=function(node,parent,printStack){if(printStack.length<3)return;return isUnionTypeAnnotation(parent)||isIntersectionTypeAnnotation(parent)||isArrayTypeAnnotation(parent)||isTypeAnnotation(parent)&&isArrowFunctionExpression(printStack[printStack.length-3])},exports.Identifier=function(node,parent,printStack){var _node$extra;if(null!=(_node$extra=node.extra)&&_node$extra.parenthesized&&isAssignmentExpression(parent,{left:node})&&(isFunctionExpression(parent.right)||isClassExpression(parent.right))&&null==parent.right.id)return !0;if("let"===node.name){return isFirstInContext(printStack,isMemberExpression(parent,{object:node,computed:!0})||isOptionalMemberExpression(parent,{object:node,computed:!0,optional:!1})?57:32)}return "async"===node.name&&isForOfStatement(parent)&&node===parent.left},exports.LogicalExpression=function(node,parent){if(isTSTypeExpression(parent))return !0;switch(node.operator){case"||":return !!isLogicalExpression(parent)&&("??"===parent.operator||"&&"===parent.operator);case"&&":return isLogicalExpression(parent,{operator:"??"});case"??":return isLogicalExpression(parent)&&"??"!==parent.operator}},exports.NullableTypeAnnotation=function(node,parent){return isArrayTypeAnnotation(parent)},exports.ObjectExpression=function(node,parent,printStack){return isFirstInContext(printStack,3)},exports.OptionalIndexedAccessType=function(node,parent){return isIndexedAccessType(parent,{objectType:node})},exports.OptionalCallExpression=exports.OptionalMemberExpression=function(node,parent){return isCallExpression(parent,{callee:node})||isMemberExpression(parent,{object:node})},exports.SequenceExpression=function(node,parent){if(isForStatement(parent)||isThrowStatement(parent)||isReturnStatement(parent)||isIfStatement(parent)&&parent.test===node||isWhileStatement(parent)&&parent.test===node||isForInStatement(parent)&&parent.right===node||isSwitchStatement(parent)&&parent.discriminant===node||isExpressionStatement(parent)&&parent.expression===node)return !1;return !0},exports.TSTypeAssertion=exports.TSSatisfiesExpression=exports.TSAsExpression=function(){return !0},exports.TSInferType=function(node,parent){return isTSArrayType(parent)||isTSOptionalType(parent)},exports.TSInstantiationExpression=function(node,parent){return (isCallExpression(parent)||isOptionalCallExpression(parent)||isNewExpression(parent)||isTSInstantiationExpression(parent))&&!!parent.typeParameters},exports.TSIntersectionType=exports.TSUnionType=function(node,parent){return isTSArrayType(parent)||isTSOptionalType(parent)||isTSIntersectionType(parent)||isTSUnionType(parent)||isTSRestType(parent)},exports.UnaryLike=UnaryLike,exports.IntersectionTypeAnnotation=exports.UnionTypeAnnotation=function(node,parent){return isArrayTypeAnnotation(parent)||isNullableTypeAnnotation(parent)||isIntersectionTypeAnnotation(parent)||isUnionTypeAnnotation(parent)},exports.UpdateExpression=function(node,parent){return hasPostfixPart(node,parent)||isClassExtendsClause(node,parent)},exports.AwaitExpression=exports.YieldExpression=function(node,parent){return isBinary(parent)||isUnaryLike(parent)||hasPostfixPart(node,parent)||isAwaitExpression(parent)&&isYieldExpression(node)||isConditionalExpression(parent)&&node===parent.test||isClassExtendsClause(node,parent)};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{isArrayTypeAnnotation,isArrowFunctionExpression,isAssignmentExpression,isAwaitExpression,isBinary,isBinaryExpression,isUpdateExpression,isCallExpression,isClass,isClassExpression,isConditional,isConditionalExpression,isExportDeclaration,isExportDefaultDeclaration,isExpressionStatement,isFor,isForInStatement,isForOfStatement,isForStatement,isFunctionExpression,isIfStatement,isIndexedAccessType,isIntersectionTypeAnnotation,isLogicalExpression,isMemberExpression,isNewExpression,isNullableTypeAnnotation,isObjectPattern,isOptionalCallExpression,isOptionalMemberExpression,isReturnStatement,isSequenceExpression,isSwitchStatement,isTSArrayType,isTSAsExpression,isTSInstantiationExpression,isTSIntersectionType,isTSNonNullExpression,isTSOptionalType,isTSRestType,isTSTypeAssertion,isTSUnionType,isTaggedTemplateExpression,isThrowStatement,isTypeAnnotation,isUnaryLike,isUnionTypeAnnotation,isVariableDeclarator,isWhileStatement,isYieldExpression,isTSSatisfiesExpression}=_t,PRECEDENCE={"||":0,"??":0,"|>":0,"&&":1,"|":2,"^":3,"&":4,"==":5,"===":5,"!=":5,"!==":5,"<":6,">":6,"<=":6,">=":6,in:6,instanceof:6,">>":7,"<<":7,">>>":7,"+":8,"-":8,"*":9,"/":9,"%":9,"**":10};function isTSTypeExpression(node){return isTSAsExpression(node)||isTSSatisfiesExpression(node)||isTSTypeAssertion(node)}const isClassExtendsClause=(node,parent)=>isClass(parent,{superClass:node}),hasPostfixPart=(node,parent)=>(isMemberExpression(parent)||isOptionalMemberExpression(parent))&&parent.object===node||(isCallExpression(parent)||isOptionalCallExpression(parent)||isNewExpression(parent))&&parent.callee===node||isTaggedTemplateExpression(parent)&&parent.tag===node||isTSNonNullExpression(parent);function UnaryLike(node,parent){return hasPostfixPart(node,parent)||isBinaryExpression(parent,{operator:"**",left:node})||isClassExtendsClause(node,parent)}function ConditionalExpression(node,parent){return !!(isUnaryLike(parent)||isBinary(parent)||isConditionalExpression(parent,{test:node})||isAwaitExpression(parent)||isTSTypeExpression(parent))||UnaryLike(node,parent)}function isFirstInContext(printStack,checkParam){const expressionStatement=1&checkParam,arrowBody=2&checkParam,exportDefault=4&checkParam,forHead=8&checkParam,forInHead=16&checkParam,forOfHead=32&checkParam;let i=printStack.length-1;if(i<=0)return;let node=printStack[i];i--;let parent=printStack[i];for(;i>=0;){if(expressionStatement&&isExpressionStatement(parent,{expression:node})||exportDefault&&isExportDefaultDeclaration(parent,{declaration:node})||arrowBody&&isArrowFunctionExpression(parent,{body:node})||forHead&&isForStatement(parent,{init:node})||forInHead&&isForInStatement(parent,{left:node})||forOfHead&&isForOfStatement(parent,{left:node}))return !0;if(!(i>0&&(hasPostfixPart(node,parent)&&!isNewExpression(parent)||isSequenceExpression(parent)&&parent.expressions[0]===node||isUpdateExpression(parent)&&!parent.prefix||isConditional(parent,{test:node})||isBinary(parent,{left:node})||isAssignmentExpression(parent,{left:node}))))return !1;node=parent,i--,parent=printStack[i];}return !1}},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/whitespace.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.nodes=void 0;var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{FLIPPED_ALIAS_KEYS,isArrayExpression,isAssignmentExpression,isBinary,isBlockStatement,isCallExpression,isFunction,isIdentifier,isLiteral,isMemberExpression,isObjectExpression,isOptionalCallExpression,isOptionalMemberExpression,isStringLiteral}=_t;function crawlInternal(node,state){return node?(isMemberExpression(node)||isOptionalMemberExpression(node)?(crawlInternal(node.object,state),node.computed&&crawlInternal(node.property,state)):isBinary(node)||isAssignmentExpression(node)?(crawlInternal(node.left,state),crawlInternal(node.right,state)):isCallExpression(node)||isOptionalCallExpression(node)?(state.hasCall=!0,crawlInternal(node.callee,state)):isFunction(node)?state.hasFunction=!0:isIdentifier(node)&&(state.hasHelper=state.hasHelper||node.callee&&isHelper(node.callee)),state):state}function crawl(node){return crawlInternal(node,{hasCall:!1,hasFunction:!1,hasHelper:!1})}function isHelper(node){return !!node&&(isMemberExpression(node)?isHelper(node.object)||isHelper(node.property):isIdentifier(node)?"require"===node.name||95===node.name.charCodeAt(0):isCallExpression(node)?isHelper(node.callee):!(!isBinary(node)&&!isAssignmentExpression(node))&&(isIdentifier(node.left)&&isHelper(node.left)||isHelper(node.right)))}function isType(node){return isLiteral(node)||isObjectExpression(node)||isArrayExpression(node)||isIdentifier(node)||isMemberExpression(node)}const nodes={AssignmentExpression(node){const state=crawl(node.right);if(state.hasCall&&state.hasHelper||state.hasFunction)return state.hasFunction?3:2},SwitchCase:(node,parent)=>(node.consequent.length||parent.cases[0]===node?1:0)|(node.consequent.length||parent.cases[parent.cases.length-1]!==node?0:2),LogicalExpression(node){if(isFunction(node.left)||isFunction(node.right))return 2},Literal(node){if(isStringLiteral(node)&&"use strict"===node.value)return 2},CallExpression(node){if(isFunction(node.callee)||isHelper(node))return 3},OptionalCallExpression(node){if(isFunction(node.callee))return 3},VariableDeclaration(node){for(let i=0;i<node.declarations.length;i++){const declar=node.declarations[i];let enabled=isHelper(declar.id)&&!isType(declar.init);if(!enabled&&declar.init){const state=crawl(declar.init);enabled=isHelper(declar.init)&&state.hasCall||state.hasFunction;}if(enabled)return 3}},IfStatement(node){if(isBlockStatement(node.consequent))return 3}};exports.nodes=nodes,nodes.ObjectProperty=nodes.ObjectTypeProperty=nodes.ObjectMethod=function(node,parent){if(parent.properties[0]===node)return 1},nodes.ObjectTypeCallProperty=function(node,parent){var _parent$properties;if(parent.callProperties[0]===node&&(null==(_parent$properties=parent.properties)||!_parent$properties.length))return 1},nodes.ObjectTypeIndexer=function(node,parent){var _parent$properties2,_parent$callPropertie;if(!(parent.indexers[0]!==node||null!=(_parent$properties2=parent.properties)&&_parent$properties2.length||null!=(_parent$callPropertie=parent.callProperties)&&_parent$callPropertie.length))return 1},nodes.ObjectTypeInternalSlot=function(node,parent){var _parent$properties3,_parent$callPropertie2,_parent$indexers;if(!(parent.internalSlots[0]!==node||null!=(_parent$properties3=parent.properties)&&_parent$properties3.length||null!=(_parent$callPropertie2=parent.callProperties)&&_parent$callPropertie2.length||null!=(_parent$indexers=parent.indexers)&&_parent$indexers.length))return 1},[["Function",!0],["Class",!0],["Loop",!0],["LabeledStatement",!0],["SwitchStatement",!0],["TryStatement",!0]].forEach((function([type,amounts]){[type].concat(FLIPPED_ALIAS_KEYS[type]||[]).forEach((function(type){const ret=amounts?3:0;nodes[type]=()=>ret;}));}));},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/printer.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _buffer=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/buffer.js"),n=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/node/index.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),generatorFunctions=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/generators/index.js");__webpack_require__("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.17/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js");const{isFunction,isStatement,isClassBody,isTSInterfaceBody,isTSEnumDeclaration}=_t,SCIENTIFIC_NOTATION=/e/i,ZERO_DECIMAL_INTEGER=/\.0+$/,NON_DECIMAL_LITERAL=/^0[box]/,PURE_ANNOTATION_RE=/^\s*[@#]__PURE__\s*$/,HAS_NEWLINE=/[\n\r\u2028\u2029]/,HAS_BlOCK_COMMENT_END=/\*\//,{needsParens}=n;class Printer{constructor(format,map){this.inForStatementInitCounter=0,this._printStack=[],this._indent=0,this._indentChar=0,this._indentRepeat=0,this._insideAux=!1,this._parenPushNewlineState=null,this._noLineTerminator=!1,this._printAuxAfterOnNextUserNode=!1,this._printedComments=new Set,this._endsWithInteger=!1,this._endsWithWord=!1,this._lastCommentLine=0,this._endsWithInnerRaw=!1,this._indentInnerComments=!0,this.format=format,this._buf=new _buffer.default(map),this._indentChar=format.indent.style.charCodeAt(0),this._indentRepeat=format.indent.style.length,this._inputMap=null==map?void 0:map._inputMap;}generate(ast){return this.print(ast),this._maybeAddAuxComment(),this._buf.get()}indent(){this.format.compact||this.format.concise||this._indent++;}dedent(){this.format.compact||this.format.concise||this._indent--;}semicolon(force=!1){this._maybeAddAuxComment(),force?this._appendChar(59):this._queue(59),this._noLineTerminator=!1;}rightBrace(){this.format.minified&&this._buf.removeLastSemicolon(),this.tokenChar(125);}space(force=!1){if(!this.format.compact)if(force)this._space();else if(this._buf.hasContent()){const lastCp=this.getLastChar();32!==lastCp&&10!==lastCp&&this._space();}}word(str,noLineTerminatorAfter=!1){this._maybePrintInnerComments(),(this._endsWithWord||47===str.charCodeAt(0)&&this.endsWith(47))&&this._space(),this._maybeAddAuxComment(),this._append(str,!1),this._endsWithWord=!0,this._noLineTerminator=noLineTerminatorAfter;}number(str){this.word(str),this._endsWithInteger=Number.isInteger(+str)&&!NON_DECIMAL_LITERAL.test(str)&&!SCIENTIFIC_NOTATION.test(str)&&!ZERO_DECIMAL_INTEGER.test(str)&&46!==str.charCodeAt(str.length-1);}token(str,maybeNewline=!1){this._maybePrintInnerComments();const lastChar=this.getLastChar(),strFirst=str.charCodeAt(0);(33===lastChar&&"--"===str||43===strFirst&&43===lastChar||45===strFirst&&45===lastChar||46===strFirst&&this._endsWithInteger)&&this._space(),this._maybeAddAuxComment(),this._append(str,maybeNewline),this._noLineTerminator=!1;}tokenChar(char){this._maybePrintInnerComments();const lastChar=this.getLastChar();(43===char&&43===lastChar||45===char&&45===lastChar||46===char&&this._endsWithInteger)&&this._space(),this._maybeAddAuxComment(),this._appendChar(char),this._noLineTerminator=!1;}newline(i=1,force){if(!(i<=0)){if(!force){if(this.format.retainLines||this.format.compact)return;if(this.format.concise)return void this.space()}i>2&&(i=2),i-=this._buf.getNewlineCount();for(let j=0;j<i;j++)this._newline();}}endsWith(char){return this.getLastChar()===char}getLastChar(){return this._buf.getLastChar()}endsWithCharAndNewline(){return this._buf.endsWithCharAndNewline()}removeTrailingNewline(){this._buf.removeTrailingNewline();}exactSource(loc,cb){loc?(this._catchUp("start",loc),this._buf.exactSource(loc,cb)):cb();}source(prop,loc){loc&&(this._catchUp(prop,loc),this._buf.source(prop,loc));}sourceWithOffset(prop,loc,lineOffset,columnOffset){loc&&(this._catchUp(prop,loc),this._buf.sourceWithOffset(prop,loc,lineOffset,columnOffset));}withSource(prop,loc,cb){loc?(this._catchUp(prop,loc),this._buf.withSource(prop,loc,cb)):cb();}sourceIdentifierName(identifierName,pos){if(!this._buf._canMarkIdName)return;const sourcePosition=this._buf._sourcePosition;sourcePosition.identifierNamePos=pos,sourcePosition.identifierName=identifierName;}_space(){this._queue(32);}_newline(){this._queue(10);}_append(str,maybeNewline){this._maybeAddParen(str),this._maybeIndent(str.charCodeAt(0)),this._buf.append(str,maybeNewline),this._endsWithWord=!1,this._endsWithInteger=!1;}_appendChar(char){this._maybeAddParenChar(char),this._maybeIndent(char),this._buf.appendChar(char),this._endsWithWord=!1,this._endsWithInteger=!1;}_queue(char){this._maybeAddParenChar(char),this._maybeIndent(char),this._buf.queue(char),this._endsWithWord=!1,this._endsWithInteger=!1;}_maybeIndent(firstChar){this._indent&&10!==firstChar&&this.endsWith(10)&&this._buf.queueIndentation(this._indentChar,this._getIndent());}_shouldIndent(firstChar){if(this._indent&&10!==firstChar&&this.endsWith(10))return !0}_maybeAddParenChar(char){const parenPushNewlineState=this._parenPushNewlineState;parenPushNewlineState&&32!==char&&(10===char?(this.tokenChar(40),this.indent(),parenPushNewlineState.printed=!0):this._parenPushNewlineState=null);}_maybeAddParen(str){const parenPushNewlineState=this._parenPushNewlineState;if(!parenPushNewlineState)return;const len=str.length;let i;for(i=0;i<len&&32===str.charCodeAt(i);i++)continue;if(i===len)return;const cha=str.charCodeAt(i);if(10!==cha){if(47!==cha||i+1===len)return void(this._parenPushNewlineState=null);const chaPost=str.charCodeAt(i+1);if(42===chaPost){if(PURE_ANNOTATION_RE.test(str.slice(i+2,len-2)))return}else if(47!==chaPost)return void(this._parenPushNewlineState=null)}this.tokenChar(40),this.indent(),parenPushNewlineState.printed=!0;}catchUp(line){if(!this.format.retainLines)return;const count=line-this._buf.getCurrentLine();for(let i=0;i<count;i++)this._newline();}_catchUp(prop,loc){if(!this.format.retainLines)return;const pos=loc?loc[prop]:null;if(null!=(null==pos?void 0:pos.line)){const count=pos.line-this._buf.getCurrentLine();for(let i=0;i<count;i++)this._newline();}}_getIndent(){return this._indentRepeat*this._indent}printTerminatorless(node,parent,isLabel){if(isLabel)this._noLineTerminator=!0,this.print(node,parent);else {const terminatorState={printed:!1};this._parenPushNewlineState=terminatorState,this.print(node,parent),terminatorState.printed&&(this.dedent(),this.newline(),this.tokenChar(41));}}print(node,parent,noLineTerminatorAfter,trailingCommentsLineOffset,forceParens){if(!node)return;this._endsWithInnerRaw=!1;const nodeType=node.type,format=this.format,oldConcise=format.concise;node._compact&&(format.concise=!0);const printMethod=this[nodeType];if(void 0===printMethod)throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);this._printStack.push(node);const oldInAux=this._insideAux;this._insideAux=null==node.loc,this._maybeAddAuxComment(this._insideAux&&!oldInAux);let shouldPrintParens=!1;shouldPrintParens=!!forceParens||(!!(format.retainFunctionParens&&"FunctionExpression"===nodeType&&node.extra&&node.extra.parenthesized)||needsParens(node,parent,this._printStack)),shouldPrintParens&&(this.tokenChar(40),this._endsWithInnerRaw=!1),this._lastCommentLine=0,this._printLeadingComments(node,parent);const loc="Program"===nodeType||"File"===nodeType?null:node.loc;this.exactSource(loc,printMethod.bind(this,node,parent)),shouldPrintParens?(this._printTrailingComments(node,parent),this.tokenChar(41),this._noLineTerminator=noLineTerminatorAfter):noLineTerminatorAfter&&!this._noLineTerminator?(this._noLineTerminator=!0,this._printTrailingComments(node,parent)):this._printTrailingComments(node,parent,trailingCommentsLineOffset),this._printStack.pop(),format.concise=oldConcise,this._insideAux=oldInAux,this._endsWithInnerRaw=!1;}_maybeAddAuxComment(enteredPositionlessNode){enteredPositionlessNode&&this._printAuxBeforeComment(),this._insideAux||this._printAuxAfterComment();}_printAuxBeforeComment(){if(this._printAuxAfterOnNextUserNode)return;this._printAuxAfterOnNextUserNode=!0;const comment=this.format.auxiliaryCommentBefore;comment&&this._printComment({type:"CommentBlock",value:comment},0);}_printAuxAfterComment(){if(!this._printAuxAfterOnNextUserNode)return;this._printAuxAfterOnNextUserNode=!1;const comment=this.format.auxiliaryCommentAfter;comment&&this._printComment({type:"CommentBlock",value:comment},0);}getPossibleRaw(node){const extra=node.extra;if(extra&&null!=extra.raw&&null!=extra.rawValue&&node.value===extra.rawValue)return extra.raw}printJoin(nodes,parent,opts={}){if(null==nodes||!nodes.length)return;opts.indent&&this.indent();const newlineOpts={addNewlines:opts.addNewlines,nextNodeStartLine:0},separator=opts.separator?opts.separator.bind(this):null,len=nodes.length;for(let i=0;i<len;i++){const node=nodes[i];if(node&&(opts.statement&&this._printNewline(0===i,newlineOpts),this.print(node,parent,void 0,opts.trailingCommentsLineOffset||0),null==opts.iterator||opts.iterator(node,i),i<len-1&&(null==separator||separator()),opts.statement))if(i+1===len)this.newline(1);else {var _nextNode$loc;const nextNode=nodes[i+1];newlineOpts.nextNodeStartLine=(null==(_nextNode$loc=nextNode.loc)?void 0:_nextNode$loc.start.line)||0,this._printNewline(!0,newlineOpts);}}opts.indent&&this.dedent();}printAndIndentOnComments(node,parent){const indent=node.leadingComments&&node.leadingComments.length>0;indent&&this.indent(),this.print(node,parent),indent&&this.dedent();}printBlock(parent){const node=parent.body;"EmptyStatement"!==node.type&&this.space(),this.print(node,parent);}_printTrailingComments(node,parent,lineOffset){const{innerComments,trailingComments}=node;null!=innerComments&&innerComments.length&&this._printComments(2,innerComments,node,parent,lineOffset),null!=trailingComments&&trailingComments.length&&this._printComments(2,trailingComments,node,parent,lineOffset);}_printLeadingComments(node,parent){const comments=node.leadingComments;null!=comments&&comments.length&&this._printComments(0,comments,node,parent);}_maybePrintInnerComments(){this._endsWithInnerRaw&&this.printInnerComments(),this._endsWithInnerRaw=!0,this._indentInnerComments=!0;}printInnerComments(){const node=this._printStack[this._printStack.length-1],comments=node.innerComments;if(null==comments||!comments.length)return;const hasSpace=this.endsWith(32),indent=this._indentInnerComments,printedCommentsCount=this._printedComments.size;indent&&this.indent(),this._printComments(1,comments,node),hasSpace&&printedCommentsCount!==this._printedComments.size&&this.space(),indent&&this.dedent();}noIndentInnerCommentsHere(){this._indentInnerComments=!1;}printSequence(nodes,parent,opts={}){opts.statement=!0,this.printJoin(nodes,parent,opts);}printList(items,parent,opts={}){null==opts.separator&&(opts.separator=commaSeparator),this.printJoin(items,parent,opts);}_printNewline(newLine,opts){if(this.format.retainLines||this.format.compact)return;if(this.format.concise)return void this.space();if(!newLine)return;const startLine=opts.nextNodeStartLine,lastCommentLine=this._lastCommentLine;if(startLine>0&&lastCommentLine>0){const offset=startLine-lastCommentLine;if(offset>=0)return void this.newline(offset||1)}this._buf.hasContent()&&this.newline(1);}_shouldPrintComment(comment){return comment.ignore||this._printedComments.has(comment)?0:this._noLineTerminator&&(HAS_NEWLINE.test(comment.value)||HAS_BlOCK_COMMENT_END.test(comment.value))?2:(this._printedComments.add(comment),this.format.shouldPrintComment(comment.value)?1:0)}_printComment(comment,skipNewLines){const noLineTerminator=this._noLineTerminator,isBlockComment="CommentBlock"===comment.type,printNewLines=isBlockComment&&1!==skipNewLines&&!this._noLineTerminator;printNewLines&&this._buf.hasContent()&&2!==skipNewLines&&this.newline(1);const lastCharCode=this.getLastChar();let val;if(91!==lastCharCode&&123!==lastCharCode&&this.space(),isBlockComment){if(val=`/*${comment.value}*/`,this.format.indent.adjustMultilineComment){var _comment$loc;const offset=null==(_comment$loc=comment.loc)?void 0:_comment$loc.start.column;if(offset){const newlineRegex=new RegExp("\\n\\s{1,"+offset+"}","g");val=val.replace(newlineRegex,"\n");}let indentSize=this.format.retainLines?0:this._buf.getCurrentColumn();(this._shouldIndent(47)||this.format.retainLines)&&(indentSize+=this._getIndent()),val=val.replace(/\n(?!$)/g,`\n${" ".repeat(indentSize)}`);}}else val=noLineTerminator?`/*${comment.value}*/`:`//${comment.value}`;this.endsWith(47)&&this._space(),this.source("start",comment.loc),this._append(val,isBlockComment),isBlockComment||noLineTerminator||this.newline(1,!0),printNewLines&&3!==skipNewLines&&this.newline(1);}_printComments(type,comments,node,parent,lineOffset=0){const nodeLoc=node.loc,len=comments.length;let hasLoc=!!nodeLoc;const nodeStartLine=hasLoc?nodeLoc.start.line:0,nodeEndLine=hasLoc?nodeLoc.end.line:0;let lastLine=0,leadingCommentNewline=0;const maybeNewline=this._noLineTerminator?function(){}:this.newline.bind(this);for(let i=0;i<len;i++){const comment=comments[i],shouldPrint=this._shouldPrintComment(comment);if(2===shouldPrint){hasLoc=!1;break}if(hasLoc&&comment.loc&&1===shouldPrint){const commentStartLine=comment.loc.start.line,commentEndLine=comment.loc.end.line;if(0===type){let offset=0;0===i?!this._buf.hasContent()||"CommentLine"!==comment.type&&commentStartLine==commentEndLine||(offset=leadingCommentNewline=1):offset=commentStartLine-lastLine,lastLine=commentEndLine,maybeNewline(offset),this._printComment(comment,1),i+1===len&&(maybeNewline(Math.max(nodeStartLine-lastLine,leadingCommentNewline)),lastLine=nodeStartLine);}else if(1===type){const offset=commentStartLine-(0===i?nodeStartLine:lastLine);lastLine=commentEndLine,maybeNewline(offset),this._printComment(comment,1),i+1===len&&(maybeNewline(Math.min(1,nodeEndLine-lastLine)),lastLine=nodeEndLine);}else {const offset=commentStartLine-(0===i?nodeEndLine-lineOffset:lastLine);lastLine=commentEndLine,maybeNewline(offset),this._printComment(comment,1);}}else {if(hasLoc=!1,1!==shouldPrint)continue;if(1===len){const singleLine=comment.loc?comment.loc.start.line===comment.loc.end.line:!HAS_NEWLINE.test(comment.value),shouldSkipNewline=singleLine&&!isStatement(node)&&!isClassBody(parent)&&!isTSInterfaceBody(parent)&&!isTSEnumDeclaration(parent);0===type?this._printComment(comment,shouldSkipNewline&&"ObjectExpression"!==node.type||singleLine&&isFunction(parent,{body:node})?1:0):shouldSkipNewline&&2===type?this._printComment(comment,1):this._printComment(comment,0);}else 1!==type||"ObjectExpression"===node.type&&node.properties.length>1||"ClassBody"===node.type||"TSInterfaceBody"===node.type?this._printComment(comment,0):this._printComment(comment,0===i?2:i===len-1?3:0);}}2===type&&hasLoc&&lastLine&&(this._lastCommentLine=lastLine);}}Object.assign(Printer.prototype,generatorFunctions),Printer.prototype.Noop=function(){};var _default=Printer;function commaSeparator(){this.tokenChar(44),this.space();}exports.default=_default;},"./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/source-map.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _genMapping=__webpack_require__("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.2/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js"),_traceMapping=__webpack_require__("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.17/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js");exports.default=class{constructor(opts,code){var _opts$sourceFileName;this._map=void 0,this._rawMappings=void 0,this._sourceFileName=void 0,this._lastGenLine=0,this._lastSourceLine=0,this._lastSourceColumn=0,this._inputMap=void 0;const map=this._map=new _genMapping.GenMapping({sourceRoot:opts.sourceRoot});if(this._sourceFileName=null==(_opts$sourceFileName=opts.sourceFileName)?void 0:_opts$sourceFileName.replace(/\\/g,"/"),this._rawMappings=void 0,opts.inputSourceMap){this._inputMap=new _traceMapping.TraceMap(opts.inputSourceMap);const resolvedSources=this._inputMap.resolvedSources;if(resolvedSources.length)for(let i=0;i<resolvedSources.length;i++){var _this$_inputMap$sourc;(0, _genMapping.setSourceContent)(map,resolvedSources[i],null==(_this$_inputMap$sourc=this._inputMap.sourcesContent)?void 0:_this$_inputMap$sourc[i]);}}if("string"!=typeof code||opts.inputSourceMap){if("object"==typeof code)for(const sourceFileName of Object.keys(code))(0, _genMapping.setSourceContent)(map,sourceFileName.replace(/\\/g,"/"),code[sourceFileName]);}else (0, _genMapping.setSourceContent)(map,this._sourceFileName,code);}get(){return (0, _genMapping.toEncodedMap)(this._map)}getDecoded(){return (0, _genMapping.toDecodedMap)(this._map)}getRawMappings(){return this._rawMappings||(this._rawMappings=(0, _genMapping.allMappings)(this._map))}mark(generated,line,column,identifierName,identifierNamePos,filename){var _originalMapping;let originalMapping;if(this._rawMappings=void 0,null!=line)if(this._inputMap){if(originalMapping=(0, _traceMapping.originalPositionFor)(this._inputMap,{line,column}),!originalMapping.name&&identifierNamePos){const originalIdentifierMapping=(0, _traceMapping.originalPositionFor)(this._inputMap,identifierNamePos);originalIdentifierMapping.name&&(identifierName=originalIdentifierMapping.name);}}else originalMapping={source:(null==filename?void 0:filename.replace(/\\/g,"/"))||this._sourceFileName,line,column};(0, _genMapping.maybeAddMapping)(this._map,{name:identifierName,generated,source:null==(_originalMapping=originalMapping)?void 0:_originalMapping.source,original:originalMapping});}};},"./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.18.6/node_modules/@babel/helper-annotate-as-pure/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(pathOrNode){const node=pathOrNode.node||pathOrNode;if(isPureAnnotated(node))return;addComment(node,"leading",PURE_ANNOTATION);};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{addComment}=_t,PURE_ANNOTATION="#__PURE__",isPureAnnotated=({leadingComments})=>!!leadingComments&&leadingComments.some((comment=>/[@#]__PURE__/.test(comment.value)));},"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.buildDecoratedClass=function(ref,path,elements,file){const{node,scope}=path,initializeId=scope.generateUidIdentifier("initialize"),isDeclaration=node.id&&path.isDeclaration(),isStrict=path.isInStrictMode(),{superClass}=node;node.type="ClassDeclaration",node.id||(node.id=_core.types.cloneNode(ref));let superId;superClass&&(superId=scope.generateUidIdentifierBasedOnNode(node.superClass,"super"),node.superClass=superId);const classDecorators=takeDecorators(node),definitions=_core.types.arrayExpression(elements.filter((element=>!element.node.abstract&&"TSIndexSignature"!==element.node.type)).map((path=>function(file,classRef,superRef,path){const isMethod=path.isClassMethod();if(path.isPrivate())throw path.buildCodeFrameError(`Private ${isMethod?"methods":"fields"} in decorated classes are not supported yet.`);if("ClassAccessorProperty"===path.node.type)throw path.buildCodeFrameError('Accessor properties are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');if("StaticBlock"===path.node.type)throw path.buildCodeFrameError('Static blocks are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');const{node,scope}=path;path.isTSDeclareMethod()||new _helperReplaceSupers.default({methodPath:path,objectRef:classRef,superRef,file,refToPreserve:classRef}).replace();const properties=[prop("kind",_core.types.stringLiteral(_core.types.isClassMethod(node)?node.kind:"field")),prop("decorators",takeDecorators(node)),prop("static",node.static&&_core.types.booleanLiteral(!0)),prop("key",getKey(node))].filter(Boolean);if(_core.types.isClassMethod(node)){const id=node.computed?null:node.key,transformed=_core.types.toExpression(node);properties.push(prop("value",(0, _helperFunctionName.default)({node:transformed,id,scope})||transformed));}else _core.types.isClassProperty(node)&&node.value?properties.push((key="value",body=_core.template.statements.ast`return ${node.value}`,_core.types.objectMethod("method",_core.types.identifier(key),[],_core.types.blockStatement(body)))):properties.push(prop("value",scope.buildUndefinedNode()));var key,body;return path.remove(),_core.types.objectExpression(properties)}(file,node.id,superId,path)))),wrapperCall=_core.template.expression.ast`
    ${function(file){return file.addHelper("decorate")}(file)}(
      ${classDecorators||_core.types.nullLiteral()},
      function (${initializeId}, ${superClass?_core.types.cloneNode(superId):null}) {
        ${node}
        return { F: ${_core.types.cloneNode(node.id)}, d: ${definitions} };
      },
      ${superClass}
    )
  `;isStrict||wrapperCall.arguments[1].body.directives.push(_core.types.directive(_core.types.directiveLiteral("use strict")));let replacement=wrapperCall,classPathDesc="arguments.1.body.body.0";isDeclaration&&(replacement=_core.template.statement.ast`let ${ref} = ${wrapperCall}`,classPathDesc="declarations.0.init."+classPathDesc);return {instanceNodes:[_core.template.statement.ast`${_core.types.cloneNode(initializeId)}(this)`],wrapClass:path=>(path.replaceWith(replacement),path.get(classPathDesc))}},exports.hasDecorators=function(node){return hasOwnDecorators(node)||node.body.body.some(hasOwnDecorators)},exports.hasOwnDecorators=hasOwnDecorators;var _core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_helperReplaceSupers=__webpack_require__("./node_modules/.pnpm/@babel+helper-replace-supers@7.20.7/node_modules/@babel/helper-replace-supers/lib/index.js"),_helperFunctionName=__webpack_require__("./node_modules/.pnpm/@babel+helper-function-name@7.21.0/node_modules/@babel/helper-function-name/lib/index.js");function hasOwnDecorators(node){return !(!node.decorators||!node.decorators.length)}function prop(key,value){return value?_core.types.objectProperty(_core.types.identifier(key),value):null}function takeDecorators(node){let result;return node.decorators&&node.decorators.length>0&&(result=_core.types.arrayExpression(node.decorators.map((decorator=>decorator.expression)))),node.decorators=void 0,result}function getKey(node){return node.computed?node.key:_core.types.isIdentifier(node.key)?_core.types.stringLiteral(node.key.name):_core.types.stringLiteral(String(node.key.value))}},"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/features.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.FEATURES=void 0,exports.enableFeature=function(file,feature,loose){hasFeature(file,feature)&&!canIgnoreLoose(file,feature)||(file.set(featuresKey,file.get(featuresKey)|feature),"#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error"===loose?(setLoose(file,feature,!0),file.set(looseLowPriorityKey,file.get(looseLowPriorityKey)|feature)):"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error"===loose?(setLoose(file,feature,!1),file.set(looseLowPriorityKey,file.get(looseLowPriorityKey)|feature)):setLoose(file,feature,loose));let resolvedLoose,higherPriorityPluginName;for(const[mask,name]of featuresSameLoose){if(!hasFeature(file,mask))continue;const loose=isLoose(file,mask);if(!canIgnoreLoose(file,mask)){if(resolvedLoose===!loose)throw new Error("'loose' mode configuration must be the same for @babel/plugin-proposal-class-properties, @babel/plugin-proposal-private-methods and @babel/plugin-proposal-private-property-in-object (when they are enabled).");resolvedLoose=loose,higherPriorityPluginName=name;}}if(void 0!==resolvedLoose)for(const[mask,name]of featuresSameLoose)hasFeature(file,mask)&&isLoose(file,mask)!==resolvedLoose&&(setLoose(file,mask,resolvedLoose),console.warn(`Though the "loose" option was set to "${!resolvedLoose}" in your @babel/preset-env config, it will not be used for ${name} since the "loose" mode option was set to "${resolvedLoose}" for ${higherPriorityPluginName}.\nThe "loose" option must be the same for @babel/plugin-proposal-class-properties, @babel/plugin-proposal-private-methods and @babel/plugin-proposal-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding\n\t["${name}", { "loose": ${resolvedLoose} }]\nto the "plugins" section of your Babel config.`));},exports.isLoose=isLoose,exports.shouldTransform=function(path,file){let decoratorPath=null,publicFieldPath=null,privateFieldPath=null,privateMethodPath=null,staticBlockPath=null;(0, _decorators.hasOwnDecorators)(path.node)&&(decoratorPath=path.get("decorators.0"));for(const el of path.get("body.body"))!decoratorPath&&(0, _decorators.hasOwnDecorators)(el.node)&&(decoratorPath=el.get("decorators.0")),!publicFieldPath&&el.isClassProperty()&&(publicFieldPath=el),!privateFieldPath&&el.isClassPrivateProperty()&&(privateFieldPath=el),!privateMethodPath&&null!=el.isClassPrivateMethod&&el.isClassPrivateMethod()&&(privateMethodPath=el),!staticBlockPath&&null!=el.isStaticBlock&&el.isStaticBlock()&&(staticBlockPath=el);if(decoratorPath&&privateFieldPath)throw privateFieldPath.buildCodeFrameError("Private fields in decorated classes are not supported yet.");if(decoratorPath&&privateMethodPath)throw privateMethodPath.buildCodeFrameError("Private methods in decorated classes are not supported yet.");if(decoratorPath&&!hasFeature(file,FEATURES.decorators))throw path.buildCodeFrameError('Decorators are not enabled.\nIf you are using ["@babel/plugin-proposal-decorators", { "version": "legacy" }], make sure it comes *before* "@babel/plugin-proposal-class-properties" and enable loose mode, like so:\n\t["@babel/plugin-proposal-decorators", { "version": "legacy" }]\n\t["@babel/plugin-proposal-class-properties", { "loose": true }]');if(privateMethodPath&&!hasFeature(file,FEATURES.privateMethods))throw privateMethodPath.buildCodeFrameError("Class private methods are not enabled. Please add `@babel/plugin-proposal-private-methods` to your configuration.");if((publicFieldPath||privateFieldPath)&&!hasFeature(file,FEATURES.fields)&&!hasFeature(file,FEATURES.privateMethods))throw path.buildCodeFrameError("Class fields are not enabled. Please add `@babel/plugin-proposal-class-properties` to your configuration.");if(staticBlockPath&&!hasFeature(file,FEATURES.staticBlocks))throw path.buildCodeFrameError("Static class blocks are not enabled. Please add `@babel/plugin-proposal-class-static-block` to your configuration.");if(decoratorPath||privateMethodPath||staticBlockPath)return !0;if((publicFieldPath||privateFieldPath)&&hasFeature(file,FEATURES.fields))return !0;return !1};var _decorators=__webpack_require__("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js");const FEATURES=Object.freeze({fields:2,privateMethods:4,decorators:8,privateIn:16,staticBlocks:32});exports.FEATURES=FEATURES;const featuresSameLoose=new Map([[FEATURES.fields,"@babel/plugin-proposal-class-properties"],[FEATURES.privateMethods,"@babel/plugin-proposal-private-methods"],[FEATURES.privateIn,"@babel/plugin-proposal-private-property-in-object"]]),featuresKey="@babel/plugin-class-features/featuresKey",looseKey="@babel/plugin-class-features/looseKey",looseLowPriorityKey="@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing";function hasFeature(file,feature){return !!(file.get(featuresKey)&feature)}function isLoose(file,feature){return !!(file.get(looseKey)&feature)}function setLoose(file,feature,loose){loose?file.set(looseKey,file.get(looseKey)|feature):file.set(looseKey,file.get(looseKey)&~feature),file.set(looseLowPriorityKey,file.get(looseLowPriorityKey)&~feature);}function canIgnoreLoose(file,feature){return !!(file.get(looseLowPriorityKey)&feature)}},"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.buildCheckInRHS=buildCheckInRHS,exports.buildFieldsInitNodes=function(ref,superRef,props,privateNamesMap,state,setPublicClassFields,privateFieldsAsProperties,constantSuper,innerBindingRef){let injectSuperRef,needsClassRef=!1;const staticNodes=[],instanceNodes=[],pureStaticNodes=[],getSuperRef=_core.types.isIdentifier(superRef)?()=>superRef:()=>(null!=injectSuperRef||(injectSuperRef=props[0].scope.generateUidIdentifierBasedOnNode(superRef)),injectSuperRef);for(const prop of props){prop.isClassProperty()&&ts.assertFieldTransformed(prop);const isStatic=!(null!=_core.types.isStaticBlock&&_core.types.isStaticBlock(prop.node))&&prop.node.static,isInstance=!isStatic,isPrivate=prop.isPrivate(),isPublic=!isPrivate,isField=prop.isProperty(),isMethod=!isField,isStaticBlock=null==prop.isStaticBlock?void 0:prop.isStaticBlock();if(isStatic||isMethod&&isPrivate||isStaticBlock){const replaced=replaceThisContext(prop,ref,getSuperRef,state,isStaticBlock,constantSuper,innerBindingRef);needsClassRef=needsClassRef||replaced;}switch(!0){case isStaticBlock:{const blockBody=prop.node.body;1===blockBody.length&&_core.types.isExpressionStatement(blockBody[0])?staticNodes.push(inheritPropComments(blockBody[0],prop)):staticNodes.push(_core.types.inheritsComments(_core.template.statement.ast`(() => { ${blockBody} })()`,prop.node));break}case isStatic&&isPrivate&&isField&&privateFieldsAsProperties:needsClassRef=!0,staticNodes.push(buildPrivateFieldInitLoose(_core.types.cloneNode(ref),prop,privateNamesMap));break;case isStatic&&isPrivate&&isField&&!privateFieldsAsProperties:needsClassRef=!0,staticNodes.push(buildPrivateStaticFieldInitSpec(prop,privateNamesMap));break;case isStatic&&isPublic&&isField&&setPublicClassFields:if(!isNameOrLength(prop.node)){needsClassRef=!0,staticNodes.push(buildPublicFieldInitLoose(_core.types.cloneNode(ref),prop));break}case isStatic&&isPublic&&isField&&!setPublicClassFields:needsClassRef=!0,staticNodes.push(buildPublicFieldInitSpec(_core.types.cloneNode(ref),prop,state));break;case isInstance&&isPrivate&&isField&&privateFieldsAsProperties:instanceNodes.push(buildPrivateFieldInitLoose(_core.types.thisExpression(),prop,privateNamesMap));break;case isInstance&&isPrivate&&isField&&!privateFieldsAsProperties:instanceNodes.push(buildPrivateInstanceFieldInitSpec(_core.types.thisExpression(),prop,privateNamesMap,state));break;case isInstance&&isPrivate&&isMethod&&privateFieldsAsProperties:instanceNodes.unshift(buildPrivateMethodInitLoose(_core.types.thisExpression(),prop,privateNamesMap)),pureStaticNodes.push(buildPrivateMethodDeclaration(prop,privateNamesMap,privateFieldsAsProperties));break;case isInstance&&isPrivate&&isMethod&&!privateFieldsAsProperties:instanceNodes.unshift(buildPrivateInstanceMethodInitSpec(_core.types.thisExpression(),prop,privateNamesMap,state)),pureStaticNodes.push(buildPrivateMethodDeclaration(prop,privateNamesMap,privateFieldsAsProperties));break;case isStatic&&isPrivate&&isMethod&&!privateFieldsAsProperties:needsClassRef=!0,staticNodes.unshift(buildPrivateStaticFieldInitSpec(prop,privateNamesMap)),pureStaticNodes.push(buildPrivateMethodDeclaration(prop,privateNamesMap,privateFieldsAsProperties));break;case isStatic&&isPrivate&&isMethod&&privateFieldsAsProperties:needsClassRef=!0,staticNodes.unshift(buildPrivateStaticMethodInitLoose(_core.types.cloneNode(ref),prop,state,privateNamesMap)),pureStaticNodes.push(buildPrivateMethodDeclaration(prop,privateNamesMap,privateFieldsAsProperties));break;case isInstance&&isPublic&&isField&&setPublicClassFields:instanceNodes.push(buildPublicFieldInitLoose(_core.types.thisExpression(),prop));break;case isInstance&&isPublic&&isField&&!setPublicClassFields:instanceNodes.push(buildPublicFieldInitSpec(_core.types.thisExpression(),prop,state));break;default:throw new Error("Unreachable.")}}return {staticNodes:staticNodes.filter(Boolean),instanceNodes:instanceNodes.filter(Boolean),pureStaticNodes:pureStaticNodes.filter(Boolean),wrapClass(path){for(const prop of props)prop.remove();return injectSuperRef&&(path.scope.push({id:_core.types.cloneNode(injectSuperRef)}),path.set("superClass",_core.types.assignmentExpression("=",injectSuperRef,path.node.superClass))),needsClassRef?(path.isClassExpression()?(path.scope.push({id:ref}),path.replaceWith(_core.types.assignmentExpression("=",_core.types.cloneNode(ref),path.node))):path.node.id||(path.node.id=ref),path):path}}},exports.buildPrivateNamesMap=function(props){const privateNamesMap=new Map;for(const prop of props)if(prop.isPrivate()){const{name}=prop.node.key.id,update=privateNamesMap.has(name)?privateNamesMap.get(name):{id:prop.scope.generateUidIdentifier(name),static:prop.node.static,method:!prop.isProperty()};prop.isClassPrivateMethod()&&("get"===prop.node.kind?update.getId=prop.scope.generateUidIdentifier(`get_${name}`):"set"===prop.node.kind?update.setId=prop.scope.generateUidIdentifier(`set_${name}`):"method"===prop.node.kind&&(update.methodId=prop.scope.generateUidIdentifier(name))),privateNamesMap.set(name,update);}return privateNamesMap},exports.buildPrivateNamesNodes=function(privateNamesMap,privateFieldsAsProperties,privateFieldsAsSymbols,state){const initNodes=[];for(const[name,value]of privateNamesMap){const{static:isStatic,method:isMethod,getId,setId}=value,isAccessor=getId||setId,id=_core.types.cloneNode(value.id);let init;privateFieldsAsProperties?init=_core.types.callExpression(state.addHelper("classPrivateFieldLooseKey"),[_core.types.stringLiteral(name)]):privateFieldsAsSymbols?init=_core.types.callExpression(_core.types.identifier("Symbol"),[_core.types.stringLiteral(name)]):isStatic||(init=_core.types.newExpression(_core.types.identifier(!isMethod||isAccessor?"WeakMap":"WeakSet"),[])),init&&((0, _helperAnnotateAsPure.default)(init),initNodes.push(_core.template.statement.ast`var ${id} = ${init}`));}return initNodes},exports.transformPrivateNamesUsage=function(ref,path,privateNamesMap,{privateFieldsAsProperties,noDocumentAll,innerBinding},state){if(!privateNamesMap.size)return;const body=path.get("body"),handler=privateFieldsAsProperties?privateNameHandlerLoose:privateNameHandlerSpec;(0, _helperMemberExpressionToFunctions.default)(body,privateNameVisitor,Object.assign({privateNamesMap,classRef:ref,file:state},handler,{noDocumentAll,innerBinding})),body.traverse(privateInVisitor,{privateNamesMap,classRef:ref,file:state,privateFieldsAsProperties,innerBinding});};var _core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_helperReplaceSupers=__webpack_require__("./node_modules/.pnpm/@babel+helper-replace-supers@7.20.7/node_modules/@babel/helper-replace-supers/lib/index.js"),_helperEnvironmentVisitor=__webpack_require__("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"),_helperMemberExpressionToFunctions=__webpack_require__("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.21.0/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"),_helperOptimiseCallExpression=__webpack_require__("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.18.6/node_modules/@babel/helper-optimise-call-expression/lib/index.js"),_helperAnnotateAsPure=__webpack_require__("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.18.6/node_modules/@babel/helper-annotate-as-pure/lib/index.js"),_helperSkipTransparentExpressionWrappers=__webpack_require__("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.20.0/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js"),ts=__webpack_require__("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js");function privateNameVisitorFactory(visitor){const nestedVisitor=_core.traverse.visitors.merge([Object.assign({},visitor),_helperEnvironmentVisitor.default]),privateNameVisitor=Object.assign({},visitor,{Class(path){const{privateNamesMap}=this,body=path.get("body.body"),visiblePrivateNames=new Map(privateNamesMap),redeclared=[];for(const prop of body){if(!prop.isPrivate())continue;const{name}=prop.node.key.id;visiblePrivateNames.delete(name),redeclared.push(name);}redeclared.length&&(path.get("body").traverse(nestedVisitor,Object.assign({},this,{redeclared})),path.traverse(privateNameVisitor,Object.assign({},this,{privateNamesMap:visiblePrivateNames})),path.skipKey("body"));}});return privateNameVisitor}const privateNameVisitor=privateNameVisitorFactory({PrivateName(path,{noDocumentAll}){const{privateNamesMap,redeclared}=this,{node,parentPath}=path;if(!parentPath.isMemberExpression({property:node})&&!parentPath.isOptionalMemberExpression({property:node}))return;const{name}=node.id;privateNamesMap.has(name)&&(redeclared&&redeclared.includes(name)||this.handle(parentPath,noDocumentAll));}});function unshadow(name,scope,innerBinding){for(;null!=(_scope=scope)&&_scope.hasBinding(name)&&!scope.bindingIdentifierEquals(name,innerBinding);){var _scope;scope.rename(name),scope=scope.parent;}}function buildCheckInRHS(rhs,file,inRHSIsObject){return inRHSIsObject||null==file.availableHelper||!file.availableHelper("checkInRHS")?rhs:_core.types.callExpression(file.addHelper("checkInRHS"),[rhs])}const privateInVisitor=privateNameVisitorFactory({BinaryExpression(path,{file}){const{operator,left,right}=path.node;if("in"!==operator)return;if(!_core.types.isPrivateName(left))return;const{privateFieldsAsProperties,privateNamesMap,redeclared}=this,{name}=left.id;if(!privateNamesMap.has(name))return;if(redeclared&&redeclared.includes(name))return;if(unshadow(this.classRef.name,path.scope,this.innerBinding),privateFieldsAsProperties){const{id}=privateNamesMap.get(name);return void path.replaceWith(_core.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(right,file)}, ${_core.types.cloneNode(id)})
      `)}const{id,static:isStatic}=privateNamesMap.get(name);isStatic?path.replaceWith(_core.template.expression.ast`${buildCheckInRHS(right,file)} === ${_core.types.cloneNode(this.classRef)}`):path.replaceWith(_core.template.expression.ast`${_core.types.cloneNode(id)}.has(${buildCheckInRHS(right,file)})`);}}),privateNameHandlerSpec={memoise(member,count){const{scope}=member,{object}=member.node,memo=scope.maybeGenerateMemoised(object);memo&&this.memoiser.set(object,memo,count);},receiver(member){const{object}=member.node;return this.memoiser.has(object)?_core.types.cloneNode(this.memoiser.get(object)):_core.types.cloneNode(object)},get(member){const{classRef,privateNamesMap,file,innerBinding}=this,{name}=member.node.property.id,{id,static:isStatic,method:isMethod,methodId,getId,setId}=privateNamesMap.get(name),isAccessor=getId||setId;if(isStatic){const helperName=isMethod&&!isAccessor?"classStaticPrivateMethodGet":"classStaticPrivateFieldSpecGet";return unshadow(classRef.name,member.scope,innerBinding),_core.types.callExpression(file.addHelper(helperName),[this.receiver(member),_core.types.cloneNode(classRef),_core.types.cloneNode(id)])}if(isMethod){if(isAccessor){if(!getId&&setId){if(file.availableHelper("writeOnlyError"))return _core.types.sequenceExpression([this.receiver(member),_core.types.callExpression(file.addHelper("writeOnlyError"),[_core.types.stringLiteral(`#${name}`)])]);console.warn("@babel/helpers is outdated, update it to silence this warning.");}return _core.types.callExpression(file.addHelper("classPrivateFieldGet"),[this.receiver(member),_core.types.cloneNode(id)])}return _core.types.callExpression(file.addHelper("classPrivateMethodGet"),[this.receiver(member),_core.types.cloneNode(id),_core.types.cloneNode(methodId)])}return _core.types.callExpression(file.addHelper("classPrivateFieldGet"),[this.receiver(member),_core.types.cloneNode(id)])},boundGet(member){return this.memoise(member,1),_core.types.callExpression(_core.types.memberExpression(this.get(member),_core.types.identifier("bind")),[this.receiver(member)])},set(member,value){const{classRef,privateNamesMap,file}=this,{name}=member.node.property.id,{id,static:isStatic,method:isMethod,setId,getId}=privateNamesMap.get(name);if(isStatic){const helperName=isMethod&&!(getId||setId)?"classStaticPrivateMethodSet":"classStaticPrivateFieldSpecSet";return _core.types.callExpression(file.addHelper(helperName),[this.receiver(member),_core.types.cloneNode(classRef),_core.types.cloneNode(id),value])}return isMethod?setId?_core.types.callExpression(file.addHelper("classPrivateFieldSet"),[this.receiver(member),_core.types.cloneNode(id),value]):_core.types.sequenceExpression([this.receiver(member),value,_core.types.callExpression(file.addHelper("readOnlyError"),[_core.types.stringLiteral(`#${name}`)])]):_core.types.callExpression(file.addHelper("classPrivateFieldSet"),[this.receiver(member),_core.types.cloneNode(id),value])},destructureSet(member){const{classRef,privateNamesMap,file}=this,{name}=member.node.property.id,{id,static:isStatic}=privateNamesMap.get(name);if(isStatic){try{var helper=file.addHelper("classStaticPrivateFieldDestructureSet");}catch(_unused){throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \nplease update @babel/helpers to the latest version.")}return _core.types.memberExpression(_core.types.callExpression(helper,[this.receiver(member),_core.types.cloneNode(classRef),_core.types.cloneNode(id)]),_core.types.identifier("value"))}return _core.types.memberExpression(_core.types.callExpression(file.addHelper("classPrivateFieldDestructureSet"),[this.receiver(member),_core.types.cloneNode(id)]),_core.types.identifier("value"))},call(member,args){return this.memoise(member,1),(0, _helperOptimiseCallExpression.default)(this.get(member),this.receiver(member),args,!1)},optionalCall(member,args){return this.memoise(member,1),(0, _helperOptimiseCallExpression.default)(this.get(member),this.receiver(member),args,!0)}},privateNameHandlerLoose={get(member){const{privateNamesMap,file}=this,{object}=member.node,{name}=member.node.property.id;return _core.template.expression`BASE(REF, PROP)[PROP]`({BASE:file.addHelper("classPrivateFieldLooseBase"),REF:_core.types.cloneNode(object),PROP:_core.types.cloneNode(privateNamesMap.get(name).id)})},set(){throw new Error("private name handler with loose = true don't need set()")},boundGet(member){return _core.types.callExpression(_core.types.memberExpression(this.get(member),_core.types.identifier("bind")),[_core.types.cloneNode(member.node.object)])},simpleSet(member){return this.get(member)},destructureSet(member){return this.get(member)},call(member,args){return _core.types.callExpression(this.get(member),args)},optionalCall(member,args){return _core.types.optionalCallExpression(this.get(member),args,!0)}};function buildPrivateFieldInitLoose(ref,prop,privateNamesMap){const{id}=privateNamesMap.get(prop.node.key.id.name),value=prop.node.value||prop.scope.buildUndefinedNode();return inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${_core.types.cloneNode(id)}, {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${value}
      });
    `,prop)}function buildPrivateInstanceFieldInitSpec(ref,prop,privateNamesMap,state){const{id}=privateNamesMap.get(prop.node.key.id.name),value=prop.node.value||prop.scope.buildUndefinedNode();if(!state.availableHelper("classPrivateFieldInitSpec"))return inheritPropComments(_core.template.statement.ast`${_core.types.cloneNode(id)}.set(${ref}, {
          // configurable is always false for private elements
          // enumerable is always false for private elements
          writable: true,
          value: ${value},
        })`,prop);const helper=state.addHelper("classPrivateFieldInitSpec");return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)},
      {
        writable: true,
        value: ${value}
      },
    )`,prop)}function buildPrivateStaticFieldInitSpec(prop,privateNamesMap){const privateName=privateNamesMap.get(prop.node.key.id.name),{id,getId,setId,initAdded}=privateName,isAccessor=getId||setId;if(!prop.isProperty()&&(initAdded||!isAccessor))return;if(isAccessor)return privateNamesMap.set(prop.node.key.id.name,Object.assign({},privateName,{initAdded:!0})),inheritPropComments(_core.template.statement.ast`
        var ${_core.types.cloneNode(id)} = {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId?getId.name:prop.scope.buildUndefinedNode()},
          set: ${setId?setId.name:prop.scope.buildUndefinedNode()}
        }
      `,prop);const value=prop.node.value||prop.scope.buildUndefinedNode();return inheritPropComments(_core.template.statement.ast`
      var ${_core.types.cloneNode(id)} = {
        // configurable is false by default
        // enumerable is false by default
        writable: true,
        value: ${value}
      };
    `,prop)}function buildPrivateMethodInitLoose(ref,prop,privateNamesMap){const privateName=privateNamesMap.get(prop.node.key.id.name),{methodId,id,getId,setId,initAdded}=privateName;if(initAdded)return;if(methodId)return inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${methodId.name}
        });
      `,prop);return getId||setId?(privateNamesMap.set(prop.node.key.id.name,Object.assign({},privateName,{initAdded:!0})),inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId?getId.name:prop.scope.buildUndefinedNode()},
          set: ${setId?setId.name:prop.scope.buildUndefinedNode()}
        });
      `,prop)):void 0}function buildPrivateInstanceMethodInitSpec(ref,prop,privateNamesMap,state){const privateName=privateNamesMap.get(prop.node.key.id.name),{getId,setId,initAdded}=privateName;if(initAdded)return;return getId||setId?function(ref,prop,privateNamesMap,state){const privateName=privateNamesMap.get(prop.node.key.id.name),{id,getId,setId}=privateName;if(privateNamesMap.set(prop.node.key.id.name,Object.assign({},privateName,{initAdded:!0})),!state.availableHelper("classPrivateFieldInitSpec"))return inheritPropComments(_core.template.statement.ast`
          ${id}.set(${ref}, {
            get: ${getId?getId.name:prop.scope.buildUndefinedNode()},
            set: ${setId?setId.name:prop.scope.buildUndefinedNode()}
          });
        `,prop);const helper=state.addHelper("classPrivateFieldInitSpec");return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)},
      {
        get: ${getId?getId.name:prop.scope.buildUndefinedNode()},
        set: ${setId?setId.name:prop.scope.buildUndefinedNode()}
      },
    )`,prop)}(ref,prop,privateNamesMap,state):function(ref,prop,privateNamesMap,state){const privateName=privateNamesMap.get(prop.node.key.id.name),{id}=privateName;if(!state.availableHelper("classPrivateMethodInitSpec"))return inheritPropComments(_core.template.statement.ast`${id}.add(${ref})`,prop);const helper=state.addHelper("classPrivateMethodInitSpec");return inheritPropComments(_core.template.statement.ast`${helper}(
      ${_core.types.thisExpression()},
      ${_core.types.cloneNode(id)}
    )`,prop)}(ref,prop,privateNamesMap,state)}function buildPublicFieldInitLoose(ref,prop){const{key,computed}=prop.node,value=prop.node.value||prop.scope.buildUndefinedNode();return inheritPropComments(_core.types.expressionStatement(_core.types.assignmentExpression("=",_core.types.memberExpression(ref,key,computed||_core.types.isLiteral(key)),value)),prop)}function buildPublicFieldInitSpec(ref,prop,state){const{key,computed}=prop.node,value=prop.node.value||prop.scope.buildUndefinedNode();return inheritPropComments(_core.types.expressionStatement(_core.types.callExpression(state.addHelper("defineProperty"),[ref,computed||_core.types.isLiteral(key)?key:_core.types.stringLiteral(key.name),value])),prop)}function buildPrivateStaticMethodInitLoose(ref,prop,state,privateNamesMap){const privateName=privateNamesMap.get(prop.node.key.id.name),{id,methodId,getId,setId,initAdded}=privateName;if(initAdded)return;return getId||setId?(privateNamesMap.set(prop.node.key.id.name,Object.assign({},privateName,{initAdded:!0})),inheritPropComments(_core.template.statement.ast`
        Object.defineProperty(${ref}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          get: ${getId?getId.name:prop.scope.buildUndefinedNode()},
          set: ${setId?setId.name:prop.scope.buildUndefinedNode()}
        })
      `,prop)):inheritPropComments(_core.template.statement.ast`
      Object.defineProperty(${ref}, ${id}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        value: ${methodId.name}
      });
    `,prop)}function buildPrivateMethodDeclaration(prop,privateNamesMap,privateFieldsAsProperties=!1){const privateName=privateNamesMap.get(prop.node.key.id.name),{id,methodId,getId,setId,getterDeclared,setterDeclared,static:isStatic}=privateName,{params,body,generator,async}=prop.node,isGetter=getId&&!getterDeclared&&0===params.length,isSetter=setId&&!setterDeclared&&params.length>0;let declId=methodId;return isGetter?(privateNamesMap.set(prop.node.key.id.name,Object.assign({},privateName,{getterDeclared:!0})),declId=getId):isSetter?(privateNamesMap.set(prop.node.key.id.name,Object.assign({},privateName,{setterDeclared:!0})),declId=setId):isStatic&&!privateFieldsAsProperties&&(declId=id),inheritPropComments(_core.types.functionDeclaration(_core.types.cloneNode(declId),params,body,generator,async),prop)}const thisContextVisitor=_core.traverse.visitors.merge([{ThisExpression(path,state){const parent=path.findParent((path=>!(0, _helperSkipTransparentExpressionWrappers.isTransparentExprWrapper)(path.node)));_core.types.isUnaryExpression(parent.node,{operator:"delete"})?path.parentPath.replaceWith(_core.types.booleanLiteral(!0)):(state.needsClassRef=!0,path.replaceWith(_core.types.cloneNode(state.classRef)));},MetaProperty(path){const meta=path.get("meta"),property=path.get("property"),{scope}=path;meta.isIdentifier({name:"new"})&&property.isIdentifier({name:"target"})&&path.replaceWith(scope.buildUndefinedNode());}},_helperEnvironmentVisitor.default]),innerReferencesVisitor={ReferencedIdentifier(path,state){path.scope.bindingIdentifierEquals(path.node.name,state.innerBinding)&&(state.needsClassRef=!0,path.node.name=state.classRef.name);}};function replaceThisContext(path,ref,getSuperRef,file,isStaticBlock,constantSuper,innerBindingRef){var _state$classRef;const state={classRef:ref,needsClassRef:!1,innerBinding:innerBindingRef};return new _helperReplaceSupers.default({methodPath:path,constantSuper,file,refToPreserve:ref,getSuperRef,getObjectRef:()=>(state.needsClassRef=!0,null!=_core.types.isStaticBlock&&_core.types.isStaticBlock(path.node)||path.node.static?ref:_core.types.memberExpression(ref,_core.types.identifier("prototype")))}).replace(),(isStaticBlock||path.isProperty())&&path.traverse(thisContextVisitor,state),null!=innerBindingRef&&null!=(_state$classRef=state.classRef)&&_state$classRef.name&&state.classRef.name!==(null==innerBindingRef?void 0:innerBindingRef.name)&&path.traverse(innerReferencesVisitor,state),state.needsClassRef}function isNameOrLength({key,computed}){return "Identifier"===key.type?!computed&&("name"===key.name||"length"===key.name):"StringLiteral"===key.type&&("name"===key.value||"length"===key.value)}function inheritPropComments(node,prop){return _core.types.inheritLeadingComments(node,prop.node),_core.types.inheritInnerComments(node,prop.node),node}},"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"FEATURES",{enumerable:!0,get:function(){return _features.FEATURES}}),Object.defineProperty(exports,"buildCheckInRHS",{enumerable:!0,get:function(){return _fields.buildCheckInRHS}}),exports.createClassFeaturePlugin=function({name,feature,loose,manipulateOptions,api={assumption:()=>{}},inherits}){const setPublicClassFields=api.assumption("setPublicClassFields"),privateFieldsAsSymbols=api.assumption("privateFieldsAsSymbols"),privateFieldsAsProperties=api.assumption("privateFieldsAsProperties"),constantSuper=api.assumption("constantSuper"),noDocumentAll=api.assumption("noDocumentAll");if(privateFieldsAsProperties&&privateFieldsAsSymbols)throw new Error('Cannot enable both the "privateFieldsAsProperties" and "privateFieldsAsSymbols" assumptions as the same time.');const privateFieldsAsSymbolsOrProperties=privateFieldsAsProperties||privateFieldsAsSymbols;if(!0===loose){const explicit=[];void 0!==setPublicClassFields&&explicit.push('"setPublicClassFields"'),void 0!==privateFieldsAsProperties&&explicit.push('"privateFieldsAsProperties"'),void 0!==privateFieldsAsSymbols&&explicit.push('"privateFieldsAsSymbols"'),0!==explicit.length&&console.warn(`[${name}]: You are using the "loose: true" option and you are explicitly setting a value for the ${explicit.join(" and ")} assumption${explicit.length>1?"s":""}. The "loose" option can cause incompatibilities with the other class features plugins, so it's recommended that you replace it with the following top-level option:\n\t"assumptions": {\n\t\t"setPublicClassFields": true,\n\t\t"privateFieldsAsSymbols": true\n\t}`);}return {name,manipulateOptions,inherits,pre(file){(0, _features.enableFeature)(file,feature,loose),(!file.get(versionKey)||file.get(versionKey)<version)&&file.set(versionKey,version);},visitor:{Class(path,{file}){if(file.get(versionKey)!==version)return;if(!(0, _features.shouldTransform)(path,file))return;path.isClassDeclaration()&&(0, _typescript.assertFieldTransformed)(path);const loose=(0, _features.isLoose)(file,feature);let constructor;const isDecorated=(0, _decorators.hasDecorators)(path.node),props=[],elements=[],computedPaths=[],privateNames=new Set,body=path.get("body");for(const path of body.get("body")){if((path.isClassProperty()||path.isClassMethod())&&path.node.computed&&computedPaths.push(path),path.isPrivate()){const{name}=path.node.key.id,getName=`get ${name}`,setName=`set ${name}`;if(path.isClassPrivateMethod()){if("get"===path.node.kind){if(privateNames.has(getName)||privateNames.has(name)&&!privateNames.has(setName))throw path.buildCodeFrameError("Duplicate private field");privateNames.add(getName).add(name);}else if("set"===path.node.kind){if(privateNames.has(setName)||privateNames.has(name)&&!privateNames.has(getName))throw path.buildCodeFrameError("Duplicate private field");privateNames.add(setName).add(name);}}else {if(privateNames.has(name)&&!privateNames.has(getName)&&!privateNames.has(setName)||privateNames.has(name)&&(privateNames.has(getName)||privateNames.has(setName)))throw path.buildCodeFrameError("Duplicate private field");privateNames.add(name);}}path.isClassMethod({kind:"constructor"})?constructor=path:(elements.push(path),(path.isProperty()||path.isPrivate()||null!=path.isStaticBlock&&path.isStaticBlock())&&props.push(path));}if(!props.length&&!isDecorated)return;const innerBinding=path.node.id;let ref;!innerBinding||path.isClassExpression()?((0, _helperFunctionName.default)(path),ref=path.scope.generateUidIdentifier("class")):ref=_core.types.cloneNode(path.node.id);const privateNamesMap=(0, _fields.buildPrivateNamesMap)(props),privateNamesNodes=(0, _fields.buildPrivateNamesNodes)(privateNamesMap,null!=privateFieldsAsProperties?privateFieldsAsProperties:loose,null!=privateFieldsAsSymbols&&privateFieldsAsSymbols,file);let keysNodes,staticNodes,instanceNodes,pureStaticNodes,wrapClass;(0, _fields.transformPrivateNamesUsage)(ref,path,privateNamesMap,{privateFieldsAsProperties:null!=privateFieldsAsSymbolsOrProperties?privateFieldsAsSymbolsOrProperties:loose,noDocumentAll,innerBinding},file),isDecorated?(staticNodes=pureStaticNodes=keysNodes=[],({instanceNodes,wrapClass}=(0, _decorators.buildDecoratedClass)(ref,path,elements,file))):(keysNodes=(0, _misc.extractComputedKeys)(path,computedPaths,file),({staticNodes,pureStaticNodes,instanceNodes,wrapClass}=(0, _fields.buildFieldsInitNodes)(ref,path.node.superClass,props,privateNamesMap,file,null!=setPublicClassFields?setPublicClassFields:loose,null!=privateFieldsAsSymbolsOrProperties?privateFieldsAsSymbolsOrProperties:loose,null!=constantSuper?constantSuper:loose,innerBinding))),instanceNodes.length>0&&(0, _misc.injectInitialization)(path,constructor,instanceNodes,((referenceVisitor,state)=>{if(!isDecorated)for(const prop of props)null!=_core.types.isStaticBlock&&_core.types.isStaticBlock(prop.node)||prop.node.static||prop.traverse(referenceVisitor,state);}));const wrappedPath=wrapClass(path);wrappedPath.insertBefore([...privateNamesNodes,...keysNodes]),staticNodes.length>0&&wrappedPath.insertAfter(staticNodes),pureStaticNodes.length>0&&wrappedPath.find((parent=>parent.isStatement()||parent.isDeclaration())).insertAfter(pureStaticNodes);},ExportDefaultDeclaration(path,{file}){{if(file.get(versionKey)!==version)return;const decl=path.get("declaration");decl.isClassDeclaration()&&(0, _decorators.hasDecorators)(decl.node)&&(decl.node.id?(0, _helperSplitExportDeclaration.default)(path):decl.node.type="ClassExpression");}}}}},Object.defineProperty(exports,"enableFeature",{enumerable:!0,get:function(){return _features.enableFeature}}),Object.defineProperty(exports,"injectInitialization",{enumerable:!0,get:function(){return _misc.injectInitialization}});var _core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_helperFunctionName=__webpack_require__("./node_modules/.pnpm/@babel+helper-function-name@7.21.0/node_modules/@babel/helper-function-name/lib/index.js"),_helperSplitExportDeclaration=__webpack_require__("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js"),_fields=__webpack_require__("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"),_decorators=__webpack_require__("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js"),_misc=__webpack_require__("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js"),_features=__webpack_require__("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/features.js"),_typescript=__webpack_require__("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js");const version="7.21.0".split(".").reduce(((v,x)=>1e5*v+ +x),0),versionKey="@babel/plugin-class-features/version";},"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.extractComputedKeys=function(path,computedPaths,file){const declarations=[],state={classBinding:path.node.id&&path.scope.getBinding(path.node.id.name),file};for(const computedPath of computedPaths){const computedKey=computedPath.get("key");computedKey.isReferencedIdentifier()?handleClassTDZ(computedKey,state):computedKey.traverse(classFieldDefinitionEvaluationTDZVisitor,state);const computedNode=computedPath.node;if(!computedKey.isConstantExpression()){const ident=path.scope.generateUidIdentifierBasedOnNode(computedNode.key);path.scope.push({id:ident,kind:"let"}),declarations.push(_core.types.expressionStatement(_core.types.assignmentExpression("=",_core.types.cloneNode(ident),computedNode.key))),computedNode.key=_core.types.cloneNode(ident);}}return declarations},exports.injectInitialization=function(path,constructor,nodes,renamer){if(!nodes.length)return;const isDerived=!!path.node.superClass;if(!constructor){const newConstructor=_core.types.classMethod("constructor",_core.types.identifier("constructor"),[],_core.types.blockStatement([]));isDerived&&(newConstructor.params=[_core.types.restElement(_core.types.identifier("args"))],newConstructor.body.body.push(_core.template.statement.ast`super(...args)`)),[constructor]=path.get("body").unshiftContainer("body",newConstructor);}renamer&&renamer(referenceVisitor,{scope:constructor.scope});if(isDerived){const bareSupers=[];constructor.traverse(findBareSupers,bareSupers);let isFirst=!0;for(const bareSuper of bareSupers)isFirst?(bareSuper.insertAfter(nodes),isFirst=!1):bareSuper.insertAfter(nodes.map((n=>_core.types.cloneNode(n))));}else constructor.get("body").unshiftContainer("body",nodes);};var _core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_helperEnvironmentVisitor=__webpack_require__("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js");const findBareSupers=_core.traverse.visitors.merge([{Super(path){const{node,parentPath}=path;parentPath.isCallExpression({callee:node})&&this.push(parentPath);}},_helperEnvironmentVisitor.default]),referenceVisitor={"TSTypeAnnotation|TypeAnnotation"(path){path.skip();},ReferencedIdentifier(path,{scope}){scope.hasOwnBinding(path.node.name)&&(scope.rename(path.node.name),path.skip());}};function handleClassTDZ(path,state){if(state.classBinding&&state.classBinding===path.scope.getBinding(path.node.name)){const classNameTDZError=state.file.addHelper("classNameTDZError"),throwNode=_core.types.callExpression(classNameTDZError,[_core.types.stringLiteral(path.node.name)]);path.replaceWith(_core.types.sequenceExpression([throwNode,path.node])),path.skip();}}const classFieldDefinitionEvaluationTDZVisitor={ReferencedIdentifier:handleClassTDZ};},"./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.assertFieldTransformed=function(path){if(path.node.declare)throw path.buildCodeFrameError("TypeScript 'declare' fields must first be transformed by @babel/plugin-transform-typescript.\nIf you have already enabled that plugin (or '@babel/preset-typescript'), make sure that it runs before any plugin related to additional class features:\n - @babel/plugin-proposal-class-properties\n - @babel/plugin-proposal-private-methods\n - @babel/plugin-proposal-decorators")};},"./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js":(__unused_webpack_module,exports)=>{function requeueComputedKeyAndDecorators(path){const{context,node}=path;if(node.computed&&context.maybeQueue(path.get("key")),node.decorators)for(const decorator of path.get("decorators"))context.maybeQueue(decorator);}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0,exports.requeueComputedKeyAndDecorators=requeueComputedKeyAndDecorators,exports.skipAllButComputedKey=function(path){path.skip(),path.node.computed&&path.context.maybeQueue(path.get("key"));};var _default={FunctionParent(path){path.isArrowFunctionExpression()||(path.skip(),path.isMethod()&&requeueComputedKeyAndDecorators(path));},Property(path){path.isObjectProperty()||(path.skip(),requeueComputedKeyAndDecorators(path));}};exports.default=_default;},"./node_modules/.pnpm/@babel+helper-function-name@7.21.0/node_modules/@babel/helper-function-name/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function({node,parent,scope,id},localBinding=!1,supportUnicodeId=!1){if(node.id)return;if(!isObjectProperty(parent)&&!isObjectMethod(parent,{kind:"method"})||parent.computed&&!isLiteral(parent.key)){if(isVariableDeclarator(parent)){if(id=parent.id,isIdentifier(id)&&!localBinding){const binding=scope.parent.getBinding(id.name);if(binding&&binding.constant&&scope.getBinding(id.name)===binding)return node.id=cloneNode(id),void(node.id[NOT_LOCAL_BINDING]=!0)}}else if(isAssignmentExpression(parent,{operator:"="}))id=parent.left;else if(!id)return}else id=parent.key;let name;id&&isLiteral(id)?name=function(id){if(isNullLiteral(id))return "null";if(isRegExpLiteral(id))return `_${id.pattern}_${id.flags}`;if(isTemplateLiteral(id))return id.quasis.map((quasi=>quasi.value.raw)).join("");if(void 0!==id.value)return id.value+"";return ""}(id):id&&isIdentifier(id)&&(name=id.name);if(void 0===name)return;if(!supportUnicodeId&&isFunction(node)&&/[\uD800-\uDFFF]/.test(name))return;name=toBindingIdentifierName(name);const newId=identifier(name);newId[NOT_LOCAL_BINDING]=!0;return function(state,method,id,scope){if(state.selfReference){if(!scope.hasBinding(id.name)||scope.hasGlobal(id.name)){if(!isFunction(method))return;let build=buildPropertyMethodAssignmentWrapper;method.generator&&(build=buildGeneratorPropertyMethodAssignmentWrapper);const template=build({FUNCTION:method,FUNCTION_ID:id,FUNCTION_KEY:scope.generateUidIdentifier(id.name)}).expression,params=template.callee.body.body[0].params;for(let i=0,len=function(node){const count=node.params.findIndex((param=>isAssignmentPattern(param)||isRestElement(param)));return -1===count?node.params.length:count}(method);i<len;i++)params.push(scope.generateUidIdentifier("x"));return template}scope.rename(id.name);}method.id=id,scope.getProgramParent().references[id.name]=!0;}(function(node,name,scope){const state={selfAssignment:!1,selfReference:!1,outerDeclar:scope.getBindingIdentifier(name),name},binding=scope.getOwnBinding(name);binding?"param"===binding.kind&&(state.selfReference=!0):(state.outerDeclar||scope.hasGlobal(name))&&scope.traverse(node,visitor,state);return state}(node,name,scope),node,newId,scope)||node};var _template=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{NOT_LOCAL_BINDING,cloneNode,identifier,isAssignmentExpression,isAssignmentPattern,isFunction,isIdentifier,isLiteral,isNullLiteral,isObjectMethod,isObjectProperty,isRegExpLiteral,isRestElement,isTemplateLiteral,isVariableDeclarator,toBindingIdentifierName}=_t;const buildPropertyMethodAssignmentWrapper=_template.default.statement("\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n"),buildGeneratorPropertyMethodAssignmentWrapper=_template.default.statement("\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n"),visitor={"ReferencedIdentifier|BindingIdentifier"(path,state){if(path.node.name!==state.name)return;path.scope.getBindingIdentifier(state.name)===state.outerDeclar&&(state.selfReference=!0,path.stop());}};},"./node_modules/.pnpm/@babel+helper-hoist-variables@7.18.6/node_modules/@babel/helper-hoist-variables/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(path,emit,kind="var"){path.traverse(visitor,{kind,emit});};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{assignmentExpression,expressionStatement,identifier}=_t,visitor={Scope(path,state){"let"===state.kind&&path.skip();},FunctionParent(path){path.skip();},VariableDeclaration(path,state){if(state.kind&&path.node.kind!==state.kind)return;const nodes=[],declarations=path.get("declarations");let firstId;for(const declar of declarations){firstId=declar.node.id,declar.node.init&&nodes.push(expressionStatement(assignmentExpression("=",declar.node.id,declar.node.init)));for(const name of Object.keys(declar.getBindingIdentifiers()))state.emit(identifier(name),name,null!==declar.node.init);}path.parentPath.isFor({left:path.node})?path.replaceWith(firstId):path.replaceWithMultiple(nodes);}};},"./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.21.0/node_modules/@babel/helper-member-expression-to-functions/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{function _interopNamespace(e){if(e&&e.__esModule)return e;var n=Object.create(null);return e&&Object.keys(e).forEach((function(k){if("default"!==k){var d=Object.getOwnPropertyDescriptor(e,k);Object.defineProperty(n,k,d.get?d:{enumerable:!0,get:function(){return e[k]}});}})),n.default=e,Object.freeze(n)}Object.defineProperty(exports,"__esModule",{value:!0});var _t__namespace=_interopNamespace(__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"));function willPathCastToBoolean(path){const maybeWrapped=path,{node,parentPath}=maybeWrapped;if(parentPath.isLogicalExpression()){const{operator,right}=parentPath.node;if("&&"===operator||"||"===operator||"??"===operator&&node===right)return willPathCastToBoolean(parentPath)}if(parentPath.isSequenceExpression()){const{expressions}=parentPath.node;return expressions[expressions.length-1]!==node||willPathCastToBoolean(parentPath)}return parentPath.isConditional({test:node})||parentPath.isUnaryExpression({operator:"!"})||parentPath.isLoop({test:node})}const{LOGICAL_OPERATORS,arrowFunctionExpression,assignmentExpression,binaryExpression,booleanLiteral,callExpression,cloneNode,conditionalExpression,identifier,isMemberExpression,isOptionalCallExpression,isOptionalMemberExpression,isUpdateExpression,logicalExpression,memberExpression,nullLiteral,optionalCallExpression,optionalMemberExpression,sequenceExpression,updateExpression}=_t__namespace;class AssignmentMemoiser{constructor(){this._map=void 0,this._map=new WeakMap;}has(key){return this._map.has(key)}get(key){if(!this.has(key))return;const record=this._map.get(key),{value}=record;return record.count--,0===record.count?assignmentExpression("=",value,key):value}set(key,value,count){return this._map.set(key,{count,value})}}function toNonOptional(path,base){const{node}=path;if(isOptionalMemberExpression(node))return memberExpression(base,node.property,node.computed);if(path.isOptionalCallExpression()){const callee=path.get("callee");if(path.node.optional&&callee.isOptionalMemberExpression()){const object=callee.node.object,context=path.scope.maybeGenerateMemoised(object);return callee.get("object").replaceWith(assignmentExpression("=",context,object)),callExpression(memberExpression(base,identifier("call")),[context,...path.node.arguments])}return callExpression(base,path.node.arguments)}return path.node}const handle={memoise(){},handle(member,noDocumentAll){const{node,parent,parentPath,scope}=member;if(member.isOptionalMemberExpression()){if(function(path){for(;path&&!path.isProgram();){const{parentPath,container,listKey}=path,parentNode=parentPath.node;if(listKey){if(container!==parentNode[listKey])return !0}else if(container!==parentNode)return !0;path=parentPath;}return !1}(member))return;const endPath=member.find((({node,parent})=>isOptionalMemberExpression(parent)?parent.optional||parent.object!==node:!isOptionalCallExpression(parent)||(node!==member.node&&parent.optional||parent.callee!==node)));if(scope.path.isPattern())return void endPath.replaceWith(callExpression(arrowFunctionExpression([],endPath.node),[]));const willEndPathCastToBoolean=willPathCastToBoolean(endPath),rootParentPath=endPath.parentPath;if(rootParentPath.isUpdateExpression({argument:node})||rootParentPath.isAssignmentExpression({left:node}))throw member.buildCodeFrameError("can't handle assignment");const isDeleteOperation=rootParentPath.isUnaryExpression({operator:"delete"});if(isDeleteOperation&&endPath.isOptionalMemberExpression()&&endPath.get("property").isPrivateName())throw member.buildCodeFrameError("can't delete a private class element");let startingOptional=member;for(;;)if(startingOptional.isOptionalMemberExpression()){if(startingOptional.node.optional)break;startingOptional=startingOptional.get("object");}else {if(!startingOptional.isOptionalCallExpression())throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);if(startingOptional.node.optional)break;startingOptional=startingOptional.get("callee");}const startingNode=startingOptional.isOptionalMemberExpression()?startingOptional.node.object:startingOptional.node.callee,baseNeedsMemoised=scope.maybeGenerateMemoised(startingNode),baseRef=null!=baseNeedsMemoised?baseNeedsMemoised:startingNode,parentIsOptionalCall=parentPath.isOptionalCallExpression({callee:node}),isOptionalCall=parent=>parentIsOptionalCall,parentIsCall=parentPath.isCallExpression({callee:node});startingOptional.replaceWith(toNonOptional(startingOptional,baseRef)),isOptionalCall()?parent.optional?parentPath.replaceWith(this.optionalCall(member,parent.arguments)):parentPath.replaceWith(this.call(member,parent.arguments)):parentIsCall?member.replaceWith(this.boundGet(member)):this.delete&&parentPath.isUnaryExpression({operator:"delete"})?parentPath.replaceWith(this.delete(member)):member.replaceWith(this.get(member));let context,regular=member.node;for(let current=member;current!==endPath;){const parentPath=current.parentPath;if(parentPath===endPath&&isOptionalCall()&&parent.optional){regular=parentPath.node;break}regular=toNonOptional(parentPath,regular),current=parentPath;}const endParentPath=endPath.parentPath;if(isMemberExpression(regular)&&endParentPath.isOptionalCallExpression({callee:endPath.node,optional:!0})){const{object}=regular;context=member.scope.maybeGenerateMemoised(object),context&&(regular.object=assignmentExpression("=",context,object));}let replacementPath=endPath;isDeleteOperation&&(replacementPath=endParentPath,regular=endParentPath.node);const baseMemoised=baseNeedsMemoised?assignmentExpression("=",cloneNode(baseRef),cloneNode(startingNode)):cloneNode(baseRef);if(willEndPathCastToBoolean){let nonNullishCheck;nonNullishCheck=noDocumentAll?binaryExpression("!=",baseMemoised,nullLiteral()):logicalExpression("&&",binaryExpression("!==",baseMemoised,nullLiteral()),binaryExpression("!==",cloneNode(baseRef),scope.buildUndefinedNode())),replacementPath.replaceWith(logicalExpression("&&",nonNullishCheck,regular));}else {let nullishCheck;nullishCheck=noDocumentAll?binaryExpression("==",baseMemoised,nullLiteral()):logicalExpression("||",binaryExpression("===",baseMemoised,nullLiteral()),binaryExpression("===",cloneNode(baseRef),scope.buildUndefinedNode())),replacementPath.replaceWith(conditionalExpression(nullishCheck,isDeleteOperation?booleanLiteral(!0):scope.buildUndefinedNode(),regular));}if(context){const endParent=endParentPath.node;endParentPath.replaceWith(optionalCallExpression(optionalMemberExpression(endParent.callee,identifier("call"),!1,!0),[cloneNode(context),...endParent.arguments],!1));}}else {if(isUpdateExpression(parent,{argument:node})){if(this.simpleSet)return void member.replaceWith(this.simpleSet(member));const{operator,prefix}=parent;this.memoise(member,2);const ref=scope.generateUidIdentifierBasedOnNode(node);scope.push({id:ref});const seq=[assignmentExpression("=",cloneNode(ref),this.get(member))];if(prefix){seq.push(updateExpression(operator,cloneNode(ref),prefix));const value=sequenceExpression(seq);return void parentPath.replaceWith(this.set(member,value))}{const ref2=scope.generateUidIdentifierBasedOnNode(node);scope.push({id:ref2}),seq.push(assignmentExpression("=",cloneNode(ref2),updateExpression(operator,cloneNode(ref),prefix)),cloneNode(ref));const value=sequenceExpression(seq);return void parentPath.replaceWith(sequenceExpression([this.set(member,value),cloneNode(ref2)]))}}if(parentPath.isAssignmentExpression({left:node})){if(this.simpleSet)return void member.replaceWith(this.simpleSet(member));const{operator,right:value}=parentPath.node;if("="===operator)parentPath.replaceWith(this.set(member,value));else {const operatorTrunc=operator.slice(0,-1);LOGICAL_OPERATORS.includes(operatorTrunc)?(this.memoise(member,1),parentPath.replaceWith(logicalExpression(operatorTrunc,this.get(member),this.set(member,value)))):(this.memoise(member,2),parentPath.replaceWith(this.set(member,binaryExpression(operatorTrunc,this.get(member),value))));}}else {if(!parentPath.isCallExpression({callee:node}))return parentPath.isOptionalCallExpression({callee:node})?scope.path.isPattern()?void parentPath.replaceWith(callExpression(arrowFunctionExpression([],parentPath.node),[])):void parentPath.replaceWith(this.optionalCall(member,parentPath.node.arguments)):void(this.delete&&parentPath.isUnaryExpression({operator:"delete"})?parentPath.replaceWith(this.delete(member)):parentPath.isForXStatement({left:node})||parentPath.isObjectProperty({value:node})&&parentPath.parentPath.isObjectPattern()||parentPath.isAssignmentPattern({left:node})&&parentPath.parentPath.isObjectProperty({value:parent})&&parentPath.parentPath.parentPath.isObjectPattern()||parentPath.isArrayPattern()||parentPath.isAssignmentPattern({left:node})&&parentPath.parentPath.isArrayPattern()||parentPath.isRestElement()?member.replaceWith(this.destructureSet(member)):parentPath.isTaggedTemplateExpression()?member.replaceWith(this.boundGet(member)):member.replaceWith(this.get(member)));parentPath.replaceWith(this.call(member,parentPath.node.arguments));}}}};exports.default=function(path,visitor,state){path.traverse(visitor,Object.assign({},handle,state,{memoiser:new AssignmentMemoiser}));};},"./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/import-builder.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _assert=__webpack_require__("assert"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{callExpression,cloneNode,expressionStatement,identifier,importDeclaration,importDefaultSpecifier,importNamespaceSpecifier,importSpecifier,memberExpression,stringLiteral,variableDeclaration,variableDeclarator}=_t;exports.default=class{constructor(importedSource,scope,hub){this._statements=[],this._resultName=null,this._importedSource=void 0,this._scope=scope,this._hub=hub,this._importedSource=importedSource;}done(){return {statements:this._statements,resultName:this._resultName}}import(){return this._statements.push(importDeclaration([],stringLiteral(this._importedSource))),this}require(){return this._statements.push(expressionStatement(callExpression(identifier("require"),[stringLiteral(this._importedSource)]))),this}namespace(name="namespace"){const local=this._scope.generateUidIdentifier(name),statement=this._statements[this._statements.length-1];return _assert("ImportDeclaration"===statement.type),_assert(0===statement.specifiers.length),statement.specifiers=[importNamespaceSpecifier(local)],this._resultName=cloneNode(local),this}default(name){const id=this._scope.generateUidIdentifier(name),statement=this._statements[this._statements.length-1];return _assert("ImportDeclaration"===statement.type),_assert(0===statement.specifiers.length),statement.specifiers=[importDefaultSpecifier(id)],this._resultName=cloneNode(id),this}named(name,importName){if("default"===importName)return this.default(name);const id=this._scope.generateUidIdentifier(name),statement=this._statements[this._statements.length-1];return _assert("ImportDeclaration"===statement.type),_assert(0===statement.specifiers.length),statement.specifiers=[importSpecifier(id,identifier(importName))],this._resultName=cloneNode(id),this}var(name){const id=this._scope.generateUidIdentifier(name);let statement=this._statements[this._statements.length-1];return "ExpressionStatement"!==statement.type&&(_assert(this._resultName),statement=expressionStatement(this._resultName),this._statements.push(statement)),this._statements[this._statements.length-1]=variableDeclaration("var",[variableDeclarator(id,statement.expression)]),this._resultName=cloneNode(id),this}defaultInterop(){return this._interop(this._hub.addHelper("interopRequireDefault"))}wildcardInterop(){return this._interop(this._hub.addHelper("interopRequireWildcard"))}_interop(callee){const statement=this._statements[this._statements.length-1];return "ExpressionStatement"===statement.type?statement.expression=callExpression(callee,[statement.expression]):"VariableDeclaration"===statement.type?(_assert(1===statement.declarations.length),statement.declarations[0].init=callExpression(callee,[statement.declarations[0].init])):_assert.fail("Unexpected type."),this}prop(name){const statement=this._statements[this._statements.length-1];return "ExpressionStatement"===statement.type?statement.expression=memberExpression(statement.expression,identifier(name)):"VariableDeclaration"===statement.type?(_assert(1===statement.declarations.length),statement.declarations[0].init=memberExpression(statement.declarations[0].init,identifier(name))):_assert.fail("Unexpected type:"+statement.type),this}read(name){this._resultName=memberExpression(this._resultName,identifier(name));}};},"./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/import-injector.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _assert=__webpack_require__("assert"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_importBuilder=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/import-builder.js"),_isModule=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/is-module.js");const{numericLiteral,sequenceExpression}=_t;exports.default=class{constructor(path,importedSource,opts){this._defaultOpts={importedSource:null,importedType:"commonjs",importedInterop:"babel",importingInterop:"babel",ensureLiveReference:!1,ensureNoContext:!1,importPosition:"before"};const programPath=path.find((p=>p.isProgram()));this._programPath=programPath,this._programScope=programPath.scope,this._hub=programPath.hub,this._defaultOpts=this._applyDefaults(importedSource,opts,!0);}addDefault(importedSourceIn,opts){return this.addNamed("default",importedSourceIn,opts)}addNamed(importName,importedSourceIn,opts){return _assert("string"==typeof importName),this._generateImport(this._applyDefaults(importedSourceIn,opts),importName)}addNamespace(importedSourceIn,opts){return this._generateImport(this._applyDefaults(importedSourceIn,opts),null)}addSideEffect(importedSourceIn,opts){return this._generateImport(this._applyDefaults(importedSourceIn,opts),void 0)}_applyDefaults(importedSource,opts,isInit=!1){let newOpts;return "string"==typeof importedSource?newOpts=Object.assign({},this._defaultOpts,{importedSource},opts):(_assert(!opts,"Unexpected secondary arguments."),newOpts=Object.assign({},this._defaultOpts,importedSource)),!isInit&&opts&&(void 0!==opts.nameHint&&(newOpts.nameHint=opts.nameHint),void 0!==opts.blockHoist&&(newOpts.blockHoist=opts.blockHoist)),newOpts}_generateImport(opts,importName){const isDefault="default"===importName,isNamed=!!importName&&!isDefault,isNamespace=null===importName,{importedSource,importedType,importedInterop,importingInterop,ensureLiveReference,ensureNoContext,nameHint,importPosition,blockHoist}=opts;let name=nameHint||importName;const isMod=(0, _isModule.default)(this._programPath),isModuleForNode=isMod&&"node"===importingInterop,isModuleForBabel=isMod&&"babel"===importingInterop;if("after"===importPosition&&!isMod)throw new Error('"importPosition": "after" is only supported in modules');const builder=new _importBuilder.default(importedSource,this._programScope,this._hub);if("es6"===importedType){if(!isModuleForNode&&!isModuleForBabel)throw new Error("Cannot import an ES6 module from CommonJS");builder.import(),isNamespace?builder.namespace(nameHint||importedSource):(isDefault||isNamed)&&builder.named(name,importName);}else {if("commonjs"!==importedType)throw new Error(`Unexpected interopType "${importedType}"`);if("babel"===importedInterop)if(isModuleForNode){name="default"!==name?name:importedSource;const es6Default=`${importedSource}$es6Default`;builder.import(),isNamespace?builder.default(es6Default).var(name||importedSource).wildcardInterop():isDefault?ensureLiveReference?builder.default(es6Default).var(name||importedSource).defaultInterop().read("default"):builder.default(es6Default).var(name).defaultInterop().prop(importName):isNamed&&builder.default(es6Default).read(importName);}else isModuleForBabel?(builder.import(),isNamespace?builder.namespace(name||importedSource):(isDefault||isNamed)&&builder.named(name,importName)):(builder.require(),isNamespace?builder.var(name||importedSource).wildcardInterop():(isDefault||isNamed)&&ensureLiveReference?isDefault?(name="default"!==name?name:importedSource,builder.var(name).read(importName),builder.defaultInterop()):builder.var(importedSource).read(importName):isDefault?builder.var(name).defaultInterop().prop(importName):isNamed&&builder.var(name).prop(importName));else if("compiled"===importedInterop)isModuleForNode?(builder.import(),isNamespace?builder.default(name||importedSource):(isDefault||isNamed)&&builder.default(importedSource).read(name)):isModuleForBabel?(builder.import(),isNamespace?builder.namespace(name||importedSource):(isDefault||isNamed)&&builder.named(name,importName)):(builder.require(),isNamespace?builder.var(name||importedSource):(isDefault||isNamed)&&(ensureLiveReference?builder.var(importedSource).read(name):builder.prop(importName).var(name)));else {if("uncompiled"!==importedInterop)throw new Error(`Unknown importedInterop "${importedInterop}".`);if(isDefault&&ensureLiveReference)throw new Error("No live reference for commonjs default");isModuleForNode?(builder.import(),isNamespace?builder.default(name||importedSource):isDefault?builder.default(name):isNamed&&builder.default(importedSource).read(name)):isModuleForBabel?(builder.import(),isNamespace?builder.default(name||importedSource):isDefault?builder.default(name):isNamed&&builder.named(name,importName)):(builder.require(),isNamespace?builder.var(name||importedSource):isDefault?builder.var(name):isNamed&&(ensureLiveReference?builder.var(importedSource).read(name):builder.var(name).prop(importName)));}}const{statements,resultName}=builder.done();return this._insertStatements(statements,importPosition,blockHoist),(isDefault||isNamed)&&ensureNoContext&&"Identifier"!==resultName.type?sequenceExpression([numericLiteral(0),resultName]):resultName}_insertStatements(statements,importPosition="before",blockHoist=3){const body=this._programPath.get("body");if("after"===importPosition){for(let i=body.length-1;i>=0;i--)if(body[i].isImportDeclaration())return void body[i].insertAfter(statements)}else {statements.forEach((node=>{node._blockHoist=blockHoist;}));const targetPath=body.find((p=>{const val=p.node._blockHoist;return Number.isFinite(val)&&val<4}));if(targetPath)return void targetPath.insertBefore(statements)}this._programPath.unshiftContainer("body",statements);}};},"./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"ImportInjector",{enumerable:!0,get:function(){return _importInjector.default}}),exports.addDefault=function(path,importedSource,opts){return new _importInjector.default(path).addDefault(importedSource,opts)},exports.addNamed=function(path,name,importedSource,opts){return new _importInjector.default(path).addNamed(name,importedSource,opts)},exports.addNamespace=function(path,importedSource,opts){return new _importInjector.default(path).addNamespace(importedSource,opts)},exports.addSideEffect=function(path,importedSource,opts){return new _importInjector.default(path).addSideEffect(importedSource,opts)},Object.defineProperty(exports,"isModule",{enumerable:!0,get:function(){return _isModule.default}});var _importInjector=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/import-injector.js"),_isModule=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/is-module.js");},"./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/is-module.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(path){const{sourceType}=path.node;if("module"!==sourceType&&"script"!==sourceType)throw path.buildCodeFrameError(`Unknown sourceType "${sourceType}", cannot transform.`);return "module"===path.node.sourceType};},"./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.buildDynamicImport=function(node,deferToThen,wrapWithPromise,builder){const[specifier]=node.arguments;if(t.isStringLiteral(specifier)||t.isTemplateLiteral(specifier)&&0===specifier.quasis.length)return deferToThen?_template.default.expression.ast`
        Promise.resolve().then(() => ${builder(specifier)})
      `:builder(specifier);const specifierToString=t.isTemplateLiteral(specifier)?t.identifier("specifier"):t.templateLiteral([t.templateElement({raw:""}),t.templateElement({raw:""})],[t.identifier("specifier")]);return deferToThen?_template.default.expression.ast`
      (specifier =>
        new Promise(r => r(${specifierToString}))
          .then(s => ${builder(t.identifier("s"))})
      )(${specifier})
    `:wrapWithPromise?_template.default.expression.ast`
      (specifier =>
        new Promise(r => r(${builder(specifierToString)}))
      )(${specifier})
    `:_template.default.expression.ast`
      (specifier => ${builder(specifierToString)})(${specifier})
    `},exports.getDynamicImportSource=function(node){const[source]=node.arguments;return t.isStringLiteral(source)||t.isTemplateLiteral(source)?source:_template.default.expression.ast`\`\${${source}}\``};var t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_template=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js");},"./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/get-module-name.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=getModuleName;{const originalGetModuleName=getModuleName;exports.default=getModuleName=function(rootOpts,pluginOpts){var _pluginOpts$moduleId,_pluginOpts$moduleIds,_pluginOpts$getModule,_pluginOpts$moduleRoo;return originalGetModuleName(rootOpts,{moduleId:null!=(_pluginOpts$moduleId=pluginOpts.moduleId)?_pluginOpts$moduleId:rootOpts.moduleId,moduleIds:null!=(_pluginOpts$moduleIds=pluginOpts.moduleIds)?_pluginOpts$moduleIds:rootOpts.moduleIds,getModuleId:null!=(_pluginOpts$getModule=pluginOpts.getModuleId)?_pluginOpts$getModule:rootOpts.getModuleId,moduleRoot:null!=(_pluginOpts$moduleRoo=pluginOpts.moduleRoot)?_pluginOpts$moduleRoo:rootOpts.moduleRoot})};}function getModuleName(rootOpts,pluginOpts){const{filename,filenameRelative=filename,sourceRoot=pluginOpts.moduleRoot}=rootOpts,{moduleId,moduleIds=!!moduleId,getModuleId,moduleRoot=sourceRoot}=pluginOpts;if(!moduleIds)return null;if(null!=moduleId&&!getModuleId)return moduleId;let moduleName=null!=moduleRoot?moduleRoot+"/":"";if(filenameRelative){const sourceRootReplacer=null!=sourceRoot?new RegExp("^"+sourceRoot+"/?"):"";moduleName+=filenameRelative.replace(sourceRootReplacer,"").replace(/\.(\w*?)$/,"");}return moduleName=moduleName.replace(/\\/g,"/"),getModuleId&&getModuleId(moduleName)||moduleName}},"./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"buildDynamicImport",{enumerable:!0,get:function(){return _dynamicImport.buildDynamicImport}}),exports.buildNamespaceInitStatements=function(metadata,sourceMetadata,constantReexports=!1){const statements=[];let srcNamespace=identifier(sourceMetadata.name);sourceMetadata.lazy&&(srcNamespace=callExpression(srcNamespace,[]));for(const localName of sourceMetadata.importsNamespace)localName!==sourceMetadata.name&&statements.push(_template.default.statement`var NAME = SOURCE;`({NAME:localName,SOURCE:cloneNode(srcNamespace)}));constantReexports&&statements.push(...buildReexportsFromMeta(metadata,sourceMetadata,!0));for(const exportName of sourceMetadata.reexportNamespace)statements.push((sourceMetadata.lazy?_template.default.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          `:_template.default.statement`EXPORTS.NAME = NAMESPACE;`)({EXPORTS:metadata.exportName,NAME:exportName,NAMESPACE:cloneNode(srcNamespace)}));if(sourceMetadata.reexportAll){const statement=function(metadata,namespace,constantReexports){return (constantReexports?_template.default.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      `:_template.default.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({NAMESPACE:namespace,EXPORTS:metadata.exportName,VERIFY_NAME_LIST:metadata.exportNameListName?_template.default`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({EXPORTS_LIST:metadata.exportNameListName}):null})}(metadata,cloneNode(srcNamespace),constantReexports);statement.loc=sourceMetadata.reexportAll.loc,statements.push(statement);}return statements},exports.ensureStatementsHoisted=function(statements){statements.forEach((header=>{header._blockHoist=3;}));},Object.defineProperty(exports,"getDynamicImportSource",{enumerable:!0,get:function(){return _dynamicImport.getDynamicImportSource}}),Object.defineProperty(exports,"getModuleName",{enumerable:!0,get:function(){return _getModuleName.default}}),Object.defineProperty(exports,"hasExports",{enumerable:!0,get:function(){return _normalizeAndLoadMetadata.hasExports}}),Object.defineProperty(exports,"isModule",{enumerable:!0,get:function(){return _helperModuleImports.isModule}}),Object.defineProperty(exports,"isSideEffectImport",{enumerable:!0,get:function(){return _normalizeAndLoadMetadata.isSideEffectImport}}),exports.rewriteModuleStatementsAndPrepareHeader=function(path,{loose,exportName,strict,allowTopLevelThis,strictMode,noInterop,importInterop=noInterop?"none":"babel",lazy,esNamespaceOnly,filename,constantReexports=loose,enumerableModuleMeta=loose,noIncompleteNsImportDetection}){(0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop),_assert((0, _helperModuleImports.isModule)(path),"Cannot process module statements in a script"),path.node.sourceType="script";const meta=(0, _normalizeAndLoadMetadata.default)(path,exportName,{importInterop,initializeReexports:constantReexports,lazy,esNamespaceOnly,filename});allowTopLevelThis||(0, _rewriteThis.default)(path);if((0, _rewriteLiveReferences.default)(path,meta),!1!==strictMode){const hasStrict=path.node.directives.some((directive=>"use strict"===directive.value.value));hasStrict||path.unshiftContainer("directives",directive(directiveLiteral("use strict")));}const headers=[];(0, _normalizeAndLoadMetadata.hasExports)(meta)&&!strict&&headers.push(function(metadata,enumerableModuleMeta=!1){return (enumerableModuleMeta?_template.default.statement`
        EXPORTS.__esModule = true;
      `:_template.default.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({EXPORTS:metadata.exportName})}(meta,enumerableModuleMeta));const nameList=function(programPath,metadata){const exportedVars=Object.create(null);for(const data of metadata.local.values())for(const name of data.names)exportedVars[name]=!0;let hasReexport=!1;for(const data of metadata.source.values()){for(const exportName of data.reexports.keys())exportedVars[exportName]=!0;for(const exportName of data.reexportNamespace)exportedVars[exportName]=!0;hasReexport=hasReexport||!!data.reexportAll;}if(!hasReexport||0===Object.keys(exportedVars).length)return null;const name=programPath.scope.generateUidIdentifier("exportNames");return delete exportedVars.default,{name:name.name,statement:variableDeclaration("var",[variableDeclarator(name,valueToNode(exportedVars))])}}(path,meta);nameList&&(meta.exportNameListName=nameList.name,headers.push(nameList.statement));return headers.push(...function(programPath,metadata,constantReexports=!1,noIncompleteNsImportDetection=!1){const initStatements=[];for(const[localName,data]of metadata.local)if("import"===data.kind);else if("hoisted"===data.kind)initStatements.push([data.names[0],buildInitStatement(metadata,data.names,identifier(localName))]);else if(!noIncompleteNsImportDetection)for(const exportName of data.names)initStatements.push([exportName,null]);for(const data of metadata.source.values()){if(!constantReexports){const reexportsStatements=buildReexportsFromMeta(metadata,data,!1),reexports=[...data.reexports.keys()];for(let i=0;i<reexportsStatements.length;i++)initStatements.push([reexports[i],reexportsStatements[i]]);}if(!noIncompleteNsImportDetection)for(const exportName of data.reexportNamespace)initStatements.push([exportName,null]);}initStatements.sort((([a],[b])=>a<b?-1:b<a?1:0));const results=[];if(noIncompleteNsImportDetection)for(const[,initStatement]of initStatements)results.push(initStatement);else {const chunkSize=100;for(let i=0;i<initStatements.length;i+=chunkSize){let uninitializedExportNames=[];for(let j=0;j<chunkSize&&i+j<initStatements.length;j++){const[exportName,initStatement]=initStatements[i+j];null!==initStatement?(uninitializedExportNames.length>0&&(results.push(buildInitStatement(metadata,uninitializedExportNames,programPath.scope.buildUndefinedNode())),uninitializedExportNames=[]),results.push(initStatement)):uninitializedExportNames.push(exportName);}uninitializedExportNames.length>0&&results.push(buildInitStatement(metadata,uninitializedExportNames,programPath.scope.buildUndefinedNode()));}}return results}(path,meta,constantReexports,noIncompleteNsImportDetection)),{meta,headers}},Object.defineProperty(exports,"rewriteThis",{enumerable:!0,get:function(){return _rewriteThis.default}}),exports.wrapInterop=function(programPath,expr,type){if("none"===type)return null;if("node-namespace"===type)return callExpression(programPath.hub.addHelper("interopRequireWildcard"),[expr,booleanLiteral(!0)]);if("node-default"===type)return null;let helper;if("default"===type)helper="interopRequireDefault";else {if("namespace"!==type)throw new Error(`Unknown interop: ${type}`);helper="interopRequireWildcard";}return callExpression(programPath.hub.addHelper(helper),[expr])};var _assert=__webpack_require__("assert"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_template=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js"),_helperModuleImports=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/index.js"),_rewriteThis=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js"),_rewriteLiveReferences=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"),_normalizeAndLoadMetadata=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js"),_dynamicImport=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/dynamic-import.js"),_getModuleName=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/get-module-name.js");const{booleanLiteral,callExpression,cloneNode,directive,directiveLiteral,expressionStatement,identifier,isIdentifier,memberExpression,stringLiteral,valueToNode,variableDeclaration,variableDeclarator}=_t;const ReexportTemplate={constant:_template.default.statement`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;`,constantComputed:_template.default.statement`EXPORTS["EXPORT_NAME"] = NAMESPACE_IMPORT;`,spec:_template.default.statement`
    Object.defineProperty(EXPORTS, "EXPORT_NAME", {
      enumerable: true,
      get: function() {
        return NAMESPACE_IMPORT;
      },
    });
    `};function buildReexportsFromMeta(meta,metadata,constantReexports){const namespace=metadata.lazy?callExpression(identifier(metadata.name),[]):identifier(metadata.name),{stringSpecifiers}=meta;return Array.from(metadata.reexports,(([exportName,importName])=>{let NAMESPACE_IMPORT=cloneNode(namespace);"default"===importName&&"node-default"===metadata.interop||(NAMESPACE_IMPORT=stringSpecifiers.has(importName)?memberExpression(NAMESPACE_IMPORT,stringLiteral(importName),!0):memberExpression(NAMESPACE_IMPORT,identifier(importName)));const astNodes={EXPORTS:meta.exportName,EXPORT_NAME:exportName,NAMESPACE_IMPORT};return constantReexports||isIdentifier(NAMESPACE_IMPORT)?stringSpecifiers.has(exportName)?ReexportTemplate.constantComputed(astNodes):ReexportTemplate.constant(astNodes):ReexportTemplate.spec(astNodes)}))}const InitTemplate={computed:_template.default.expression`EXPORTS["NAME"] = VALUE`,default:_template.default.expression`EXPORTS.NAME = VALUE`};function buildInitStatement(metadata,exportNames,initExpr){const{stringSpecifiers,exportName:EXPORTS}=metadata;return expressionStatement(exportNames.reduce(((acc,exportName)=>{const params={EXPORTS,NAME:exportName,VALUE:acc};return stringSpecifiers.has(exportName)?InitTemplate.computed(params):InitTemplate.default(params)}),initExpr))}},"./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(programPath,exportName,{importInterop,initializeReexports=!1,lazy=!1,esNamespaceOnly=!1,filename}){exportName||(exportName=programPath.scope.generateUidIdentifier("exports").name);const stringSpecifiers=new Set;!function(programPath){programPath.get("body").forEach((child=>{child.isExportDefaultDeclaration()&&(0, _helperSplitExportDeclaration.default)(child);}));}(programPath);const{local,sources,hasExports}=function(programPath,{lazy,initializeReexports},stringSpecifiers){const localData=function(programPath,initializeReexports,stringSpecifiers){const bindingKindLookup=new Map;programPath.get("body").forEach((child=>{let kind;if(child.isImportDeclaration())kind="import";else {if(child.isExportDefaultDeclaration()&&(child=child.get("declaration")),child.isExportNamedDeclaration())if(child.node.declaration)child=child.get("declaration");else if(initializeReexports&&child.node.source&&child.get("source").isStringLiteral())return void child.get("specifiers").forEach((spec=>{assertExportSpecifier(spec),bindingKindLookup.set(spec.get("local").node.name,"block");}));if(child.isFunctionDeclaration())kind="hoisted";else if(child.isClassDeclaration())kind="block";else if(child.isVariableDeclaration({kind:"var"}))kind="var";else {if(!child.isVariableDeclaration())return;kind="block";}}Object.keys(child.getOuterBindingIdentifiers()).forEach((name=>{bindingKindLookup.set(name,kind);}));}));const localMetadata=new Map,getLocalMetadata=idPath=>{const localName=idPath.node.name;let metadata=localMetadata.get(localName);if(!metadata){const kind=bindingKindLookup.get(localName);if(void 0===kind)throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);metadata={names:[],kind},localMetadata.set(localName,metadata);}return metadata};return programPath.get("body").forEach((child=>{if(!child.isExportNamedDeclaration()||!initializeReexports&&child.node.source){if(child.isExportDefaultDeclaration()){const declaration=child.get("declaration");if(!declaration.isFunctionDeclaration()&&!declaration.isClassDeclaration())throw declaration.buildCodeFrameError("Unexpected default expression export.");getLocalMetadata(declaration.get("id")).names.push("default");}}else if(child.node.declaration){const declaration=child.get("declaration"),ids=declaration.getOuterBindingIdentifierPaths();Object.keys(ids).forEach((name=>{if("__esModule"===name)throw declaration.buildCodeFrameError('Illegal export "__esModule".');getLocalMetadata(ids[name]).names.push(name);}));}else child.get("specifiers").forEach((spec=>{const local=spec.get("local"),exported=spec.get("exported"),localMetadata=getLocalMetadata(local),exportName=getExportSpecifierName(exported,stringSpecifiers);if("__esModule"===exportName)throw exported.buildCodeFrameError('Illegal export "__esModule".');localMetadata.names.push(exportName);}));})),localMetadata}(programPath,initializeReexports,stringSpecifiers),sourceData=new Map,getData=sourceNode=>{const source=sourceNode.value;let data=sourceData.get(source);return data||(data={name:programPath.scope.generateUidIdentifier((0, _path.basename)(source,(0, _path.extname)(source))).name,interop:"none",loc:null,imports:new Map,importsNamespace:new Set,reexports:new Map,reexportNamespace:new Set,reexportAll:null,lazy:!1,referenced:!1},sourceData.set(source,data)),data};let hasExports=!1;programPath.get("body").forEach((child=>{if(child.isImportDeclaration()){const data=getData(child.node.source);data.loc||(data.loc=child.node.loc),child.get("specifiers").forEach((spec=>{if(spec.isImportDefaultSpecifier()){const localName=spec.get("local").node.name;data.imports.set(localName,"default");const reexport=localData.get(localName);reexport&&(localData.delete(localName),reexport.names.forEach((name=>{data.reexports.set(name,"default");})),data.referenced=!0);}else if(spec.isImportNamespaceSpecifier()){const localName=spec.get("local").node.name;data.importsNamespace.add(localName);const reexport=localData.get(localName);reexport&&(localData.delete(localName),reexport.names.forEach((name=>{data.reexportNamespace.add(name);})),data.referenced=!0);}else if(spec.isImportSpecifier()){const importName=getExportSpecifierName(spec.get("imported"),stringSpecifiers),localName=spec.get("local").node.name;data.imports.set(localName,importName);const reexport=localData.get(localName);reexport&&(localData.delete(localName),reexport.names.forEach((name=>{data.reexports.set(name,importName);})),data.referenced=!0);}}));}else if(child.isExportAllDeclaration()){hasExports=!0;const data=getData(child.node.source);data.loc||(data.loc=child.node.loc),data.reexportAll={loc:child.node.loc},data.referenced=!0;}else if(child.isExportNamedDeclaration()&&child.node.source){hasExports=!0;const data=getData(child.node.source);data.loc||(data.loc=child.node.loc),child.get("specifiers").forEach((spec=>{assertExportSpecifier(spec);const importName=getExportSpecifierName(spec.get("local"),stringSpecifiers),exportName=getExportSpecifierName(spec.get("exported"),stringSpecifiers);if(data.reexports.set(exportName,importName),data.referenced=!0,"__esModule"===exportName)throw spec.get("exported").buildCodeFrameError('Illegal export "__esModule".')}));}else (child.isExportNamedDeclaration()||child.isExportDefaultDeclaration())&&(hasExports=!0);}));for(const metadata of sourceData.values()){let needsDefault=!1,needsNamed=!1;metadata.importsNamespace.size>0&&(needsDefault=!0,needsNamed=!0),metadata.reexportAll&&(needsNamed=!0);for(const importName of metadata.imports.values())"default"===importName?needsDefault=!0:needsNamed=!0;for(const importName of metadata.reexports.values())"default"===importName?needsDefault=!0:needsNamed=!0;needsDefault&&needsNamed?metadata.interop="namespace":needsDefault&&(metadata.interop="default");}for(const[source,metadata]of sourceData)if(!1!==lazy&&!isSideEffectImport(metadata)&&!metadata.reexportAll)if(!0===lazy)metadata.lazy=!/\./.test(source);else if(Array.isArray(lazy))metadata.lazy=-1!==lazy.indexOf(source);else {if("function"!=typeof lazy)throw new Error(".lazy must be a boolean, string array, or function");metadata.lazy=lazy(source);}return {hasExports,local:localData,sources:sourceData}}(programPath,{initializeReexports,lazy},stringSpecifiers);!function(programPath){programPath.get("body").forEach((child=>{if(child.isImportDeclaration())child.remove();else if(child.isExportNamedDeclaration())child.node.declaration?(child.node.declaration._blockHoist=child.node._blockHoist,child.replaceWith(child.node.declaration)):child.remove();else if(child.isExportDefaultDeclaration()){const declaration=child.get("declaration");if(!declaration.isFunctionDeclaration()&&!declaration.isClassDeclaration())throw declaration.buildCodeFrameError("Unexpected default expression export.");declaration._blockHoist=child.node._blockHoist,child.replaceWith(declaration);}else child.isExportAllDeclaration()&&child.remove();}));}(programPath);for(const[source,metadata]of sources){metadata.importsNamespace.size>0&&(metadata.name=metadata.importsNamespace.values().next().value);const resolvedInterop=resolveImportInterop(importInterop,source,filename);"none"===resolvedInterop?metadata.interop="none":"node"===resolvedInterop&&"namespace"===metadata.interop?metadata.interop="node-namespace":"node"===resolvedInterop&&"default"===metadata.interop?metadata.interop="node-default":esNamespaceOnly&&"namespace"===metadata.interop&&(metadata.interop="default");}return {exportName,exportNameListName:null,hasExports,local,source:sources,stringSpecifiers}},exports.hasExports=function(metadata){return metadata.hasExports},exports.isSideEffectImport=isSideEffectImport,exports.validateImportInteropOption=validateImportInteropOption;var _path=__webpack_require__("path"),_helperValidatorIdentifier=__webpack_require__("./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/index.js"),_helperSplitExportDeclaration=__webpack_require__("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js");function isSideEffectImport(source){return 0===source.imports.size&&0===source.importsNamespace.size&&0===source.reexports.size&&0===source.reexportNamespace.size&&!source.reexportAll}function validateImportInteropOption(importInterop){if("function"!=typeof importInterop&&"none"!==importInterop&&"babel"!==importInterop&&"node"!==importInterop)throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);return importInterop}function resolveImportInterop(importInterop,source,filename){return "function"==typeof importInterop?validateImportInteropOption(importInterop(source,filename)):importInterop}function getExportSpecifierName(path,stringSpecifiers){if(path.isIdentifier())return path.node.name;if(path.isStringLiteral()){const stringValue=path.node.value;return (0, _helperValidatorIdentifier.isIdentifierName)(stringValue)||stringSpecifiers.add(stringValue),stringValue}throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path.node.type}`)}function assertExportSpecifier(path){if(!path.isExportSpecifier())throw path.isExportNamespaceSpecifier()?path.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-proposal-export-namespace-from`."):path.buildCodeFrameError("Unexpected export specifier type")}},"./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(programPath,metadata){const imported=new Map,exported=new Map,requeueInParent=path=>{programPath.requeue(path);};for(const[source,data]of metadata.source){for(const[localName,importName]of data.imports)imported.set(localName,[source,importName,null]);for(const localName of data.importsNamespace)imported.set(localName,[source,null,localName]);}for(const[local,data]of metadata.local){let exportMeta=exported.get(local);exportMeta||(exportMeta=[],exported.set(local,exportMeta)),exportMeta.push(...data.names);}const rewriteBindingInitVisitorState={metadata,requeueInParent,scope:programPath.scope,exported};programPath.traverse(rewriteBindingInitVisitor,rewriteBindingInitVisitorState),(0, _helperSimpleAccess.default)(programPath,new Set([...Array.from(imported.keys()),...Array.from(exported.keys())]),!1);const rewriteReferencesVisitorState={seen:new WeakSet,metadata,requeueInParent,scope:programPath.scope,imported,exported,buildImportReference:([source,importName,localName],identNode)=>{const meta=metadata.source.get(source);if(meta.referenced=!0,localName)return meta.lazy&&(identNode=callExpression(identNode,[])),identNode;let namespace=identifier(meta.name);if(meta.lazy&&(namespace=callExpression(namespace,[])),"default"===importName&&"node-default"===meta.interop)return namespace;const computed=metadata.stringSpecifiers.has(importName);return memberExpression(namespace,computed?stringLiteral(importName):identifier(importName),computed)}};programPath.traverse(rewriteReferencesVisitor,rewriteReferencesVisitorState);};var _assert=__webpack_require__("assert"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_template=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js"),_helperSimpleAccess=__webpack_require__("./node_modules/.pnpm/@babel+helper-simple-access@7.20.2/node_modules/@babel/helper-simple-access/lib/index.js");const{assignmentExpression,callExpression,cloneNode,expressionStatement,getOuterBindingIdentifiers,identifier,isMemberExpression,isVariableDeclaration,jsxIdentifier,jsxMemberExpression,memberExpression,numericLiteral,sequenceExpression,stringLiteral,variableDeclaration,variableDeclarator}=_t;const rewriteBindingInitVisitor={Scope(path){path.skip();},ClassDeclaration(path){const{requeueInParent,exported,metadata}=this,{id}=path.node;if(!id)throw new Error("Expected class to have a name");const localName=id.name,exportNames=exported.get(localName)||[];if(exportNames.length>0){const statement=expressionStatement(buildBindingExportAssignmentExpression(metadata,exportNames,identifier(localName),path.scope));statement._blockHoist=path.node._blockHoist,requeueInParent(path.insertAfter(statement)[0]);}},VariableDeclaration(path){const{requeueInParent,exported,metadata}=this;Object.keys(path.getOuterBindingIdentifiers()).forEach((localName=>{const exportNames=exported.get(localName)||[];if(exportNames.length>0){const statement=expressionStatement(buildBindingExportAssignmentExpression(metadata,exportNames,identifier(localName),path.scope));statement._blockHoist=path.node._blockHoist,requeueInParent(path.insertAfter(statement)[0]);}}));}},buildBindingExportAssignmentExpression=(metadata,exportNames,localExpr,scope)=>{const exportsObjectName=metadata.exportName;for(let currentScope=scope;null!=currentScope;currentScope=currentScope.parent)currentScope.hasOwnBinding(exportsObjectName)&&currentScope.rename(exportsObjectName);return (exportNames||[]).reduce(((expr,exportName)=>{const{stringSpecifiers}=metadata,computed=stringSpecifiers.has(exportName);return assignmentExpression("=",memberExpression(identifier(exportsObjectName),computed?stringLiteral(exportName):identifier(exportName),computed),expr)}),localExpr)},buildImportThrow=localName=>_template.default.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `,rewriteReferencesVisitor={ReferencedIdentifier(path){const{seen,buildImportReference,scope,imported,requeueInParent}=this;if(seen.has(path.node))return;seen.add(path.node);const localName=path.node.name,importData=imported.get(localName);if(importData){if(function(path){do{switch(path.parent.type){case"TSTypeAnnotation":case"TSTypeAliasDeclaration":case"TSTypeReference":case"TypeAnnotation":case"TypeAlias":return !0;case"ExportSpecifier":return "type"===path.parentPath.parent.exportKind;default:if(path.parentPath.isStatement()||path.parentPath.isExpression())return !1}}while(path=path.parentPath)}(path))throw path.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);const localBinding=path.scope.getBinding(localName);if(scope.getBinding(localName)!==localBinding)return;const ref=buildImportReference(importData,path.node);if(ref.loc=path.node.loc,(path.parentPath.isCallExpression({callee:path.node})||path.parentPath.isOptionalCallExpression({callee:path.node})||path.parentPath.isTaggedTemplateExpression({tag:path.node}))&&isMemberExpression(ref))path.replaceWith(sequenceExpression([numericLiteral(0),ref]));else if(path.isJSXIdentifier()&&isMemberExpression(ref)){const{object,property}=ref;path.replaceWith(jsxMemberExpression(jsxIdentifier(object.name),jsxIdentifier(property.name)));}else path.replaceWith(ref);requeueInParent(path),path.skip();}},UpdateExpression(path){const{scope,seen,imported,exported,requeueInParent,buildImportReference}=this;if(seen.has(path.node))return;seen.add(path.node);const arg=path.get("argument");if(arg.isMemberExpression())return;const update=path.node;if(arg.isIdentifier()){const localName=arg.node.name;if(scope.getBinding(localName)!==path.scope.getBinding(localName))return;const exportedNames=exported.get(localName),importData=imported.get(localName);if((null==exportedNames?void 0:exportedNames.length)>0||importData)if(importData)path.replaceWith(assignmentExpression(update.operator[0]+"=",buildImportReference(importData,arg.node),buildImportThrow(localName)));else if(update.prefix)path.replaceWith(buildBindingExportAssignmentExpression(this.metadata,exportedNames,cloneNode(update),path.scope));else {const ref=scope.generateDeclaredUidIdentifier(localName);path.replaceWith(sequenceExpression([assignmentExpression("=",cloneNode(ref),cloneNode(update)),buildBindingExportAssignmentExpression(this.metadata,exportedNames,identifier(localName),path.scope),cloneNode(ref)]));}}requeueInParent(path),path.skip();},AssignmentExpression:{exit(path){const{scope,seen,imported,exported,requeueInParent,buildImportReference}=this;if(seen.has(path.node))return;seen.add(path.node);const left=path.get("left");if(!left.isMemberExpression())if(left.isIdentifier()){const localName=left.node.name;if(scope.getBinding(localName)!==path.scope.getBinding(localName))return;const exportedNames=exported.get(localName),importData=imported.get(localName);if((null==exportedNames?void 0:exportedNames.length)>0||importData){_assert("="===path.node.operator,"Path was not simplified");const assignment=path.node;importData&&(assignment.left=buildImportReference(importData,left.node),assignment.right=sequenceExpression([assignment.right,buildImportThrow(localName)])),path.replaceWith(buildBindingExportAssignmentExpression(this.metadata,exportedNames,assignment,path.scope)),requeueInParent(path);}}else {const ids=left.getOuterBindingIdentifiers(),programScopeIds=Object.keys(ids).filter((localName=>scope.getBinding(localName)===path.scope.getBinding(localName))),id=programScopeIds.find((localName=>imported.has(localName)));id&&(path.node.right=sequenceExpression([path.node.right,buildImportThrow(id)]));const items=[];if(programScopeIds.forEach((localName=>{const exportedNames=exported.get(localName)||[];exportedNames.length>0&&items.push(buildBindingExportAssignmentExpression(this.metadata,exportedNames,identifier(localName),path.scope));})),items.length>0){let node=sequenceExpression(items);path.parentPath.isExpressionStatement()&&(node=expressionStatement(node),node._blockHoist=path.parentPath.node._blockHoist);requeueInParent(path.insertAfter(node)[0]);}}}},"ForOfStatement|ForInStatement"(path){const{scope,node}=path,{left}=node,{exported,imported,scope:programScope}=this;if(!isVariableDeclaration(left)){let importConstViolationName,didTransformExport=!1;const loopBodyScope=path.get("body").scope;for(const name of Object.keys(getOuterBindingIdentifiers(left)))programScope.getBinding(name)===scope.getBinding(name)&&(exported.has(name)&&(didTransformExport=!0,loopBodyScope.hasOwnBinding(name)&&loopBodyScope.rename(name)),imported.has(name)&&!importConstViolationName&&(importConstViolationName=name));if(!didTransformExport&&!importConstViolationName)return;path.ensureBlock();const bodyPath=path.get("body"),newLoopId=scope.generateUidIdentifierBasedOnNode(left);path.get("left").replaceWith(variableDeclaration("let",[variableDeclarator(cloneNode(newLoopId))])),scope.registerDeclaration(path.get("left")),didTransformExport&&bodyPath.unshiftContainer("body",expressionStatement(assignmentExpression("=",left,newLoopId))),importConstViolationName&&bodyPath.unshiftContainer("body",expressionStatement(buildImportThrow(importConstViolationName)));}}};},"./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(programPath){(0, _traverse.default)(programPath.node,Object.assign({},rewriteThisVisitor,{noScope:!0}));};var _helperEnvironmentVisitor=__webpack_require__("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"),_traverse=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{numericLiteral,unaryExpression}=_t,rewriteThisVisitor=_traverse.default.visitors.merge([_helperEnvironmentVisitor.default,{ThisExpression(path){path.replaceWith(unaryExpression("void",numericLiteral(0),!0));}}]);},"./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.18.6/node_modules/@babel/helper-optimise-call-expression/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(callee,thisNode,args,optional){return 1===args.length&&isSpreadElement(args[0])&&isIdentifier(args[0].argument,{name:"arguments"})?optional?optionalCallExpression(optionalMemberExpression(callee,identifier("apply"),!1,!0),[thisNode,args[0].argument],!1):callExpression(memberExpression(callee,identifier("apply")),[thisNode,args[0].argument]):optional?optionalCallExpression(optionalMemberExpression(callee,identifier("call"),!1,!0),[thisNode,...args],!1):callExpression(memberExpression(callee,identifier("call")),[thisNode,...args])};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{callExpression,identifier,isIdentifier,isSpreadElement,memberExpression,optionalCallExpression,optionalMemberExpression}=_t;},"./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.declare=declare,exports.declarePreset=void 0;const apiPolyfills={assertVersion:api=>range=>{!function(range,version){if("number"==typeof range){if(!Number.isInteger(range))throw new Error("Expected string or integer value.");range=`^${range}.0.0-0`;}if("string"!=typeof range)throw new Error("Expected string or integer value.");const limit=Error.stackTraceLimit;"number"==typeof limit&&limit<25&&(Error.stackTraceLimit=25);let err;err="7."===version.slice(0,2)?new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${version}". You'll need to update your @babel/core version.`):new Error(`Requires Babel "${range}", but was loaded with "${version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);"number"==typeof limit&&(Error.stackTraceLimit=limit);throw Object.assign(err,{code:"BABEL_VERSION_UNSUPPORTED",version,range})}(range,api.version);},targets:()=>()=>({}),assumption:()=>()=>{}};function declare(builder){return (api,options,dirname)=>{var _clonedApi2;let clonedApi;for(const name of Object.keys(apiPolyfills)){var _clonedApi;api[name]||(clonedApi=null!=(_clonedApi=clonedApi)?_clonedApi:copyApiObject(api),clonedApi[name]=apiPolyfills[name](clonedApi));}return builder(null!=(_clonedApi2=clonedApi)?_clonedApi2:api,options||{},dirname)}}const declarePreset=declare;function copyApiObject(api){let proto=null;return "string"==typeof api.version&&/^7\./.test(api.version)&&(proto=Object.getPrototypeOf(api),!proto||has(proto,"version")&&has(proto,"transform")&&has(proto,"template")&&has(proto,"types")||(proto=null)),Object.assign({},proto,api)}function has(obj,key){return Object.prototype.hasOwnProperty.call(obj,key)}exports.declarePreset=declarePreset;},"./node_modules/.pnpm/@babel+helper-replace-supers@7.20.7/node_modules/@babel/helper-replace-supers/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0,Object.defineProperty(exports,"environmentVisitor",{enumerable:!0,get:function(){return _helperEnvironmentVisitor.default}}),Object.defineProperty(exports,"skipAllButComputedKey",{enumerable:!0,get:function(){return _helperEnvironmentVisitor.skipAllButComputedKey}});var _helperEnvironmentVisitor=__webpack_require__("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"),_helperMemberExpressionToFunctions=__webpack_require__("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.21.0/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"),_helperOptimiseCallExpression=__webpack_require__("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.18.6/node_modules/@babel/helper-optimise-call-expression/lib/index.js"),_template=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js"),_traverse=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{assignmentExpression,booleanLiteral,callExpression,cloneNode,identifier,memberExpression,sequenceExpression,stringLiteral,thisExpression}=_t;function getPrototypeOfExpression(objectRef,isStatic,file,isPrivateMethod){objectRef=cloneNode(objectRef);const targetRef=isStatic||isPrivateMethod?objectRef:memberExpression(objectRef,identifier("prototype"));return callExpression(file.addHelper("getPrototypeOf"),[targetRef])}const visitor=_traverse.default.visitors.merge([_helperEnvironmentVisitor.default,{Super(path,state){const{node,parentPath}=path;parentPath.isMemberExpression({object:node})&&state.handle(parentPath);}}]),unshadowSuperBindingVisitor=_traverse.default.visitors.merge([_helperEnvironmentVisitor.default,{Scopable(path,{refName}){const binding=path.scope.getOwnBinding(refName);binding&&binding.identifier.name===refName&&path.scope.rename(refName);}}]),specHandlers={memoise(superMember,count){const{scope,node}=superMember,{computed,property}=node;if(!computed)return;const memo=scope.maybeGenerateMemoised(property);memo&&this.memoiser.set(property,memo,count);},prop(superMember){const{computed,property}=superMember.node;return this.memoiser.has(property)?cloneNode(this.memoiser.get(property)):computed?cloneNode(property):stringLiteral(property.name)},get(superMember){return this._get(superMember,this._getThisRefs())},_get(superMember,thisRefs){const proto=getPrototypeOfExpression(this.getObjectRef(),this.isStatic,this.file,this.isPrivateMethod);return callExpression(this.file.addHelper("get"),[thisRefs.memo?sequenceExpression([thisRefs.memo,proto]):proto,this.prop(superMember),thisRefs.this])},_getThisRefs(){if(!this.isDerivedConstructor)return {this:thisExpression()};const thisRef=this.scope.generateDeclaredUidIdentifier("thisSuper");return {memo:assignmentExpression("=",thisRef,thisExpression()),this:cloneNode(thisRef)}},set(superMember,value){const thisRefs=this._getThisRefs(),proto=getPrototypeOfExpression(this.getObjectRef(),this.isStatic,this.file,this.isPrivateMethod);return callExpression(this.file.addHelper("set"),[thisRefs.memo?sequenceExpression([thisRefs.memo,proto]):proto,this.prop(superMember),value,thisRefs.this,booleanLiteral(superMember.isInStrictMode())])},destructureSet(superMember){throw superMember.buildCodeFrameError("Destructuring to a super field is not supported yet.")},call(superMember,args){const thisRefs=this._getThisRefs();return (0, _helperOptimiseCallExpression.default)(this._get(superMember,thisRefs),cloneNode(thisRefs.this),args,!1)},optionalCall(superMember,args){const thisRefs=this._getThisRefs();return (0, _helperOptimiseCallExpression.default)(this._get(superMember,thisRefs),cloneNode(thisRefs.this),args,!0)},delete(superMember){return superMember.node.computed?sequenceExpression([callExpression(this.file.addHelper("toPropertyKey"),[cloneNode(superMember.node.property)]),_template.default.expression.ast`
          function () { throw new ReferenceError("'delete super[expr]' is invalid"); }()
        `]):_template.default.expression.ast`
        function () { throw new ReferenceError("'delete super.prop' is invalid"); }()
      `}},looseHandlers=Object.assign({},specHandlers,{prop(superMember){const{property}=superMember.node;return this.memoiser.has(property)?cloneNode(this.memoiser.get(property)):cloneNode(property)},get(superMember){const{isStatic,getSuperRef}=this,{computed}=superMember.node,prop=this.prop(superMember);let object;var _getSuperRef,_getSuperRef2;isStatic?object=null!=(_getSuperRef=getSuperRef())?_getSuperRef:memberExpression(identifier("Function"),identifier("prototype")):object=memberExpression(null!=(_getSuperRef2=getSuperRef())?_getSuperRef2:identifier("Object"),identifier("prototype"));return memberExpression(object,prop,computed)},set(superMember,value){const{computed}=superMember.node,prop=this.prop(superMember);return assignmentExpression("=",memberExpression(thisExpression(),prop,computed),value)},destructureSet(superMember){const{computed}=superMember.node,prop=this.prop(superMember);return memberExpression(thisExpression(),prop,computed)},call(superMember,args){return (0, _helperOptimiseCallExpression.default)(this.get(superMember),thisExpression(),args,!1)},optionalCall(superMember,args){return (0, _helperOptimiseCallExpression.default)(this.get(superMember),thisExpression(),args,!0)}});exports.default=class{constructor(opts){var _opts$constantSuper;const path=opts.methodPath;this.methodPath=path,this.isDerivedConstructor=path.isClassMethod({kind:"constructor"})&&!!opts.superRef,this.isStatic=path.isObjectMethod()||path.node.static||(null==path.isStaticBlock?void 0:path.isStaticBlock()),this.isPrivateMethod=path.isPrivate()&&path.isMethod(),this.file=opts.file,this.constantSuper=null!=(_opts$constantSuper=opts.constantSuper)?_opts$constantSuper:opts.isLoose,this.opts=opts;}getObjectRef(){return cloneNode(this.opts.objectRef||this.opts.getObjectRef())}getSuperRef(){return this.opts.superRef?cloneNode(this.opts.superRef):this.opts.getSuperRef?cloneNode(this.opts.getSuperRef()):void 0}replace(){this.opts.refToPreserve&&this.methodPath.traverse(unshadowSuperBindingVisitor,{refName:this.opts.refToPreserve.name});const handler=this.constantSuper?looseHandlers:specHandlers;(0, _helperMemberExpressionToFunctions.default)(this.methodPath,visitor,Object.assign({file:this.file,scope:this.methodPath.scope,isDerivedConstructor:this.isDerivedConstructor,isStatic:this.isStatic,isPrivateMethod:this.isPrivateMethod,getObjectRef:this.getObjectRef.bind(this),getSuperRef:this.getSuperRef.bind(this),boundGet:handler.get},handler));}};},"./node_modules/.pnpm/@babel+helper-simple-access@7.20.2/node_modules/@babel/helper-simple-access/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(path,bindingNames,includeUpdateExpression=!0){path.traverse(simpleAssignmentVisitor,{scope:path.scope,bindingNames,seen:new WeakSet,includeUpdateExpression});};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{LOGICAL_OPERATORS,assignmentExpression,binaryExpression,cloneNode,identifier,logicalExpression,numericLiteral,sequenceExpression,unaryExpression}=_t,simpleAssignmentVisitor={UpdateExpression:{exit(path){const{scope,bindingNames,includeUpdateExpression}=this;if(!includeUpdateExpression)return;const arg=path.get("argument");if(!arg.isIdentifier())return;const localName=arg.node.name;if(bindingNames.has(localName)&&scope.getBinding(localName)===path.scope.getBinding(localName))if(path.parentPath.isExpressionStatement()&&!path.isCompletionRecord()){const operator="++"==path.node.operator?"+=":"-=";path.replaceWith(assignmentExpression(operator,arg.node,numericLiteral(1)));}else if(path.node.prefix)path.replaceWith(assignmentExpression("=",identifier(localName),binaryExpression(path.node.operator[0],unaryExpression("+",arg.node),numericLiteral(1))));else {const old=path.scope.generateUidIdentifierBasedOnNode(arg.node,"old"),varName=old.name;path.scope.push({id:old});const binary=binaryExpression(path.node.operator[0],identifier(varName),numericLiteral(1));path.replaceWith(sequenceExpression([assignmentExpression("=",identifier(varName),unaryExpression("+",arg.node)),assignmentExpression("=",cloneNode(arg.node),binary),identifier(varName)]));}}},AssignmentExpression:{exit(path){const{scope,seen,bindingNames}=this;if("="===path.node.operator)return;if(seen.has(path.node))return;seen.add(path.node);const left=path.get("left");if(!left.isIdentifier())return;const localName=left.node.name;if(!bindingNames.has(localName))return;if(scope.getBinding(localName)!==path.scope.getBinding(localName))return;const operator=path.node.operator.slice(0,-1);LOGICAL_OPERATORS.includes(operator)?path.replaceWith(logicalExpression(operator,path.node.left,assignmentExpression("=",cloneNode(path.node.left),path.node.right))):(path.node.right=binaryExpression(operator,cloneNode(path.node.left),path.node.right),path.node.operator="=");}}};},"./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.20.0/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.isTransparentExprWrapper=isTransparentExprWrapper,exports.skipTransparentExprWrapperNodes=function(node){for(;isTransparentExprWrapper(node);)node=node.expression;return node},exports.skipTransparentExprWrappers=function(path){for(;isTransparentExprWrapper(path.node);)path=path.get("expression");return path};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{isParenthesizedExpression,isTSAsExpression,isTSNonNullExpression,isTSSatisfiesExpression,isTSTypeAssertion,isTypeCastExpression}=_t;function isTransparentExprWrapper(node){return isTSAsExpression(node)||isTSSatisfiesExpression(node)||isTSTypeAssertion(node)||isTSNonNullExpression(node)||isTypeCastExpression(node)||isParenthesizedExpression(node)}},"./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(exportDeclaration){if(!exportDeclaration.isExportDeclaration()||exportDeclaration.isExportAllDeclaration())throw new Error("Only default and named export declarations can be split.");if(exportDeclaration.isExportDefaultDeclaration()){const declaration=exportDeclaration.get("declaration"),standaloneDeclaration=declaration.isFunctionDeclaration()||declaration.isClassDeclaration(),scope=declaration.isScope()?declaration.scope.parent:declaration.scope;let id=declaration.node.id,needBindingRegistration=!1;id||(needBindingRegistration=!0,id=scope.generateUidIdentifier("default"),(standaloneDeclaration||declaration.isFunctionExpression()||declaration.isClassExpression())&&(declaration.node.id=cloneNode(id)));const updatedDeclaration=standaloneDeclaration?declaration.node:variableDeclaration("var",[variableDeclarator(cloneNode(id),declaration.node)]),updatedExportDeclaration=exportNamedDeclaration(null,[exportSpecifier(cloneNode(id),identifier("default"))]);return exportDeclaration.insertAfter(updatedExportDeclaration),exportDeclaration.replaceWith(updatedDeclaration),needBindingRegistration&&scope.registerDeclaration(exportDeclaration),exportDeclaration}if(exportDeclaration.get("specifiers").length>0)throw new Error("It doesn't make sense to split exported specifiers.");const declaration=exportDeclaration.get("declaration"),bindingIdentifiers=declaration.getOuterBindingIdentifiers(),specifiers=Object.keys(bindingIdentifiers).map((name=>exportSpecifier(identifier(name),identifier(name)))),aliasDeclar=exportNamedDeclaration(null,specifiers);return exportDeclaration.insertAfter(aliasDeclar),exportDeclaration.replaceWith(declaration.node),exportDeclaration};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{cloneNode,exportNamedDeclaration,exportSpecifier,identifier,variableDeclaration,variableDeclarator}=_t;},"./node_modules/.pnpm/@babel+helper-string-parser@7.19.4/node_modules/@babel/helper-string-parser/lib/index.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.readCodePoint=readCodePoint,exports.readInt=readInt,exports.readStringContents=function(type,input,pos,lineStart,curLine,errors){const initialPos=pos,initialLineStart=lineStart,initialCurLine=curLine;let out="",firstInvalidLoc=null,chunkStart=pos;const{length}=input;for(;;){if(pos>=length){errors.unterminated(initialPos,initialLineStart,initialCurLine),out+=input.slice(chunkStart,pos);break}const ch=input.charCodeAt(pos);if(isStringEnd(type,ch,input,pos)){out+=input.slice(chunkStart,pos);break}if(92===ch){out+=input.slice(chunkStart,pos);const res=readEscapedChar(input,pos,lineStart,curLine,"template"===type,errors);null!==res.ch||firstInvalidLoc?out+=res.ch:firstInvalidLoc={pos,lineStart,curLine},({pos,lineStart,curLine}=res),chunkStart=pos;}else 8232===ch||8233===ch?(++curLine,lineStart=++pos):10===ch||13===ch?"template"===type?(out+=input.slice(chunkStart,pos)+"\n",++pos,13===ch&&10===input.charCodeAt(pos)&&++pos,++curLine,chunkStart=lineStart=pos):errors.unterminated(initialPos,initialLineStart,initialCurLine):++pos;}return {pos,str:out,firstInvalidLoc,lineStart,curLine,containsInvalid:!!firstInvalidLoc}};var _isDigit=function(code){return code>=48&&code<=57};const forbiddenNumericSeparatorSiblings={decBinOct:new Set([46,66,69,79,95,98,101,111]),hex:new Set([46,88,95,120])},isAllowedNumericSeparatorSibling={bin:ch=>48===ch||49===ch,oct:ch=>ch>=48&&ch<=55,dec:ch=>ch>=48&&ch<=57,hex:ch=>ch>=48&&ch<=57||ch>=65&&ch<=70||ch>=97&&ch<=102};function isStringEnd(type,ch,input,pos){return "template"===type?96===ch||36===ch&&123===input.charCodeAt(pos+1):ch===("double"===type?34:39)}function readEscapedChar(input,pos,lineStart,curLine,inTemplate,errors){const throwOnInvalid=!inTemplate;pos++;const res=ch=>({pos,ch,lineStart,curLine}),ch=input.charCodeAt(pos++);switch(ch){case 110:return res("\n");case 114:return res("\r");case 120:{let code;return ({code,pos}=readHexChar(input,pos,lineStart,curLine,2,!1,throwOnInvalid,errors)),res(null===code?null:String.fromCharCode(code))}case 117:{let code;return ({code,pos}=readCodePoint(input,pos,lineStart,curLine,throwOnInvalid,errors)),res(null===code?null:String.fromCodePoint(code))}case 116:return res("\t");case 98:return res("\b");case 118:return res("\v");case 102:return res("\f");case 13:10===input.charCodeAt(pos)&&++pos;case 10:lineStart=pos,++curLine;case 8232:case 8233:return res("");case 56:case 57:if(inTemplate)return res(null);errors.strictNumericEscape(pos-1,lineStart,curLine);default:if(ch>=48&&ch<=55){const startPos=pos-1;let octalStr=input.slice(startPos,pos+2).match(/^[0-7]+/)[0],octal=parseInt(octalStr,8);octal>255&&(octalStr=octalStr.slice(0,-1),octal=parseInt(octalStr,8)),pos+=octalStr.length-1;const next=input.charCodeAt(pos);if("0"!==octalStr||56===next||57===next){if(inTemplate)return res(null);errors.strictNumericEscape(startPos,lineStart,curLine);}return res(String.fromCharCode(octal))}return res(String.fromCharCode(ch))}}function readHexChar(input,pos,lineStart,curLine,len,forceLen,throwOnInvalid,errors){const initialPos=pos;let n;return ({n,pos}=readInt(input,pos,lineStart,curLine,16,len,forceLen,!1,errors,!throwOnInvalid)),null===n&&(throwOnInvalid?errors.invalidEscapeSequence(initialPos,lineStart,curLine):pos=initialPos-1),{code:n,pos}}function readInt(input,pos,lineStart,curLine,radix,len,forceLen,allowNumSeparator,errors,bailOnError){const start=pos,forbiddenSiblings=16===radix?forbiddenNumericSeparatorSiblings.hex:forbiddenNumericSeparatorSiblings.decBinOct,isAllowedSibling=16===radix?isAllowedNumericSeparatorSibling.hex:10===radix?isAllowedNumericSeparatorSibling.dec:8===radix?isAllowedNumericSeparatorSibling.oct:isAllowedNumericSeparatorSibling.bin;let invalid=!1,total=0;for(let i=0,e=null==len?1/0:len;i<e;++i){const code=input.charCodeAt(pos);let val;if(95!==code||"bail"===allowNumSeparator){if(val=code>=97?code-97+10:code>=65?code-65+10:_isDigit(code)?code-48:1/0,val>=radix){if(val<=9&&bailOnError)return {n:null,pos};if(val<=9&&errors.invalidDigit(pos,lineStart,curLine,radix))val=0;else {if(!forceLen)break;val=0,invalid=!0;}}++pos,total=total*radix+val;}else {const prev=input.charCodeAt(pos-1),next=input.charCodeAt(pos+1);if(allowNumSeparator){if(Number.isNaN(next)||!isAllowedSibling(next)||forbiddenSiblings.has(prev)||forbiddenSiblings.has(next)){if(bailOnError)return {n:null,pos};errors.unexpectedNumericSeparator(pos,lineStart,curLine);}}else {if(bailOnError)return {n:null,pos};errors.numericSeparatorInEscapeSequence(pos,lineStart,curLine);}++pos;}}return pos===start||null!=len&&pos-start!==len||invalid?{n:null,pos}:{n:total,pos}}function readCodePoint(input,pos,lineStart,curLine,throwOnInvalid,errors){let code;if(123===input.charCodeAt(pos)){if(++pos,({code,pos}=readHexChar(input,pos,lineStart,curLine,input.indexOf("}",pos)-pos,!0,throwOnInvalid,errors)),++pos,null!==code&&code>1114111){if(!throwOnInvalid)return {code:null,pos};errors.invalidCodePoint(pos,lineStart,curLine);}}else ({code,pos}=readHexChar(input,pos,lineStart,curLine,4,!1,throwOnInvalid,errors));return {code,pos}}},"./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/identifier.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.isIdentifierChar=isIdentifierChar,exports.isIdentifierName=function(name){let isFirst=!0;for(let i=0;i<name.length;i++){let cp=name.charCodeAt(i);if(55296==(64512&cp)&&i+1<name.length){const trail=name.charCodeAt(++i);56320==(64512&trail)&&(cp=65536+((1023&cp)<<10)+(1023&trail));}if(isFirst){if(isFirst=!1,!isIdentifierStart(cp))return !1}else if(!isIdentifierChar(cp))return !1}return !isFirst},exports.isIdentifierStart=isIdentifierStart;let nonASCIIidentifierStartChars="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",nonASCIIidentifierChars="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";const nonASCIIidentifierStart=new RegExp("["+nonASCIIidentifierStartChars+"]"),nonASCIIidentifier=new RegExp("["+nonASCIIidentifierStartChars+nonASCIIidentifierChars+"]");nonASCIIidentifierStartChars=nonASCIIidentifierChars=null;const astralIdentifierStartCodes=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191],astralIdentifierCodes=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];function isInAstralSet(code,set){let pos=65536;for(let i=0,length=set.length;i<length;i+=2){if(pos+=set[i],pos>code)return !1;if(pos+=set[i+1],pos>=code)return !0}return !1}function isIdentifierStart(code){return code<65?36===code:code<=90||(code<97?95===code:code<=122||(code<=65535?code>=170&&nonASCIIidentifierStart.test(String.fromCharCode(code)):isInAstralSet(code,astralIdentifierStartCodes)))}function isIdentifierChar(code){return code<48?36===code:code<58||!(code<65)&&(code<=90||(code<97?95===code:code<=122||(code<=65535?code>=170&&nonASCIIidentifier.test(String.fromCharCode(code)):isInAstralSet(code,astralIdentifierStartCodes)||isInAstralSet(code,astralIdentifierCodes))))}},"./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"isIdentifierChar",{enumerable:!0,get:function(){return _identifier.isIdentifierChar}}),Object.defineProperty(exports,"isIdentifierName",{enumerable:!0,get:function(){return _identifier.isIdentifierName}}),Object.defineProperty(exports,"isIdentifierStart",{enumerable:!0,get:function(){return _identifier.isIdentifierStart}}),Object.defineProperty(exports,"isKeyword",{enumerable:!0,get:function(){return _keyword.isKeyword}}),Object.defineProperty(exports,"isReservedWord",{enumerable:!0,get:function(){return _keyword.isReservedWord}}),Object.defineProperty(exports,"isStrictBindOnlyReservedWord",{enumerable:!0,get:function(){return _keyword.isStrictBindOnlyReservedWord}}),Object.defineProperty(exports,"isStrictBindReservedWord",{enumerable:!0,get:function(){return _keyword.isStrictBindReservedWord}}),Object.defineProperty(exports,"isStrictReservedWord",{enumerable:!0,get:function(){return _keyword.isStrictReservedWord}});var _identifier=__webpack_require__("./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/identifier.js"),_keyword=__webpack_require__("./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/keyword.js");},"./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/keyword.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.isKeyword=function(word){return keywords.has(word)},exports.isReservedWord=isReservedWord,exports.isStrictBindOnlyReservedWord=isStrictBindOnlyReservedWord,exports.isStrictBindReservedWord=function(word,inModule){return isStrictReservedWord(word,inModule)||isStrictBindOnlyReservedWord(word)},exports.isStrictReservedWord=isStrictReservedWord;const reservedWords_strict=["implements","interface","let","package","private","protected","public","static","yield"],reservedWords_strictBind=["eval","arguments"],keywords=new Set(["break","case","catch","continue","debugger","default","do","else","finally","for","function","if","return","switch","throw","try","var","const","while","with","new","this","super","class","extends","export","import","null","true","false","in","instanceof","typeof","void","delete"]),reservedWordsStrictSet=new Set(reservedWords_strict),reservedWordsStrictBindSet=new Set(reservedWords_strictBind);function isReservedWord(word,inModule){return inModule&&"await"===word||"enum"===word}function isStrictReservedWord(word,inModule){return isReservedWord(word,inModule)||reservedWordsStrictSet.has(word)}function isStrictBindOnlyReservedWord(word){return reservedWordsStrictBindSet.has(word)}},"./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/find-suggestion.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.findSuggestion=function(str,arr){const distances=arr.map((el=>function(a,b){let i,j,t=[],u=[];const m=a.length,n=b.length;if(!m)return n;if(!n)return m;for(j=0;j<=n;j++)t[j]=j;for(i=1;i<=m;i++){for(u=[i],j=1;j<=n;j++)u[j]=a[i-1]===b[j-1]?t[j-1]:min(t[j-1],t[j],u[j-1])+1;t=u;}return u[n]}(el,str)));return arr[distances.indexOf(min(...distances))]};const{min}=Math;},"./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"OptionValidator",{enumerable:!0,get:function(){return _validator.OptionValidator}}),Object.defineProperty(exports,"findSuggestion",{enumerable:!0,get:function(){return _findSuggestion.findSuggestion}});var _validator=__webpack_require__("./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/validator.js"),_findSuggestion=__webpack_require__("./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");},"./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/validator.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.OptionValidator=void 0;var _findSuggestion=__webpack_require__("./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/find-suggestion.js");exports.OptionValidator=class{constructor(descriptor){this.descriptor=descriptor;}validateTopLevelOptions(options,TopLevelOptionShape){const validOptionNames=Object.keys(TopLevelOptionShape);for(const option of Object.keys(options))if(!validOptionNames.includes(option))throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.\n- Did you mean '${(0, _findSuggestion.findSuggestion)(option,validOptionNames)}'?`))}validateBooleanOption(name,value,defaultValue){return void 0===value?defaultValue:(this.invariant("boolean"==typeof value,`'${name}' option must be a boolean.`),value)}validateStringOption(name,value,defaultValue){return void 0===value?defaultValue:(this.invariant("string"==typeof value,`'${name}' option must be a string.`),value)}invariant(condition,message){if(!condition)throw new Error(this.formatMessage(message))}formatMessage(message){return `${this.descriptor}: ${message}`}};},"./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/helpers-generated.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _template=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js");function helper(minVersion,source){return Object.freeze({minVersion,ast:()=>_template.default.program.ast(source,{preserveComments:!0})})}var _default=Object.freeze({AsyncGenerator:helper("7.0.0-beta.0",'import OverloadYield from"OverloadYield";export default function AsyncGenerator(gen){var front,back;function resume(key,arg){try{var result=gen[key](arg),value=result.value,overloaded=value instanceof OverloadYield;Promise.resolve(overloaded?value.v:value).then((function(arg){if(overloaded){var nextKey="return"===key?"return":"next";if(!value.k||arg.done)return resume(nextKey,arg);arg=gen[nextKey](arg).value}settle(result.done?"return":"normal",arg)}),(function(err){resume("throw",err)}))}catch(err){settle("throw",err)}}function settle(type,value){switch(type){case"return":front.resolve({value:value,done:!0});break;case"throw":front.reject(value);break;default:front.resolve({value:value,done:!1})}(front=front.next)?resume(front.key,front.arg):back=null}this._invoke=function(key,arg){return new Promise((function(resolve,reject){var request={key:key,arg:arg,resolve:resolve,reject:reject,next:null};back?back=back.next=request:(front=back=request,resume(key,arg))}))},"function"!=typeof gen.return&&(this.return=void 0)}AsyncGenerator.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},AsyncGenerator.prototype.next=function(arg){return this._invoke("next",arg)},AsyncGenerator.prototype.throw=function(arg){return this._invoke("throw",arg)},AsyncGenerator.prototype.return=function(arg){return this._invoke("return",arg)};'),OverloadYield:helper("7.18.14","export default function _OverloadYield(value,kind){this.v=value,this.k=kind}"),applyDecs:helper("7.17.8",'function old_createMetadataMethodsForProperty(metadataMap,kind,property,decoratorFinishedRef){return{getMetadata:function(key){old_assertNotFinished(decoratorFinishedRef,"getMetadata"),old_assertMetadataKey(key);var metadataForKey=metadataMap[key];if(void 0!==metadataForKey)if(1===kind){var pub=metadataForKey.public;if(void 0!==pub)return pub[property]}else if(2===kind){var priv=metadataForKey.private;if(void 0!==priv)return priv.get(property)}else if(Object.hasOwnProperty.call(metadataForKey,"constructor"))return metadataForKey.constructor},setMetadata:function(key,value){old_assertNotFinished(decoratorFinishedRef,"setMetadata"),old_assertMetadataKey(key);var metadataForKey=metadataMap[key];if(void 0===metadataForKey&&(metadataForKey=metadataMap[key]={}),1===kind){var pub=metadataForKey.public;void 0===pub&&(pub=metadataForKey.public={}),pub[property]=value}else if(2===kind){var priv=metadataForKey.priv;void 0===priv&&(priv=metadataForKey.private=new Map),priv.set(property,value)}else metadataForKey.constructor=value}}}function old_convertMetadataMapToFinal(obj,metadataMap){var parentMetadataMap=obj[Symbol.metadata||Symbol.for("Symbol.metadata")],metadataKeys=Object.getOwnPropertySymbols(metadataMap);if(0!==metadataKeys.length){for(var i=0;i<metadataKeys.length;i++){var key=metadataKeys[i],metaForKey=metadataMap[key],parentMetaForKey=parentMetadataMap?parentMetadataMap[key]:null,pub=metaForKey.public,parentPub=parentMetaForKey?parentMetaForKey.public:null;pub&&parentPub&&Object.setPrototypeOf(pub,parentPub);var priv=metaForKey.private;if(priv){var privArr=Array.from(priv.values()),parentPriv=parentMetaForKey?parentMetaForKey.private:null;parentPriv&&(privArr=privArr.concat(parentPriv)),metaForKey.private=privArr}parentMetaForKey&&Object.setPrototypeOf(metaForKey,parentMetaForKey)}parentMetadataMap&&Object.setPrototypeOf(metadataMap,parentMetadataMap),obj[Symbol.metadata||Symbol.for("Symbol.metadata")]=metadataMap}}function old_createAddInitializerMethod(initializers,decoratorFinishedRef){return function(initializer){old_assertNotFinished(decoratorFinishedRef,"addInitializer"),old_assertCallable(initializer,"An initializer"),initializers.push(initializer)}}function old_memberDec(dec,name,desc,metadataMap,initializers,kind,isStatic,isPrivate,value){var kindStr;switch(kind){case 1:kindStr="accessor";break;case 2:kindStr="method";break;case 3:kindStr="getter";break;case 4:kindStr="setter";break;default:kindStr="field"}var metadataKind,metadataName,ctx={kind:kindStr,name:isPrivate?"#"+name:name,isStatic:isStatic,isPrivate:isPrivate},decoratorFinishedRef={v:!1};if(0!==kind&&(ctx.addInitializer=old_createAddInitializerMethod(initializers,decoratorFinishedRef)),isPrivate){metadataKind=2,metadataName=Symbol(name);var access={};0===kind?(access.get=desc.get,access.set=desc.set):2===kind?access.get=function(){return desc.value}:(1!==kind&&3!==kind||(access.get=function(){return desc.get.call(this)}),1!==kind&&4!==kind||(access.set=function(v){desc.set.call(this,v)})),ctx.access=access}else metadataKind=1,metadataName=name;try{return dec(value,Object.assign(ctx,old_createMetadataMethodsForProperty(metadataMap,metadataKind,metadataName,decoratorFinishedRef)))}finally{decoratorFinishedRef.v=!0}}function old_assertNotFinished(decoratorFinishedRef,fnName){if(decoratorFinishedRef.v)throw new Error("attempted to call "+fnName+" after decoration was finished")}function old_assertMetadataKey(key){if("symbol"!=typeof key)throw new TypeError("Metadata keys must be symbols, received: "+key)}function old_assertCallable(fn,hint){if("function"!=typeof fn)throw new TypeError(hint+" must be a function")}function old_assertValidReturnValue(kind,value){var type=typeof value;if(1===kind){if("object"!==type||null===value)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==value.get&&old_assertCallable(value.get,"accessor.get"),void 0!==value.set&&old_assertCallable(value.set,"accessor.set"),void 0!==value.init&&old_assertCallable(value.init,"accessor.init"),void 0!==value.initializer&&old_assertCallable(value.initializer,"accessor.initializer")}else if("function"!==type){var hint;throw hint=0===kind?"field":10===kind?"class":"method",new TypeError(hint+" decorators must return a function or void 0")}}function old_getInit(desc){var initializer;return null==(initializer=desc.init)&&(initializer=desc.initializer)&&"undefined"!=typeof console&&console.warn(".initializer has been renamed to .init as of March 2022"),initializer}function old_applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,metadataMap,initializers){var desc,initializer,value,newValue,get,set,decs=decInfo[0];if(isPrivate?desc=0===kind||1===kind?{get:decInfo[3],set:decInfo[4]}:3===kind?{get:decInfo[3]}:4===kind?{set:decInfo[3]}:{value:decInfo[3]}:0!==kind&&(desc=Object.getOwnPropertyDescriptor(base,name)),1===kind?value={get:desc.get,set:desc.set}:2===kind?value=desc.value:3===kind?value=desc.get:4===kind&&(value=desc.set),"function"==typeof decs)void 0!==(newValue=old_memberDec(decs,name,desc,metadataMap,initializers,kind,isStatic,isPrivate,value))&&(old_assertValidReturnValue(kind,newValue),0===kind?initializer=newValue:1===kind?(initializer=old_getInit(newValue),get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue);else for(var i=decs.length-1;i>=0;i--){var newInit;if(void 0!==(newValue=old_memberDec(decs[i],name,desc,metadataMap,initializers,kind,isStatic,isPrivate,value)))old_assertValidReturnValue(kind,newValue),0===kind?newInit=newValue:1===kind?(newInit=old_getInit(newValue),get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue,void 0!==newInit&&(void 0===initializer?initializer=newInit:"function"==typeof initializer?initializer=[initializer,newInit]:initializer.push(newInit))}if(0===kind||1===kind){if(void 0===initializer)initializer=function(instance,init){return init};else if("function"!=typeof initializer){var ownInitializers=initializer;initializer=function(instance,init){for(var value=init,i=0;i<ownInitializers.length;i++)value=ownInitializers[i].call(instance,value);return value}}else{var originalInitializer=initializer;initializer=function(instance,init){return originalInitializer.call(instance,init)}}ret.push(initializer)}0!==kind&&(1===kind?(desc.get=value.get,desc.set=value.set):2===kind?desc.value=value:3===kind?desc.get=value:4===kind&&(desc.set=value),isPrivate?1===kind?(ret.push((function(instance,args){return value.get.call(instance,args)})),ret.push((function(instance,args){return value.set.call(instance,args)}))):2===kind?ret.push(value):ret.push((function(instance,args){return value.call(instance,args)})):Object.defineProperty(base,name,desc))}function old_applyMemberDecs(ret,Class,protoMetadataMap,staticMetadataMap,decInfos){for(var protoInitializers,staticInitializers,existingProtoNonFields=new Map,existingStaticNonFields=new Map,i=0;i<decInfos.length;i++){var decInfo=decInfos[i];if(Array.isArray(decInfo)){var base,metadataMap,initializers,kind=decInfo[1],name=decInfo[2],isPrivate=decInfo.length>3,isStatic=kind>=5;if(isStatic?(base=Class,metadataMap=staticMetadataMap,0!==(kind-=5)&&(initializers=staticInitializers=staticInitializers||[])):(base=Class.prototype,metadataMap=protoMetadataMap,0!==kind&&(initializers=protoInitializers=protoInitializers||[])),0!==kind&&!isPrivate){var existingNonFields=isStatic?existingStaticNonFields:existingProtoNonFields,existingKind=existingNonFields.get(name)||0;if(!0===existingKind||3===existingKind&&4!==kind||4===existingKind&&3!==kind)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+name);!existingKind&&kind>2?existingNonFields.set(name,kind):existingNonFields.set(name,!0)}old_applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,metadataMap,initializers)}}old_pushInitializers(ret,protoInitializers),old_pushInitializers(ret,staticInitializers)}function old_pushInitializers(ret,initializers){initializers&&ret.push((function(instance){for(var i=0;i<initializers.length;i++)initializers[i].call(instance);return instance}))}function old_applyClassDecs(ret,targetClass,metadataMap,classDecs){if(classDecs.length>0){for(var initializers=[],newClass=targetClass,name=targetClass.name,i=classDecs.length-1;i>=0;i--){var decoratorFinishedRef={v:!1};try{var ctx=Object.assign({kind:"class",name:name,addInitializer:old_createAddInitializerMethod(initializers,decoratorFinishedRef)},old_createMetadataMethodsForProperty(metadataMap,0,name,decoratorFinishedRef)),nextNewClass=classDecs[i](newClass,ctx)}finally{decoratorFinishedRef.v=!0}void 0!==nextNewClass&&(old_assertValidReturnValue(10,nextNewClass),newClass=nextNewClass)}ret.push(newClass,(function(){for(var i=0;i<initializers.length;i++)initializers[i].call(newClass)}))}}export default function applyDecs(targetClass,memberDecs,classDecs){var ret=[],staticMetadataMap={},protoMetadataMap={};return old_applyMemberDecs(ret,targetClass,protoMetadataMap,staticMetadataMap,memberDecs),old_convertMetadataMapToFinal(targetClass.prototype,protoMetadataMap),old_applyClassDecs(ret,targetClass,staticMetadataMap,classDecs),old_convertMetadataMapToFinal(targetClass,staticMetadataMap),ret}'),applyDecs2203:helper("7.19.0",'function applyDecs2203Factory(){function createAddInitializerMethod(initializers,decoratorFinishedRef){return function(initializer){!function(decoratorFinishedRef,fnName){if(decoratorFinishedRef.v)throw new Error("attempted to call "+fnName+" after decoration was finished")}(decoratorFinishedRef,"addInitializer"),assertCallable(initializer,"An initializer"),initializers.push(initializer)}}function memberDec(dec,name,desc,initializers,kind,isStatic,isPrivate,value){var kindStr;switch(kind){case 1:kindStr="accessor";break;case 2:kindStr="method";break;case 3:kindStr="getter";break;case 4:kindStr="setter";break;default:kindStr="field"}var get,set,ctx={kind:kindStr,name:isPrivate?"#"+name:name,static:isStatic,private:isPrivate},decoratorFinishedRef={v:!1};0!==kind&&(ctx.addInitializer=createAddInitializerMethod(initializers,decoratorFinishedRef)),0===kind?isPrivate?(get=desc.get,set=desc.set):(get=function(){return this[name]},set=function(v){this[name]=v}):2===kind?get=function(){return desc.value}:(1!==kind&&3!==kind||(get=function(){return desc.get.call(this)}),1!==kind&&4!==kind||(set=function(v){desc.set.call(this,v)})),ctx.access=get&&set?{get:get,set:set}:get?{get:get}:{set:set};try{return dec(value,ctx)}finally{decoratorFinishedRef.v=!0}}function assertCallable(fn,hint){if("function"!=typeof fn)throw new TypeError(hint+" must be a function")}function assertValidReturnValue(kind,value){var type=typeof value;if(1===kind){if("object"!==type||null===value)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==value.get&&assertCallable(value.get,"accessor.get"),void 0!==value.set&&assertCallable(value.set,"accessor.set"),void 0!==value.init&&assertCallable(value.init,"accessor.init")}else if("function"!==type){var hint;throw hint=0===kind?"field":10===kind?"class":"method",new TypeError(hint+" decorators must return a function or void 0")}}function applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers){var desc,init,value,newValue,get,set,decs=decInfo[0];if(isPrivate?desc=0===kind||1===kind?{get:decInfo[3],set:decInfo[4]}:3===kind?{get:decInfo[3]}:4===kind?{set:decInfo[3]}:{value:decInfo[3]}:0!==kind&&(desc=Object.getOwnPropertyDescriptor(base,name)),1===kind?value={get:desc.get,set:desc.set}:2===kind?value=desc.value:3===kind?value=desc.get:4===kind&&(value=desc.set),"function"==typeof decs)void 0!==(newValue=memberDec(decs,name,desc,initializers,kind,isStatic,isPrivate,value))&&(assertValidReturnValue(kind,newValue),0===kind?init=newValue:1===kind?(init=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue);else for(var i=decs.length-1;i>=0;i--){var newInit;if(void 0!==(newValue=memberDec(decs[i],name,desc,initializers,kind,isStatic,isPrivate,value)))assertValidReturnValue(kind,newValue),0===kind?newInit=newValue:1===kind?(newInit=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue,void 0!==newInit&&(void 0===init?init=newInit:"function"==typeof init?init=[init,newInit]:init.push(newInit))}if(0===kind||1===kind){if(void 0===init)init=function(instance,init){return init};else if("function"!=typeof init){var ownInitializers=init;init=function(instance,init){for(var value=init,i=0;i<ownInitializers.length;i++)value=ownInitializers[i].call(instance,value);return value}}else{var originalInitializer=init;init=function(instance,init){return originalInitializer.call(instance,init)}}ret.push(init)}0!==kind&&(1===kind?(desc.get=value.get,desc.set=value.set):2===kind?desc.value=value:3===kind?desc.get=value:4===kind&&(desc.set=value),isPrivate?1===kind?(ret.push((function(instance,args){return value.get.call(instance,args)})),ret.push((function(instance,args){return value.set.call(instance,args)}))):2===kind?ret.push(value):ret.push((function(instance,args){return value.call(instance,args)})):Object.defineProperty(base,name,desc))}function pushInitializers(ret,initializers){initializers&&ret.push((function(instance){for(var i=0;i<initializers.length;i++)initializers[i].call(instance);return instance}))}return function(targetClass,memberDecs,classDecs){var ret=[];return function(ret,Class,decInfos){for(var protoInitializers,staticInitializers,existingProtoNonFields=new Map,existingStaticNonFields=new Map,i=0;i<decInfos.length;i++){var decInfo=decInfos[i];if(Array.isArray(decInfo)){var base,initializers,kind=decInfo[1],name=decInfo[2],isPrivate=decInfo.length>3,isStatic=kind>=5;if(isStatic?(base=Class,0!=(kind-=5)&&(initializers=staticInitializers=staticInitializers||[])):(base=Class.prototype,0!==kind&&(initializers=protoInitializers=protoInitializers||[])),0!==kind&&!isPrivate){var existingNonFields=isStatic?existingStaticNonFields:existingProtoNonFields,existingKind=existingNonFields.get(name)||0;if(!0===existingKind||3===existingKind&&4!==kind||4===existingKind&&3!==kind)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+name);!existingKind&&kind>2?existingNonFields.set(name,kind):existingNonFields.set(name,!0)}applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers)}}pushInitializers(ret,protoInitializers),pushInitializers(ret,staticInitializers)}(ret,targetClass,memberDecs),function(ret,targetClass,classDecs){if(classDecs.length>0){for(var initializers=[],newClass=targetClass,name=targetClass.name,i=classDecs.length-1;i>=0;i--){var decoratorFinishedRef={v:!1};try{var nextNewClass=classDecs[i](newClass,{kind:"class",name:name,addInitializer:createAddInitializerMethod(initializers,decoratorFinishedRef)})}finally{decoratorFinishedRef.v=!0}void 0!==nextNewClass&&(assertValidReturnValue(10,nextNewClass),newClass=nextNewClass)}ret.push(newClass,(function(){for(var i=0;i<initializers.length;i++)initializers[i].call(newClass)}))}}(ret,targetClass,classDecs),ret}}var applyDecs2203Impl;export default function applyDecs2203(targetClass,memberDecs,classDecs){return(applyDecs2203Impl=applyDecs2203Impl||applyDecs2203Factory())(targetClass,memberDecs,classDecs)}'),applyDecs2203R:helper("7.20.0",'function applyDecs2203RFactory(){function createAddInitializerMethod(initializers,decoratorFinishedRef){return function(initializer){!function(decoratorFinishedRef,fnName){if(decoratorFinishedRef.v)throw new Error("attempted to call "+fnName+" after decoration was finished")}(decoratorFinishedRef,"addInitializer"),assertCallable(initializer,"An initializer"),initializers.push(initializer)}}function memberDec(dec,name,desc,initializers,kind,isStatic,isPrivate,value){var kindStr;switch(kind){case 1:kindStr="accessor";break;case 2:kindStr="method";break;case 3:kindStr="getter";break;case 4:kindStr="setter";break;default:kindStr="field"}var get,set,ctx={kind:kindStr,name:isPrivate?"#"+name:name,static:isStatic,private:isPrivate},decoratorFinishedRef={v:!1};0!==kind&&(ctx.addInitializer=createAddInitializerMethod(initializers,decoratorFinishedRef)),0===kind?isPrivate?(get=desc.get,set=desc.set):(get=function(){return this[name]},set=function(v){this[name]=v}):2===kind?get=function(){return desc.value}:(1!==kind&&3!==kind||(get=function(){return desc.get.call(this)}),1!==kind&&4!==kind||(set=function(v){desc.set.call(this,v)})),ctx.access=get&&set?{get:get,set:set}:get?{get:get}:{set:set};try{return dec(value,ctx)}finally{decoratorFinishedRef.v=!0}}function assertCallable(fn,hint){if("function"!=typeof fn)throw new TypeError(hint+" must be a function")}function assertValidReturnValue(kind,value){var type=typeof value;if(1===kind){if("object"!==type||null===value)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==value.get&&assertCallable(value.get,"accessor.get"),void 0!==value.set&&assertCallable(value.set,"accessor.set"),void 0!==value.init&&assertCallable(value.init,"accessor.init")}else if("function"!==type){var hint;throw hint=0===kind?"field":10===kind?"class":"method",new TypeError(hint+" decorators must return a function or void 0")}}function applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers){var desc,init,value,newValue,get,set,decs=decInfo[0];if(isPrivate?desc=0===kind||1===kind?{get:decInfo[3],set:decInfo[4]}:3===kind?{get:decInfo[3]}:4===kind?{set:decInfo[3]}:{value:decInfo[3]}:0!==kind&&(desc=Object.getOwnPropertyDescriptor(base,name)),1===kind?value={get:desc.get,set:desc.set}:2===kind?value=desc.value:3===kind?value=desc.get:4===kind&&(value=desc.set),"function"==typeof decs)void 0!==(newValue=memberDec(decs,name,desc,initializers,kind,isStatic,isPrivate,value))&&(assertValidReturnValue(kind,newValue),0===kind?init=newValue:1===kind?(init=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue);else for(var i=decs.length-1;i>=0;i--){var newInit;if(void 0!==(newValue=memberDec(decs[i],name,desc,initializers,kind,isStatic,isPrivate,value)))assertValidReturnValue(kind,newValue),0===kind?newInit=newValue:1===kind?(newInit=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue,void 0!==newInit&&(void 0===init?init=newInit:"function"==typeof init?init=[init,newInit]:init.push(newInit))}if(0===kind||1===kind){if(void 0===init)init=function(instance,init){return init};else if("function"!=typeof init){var ownInitializers=init;init=function(instance,init){for(var value=init,i=0;i<ownInitializers.length;i++)value=ownInitializers[i].call(instance,value);return value}}else{var originalInitializer=init;init=function(instance,init){return originalInitializer.call(instance,init)}}ret.push(init)}0!==kind&&(1===kind?(desc.get=value.get,desc.set=value.set):2===kind?desc.value=value:3===kind?desc.get=value:4===kind&&(desc.set=value),isPrivate?1===kind?(ret.push((function(instance,args){return value.get.call(instance,args)})),ret.push((function(instance,args){return value.set.call(instance,args)}))):2===kind?ret.push(value):ret.push((function(instance,args){return value.call(instance,args)})):Object.defineProperty(base,name,desc))}function applyMemberDecs(Class,decInfos){for(var protoInitializers,staticInitializers,ret=[],existingProtoNonFields=new Map,existingStaticNonFields=new Map,i=0;i<decInfos.length;i++){var decInfo=decInfos[i];if(Array.isArray(decInfo)){var base,initializers,kind=decInfo[1],name=decInfo[2],isPrivate=decInfo.length>3,isStatic=kind>=5;if(isStatic?(base=Class,0!==(kind-=5)&&(initializers=staticInitializers=staticInitializers||[])):(base=Class.prototype,0!==kind&&(initializers=protoInitializers=protoInitializers||[])),0!==kind&&!isPrivate){var existingNonFields=isStatic?existingStaticNonFields:existingProtoNonFields,existingKind=existingNonFields.get(name)||0;if(!0===existingKind||3===existingKind&&4!==kind||4===existingKind&&3!==kind)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+name);!existingKind&&kind>2?existingNonFields.set(name,kind):existingNonFields.set(name,!0)}applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers)}}return pushInitializers(ret,protoInitializers),pushInitializers(ret,staticInitializers),ret}function pushInitializers(ret,initializers){initializers&&ret.push((function(instance){for(var i=0;i<initializers.length;i++)initializers[i].call(instance);return instance}))}return function(targetClass,memberDecs,classDecs){return{e:applyMemberDecs(targetClass,memberDecs),get c(){return function(targetClass,classDecs){if(classDecs.length>0){for(var initializers=[],newClass=targetClass,name=targetClass.name,i=classDecs.length-1;i>=0;i--){var decoratorFinishedRef={v:!1};try{var nextNewClass=classDecs[i](newClass,{kind:"class",name:name,addInitializer:createAddInitializerMethod(initializers,decoratorFinishedRef)})}finally{decoratorFinishedRef.v=!0}void 0!==nextNewClass&&(assertValidReturnValue(10,nextNewClass),newClass=nextNewClass)}return[newClass,function(){for(var i=0;i<initializers.length;i++)initializers[i].call(newClass)}]}}(targetClass,classDecs)}}}}export default function applyDecs2203R(targetClass,memberDecs,classDecs){return(applyDecs2203R=applyDecs2203RFactory())(targetClass,memberDecs,classDecs)}'),applyDecs2301:helper("7.21.0",'import checkInRHS from"checkInRHS";function createAddInitializerMethod(initializers,decoratorFinishedRef){return function(initializer){assertNotFinished(decoratorFinishedRef,"addInitializer"),assertCallable(initializer,"An initializer"),initializers.push(initializer)}}function assertInstanceIfPrivate(has,target){if(!has(target))throw new TypeError("Attempted to access private element on non-instance")}function memberDec(dec,name,desc,initializers,kind,isStatic,isPrivate,value,hasPrivateBrand){var kindStr;switch(kind){case 1:kindStr="accessor";break;case 2:kindStr="method";break;case 3:kindStr="getter";break;case 4:kindStr="setter";break;default:kindStr="field"}var get,set,ctx={kind:kindStr,name:isPrivate?"#"+name:name,static:isStatic,private:isPrivate},decoratorFinishedRef={v:!1};if(0!==kind&&(ctx.addInitializer=createAddInitializerMethod(initializers,decoratorFinishedRef)),isPrivate||0!==kind&&2!==kind)if(2===kind)get=function(target){return assertInstanceIfPrivate(hasPrivateBrand,target),desc.value};else{var t=0===kind||1===kind;(t||3===kind)&&(get=isPrivate?function(target){return assertInstanceIfPrivate(hasPrivateBrand,target),desc.get.call(target)}:function(target){return desc.get.call(target)}),(t||4===kind)&&(set=isPrivate?function(target,value){assertInstanceIfPrivate(hasPrivateBrand,target),desc.set.call(target,value)}:function(target,value){desc.set.call(target,value)})}else get=function(target){return target[name]},0===kind&&(set=function(target,v){target[name]=v});var has=isPrivate?hasPrivateBrand.bind():function(target){return name in target};ctx.access=get&&set?{get:get,set:set,has:has}:get?{get:get,has:has}:{set:set,has:has};try{return dec(value,ctx)}finally{decoratorFinishedRef.v=!0}}function assertNotFinished(decoratorFinishedRef,fnName){if(decoratorFinishedRef.v)throw new Error("attempted to call "+fnName+" after decoration was finished")}function assertCallable(fn,hint){if("function"!=typeof fn)throw new TypeError(hint+" must be a function")}function assertValidReturnValue(kind,value){var type=typeof value;if(1===kind){if("object"!==type||null===value)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==value.get&&assertCallable(value.get,"accessor.get"),void 0!==value.set&&assertCallable(value.set,"accessor.set"),void 0!==value.init&&assertCallable(value.init,"accessor.init")}else if("function"!==type){var hint;throw hint=0===kind?"field":10===kind?"class":"method",new TypeError(hint+" decorators must return a function or void 0")}}function curryThis1(fn){return function(){return fn(this)}}function curryThis2(fn){return function(value){fn(this,value)}}function applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers,hasPrivateBrand){var desc,init,value,newValue,get,set,decs=decInfo[0];if(isPrivate?desc=0===kind||1===kind?{get:curryThis1(decInfo[3]),set:curryThis2(decInfo[4])}:3===kind?{get:decInfo[3]}:4===kind?{set:decInfo[3]}:{value:decInfo[3]}:0!==kind&&(desc=Object.getOwnPropertyDescriptor(base,name)),1===kind?value={get:desc.get,set:desc.set}:2===kind?value=desc.value:3===kind?value=desc.get:4===kind&&(value=desc.set),"function"==typeof decs)void 0!==(newValue=memberDec(decs,name,desc,initializers,kind,isStatic,isPrivate,value,hasPrivateBrand))&&(assertValidReturnValue(kind,newValue),0===kind?init=newValue:1===kind?(init=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue);else for(var i=decs.length-1;i>=0;i--){var newInit;if(void 0!==(newValue=memberDec(decs[i],name,desc,initializers,kind,isStatic,isPrivate,value,hasPrivateBrand)))assertValidReturnValue(kind,newValue),0===kind?newInit=newValue:1===kind?(newInit=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue,void 0!==newInit&&(void 0===init?init=newInit:"function"==typeof init?init=[init,newInit]:init.push(newInit))}if(0===kind||1===kind){if(void 0===init)init=function(instance,init){return init};else if("function"!=typeof init){var ownInitializers=init;init=function(instance,init){for(var value=init,i=0;i<ownInitializers.length;i++)value=ownInitializers[i].call(instance,value);return value}}else{var originalInitializer=init;init=function(instance,init){return originalInitializer.call(instance,init)}}ret.push(init)}0!==kind&&(1===kind?(desc.get=value.get,desc.set=value.set):2===kind?desc.value=value:3===kind?desc.get=value:4===kind&&(desc.set=value),isPrivate?1===kind?(ret.push((function(instance,args){return value.get.call(instance,args)})),ret.push((function(instance,args){return value.set.call(instance,args)}))):2===kind?ret.push(value):ret.push((function(instance,args){return value.call(instance,args)})):Object.defineProperty(base,name,desc))}function applyMemberDecs(Class,decInfos,instanceBrand){for(var protoInitializers,staticInitializers,staticBrand,ret=[],existingProtoNonFields=new Map,existingStaticNonFields=new Map,i=0;i<decInfos.length;i++){var decInfo=decInfos[i];if(Array.isArray(decInfo)){var base,initializers,kind=decInfo[1],name=decInfo[2],isPrivate=decInfo.length>3,isStatic=kind>=5,hasPrivateBrand=instanceBrand;if(isStatic?(base=Class,0!==(kind-=5)&&(initializers=staticInitializers=staticInitializers||[]),isPrivate&&!staticBrand&&(staticBrand=function(_){return checkInRHS(_)===Class}),hasPrivateBrand=staticBrand):(base=Class.prototype,0!==kind&&(initializers=protoInitializers=protoInitializers||[])),0!==kind&&!isPrivate){var existingNonFields=isStatic?existingStaticNonFields:existingProtoNonFields,existingKind=existingNonFields.get(name)||0;if(!0===existingKind||3===existingKind&&4!==kind||4===existingKind&&3!==kind)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+name);!existingKind&&kind>2?existingNonFields.set(name,kind):existingNonFields.set(name,!0)}applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers,hasPrivateBrand)}}return pushInitializers(ret,protoInitializers),pushInitializers(ret,staticInitializers),ret}function pushInitializers(ret,initializers){initializers&&ret.push((function(instance){for(var i=0;i<initializers.length;i++)initializers[i].call(instance);return instance}))}function applyClassDecs(targetClass,classDecs){if(classDecs.length>0){for(var initializers=[],newClass=targetClass,name=targetClass.name,i=classDecs.length-1;i>=0;i--){var decoratorFinishedRef={v:!1};try{var nextNewClass=classDecs[i](newClass,{kind:"class",name:name,addInitializer:createAddInitializerMethod(initializers,decoratorFinishedRef)})}finally{decoratorFinishedRef.v=!0}void 0!==nextNewClass&&(assertValidReturnValue(10,nextNewClass),newClass=nextNewClass)}return[newClass,function(){for(var i=0;i<initializers.length;i++)initializers[i].call(newClass)}]}}export default function applyDecs2301(targetClass,memberDecs,classDecs,instanceBrand){return{e:applyMemberDecs(targetClass,memberDecs,instanceBrand),get c(){return applyClassDecs(targetClass,classDecs)}}}'),asyncGeneratorDelegate:helper("7.0.0-beta.0",'import OverloadYield from"OverloadYield";export default function _asyncGeneratorDelegate(inner){var iter={},waiting=!1;function pump(key,value){return waiting=!0,value=new Promise((function(resolve){resolve(inner[key](value))})),{done:!1,value:new OverloadYield(value,1)}}return iter["undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator"]=function(){return this},iter.next=function(value){return waiting?(waiting=!1,value):pump("next",value)},"function"==typeof inner.throw&&(iter.throw=function(value){if(waiting)throw waiting=!1,value;return pump("throw",value)}),"function"==typeof inner.return&&(iter.return=function(value){return waiting?(waiting=!1,value):pump("return",value)}),iter}'),asyncIterator:helper("7.15.9",'export default function _asyncIterator(iterable){var method,async,sync,retry=2;for("undefined"!=typeof Symbol&&(async=Symbol.asyncIterator,sync=Symbol.iterator);retry--;){if(async&&null!=(method=iterable[async]))return method.call(iterable);if(sync&&null!=(method=iterable[sync]))return new AsyncFromSyncIterator(method.call(iterable));async="@@asyncIterator",sync="@@iterator"}throw new TypeError("Object is not async iterable")}function AsyncFromSyncIterator(s){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+" is not an object."));var done=r.done;return Promise.resolve(r.value).then((function(value){return{value:value,done:done}}))}return AsyncFromSyncIterator=function(s){this.s=s,this.n=s.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(value){var ret=this.s.return;return void 0===ret?Promise.resolve({value:value,done:!0}):AsyncFromSyncIteratorContinuation(ret.apply(this.s,arguments))},throw:function(value){var thr=this.s.return;return void 0===thr?Promise.reject(value):AsyncFromSyncIteratorContinuation(thr.apply(this.s,arguments))}},new AsyncFromSyncIterator(s)}'),awaitAsyncGenerator:helper("7.0.0-beta.0",'import OverloadYield from"OverloadYield";export default function _awaitAsyncGenerator(value){return new OverloadYield(value,0)}'),checkInRHS:helper("7.20.5",'export default function _checkInRHS(value){if(Object(value)!==value)throw TypeError("right-hand side of \'in\' should be an object, got "+(null!==value?typeof value:"null"));return value}'),defineAccessor:helper("7.20.7","export default function _defineAccessor(type,obj,key,fn){var desc={configurable:!0,enumerable:!0};return desc[type]=fn,Object.defineProperty(obj,key,desc)}"),iterableToArrayLimit:helper("7.0.0-beta.0",'export default function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null!=_i){var _s,_e,_x,_r,_arr=[],_n=!0,_d=!1;try{if(_x=(_i=_i.call(arr)).next,0===i){if(Object(_i)!==_i)return;_n=!1}else for(;!(_n=(_s=_x.call(_i)).done)&&(_arr.push(_s.value),_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{if(!_n&&null!=_i.return&&(_r=_i.return(),Object(_r)!==_r))return}finally{if(_d)throw _e}}return _arr}}'),iterableToArrayLimitLoose:helper("7.0.0-beta.0",'export default function _iterableToArrayLimitLoose(arr,i){var _i=arr&&("undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"]);if(null!=_i){var _s,_arr=[];for(_i=_i.call(arr);arr.length<i&&!(_s=_i.next()).done;)_arr.push(_s.value);return _arr}}'),jsx:helper("7.0.0-beta.0",'var REACT_ELEMENT_TYPE;export default function _createRawReactElement(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}'),objectSpread2:helper("7.5.0",'import defineProperty from"defineProperty";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}export default function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}'),regeneratorRuntime:helper("7.18.0",'export default function _regeneratorRuntime(){"use strict";\n/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,defineProperty=Object.defineProperty||function(obj,key,desc){obj[key]=desc.value},$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return defineProperty(generator,"_invoke",{value:makeInvokeMethod(innerFn,self,context)}),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;defineProperty(this,"_invoke",{value:function(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}})}function makeInvokeMethod(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}function maybeInvokeDelegate(delegate,context){var methodName=context.method,method=delegate.iterator[methodName];if(undefined===method)return context.delegate=null,"throw"===methodName&&delegate.iterator.return&&(context.method="return",context.arg=undefined,maybeInvokeDelegate(delegate,context),"throw"===context.method)||"return"!==methodName&&(context.method="throw",context.arg=new TypeError("The iterator does not provide a \'"+methodName+"\' method")),ContinueSentinel;var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=undefined,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:undefined,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,defineProperty(Gp,"constructor",{value:GeneratorFunctionPrototype,configurable:!0}),defineProperty(GeneratorFunctionPrototype,"constructor",{value:GeneratorFunction,configurable:!0}),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(val){var object=Object(val),keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method="next",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined)},stop:function(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=undefined),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=undefined),ContinueSentinel}},exports}'),typeof:helper("7.0.0-beta.0",'export default function _typeof(obj){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}'),wrapRegExp:helper("7.19.0",'import setPrototypeOf from"setPrototypeOf";import inherits from"inherits";export default function _wrapRegExp(){_wrapRegExp=function(re,groups){return new BabelRegExp(re,void 0,groups)};var _super=RegExp.prototype,_groups=new WeakMap;function BabelRegExp(re,flags,groups){var _this=new RegExp(re,flags);return _groups.set(_this,groups||_groups.get(re)),setPrototypeOf(_this,BabelRegExp.prototype)}function buildGroups(result,re){var g=_groups.get(re);return Object.keys(g).reduce((function(groups,name){var i=g[name];if("number"==typeof i)groups[name]=result[i];else{for(var k=0;void 0===result[i[k]]&&k+1<i.length;)k++;groups[name]=result[i[k]]}return groups}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(str){var result=_super.exec.call(this,str);if(result){result.groups=buildGroups(result,this);var indices=result.indices;indices&&(indices.groups=buildGroups(indices,this))}return result},BabelRegExp.prototype[Symbol.replace]=function(str,substitution){if("string"==typeof substitution){var groups=_groups.get(this);return _super[Symbol.replace].call(this,str,substitution.replace(/\\$<([^>]+)>/g,(function(_,name){var group=groups[name];return"$"+(Array.isArray(group)?group.join("$"):group)})))}if("function"==typeof substitution){var _this=this;return _super[Symbol.replace].call(this,str,(function(){var args=arguments;return"object"!=typeof args[args.length-1]&&(args=[].slice.call(args)).push(buildGroups(args,_this)),substitution.apply(this,args)}))}return _super[Symbol.replace].call(this,str,substitution)},_wrapRegExp.apply(this,arguments)}')});exports.default=_default;},"./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/helpers.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _template=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js"),_helpersGenerated=__webpack_require__("./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/helpers-generated.js");const helpers=Object.assign({__proto__:null},_helpersGenerated.default);var _default=helpers;exports.default=_default;const helper=minVersion=>tpl=>({minVersion,ast:()=>_template.default.program.ast(tpl)});helpers.AwaitValue=helper("7.0.0-beta.0")`
    export default function _AwaitValue(value) {
      this.wrapped = value;
    }
  `,helpers.wrapAsyncGenerator=helper("7.0.0-beta.0")`
  import AsyncGenerator from "AsyncGenerator";

  export default function _wrapAsyncGenerator(fn) {
    return function () {
      return new AsyncGenerator(fn.apply(this, arguments));
    };
  }
`,helpers.asyncToGenerator=helper("7.0.0-beta.0")`
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  export default function _asyncToGenerator(fn) {
    return function () {
      var self = this, args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }
`,helpers.classCallCheck=helper("7.0.0-beta.0")`
  export default function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
`,helpers.createClass=helper("7.0.0-beta.0")`
  import toPropertyKey from "toPropertyKey";
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i ++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
    }
  }

  export default function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
`,helpers.defineEnumerableProperties=helper("7.0.0-beta.0")`
  export default function _defineEnumerableProperties(obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ("value" in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    // Symbols are not enumerated over by for-in loops. If native
    // Symbols are available, fetch all of the descs object's own
    // symbol properties and define them on our target object too.
    if (Object.getOwnPropertySymbols) {
      var objectSymbols = Object.getOwnPropertySymbols(descs);
      for (var i = 0; i < objectSymbols.length; i++) {
        var sym = objectSymbols[i];
        var desc = descs[sym];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, sym, desc);
      }
    }
    return obj;
  }
`,helpers.defaults=helper("7.0.0-beta.0")`
  export default function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = Object.getOwnPropertyDescriptor(defaults, key);
      if (value && value.configurable && obj[key] === undefined) {
        Object.defineProperty(obj, key, value);
      }
    }
    return obj;
  }
`,helpers.defineProperty=helper("7.0.0-beta.0")`
  import toPropertyKey from "toPropertyKey";
  export default function _defineProperty(obj, key, value) {
    key = toPropertyKey(key);
    // Shortcircuit the slow defineProperty path when possible.
    // We are trying to avoid issues where setters defined on the
    // prototype cause side effects under the fast path of simple
    // assignment. By checking for existence of the property with
    // the in operator, we can optimize most of this overhead away.
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
`,helpers.extends=helper("7.0.0-beta.0")`
  export default function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };

    return _extends.apply(this, arguments);
  }
`,helpers.objectSpread=helper("7.0.0-beta.0")`
  import defineProperty from "defineProperty";

  export default function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = (arguments[i] != null) ? Object(arguments[i]) : {};
      var ownKeys = Object.keys(source);
      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function(sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }
      ownKeys.forEach(function(key) {
        defineProperty(target, key, source[key]);
      });
    }
    return target;
  }
`,helpers.inherits=helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    // We can't use defineProperty to set the prototype in a single step because it
    // doesn't work in Chrome <= 36. https://github.com/babel/babel/issues/14056
    // V8 bug: https://bugs.chromium.org/p/v8/issues/detail?id=3334
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass) setPrototypeOf(subClass, superClass);
  }
`,helpers.inheritsLoose=helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
  }
`,helpers.getPrototypeOf=helper("7.0.0-beta.0")`
  export default function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf.bind()
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
    return _getPrototypeOf(o);
  }
`,helpers.setPrototypeOf=helper("7.0.0-beta.0")`
  export default function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf
      ? Object.setPrototypeOf.bind()
      : function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };
    return _setPrototypeOf(o, p);
  }
`,helpers.isNativeReflectConstruct=helper("7.9.0")`
  export default function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;

    // core-js@3
    if (Reflect.construct.sham) return false;

    // Proxy can't be polyfilled. Every browser implemented
    // proxies before or at the same time as Reflect.construct,
    // so if they support Proxy they also support Reflect.construct.
    if (typeof Proxy === "function") return true;

    // Since Reflect.construct can't be properly polyfilled, some
    // implementations (e.g. core-js@2) don't set the correct internal slots.
    // Those polyfills don't allow us to subclass built-ins, so we need to
    // use our fallback implementation.
    try {
      // If the internal slots aren't set, this throws an error similar to
      //   TypeError: this is not a Boolean object.

      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
      return true;
    } catch (e) {
      return false;
    }
  }
`,helpers.construct=helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";
  import isNativeReflectConstruct from "isNativeReflectConstruct";

  export default function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct.bind();
    } else {
      // NOTE: If Parent !== Class, the correct __proto__ is set *after*
      //       calling the constructor.
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }
    // Avoid issues with Class being present but undefined when it wasn't
    // present in the original call.
    return _construct.apply(null, arguments);
  }
`,helpers.isNativeFunction=helper("7.0.0-beta.0")`
  export default function _isNativeFunction(fn) {
    // Note: This function returns "true" for core-js functions.
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
`,helpers.wrapNativeSuper=helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";
  import setPrototypeOf from "setPrototypeOf";
  import isNativeFunction from "isNativeFunction";
  import construct from "construct";

  export default function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;
      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);
        _cache.set(Class, Wrapper);
      }
      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor)
      }
      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true,
        }
      });

      return setPrototypeOf(Wrapper, Class);
    }

    return _wrapNativeSuper(Class)
  }
`,helpers.instanceof=helper("7.0.0-beta.0")`
  export default function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
      return !!right[Symbol.hasInstance](left);
    } else {
      return left instanceof right;
    }
  }
`,helpers.interopRequireDefault=helper("7.0.0-beta.0")`
  export default function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
`,helpers.interopRequireWildcard=helper("7.14.0")`
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;

    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function (nodeInterop) {
      return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }

  export default function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }

    if (obj === null || (typeof obj !== "object" && typeof obj !== "function")) {
      return { default: obj }
    }

    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }

    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor
          ? Object.getOwnPropertyDescriptor(obj, key)
          : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
`,helpers.newArrowCheck=helper("7.0.0-beta.0")`
  export default function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) {
      throw new TypeError("Cannot instantiate an arrow function");
    }
  }
`,helpers.objectDestructuringEmpty=helper("7.0.0-beta.0")`
  export default function _objectDestructuringEmpty(obj) {
    if (obj == null) throw new TypeError("Cannot destructure " + obj);
  }
`,helpers.objectWithoutPropertiesLoose=helper("7.0.0-beta.0")`
  export default function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};

    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }
`,helpers.objectWithoutProperties=helper("7.0.0-beta.0")`
  import objectWithoutPropertiesLoose from "objectWithoutPropertiesLoose";

  export default function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }
`,helpers.assertThisInitialized=helper("7.0.0-beta.0")`
  export default function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
`,helpers.possibleConstructorReturn=helper("7.0.0-beta.0")`
  import assertThisInitialized from "assertThisInitialized";

  export default function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return assertThisInitialized(self);
  }
`,helpers.createSuper=helper("7.9.0")`
  import getPrototypeOf from "getPrototypeOf";
  import isNativeReflectConstruct from "isNativeReflectConstruct";
  import possibleConstructorReturn from "possibleConstructorReturn";

  export default function _createSuper(Derived) {
    var hasNativeReflectConstruct = isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        // NOTE: This doesn't work if this.__proto__.constructor has been modified.
        var NewTarget = getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return possibleConstructorReturn(this, result);
    }
  }
 `,helpers.superPropBase=helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";

  export default function _superPropBase(object, property) {
    // Yes, this throws if object is null to being with, that's on purpose.
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }
    return object;
  }
`,helpers.get=helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";

  export default function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get.bind();
    } else {
      _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);

        if (!base) return;

        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) {
          // STEP 3. If receiver is not present, then set receiver to target.
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      };
    }
    return _get.apply(this, arguments);
  }
`,helpers.set=helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";
  import defineProperty from "defineProperty";

  function set(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) {
      set = Reflect.set;
    } else {
      set = function set(target, property, value, receiver) {
        var base = superPropBase(target, property);
        var desc;

        if (base) {
          desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.set) {
            desc.set.call(receiver, value);
            return true;
          } else if (!desc.writable) {
            // Both getter and non-writable fall into this.
            return false;
          }
        }

        // Without a super that defines the property, spec boils down to
        // "define on receiver" for some reason.
        desc = Object.getOwnPropertyDescriptor(receiver, property);
        if (desc) {
          if (!desc.writable) {
            // Setter, getter, and non-writable fall into this.
            return false;
          }

          desc.value = value;
          Object.defineProperty(receiver, property, desc);
        } else {
          // Avoid setters that may be defined on Sub's prototype, but not on
          // the instance.
          defineProperty(receiver, property, value);
        }

        return true;
      };
    }

    return set(target, property, value, receiver);
  }

  export default function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) {
      throw new TypeError('failed to set property');
    }

    return value;
  }
`,helpers.taggedTemplateLiteral=helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteral(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    return Object.freeze(Object.defineProperties(strings, {
        raw: { value: Object.freeze(raw) }
    }));
  }
`,helpers.taggedTemplateLiteralLoose=helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    strings.raw = raw;
    return strings;
  }
`,helpers.readOnlyError=helper("7.0.0-beta.0")`
  export default function _readOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is read-only");
  }
`,helpers.writeOnlyError=helper("7.12.13")`
  export default function _writeOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is write-only");
  }
`,helpers.classNameTDZError=helper("7.0.0-beta.0")`
  export default function _classNameTDZError(name) {
    throw new ReferenceError("Class \\"" + name + "\\" cannot be referenced in computed property keys.");
  }
`,helpers.temporalUndefined=helper("7.0.0-beta.0")`
  // This function isn't mean to be called, but to be used as a reference.
  // We can't use a normal object because it isn't hoisted.
  export default function _temporalUndefined() {}
`,helpers.tdz=helper("7.5.5")`
  export default function _tdzError(name) {
    throw new ReferenceError(name + " is not defined - temporal dead zone");
  }
`,helpers.temporalRef=helper("7.0.0-beta.0")`
  import undef from "temporalUndefined";
  import err from "tdz";

  export default function _temporalRef(val, name) {
    return val === undef ? err(name) : val;
  }
`,helpers.slicedToArray=helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimit from "iterableToArrayLimit";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArray(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimit(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`,helpers.slicedToArrayLoose=helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimitLoose from "iterableToArrayLimitLoose";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArrayLoose(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimitLoose(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`,helpers.toArray=helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _toArray(arr) {
    return (
      arrayWithHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableRest()
    );
  }
`,helpers.toConsumableArray=helper("7.0.0-beta.0")`
  import arrayWithoutHoles from "arrayWithoutHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableSpread from "nonIterableSpread";

  export default function _toConsumableArray(arr) {
    return (
      arrayWithoutHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableSpread()
    );
  }
`,helpers.arrayWithoutHoles=helper("7.0.0-beta.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
  }
`,helpers.arrayWithHoles=helper("7.0.0-beta.0")`
  export default function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
`,helpers.maybeArrayLike=helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _maybeArrayLike(next, arr, i) {
    if (arr && !Array.isArray(arr) && typeof arr.length === "number") {
      var len = arr.length;
      return arrayLikeToArray(arr, i !== void 0 && i < len ? i : len);
    }
    return next(arr, i);
  }
`,helpers.iterableToArray=helper("7.0.0-beta.0")`
  export default function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
`,helpers.unsupportedIterableToArray=helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return arrayLikeToArray(o, minLen);
  }
`,helpers.arrayLikeToArray=helper("7.9.0")`
  export default function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
`,helpers.nonIterableSpread=helper("7.0.0-beta.0")`
  export default function _nonIterableSpread() {
    throw new TypeError(
      "Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`,helpers.nonIterableRest=helper("7.0.0-beta.0")`
  export default function _nonIterableRest() {
    throw new TypeError(
      "Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`,helpers.createForOfIteratorHelper=helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  // s: start (create the iterator)
  // n: next
  // e: error (called whenever something throws)
  // f: finish (always called at the end)

  export default function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      // Fallback for engines without symbol support
      if (
        Array.isArray(o) ||
        (it = unsupportedIterableToArray(o)) ||
        (allowArrayLike && o && typeof o.length === "number")
      ) {
        if (it) o = it;
        var i = 0;
        var F = function(){};
        return {
          s: F,
          n: function() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          },
          e: function(e) { throw e; },
          f: F,
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true, didErr = false, err;

    return {
      s: function() {
        it = it.call(o);
      },
      n: function() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function(e) {
        didErr = true;
        err = e;
      },
      f: function() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }
`,helpers.createForOfIteratorHelperLoose=helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  export default function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (it) return (it = it.call(o)).next.bind(it);

    // Fallback for engines without symbol support
    if (
      Array.isArray(o) ||
      (it = unsupportedIterableToArray(o)) ||
      (allowArrayLike && o && typeof o.length === "number")
    ) {
      if (it) o = it;
      var i = 0;
      return function() {
        if (i >= o.length) return { done: true };
        return { done: false, value: o[i++] };
      }
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
`,helpers.skipFirstGeneratorNext=helper("7.0.0-beta.0")`
  export default function _skipFirstGeneratorNext(fn) {
    return function () {
      var it = fn.apply(this, arguments);
      it.next();
      return it;
    }
  }
`,helpers.toPrimitive=helper("7.1.5")`
  export default function _toPrimitive(
    input,
    hint /*: "default" | "string" | "number" | void */
  ) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
`,helpers.toPropertyKey=helper("7.1.5")`
  import toPrimitive from "toPrimitive";

  export default function _toPropertyKey(arg) {
    var key = toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
`,helpers.initializerWarningHelper=helper("7.0.0-beta.0")`
    export default function _initializerWarningHelper(descriptor, context){
        throw new Error(
          'Decorating class property failed. Please ensure that ' +
          'proposal-class-properties is enabled and runs after the decorators transform.'
        );
    }
`,helpers.initializerDefineProperty=helper("7.0.0-beta.0")`
    export default function _initializerDefineProperty(target, property, descriptor, context){
        if (!descriptor) return;

        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,
        });
    }
`,helpers.applyDecoratedDescriptor=helper("7.0.0-beta.0")`
    export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context){
        var desc = {};
        Object.keys(descriptor).forEach(function(key){
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;
        if ('value' in desc || desc.initializer){
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function(desc, decorator){
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0){
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0){
            Object.defineProperty(target, property, desc);
            desc = null;
        }

        return desc;
    }
`,helpers.classPrivateFieldLooseKey=helper("7.0.0-beta.0")`
  var id = 0;
  export default function _classPrivateFieldKey(name) {
    return "__private_" + (id++) + "_" + name;
  }
`,helpers.classPrivateFieldLooseBase=helper("7.0.0-beta.0")`
  export default function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
  }
`,helpers.classPrivateFieldGet=helper("7.0.0-beta.0")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`,helpers.classPrivateFieldSet=helper("7.0.0-beta.0")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`,helpers.classPrivateFieldDestructureSet=helper("7.4.4")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldDestructureSet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`,helpers.classExtractFieldDescriptor=helper("7.13.10")`
  export default function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
  }
`,helpers.classStaticPrivateFieldSpecGet=helper("7.0.2")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`,helpers.classStaticPrivateFieldSpecSet=helper("7.0.2")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`,helpers.classStaticPrivateMethodGet=helper("7.3.2")`
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  export default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    return method;
  }
`,helpers.classStaticPrivateMethodSet=helper("7.3.2")`
  export default function _classStaticPrivateMethodSet() {
    throw new TypeError("attempted to set read only static private field");
  }
`,helpers.classApplyDescriptorGet=helper("7.13.10")`
  export default function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
      return descriptor.get.call(receiver);
    }
    return descriptor.value;
  }
`,helpers.classApplyDescriptorSet=helper("7.13.10")`
  export default function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
      descriptor.set.call(receiver, value);
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }
      descriptor.value = value;
    }
  }
`,helpers.classApplyDescriptorDestructureSet=helper("7.13.10")`
  export default function _classApplyDescriptorDestructureSet(receiver, descriptor) {
    if (descriptor.set) {
      if (!("__destrObj" in descriptor)) {
        descriptor.__destrObj = {
          set value(v) {
            descriptor.set.call(receiver, v)
          },
        };
      }
      return descriptor.__destrObj;
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }

      return descriptor;
    }
  }
`,helpers.classStaticPrivateFieldDestructureSet=helper("7.13.10")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldDestructureSet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`,helpers.classCheckPrivateStaticAccess=helper("7.13.10")`
  export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {
    if (receiver !== classConstructor) {
      throw new TypeError("Private static access of wrong provenance");
    }
  }
`,helpers.classCheckPrivateStaticFieldDescriptor=helper("7.13.10")`
  export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {
    if (descriptor === undefined) {
      throw new TypeError("attempted to " + action + " private static field before its declaration");
    }
  }
`,helpers.decorate=helper("7.1.5")`
  import toArray from "toArray";
  import toPropertyKey from "toPropertyKey";

  // These comments are stripped by @babel/template
  /*::
  type PropertyDescriptor =
    | {
        value: any,
        writable: boolean,
        configurable: boolean,
        enumerable: boolean,
      }
    | {
        get?: () => any,
        set?: (v: any) => void,
        configurable: boolean,
        enumerable: boolean,
      };

  type FieldDescriptor ={
    writable: boolean,
    configurable: boolean,
    enumerable: boolean,
  };

  type Placement = "static" | "prototype" | "own";
  type Key = string | symbol; // PrivateName is not supported yet.

  type ElementDescriptor =
    | {
        kind: "method",
        key: Key,
        placement: Placement,
        descriptor: PropertyDescriptor
      }
    | {
        kind: "field",
        key: Key,
        placement: Placement,
        descriptor: FieldDescriptor,
        initializer?: () => any,
      };

  // This is exposed to the user code
  type ElementObjectInput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
  };

  // This is exposed to the user code
  type ElementObjectOutput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
    extras?: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  // This is exposed to the user code
  type ClassObject = {
    [@@toStringTag]?: "Descriptor",
    kind: "class",
    elements: ElementDescriptor[],
  };

  type ElementDecorator = (descriptor: ElementObjectInput) => ?ElementObjectOutput;
  type ClassDecorator = (descriptor: ClassObject) => ?ClassObject;
  type ClassFinisher = <A, B>(cl: Class<A>) => Class<B>;

  // Only used by Babel in the transform output, not part of the spec.
  type ElementDefinition =
    | {
        kind: "method",
        value: any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
      }
    | {
        kind: "field",
        value: () => any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
    };

  declare function ClassFactory<C>(initialize: (instance: C) => void): {
    F: Class<C>,
    d: ElementDefinition[]
  }

  */

  /*::
  // Various combinations with/without extras and with one or many finishers

  type ElementFinisherExtras = {
    element: ElementDescriptor,
    finisher?: ClassFinisher,
    extras?: ElementDescriptor[],
  };

  type ElementFinishersExtras = {
    element: ElementDescriptor,
    finishers: ClassFinisher[],
    extras: ElementDescriptor[],
  };

  type ElementsFinisher = {
    elements: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  type ElementsFinishers = {
    elements: ElementDescriptor[],
    finishers: ClassFinisher[],
  };

  */

  /*::

  type Placements = {
    static: Key[],
    prototype: Key[],
    own: Key[],
  };

  */

  // ClassDefinitionEvaluation (Steps 26-*)
  export default function _decorate(
    decorators /*: ClassDecorator[] */,
    factory /*: ClassFactory */,
    superClass /*: ?Class<*> */,
    mixins /*: ?Array<Function> */,
  ) /*: Class<*> */ {
    var api = _getDecoratorsApi();
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        api = mixins[i](api);
      }
    }

    var r = factory(function initialize(O) {
      api.initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = api.decorateClass(
      _coalesceClassElements(r.d.map(_createElementDescriptor)),
      decorators,
    );

    api.initializeClassElements(r.F, decorated.elements);

    return api.runClassFinishers(r.F, decorated.finishers);
  }

  function _getDecoratorsApi() {
    _getDecoratorsApi = function() {
      return api;
    };

    var api = {
      elementsDefinitionOrder: [["method"], ["field"]],

      // InitializeInstanceElements
      initializeInstanceElements: function(
        /*::<C>*/ O /*: C */,
        elements /*: ElementDescriptor[] */,
      ) {
        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            if (element.kind === kind && element.placement === "own") {
              this.defineClassElement(O, element);
            }
          }, this);
        }, this);
      },

      // InitializeClassElements
      initializeClassElements: function(
        /*::<C>*/ F /*: Class<C> */,
        elements /*: ElementDescriptor[] */,
      ) {
        var proto = F.prototype;

        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            var placement = element.placement;
            if (
              element.kind === kind &&
              (placement === "static" || placement === "prototype")
            ) {
              var receiver = placement === "static" ? F : proto;
              this.defineClassElement(receiver, element);
            }
          }, this);
        }, this);
      },

      // DefineClassElement
      defineClassElement: function(
        /*::<C>*/ receiver /*: C | Class<C> */,
        element /*: ElementDescriptor */,
      ) {
        var descriptor /*: PropertyDescriptor */ = element.descriptor;
        if (element.kind === "field") {
          var initializer = element.initializer;
          descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver),
          };
        }
        Object.defineProperty(receiver, element.key, descriptor);
      },

      // DecorateClass
      decorateClass: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var newElements /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];
        var placements /*: Placements */ = {
          static: [],
          prototype: [],
          own: [],
        };

        elements.forEach(function(element /*: ElementDescriptor */) {
          this.addElementPlacement(element, placements);
        }, this);

        elements.forEach(function(element /*: ElementDescriptor */) {
          if (!_hasDecorators(element)) return newElements.push(element);

          var elementFinishersExtras /*: ElementFinishersExtras */ = this.decorateElement(
            element,
            placements,
          );
          newElements.push(elementFinishersExtras.element);
          newElements.push.apply(newElements, elementFinishersExtras.extras);
          finishers.push.apply(finishers, elementFinishersExtras.finishers);
        }, this);

        if (!decorators) {
          return { elements: newElements, finishers: finishers };
        }

        var result /*: ElementsFinishers */ = this.decorateConstructor(
          newElements,
          decorators,
        );
        finishers.push.apply(finishers, result.finishers);
        result.finishers = finishers;

        return result;
      },

      // AddElementPlacement
      addElementPlacement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
        silent /*: boolean */,
      ) {
        var keys = placements[element.placement];
        if (!silent && keys.indexOf(element.key) !== -1) {
          throw new TypeError("Duplicated element (" + element.key + ")");
        }
        keys.push(element.key);
      },

      // DecorateElement
      decorateElement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
      ) /*: ElementFinishersExtras */ {
        var extras /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];

        for (
          var decorators = element.decorators, i = decorators.length - 1;
          i >= 0;
          i--
        ) {
          // (inlined) RemoveElementPlacement
          var keys = placements[element.placement];
          keys.splice(keys.indexOf(element.key), 1);

          var elementObject /*: ElementObjectInput */ = this.fromElementDescriptor(
            element,
          );
          var elementFinisherExtras /*: ElementFinisherExtras */ = this.toElementFinisherExtras(
            (0, decorators[i])(elementObject) /*: ElementObjectOutput */ ||
              elementObject,
          );

          element = elementFinisherExtras.element;
          this.addElementPlacement(element, placements);

          if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
          }

          var newExtras /*: ElementDescriptor[] | void */ =
            elementFinisherExtras.extras;
          if (newExtras) {
            for (var j = 0; j < newExtras.length; j++) {
              this.addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
          }
        }

        return { element: element, finishers: finishers, extras: extras };
      },

      // DecorateConstructor
      decorateConstructor: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var finishers /*: ClassFinisher[] */ = [];

        for (var i = decorators.length - 1; i >= 0; i--) {
          var obj /*: ClassObject */ = this.fromClassDescriptor(elements);
          var elementsAndFinisher /*: ElementsFinisher */ = this.toClassDescriptor(
            (0, decorators[i])(obj) /*: ClassObject */ || obj,
          );

          if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
          }

          if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;

            for (var j = 0; j < elements.length - 1; j++) {
              for (var k = j + 1; k < elements.length; k++) {
                if (
                  elements[j].key === elements[k].key &&
                  elements[j].placement === elements[k].placement
                ) {
                  throw new TypeError(
                    "Duplicated element (" + elements[j].key + ")",
                  );
                }
              }
            }
          }
        }

        return { elements: elements, finishers: finishers };
      },

      // FromElementDescriptor
      fromElementDescriptor: function(
        element /*: ElementDescriptor */,
      ) /*: ElementObject */ {
        var obj /*: ElementObject */ = {
          kind: element.kind,
          key: element.key,
          placement: element.placement,
          descriptor: element.descriptor,
        };

        var desc = {
          value: "Descriptor",
          configurable: true,
        };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        if (element.kind === "field") obj.initializer = element.initializer;

        return obj;
      },

      // ToElementDescriptors
      toElementDescriptors: function(
        elementObjects /*: ElementObject[] */,
      ) /*: ElementDescriptor[] */ {
        if (elementObjects === undefined) return;
        return toArray(elementObjects).map(function(elementObject) {
          var element = this.toElementDescriptor(elementObject);
          this.disallowProperty(elementObject, "finisher", "An element descriptor");
          this.disallowProperty(elementObject, "extras", "An element descriptor");
          return element;
        }, this);
      },

      // ToElementDescriptor
      toElementDescriptor: function(
        elementObject /*: ElementObject */,
      ) /*: ElementDescriptor */ {
        var kind = String(elementObject.kind);
        if (kind !== "method" && kind !== "field") {
          throw new TypeError(
            'An element descriptor\\'s .kind property must be either "method" or' +
              ' "field", but a decorator created an element descriptor with' +
              ' .kind "' +
              kind +
              '"',
          );
        }

        var key = toPropertyKey(elementObject.key);

        var placement = String(elementObject.placement);
        if (
          placement !== "static" &&
          placement !== "prototype" &&
          placement !== "own"
        ) {
          throw new TypeError(
            'An element descriptor\\'s .placement property must be one of "static",' +
              ' "prototype" or "own", but a decorator created an element descriptor' +
              ' with .placement "' +
              placement +
              '"',
          );
        }

        var descriptor /*: PropertyDescriptor */ = elementObject.descriptor;

        this.disallowProperty(elementObject, "elements", "An element descriptor");

        var element /*: ElementDescriptor */ = {
          kind: kind,
          key: key,
          placement: placement,
          descriptor: Object.assign({}, descriptor),
        };

        if (kind !== "field") {
          this.disallowProperty(elementObject, "initializer", "A method descriptor");
        } else {
          this.disallowProperty(
            descriptor,
            "get",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "set",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "value",
            "The property descriptor of a field descriptor",
          );

          element.initializer = elementObject.initializer;
        }

        return element;
      },

      toElementFinisherExtras: function(
        elementObject /*: ElementObject */,
      ) /*: ElementFinisherExtras */ {
        var element /*: ElementDescriptor */ = this.toElementDescriptor(
          elementObject,
        );
        var finisher /*: ClassFinisher */ = _optionalCallableProperty(
          elementObject,
          "finisher",
        );
        var extras /*: ElementDescriptors[] */ = this.toElementDescriptors(
          elementObject.extras,
        );

        return { element: element, finisher: finisher, extras: extras };
      },

      // FromClassDescriptor
      fromClassDescriptor: function(
        elements /*: ElementDescriptor[] */,
      ) /*: ClassObject */ {
        var obj = {
          kind: "class",
          elements: elements.map(this.fromElementDescriptor, this),
        };

        var desc = { value: "Descriptor", configurable: true };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        return obj;
      },

      // ToClassDescriptor
      toClassDescriptor: function(
        obj /*: ClassObject */,
      ) /*: ElementsFinisher */ {
        var kind = String(obj.kind);
        if (kind !== "class") {
          throw new TypeError(
            'A class descriptor\\'s .kind property must be "class", but a decorator' +
              ' created a class descriptor with .kind "' +
              kind +
              '"',
          );
        }

        this.disallowProperty(obj, "key", "A class descriptor");
        this.disallowProperty(obj, "placement", "A class descriptor");
        this.disallowProperty(obj, "descriptor", "A class descriptor");
        this.disallowProperty(obj, "initializer", "A class descriptor");
        this.disallowProperty(obj, "extras", "A class descriptor");

        var finisher = _optionalCallableProperty(obj, "finisher");
        var elements = this.toElementDescriptors(obj.elements);

        return { elements: elements, finisher: finisher };
      },

      // RunClassFinishers
      runClassFinishers: function(
        constructor /*: Class<*> */,
        finishers /*: ClassFinisher[] */,
      ) /*: Class<*> */ {
        for (var i = 0; i < finishers.length; i++) {
          var newConstructor /*: ?Class<*> */ = (0, finishers[i])(constructor);
          if (newConstructor !== undefined) {
            // NOTE: This should check if IsConstructor(newConstructor) is false.
            if (typeof newConstructor !== "function") {
              throw new TypeError("Finishers must return a constructor.");
            }
            constructor = newConstructor;
          }
        }
        return constructor;
      },

      disallowProperty: function(obj, name, objectType) {
        if (obj[name] !== undefined) {
          throw new TypeError(objectType + " can't have a ." + name + " property.");
        }
      }
    };

    return api;
  }

  // ClassElementEvaluation
  function _createElementDescriptor(
    def /*: ElementDefinition */,
  ) /*: ElementDescriptor */ {
    var key = toPropertyKey(def.key);

    var descriptor /*: PropertyDescriptor */;
    if (def.kind === "method") {
      descriptor = {
        value: def.value,
        writable: true,
        configurable: true,
        enumerable: false,
      };
    } else if (def.kind === "get") {
      descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "set") {
      descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "field") {
      descriptor = { configurable: true, writable: true, enumerable: true };
    }

    var element /*: ElementDescriptor */ = {
      kind: def.kind === "field" ? "field" : "method",
      key: key,
      placement: def.static
        ? "static"
        : def.kind === "field"
        ? "own"
        : "prototype",
      descriptor: descriptor,
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;

    return element;
  }

  // CoalesceGetterSetter
  function _coalesceGetterSetter(
    element /*: ElementDescriptor */,
    other /*: ElementDescriptor */,
  ) {
    if (element.descriptor.get !== undefined) {
      other.descriptor.get = element.descriptor.get;
    } else {
      other.descriptor.set = element.descriptor.set;
    }
  }

  // CoalesceClassElements
  function _coalesceClassElements(
    elements /*: ElementDescriptor[] */,
  ) /*: ElementDescriptor[] */ {
    var newElements /*: ElementDescriptor[] */ = [];

    var isSameElement = function(
      other /*: ElementDescriptor */,
    ) /*: boolean */ {
      return (
        other.kind === "method" &&
        other.key === element.key &&
        other.placement === element.placement
      );
    };

    for (var i = 0; i < elements.length; i++) {
      var element /*: ElementDescriptor */ = elements[i];
      var other /*: ElementDescriptor */;

      if (
        element.kind === "method" &&
        (other = newElements.find(isSameElement))
      ) {
        if (
          _isDataDescriptor(element.descriptor) ||
          _isDataDescriptor(other.descriptor)
        ) {
          if (_hasDecorators(element) || _hasDecorators(other)) {
            throw new ReferenceError(
              "Duplicated methods (" + element.key + ") can't be decorated.",
            );
          }
          other.descriptor = element.descriptor;
        } else {
          if (_hasDecorators(element)) {
            if (_hasDecorators(other)) {
              throw new ReferenceError(
                "Decorators can't be placed on different accessors with for " +
                  "the same property (" +
                  element.key +
                  ").",
              );
            }
            other.decorators = element.decorators;
          }
          _coalesceGetterSetter(element, other);
        }
      } else {
        newElements.push(element);
      }
    }

    return newElements;
  }

  function _hasDecorators(element /*: ElementDescriptor */) /*: boolean */ {
    return element.decorators && element.decorators.length;
  }

  function _isDataDescriptor(desc /*: PropertyDescriptor */) /*: boolean */ {
    return (
      desc !== undefined &&
      !(desc.value === undefined && desc.writable === undefined)
    );
  }

  function _optionalCallableProperty /*::<T>*/(
    obj /*: T */,
    name /*: $Keys<T> */,
  ) /*: ?Function */ {
    var value = obj[name];
    if (value !== undefined && typeof value !== "function") {
      throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
  }

`,helpers.classPrivateMethodGet=helper("7.1.6")`
  export default function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
  }
`,helpers.checkPrivateRedeclaration=helper("7.14.1")`
  export default function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
      throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
  }
`,helpers.classPrivateFieldInitSpec=helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateFieldInitSpec(obj, privateMap, value) {
    checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
  }
`,helpers.classPrivateMethodInitSpec=helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateMethodInitSpec(obj, privateSet) {
    checkPrivateRedeclaration(obj, privateSet);
    privateSet.add(obj);
  }
`,helpers.classPrivateMethodSet=helper("7.1.6")`
    export default function _classPrivateMethodSet() {
      throw new TypeError("attempted to reassign private method");
    }
  `,helpers.identity=helper("7.17.0")`
  export default function _identity(x) {
    return x;
  }
`;},"./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0,exports.ensure=function(name,newFileClass){FileClass||(FileClass=newFileClass),loadHelper(name);},exports.get=get,exports.getDependencies=function(name){return loadHelper(name).getDependencies()},exports.list=void 0,exports.minVersion=function(name){return loadHelper(name).minVersion};var _traverse=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_helpers=__webpack_require__("./node_modules/.pnpm/@babel+helpers@7.21.0/node_modules/@babel/helpers/lib/helpers.js");const{assignmentExpression,cloneNode,expressionStatement,file,identifier}=_t;function makePath(path){const parts=[];for(;path.parentPath;path=path.parentPath)parts.push(path.key),path.inList&&parts.push(path.listKey);return parts.reverse().join(".")}let FileClass;function getHelperMetadata(file){const globals=new Set,localBindingNames=new Set,dependencies=new Map;let exportName,exportPath;const exportBindingAssignments=[],importPaths=[],importBindingsReferences=[],dependencyVisitor={ImportDeclaration(child){const name=child.node.source.value;if(!_helpers.default[name])throw child.buildCodeFrameError(`Unknown helper ${name}`);if(1!==child.get("specifiers").length||!child.get("specifiers.0").isImportDefaultSpecifier())throw child.buildCodeFrameError("Helpers can only import a default value");const bindingIdentifier=child.node.specifiers[0].local;dependencies.set(bindingIdentifier,name),importPaths.push(makePath(child));},ExportDefaultDeclaration(child){const decl=child.get("declaration");if(!decl.isFunctionDeclaration()||!decl.node.id)throw decl.buildCodeFrameError("Helpers can only export named function declarations");exportName=decl.node.id.name,exportPath=makePath(child);},ExportAllDeclaration(child){throw child.buildCodeFrameError("Helpers can only export default")},ExportNamedDeclaration(child){throw child.buildCodeFrameError("Helpers can only export default")},Statement(child){child.isImportDeclaration()||child.isExportDeclaration()||child.skip();}},referenceVisitor={Program(path){const bindings=path.scope.getAllBindings();Object.keys(bindings).forEach((name=>{name!==exportName&&(dependencies.has(bindings[name].identifier)||localBindingNames.add(name));}));},ReferencedIdentifier(child){const name=child.node.name,binding=child.scope.getBinding(name);binding?dependencies.has(binding.identifier)&&importBindingsReferences.push(makePath(child)):globals.add(name);},AssignmentExpression(child){const left=child.get("left");if(!(exportName in left.getBindingIdentifiers()))return;if(!left.isIdentifier())throw left.buildCodeFrameError("Only simple assignments to exports are allowed in helpers");const binding=child.scope.getBinding(exportName);null!=binding&&binding.scope.path.isProgram()&&exportBindingAssignments.push(makePath(child));}};if((0, _traverse.default)(file.ast,dependencyVisitor,file.scope),(0, _traverse.default)(file.ast,referenceVisitor,file.scope),!exportPath)throw new Error("Helpers must have a default export.");return exportBindingAssignments.reverse(),{globals:Array.from(globals),localBindingNames:Array.from(localBindingNames),dependencies,exportBindingAssignments,exportPath,exportName,importBindingsReferences,importPaths}}const helperData=Object.create(null);function loadHelper(name){if(!helperData[name]){const helper=_helpers.default[name];if(!helper)throw Object.assign(new ReferenceError(`Unknown helper ${name}`),{code:"BABEL_HELPER_UNKNOWN",helper:name});const fn=()=>{if(!FileClass){const fakeFile={ast:file(helper.ast()),path:null};return (0, _traverse.default)(fakeFile.ast,{Program:path=>(fakeFile.path=path).stop()}),fakeFile}return new FileClass({filename:`babel-helper://${name}`},{ast:file(helper.ast()),code:"[internal Babel helper code]",inputMap:null})};let metadata=null;helperData[name]={minVersion:helper.minVersion,build(getDependency,id,localBindings){const file=fn();return metadata||(metadata=getHelperMetadata(file)),function(file,metadata,id,localBindings,getDependency){if(localBindings&&!id)throw new Error("Unexpected local bindings for module-based helpers.");if(!id)return;const{localBindingNames,dependencies,exportBindingAssignments,exportPath,exportName,importBindingsReferences,importPaths}=metadata,dependenciesRefs={};dependencies.forEach(((name,id)=>{dependenciesRefs[id.name]="function"==typeof getDependency&&getDependency(name)||id;}));const toRename={},bindings=new Set(localBindings||[]);localBindingNames.forEach((name=>{let newName=name;for(;bindings.has(newName);)newName="_"+newName;newName!==name&&(toRename[name]=newName);})),"Identifier"===id.type&&exportName!==id.name&&(toRename[exportName]=id.name);const{path}=file,exp=path.get(exportPath),imps=importPaths.map((p=>path.get(p))),impsBindingRefs=importBindingsReferences.map((p=>path.get(p))),decl=exp.get("declaration");if("Identifier"===id.type)exp.replaceWith(decl);else {if("MemberExpression"!==id.type)throw new Error("Unexpected helper format.");exportBindingAssignments.forEach((assignPath=>{const assign=path.get(assignPath);assign.replaceWith(assignmentExpression("=",id,assign.node));})),exp.replaceWith(decl),path.pushContainer("body",expressionStatement(assignmentExpression("=",id,identifier(exportName))));}Object.keys(toRename).forEach((name=>{path.scope.rename(name,toRename[name]);}));for(const path of imps)path.remove();for(const path of impsBindingRefs){const node=cloneNode(dependenciesRefs[path.node.name]);path.replaceWith(node);}}(file,metadata,id,localBindings,getDependency),{nodes:file.ast.program.body,globals:metadata.globals}},getDependencies:()=>(metadata||(metadata=getHelperMetadata(fn())),Array.from(metadata.dependencies.values()))};}return helperData[name]}function get(name,getDependency,id,localBindings){return loadHelper(name).build(getDependency,id,localBindings)}const list=Object.keys(_helpers.default).map((name=>name.replace(/^_/,"")));exports.list=list;var _default=get;exports.default=_default;},"./node_modules/.pnpm/@babel+parser@7.21.3/node_modules/@babel/parser/lib/index.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0});const defaultOptions={sourceType:"script",sourceFilename:void 0,startColumn:0,startLine:1,allowAwaitOutsideFunction:!1,allowReturnOutsideFunction:!1,allowNewTargetOutsideFunction:!1,allowImportExportEverywhere:!1,allowSuperOutsideMethod:!1,allowUndeclaredExports:!1,plugins:[],strictMode:null,ranges:!1,tokens:!1,createParenthesizedExpressions:!1,errorRecovery:!1,attachComment:!0,annexB:!0};class TokContext{constructor(token,preserveSpace){this.token=void 0,this.preserveSpace=void 0,this.token=token,this.preserveSpace=!!preserveSpace;}}const types={brace:new TokContext("{"),j_oTag:new TokContext("<tag"),j_cTag:new TokContext("</tag"),j_expr:new TokContext("<tag>...</tag>",!0)};types.template=new TokContext("`",!0);const beforeExpr=!0;class ExportedTokenType{constructor(label,conf={}){this.label=void 0,this.keyword=void 0,this.beforeExpr=void 0,this.startsExpr=void 0,this.rightAssociative=void 0,this.isLoop=void 0,this.isAssign=void 0,this.prefix=void 0,this.postfix=void 0,this.binop=void 0,this.label=label,this.keyword=conf.keyword,this.beforeExpr=!!conf.beforeExpr,this.startsExpr=!!conf.startsExpr,this.rightAssociative=!!conf.rightAssociative,this.isLoop=!!conf.isLoop,this.isAssign=!!conf.isAssign,this.prefix=!!conf.prefix,this.postfix=!!conf.postfix,this.binop=null!=conf.binop?conf.binop:null,this.updateContext=null;}}const keywords$1=new Map;function createKeyword(name,options={}){options.keyword=name;const token=createToken(name,options);return keywords$1.set(name,token),token}function createBinop(name,binop){return createToken(name,{beforeExpr,binop})}let tokenTypeCounter=-1;const tokenTypes=[],tokenLabels=[],tokenBinops=[],tokenBeforeExprs=[],tokenStartsExprs=[],tokenPrefixes=[];function createToken(name,options={}){var _options$binop,_options$beforeExpr,_options$startsExpr,_options$prefix;return ++tokenTypeCounter,tokenLabels.push(name),tokenBinops.push(null!=(_options$binop=options.binop)?_options$binop:-1),tokenBeforeExprs.push(null!=(_options$beforeExpr=options.beforeExpr)&&_options$beforeExpr),tokenStartsExprs.push(null!=(_options$startsExpr=options.startsExpr)&&_options$startsExpr),tokenPrefixes.push(null!=(_options$prefix=options.prefix)&&_options$prefix),tokenTypes.push(new ExportedTokenType(name,options)),tokenTypeCounter}function createKeywordLike(name,options={}){var _options$binop2,_options$beforeExpr2,_options$startsExpr2,_options$prefix2;return ++tokenTypeCounter,keywords$1.set(name,tokenTypeCounter),tokenLabels.push(name),tokenBinops.push(null!=(_options$binop2=options.binop)?_options$binop2:-1),tokenBeforeExprs.push(null!=(_options$beforeExpr2=options.beforeExpr)&&_options$beforeExpr2),tokenStartsExprs.push(null!=(_options$startsExpr2=options.startsExpr)&&_options$startsExpr2),tokenPrefixes.push(null!=(_options$prefix2=options.prefix)&&_options$prefix2),tokenTypes.push(new ExportedTokenType("name",options)),tokenTypeCounter}const tt={bracketL:createToken("[",{beforeExpr,startsExpr:true}),bracketHashL:createToken("#[",{beforeExpr,startsExpr:true}),bracketBarL:createToken("[|",{beforeExpr,startsExpr:true}),bracketR:createToken("]"),bracketBarR:createToken("|]"),braceL:createToken("{",{beforeExpr,startsExpr:true}),braceBarL:createToken("{|",{beforeExpr,startsExpr:true}),braceHashL:createToken("#{",{beforeExpr,startsExpr:true}),braceR:createToken("}"),braceBarR:createToken("|}"),parenL:createToken("(",{beforeExpr,startsExpr:true}),parenR:createToken(")"),comma:createToken(",",{beforeExpr}),semi:createToken(";",{beforeExpr}),colon:createToken(":",{beforeExpr}),doubleColon:createToken("::",{beforeExpr}),dot:createToken("."),question:createToken("?",{beforeExpr}),questionDot:createToken("?."),arrow:createToken("=>",{beforeExpr}),template:createToken("template"),ellipsis:createToken("...",{beforeExpr}),backQuote:createToken("`",{startsExpr:true}),dollarBraceL:createToken("${",{beforeExpr,startsExpr:true}),templateTail:createToken("...`",{startsExpr:true}),templateNonTail:createToken("...${",{beforeExpr,startsExpr:true}),at:createToken("@"),hash:createToken("#",{startsExpr:true}),interpreterDirective:createToken("#!..."),eq:createToken("=",{beforeExpr,isAssign:true}),assign:createToken("_=",{beforeExpr,isAssign:true}),slashAssign:createToken("_=",{beforeExpr,isAssign:true}),xorAssign:createToken("_=",{beforeExpr,isAssign:true}),moduloAssign:createToken("_=",{beforeExpr,isAssign:true}),incDec:createToken("++/--",{prefix:true,postfix:!0,startsExpr:true}),bang:createToken("!",{beforeExpr,prefix:true,startsExpr:true}),tilde:createToken("~",{beforeExpr,prefix:true,startsExpr:true}),doubleCaret:createToken("^^",{startsExpr:true}),doubleAt:createToken("@@",{startsExpr:true}),pipeline:createBinop("|>",0),nullishCoalescing:createBinop("??",1),logicalOR:createBinop("||",1),logicalAND:createBinop("&&",2),bitwiseOR:createBinop("|",3),bitwiseXOR:createBinop("^",4),bitwiseAND:createBinop("&",5),equality:createBinop("==/!=/===/!==",6),lt:createBinop("</>/<=/>=",7),gt:createBinop("</>/<=/>=",7),relational:createBinop("</>/<=/>=",7),bitShift:createBinop("<</>>/>>>",8),bitShiftL:createBinop("<</>>/>>>",8),bitShiftR:createBinop("<</>>/>>>",8),plusMin:createToken("+/-",{beforeExpr,binop:9,prefix:true,startsExpr:true}),modulo:createToken("%",{binop:10,startsExpr:true}),star:createToken("*",{binop:10}),slash:createBinop("/",10),exponent:createToken("**",{beforeExpr,binop:11,rightAssociative:!0}),_in:createKeyword("in",{beforeExpr,binop:7}),_instanceof:createKeyword("instanceof",{beforeExpr,binop:7}),_break:createKeyword("break"),_case:createKeyword("case",{beforeExpr}),_catch:createKeyword("catch"),_continue:createKeyword("continue"),_debugger:createKeyword("debugger"),_default:createKeyword("default",{beforeExpr}),_else:createKeyword("else",{beforeExpr}),_finally:createKeyword("finally"),_function:createKeyword("function",{startsExpr:true}),_if:createKeyword("if"),_return:createKeyword("return",{beforeExpr}),_switch:createKeyword("switch"),_throw:createKeyword("throw",{beforeExpr,prefix:true,startsExpr:true}),_try:createKeyword("try"),_var:createKeyword("var"),_const:createKeyword("const"),_with:createKeyword("with"),_new:createKeyword("new",{beforeExpr,startsExpr:true}),_this:createKeyword("this",{startsExpr:true}),_super:createKeyword("super",{startsExpr:true}),_class:createKeyword("class",{startsExpr:true}),_extends:createKeyword("extends",{beforeExpr}),_export:createKeyword("export"),_import:createKeyword("import",{startsExpr:true}),_null:createKeyword("null",{startsExpr:true}),_true:createKeyword("true",{startsExpr:true}),_false:createKeyword("false",{startsExpr:true}),_typeof:createKeyword("typeof",{beforeExpr,prefix:true,startsExpr:true}),_void:createKeyword("void",{beforeExpr,prefix:true,startsExpr:true}),_delete:createKeyword("delete",{beforeExpr,prefix:true,startsExpr:true}),_do:createKeyword("do",{isLoop:true,beforeExpr}),_for:createKeyword("for",{isLoop:true}),_while:createKeyword("while",{isLoop:true}),_as:createKeywordLike("as",{startsExpr:true}),_assert:createKeywordLike("assert",{startsExpr:true}),_async:createKeywordLike("async",{startsExpr:true}),_await:createKeywordLike("await",{startsExpr:true}),_from:createKeywordLike("from",{startsExpr:true}),_get:createKeywordLike("get",{startsExpr:true}),_let:createKeywordLike("let",{startsExpr:true}),_meta:createKeywordLike("meta",{startsExpr:true}),_of:createKeywordLike("of",{startsExpr:true}),_sent:createKeywordLike("sent",{startsExpr:true}),_set:createKeywordLike("set",{startsExpr:true}),_static:createKeywordLike("static",{startsExpr:true}),_using:createKeywordLike("using",{startsExpr:true}),_yield:createKeywordLike("yield",{startsExpr:true}),_asserts:createKeywordLike("asserts",{startsExpr:true}),_checks:createKeywordLike("checks",{startsExpr:true}),_exports:createKeywordLike("exports",{startsExpr:true}),_global:createKeywordLike("global",{startsExpr:true}),_implements:createKeywordLike("implements",{startsExpr:true}),_intrinsic:createKeywordLike("intrinsic",{startsExpr:true}),_infer:createKeywordLike("infer",{startsExpr:true}),_is:createKeywordLike("is",{startsExpr:true}),_mixins:createKeywordLike("mixins",{startsExpr:true}),_proto:createKeywordLike("proto",{startsExpr:true}),_require:createKeywordLike("require",{startsExpr:true}),_satisfies:createKeywordLike("satisfies",{startsExpr:true}),_keyof:createKeywordLike("keyof",{startsExpr:true}),_readonly:createKeywordLike("readonly",{startsExpr:true}),_unique:createKeywordLike("unique",{startsExpr:true}),_abstract:createKeywordLike("abstract",{startsExpr:true}),_declare:createKeywordLike("declare",{startsExpr:true}),_enum:createKeywordLike("enum",{startsExpr:true}),_module:createKeywordLike("module",{startsExpr:true}),_namespace:createKeywordLike("namespace",{startsExpr:true}),_interface:createKeywordLike("interface",{startsExpr:true}),_type:createKeywordLike("type",{startsExpr:true}),_opaque:createKeywordLike("opaque",{startsExpr:true}),name:createToken("name",{startsExpr:true}),string:createToken("string",{startsExpr:true}),num:createToken("num",{startsExpr:true}),bigint:createToken("bigint",{startsExpr:true}),decimal:createToken("decimal",{startsExpr:true}),regexp:createToken("regexp",{startsExpr:true}),privateName:createToken("#name",{startsExpr:true}),eof:createToken("eof"),jsxName:createToken("jsxName"),jsxText:createToken("jsxText",{beforeExpr:!0}),jsxTagStart:createToken("jsxTagStart",{startsExpr:!0}),jsxTagEnd:createToken("jsxTagEnd"),placeholder:createToken("%%",{startsExpr:!0})};function tokenIsIdentifier(token){return token>=93&&token<=130}function tokenIsKeywordOrIdentifier(token){return token>=58&&token<=130}function tokenIsLiteralPropertyName(token){return token>=58&&token<=134}function tokenCanStartExpression(token){return tokenStartsExprs[token]}function tokenIsFlowInterfaceOrTypeOrOpaque(token){return token>=127&&token<=129}function tokenIsKeyword(token){return token>=58&&token<=92}function tokenLabelName(token){return tokenLabels[token]}function tokenOperatorPrecedence(token){return tokenBinops[token]}function tokenIsTemplate(token){return token>=24&&token<=25}function getExportedToken(token){return tokenTypes[token]}function _objectWithoutPropertiesLoose(source,excluded){if(null==source)return {};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}tokenTypes[8].updateContext=context=>{context.pop();},tokenTypes[5].updateContext=tokenTypes[7].updateContext=tokenTypes[23].updateContext=context=>{context.push(types.brace);},tokenTypes[22].updateContext=context=>{context[context.length-1]===types.template?context.pop():context.push(types.template);},tokenTypes[140].updateContext=context=>{context.push(types.j_expr,types.j_oTag);};class Position{constructor(line,col,index){this.line=void 0,this.column=void 0,this.index=void 0,this.line=line,this.column=col,this.index=index;}}class SourceLocation{constructor(start,end){this.start=void 0,this.end=void 0,this.filename=void 0,this.identifierName=void 0,this.start=start,this.end=end;}}function createPositionWithColumnOffset(position,columnOffset){const{line,column,index}=position;return new Position(line,column+columnOffset,index+columnOffset)}var ParseErrorCode={SyntaxError:"BABEL_PARSER_SYNTAX_ERROR",SourceTypeModuleError:"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"};const reflect=(keys,last=keys.length-1)=>({get(){return keys.reduce(((object,key)=>object[key]),this)},set(value){keys.reduce(((item,key,i)=>i===last?item[key]=value:item[key]),this);}}),instantiate=(constructor,properties,descriptors)=>Object.keys(descriptors).map((key=>[key,descriptors[key]])).filter((([,descriptor])=>!!descriptor)).map((([key,descriptor])=>[key,"function"==typeof descriptor?{value:descriptor,enumerable:!1}:"string"==typeof descriptor.reflect?Object.assign({},descriptor,reflect(descriptor.reflect.split("."))):descriptor])).reduce(((instance,[key,descriptor])=>Object.defineProperty(instance,key,Object.assign({configurable:!0},descriptor))),Object.assign(new constructor,properties));var ModuleErrors={ImportMetaOutsideModule:{message:"import.meta may appear only with 'sourceType: \"module\"'",code:ParseErrorCode.SourceTypeModuleError},ImportOutsideModule:{message:"'import' and 'export' may appear only with 'sourceType: \"module\"'",code:ParseErrorCode.SourceTypeModuleError}};const NodeDescriptions={ArrayPattern:"array destructuring pattern",AssignmentExpression:"assignment expression",AssignmentPattern:"assignment expression",ArrowFunctionExpression:"arrow function expression",ConditionalExpression:"conditional expression",CatchClause:"catch clause",ForOfStatement:"for-of statement",ForInStatement:"for-in statement",ForStatement:"for-loop",FormalParameters:"function parameter list",Identifier:"identifier",ImportSpecifier:"import specifier",ImportDefaultSpecifier:"import default specifier",ImportNamespaceSpecifier:"import namespace specifier",ObjectPattern:"object destructuring pattern",ParenthesizedExpression:"parenthesized expression",RestElement:"rest element",UpdateExpression:{true:"prefix operation",false:"postfix operation"},VariableDeclarator:"variable declaration",YieldExpression:"yield expression"},toNodeDescription=({type,prefix})=>"UpdateExpression"===type?NodeDescriptions.UpdateExpression[String(prefix)]:NodeDescriptions[type];var StandardErrors={AccessorIsGenerator:({kind})=>`A ${kind}ter cannot be a generator.`,ArgumentsInClass:"'arguments' is only allowed in functions and class methods.",AsyncFunctionInSingleStatementContext:"Async functions can only be declared at the top level or inside a block.",AwaitBindingIdentifier:"Can not use 'await' as identifier inside an async function.",AwaitBindingIdentifierInStaticBlock:"Can not use 'await' as identifier inside a static block.",AwaitExpressionFormalParameter:"'await' is not allowed in async function parameters.",AwaitInUsingBinding:"'await' is not allowed to be used as a name in 'using' declarations.",AwaitNotInAsyncContext:"'await' is only allowed within async functions and at the top levels of modules.",AwaitNotInAsyncFunction:"'await' is only allowed within async functions.",BadGetterArity:"A 'get' accessor must not have any formal parameters.",BadSetterArity:"A 'set' accessor must have exactly one formal parameter.",BadSetterRestParameter:"A 'set' accessor function argument must not be a rest parameter.",ConstructorClassField:"Classes may not have a field named 'constructor'.",ConstructorClassPrivateField:"Classes may not have a private field named '#constructor'.",ConstructorIsAccessor:"Class constructor may not be an accessor.",ConstructorIsAsync:"Constructor can't be an async function.",ConstructorIsGenerator:"Constructor can't be a generator.",DeclarationMissingInitializer:({kind})=>`Missing initializer in ${kind} declaration.`,DecoratorArgumentsOutsideParentheses:"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.",DecoratorBeforeExport:"Decorators must be placed *before* the 'export' keyword. Remove the 'decoratorsBeforeExport: true' option to use the 'export @decorator class {}' syntax.",DecoratorsBeforeAfterExport:"Decorators can be placed *either* before or after the 'export' keyword, but not in both locations at the same time.",DecoratorConstructor:"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?",DecoratorExportClass:"Decorators must be placed *after* the 'export' keyword. Remove the 'decoratorsBeforeExport: false' option to use the '@decorator export class {}' syntax.",DecoratorSemicolon:"Decorators must not be followed by a semicolon.",DecoratorStaticBlock:"Decorators can't be used with a static block.",DeletePrivateField:"Deleting a private field is not allowed.",DestructureNamedImport:"ES2015 named imports do not destructure. Use another statement for destructuring after the import.",DuplicateConstructor:"Duplicate constructor in the same class.",DuplicateDefaultExport:"Only one default export allowed per module.",DuplicateExport:({exportName})=>`\`${exportName}\` has already been exported. Exported identifiers must be unique.`,DuplicateProto:"Redefinition of __proto__ property.",DuplicateRegExpFlags:"Duplicate regular expression flag.",ElementAfterRest:"Rest element must be last element.",EscapedCharNotAnIdentifier:"Invalid Unicode escape.",ExportBindingIsString:({localName,exportName})=>`A string literal cannot be used as an exported binding without \`from\`.\n- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`,ExportDefaultFromAsIdentifier:"'from' is not allowed as an identifier after 'export default'.",ForInOfLoopInitializer:({type})=>`'${"ForInStatement"===type?"for-in":"for-of"}' loop variable declaration may not have an initializer.`,ForInUsing:"For-in loop may not start with 'using' declaration.",ForOfAsync:"The left-hand side of a for-of loop may not be 'async'.",ForOfLet:"The left-hand side of a for-of loop may not start with 'let'.",GeneratorInSingleStatementContext:"Generators can only be declared at the top level or inside a block.",IllegalBreakContinue:({type})=>`Unsyntactic ${"BreakStatement"===type?"break":"continue"}.`,IllegalLanguageModeDirective:"Illegal 'use strict' directive in function with non-simple parameter list.",IllegalReturn:"'return' outside of function.",ImportBindingIsString:({importName})=>`A string literal cannot be used as an imported binding.\n- Did you mean \`import { "${importName}" as foo }\`?`,ImportCallArgumentTrailingComma:"Trailing comma is disallowed inside import(...) arguments.",ImportCallArity:({maxArgumentCount})=>`\`import()\` requires exactly ${1===maxArgumentCount?"one argument":"one or two arguments"}.`,ImportCallNotNewExpression:"Cannot use new with import(...).",ImportCallSpreadArgument:"`...` is not allowed in `import()`.",ImportJSONBindingNotDefault:"A JSON module can only be imported with `default`.",ImportReflectionHasAssertion:"`import module x` cannot have assertions.",ImportReflectionNotBinding:'Only `import module x from "./module"` is valid.',IncompatibleRegExpUVFlags:"The 'u' and 'v' regular expression flags cannot be enabled at the same time.",InvalidBigIntLiteral:"Invalid BigIntLiteral.",InvalidCodePoint:"Code point out of bounds.",InvalidCoverInitializedName:"Invalid shorthand property initializer.",InvalidDecimal:"Invalid decimal.",InvalidDigit:({radix})=>`Expected number in radix ${radix}.`,InvalidEscapeSequence:"Bad character escape sequence.",InvalidEscapeSequenceTemplate:"Invalid escape sequence in template.",InvalidEscapedReservedWord:({reservedWord})=>`Escape sequence in keyword ${reservedWord}.`,InvalidIdentifier:({identifierName})=>`Invalid identifier ${identifierName}.`,InvalidLhs:({ancestor})=>`Invalid left-hand side in ${toNodeDescription(ancestor)}.`,InvalidLhsBinding:({ancestor})=>`Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,InvalidNumber:"Invalid number.",InvalidOrMissingExponent:"Floating-point numbers require a valid exponent after the 'e'.",InvalidOrUnexpectedToken:({unexpected})=>`Unexpected character '${unexpected}'.`,InvalidParenthesizedAssignment:"Invalid parenthesized assignment pattern.",InvalidPrivateFieldResolution:({identifierName})=>`Private name #${identifierName} is not defined.`,InvalidPropertyBindingPattern:"Binding member expression.",InvalidRecordProperty:"Only properties and spread elements are allowed in record definitions.",InvalidRestAssignmentPattern:"Invalid rest operator's argument.",LabelRedeclaration:({labelName})=>`Label '${labelName}' is already declared.`,LetInLexicalBinding:"'let' is not allowed to be used as a name in 'let' or 'const' declarations.",LineTerminatorBeforeArrow:"No line break is allowed before '=>'.",MalformedRegExpFlags:"Invalid regular expression flag.",MissingClassName:"A class name is required.",MissingEqInAssignment:"Only '=' operator can be used for specifying default value.",MissingSemicolon:"Missing semicolon.",MissingPlugin:({missingPlugin})=>`This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name=>JSON.stringify(name))).join(", ")}.`,MissingOneOfPlugins:({missingPlugin})=>`This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name=>JSON.stringify(name))).join(", ")}.`,MissingUnicodeEscape:"Expecting Unicode escape sequence \\uXXXX.",MixingCoalesceWithLogical:"Nullish coalescing operator(??) requires parens when mixing with logical operators.",ModuleAttributeDifferentFromType:"The only accepted module attribute is `type`.",ModuleAttributeInvalidValue:"Only string literals are allowed as module attribute values.",ModuleAttributesWithDuplicateKeys:({key})=>`Duplicate key "${key}" is not allowed in module attributes.`,ModuleExportNameHasLoneSurrogate:({surrogateCharCode})=>`An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`,ModuleExportUndefined:({localName})=>`Export '${localName}' is not defined.`,MultipleDefaultsInSwitch:"Multiple default clauses.",NewlineAfterThrow:"Illegal newline after throw.",NoCatchOrFinally:"Missing catch or finally clause.",NumberIdentifier:"Identifier directly after number.",NumericSeparatorInEscapeSequence:"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.",ObsoleteAwaitStar:"'await*' has been removed from the async functions proposal. Use Promise.all() instead.",OptionalChainingNoNew:"Constructors in/after an Optional Chain are not allowed.",OptionalChainingNoTemplate:"Tagged Template Literals are not allowed in optionalChain.",OverrideOnConstructor:"'override' modifier cannot appear on a constructor declaration.",ParamDupe:"Argument name clash.",PatternHasAccessor:"Object pattern can't contain getter or setter.",PatternHasMethod:"Object pattern can't contain methods.",PrivateInExpectedIn:({identifierName})=>`Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`,PrivateNameRedeclaration:({identifierName})=>`Duplicate private name #${identifierName}.`,RecordExpressionBarIncorrectEndSyntaxType:"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",RecordExpressionBarIncorrectStartSyntaxType:"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",RecordExpressionHashIncorrectStartSyntaxType:"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",RecordNoProto:"'__proto__' is not allowed in Record expressions.",RestTrailingComma:"Unexpected trailing comma after rest element.",SloppyFunction:"In non-strict mode code, functions can only be declared at top level or inside a block.",SloppyFunctionAnnexB:"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.",StaticPrototype:"Classes may not have static property named prototype.",SuperNotAllowed:"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?",SuperPrivateField:"Private fields can't be accessed on super.",TrailingDecorator:"Decorators must be attached to a class element.",TupleExpressionBarIncorrectEndSyntaxType:"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",TupleExpressionBarIncorrectStartSyntaxType:"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.",TupleExpressionHashIncorrectStartSyntaxType:"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.",UnexpectedArgumentPlaceholder:"Unexpected argument placeholder.",UnexpectedAwaitAfterPipelineBody:'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.',UnexpectedDigitAfterHash:"Unexpected digit after hash token.",UnexpectedImportExport:"'import' and 'export' may only appear at the top level.",UnexpectedKeyword:({keyword})=>`Unexpected keyword '${keyword}'.`,UnexpectedLeadingDecorator:"Leading decorators must be attached to a class declaration.",UnexpectedLexicalDeclaration:"Lexical declaration cannot appear in a single-statement context.",UnexpectedNewTarget:"`new.target` can only be used in functions or class properties.",UnexpectedNumericSeparator:"A numeric separator is only allowed between two digits.",UnexpectedPrivateField:"Unexpected private name.",UnexpectedReservedWord:({reservedWord})=>`Unexpected reserved word '${reservedWord}'.`,UnexpectedSuper:"'super' is only allowed in object methods and classes.",UnexpectedToken:({expected,unexpected})=>`Unexpected token${unexpected?` '${unexpected}'.`:""}${expected?`, expected "${expected}"`:""}`,UnexpectedTokenUnaryExponentiation:"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.",UnexpectedUsingDeclaration:"Using declaration cannot appear in the top level when source type is `script`.",UnsupportedBind:"Binding should be performed on object property.",UnsupportedDecoratorExport:"A decorated export must export a class declaration.",UnsupportedDefaultExport:"Only expressions, functions or classes are allowed as the `default` export.",UnsupportedImport:"`import` can only be used in `import()` or `import.meta`.",UnsupportedMetaProperty:({target,onlyValidPropertyName})=>`The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,UnsupportedParameterDecorator:"Decorators cannot be used to decorate parameters.",UnsupportedPropertyDecorator:"Decorators cannot be used to decorate object literal properties.",UnsupportedSuper:"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).",UnterminatedComment:"Unterminated comment.",UnterminatedRegExp:"Unterminated regular expression.",UnterminatedString:"Unterminated string constant.",UnterminatedTemplate:"Unterminated template.",UsingDeclarationHasBindingPattern:"Using declaration cannot have destructuring patterns.",VarRedeclaration:({identifierName})=>`Identifier '${identifierName}' has already been declared.`,YieldBindingIdentifier:"Can not use 'yield' as identifier inside a generator.",YieldInParameter:"Yield expression is not allowed in formal parameters.",ZeroDigitNumericSeparator:"Numeric separator can not be used after leading 0."};const UnparenthesizedPipeBodyDescriptions=new Set(["ArrowFunctionExpression","AssignmentExpression","ConditionalExpression","YieldExpression"]);var PipelineOperatorErrors={PipeBodyIsTighter:"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.",PipeTopicRequiresHackPipes:'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.',PipeTopicUnbound:"Topic reference is unbound; it must be inside a pipe body.",PipeTopicUnconfiguredToken:({token})=>`Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`,PipeTopicUnused:"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.",PipeUnparenthesizedBody:({type})=>`Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({type})}; please wrap it in parentheses.`,PipelineBodyNoArrow:'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.',PipelineBodySequenceExpression:"Pipeline body may not be a comma-separated sequence expression.",PipelineHeadSequenceExpression:"Pipeline head should not be a comma-separated sequence expression.",PipelineTopicUnused:"Pipeline is in topic style but does not use topic reference.",PrimaryTopicNotAllowed:"Topic reference was used in a lexical context without topic binding.",PrimaryTopicRequiresSmartPipeline:'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.'};const _excluded$1=["toMessage"],_excluded2$1=["message"];function toParseErrorConstructor(_ref){let{toMessage}=_ref,properties=_objectWithoutPropertiesLoose(_ref,_excluded$1);return function constructor({loc,details}){return instantiate(SyntaxError,Object.assign({},properties,{loc}),{clone(overrides={}){const loc=overrides.loc||{};return constructor({loc:new Position("line"in loc?loc.line:this.loc.line,"column"in loc?loc.column:this.loc.column,"index"in loc?loc.index:this.loc.index),details:Object.assign({},this.details,overrides.details)})},details:{value:details,enumerable:!1},message:{get(){return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`},set(value){Object.defineProperty(this,"message",{value});}},pos:{reflect:"loc.index",enumerable:!0},missingPlugin:"missingPlugin"in details&&{reflect:"details.missingPlugin",enumerable:!0}})}}function ParseErrorEnum(argument,syntaxPlugin){if(Array.isArray(argument))return parseErrorTemplates=>ParseErrorEnum(parseErrorTemplates,argument[0]);const ParseErrorConstructors={};for(const reasonCode of Object.keys(argument)){const template=argument[reasonCode],_ref2="string"==typeof template?{message:()=>template}:"function"==typeof template?{message:template}:template,{message}=_ref2,rest=_objectWithoutPropertiesLoose(_ref2,_excluded2$1),toMessage="string"==typeof message?()=>message:message;ParseErrorConstructors[reasonCode]=toParseErrorConstructor(Object.assign({code:ParseErrorCode.SyntaxError,reasonCode,toMessage},syntaxPlugin?{syntaxPlugin}:{},rest));}return ParseErrorConstructors}const Errors=Object.assign({},ParseErrorEnum(ModuleErrors),ParseErrorEnum(StandardErrors),ParseErrorEnum({StrictDelete:"Deleting local variable in strict mode.",StrictEvalArguments:({referenceName})=>`Assigning to '${referenceName}' in strict mode.`,StrictEvalArgumentsBinding:({bindingName})=>`Binding '${bindingName}' in strict mode.`,StrictFunction:"In strict mode code, functions can only be declared at top level or inside a block.",StrictNumericEscape:"The only valid numeric escape in strict mode is '\\0'.",StrictOctalLiteral:"Legacy octal literals are not allowed in strict mode.",StrictWith:"'with' in strict mode."}),ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors)),{defineProperty}=Object,toUnenumerable=(object,key)=>defineProperty(object,key,{enumerable:!1,value:object[key]});function toESTreeLocation(node){return node.loc.start&&toUnenumerable(node.loc.start,"index"),node.loc.end&&toUnenumerable(node.loc.end,"index"),node}let nonASCIIidentifierStartChars="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࡰ-ࢇࢉ-ࢎࢠ-ࣉऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౝౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೝೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜑᜟ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭌᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꟊꟐꟑꟓꟕ-ꟙꟲ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",nonASCIIidentifierChars="‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࢘-࢟࣊-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄ఼ా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ೳഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-໎໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜕ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠏-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿ-ᫎᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";const nonASCIIidentifierStart=new RegExp("["+nonASCIIidentifierStartChars+"]"),nonASCIIidentifier=new RegExp("["+nonASCIIidentifierStartChars+nonASCIIidentifierChars+"]");nonASCIIidentifierStartChars=nonASCIIidentifierChars=null;const astralIdentifierStartCodes=[0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191],astralIdentifierCodes=[509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];function isInAstralSet(code,set){let pos=65536;for(let i=0,length=set.length;i<length;i+=2){if(pos+=set[i],pos>code)return !1;if(pos+=set[i+1],pos>=code)return !0}return !1}function isIdentifierStart(code){return code<65?36===code:code<=90||(code<97?95===code:code<=122||(code<=65535?code>=170&&nonASCIIidentifierStart.test(String.fromCharCode(code)):isInAstralSet(code,astralIdentifierStartCodes)))}function isIdentifierChar(code){return code<48?36===code:code<58||!(code<65)&&(code<=90||(code<97?95===code:code<=122||(code<=65535?code>=170&&nonASCIIidentifier.test(String.fromCharCode(code)):isInAstralSet(code,astralIdentifierStartCodes)||isInAstralSet(code,astralIdentifierCodes))))}const reservedWords_strict=["implements","interface","let","package","private","protected","public","static","yield"],reservedWords_strictBind=["eval","arguments"],keywords=new Set(["break","case","catch","continue","debugger","default","do","else","finally","for","function","if","return","switch","throw","try","var","const","while","with","new","this","super","class","extends","export","import","null","true","false","in","instanceof","typeof","void","delete"]),reservedWordsStrictSet=new Set(reservedWords_strict),reservedWordsStrictBindSet=new Set(reservedWords_strictBind);function isReservedWord(word,inModule){return inModule&&"await"===word||"enum"===word}function isStrictReservedWord(word,inModule){return isReservedWord(word,inModule)||reservedWordsStrictSet.has(word)}function isStrictBindOnlyReservedWord(word){return reservedWordsStrictBindSet.has(word)}function isStrictBindReservedWord(word,inModule){return isStrictReservedWord(word,inModule)||isStrictBindOnlyReservedWord(word)}const reservedWordLikeSet=new Set(["break","case","catch","continue","debugger","default","do","else","finally","for","function","if","return","switch","throw","try","var","const","while","with","new","this","super","class","extends","export","import","null","true","false","in","instanceof","typeof","void","delete","implements","interface","let","package","private","protected","public","static","yield","eval","arguments","enum","await"]);class Scope{constructor(flags){this.var=new Set,this.lexical=new Set,this.functions=new Set,this.flags=flags;}}class ScopeHandler{constructor(parser,inModule){this.parser=void 0,this.scopeStack=[],this.inModule=void 0,this.undefinedExports=new Map,this.parser=parser,this.inModule=inModule;}get inTopLevel(){return (1&this.currentScope().flags)>0}get inFunction(){return (2&this.currentVarScopeFlags())>0}get allowSuper(){return (16&this.currentThisScopeFlags())>0}get allowDirectSuper(){return (32&this.currentThisScopeFlags())>0}get inClass(){return (64&this.currentThisScopeFlags())>0}get inClassAndNotInNonArrowFunction(){const flags=this.currentThisScopeFlags();return (64&flags)>0&&0==(2&flags)}get inStaticBlock(){for(let i=this.scopeStack.length-1;;i--){const{flags}=this.scopeStack[i];if(128&flags)return !0;if(451&flags)return !1}}get inNonArrowFunction(){return (2&this.currentThisScopeFlags())>0}get treatFunctionsAsVar(){return this.treatFunctionsAsVarInScope(this.currentScope())}createScope(flags){return new Scope(flags)}enter(flags){this.scopeStack.push(this.createScope(flags));}exit(){return this.scopeStack.pop().flags}treatFunctionsAsVarInScope(scope){return !!(130&scope.flags||!this.parser.inModule&&1&scope.flags)}declareName(name,bindingType,loc){let scope=this.currentScope();if(8&bindingType||16&bindingType)this.checkRedeclarationInScope(scope,name,bindingType,loc),16&bindingType?scope.functions.add(name):scope.lexical.add(name),8&bindingType&&this.maybeExportDefined(scope,name);else if(4&bindingType)for(let i=this.scopeStack.length-1;i>=0&&(scope=this.scopeStack[i],this.checkRedeclarationInScope(scope,name,bindingType,loc),scope.var.add(name),this.maybeExportDefined(scope,name),!(387&scope.flags));--i);this.parser.inModule&&1&scope.flags&&this.undefinedExports.delete(name);}maybeExportDefined(scope,name){this.parser.inModule&&1&scope.flags&&this.undefinedExports.delete(name);}checkRedeclarationInScope(scope,name,bindingType,loc){this.isRedeclaredInScope(scope,name,bindingType)&&this.parser.raise(Errors.VarRedeclaration,{at:loc,identifierName:name});}isRedeclaredInScope(scope,name,bindingType){return !!(1&bindingType)&&(8&bindingType?scope.lexical.has(name)||scope.functions.has(name)||scope.var.has(name):16&bindingType?scope.lexical.has(name)||!this.treatFunctionsAsVarInScope(scope)&&scope.var.has(name):scope.lexical.has(name)&&!(8&scope.flags&&scope.lexical.values().next().value===name)||!this.treatFunctionsAsVarInScope(scope)&&scope.functions.has(name))}checkLocalExport(id){const{name}=id,topLevelScope=this.scopeStack[0];topLevelScope.lexical.has(name)||topLevelScope.var.has(name)||topLevelScope.functions.has(name)||this.undefinedExports.set(name,id.loc.start);}currentScope(){return this.scopeStack[this.scopeStack.length-1]}currentVarScopeFlags(){for(let i=this.scopeStack.length-1;;i--){const{flags}=this.scopeStack[i];if(387&flags)return flags}}currentThisScopeFlags(){for(let i=this.scopeStack.length-1;;i--){const{flags}=this.scopeStack[i];if(451&flags&&!(4&flags))return flags}}}class FlowScope extends Scope{constructor(...args){super(...args),this.declareFunctions=new Set;}}class FlowScopeHandler extends ScopeHandler{createScope(flags){return new FlowScope(flags)}declareName(name,bindingType,loc){const scope=this.currentScope();if(2048&bindingType)return this.checkRedeclarationInScope(scope,name,bindingType,loc),this.maybeExportDefined(scope,name),void scope.declareFunctions.add(name);super.declareName(name,bindingType,loc);}isRedeclaredInScope(scope,name,bindingType){return !!super.isRedeclaredInScope(scope,name,bindingType)||!!(2048&bindingType)&&(!scope.declareFunctions.has(name)&&(scope.lexical.has(name)||scope.functions.has(name)))}checkLocalExport(id){this.scopeStack[0].declareFunctions.has(id.name)||super.checkLocalExport(id);}}class BaseParser{constructor(){this.sawUnambiguousESM=!1,this.ambiguousScriptDifferentAst=!1;}hasPlugin(pluginConfig){if("string"==typeof pluginConfig)return this.plugins.has(pluginConfig);{const[pluginName,pluginOptions]=pluginConfig;if(!this.hasPlugin(pluginName))return !1;const actualOptions=this.plugins.get(pluginName);for(const key of Object.keys(pluginOptions))if((null==actualOptions?void 0:actualOptions[key])!==pluginOptions[key])return !1;return !0}}getPluginOption(plugin,name){var _this$plugins$get;return null==(_this$plugins$get=this.plugins.get(plugin))?void 0:_this$plugins$get[name]}}function setTrailingComments(node,comments){void 0===node.trailingComments?node.trailingComments=comments:node.trailingComments.unshift(...comments);}function setInnerComments(node,comments){void 0===node.innerComments?node.innerComments=comments:node.innerComments.unshift(...comments);}function adjustInnerComments(node,elements,commentWS){let lastElement=null,i=elements.length;for(;null===lastElement&&i>0;)lastElement=elements[--i];null===lastElement||lastElement.start>commentWS.start?setInnerComments(node,commentWS.comments):setTrailingComments(lastElement,commentWS.comments);}class CommentsParser extends BaseParser{addComment(comment){this.filename&&(comment.loc.filename=this.filename),this.state.comments.push(comment);}processComment(node){const{commentStack}=this.state,commentStackLength=commentStack.length;if(0===commentStackLength)return;let i=commentStackLength-1;const lastCommentWS=commentStack[i];lastCommentWS.start===node.end&&(lastCommentWS.leadingNode=node,i--);const{start:nodeStart}=node;for(;i>=0;i--){const commentWS=commentStack[i],commentEnd=commentWS.end;if(!(commentEnd>nodeStart)){commentEnd===nodeStart&&(commentWS.trailingNode=node);break}commentWS.containingNode=node,this.finalizeComment(commentWS),commentStack.splice(i,1);}}finalizeComment(commentWS){const{comments}=commentWS;if(null!==commentWS.leadingNode||null!==commentWS.trailingNode)null!==commentWS.leadingNode&&setTrailingComments(commentWS.leadingNode,comments),null!==commentWS.trailingNode&&function(node,comments){void 0===node.leadingComments?node.leadingComments=comments:node.leadingComments.unshift(...comments);}(commentWS.trailingNode,comments);else {const{containingNode:node,start:commentStart}=commentWS;if(44===this.input.charCodeAt(commentStart-1))switch(node.type){case"ObjectExpression":case"ObjectPattern":case"RecordExpression":adjustInnerComments(node,node.properties,commentWS);break;case"CallExpression":case"OptionalCallExpression":adjustInnerComments(node,node.arguments,commentWS);break;case"FunctionDeclaration":case"FunctionExpression":case"ArrowFunctionExpression":case"ObjectMethod":case"ClassMethod":case"ClassPrivateMethod":adjustInnerComments(node,node.params,commentWS);break;case"ArrayExpression":case"ArrayPattern":case"TupleExpression":adjustInnerComments(node,node.elements,commentWS);break;case"ExportNamedDeclaration":case"ImportDeclaration":adjustInnerComments(node,node.specifiers,commentWS);break;default:setInnerComments(node,comments);}else setInnerComments(node,comments);}}finalizeRemainingComments(){const{commentStack}=this.state;for(let i=commentStack.length-1;i>=0;i--)this.finalizeComment(commentStack[i]);this.state.commentStack=[];}resetPreviousNodeTrailingComments(node){const{commentStack}=this.state,{length}=commentStack;if(0===length)return;const commentWS=commentStack[length-1];commentWS.leadingNode===node&&(commentWS.leadingNode=null);}takeSurroundingComments(node,start,end){const{commentStack}=this.state,commentStackLength=commentStack.length;if(0===commentStackLength)return;let i=commentStackLength-1;for(;i>=0;i--){const commentWS=commentStack[i],commentEnd=commentWS.end;if(commentWS.start===end)commentWS.leadingNode=node;else if(commentEnd===start)commentWS.trailingNode=node;else if(commentEnd<start)break}}}const lineBreak=/\r\n?|[\n\u2028\u2029]/,lineBreakG=new RegExp(lineBreak.source,"g");function isNewLine(code){switch(code){case 10:case 13:case 8232:case 8233:return !0;default:return !1}}const skipWhiteSpace=/(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g,skipWhiteSpaceToLineBreak=new RegExp("(?=("+/(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y.source+"))\\1"+/(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source,"y");function isWhitespace(code){switch(code){case 9:case 11:case 12:case 32:case 160:case 5760:case 8192:case 8193:case 8194:case 8195:case 8196:case 8197:case 8198:case 8199:case 8200:case 8201:case 8202:case 8239:case 8287:case 12288:case 65279:return !0;default:return !1}}class State{constructor(){this.strict=void 0,this.curLine=void 0,this.lineStart=void 0,this.startLoc=void 0,this.endLoc=void 0,this.errors=[],this.potentialArrowAt=-1,this.noArrowAt=[],this.noArrowParamsConversionAt=[],this.maybeInArrowParameters=!1,this.inType=!1,this.noAnonFunctionType=!1,this.hasFlowComment=!1,this.isAmbientContext=!1,this.inAbstractClass=!1,this.inDisallowConditionalTypesContext=!1,this.topicContext={maxNumOfResolvableTopics:0,maxTopicIndex:null},this.soloAwait=!1,this.inFSharpPipelineDirectBody=!1,this.labels=[],this.comments=[],this.commentStack=[],this.pos=0,this.type=137,this.value=null,this.start=0,this.end=0,this.lastTokEndLoc=null,this.lastTokStartLoc=null,this.lastTokStart=0,this.context=[types.brace],this.canStartJSXElement=!0,this.containsEsc=!1,this.firstInvalidTemplateEscapePos=null,this.strictErrors=new Map,this.tokensLength=0;}init({strictMode,sourceType,startLine,startColumn}){this.strict=!1!==strictMode&&(!0===strictMode||"module"===sourceType),this.curLine=startLine,this.lineStart=-startColumn,this.startLoc=this.endLoc=new Position(startLine,startColumn,0);}curPosition(){return new Position(this.curLine,this.pos-this.lineStart,this.pos)}clone(skipArrays){const state=new State,keys=Object.keys(this);for(let i=0,length=keys.length;i<length;i++){const key=keys[i];let val=this[key];!skipArrays&&Array.isArray(val)&&(val=val.slice()),state[key]=val;}return state}}var _isDigit=function(code){return code>=48&&code<=57};const forbiddenNumericSeparatorSiblings={decBinOct:new Set([46,66,69,79,95,98,101,111]),hex:new Set([46,88,95,120])},isAllowedNumericSeparatorSibling={bin:ch=>48===ch||49===ch,oct:ch=>ch>=48&&ch<=55,dec:ch=>ch>=48&&ch<=57,hex:ch=>ch>=48&&ch<=57||ch>=65&&ch<=70||ch>=97&&ch<=102};function readStringContents(type,input,pos,lineStart,curLine,errors){const initialPos=pos,initialLineStart=lineStart,initialCurLine=curLine;let out="",firstInvalidLoc=null,chunkStart=pos;const{length}=input;for(;;){if(pos>=length){errors.unterminated(initialPos,initialLineStart,initialCurLine),out+=input.slice(chunkStart,pos);break}const ch=input.charCodeAt(pos);if(isStringEnd(type,ch,input,pos)){out+=input.slice(chunkStart,pos);break}if(92===ch){out+=input.slice(chunkStart,pos);const res=readEscapedChar(input,pos,lineStart,curLine,"template"===type,errors);null!==res.ch||firstInvalidLoc?out+=res.ch:firstInvalidLoc={pos,lineStart,curLine},({pos,lineStart,curLine}=res),chunkStart=pos;}else 8232===ch||8233===ch?(++curLine,lineStart=++pos):10===ch||13===ch?"template"===type?(out+=input.slice(chunkStart,pos)+"\n",++pos,13===ch&&10===input.charCodeAt(pos)&&++pos,++curLine,chunkStart=lineStart=pos):errors.unterminated(initialPos,initialLineStart,initialCurLine):++pos;}return {pos,str:out,firstInvalidLoc,lineStart,curLine,containsInvalid:!!firstInvalidLoc}}function isStringEnd(type,ch,input,pos){return "template"===type?96===ch||36===ch&&123===input.charCodeAt(pos+1):ch===("double"===type?34:39)}function readEscapedChar(input,pos,lineStart,curLine,inTemplate,errors){const throwOnInvalid=!inTemplate;pos++;const res=ch=>({pos,ch,lineStart,curLine}),ch=input.charCodeAt(pos++);switch(ch){case 110:return res("\n");case 114:return res("\r");case 120:{let code;return ({code,pos}=readHexChar(input,pos,lineStart,curLine,2,!1,throwOnInvalid,errors)),res(null===code?null:String.fromCharCode(code))}case 117:{let code;return ({code,pos}=readCodePoint(input,pos,lineStart,curLine,throwOnInvalid,errors)),res(null===code?null:String.fromCodePoint(code))}case 116:return res("\t");case 98:return res("\b");case 118:return res("\v");case 102:return res("\f");case 13:10===input.charCodeAt(pos)&&++pos;case 10:lineStart=pos,++curLine;case 8232:case 8233:return res("");case 56:case 57:if(inTemplate)return res(null);errors.strictNumericEscape(pos-1,lineStart,curLine);default:if(ch>=48&&ch<=55){const startPos=pos-1;let octalStr=input.slice(startPos,pos+2).match(/^[0-7]+/)[0],octal=parseInt(octalStr,8);octal>255&&(octalStr=octalStr.slice(0,-1),octal=parseInt(octalStr,8)),pos+=octalStr.length-1;const next=input.charCodeAt(pos);if("0"!==octalStr||56===next||57===next){if(inTemplate)return res(null);errors.strictNumericEscape(startPos,lineStart,curLine);}return res(String.fromCharCode(octal))}return res(String.fromCharCode(ch))}}function readHexChar(input,pos,lineStart,curLine,len,forceLen,throwOnInvalid,errors){const initialPos=pos;let n;return ({n,pos}=readInt(input,pos,lineStart,curLine,16,len,forceLen,!1,errors,!throwOnInvalid)),null===n&&(throwOnInvalid?errors.invalidEscapeSequence(initialPos,lineStart,curLine):pos=initialPos-1),{code:n,pos}}function readInt(input,pos,lineStart,curLine,radix,len,forceLen,allowNumSeparator,errors,bailOnError){const start=pos,forbiddenSiblings=16===radix?forbiddenNumericSeparatorSiblings.hex:forbiddenNumericSeparatorSiblings.decBinOct,isAllowedSibling=16===radix?isAllowedNumericSeparatorSibling.hex:10===radix?isAllowedNumericSeparatorSibling.dec:8===radix?isAllowedNumericSeparatorSibling.oct:isAllowedNumericSeparatorSibling.bin;let invalid=!1,total=0;for(let i=0,e=null==len?1/0:len;i<e;++i){const code=input.charCodeAt(pos);let val;if(95!==code||"bail"===allowNumSeparator){if(val=code>=97?code-97+10:code>=65?code-65+10:_isDigit(code)?code-48:1/0,val>=radix){if(val<=9&&bailOnError)return {n:null,pos};if(val<=9&&errors.invalidDigit(pos,lineStart,curLine,radix))val=0;else {if(!forceLen)break;val=0,invalid=!0;}}++pos,total=total*radix+val;}else {const prev=input.charCodeAt(pos-1),next=input.charCodeAt(pos+1);if(allowNumSeparator){if(Number.isNaN(next)||!isAllowedSibling(next)||forbiddenSiblings.has(prev)||forbiddenSiblings.has(next)){if(bailOnError)return {n:null,pos};errors.unexpectedNumericSeparator(pos,lineStart,curLine);}}else {if(bailOnError)return {n:null,pos};errors.numericSeparatorInEscapeSequence(pos,lineStart,curLine);}++pos;}}return pos===start||null!=len&&pos-start!==len||invalid?{n:null,pos}:{n:total,pos}}function readCodePoint(input,pos,lineStart,curLine,throwOnInvalid,errors){let code;if(123===input.charCodeAt(pos)){if(++pos,({code,pos}=readHexChar(input,pos,lineStart,curLine,input.indexOf("}",pos)-pos,!0,throwOnInvalid,errors)),++pos,null!==code&&code>1114111){if(!throwOnInvalid)return {code:null,pos};errors.invalidCodePoint(pos,lineStart,curLine);}}else ({code,pos}=readHexChar(input,pos,lineStart,curLine,4,!1,throwOnInvalid,errors));return {code,pos}}const _excluded=["at"],_excluded2=["at"];function buildPosition(pos,lineStart,curLine){return new Position(curLine,pos-lineStart,pos)}const VALID_REGEX_FLAGS=new Set([103,109,115,105,121,117,100,118]);class Token{constructor(state){this.type=state.type,this.value=state.value,this.start=state.start,this.end=state.end,this.loc=new SourceLocation(state.startLoc,state.endLoc);}}class Tokenizer extends CommentsParser{constructor(options,input){super(),this.isLookahead=void 0,this.tokens=[],this.errorHandlers_readInt={invalidDigit:(pos,lineStart,curLine,radix)=>!!this.options.errorRecovery&&(this.raise(Errors.InvalidDigit,{at:buildPosition(pos,lineStart,curLine),radix}),!0),numericSeparatorInEscapeSequence:this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),unexpectedNumericSeparator:this.errorBuilder(Errors.UnexpectedNumericSeparator)},this.errorHandlers_readCodePoint=Object.assign({},this.errorHandlers_readInt,{invalidEscapeSequence:this.errorBuilder(Errors.InvalidEscapeSequence),invalidCodePoint:this.errorBuilder(Errors.InvalidCodePoint)}),this.errorHandlers_readStringContents_string=Object.assign({},this.errorHandlers_readCodePoint,{strictNumericEscape:(pos,lineStart,curLine)=>{this.recordStrictModeErrors(Errors.StrictNumericEscape,{at:buildPosition(pos,lineStart,curLine)});},unterminated:(pos,lineStart,curLine)=>{throw this.raise(Errors.UnterminatedString,{at:buildPosition(pos-1,lineStart,curLine)})}}),this.errorHandlers_readStringContents_template=Object.assign({},this.errorHandlers_readCodePoint,{strictNumericEscape:this.errorBuilder(Errors.StrictNumericEscape),unterminated:(pos,lineStart,curLine)=>{throw this.raise(Errors.UnterminatedTemplate,{at:buildPosition(pos,lineStart,curLine)})}}),this.state=new State,this.state.init(options),this.input=input,this.length=input.length,this.isLookahead=!1;}pushToken(token){this.tokens.length=this.state.tokensLength,this.tokens.push(token),++this.state.tokensLength;}next(){this.checkKeywordEscapes(),this.options.tokens&&this.pushToken(new Token(this.state)),this.state.lastTokStart=this.state.start,this.state.lastTokEndLoc=this.state.endLoc,this.state.lastTokStartLoc=this.state.startLoc,this.nextToken();}eat(type){return !!this.match(type)&&(this.next(),!0)}match(type){return this.state.type===type}createLookaheadState(state){return {pos:state.pos,value:null,type:state.type,start:state.start,end:state.end,context:[this.curContext()],inType:state.inType,startLoc:state.startLoc,lastTokEndLoc:state.lastTokEndLoc,curLine:state.curLine,lineStart:state.lineStart,curPosition:state.curPosition}}lookahead(){const old=this.state;this.state=this.createLookaheadState(old),this.isLookahead=!0,this.nextToken(),this.isLookahead=!1;const curr=this.state;return this.state=old,curr}nextTokenStart(){return this.nextTokenStartSince(this.state.pos)}nextTokenStartSince(pos){return skipWhiteSpace.lastIndex=pos,skipWhiteSpace.test(this.input)?skipWhiteSpace.lastIndex:pos}lookaheadCharCode(){return this.input.charCodeAt(this.nextTokenStart())}codePointAtPos(pos){let cp=this.input.charCodeAt(pos);if(55296==(64512&cp)&&++pos<this.input.length){const trail=this.input.charCodeAt(pos);56320==(64512&trail)&&(cp=65536+((1023&cp)<<10)+(1023&trail));}return cp}setStrict(strict){this.state.strict=strict,strict&&(this.state.strictErrors.forEach((([toParseError,at])=>this.raise(toParseError,{at}))),this.state.strictErrors.clear());}curContext(){return this.state.context[this.state.context.length-1]}nextToken(){this.skipSpace(),this.state.start=this.state.pos,this.isLookahead||(this.state.startLoc=this.state.curPosition()),this.state.pos>=this.length?this.finishToken(137):this.getTokenFromCode(this.codePointAtPos(this.state.pos));}skipBlockComment(commentEnd){let startLoc;this.isLookahead||(startLoc=this.state.curPosition());const start=this.state.pos,end=this.input.indexOf(commentEnd,start+2);if(-1===end)throw this.raise(Errors.UnterminatedComment,{at:this.state.curPosition()});for(this.state.pos=end+commentEnd.length,lineBreakG.lastIndex=start+2;lineBreakG.test(this.input)&&lineBreakG.lastIndex<=end;)++this.state.curLine,this.state.lineStart=lineBreakG.lastIndex;if(this.isLookahead)return;const comment={type:"CommentBlock",value:this.input.slice(start+2,end),start,end:end+commentEnd.length,loc:new SourceLocation(startLoc,this.state.curPosition())};return this.options.tokens&&this.pushToken(comment),comment}skipLineComment(startSkip){const start=this.state.pos;let startLoc;this.isLookahead||(startLoc=this.state.curPosition());let ch=this.input.charCodeAt(this.state.pos+=startSkip);if(this.state.pos<this.length)for(;!isNewLine(ch)&&++this.state.pos<this.length;)ch=this.input.charCodeAt(this.state.pos);if(this.isLookahead)return;const end=this.state.pos,comment={type:"CommentLine",value:this.input.slice(start+startSkip,end),start,end,loc:new SourceLocation(startLoc,this.state.curPosition())};return this.options.tokens&&this.pushToken(comment),comment}skipSpace(){const spaceStart=this.state.pos,comments=[];loop:for(;this.state.pos<this.length;){const ch=this.input.charCodeAt(this.state.pos);switch(ch){case 32:case 160:case 9:++this.state.pos;break;case 13:10===this.input.charCodeAt(this.state.pos+1)&&++this.state.pos;case 10:case 8232:case 8233:++this.state.pos,++this.state.curLine,this.state.lineStart=this.state.pos;break;case 47:switch(this.input.charCodeAt(this.state.pos+1)){case 42:{const comment=this.skipBlockComment("*/");void 0!==comment&&(this.addComment(comment),this.options.attachComment&&comments.push(comment));break}case 47:{const comment=this.skipLineComment(2);void 0!==comment&&(this.addComment(comment),this.options.attachComment&&comments.push(comment));break}default:break loop}break;default:if(isWhitespace(ch))++this.state.pos;else if(45===ch&&!this.inModule&&this.options.annexB){const pos=this.state.pos;if(45!==this.input.charCodeAt(pos+1)||62!==this.input.charCodeAt(pos+2)||!(0===spaceStart||this.state.lineStart>spaceStart))break loop;{const comment=this.skipLineComment(3);void 0!==comment&&(this.addComment(comment),this.options.attachComment&&comments.push(comment));}}else {if(60!==ch||this.inModule||!this.options.annexB)break loop;{const pos=this.state.pos;if(33!==this.input.charCodeAt(pos+1)||45!==this.input.charCodeAt(pos+2)||45!==this.input.charCodeAt(pos+3))break loop;{const comment=this.skipLineComment(4);void 0!==comment&&(this.addComment(comment),this.options.attachComment&&comments.push(comment));}}}}}if(comments.length>0){const commentWhitespace={start:spaceStart,end:this.state.pos,comments,leadingNode:null,trailingNode:null,containingNode:null};this.state.commentStack.push(commentWhitespace);}}finishToken(type,val){this.state.end=this.state.pos,this.state.endLoc=this.state.curPosition();const prevType=this.state.type;this.state.type=type,this.state.value=val,this.isLookahead||this.updateContext(prevType);}replaceToken(type){this.state.type=type,this.updateContext();}readToken_numberSign(){if(0===this.state.pos&&this.readToken_interpreter())return;const nextPos=this.state.pos+1,next=this.codePointAtPos(nextPos);if(next>=48&&next<=57)throw this.raise(Errors.UnexpectedDigitAfterHash,{at:this.state.curPosition()});if(123===next||91===next&&this.hasPlugin("recordAndTuple")){if(this.expectPlugin("recordAndTuple"),"bar"===this.getPluginOption("recordAndTuple","syntaxType"))throw this.raise(123===next?Errors.RecordExpressionHashIncorrectStartSyntaxType:Errors.TupleExpressionHashIncorrectStartSyntaxType,{at:this.state.curPosition()});this.state.pos+=2,123===next?this.finishToken(7):this.finishToken(1);}else isIdentifierStart(next)?(++this.state.pos,this.finishToken(136,this.readWord1(next))):92===next?(++this.state.pos,this.finishToken(136,this.readWord1())):this.finishOp(27,1);}readToken_dot(){const next=this.input.charCodeAt(this.state.pos+1);next>=48&&next<=57?this.readNumber(!0):46===next&&46===this.input.charCodeAt(this.state.pos+2)?(this.state.pos+=3,this.finishToken(21)):(++this.state.pos,this.finishToken(16));}readToken_slash(){61===this.input.charCodeAt(this.state.pos+1)?this.finishOp(31,2):this.finishOp(56,1);}readToken_interpreter(){if(0!==this.state.pos||this.length<2)return !1;let ch=this.input.charCodeAt(this.state.pos+1);if(33!==ch)return !1;const start=this.state.pos;for(this.state.pos+=1;!isNewLine(ch)&&++this.state.pos<this.length;)ch=this.input.charCodeAt(this.state.pos);const value=this.input.slice(start+2,this.state.pos);return this.finishToken(28,value),!0}readToken_mult_modulo(code){let type=42===code?55:54,width=1,next=this.input.charCodeAt(this.state.pos+1);42===code&&42===next&&(width++,next=this.input.charCodeAt(this.state.pos+2),type=57),61!==next||this.state.inType||(width++,type=37===code?33:30),this.finishOp(type,width);}readToken_pipe_amp(code){const next=this.input.charCodeAt(this.state.pos+1);if(next!==code){if(124===code){if(62===next)return void this.finishOp(39,2);if(this.hasPlugin("recordAndTuple")&&125===next){if("bar"!==this.getPluginOption("recordAndTuple","syntaxType"))throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType,{at:this.state.curPosition()});return this.state.pos+=2,void this.finishToken(9)}if(this.hasPlugin("recordAndTuple")&&93===next){if("bar"!==this.getPluginOption("recordAndTuple","syntaxType"))throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType,{at:this.state.curPosition()});return this.state.pos+=2,void this.finishToken(4)}}61!==next?this.finishOp(124===code?43:45,1):this.finishOp(30,2);}else 61===this.input.charCodeAt(this.state.pos+2)?this.finishOp(30,3):this.finishOp(124===code?41:42,2);}readToken_caret(){const next=this.input.charCodeAt(this.state.pos+1);if(61!==next||this.state.inType)if(94===next&&this.hasPlugin(["pipelineOperator",{proposal:"hack",topicToken:"^^"}])){this.finishOp(37,2);94===this.input.codePointAt(this.state.pos)&&this.unexpected();}else this.finishOp(44,1);else this.finishOp(32,2);}readToken_atSign(){64===this.input.charCodeAt(this.state.pos+1)&&this.hasPlugin(["pipelineOperator",{proposal:"hack",topicToken:"@@"}])?this.finishOp(38,2):this.finishOp(26,1);}readToken_plus_min(code){const next=this.input.charCodeAt(this.state.pos+1);next!==code?61===next?this.finishOp(30,2):this.finishOp(53,1):this.finishOp(34,2);}readToken_lt(){const{pos}=this.state,next=this.input.charCodeAt(pos+1);if(60===next)return 61===this.input.charCodeAt(pos+2)?void this.finishOp(30,3):void this.finishOp(51,2);61!==next?this.finishOp(47,1):this.finishOp(49,2);}readToken_gt(){const{pos}=this.state,next=this.input.charCodeAt(pos+1);if(62===next){const size=62===this.input.charCodeAt(pos+2)?3:2;return 61===this.input.charCodeAt(pos+size)?void this.finishOp(30,size+1):void this.finishOp(52,size)}61!==next?this.finishOp(48,1):this.finishOp(49,2);}readToken_eq_excl(code){const next=this.input.charCodeAt(this.state.pos+1);if(61!==next)return 61===code&&62===next?(this.state.pos+=2,void this.finishToken(19)):void this.finishOp(61===code?29:35,1);this.finishOp(46,61===this.input.charCodeAt(this.state.pos+2)?3:2);}readToken_question(){const next=this.input.charCodeAt(this.state.pos+1),next2=this.input.charCodeAt(this.state.pos+2);63===next?61===next2?this.finishOp(30,3):this.finishOp(40,2):46!==next||next2>=48&&next2<=57?(++this.state.pos,this.finishToken(17)):(this.state.pos+=2,this.finishToken(18));}getTokenFromCode(code){switch(code){case 46:return void this.readToken_dot();case 40:return ++this.state.pos,void this.finishToken(10);case 41:return ++this.state.pos,void this.finishToken(11);case 59:return ++this.state.pos,void this.finishToken(13);case 44:return ++this.state.pos,void this.finishToken(12);case 91:if(this.hasPlugin("recordAndTuple")&&124===this.input.charCodeAt(this.state.pos+1)){if("bar"!==this.getPluginOption("recordAndTuple","syntaxType"))throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType,{at:this.state.curPosition()});this.state.pos+=2,this.finishToken(2);}else ++this.state.pos,this.finishToken(0);return;case 93:return ++this.state.pos,void this.finishToken(3);case 123:if(this.hasPlugin("recordAndTuple")&&124===this.input.charCodeAt(this.state.pos+1)){if("bar"!==this.getPluginOption("recordAndTuple","syntaxType"))throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType,{at:this.state.curPosition()});this.state.pos+=2,this.finishToken(6);}else ++this.state.pos,this.finishToken(5);return;case 125:return ++this.state.pos,void this.finishToken(8);case 58:return void(this.hasPlugin("functionBind")&&58===this.input.charCodeAt(this.state.pos+1)?this.finishOp(15,2):(++this.state.pos,this.finishToken(14)));case 63:return void this.readToken_question();case 96:return void this.readTemplateToken();case 48:{const next=this.input.charCodeAt(this.state.pos+1);if(120===next||88===next)return void this.readRadixNumber(16);if(111===next||79===next)return void this.readRadixNumber(8);if(98===next||66===next)return void this.readRadixNumber(2)}case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return void this.readNumber(!1);case 34:case 39:return void this.readString(code);case 47:return void this.readToken_slash();case 37:case 42:return void this.readToken_mult_modulo(code);case 124:case 38:return void this.readToken_pipe_amp(code);case 94:return void this.readToken_caret();case 43:case 45:return void this.readToken_plus_min(code);case 60:return void this.readToken_lt();case 62:return void this.readToken_gt();case 61:case 33:return void this.readToken_eq_excl(code);case 126:return void this.finishOp(36,1);case 64:return void this.readToken_atSign();case 35:return void this.readToken_numberSign();case 92:return void this.readWord();default:if(isIdentifierStart(code))return void this.readWord(code)}throw this.raise(Errors.InvalidOrUnexpectedToken,{at:this.state.curPosition(),unexpected:String.fromCodePoint(code)})}finishOp(type,size){const str=this.input.slice(this.state.pos,this.state.pos+size);this.state.pos+=size,this.finishToken(type,str);}readRegexp(){const startLoc=this.state.startLoc,start=this.state.start+1;let escaped,inClass,{pos}=this.state;for(;;++pos){if(pos>=this.length)throw this.raise(Errors.UnterminatedRegExp,{at:createPositionWithColumnOffset(startLoc,1)});const ch=this.input.charCodeAt(pos);if(isNewLine(ch))throw this.raise(Errors.UnterminatedRegExp,{at:createPositionWithColumnOffset(startLoc,1)});if(escaped)escaped=!1;else {if(91===ch)inClass=!0;else if(93===ch&&inClass)inClass=!1;else if(47===ch&&!inClass)break;escaped=92===ch;}}const content=this.input.slice(start,pos);++pos;let mods="";const nextPos=()=>createPositionWithColumnOffset(startLoc,pos+2-start);for(;pos<this.length;){const cp=this.codePointAtPos(pos),char=String.fromCharCode(cp);if(VALID_REGEX_FLAGS.has(cp))118===cp?(this.expectPlugin("regexpUnicodeSets",nextPos()),mods.includes("u")&&this.raise(Errors.IncompatibleRegExpUVFlags,{at:nextPos()})):117===cp&&mods.includes("v")&&this.raise(Errors.IncompatibleRegExpUVFlags,{at:nextPos()}),mods.includes(char)&&this.raise(Errors.DuplicateRegExpFlags,{at:nextPos()});else {if(!isIdentifierChar(cp)&&92!==cp)break;this.raise(Errors.MalformedRegExpFlags,{at:nextPos()});}++pos,mods+=char;}this.state.pos=pos,this.finishToken(135,{pattern:content,flags:mods});}readInt(radix,len,forceLen=!1,allowNumSeparator=!0){const{n,pos}=readInt(this.input,this.state.pos,this.state.lineStart,this.state.curLine,radix,len,forceLen,allowNumSeparator,this.errorHandlers_readInt,!1);return this.state.pos=pos,n}readRadixNumber(radix){const startLoc=this.state.curPosition();let isBigInt=!1;this.state.pos+=2;const val=this.readInt(radix);null==val&&this.raise(Errors.InvalidDigit,{at:createPositionWithColumnOffset(startLoc,2),radix});const next=this.input.charCodeAt(this.state.pos);if(110===next)++this.state.pos,isBigInt=!0;else if(109===next)throw this.raise(Errors.InvalidDecimal,{at:startLoc});if(isIdentifierStart(this.codePointAtPos(this.state.pos)))throw this.raise(Errors.NumberIdentifier,{at:this.state.curPosition()});if(isBigInt){const str=this.input.slice(startLoc.index,this.state.pos).replace(/[_n]/g,"");this.finishToken(133,str);}else this.finishToken(132,val);}readNumber(startsWithDot){const start=this.state.pos,startLoc=this.state.curPosition();let isFloat=!1,isBigInt=!1,isDecimal=!1,hasExponent=!1,isOctal=!1;startsWithDot||null!==this.readInt(10)||this.raise(Errors.InvalidNumber,{at:this.state.curPosition()});const hasLeadingZero=this.state.pos-start>=2&&48===this.input.charCodeAt(start);if(hasLeadingZero){const integer=this.input.slice(start,this.state.pos);if(this.recordStrictModeErrors(Errors.StrictOctalLiteral,{at:startLoc}),!this.state.strict){const underscorePos=integer.indexOf("_");underscorePos>0&&this.raise(Errors.ZeroDigitNumericSeparator,{at:createPositionWithColumnOffset(startLoc,underscorePos)});}isOctal=hasLeadingZero&&!/[89]/.test(integer);}let next=this.input.charCodeAt(this.state.pos);if(46!==next||isOctal||(++this.state.pos,this.readInt(10),isFloat=!0,next=this.input.charCodeAt(this.state.pos)),69!==next&&101!==next||isOctal||(next=this.input.charCodeAt(++this.state.pos),43!==next&&45!==next||++this.state.pos,null===this.readInt(10)&&this.raise(Errors.InvalidOrMissingExponent,{at:startLoc}),isFloat=!0,hasExponent=!0,next=this.input.charCodeAt(this.state.pos)),110===next&&((isFloat||hasLeadingZero)&&this.raise(Errors.InvalidBigIntLiteral,{at:startLoc}),++this.state.pos,isBigInt=!0),109===next&&(this.expectPlugin("decimal",this.state.curPosition()),(hasExponent||hasLeadingZero)&&this.raise(Errors.InvalidDecimal,{at:startLoc}),++this.state.pos,isDecimal=!0),isIdentifierStart(this.codePointAtPos(this.state.pos)))throw this.raise(Errors.NumberIdentifier,{at:this.state.curPosition()});const str=this.input.slice(start,this.state.pos).replace(/[_mn]/g,"");if(isBigInt)return void this.finishToken(133,str);if(isDecimal)return void this.finishToken(134,str);const val=isOctal?parseInt(str,8):parseFloat(str);this.finishToken(132,val);}readCodePoint(throwOnInvalid){const{code,pos}=readCodePoint(this.input,this.state.pos,this.state.lineStart,this.state.curLine,throwOnInvalid,this.errorHandlers_readCodePoint);return this.state.pos=pos,code}readString(quote){const{str,pos,curLine,lineStart}=readStringContents(34===quote?"double":"single",this.input,this.state.pos+1,this.state.lineStart,this.state.curLine,this.errorHandlers_readStringContents_string);this.state.pos=pos+1,this.state.lineStart=lineStart,this.state.curLine=curLine,this.finishToken(131,str);}readTemplateContinuation(){this.match(8)||this.unexpected(null,8),this.state.pos--,this.readTemplateToken();}readTemplateToken(){const opening=this.input[this.state.pos],{str,firstInvalidLoc,pos,curLine,lineStart}=readStringContents("template",this.input,this.state.pos+1,this.state.lineStart,this.state.curLine,this.errorHandlers_readStringContents_template);this.state.pos=pos+1,this.state.lineStart=lineStart,this.state.curLine=curLine,firstInvalidLoc&&(this.state.firstInvalidTemplateEscapePos=new Position(firstInvalidLoc.curLine,firstInvalidLoc.pos-firstInvalidLoc.lineStart,firstInvalidLoc.pos)),96===this.input.codePointAt(pos)?this.finishToken(24,firstInvalidLoc?null:opening+str+"`"):(this.state.pos++,this.finishToken(25,firstInvalidLoc?null:opening+str+"${"));}recordStrictModeErrors(toParseError,{at}){const index=at.index;this.state.strict&&!this.state.strictErrors.has(index)?this.raise(toParseError,{at}):this.state.strictErrors.set(index,[toParseError,at]);}readWord1(firstCode){this.state.containsEsc=!1;let word="";const start=this.state.pos;let chunkStart=this.state.pos;for(void 0!==firstCode&&(this.state.pos+=firstCode<=65535?1:2);this.state.pos<this.length;){const ch=this.codePointAtPos(this.state.pos);if(isIdentifierChar(ch))this.state.pos+=ch<=65535?1:2;else {if(92!==ch)break;{this.state.containsEsc=!0,word+=this.input.slice(chunkStart,this.state.pos);const escStart=this.state.curPosition(),identifierCheck=this.state.pos===start?isIdentifierStart:isIdentifierChar;if(117!==this.input.charCodeAt(++this.state.pos)){this.raise(Errors.MissingUnicodeEscape,{at:this.state.curPosition()}),chunkStart=this.state.pos-1;continue}++this.state.pos;const esc=this.readCodePoint(!0);null!==esc&&(identifierCheck(esc)||this.raise(Errors.EscapedCharNotAnIdentifier,{at:escStart}),word+=String.fromCodePoint(esc)),chunkStart=this.state.pos;}}}return word+this.input.slice(chunkStart,this.state.pos)}readWord(firstCode){const word=this.readWord1(firstCode),type=keywords$1.get(word);void 0!==type?this.finishToken(type,tokenLabelName(type)):this.finishToken(130,word);}checkKeywordEscapes(){const{type}=this.state;tokenIsKeyword(type)&&this.state.containsEsc&&this.raise(Errors.InvalidEscapedReservedWord,{at:this.state.startLoc,reservedWord:tokenLabelName(type)});}raise(toParseError,raiseProperties){const{at}=raiseProperties,details=_objectWithoutPropertiesLoose(raiseProperties,_excluded),error=toParseError({loc:at instanceof Position?at:at.loc.start,details});if(!this.options.errorRecovery)throw error;return this.isLookahead||this.state.errors.push(error),error}raiseOverwrite(toParseError,raiseProperties){const{at}=raiseProperties,details=_objectWithoutPropertiesLoose(raiseProperties,_excluded2),loc=at instanceof Position?at:at.loc.start,pos=loc.index,errors=this.state.errors;for(let i=errors.length-1;i>=0;i--){const error=errors[i];if(error.loc.index===pos)return errors[i]=toParseError({loc,details});if(error.loc.index<pos)break}return this.raise(toParseError,raiseProperties)}updateContext(prevType){}unexpected(loc,type){throw this.raise(Errors.UnexpectedToken,{expected:type?tokenLabelName(type):null,at:null!=loc?loc:this.state.startLoc})}expectPlugin(pluginName,loc){if(this.hasPlugin(pluginName))return !0;throw this.raise(Errors.MissingPlugin,{at:null!=loc?loc:this.state.startLoc,missingPlugin:[pluginName]})}expectOnePlugin(pluginNames){if(!pluginNames.some((name=>this.hasPlugin(name))))throw this.raise(Errors.MissingOneOfPlugins,{at:this.state.startLoc,missingPlugin:pluginNames})}errorBuilder(error){return (pos,lineStart,curLine)=>{this.raise(error,{at:buildPosition(pos,lineStart,curLine)});}}}class ClassScope{constructor(){this.privateNames=new Set,this.loneAccessors=new Map,this.undefinedPrivateNames=new Map;}}class ClassScopeHandler{constructor(parser){this.parser=void 0,this.stack=[],this.undefinedPrivateNames=new Map,this.parser=parser;}current(){return this.stack[this.stack.length-1]}enter(){this.stack.push(new ClassScope);}exit(){const oldClassScope=this.stack.pop(),current=this.current();for(const[name,loc]of Array.from(oldClassScope.undefinedPrivateNames))current?current.undefinedPrivateNames.has(name)||current.undefinedPrivateNames.set(name,loc):this.parser.raise(Errors.InvalidPrivateFieldResolution,{at:loc,identifierName:name});}declarePrivateName(name,elementType,loc){const{privateNames,loneAccessors,undefinedPrivateNames}=this.current();let redefined=privateNames.has(name);if(3&elementType){const accessor=redefined&&loneAccessors.get(name);if(accessor){redefined=(3&accessor)===(3&elementType)||(4&accessor)!==(4&elementType),redefined||loneAccessors.delete(name);}else redefined||loneAccessors.set(name,elementType);}redefined&&this.parser.raise(Errors.PrivateNameRedeclaration,{at:loc,identifierName:name}),privateNames.add(name),undefinedPrivateNames.delete(name);}usePrivateName(name,loc){let classScope;for(classScope of this.stack)if(classScope.privateNames.has(name))return;classScope?classScope.undefinedPrivateNames.set(name,loc):this.parser.raise(Errors.InvalidPrivateFieldResolution,{at:loc,identifierName:name});}}const kMaybeArrowParameterDeclaration=1,kMaybeAsyncArrowParameterDeclaration=2,kParameterDeclaration=3;class ExpressionScope{constructor(type=0){this.type=void 0,this.type=type;}canBeArrowParameterDeclaration(){return this.type===kMaybeAsyncArrowParameterDeclaration||this.type===kMaybeArrowParameterDeclaration}isCertainlyParameterDeclaration(){return this.type===kParameterDeclaration}}class ArrowHeadParsingScope extends ExpressionScope{constructor(type){super(type),this.declarationErrors=new Map;}recordDeclarationError(ParsingErrorClass,{at}){const index=at.index;this.declarationErrors.set(index,[ParsingErrorClass,at]);}clearDeclarationError(index){this.declarationErrors.delete(index);}iterateErrors(iterator){this.declarationErrors.forEach(iterator);}}class ExpressionScopeHandler{constructor(parser){this.parser=void 0,this.stack=[new ExpressionScope],this.parser=parser;}enter(scope){this.stack.push(scope);}exit(){this.stack.pop();}recordParameterInitializerError(toParseError,{at:node}){const origin={at:node.loc.start},{stack}=this;let i=stack.length-1,scope=stack[i];for(;!scope.isCertainlyParameterDeclaration();){if(!scope.canBeArrowParameterDeclaration())return;scope.recordDeclarationError(toParseError,origin),scope=stack[--i];}this.parser.raise(toParseError,origin);}recordArrowParameterBindingError(error,{at:node}){const{stack}=this,scope=stack[stack.length-1],origin={at:node.loc.start};if(scope.isCertainlyParameterDeclaration())this.parser.raise(error,origin);else {if(!scope.canBeArrowParameterDeclaration())return;scope.recordDeclarationError(error,origin);}}recordAsyncArrowParametersError({at}){const{stack}=this;let i=stack.length-1,scope=stack[i];for(;scope.canBeArrowParameterDeclaration();)scope.type===kMaybeAsyncArrowParameterDeclaration&&scope.recordDeclarationError(Errors.AwaitBindingIdentifier,{at}),scope=stack[--i];}validateAsPattern(){const{stack}=this,currentScope=stack[stack.length-1];currentScope.canBeArrowParameterDeclaration()&&currentScope.iterateErrors((([toParseError,loc])=>{this.parser.raise(toParseError,{at:loc});let i=stack.length-2,scope=stack[i];for(;scope.canBeArrowParameterDeclaration();)scope.clearDeclarationError(loc.index),scope=stack[--i];}));}}function newExpressionScope(){return new ExpressionScope}const PARAM_YIELD=1,PARAM_AWAIT=2;class ProductionParameterHandler{constructor(){this.stacks=[];}enter(flags){this.stacks.push(flags);}exit(){this.stacks.pop();}currentFlags(){return this.stacks[this.stacks.length-1]}get hasAwait(){return (this.currentFlags()&PARAM_AWAIT)>0}get hasYield(){return (this.currentFlags()&PARAM_YIELD)>0}get hasReturn(){return (4&this.currentFlags())>0}get hasIn(){return (8&this.currentFlags())>0}}function functionFlags(isAsync,isGenerator){return (isAsync?PARAM_AWAIT:0)|(isGenerator?PARAM_YIELD:0)}class UtilParser extends Tokenizer{addExtra(node,key,value,enumerable=!0){if(!node)return;const extra=node.extra=node.extra||{};enumerable?extra[key]=value:Object.defineProperty(extra,key,{enumerable,value});}isContextual(token){return this.state.type===token&&!this.state.containsEsc}isUnparsedContextual(nameStart,name){const nameEnd=nameStart+name.length;if(this.input.slice(nameStart,nameEnd)===name){const nextCh=this.input.charCodeAt(nameEnd);return !(isIdentifierChar(nextCh)||55296==(64512&nextCh))}return !1}isLookaheadContextual(name){const next=this.nextTokenStart();return this.isUnparsedContextual(next,name)}eatContextual(token){return !!this.isContextual(token)&&(this.next(),!0)}expectContextual(token,toParseError){if(!this.eatContextual(token)){if(null!=toParseError)throw this.raise(toParseError,{at:this.state.startLoc});this.unexpected(null,token);}}canInsertSemicolon(){return this.match(137)||this.match(8)||this.hasPrecedingLineBreak()}hasPrecedingLineBreak(){return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index,this.state.start))}hasFollowingLineBreak(){return skipWhiteSpaceToLineBreak.lastIndex=this.state.end,skipWhiteSpaceToLineBreak.test(this.input)}isLineTerminator(){return this.eat(13)||this.canInsertSemicolon()}semicolon(allowAsi=!0){(allowAsi?this.isLineTerminator():this.eat(13))||this.raise(Errors.MissingSemicolon,{at:this.state.lastTokEndLoc});}expect(type,loc){this.eat(type)||this.unexpected(loc,type);}tryParse(fn,oldState=this.state.clone()){const abortSignal={node:null};try{const node=fn(((node=null)=>{throw abortSignal.node=node,abortSignal}));if(this.state.errors.length>oldState.errors.length){const failState=this.state;return this.state=oldState,this.state.tokensLength=failState.tokensLength,{node,error:failState.errors[oldState.errors.length],thrown:!1,aborted:!1,failState}}return {node,error:null,thrown:!1,aborted:!1,failState:null}}catch(error){const failState=this.state;if(this.state=oldState,error instanceof SyntaxError)return {node:null,error,thrown:!0,aborted:!1,failState};if(error===abortSignal)return {node:abortSignal.node,error:null,thrown:!1,aborted:!0,failState};throw error}}checkExpressionErrors(refExpressionErrors,andThrow){if(!refExpressionErrors)return !1;const{shorthandAssignLoc,doubleProtoLoc,privateKeyLoc,optionalParametersLoc}=refExpressionErrors;if(!andThrow)return !!(shorthandAssignLoc||doubleProtoLoc||optionalParametersLoc||privateKeyLoc);null!=shorthandAssignLoc&&this.raise(Errors.InvalidCoverInitializedName,{at:shorthandAssignLoc}),null!=doubleProtoLoc&&this.raise(Errors.DuplicateProto,{at:doubleProtoLoc}),null!=privateKeyLoc&&this.raise(Errors.UnexpectedPrivateField,{at:privateKeyLoc}),null!=optionalParametersLoc&&this.unexpected(optionalParametersLoc);}isLiteralPropertyName(){return tokenIsLiteralPropertyName(this.state.type)}isPrivateName(node){return "PrivateName"===node.type}getPrivateNameSV(node){return node.id.name}hasPropertyAsPrivateName(node){return ("MemberExpression"===node.type||"OptionalMemberExpression"===node.type)&&this.isPrivateName(node.property)}isObjectProperty(node){return "ObjectProperty"===node.type}isObjectMethod(node){return "ObjectMethod"===node.type}initializeScopes(inModule="module"===this.options.sourceType){const oldLabels=this.state.labels;this.state.labels=[];const oldExportedIdentifiers=this.exportedIdentifiers;this.exportedIdentifiers=new Set;const oldInModule=this.inModule;this.inModule=inModule;const oldScope=this.scope,ScopeHandler=this.getScopeHandler();this.scope=new ScopeHandler(this,inModule);const oldProdParam=this.prodParam;this.prodParam=new ProductionParameterHandler;const oldClassScope=this.classScope;this.classScope=new ClassScopeHandler(this);const oldExpressionScope=this.expressionScope;return this.expressionScope=new ExpressionScopeHandler(this),()=>{this.state.labels=oldLabels,this.exportedIdentifiers=oldExportedIdentifiers,this.inModule=oldInModule,this.scope=oldScope,this.prodParam=oldProdParam,this.classScope=oldClassScope,this.expressionScope=oldExpressionScope;}}enterInitialScopes(){let paramFlags=0;this.inModule&&(paramFlags|=PARAM_AWAIT),this.scope.enter(1),this.prodParam.enter(paramFlags);}checkDestructuringPrivate(refExpressionErrors){const{privateKeyLoc}=refExpressionErrors;null!==privateKeyLoc&&this.expectPlugin("destructuringPrivate",privateKeyLoc);}}class ExpressionErrors{constructor(){this.shorthandAssignLoc=null,this.doubleProtoLoc=null,this.privateKeyLoc=null,this.optionalParametersLoc=null;}}class Node{constructor(parser,pos,loc){this.type="",this.start=pos,this.end=0,this.loc=new SourceLocation(loc),null!=parser&&parser.options.ranges&&(this.range=[pos,0]),null!=parser&&parser.filename&&(this.loc.filename=parser.filename);}}const NodePrototype=Node.prototype;function cloneIdentifier(node){const{type,start,end,loc,range,extra,name}=node,cloned=Object.create(NodePrototype);return cloned.type=type,cloned.start=start,cloned.end=end,cloned.loc=loc,cloned.range=range,cloned.extra=extra,cloned.name=name,"Placeholder"===type&&(cloned.expectedNode=node.expectedNode),cloned}function cloneStringLiteral(node){const{type,start,end,loc,range,extra}=node;if("Placeholder"===type)return function(node){return cloneIdentifier(node)}(node);const cloned=Object.create(NodePrototype);return cloned.type=type,cloned.start=start,cloned.end=end,cloned.loc=loc,cloned.range=range,void 0!==node.raw?cloned.raw=node.raw:cloned.extra=extra,cloned.value=node.value,cloned}NodePrototype.__clone=function(){const newNode=new Node(void 0,this.start,this.loc.start),keys=Object.keys(this);for(let i=0,length=keys.length;i<length;i++){const key=keys[i];"leadingComments"!==key&&"trailingComments"!==key&&"innerComments"!==key&&(newNode[key]=this[key]);}return newNode};class NodeUtils extends UtilParser{startNode(){return new Node(this,this.state.start,this.state.startLoc)}startNodeAt(loc){return new Node(this,loc.index,loc)}startNodeAtNode(type){return this.startNodeAt(type.loc.start)}finishNode(node,type){return this.finishNodeAt(node,type,this.state.lastTokEndLoc)}finishNodeAt(node,type,endLoc){return node.type=type,node.end=endLoc.index,node.loc.end=endLoc,this.options.ranges&&(node.range[1]=endLoc.index),this.options.attachComment&&this.processComment(node),node}resetStartLocation(node,startLoc){node.start=startLoc.index,node.loc.start=startLoc,this.options.ranges&&(node.range[0]=startLoc.index);}resetEndLocation(node,endLoc=this.state.lastTokEndLoc){node.end=endLoc.index,node.loc.end=endLoc,this.options.ranges&&(node.range[1]=endLoc.index);}resetStartLocationFromNode(node,locationNode){this.resetStartLocation(node,locationNode.loc.start);}}const reservedTypes=new Set(["_","any","bool","boolean","empty","extends","false","interface","mixed","null","number","static","string","true","typeof","void"]),FlowErrors=ParseErrorEnum`flow`({AmbiguousConditionalArrow:"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.",AmbiguousDeclareModuleKind:"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.",AssignReservedType:({reservedType})=>`Cannot overwrite reserved type ${reservedType}.`,DeclareClassElement:"The `declare` modifier can only appear on class fields.",DeclareClassFieldInitializer:"Initializers are not allowed in fields with the `declare` modifier.",DuplicateDeclareModuleExports:"Duplicate `declare module.exports` statement.",EnumBooleanMemberNotInitialized:({memberName,enumName})=>`Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`,EnumDuplicateMemberName:({memberName,enumName})=>`Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`,EnumInconsistentMemberValues:({enumName})=>`Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,EnumInvalidExplicitType:({invalidEnumType,enumName})=>`Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,EnumInvalidExplicitTypeUnknownSupplied:({enumName})=>`Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`,EnumInvalidMemberInitializerPrimaryType:({enumName,memberName,explicitType})=>`Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`,EnumInvalidMemberInitializerSymbolType:({enumName,memberName})=>`Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`,EnumInvalidMemberInitializerUnknownType:({enumName,memberName})=>`The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`,EnumInvalidMemberName:({enumName,memberName,suggestion})=>`Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`,EnumNumberMemberNotInitialized:({enumName,memberName})=>`Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`,EnumStringMemberInconsistentlyInitailized:({enumName})=>`String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`,GetterMayNotHaveThisParam:"A getter cannot have a `this` parameter.",ImportReflectionHasImportType:"An `import module` declaration can not use `type` or `typeof` keyword.",ImportTypeShorthandOnlyInPureImport:"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.",InexactInsideExact:"Explicit inexact syntax cannot appear inside an explicit exact object type.",InexactInsideNonObject:"Explicit inexact syntax cannot appear in class or interface definitions.",InexactVariance:"Explicit inexact syntax cannot have variance.",InvalidNonTypeImportInDeclareModule:"Imports within a `declare module` body must always be `import type` or `import typeof`.",MissingTypeParamDefault:"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.",NestedDeclareModule:"`declare module` cannot be used inside another `declare module`.",NestedFlowComment:"Cannot have a flow comment inside another flow comment.",PatternIsOptional:Object.assign({message:"A binding pattern parameter cannot be optional in an implementation signature."},{reasonCode:"OptionalBindingPattern"}),SetterMayNotHaveThisParam:"A setter cannot have a `this` parameter.",SpreadVariance:"Spread properties cannot have variance.",ThisParamAnnotationRequired:"A type annotation is required for the `this` parameter.",ThisParamBannedInConstructor:"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.",ThisParamMayNotBeOptional:"The `this` parameter cannot be optional.",ThisParamMustBeFirst:"The `this` parameter must be the first function parameter.",ThisParamNoDefault:"The `this` parameter may not have a default value.",TypeBeforeInitializer:"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",TypeCastInPattern:"The type cast expression is expected to be wrapped with parenthesis.",UnexpectedExplicitInexactInObject:"Explicit inexact syntax must appear at the end of an inexact object.",UnexpectedReservedType:({reservedType})=>`Unexpected reserved type ${reservedType}.`,UnexpectedReservedUnderscore:"`_` is only allowed as a type argument to call or new.",UnexpectedSpaceBetweenModuloChecks:"Spaces between `%` and `checks` are not allowed here.",UnexpectedSpreadType:"Spread operator cannot appear in class or interface definitions.",UnexpectedSubtractionOperand:'Unexpected token, expected "number" or "bigint".',UnexpectedTokenAfterTypeParameter:"Expected an arrow function after this type parameter declaration.",UnexpectedTypeParameterBeforeAsyncArrowFunction:"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.",UnsupportedDeclareExportKind:({unsupportedExportKind,suggestion})=>`\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`,UnsupportedStatementInDeclareModule:"Only declares and type imports are allowed inside declare module.",UnterminatedFlowComment:"Unterminated flow-comment."});function hasTypeImportKind(node){return "type"===node.importKind||"typeof"===node.importKind}function isMaybeDefaultImport(type){return tokenIsKeywordOrIdentifier(type)&&97!==type}const exportSuggestions={const:"declare export var",let:"declare export var",type:"export type",interface:"export interface"};const FLOW_PRAGMA_REGEX=/\*?\s*@((?:no)?flow)\b/;const entities={__proto__:null,quot:'"',amp:"&",apos:"'",lt:"<",gt:">",nbsp:" ",iexcl:"¡",cent:"¢",pound:"£",curren:"¤",yen:"¥",brvbar:"¦",sect:"§",uml:"¨",copy:"©",ordf:"ª",laquo:"«",not:"¬",shy:"­",reg:"®",macr:"¯",deg:"°",plusmn:"±",sup2:"²",sup3:"³",acute:"´",micro:"µ",para:"¶",middot:"·",cedil:"¸",sup1:"¹",ordm:"º",raquo:"»",frac14:"¼",frac12:"½",frac34:"¾",iquest:"¿",Agrave:"À",Aacute:"Á",Acirc:"Â",Atilde:"Ã",Auml:"Ä",Aring:"Å",AElig:"Æ",Ccedil:"Ç",Egrave:"È",Eacute:"É",Ecirc:"Ê",Euml:"Ë",Igrave:"Ì",Iacute:"Í",Icirc:"Î",Iuml:"Ï",ETH:"Ð",Ntilde:"Ñ",Ograve:"Ò",Oacute:"Ó",Ocirc:"Ô",Otilde:"Õ",Ouml:"Ö",times:"×",Oslash:"Ø",Ugrave:"Ù",Uacute:"Ú",Ucirc:"Û",Uuml:"Ü",Yacute:"Ý",THORN:"Þ",szlig:"ß",agrave:"à",aacute:"á",acirc:"â",atilde:"ã",auml:"ä",aring:"å",aelig:"æ",ccedil:"ç",egrave:"è",eacute:"é",ecirc:"ê",euml:"ë",igrave:"ì",iacute:"í",icirc:"î",iuml:"ï",eth:"ð",ntilde:"ñ",ograve:"ò",oacute:"ó",ocirc:"ô",otilde:"õ",ouml:"ö",divide:"÷",oslash:"ø",ugrave:"ù",uacute:"ú",ucirc:"û",uuml:"ü",yacute:"ý",thorn:"þ",yuml:"ÿ",OElig:"Œ",oelig:"œ",Scaron:"Š",scaron:"š",Yuml:"Ÿ",fnof:"ƒ",circ:"ˆ",tilde:"˜",Alpha:"Α",Beta:"Β",Gamma:"Γ",Delta:"Δ",Epsilon:"Ε",Zeta:"Ζ",Eta:"Η",Theta:"Θ",Iota:"Ι",Kappa:"Κ",Lambda:"Λ",Mu:"Μ",Nu:"Ν",Xi:"Ξ",Omicron:"Ο",Pi:"Π",Rho:"Ρ",Sigma:"Σ",Tau:"Τ",Upsilon:"Υ",Phi:"Φ",Chi:"Χ",Psi:"Ψ",Omega:"Ω",alpha:"α",beta:"β",gamma:"γ",delta:"δ",epsilon:"ε",zeta:"ζ",eta:"η",theta:"θ",iota:"ι",kappa:"κ",lambda:"λ",mu:"μ",nu:"ν",xi:"ξ",omicron:"ο",pi:"π",rho:"ρ",sigmaf:"ς",sigma:"σ",tau:"τ",upsilon:"υ",phi:"φ",chi:"χ",psi:"ψ",omega:"ω",thetasym:"ϑ",upsih:"ϒ",piv:"ϖ",ensp:" ",emsp:" ",thinsp:" ",zwnj:"‌",zwj:"‍",lrm:"‎",rlm:"‏",ndash:"–",mdash:"—",lsquo:"‘",rsquo:"’",sbquo:"‚",ldquo:"“",rdquo:"”",bdquo:"„",dagger:"†",Dagger:"‡",bull:"•",hellip:"…",permil:"‰",prime:"′",Prime:"″",lsaquo:"‹",rsaquo:"›",oline:"‾",frasl:"⁄",euro:"€",image:"ℑ",weierp:"℘",real:"ℜ",trade:"™",alefsym:"ℵ",larr:"←",uarr:"↑",rarr:"→",darr:"↓",harr:"↔",crarr:"↵",lArr:"⇐",uArr:"⇑",rArr:"⇒",dArr:"⇓",hArr:"⇔",forall:"∀",part:"∂",exist:"∃",empty:"∅",nabla:"∇",isin:"∈",notin:"∉",ni:"∋",prod:"∏",sum:"∑",minus:"−",lowast:"∗",radic:"√",prop:"∝",infin:"∞",ang:"∠",and:"∧",or:"∨",cap:"∩",cup:"∪",int:"∫",there4:"∴",sim:"∼",cong:"≅",asymp:"≈",ne:"≠",equiv:"≡",le:"≤",ge:"≥",sub:"⊂",sup:"⊃",nsub:"⊄",sube:"⊆",supe:"⊇",oplus:"⊕",otimes:"⊗",perp:"⊥",sdot:"⋅",lceil:"⌈",rceil:"⌉",lfloor:"⌊",rfloor:"⌋",lang:"〈",rang:"〉",loz:"◊",spades:"♠",clubs:"♣",hearts:"♥",diams:"♦"},JsxErrors=ParseErrorEnum`jsx`({AttributeIsEmpty:"JSX attributes must only be assigned a non-empty expression.",MissingClosingTagElement:({openingTagName})=>`Expected corresponding JSX closing tag for <${openingTagName}>.`,MissingClosingTagFragment:"Expected corresponding JSX closing tag for <>.",UnexpectedSequenceExpression:"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?",UnexpectedToken:({unexpected,HTMLEntity})=>`Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`,UnsupportedJsxValue:"JSX value should be either an expression or a quoted JSX text.",UnterminatedJsxContent:"Unterminated JSX contents.",UnwrappedAdjacentJSXElements:"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"});function isFragment(object){return !!object&&("JSXOpeningFragment"===object.type||"JSXClosingFragment"===object.type)}function getQualifiedJSXName(object){if("JSXIdentifier"===object.type)return object.name;if("JSXNamespacedName"===object.type)return object.namespace.name+":"+object.name.name;if("JSXMemberExpression"===object.type)return getQualifiedJSXName(object.object)+"."+getQualifiedJSXName(object.property);throw new Error("Node had unexpected type: "+object.type)}class TypeScriptScope extends Scope{constructor(...args){super(...args),this.types=new Set,this.enums=new Set,this.constEnums=new Set,this.classes=new Set,this.exportOnlyBindings=new Set;}}class TypeScriptScopeHandler extends ScopeHandler{constructor(...args){super(...args),this.importsStack=[];}createScope(flags){return this.importsStack.push(new Set),new TypeScriptScope(flags)}enter(flags){256==flags&&this.importsStack.push(new Set),super.enter(flags);}exit(){const flags=super.exit();return 256==flags&&this.importsStack.pop(),flags}hasImport(name,allowShadow){const len=this.importsStack.length;if(this.importsStack[len-1].has(name))return !0;if(!allowShadow&&len>1)for(let i=0;i<len-1;i++)if(this.importsStack[i].has(name))return !0;return !1}declareName(name,bindingType,loc){if(4096&bindingType)return this.hasImport(name,!0)&&this.parser.raise(Errors.VarRedeclaration,{at:loc,identifierName:name}),void this.importsStack[this.importsStack.length-1].add(name);const scope=this.currentScope();if(1024&bindingType)return this.maybeExportDefined(scope,name),void scope.exportOnlyBindings.add(name);super.declareName(name,bindingType,loc),2&bindingType&&(1&bindingType||(this.checkRedeclarationInScope(scope,name,bindingType,loc),this.maybeExportDefined(scope,name)),scope.types.add(name)),256&bindingType&&scope.enums.add(name),512&bindingType&&scope.constEnums.add(name),128&bindingType&&scope.classes.add(name);}isRedeclaredInScope(scope,name,bindingType){if(scope.enums.has(name)){if(256&bindingType){return !!(512&bindingType)!==scope.constEnums.has(name)}return !0}return 128&bindingType&&scope.classes.has(name)?!!scope.lexical.has(name)&&!!(1&bindingType):!!(2&bindingType&&scope.types.has(name))||super.isRedeclaredInScope(scope,name,bindingType)}checkLocalExport(id){const{name}=id;if(this.hasImport(name))return;for(let i=this.scopeStack.length-1;i>=0;i--){const scope=this.scopeStack[i];if(scope.types.has(name)||scope.exportOnlyBindings.has(name))return}super.checkLocalExport(id);}}const unwrapParenthesizedExpression=node=>"ParenthesizedExpression"===node.type?unwrapParenthesizedExpression(node.expression):node;class LValParser extends NodeUtils{toAssignable(node,isLHS=!1){var _node$extra,_node$extra3;let parenthesized;switch(("ParenthesizedExpression"===node.type||null!=(_node$extra=node.extra)&&_node$extra.parenthesized)&&(parenthesized=unwrapParenthesizedExpression(node),isLHS?"Identifier"===parenthesized.type?this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment,{at:node}):"MemberExpression"!==parenthesized.type&&this.raise(Errors.InvalidParenthesizedAssignment,{at:node}):this.raise(Errors.InvalidParenthesizedAssignment,{at:node})),node.type){case"Identifier":case"ObjectPattern":case"ArrayPattern":case"AssignmentPattern":case"RestElement":break;case"ObjectExpression":node.type="ObjectPattern";for(let i=0,length=node.properties.length,last=length-1;i<length;i++){var _node$extra2;const prop=node.properties[i],isLast=i===last;this.toAssignableObjectExpressionProp(prop,isLast,isLHS),isLast&&"RestElement"===prop.type&&null!=(_node$extra2=node.extra)&&_node$extra2.trailingCommaLoc&&this.raise(Errors.RestTrailingComma,{at:node.extra.trailingCommaLoc});}break;case"ObjectProperty":{const{key,value}=node;this.isPrivateName(key)&&this.classScope.usePrivateName(this.getPrivateNameSV(key),key.loc.start),this.toAssignable(value,isLHS);break}case"SpreadElement":throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");case"ArrayExpression":node.type="ArrayPattern",this.toAssignableList(node.elements,null==(_node$extra3=node.extra)?void 0:_node$extra3.trailingCommaLoc,isLHS);break;case"AssignmentExpression":"="!==node.operator&&this.raise(Errors.MissingEqInAssignment,{at:node.left.loc.end}),node.type="AssignmentPattern",delete node.operator,this.toAssignable(node.left,isLHS);break;case"ParenthesizedExpression":this.toAssignable(parenthesized,isLHS);}}toAssignableObjectExpressionProp(prop,isLast,isLHS){if("ObjectMethod"===prop.type)this.raise("get"===prop.kind||"set"===prop.kind?Errors.PatternHasAccessor:Errors.PatternHasMethod,{at:prop.key});else if("SpreadElement"===prop.type){prop.type="RestElement";const arg=prop.argument;this.checkToRestConversion(arg,!1),this.toAssignable(arg,isLHS),isLast||this.raise(Errors.RestTrailingComma,{at:prop});}else this.toAssignable(prop,isLHS);}toAssignableList(exprList,trailingCommaLoc,isLHS){const end=exprList.length-1;for(let i=0;i<=end;i++){const elt=exprList[i];if(elt){if("SpreadElement"===elt.type){elt.type="RestElement";const arg=elt.argument;this.checkToRestConversion(arg,!0),this.toAssignable(arg,isLHS);}else this.toAssignable(elt,isLHS);"RestElement"===elt.type&&(i<end?this.raise(Errors.RestTrailingComma,{at:elt}):trailingCommaLoc&&this.raise(Errors.RestTrailingComma,{at:trailingCommaLoc}));}}}isAssignable(node,isBinding){switch(node.type){case"Identifier":case"ObjectPattern":case"ArrayPattern":case"AssignmentPattern":case"RestElement":return !0;case"ObjectExpression":{const last=node.properties.length-1;return node.properties.every(((prop,i)=>"ObjectMethod"!==prop.type&&(i===last||"SpreadElement"!==prop.type)&&this.isAssignable(prop)))}case"ObjectProperty":return this.isAssignable(node.value);case"SpreadElement":return this.isAssignable(node.argument);case"ArrayExpression":return node.elements.every((element=>null===element||this.isAssignable(element)));case"AssignmentExpression":return "="===node.operator;case"ParenthesizedExpression":return this.isAssignable(node.expression);case"MemberExpression":case"OptionalMemberExpression":return !isBinding;default:return !1}}toReferencedList(exprList,isParenthesizedExpr){return exprList}toReferencedListDeep(exprList,isParenthesizedExpr){this.toReferencedList(exprList,isParenthesizedExpr);for(const expr of exprList)"ArrayExpression"===(null==expr?void 0:expr.type)&&this.toReferencedListDeep(expr.elements);}parseSpread(refExpressionErrors){const node=this.startNode();return this.next(),node.argument=this.parseMaybeAssignAllowIn(refExpressionErrors,void 0),this.finishNode(node,"SpreadElement")}parseRestBinding(){const node=this.startNode();return this.next(),node.argument=this.parseBindingAtom(),this.finishNode(node,"RestElement")}parseBindingAtom(){switch(this.state.type){case 0:{const node=this.startNode();return this.next(),node.elements=this.parseBindingList(3,93,1),this.finishNode(node,"ArrayPattern")}case 5:return this.parseObjectLike(8,!0)}return this.parseIdentifier()}parseBindingList(close,closeCharCode,flags){const allowEmpty=1&flags,elts=[];let first=!0;for(;!this.eat(close);)if(first?first=!1:this.expect(12),allowEmpty&&this.match(12))elts.push(null);else {if(this.eat(close))break;if(this.match(21)){if(elts.push(this.parseAssignableListItemTypes(this.parseRestBinding(),flags)),!this.checkCommaAfterRest(closeCharCode)){this.expect(close);break}}else {const decorators=[];for(this.match(26)&&this.hasPlugin("decorators")&&this.raise(Errors.UnsupportedParameterDecorator,{at:this.state.startLoc});this.match(26);)decorators.push(this.parseDecorator());elts.push(this.parseAssignableListItem(flags,decorators));}}return elts}parseBindingRestProperty(prop){return this.next(),prop.argument=this.parseIdentifier(),this.checkCommaAfterRest(125),this.finishNode(prop,"RestElement")}parseBindingProperty(){const prop=this.startNode(),{type,startLoc}=this.state;return 21===type?this.parseBindingRestProperty(prop):(136===type?(this.expectPlugin("destructuringPrivate",startLoc),this.classScope.usePrivateName(this.state.value,startLoc),prop.key=this.parsePrivateName()):this.parsePropertyName(prop),prop.method=!1,this.parseObjPropValue(prop,startLoc,!1,!1,!0,!1))}parseAssignableListItem(flags,decorators){const left=this.parseMaybeDefault();this.parseAssignableListItemTypes(left,flags);const elt=this.parseMaybeDefault(left.loc.start,left);return decorators.length&&(left.decorators=decorators),elt}parseAssignableListItemTypes(param,flags){return param}parseMaybeDefault(startLoc,left){var _left;if(null!=startLoc||(startLoc=this.state.startLoc),left=null!=(_left=left)?_left:this.parseBindingAtom(),!this.eat(29))return left;const node=this.startNodeAt(startLoc);return node.left=left,node.right=this.parseMaybeAssignAllowIn(),this.finishNode(node,"AssignmentPattern")}isValidLVal(type,isUnparenthesizedInAssign,binding){return object={AssignmentPattern:"left",RestElement:"argument",ObjectProperty:"value",ParenthesizedExpression:"expression",ArrayPattern:"elements",ObjectPattern:"properties"},key=type,Object.hasOwnProperty.call(object,key)&&object[key];var object,key;}checkLVal(expression,{in:ancestor,binding=64,checkClashes=!1,strictModeChanged=!1,hasParenthesizedAncestor=!1}){var _expression$extra;const type=expression.type;if(this.isObjectMethod(expression))return;if("MemberExpression"===type)return void(64!==binding&&this.raise(Errors.InvalidPropertyBindingPattern,{at:expression}));if("Identifier"===type){this.checkIdentifier(expression,binding,strictModeChanged);const{name}=expression;return void(checkClashes&&(checkClashes.has(name)?this.raise(Errors.ParamDupe,{at:expression}):checkClashes.add(name)))}const validity=this.isValidLVal(type,!(hasParenthesizedAncestor||null!=(_expression$extra=expression.extra)&&_expression$extra.parenthesized)&&"AssignmentExpression"===ancestor.type,binding);if(!0===validity)return;if(!1===validity){const ParseErrorClass=64===binding?Errors.InvalidLhs:Errors.InvalidLhsBinding;return void this.raise(ParseErrorClass,{at:expression,ancestor})}const[key,isParenthesizedExpression]=Array.isArray(validity)?validity:[validity,"ParenthesizedExpression"===type],nextAncestor="ArrayPattern"===type||"ObjectPattern"===type||"ParenthesizedExpression"===type?{type}:ancestor;for(const child of [].concat(expression[key]))child&&this.checkLVal(child,{in:nextAncestor,binding,checkClashes,strictModeChanged,hasParenthesizedAncestor:isParenthesizedExpression});}checkIdentifier(at,bindingType,strictModeChanged=!1){this.state.strict&&(strictModeChanged?isStrictBindReservedWord(at.name,this.inModule):isStrictBindOnlyReservedWord(at.name))&&(64===bindingType?this.raise(Errors.StrictEvalArguments,{at,referenceName:at.name}):this.raise(Errors.StrictEvalArgumentsBinding,{at,bindingName:at.name})),8192&bindingType&&"let"===at.name&&this.raise(Errors.LetInLexicalBinding,{at}),64&bindingType||this.declareNameFromIdentifier(at,bindingType);}declareNameFromIdentifier(identifier,binding){this.scope.declareName(identifier.name,binding,identifier.loc.start);}checkToRestConversion(node,allowPattern){switch(node.type){case"ParenthesizedExpression":this.checkToRestConversion(node.expression,allowPattern);break;case"Identifier":case"MemberExpression":break;case"ArrayExpression":case"ObjectExpression":if(allowPattern)break;default:this.raise(Errors.InvalidRestAssignmentPattern,{at:node});}}checkCommaAfterRest(close){return !!this.match(12)&&(this.raise(this.lookaheadCharCode()===close?Errors.RestTrailingComma:Errors.ElementAfterRest,{at:this.state.startLoc}),!0)}}function assert(x){if(!x)throw new Error("Assert fail")}const TSErrors=ParseErrorEnum`typescript`({AbstractMethodHasImplementation:({methodName})=>`Method '${methodName}' cannot have an implementation because it is marked abstract.`,AbstractPropertyHasInitializer:({propertyName})=>`Property '${propertyName}' cannot have an initializer because it is marked abstract.`,AccesorCannotDeclareThisParameter:"'get' and 'set' accessors cannot declare 'this' parameters.",AccesorCannotHaveTypeParameters:"An accessor cannot have type parameters.",AccessorCannotBeOptional:"An 'accessor' property cannot be declared optional.",ClassMethodHasDeclare:"Class methods cannot have the 'declare' modifier.",ClassMethodHasReadonly:"Class methods cannot have the 'readonly' modifier.",ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.",ConstructorHasTypeParameters:"Type parameters cannot appear on a constructor declaration.",DeclareAccessor:({kind})=>`'declare' is not allowed in ${kind}ters.`,DeclareClassFieldHasInitializer:"Initializers are not allowed in ambient contexts.",DeclareFunctionHasImplementation:"An implementation cannot be declared in ambient contexts.",DuplicateAccessibilityModifier:({modifier})=>"Accessibility modifier already seen.",DuplicateModifier:({modifier})=>`Duplicate modifier: '${modifier}'.`,EmptyHeritageClauseType:({token})=>`'${token}' list cannot be empty.`,EmptyTypeArguments:"Type argument list cannot be empty.",EmptyTypeParameters:"Type parameter list cannot be empty.",ExpectedAmbientAfterExportDeclare:"'export declare' must be followed by an ambient declaration.",ImportAliasHasImportType:"An import alias can not use 'import type'.",ImportReflectionHasImportType:"An `import module` declaration can not use `type` modifier",IncompatibleModifiers:({modifiers})=>`'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,IndexSignatureHasAbstract:"Index signatures cannot have the 'abstract' modifier.",IndexSignatureHasAccessibility:({modifier})=>`Index signatures cannot have an accessibility modifier ('${modifier}').`,IndexSignatureHasDeclare:"Index signatures cannot have the 'declare' modifier.",IndexSignatureHasOverride:"'override' modifier cannot appear on an index signature.",IndexSignatureHasStatic:"Index signatures cannot have the 'static' modifier.",InitializerNotAllowedInAmbientContext:"Initializers are not allowed in ambient contexts.",InvalidModifierOnTypeMember:({modifier})=>`'${modifier}' modifier cannot appear on a type member.`,InvalidModifierOnTypeParameter:({modifier})=>`'${modifier}' modifier cannot appear on a type parameter.`,InvalidModifierOnTypeParameterPositions:({modifier})=>`'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,InvalidModifiersOrder:({orderedModifiers})=>`'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,InvalidPropertyAccessAfterInstantiationExpression:"Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.",InvalidTupleMemberLabel:"Tuple members must be labeled with a simple identifier.",MissingInterfaceName:"'interface' declarations must be followed by an identifier.",MixedLabeledAndUnlabeledElements:"Tuple members must all have names or all not have names.",NonAbstractClassHasAbstractMethod:"Abstract methods can only appear within an abstract class.",NonClassMethodPropertyHasAbstractModifer:"'abstract' modifier can only appear on a class, method, or property declaration.",OptionalTypeBeforeRequired:"A required element cannot follow an optional element.",OverrideNotInSubClass:"This member cannot have an 'override' modifier because its containing class does not extend another class.",PatternIsOptional:"A binding pattern parameter cannot be optional in an implementation signature.",PrivateElementHasAbstract:"Private elements cannot have the 'abstract' modifier.",PrivateElementHasAccessibility:({modifier})=>`Private elements cannot have an accessibility modifier ('${modifier}').`,ReadonlyForMethodSignature:"'readonly' modifier can only appear on a property declaration or index signature.",ReservedArrowTypeParam:"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.",ReservedTypeAssertion:"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.",SetAccesorCannotHaveOptionalParameter:"A 'set' accessor cannot have an optional parameter.",SetAccesorCannotHaveRestParameter:"A 'set' accessor cannot have rest parameter.",SetAccesorCannotHaveReturnType:"A 'set' accessor cannot have a return type annotation.",SingleTypeParameterWithoutTrailingComma:({typeParameterName})=>`Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,StaticBlockCannotHaveModifier:"Static class blocks cannot have any modifier.",TupleOptionalAfterType:"A labeled tuple optional element must be declared using a question mark after the name and before the colon (`name?: type`), rather than after the type (`name: type?`).",TypeAnnotationAfterAssign:"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.",TypeImportCannotSpecifyDefaultAndNamed:"A type-only import can specify a default import or named bindings, but not both.",TypeModifierIsUsedInTypeExports:"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.",TypeModifierIsUsedInTypeImports:"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.",UnexpectedParameterModifier:"A parameter property is only allowed in a constructor implementation.",UnexpectedReadonly:"'readonly' type modifier is only permitted on array and tuple literal types.",UnexpectedTypeAnnotation:"Did not expect a type annotation here.",UnexpectedTypeCastInParameter:"Unexpected type cast in parameter position.",UnsupportedImportTypeArgument:"Argument in a type import must be a string literal.",UnsupportedParameterPropertyKind:"A parameter property may not be declared using a binding pattern.",UnsupportedSignatureParameterKind:({type})=>`Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`});function tsIsAccessModifier(modifier){return "private"===modifier||"public"===modifier||"protected"===modifier}function tsIsVarianceAnnotations(modifier){return "in"===modifier||"out"===modifier}function isPossiblyLiteralEnum(expression){if("MemberExpression"!==expression.type)return !1;const{computed,property}=expression;return (!computed||"StringLiteral"===property.type||!("TemplateLiteral"!==property.type||property.expressions.length>0))&&isUncomputedMemberExpressionChain(expression.object)}function isValidAmbientConstInitializer(expression,estree){var _expression$extra;const{type}=expression;if(null!=(_expression$extra=expression.extra)&&_expression$extra.parenthesized)return !1;if(estree){if("Literal"===type){const{value}=expression;if("string"==typeof value||"boolean"==typeof value)return !0}}else if("StringLiteral"===type||"BooleanLiteral"===type)return !0;return !(!isNumber(expression,estree)&&!function(expression,estree){if("UnaryExpression"===expression.type){const{operator,argument}=expression;if("-"===operator&&isNumber(argument,estree))return !0}return !1}(expression,estree))||("TemplateLiteral"===type&&0===expression.expressions.length||!!isPossiblyLiteralEnum(expression))}function isNumber(expression,estree){return estree?"Literal"===expression.type&&("number"==typeof expression.value||"bigint"in expression):"NumericLiteral"===expression.type||"BigIntLiteral"===expression.type}function isUncomputedMemberExpressionChain(expression){return "Identifier"===expression.type||"MemberExpression"===expression.type&&(!expression.computed&&isUncomputedMemberExpressionChain(expression.object))}const PlaceholderErrors=ParseErrorEnum`placeholders`({ClassNameIsRequired:"A class name is required.",UnexpectedSpace:"Unexpected space in placeholder."});function hasPlugin(plugins,expectedConfig){const[expectedName,expectedOptions]="string"==typeof expectedConfig?[expectedConfig,{}]:expectedConfig,expectedKeys=Object.keys(expectedOptions),expectedOptionsIsEmpty=0===expectedKeys.length;return plugins.some((p=>{if("string"==typeof p)return expectedOptionsIsEmpty&&p===expectedName;{const[pluginName,pluginOptions]=p;if(pluginName!==expectedName)return !1;for(const key of expectedKeys)if(pluginOptions[key]!==expectedOptions[key])return !1;return !0}}))}function getPluginOption(plugins,name,option){const plugin=plugins.find((plugin=>Array.isArray(plugin)?plugin[0]===name:plugin===name));return plugin&&Array.isArray(plugin)&&plugin.length>1?plugin[1][option]:null}const PIPELINE_PROPOSALS=["minimal","fsharp","hack","smart"],TOPIC_TOKENS=["^^","@@","^","%","#"],RECORD_AND_TUPLE_SYNTAX_TYPES=["hash","bar"];const mixinPlugins={estree:superClass=>class extends superClass{parse(){const file=toESTreeLocation(super.parse());return this.options.tokens&&(file.tokens=file.tokens.map(toESTreeLocation)),file}parseRegExpLiteral({pattern,flags}){let regex=null;try{regex=new RegExp(pattern,flags);}catch(e){}const node=this.estreeParseLiteral(regex);return node.regex={pattern,flags},node}parseBigIntLiteral(value){let bigInt;try{bigInt=BigInt(value);}catch(_unused){bigInt=null;}const node=this.estreeParseLiteral(bigInt);return node.bigint=String(node.value||value),node}parseDecimalLiteral(value){const node=this.estreeParseLiteral(null);return node.decimal=String(node.value||value),node}estreeParseLiteral(value){return this.parseLiteral(value,"Literal")}parseStringLiteral(value){return this.estreeParseLiteral(value)}parseNumericLiteral(value){return this.estreeParseLiteral(value)}parseNullLiteral(){return this.estreeParseLiteral(null)}parseBooleanLiteral(value){return this.estreeParseLiteral(value)}directiveToStmt(directive){const expression=directive.value;delete directive.value,expression.type="Literal",expression.raw=expression.extra.raw,expression.value=expression.extra.expressionValue;const stmt=directive;return stmt.type="ExpressionStatement",stmt.expression=expression,stmt.directive=expression.extra.rawValue,delete expression.extra,stmt}initFunction(node,isAsync){super.initFunction(node,isAsync),node.expression=!1;}checkDeclaration(node){null!=node&&this.isObjectProperty(node)?this.checkDeclaration(node.value):super.checkDeclaration(node);}getObjectOrClassMethodParams(method){return method.value.params}isValidDirective(stmt){var _stmt$expression$extr;return "ExpressionStatement"===stmt.type&&"Literal"===stmt.expression.type&&"string"==typeof stmt.expression.value&&!(null!=(_stmt$expression$extr=stmt.expression.extra)&&_stmt$expression$extr.parenthesized)}parseBlockBody(node,allowDirectives,topLevel,end,afterBlockParse){super.parseBlockBody(node,allowDirectives,topLevel,end,afterBlockParse);const directiveStatements=node.directives.map((d=>this.directiveToStmt(d)));node.body=directiveStatements.concat(node.body),delete node.directives;}pushClassMethod(classBody,method,isGenerator,isAsync,isConstructor,allowsDirectSuper){this.parseMethod(method,isGenerator,isAsync,isConstructor,allowsDirectSuper,"ClassMethod",!0),method.typeParameters&&(method.value.typeParameters=method.typeParameters,delete method.typeParameters),classBody.body.push(method);}parsePrivateName(){const node=super.parsePrivateName();return this.getPluginOption("estree","classFeatures")?this.convertPrivateNameToPrivateIdentifier(node):node}convertPrivateNameToPrivateIdentifier(node){const name=super.getPrivateNameSV(node);return delete node.id,node.name=name,node.type="PrivateIdentifier",node}isPrivateName(node){return this.getPluginOption("estree","classFeatures")?"PrivateIdentifier"===node.type:super.isPrivateName(node)}getPrivateNameSV(node){return this.getPluginOption("estree","classFeatures")?node.name:super.getPrivateNameSV(node)}parseLiteral(value,type){const node=super.parseLiteral(value,type);return node.raw=node.extra.raw,delete node.extra,node}parseFunctionBody(node,allowExpression,isMethod=!1){super.parseFunctionBody(node,allowExpression,isMethod),node.expression="BlockStatement"!==node.body.type;}parseMethod(node,isGenerator,isAsync,isConstructor,allowDirectSuper,type,inClassScope=!1){let funcNode=this.startNode();return funcNode.kind=node.kind,funcNode=super.parseMethod(funcNode,isGenerator,isAsync,isConstructor,allowDirectSuper,type,inClassScope),funcNode.type="FunctionExpression",delete funcNode.kind,node.value=funcNode,"ClassPrivateMethod"===type&&(node.computed=!1),this.finishNode(node,"MethodDefinition")}parseClassProperty(...args){const propertyNode=super.parseClassProperty(...args);return this.getPluginOption("estree","classFeatures")?(propertyNode.type="PropertyDefinition",propertyNode):propertyNode}parseClassPrivateProperty(...args){const propertyNode=super.parseClassPrivateProperty(...args);return this.getPluginOption("estree","classFeatures")?(propertyNode.type="PropertyDefinition",propertyNode.computed=!1,propertyNode):propertyNode}parseObjectMethod(prop,isGenerator,isAsync,isPattern,isAccessor){const node=super.parseObjectMethod(prop,isGenerator,isAsync,isPattern,isAccessor);return node&&(node.type="Property","method"===node.kind&&(node.kind="init"),node.shorthand=!1),node}parseObjectProperty(prop,startLoc,isPattern,refExpressionErrors){const node=super.parseObjectProperty(prop,startLoc,isPattern,refExpressionErrors);return node&&(node.kind="init",node.type="Property"),node}isValidLVal(type,isUnparenthesizedInAssign,binding){return "Property"===type?"value":super.isValidLVal(type,isUnparenthesizedInAssign,binding)}isAssignable(node,isBinding){return null!=node&&this.isObjectProperty(node)?this.isAssignable(node.value,isBinding):super.isAssignable(node,isBinding)}toAssignable(node,isLHS=!1){if(null!=node&&this.isObjectProperty(node)){const{key,value}=node;this.isPrivateName(key)&&this.classScope.usePrivateName(this.getPrivateNameSV(key),key.loc.start),this.toAssignable(value,isLHS);}else super.toAssignable(node,isLHS);}toAssignableObjectExpressionProp(prop,isLast,isLHS){"get"===prop.kind||"set"===prop.kind?this.raise(Errors.PatternHasAccessor,{at:prop.key}):prop.method?this.raise(Errors.PatternHasMethod,{at:prop.key}):super.toAssignableObjectExpressionProp(prop,isLast,isLHS);}finishCallExpression(unfinished,optional){const node=super.finishCallExpression(unfinished,optional);if("Import"===node.callee.type){var _node$arguments$;if(node.type="ImportExpression",node.source=node.arguments[0],this.hasPlugin("importAssertions"))node.attributes=null!=(_node$arguments$=node.arguments[1])?_node$arguments$:null;delete node.arguments,delete node.callee;}return node}toReferencedArguments(node){"ImportExpression"!==node.type&&super.toReferencedArguments(node);}parseExport(unfinished,decorators){const exportStartLoc=this.state.lastTokStartLoc,node=super.parseExport(unfinished,decorators);switch(node.type){case"ExportAllDeclaration":node.exported=null;break;case"ExportNamedDeclaration":1===node.specifiers.length&&"ExportNamespaceSpecifier"===node.specifiers[0].type&&(node.type="ExportAllDeclaration",node.exported=node.specifiers[0].exported,delete node.specifiers);case"ExportDefaultDeclaration":{var _declaration$decorato;const{declaration}=node;"ClassDeclaration"===(null==declaration?void 0:declaration.type)&&(null==(_declaration$decorato=declaration.decorators)?void 0:_declaration$decorato.length)>0&&declaration.start===node.start&&this.resetStartLocation(node,exportStartLoc);}}return node}parseSubscript(base,startLoc,noCalls,state){const node=super.parseSubscript(base,startLoc,noCalls,state);if(state.optionalChainMember){if("OptionalMemberExpression"!==node.type&&"OptionalCallExpression"!==node.type||(node.type=node.type.substring(8)),state.stop){const chain=this.startNodeAtNode(node);return chain.expression=node,this.finishNode(chain,"ChainExpression")}}else "MemberExpression"!==node.type&&"CallExpression"!==node.type||(node.optional=!1);return node}hasPropertyAsPrivateName(node){return "ChainExpression"===node.type&&(node=node.expression),super.hasPropertyAsPrivateName(node)}isObjectProperty(node){return "Property"===node.type&&"init"===node.kind&&!node.method}isObjectMethod(node){return node.method||"get"===node.kind||"set"===node.kind}finishNodeAt(node,type,endLoc){return toESTreeLocation(super.finishNodeAt(node,type,endLoc))}resetStartLocation(node,startLoc){super.resetStartLocation(node,startLoc),toESTreeLocation(node);}resetEndLocation(node,endLoc=this.state.lastTokEndLoc){super.resetEndLocation(node,endLoc),toESTreeLocation(node);}},jsx:superClass=>class extends superClass{jsxReadToken(){let out="",chunkStart=this.state.pos;for(;;){if(this.state.pos>=this.length)throw this.raise(JsxErrors.UnterminatedJsxContent,{at:this.state.startLoc});const ch=this.input.charCodeAt(this.state.pos);switch(ch){case 60:case 123:return this.state.pos===this.state.start?void(60===ch&&this.state.canStartJSXElement?(++this.state.pos,this.finishToken(140)):super.getTokenFromCode(ch)):(out+=this.input.slice(chunkStart,this.state.pos),void this.finishToken(139,out));case 38:out+=this.input.slice(chunkStart,this.state.pos),out+=this.jsxReadEntity(),chunkStart=this.state.pos;break;default:isNewLine(ch)?(out+=this.input.slice(chunkStart,this.state.pos),out+=this.jsxReadNewLine(!0),chunkStart=this.state.pos):++this.state.pos;}}}jsxReadNewLine(normalizeCRLF){const ch=this.input.charCodeAt(this.state.pos);let out;return ++this.state.pos,13===ch&&10===this.input.charCodeAt(this.state.pos)?(++this.state.pos,out=normalizeCRLF?"\n":"\r\n"):out=String.fromCharCode(ch),++this.state.curLine,this.state.lineStart=this.state.pos,out}jsxReadString(quote){let out="",chunkStart=++this.state.pos;for(;;){if(this.state.pos>=this.length)throw this.raise(Errors.UnterminatedString,{at:this.state.startLoc});const ch=this.input.charCodeAt(this.state.pos);if(ch===quote)break;38===ch?(out+=this.input.slice(chunkStart,this.state.pos),out+=this.jsxReadEntity(),chunkStart=this.state.pos):isNewLine(ch)?(out+=this.input.slice(chunkStart,this.state.pos),out+=this.jsxReadNewLine(!1),chunkStart=this.state.pos):++this.state.pos;}out+=this.input.slice(chunkStart,this.state.pos++),this.finishToken(131,out);}jsxReadEntity(){const startPos=++this.state.pos;if(35===this.codePointAtPos(this.state.pos)){++this.state.pos;let radix=10;120===this.codePointAtPos(this.state.pos)&&(radix=16,++this.state.pos);const codePoint=this.readInt(radix,void 0,!1,"bail");if(null!==codePoint&&59===this.codePointAtPos(this.state.pos))return ++this.state.pos,String.fromCodePoint(codePoint)}else {let count=0,semi=!1;for(;count++<10&&this.state.pos<this.length&&!(semi=59==this.codePointAtPos(this.state.pos));)++this.state.pos;if(semi){const desc=this.input.slice(startPos,this.state.pos),entity=entities[desc];if(++this.state.pos,entity)return entity}}return this.state.pos=startPos,"&"}jsxReadWord(){let ch;const start=this.state.pos;do{ch=this.input.charCodeAt(++this.state.pos);}while(isIdentifierChar(ch)||45===ch);this.finishToken(138,this.input.slice(start,this.state.pos));}jsxParseIdentifier(){const node=this.startNode();return this.match(138)?node.name=this.state.value:tokenIsKeyword(this.state.type)?node.name=tokenLabelName(this.state.type):this.unexpected(),this.next(),this.finishNode(node,"JSXIdentifier")}jsxParseNamespacedName(){const startLoc=this.state.startLoc,name=this.jsxParseIdentifier();if(!this.eat(14))return name;const node=this.startNodeAt(startLoc);return node.namespace=name,node.name=this.jsxParseIdentifier(),this.finishNode(node,"JSXNamespacedName")}jsxParseElementName(){const startLoc=this.state.startLoc;let node=this.jsxParseNamespacedName();if("JSXNamespacedName"===node.type)return node;for(;this.eat(16);){const newNode=this.startNodeAt(startLoc);newNode.object=node,newNode.property=this.jsxParseIdentifier(),node=this.finishNode(newNode,"JSXMemberExpression");}return node}jsxParseAttributeValue(){let node;switch(this.state.type){case 5:return node=this.startNode(),this.setContext(types.brace),this.next(),node=this.jsxParseExpressionContainer(node,types.j_oTag),"JSXEmptyExpression"===node.expression.type&&this.raise(JsxErrors.AttributeIsEmpty,{at:node}),node;case 140:case 131:return this.parseExprAtom();default:throw this.raise(JsxErrors.UnsupportedJsxValue,{at:this.state.startLoc})}}jsxParseEmptyExpression(){const node=this.startNodeAt(this.state.lastTokEndLoc);return this.finishNodeAt(node,"JSXEmptyExpression",this.state.startLoc)}jsxParseSpreadChild(node){return this.next(),node.expression=this.parseExpression(),this.setContext(types.j_expr),this.state.canStartJSXElement=!0,this.expect(8),this.finishNode(node,"JSXSpreadChild")}jsxParseExpressionContainer(node,previousContext){if(this.match(8))node.expression=this.jsxParseEmptyExpression();else {const expression=this.parseExpression();node.expression=expression;}return this.setContext(previousContext),this.state.canStartJSXElement=!0,this.expect(8),this.finishNode(node,"JSXExpressionContainer")}jsxParseAttribute(){const node=this.startNode();return this.match(5)?(this.setContext(types.brace),this.next(),this.expect(21),node.argument=this.parseMaybeAssignAllowIn(),this.setContext(types.j_oTag),this.state.canStartJSXElement=!0,this.expect(8),this.finishNode(node,"JSXSpreadAttribute")):(node.name=this.jsxParseNamespacedName(),node.value=this.eat(29)?this.jsxParseAttributeValue():null,this.finishNode(node,"JSXAttribute"))}jsxParseOpeningElementAt(startLoc){const node=this.startNodeAt(startLoc);return this.eat(141)?this.finishNode(node,"JSXOpeningFragment"):(node.name=this.jsxParseElementName(),this.jsxParseOpeningElementAfterName(node))}jsxParseOpeningElementAfterName(node){const attributes=[];for(;!this.match(56)&&!this.match(141);)attributes.push(this.jsxParseAttribute());return node.attributes=attributes,node.selfClosing=this.eat(56),this.expect(141),this.finishNode(node,"JSXOpeningElement")}jsxParseClosingElementAt(startLoc){const node=this.startNodeAt(startLoc);return this.eat(141)?this.finishNode(node,"JSXClosingFragment"):(node.name=this.jsxParseElementName(),this.expect(141),this.finishNode(node,"JSXClosingElement"))}jsxParseElementAt(startLoc){const node=this.startNodeAt(startLoc),children=[],openingElement=this.jsxParseOpeningElementAt(startLoc);let closingElement=null;if(!openingElement.selfClosing){contents:for(;;)switch(this.state.type){case 140:if(startLoc=this.state.startLoc,this.next(),this.eat(56)){closingElement=this.jsxParseClosingElementAt(startLoc);break contents}children.push(this.jsxParseElementAt(startLoc));break;case 139:children.push(this.parseExprAtom());break;case 5:{const node=this.startNode();this.setContext(types.brace),this.next(),this.match(21)?children.push(this.jsxParseSpreadChild(node)):children.push(this.jsxParseExpressionContainer(node,types.j_expr));break}default:this.unexpected();}isFragment(openingElement)&&!isFragment(closingElement)&&null!==closingElement?this.raise(JsxErrors.MissingClosingTagFragment,{at:closingElement}):!isFragment(openingElement)&&isFragment(closingElement)?this.raise(JsxErrors.MissingClosingTagElement,{at:closingElement,openingTagName:getQualifiedJSXName(openingElement.name)}):isFragment(openingElement)||isFragment(closingElement)||getQualifiedJSXName(closingElement.name)!==getQualifiedJSXName(openingElement.name)&&this.raise(JsxErrors.MissingClosingTagElement,{at:closingElement,openingTagName:getQualifiedJSXName(openingElement.name)});}if(isFragment(openingElement)?(node.openingFragment=openingElement,node.closingFragment=closingElement):(node.openingElement=openingElement,node.closingElement=closingElement),node.children=children,this.match(47))throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements,{at:this.state.startLoc});return isFragment(openingElement)?this.finishNode(node,"JSXFragment"):this.finishNode(node,"JSXElement")}jsxParseElement(){const startLoc=this.state.startLoc;return this.next(),this.jsxParseElementAt(startLoc)}setContext(newContext){const{context}=this.state;context[context.length-1]=newContext;}parseExprAtom(refExpressionErrors){return this.match(139)?this.parseLiteral(this.state.value,"JSXText"):this.match(140)?this.jsxParseElement():this.match(47)&&33!==this.input.charCodeAt(this.state.pos)?(this.replaceToken(140),this.jsxParseElement()):super.parseExprAtom(refExpressionErrors)}skipSpace(){this.curContext().preserveSpace||super.skipSpace();}getTokenFromCode(code){const context=this.curContext();if(context!==types.j_expr){if(context===types.j_oTag||context===types.j_cTag){if(isIdentifierStart(code))return void this.jsxReadWord();if(62===code)return ++this.state.pos,void this.finishToken(141);if((34===code||39===code)&&context===types.j_oTag)return void this.jsxReadString(code)}if(60===code&&this.state.canStartJSXElement&&33!==this.input.charCodeAt(this.state.pos+1))return ++this.state.pos,void this.finishToken(140);super.getTokenFromCode(code);}else this.jsxReadToken();}updateContext(prevType){const{context,type}=this.state;if(56===type&&140===prevType)context.splice(-2,2,types.j_cTag),this.state.canStartJSXElement=!1;else if(140===type)context.push(types.j_oTag);else if(141===type){const out=context[context.length-1];out===types.j_oTag&&56===prevType||out===types.j_cTag?(context.pop(),this.state.canStartJSXElement=context[context.length-1]===types.j_expr):(this.setContext(types.j_expr),this.state.canStartJSXElement=!0);}else this.state.canStartJSXElement=tokenBeforeExprs[type];}},flow:superClass=>class extends superClass{constructor(...args){super(...args),this.flowPragma=void 0;}getScopeHandler(){return FlowScopeHandler}shouldParseTypes(){return this.getPluginOption("flow","all")||"flow"===this.flowPragma}shouldParseEnums(){return !!this.getPluginOption("flow","enums")}finishToken(type,val){131!==type&&13!==type&&28!==type&&void 0===this.flowPragma&&(this.flowPragma=null),super.finishToken(type,val);}addComment(comment){if(void 0===this.flowPragma){const matches=FLOW_PRAGMA_REGEX.exec(comment.value);if(matches)if("flow"===matches[1])this.flowPragma="flow";else {if("noflow"!==matches[1])throw new Error("Unexpected flow pragma");this.flowPragma="noflow";}}super.addComment(comment);}flowParseTypeInitialiser(tok){const oldInType=this.state.inType;this.state.inType=!0,this.expect(tok||14);const type=this.flowParseType();return this.state.inType=oldInType,type}flowParsePredicate(){const node=this.startNode(),moduloLoc=this.state.startLoc;return this.next(),this.expectContextual(108),this.state.lastTokStart>moduloLoc.index+1&&this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks,{at:moduloLoc}),this.eat(10)?(node.value=super.parseExpression(),this.expect(11),this.finishNode(node,"DeclaredPredicate")):this.finishNode(node,"InferredPredicate")}flowParseTypeAndPredicateInitialiser(){const oldInType=this.state.inType;this.state.inType=!0,this.expect(14);let type=null,predicate=null;return this.match(54)?(this.state.inType=oldInType,predicate=this.flowParsePredicate()):(type=this.flowParseType(),this.state.inType=oldInType,this.match(54)&&(predicate=this.flowParsePredicate())),[type,predicate]}flowParseDeclareClass(node){return this.next(),this.flowParseInterfaceish(node,!0),this.finishNode(node,"DeclareClass")}flowParseDeclareFunction(node){this.next();const id=node.id=this.parseIdentifier(),typeNode=this.startNode(),typeContainer=this.startNode();this.match(47)?typeNode.typeParameters=this.flowParseTypeParameterDeclaration():typeNode.typeParameters=null,this.expect(10);const tmp=this.flowParseFunctionTypeParams();return typeNode.params=tmp.params,typeNode.rest=tmp.rest,typeNode.this=tmp._this,this.expect(11),[typeNode.returnType,node.predicate]=this.flowParseTypeAndPredicateInitialiser(),typeContainer.typeAnnotation=this.finishNode(typeNode,"FunctionTypeAnnotation"),id.typeAnnotation=this.finishNode(typeContainer,"TypeAnnotation"),this.resetEndLocation(id),this.semicolon(),this.scope.declareName(node.id.name,2048,node.id.loc.start),this.finishNode(node,"DeclareFunction")}flowParseDeclare(node,insideModule){return this.match(80)?this.flowParseDeclareClass(node):this.match(68)?this.flowParseDeclareFunction(node):this.match(74)?this.flowParseDeclareVariable(node):this.eatContextual(125)?this.match(16)?this.flowParseDeclareModuleExports(node):(insideModule&&this.raise(FlowErrors.NestedDeclareModule,{at:this.state.lastTokStartLoc}),this.flowParseDeclareModule(node)):this.isContextual(128)?this.flowParseDeclareTypeAlias(node):this.isContextual(129)?this.flowParseDeclareOpaqueType(node):this.isContextual(127)?this.flowParseDeclareInterface(node):this.match(82)?this.flowParseDeclareExportDeclaration(node,insideModule):void this.unexpected()}flowParseDeclareVariable(node){return this.next(),node.id=this.flowParseTypeAnnotatableIdentifier(!0),this.scope.declareName(node.id.name,5,node.id.loc.start),this.semicolon(),this.finishNode(node,"DeclareVariable")}flowParseDeclareModule(node){this.scope.enter(0),this.match(131)?node.id=super.parseExprAtom():node.id=this.parseIdentifier();const bodyNode=node.body=this.startNode(),body=bodyNode.body=[];for(this.expect(5);!this.match(8);){let bodyNode=this.startNode();this.match(83)?(this.next(),this.isContextual(128)||this.match(87)||this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule,{at:this.state.lastTokStartLoc}),super.parseImport(bodyNode)):(this.expectContextual(123,FlowErrors.UnsupportedStatementInDeclareModule),bodyNode=this.flowParseDeclare(bodyNode,!0)),body.push(bodyNode);}this.scope.exit(),this.expect(8),this.finishNode(bodyNode,"BlockStatement");let kind=null,hasModuleExport=!1;return body.forEach((bodyElement=>{!function(bodyElement){return "DeclareExportAllDeclaration"===bodyElement.type||"DeclareExportDeclaration"===bodyElement.type&&(!bodyElement.declaration||"TypeAlias"!==bodyElement.declaration.type&&"InterfaceDeclaration"!==bodyElement.declaration.type)}(bodyElement)?"DeclareModuleExports"===bodyElement.type&&(hasModuleExport&&this.raise(FlowErrors.DuplicateDeclareModuleExports,{at:bodyElement}),"ES"===kind&&this.raise(FlowErrors.AmbiguousDeclareModuleKind,{at:bodyElement}),kind="CommonJS",hasModuleExport=!0):("CommonJS"===kind&&this.raise(FlowErrors.AmbiguousDeclareModuleKind,{at:bodyElement}),kind="ES");})),node.kind=kind||"CommonJS",this.finishNode(node,"DeclareModule")}flowParseDeclareExportDeclaration(node,insideModule){if(this.expect(82),this.eat(65))return this.match(68)||this.match(80)?node.declaration=this.flowParseDeclare(this.startNode()):(node.declaration=this.flowParseType(),this.semicolon()),node.default=!0,this.finishNode(node,"DeclareExportDeclaration");if(this.match(75)||this.isLet()||(this.isContextual(128)||this.isContextual(127))&&!insideModule){const label=this.state.value;throw this.raise(FlowErrors.UnsupportedDeclareExportKind,{at:this.state.startLoc,unsupportedExportKind:label,suggestion:exportSuggestions[label]})}return this.match(74)||this.match(68)||this.match(80)||this.isContextual(129)?(node.declaration=this.flowParseDeclare(this.startNode()),node.default=!1,this.finishNode(node,"DeclareExportDeclaration")):this.match(55)||this.match(5)||this.isContextual(127)||this.isContextual(128)||this.isContextual(129)?("ExportNamedDeclaration"===(node=this.parseExport(node,null)).type&&(node.type="ExportDeclaration",node.default=!1,delete node.exportKind),node.type="Declare"+node.type,node):void this.unexpected()}flowParseDeclareModuleExports(node){return this.next(),this.expectContextual(109),node.typeAnnotation=this.flowParseTypeAnnotation(),this.semicolon(),this.finishNode(node,"DeclareModuleExports")}flowParseDeclareTypeAlias(node){this.next();const finished=this.flowParseTypeAlias(node);return finished.type="DeclareTypeAlias",finished}flowParseDeclareOpaqueType(node){this.next();const finished=this.flowParseOpaqueType(node,!0);return finished.type="DeclareOpaqueType",finished}flowParseDeclareInterface(node){return this.next(),this.flowParseInterfaceish(node,!1),this.finishNode(node,"DeclareInterface")}flowParseInterfaceish(node,isClass){if(node.id=this.flowParseRestrictedIdentifier(!isClass,!0),this.scope.declareName(node.id.name,isClass?17:8201,node.id.loc.start),this.match(47)?node.typeParameters=this.flowParseTypeParameterDeclaration():node.typeParameters=null,node.extends=[],node.implements=[],node.mixins=[],this.eat(81))do{node.extends.push(this.flowParseInterfaceExtends());}while(!isClass&&this.eat(12));if(isClass){if(this.eatContextual(115))do{node.mixins.push(this.flowParseInterfaceExtends());}while(this.eat(12));if(this.eatContextual(111))do{node.implements.push(this.flowParseInterfaceExtends());}while(this.eat(12))}node.body=this.flowParseObjectType({allowStatic:isClass,allowExact:!1,allowSpread:!1,allowProto:isClass,allowInexact:!1});}flowParseInterfaceExtends(){const node=this.startNode();return node.id=this.flowParseQualifiedTypeIdentifier(),this.match(47)?node.typeParameters=this.flowParseTypeParameterInstantiation():node.typeParameters=null,this.finishNode(node,"InterfaceExtends")}flowParseInterface(node){return this.flowParseInterfaceish(node,!1),this.finishNode(node,"InterfaceDeclaration")}checkNotUnderscore(word){"_"===word&&this.raise(FlowErrors.UnexpectedReservedUnderscore,{at:this.state.startLoc});}checkReservedType(word,startLoc,declaration){reservedTypes.has(word)&&this.raise(declaration?FlowErrors.AssignReservedType:FlowErrors.UnexpectedReservedType,{at:startLoc,reservedType:word});}flowParseRestrictedIdentifier(liberal,declaration){return this.checkReservedType(this.state.value,this.state.startLoc,declaration),this.parseIdentifier(liberal)}flowParseTypeAlias(node){return node.id=this.flowParseRestrictedIdentifier(!1,!0),this.scope.declareName(node.id.name,8201,node.id.loc.start),this.match(47)?node.typeParameters=this.flowParseTypeParameterDeclaration():node.typeParameters=null,node.right=this.flowParseTypeInitialiser(29),this.semicolon(),this.finishNode(node,"TypeAlias")}flowParseOpaqueType(node,declare){return this.expectContextual(128),node.id=this.flowParseRestrictedIdentifier(!0,!0),this.scope.declareName(node.id.name,8201,node.id.loc.start),this.match(47)?node.typeParameters=this.flowParseTypeParameterDeclaration():node.typeParameters=null,node.supertype=null,this.match(14)&&(node.supertype=this.flowParseTypeInitialiser(14)),node.impltype=null,declare||(node.impltype=this.flowParseTypeInitialiser(29)),this.semicolon(),this.finishNode(node,"OpaqueType")}flowParseTypeParameter(requireDefault=!1){const nodeStartLoc=this.state.startLoc,node=this.startNode(),variance=this.flowParseVariance(),ident=this.flowParseTypeAnnotatableIdentifier();return node.name=ident.name,node.variance=variance,node.bound=ident.typeAnnotation,this.match(29)?(this.eat(29),node.default=this.flowParseType()):requireDefault&&this.raise(FlowErrors.MissingTypeParamDefault,{at:nodeStartLoc}),this.finishNode(node,"TypeParameter")}flowParseTypeParameterDeclaration(){const oldInType=this.state.inType,node=this.startNode();node.params=[],this.state.inType=!0,this.match(47)||this.match(140)?this.next():this.unexpected();let defaultRequired=!1;do{const typeParameter=this.flowParseTypeParameter(defaultRequired);node.params.push(typeParameter),typeParameter.default&&(defaultRequired=!0),this.match(48)||this.expect(12);}while(!this.match(48));return this.expect(48),this.state.inType=oldInType,this.finishNode(node,"TypeParameterDeclaration")}flowParseTypeParameterInstantiation(){const node=this.startNode(),oldInType=this.state.inType;node.params=[],this.state.inType=!0,this.expect(47);const oldNoAnonFunctionType=this.state.noAnonFunctionType;for(this.state.noAnonFunctionType=!1;!this.match(48);)node.params.push(this.flowParseType()),this.match(48)||this.expect(12);return this.state.noAnonFunctionType=oldNoAnonFunctionType,this.expect(48),this.state.inType=oldInType,this.finishNode(node,"TypeParameterInstantiation")}flowParseTypeParameterInstantiationCallOrNew(){const node=this.startNode(),oldInType=this.state.inType;for(node.params=[],this.state.inType=!0,this.expect(47);!this.match(48);)node.params.push(this.flowParseTypeOrImplicitInstantiation()),this.match(48)||this.expect(12);return this.expect(48),this.state.inType=oldInType,this.finishNode(node,"TypeParameterInstantiation")}flowParseInterfaceType(){const node=this.startNode();if(this.expectContextual(127),node.extends=[],this.eat(81))do{node.extends.push(this.flowParseInterfaceExtends());}while(this.eat(12));return node.body=this.flowParseObjectType({allowStatic:!1,allowExact:!1,allowSpread:!1,allowProto:!1,allowInexact:!1}),this.finishNode(node,"InterfaceTypeAnnotation")}flowParseObjectPropertyKey(){return this.match(132)||this.match(131)?super.parseExprAtom():this.parseIdentifier(!0)}flowParseObjectTypeIndexer(node,isStatic,variance){return node.static=isStatic,14===this.lookahead().type?(node.id=this.flowParseObjectPropertyKey(),node.key=this.flowParseTypeInitialiser()):(node.id=null,node.key=this.flowParseType()),this.expect(3),node.value=this.flowParseTypeInitialiser(),node.variance=variance,this.finishNode(node,"ObjectTypeIndexer")}flowParseObjectTypeInternalSlot(node,isStatic){return node.static=isStatic,node.id=this.flowParseObjectPropertyKey(),this.expect(3),this.expect(3),this.match(47)||this.match(10)?(node.method=!0,node.optional=!1,node.value=this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start))):(node.method=!1,this.eat(17)&&(node.optional=!0),node.value=this.flowParseTypeInitialiser()),this.finishNode(node,"ObjectTypeInternalSlot")}flowParseObjectTypeMethodish(node){for(node.params=[],node.rest=null,node.typeParameters=null,node.this=null,this.match(47)&&(node.typeParameters=this.flowParseTypeParameterDeclaration()),this.expect(10),this.match(78)&&(node.this=this.flowParseFunctionTypeParam(!0),node.this.name=null,this.match(11)||this.expect(12));!this.match(11)&&!this.match(21);)node.params.push(this.flowParseFunctionTypeParam(!1)),this.match(11)||this.expect(12);return this.eat(21)&&(node.rest=this.flowParseFunctionTypeParam(!1)),this.expect(11),node.returnType=this.flowParseTypeInitialiser(),this.finishNode(node,"FunctionTypeAnnotation")}flowParseObjectTypeCallProperty(node,isStatic){const valueNode=this.startNode();return node.static=isStatic,node.value=this.flowParseObjectTypeMethodish(valueNode),this.finishNode(node,"ObjectTypeCallProperty")}flowParseObjectType({allowStatic,allowExact,allowSpread,allowProto,allowInexact}){const oldInType=this.state.inType;this.state.inType=!0;const nodeStart=this.startNode();let endDelim,exact;nodeStart.callProperties=[],nodeStart.properties=[],nodeStart.indexers=[],nodeStart.internalSlots=[];let inexact=!1;for(allowExact&&this.match(6)?(this.expect(6),endDelim=9,exact=!0):(this.expect(5),endDelim=8,exact=!1),nodeStart.exact=exact;!this.match(endDelim);){let isStatic=!1,protoStartLoc=null,inexactStartLoc=null;const node=this.startNode();if(allowProto&&this.isContextual(116)){const lookahead=this.lookahead();14!==lookahead.type&&17!==lookahead.type&&(this.next(),protoStartLoc=this.state.startLoc,allowStatic=!1);}if(allowStatic&&this.isContextual(104)){const lookahead=this.lookahead();14!==lookahead.type&&17!==lookahead.type&&(this.next(),isStatic=!0);}const variance=this.flowParseVariance();if(this.eat(0))null!=protoStartLoc&&this.unexpected(protoStartLoc),this.eat(0)?(variance&&this.unexpected(variance.loc.start),nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node,isStatic))):nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node,isStatic,variance));else if(this.match(10)||this.match(47))null!=protoStartLoc&&this.unexpected(protoStartLoc),variance&&this.unexpected(variance.loc.start),nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node,isStatic));else {let kind="init";if(this.isContextual(98)||this.isContextual(103)){tokenIsLiteralPropertyName(this.lookahead().type)&&(kind=this.state.value,this.next());}const propOrInexact=this.flowParseObjectTypeProperty(node,isStatic,protoStartLoc,variance,kind,allowSpread,null!=allowInexact?allowInexact:!exact);null===propOrInexact?(inexact=!0,inexactStartLoc=this.state.lastTokStartLoc):nodeStart.properties.push(propOrInexact);}this.flowObjectTypeSemicolon(),!inexactStartLoc||this.match(8)||this.match(9)||this.raise(FlowErrors.UnexpectedExplicitInexactInObject,{at:inexactStartLoc});}this.expect(endDelim),allowSpread&&(nodeStart.inexact=inexact);const out=this.finishNode(nodeStart,"ObjectTypeAnnotation");return this.state.inType=oldInType,out}flowParseObjectTypeProperty(node,isStatic,protoStartLoc,variance,kind,allowSpread,allowInexact){if(this.eat(21)){return this.match(12)||this.match(13)||this.match(8)||this.match(9)?(allowSpread?allowInexact||this.raise(FlowErrors.InexactInsideExact,{at:this.state.lastTokStartLoc}):this.raise(FlowErrors.InexactInsideNonObject,{at:this.state.lastTokStartLoc}),variance&&this.raise(FlowErrors.InexactVariance,{at:variance}),null):(allowSpread||this.raise(FlowErrors.UnexpectedSpreadType,{at:this.state.lastTokStartLoc}),null!=protoStartLoc&&this.unexpected(protoStartLoc),variance&&this.raise(FlowErrors.SpreadVariance,{at:variance}),node.argument=this.flowParseType(),this.finishNode(node,"ObjectTypeSpreadProperty"))}{node.key=this.flowParseObjectPropertyKey(),node.static=isStatic,node.proto=null!=protoStartLoc,node.kind=kind;let optional=!1;return this.match(47)||this.match(10)?(node.method=!0,null!=protoStartLoc&&this.unexpected(protoStartLoc),variance&&this.unexpected(variance.loc.start),node.value=this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start)),"get"!==kind&&"set"!==kind||this.flowCheckGetterSetterParams(node),!allowSpread&&"constructor"===node.key.name&&node.value.this&&this.raise(FlowErrors.ThisParamBannedInConstructor,{at:node.value.this})):("init"!==kind&&this.unexpected(),node.method=!1,this.eat(17)&&(optional=!0),node.value=this.flowParseTypeInitialiser(),node.variance=variance),node.optional=optional,this.finishNode(node,"ObjectTypeProperty")}}flowCheckGetterSetterParams(property){const paramCount="get"===property.kind?0:1,length=property.value.params.length+(property.value.rest?1:0);property.value.this&&this.raise("get"===property.kind?FlowErrors.GetterMayNotHaveThisParam:FlowErrors.SetterMayNotHaveThisParam,{at:property.value.this}),length!==paramCount&&this.raise("get"===property.kind?Errors.BadGetterArity:Errors.BadSetterArity,{at:property}),"set"===property.kind&&property.value.rest&&this.raise(Errors.BadSetterRestParameter,{at:property});}flowObjectTypeSemicolon(){this.eat(13)||this.eat(12)||this.match(8)||this.match(9)||this.unexpected();}flowParseQualifiedTypeIdentifier(startLoc,id){null!=startLoc||(startLoc=this.state.startLoc);let node=id||this.flowParseRestrictedIdentifier(!0);for(;this.eat(16);){const node2=this.startNodeAt(startLoc);node2.qualification=node,node2.id=this.flowParseRestrictedIdentifier(!0),node=this.finishNode(node2,"QualifiedTypeIdentifier");}return node}flowParseGenericType(startLoc,id){const node=this.startNodeAt(startLoc);return node.typeParameters=null,node.id=this.flowParseQualifiedTypeIdentifier(startLoc,id),this.match(47)&&(node.typeParameters=this.flowParseTypeParameterInstantiation()),this.finishNode(node,"GenericTypeAnnotation")}flowParseTypeofType(){const node=this.startNode();return this.expect(87),node.argument=this.flowParsePrimaryType(),this.finishNode(node,"TypeofTypeAnnotation")}flowParseTupleType(){const node=this.startNode();for(node.types=[],this.expect(0);this.state.pos<this.length&&!this.match(3)&&(node.types.push(this.flowParseType()),!this.match(3));)this.expect(12);return this.expect(3),this.finishNode(node,"TupleTypeAnnotation")}flowParseFunctionTypeParam(first){let name=null,optional=!1,typeAnnotation=null;const node=this.startNode(),lh=this.lookahead(),isThis=78===this.state.type;return 14===lh.type||17===lh.type?(isThis&&!first&&this.raise(FlowErrors.ThisParamMustBeFirst,{at:node}),name=this.parseIdentifier(isThis),this.eat(17)&&(optional=!0,isThis&&this.raise(FlowErrors.ThisParamMayNotBeOptional,{at:node})),typeAnnotation=this.flowParseTypeInitialiser()):typeAnnotation=this.flowParseType(),node.name=name,node.optional=optional,node.typeAnnotation=typeAnnotation,this.finishNode(node,"FunctionTypeParam")}reinterpretTypeAsFunctionTypeParam(type){const node=this.startNodeAt(type.loc.start);return node.name=null,node.optional=!1,node.typeAnnotation=type,this.finishNode(node,"FunctionTypeParam")}flowParseFunctionTypeParams(params=[]){let rest=null,_this=null;for(this.match(78)&&(_this=this.flowParseFunctionTypeParam(!0),_this.name=null,this.match(11)||this.expect(12));!this.match(11)&&!this.match(21);)params.push(this.flowParseFunctionTypeParam(!1)),this.match(11)||this.expect(12);return this.eat(21)&&(rest=this.flowParseFunctionTypeParam(!1)),{params,rest,_this}}flowIdentToTypeAnnotation(startLoc,node,id){switch(id.name){case"any":return this.finishNode(node,"AnyTypeAnnotation");case"bool":case"boolean":return this.finishNode(node,"BooleanTypeAnnotation");case"mixed":return this.finishNode(node,"MixedTypeAnnotation");case"empty":return this.finishNode(node,"EmptyTypeAnnotation");case"number":return this.finishNode(node,"NumberTypeAnnotation");case"string":return this.finishNode(node,"StringTypeAnnotation");case"symbol":return this.finishNode(node,"SymbolTypeAnnotation");default:return this.checkNotUnderscore(id.name),this.flowParseGenericType(startLoc,id)}}flowParsePrimaryType(){const startLoc=this.state.startLoc,node=this.startNode();let tmp,type,isGroupedType=!1;const oldNoAnonFunctionType=this.state.noAnonFunctionType;switch(this.state.type){case 5:return this.flowParseObjectType({allowStatic:!1,allowExact:!1,allowSpread:!0,allowProto:!1,allowInexact:!0});case 6:return this.flowParseObjectType({allowStatic:!1,allowExact:!0,allowSpread:!0,allowProto:!1,allowInexact:!1});case 0:return this.state.noAnonFunctionType=!1,type=this.flowParseTupleType(),this.state.noAnonFunctionType=oldNoAnonFunctionType,type;case 47:return node.typeParameters=this.flowParseTypeParameterDeclaration(),this.expect(10),tmp=this.flowParseFunctionTypeParams(),node.params=tmp.params,node.rest=tmp.rest,node.this=tmp._this,this.expect(11),this.expect(19),node.returnType=this.flowParseType(),this.finishNode(node,"FunctionTypeAnnotation");case 10:if(this.next(),!this.match(11)&&!this.match(21))if(tokenIsIdentifier(this.state.type)||this.match(78)){const token=this.lookahead().type;isGroupedType=17!==token&&14!==token;}else isGroupedType=!0;if(isGroupedType){if(this.state.noAnonFunctionType=!1,type=this.flowParseType(),this.state.noAnonFunctionType=oldNoAnonFunctionType,this.state.noAnonFunctionType||!(this.match(12)||this.match(11)&&19===this.lookahead().type))return this.expect(11),type;this.eat(12);}return tmp=type?this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]):this.flowParseFunctionTypeParams(),node.params=tmp.params,node.rest=tmp.rest,node.this=tmp._this,this.expect(11),this.expect(19),node.returnType=this.flowParseType(),node.typeParameters=null,this.finishNode(node,"FunctionTypeAnnotation");case 131:return this.parseLiteral(this.state.value,"StringLiteralTypeAnnotation");case 85:case 86:return node.value=this.match(85),this.next(),this.finishNode(node,"BooleanLiteralTypeAnnotation");case 53:if("-"===this.state.value){if(this.next(),this.match(132))return this.parseLiteralAtNode(-this.state.value,"NumberLiteralTypeAnnotation",node);if(this.match(133))return this.parseLiteralAtNode(-this.state.value,"BigIntLiteralTypeAnnotation",node);throw this.raise(FlowErrors.UnexpectedSubtractionOperand,{at:this.state.startLoc})}return void this.unexpected();case 132:return this.parseLiteral(this.state.value,"NumberLiteralTypeAnnotation");case 133:return this.parseLiteral(this.state.value,"BigIntLiteralTypeAnnotation");case 88:return this.next(),this.finishNode(node,"VoidTypeAnnotation");case 84:return this.next(),this.finishNode(node,"NullLiteralTypeAnnotation");case 78:return this.next(),this.finishNode(node,"ThisTypeAnnotation");case 55:return this.next(),this.finishNode(node,"ExistsTypeAnnotation");case 87:return this.flowParseTypeofType();default:if(tokenIsKeyword(this.state.type)){const label=tokenLabelName(this.state.type);return this.next(),super.createIdentifier(node,label)}if(tokenIsIdentifier(this.state.type))return this.isContextual(127)?this.flowParseInterfaceType():this.flowIdentToTypeAnnotation(startLoc,node,this.parseIdentifier())}this.unexpected();}flowParsePostfixType(){const startLoc=this.state.startLoc;let type=this.flowParsePrimaryType(),seenOptionalIndexedAccess=!1;for(;(this.match(0)||this.match(18))&&!this.canInsertSemicolon();){const node=this.startNodeAt(startLoc),optional=this.eat(18);seenOptionalIndexedAccess=seenOptionalIndexedAccess||optional,this.expect(0),!optional&&this.match(3)?(node.elementType=type,this.next(),type=this.finishNode(node,"ArrayTypeAnnotation")):(node.objectType=type,node.indexType=this.flowParseType(),this.expect(3),seenOptionalIndexedAccess?(node.optional=optional,type=this.finishNode(node,"OptionalIndexedAccessType")):type=this.finishNode(node,"IndexedAccessType"));}return type}flowParsePrefixType(){const node=this.startNode();return this.eat(17)?(node.typeAnnotation=this.flowParsePrefixType(),this.finishNode(node,"NullableTypeAnnotation")):this.flowParsePostfixType()}flowParseAnonFunctionWithoutParens(){const param=this.flowParsePrefixType();if(!this.state.noAnonFunctionType&&this.eat(19)){const node=this.startNodeAt(param.loc.start);return node.params=[this.reinterpretTypeAsFunctionTypeParam(param)],node.rest=null,node.this=null,node.returnType=this.flowParseType(),node.typeParameters=null,this.finishNode(node,"FunctionTypeAnnotation")}return param}flowParseIntersectionType(){const node=this.startNode();this.eat(45);const type=this.flowParseAnonFunctionWithoutParens();for(node.types=[type];this.eat(45);)node.types.push(this.flowParseAnonFunctionWithoutParens());return 1===node.types.length?type:this.finishNode(node,"IntersectionTypeAnnotation")}flowParseUnionType(){const node=this.startNode();this.eat(43);const type=this.flowParseIntersectionType();for(node.types=[type];this.eat(43);)node.types.push(this.flowParseIntersectionType());return 1===node.types.length?type:this.finishNode(node,"UnionTypeAnnotation")}flowParseType(){const oldInType=this.state.inType;this.state.inType=!0;const type=this.flowParseUnionType();return this.state.inType=oldInType,type}flowParseTypeOrImplicitInstantiation(){if(130===this.state.type&&"_"===this.state.value){const startLoc=this.state.startLoc,node=this.parseIdentifier();return this.flowParseGenericType(startLoc,node)}return this.flowParseType()}flowParseTypeAnnotation(){const node=this.startNode();return node.typeAnnotation=this.flowParseTypeInitialiser(),this.finishNode(node,"TypeAnnotation")}flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride){const ident=allowPrimitiveOverride?this.parseIdentifier():this.flowParseRestrictedIdentifier();return this.match(14)&&(ident.typeAnnotation=this.flowParseTypeAnnotation(),this.resetEndLocation(ident)),ident}typeCastToParameter(node){return node.expression.typeAnnotation=node.typeAnnotation,this.resetEndLocation(node.expression,node.typeAnnotation.loc.end),node.expression}flowParseVariance(){let variance=null;return this.match(53)?(variance=this.startNode(),"+"===this.state.value?variance.kind="plus":variance.kind="minus",this.next(),this.finishNode(variance,"Variance")):variance}parseFunctionBody(node,allowExpressionBody,isMethod=!1){allowExpressionBody?this.forwardNoArrowParamsConversionAt(node,(()=>super.parseFunctionBody(node,!0,isMethod))):super.parseFunctionBody(node,!1,isMethod);}parseFunctionBodyAndFinish(node,type,isMethod=!1){if(this.match(14)){const typeNode=this.startNode();[typeNode.typeAnnotation,node.predicate]=this.flowParseTypeAndPredicateInitialiser(),node.returnType=typeNode.typeAnnotation?this.finishNode(typeNode,"TypeAnnotation"):null;}return super.parseFunctionBodyAndFinish(node,type,isMethod)}parseStatementLike(flags){if(this.state.strict&&this.isContextual(127)){if(tokenIsKeywordOrIdentifier(this.lookahead().type)){const node=this.startNode();return this.next(),this.flowParseInterface(node)}}else if(this.shouldParseEnums()&&this.isContextual(124)){const node=this.startNode();return this.next(),this.flowParseEnumDeclaration(node)}const stmt=super.parseStatementLike(flags);return void 0!==this.flowPragma||this.isValidDirective(stmt)||(this.flowPragma=null),stmt}parseExpressionStatement(node,expr,decorators){if("Identifier"===expr.type)if("declare"===expr.name){if(this.match(80)||tokenIsIdentifier(this.state.type)||this.match(68)||this.match(74)||this.match(82))return this.flowParseDeclare(node)}else if(tokenIsIdentifier(this.state.type)){if("interface"===expr.name)return this.flowParseInterface(node);if("type"===expr.name)return this.flowParseTypeAlias(node);if("opaque"===expr.name)return this.flowParseOpaqueType(node,!1)}return super.parseExpressionStatement(node,expr,decorators)}shouldParseExportDeclaration(){const{type}=this.state;return tokenIsFlowInterfaceOrTypeOrOpaque(type)||this.shouldParseEnums()&&124===type?!this.state.containsEsc:super.shouldParseExportDeclaration()}isExportDefaultSpecifier(){const{type}=this.state;return tokenIsFlowInterfaceOrTypeOrOpaque(type)||this.shouldParseEnums()&&124===type?this.state.containsEsc:super.isExportDefaultSpecifier()}parseExportDefaultExpression(){if(this.shouldParseEnums()&&this.isContextual(124)){const node=this.startNode();return this.next(),this.flowParseEnumDeclaration(node)}return super.parseExportDefaultExpression()}parseConditional(expr,startLoc,refExpressionErrors){if(!this.match(17))return expr;if(this.state.maybeInArrowParameters){const nextCh=this.lookaheadCharCode();if(44===nextCh||61===nextCh||58===nextCh||41===nextCh)return this.setOptionalParametersError(refExpressionErrors),expr}this.expect(17);const state=this.state.clone(),originalNoArrowAt=this.state.noArrowAt,node=this.startNodeAt(startLoc);let{consequent,failed}=this.tryParseConditionalConsequent(),[valid,invalid]=this.getArrowLikeExpressions(consequent);if(failed||invalid.length>0){const noArrowAt=[...originalNoArrowAt];if(invalid.length>0){this.state=state,this.state.noArrowAt=noArrowAt;for(let i=0;i<invalid.length;i++)noArrowAt.push(invalid[i].start);(({consequent,failed}=this.tryParseConditionalConsequent())),[valid,invalid]=this.getArrowLikeExpressions(consequent);}failed&&valid.length>1&&this.raise(FlowErrors.AmbiguousConditionalArrow,{at:state.startLoc}),failed&&1===valid.length&&(this.state=state,noArrowAt.push(valid[0].start),this.state.noArrowAt=noArrowAt,({consequent,failed}=this.tryParseConditionalConsequent()));}return this.getArrowLikeExpressions(consequent,!0),this.state.noArrowAt=originalNoArrowAt,this.expect(14),node.test=expr,node.consequent=consequent,node.alternate=this.forwardNoArrowParamsConversionAt(node,(()=>this.parseMaybeAssign(void 0,void 0))),this.finishNode(node,"ConditionalExpression")}tryParseConditionalConsequent(){this.state.noArrowParamsConversionAt.push(this.state.start);const consequent=this.parseMaybeAssignAllowIn(),failed=!this.match(14);return this.state.noArrowParamsConversionAt.pop(),{consequent,failed}}getArrowLikeExpressions(node,disallowInvalid){const stack=[node],arrows=[];for(;0!==stack.length;){const node=stack.pop();"ArrowFunctionExpression"===node.type?(node.typeParameters||!node.returnType?this.finishArrowValidation(node):arrows.push(node),stack.push(node.body)):"ConditionalExpression"===node.type&&(stack.push(node.consequent),stack.push(node.alternate));}return disallowInvalid?(arrows.forEach((node=>this.finishArrowValidation(node))),[arrows,[]]):function(list,test){const list1=[],list2=[];for(let i=0;i<list.length;i++)(test(list[i],i,list)?list1:list2).push(list[i]);return [list1,list2]}(arrows,(node=>node.params.every((param=>this.isAssignable(param,!0)))))}finishArrowValidation(node){var _node$extra;this.toAssignableList(node.params,null==(_node$extra=node.extra)?void 0:_node$extra.trailingCommaLoc,!1),this.scope.enter(6),super.checkParams(node,!1,!0),this.scope.exit();}forwardNoArrowParamsConversionAt(node,parse){let result;return -1!==this.state.noArrowParamsConversionAt.indexOf(node.start)?(this.state.noArrowParamsConversionAt.push(this.state.start),result=parse(),this.state.noArrowParamsConversionAt.pop()):result=parse(),result}parseParenItem(node,startLoc){if(node=super.parseParenItem(node,startLoc),this.eat(17)&&(node.optional=!0,this.resetEndLocation(node)),this.match(14)){const typeCastNode=this.startNodeAt(startLoc);return typeCastNode.expression=node,typeCastNode.typeAnnotation=this.flowParseTypeAnnotation(),this.finishNode(typeCastNode,"TypeCastExpression")}return node}assertModuleNodeAllowed(node){"ImportDeclaration"===node.type&&("type"===node.importKind||"typeof"===node.importKind)||"ExportNamedDeclaration"===node.type&&"type"===node.exportKind||"ExportAllDeclaration"===node.type&&"type"===node.exportKind||super.assertModuleNodeAllowed(node);}parseExport(node,decorators){const decl=super.parseExport(node,decorators);return "ExportNamedDeclaration"!==decl.type&&"ExportAllDeclaration"!==decl.type||(decl.exportKind=decl.exportKind||"value"),decl}parseExportDeclaration(node){if(this.isContextual(128)){node.exportKind="type";const declarationNode=this.startNode();return this.next(),this.match(5)?(node.specifiers=this.parseExportSpecifiers(!0),super.parseExportFrom(node),null):this.flowParseTypeAlias(declarationNode)}if(this.isContextual(129)){node.exportKind="type";const declarationNode=this.startNode();return this.next(),this.flowParseOpaqueType(declarationNode,!1)}if(this.isContextual(127)){node.exportKind="type";const declarationNode=this.startNode();return this.next(),this.flowParseInterface(declarationNode)}if(this.shouldParseEnums()&&this.isContextual(124)){node.exportKind="value";const declarationNode=this.startNode();return this.next(),this.flowParseEnumDeclaration(declarationNode)}return super.parseExportDeclaration(node)}eatExportStar(node){return !!super.eatExportStar(node)||!(!this.isContextual(128)||55!==this.lookahead().type)&&(node.exportKind="type",this.next(),this.next(),!0)}maybeParseExportNamespaceSpecifier(node){const{startLoc}=this.state,hasNamespace=super.maybeParseExportNamespaceSpecifier(node);return hasNamespace&&"type"===node.exportKind&&this.unexpected(startLoc),hasNamespace}parseClassId(node,isStatement,optionalId){super.parseClassId(node,isStatement,optionalId),this.match(47)&&(node.typeParameters=this.flowParseTypeParameterDeclaration());}parseClassMember(classBody,member,state){const{startLoc}=this.state;if(this.isContextual(123)){if(super.parseClassMemberFromModifier(classBody,member))return;member.declare=!0;}super.parseClassMember(classBody,member,state),member.declare&&("ClassProperty"!==member.type&&"ClassPrivateProperty"!==member.type&&"PropertyDefinition"!==member.type?this.raise(FlowErrors.DeclareClassElement,{at:startLoc}):member.value&&this.raise(FlowErrors.DeclareClassFieldInitializer,{at:member.value}));}isIterator(word){return "iterator"===word||"asyncIterator"===word}readIterator(){const word=super.readWord1(),fullWord="@@"+word;this.isIterator(word)&&this.state.inType||this.raise(Errors.InvalidIdentifier,{at:this.state.curPosition(),identifierName:fullWord}),this.finishToken(130,fullWord);}getTokenFromCode(code){const next=this.input.charCodeAt(this.state.pos+1);123===code&&124===next?this.finishOp(6,2):!this.state.inType||62!==code&&60!==code?this.state.inType&&63===code?46===next?this.finishOp(18,2):this.finishOp(17,1):!function(current,next,next2){return 64===current&&64===next&&isIdentifierStart(next2)}(code,next,this.input.charCodeAt(this.state.pos+2))?super.getTokenFromCode(code):(this.state.pos+=2,this.readIterator()):this.finishOp(62===code?48:47,1);}isAssignable(node,isBinding){return "TypeCastExpression"===node.type?this.isAssignable(node.expression,isBinding):super.isAssignable(node,isBinding)}toAssignable(node,isLHS=!1){isLHS||"AssignmentExpression"!==node.type||"TypeCastExpression"!==node.left.type||(node.left=this.typeCastToParameter(node.left)),super.toAssignable(node,isLHS);}toAssignableList(exprList,trailingCommaLoc,isLHS){for(let i=0;i<exprList.length;i++){const expr=exprList[i];"TypeCastExpression"===(null==expr?void 0:expr.type)&&(exprList[i]=this.typeCastToParameter(expr));}super.toAssignableList(exprList,trailingCommaLoc,isLHS);}toReferencedList(exprList,isParenthesizedExpr){for(let i=0;i<exprList.length;i++){var _expr$extra;const expr=exprList[i];!expr||"TypeCastExpression"!==expr.type||null!=(_expr$extra=expr.extra)&&_expr$extra.parenthesized||!(exprList.length>1)&&isParenthesizedExpr||this.raise(FlowErrors.TypeCastInPattern,{at:expr.typeAnnotation});}return exprList}parseArrayLike(close,canBePattern,isTuple,refExpressionErrors){const node=super.parseArrayLike(close,canBePattern,isTuple,refExpressionErrors);return canBePattern&&!this.state.maybeInArrowParameters&&this.toReferencedList(node.elements),node}isValidLVal(type,isParenthesized,binding){return "TypeCastExpression"===type||super.isValidLVal(type,isParenthesized,binding)}parseClassProperty(node){return this.match(14)&&(node.typeAnnotation=this.flowParseTypeAnnotation()),super.parseClassProperty(node)}parseClassPrivateProperty(node){return this.match(14)&&(node.typeAnnotation=this.flowParseTypeAnnotation()),super.parseClassPrivateProperty(node)}isClassMethod(){return this.match(47)||super.isClassMethod()}isClassProperty(){return this.match(14)||super.isClassProperty()}isNonstaticConstructor(method){return !this.match(14)&&super.isNonstaticConstructor(method)}pushClassMethod(classBody,method,isGenerator,isAsync,isConstructor,allowsDirectSuper){if(method.variance&&this.unexpected(method.variance.loc.start),delete method.variance,this.match(47)&&(method.typeParameters=this.flowParseTypeParameterDeclaration()),super.pushClassMethod(classBody,method,isGenerator,isAsync,isConstructor,allowsDirectSuper),method.params&&isConstructor){const params=method.params;params.length>0&&this.isThisParam(params[0])&&this.raise(FlowErrors.ThisParamBannedInConstructor,{at:method});}else if("MethodDefinition"===method.type&&isConstructor&&method.value.params){const params=method.value.params;params.length>0&&this.isThisParam(params[0])&&this.raise(FlowErrors.ThisParamBannedInConstructor,{at:method});}}pushClassPrivateMethod(classBody,method,isGenerator,isAsync){method.variance&&this.unexpected(method.variance.loc.start),delete method.variance,this.match(47)&&(method.typeParameters=this.flowParseTypeParameterDeclaration()),super.pushClassPrivateMethod(classBody,method,isGenerator,isAsync);}parseClassSuper(node){if(super.parseClassSuper(node),node.superClass&&this.match(47)&&(node.superTypeParameters=this.flowParseTypeParameterInstantiation()),this.isContextual(111)){this.next();const implemented=node.implements=[];do{const node=this.startNode();node.id=this.flowParseRestrictedIdentifier(!0),this.match(47)?node.typeParameters=this.flowParseTypeParameterInstantiation():node.typeParameters=null,implemented.push(this.finishNode(node,"ClassImplements"));}while(this.eat(12))}}checkGetterSetterParams(method){super.checkGetterSetterParams(method);const params=this.getObjectOrClassMethodParams(method);if(params.length>0){const param=params[0];this.isThisParam(param)&&"get"===method.kind?this.raise(FlowErrors.GetterMayNotHaveThisParam,{at:param}):this.isThisParam(param)&&this.raise(FlowErrors.SetterMayNotHaveThisParam,{at:param});}}parsePropertyNamePrefixOperator(node){node.variance=this.flowParseVariance();}parseObjPropValue(prop,startLoc,isGenerator,isAsync,isPattern,isAccessor,refExpressionErrors){let typeParameters;prop.variance&&this.unexpected(prop.variance.loc.start),delete prop.variance,this.match(47)&&!isAccessor&&(typeParameters=this.flowParseTypeParameterDeclaration(),this.match(10)||this.unexpected());const result=super.parseObjPropValue(prop,startLoc,isGenerator,isAsync,isPattern,isAccessor,refExpressionErrors);return typeParameters&&((result.value||result).typeParameters=typeParameters),result}parseAssignableListItemTypes(param){return this.eat(17)&&("Identifier"!==param.type&&this.raise(FlowErrors.PatternIsOptional,{at:param}),this.isThisParam(param)&&this.raise(FlowErrors.ThisParamMayNotBeOptional,{at:param}),param.optional=!0),this.match(14)?param.typeAnnotation=this.flowParseTypeAnnotation():this.isThisParam(param)&&this.raise(FlowErrors.ThisParamAnnotationRequired,{at:param}),this.match(29)&&this.isThisParam(param)&&this.raise(FlowErrors.ThisParamNoDefault,{at:param}),this.resetEndLocation(param),param}parseMaybeDefault(startLoc,left){const node=super.parseMaybeDefault(startLoc,left);return "AssignmentPattern"===node.type&&node.typeAnnotation&&node.right.start<node.typeAnnotation.start&&this.raise(FlowErrors.TypeBeforeInitializer,{at:node.typeAnnotation}),node}shouldParseDefaultImport(node){return hasTypeImportKind(node)?isMaybeDefaultImport(this.state.type):super.shouldParseDefaultImport(node)}checkImportReflection(node){super.checkImportReflection(node),node.module&&"value"!==node.importKind&&this.raise(FlowErrors.ImportReflectionHasImportType,{at:node.specifiers[0].loc.start});}parseImportSpecifierLocal(node,specifier,type){specifier.local=hasTypeImportKind(node)?this.flowParseRestrictedIdentifier(!0,!0):this.parseIdentifier(),node.specifiers.push(this.finishImportSpecifier(specifier,type));}maybeParseDefaultImportSpecifier(node){node.importKind="value";let kind=null;if(this.match(87)?kind="typeof":this.isContextual(128)&&(kind="type"),kind){const lh=this.lookahead(),{type}=lh;"type"===kind&&55===type&&this.unexpected(null,lh.type),(isMaybeDefaultImport(type)||5===type||55===type)&&(this.next(),node.importKind=kind);}return super.maybeParseDefaultImportSpecifier(node)}parseImportSpecifier(specifier,importedIsString,isInTypeOnlyImport,isMaybeTypeOnly,bindingType){const firstIdent=specifier.imported;let specifierTypeKind=null;"Identifier"===firstIdent.type&&("type"===firstIdent.name?specifierTypeKind="type":"typeof"===firstIdent.name&&(specifierTypeKind="typeof"));let isBinding=!1;if(this.isContextual(93)&&!this.isLookaheadContextual("as")){const as_ident=this.parseIdentifier(!0);null===specifierTypeKind||tokenIsKeywordOrIdentifier(this.state.type)?(specifier.imported=firstIdent,specifier.importKind=null,specifier.local=this.parseIdentifier()):(specifier.imported=as_ident,specifier.importKind=specifierTypeKind,specifier.local=cloneIdentifier(as_ident));}else {if(null!==specifierTypeKind&&tokenIsKeywordOrIdentifier(this.state.type))specifier.imported=this.parseIdentifier(!0),specifier.importKind=specifierTypeKind;else {if(importedIsString)throw this.raise(Errors.ImportBindingIsString,{at:specifier,importName:firstIdent.value});specifier.imported=firstIdent,specifier.importKind=null;}this.eatContextual(93)?specifier.local=this.parseIdentifier():(isBinding=!0,specifier.local=cloneIdentifier(specifier.imported));}const specifierIsTypeImport=hasTypeImportKind(specifier);return isInTypeOnlyImport&&specifierIsTypeImport&&this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport,{at:specifier}),(isInTypeOnlyImport||specifierIsTypeImport)&&this.checkReservedType(specifier.local.name,specifier.local.loc.start,!0),!isBinding||isInTypeOnlyImport||specifierIsTypeImport||this.checkReservedWord(specifier.local.name,specifier.loc.start,!0,!0),this.finishImportSpecifier(specifier,"ImportSpecifier")}parseBindingAtom(){return 78===this.state.type?this.parseIdentifier(!0):super.parseBindingAtom()}parseFunctionParams(node,isConstructor){const kind=node.kind;"get"!==kind&&"set"!==kind&&this.match(47)&&(node.typeParameters=this.flowParseTypeParameterDeclaration()),super.parseFunctionParams(node,isConstructor);}parseVarId(decl,kind){super.parseVarId(decl,kind),this.match(14)&&(decl.id.typeAnnotation=this.flowParseTypeAnnotation(),this.resetEndLocation(decl.id));}parseAsyncArrowFromCallExpression(node,call){if(this.match(14)){const oldNoAnonFunctionType=this.state.noAnonFunctionType;this.state.noAnonFunctionType=!0,node.returnType=this.flowParseTypeAnnotation(),this.state.noAnonFunctionType=oldNoAnonFunctionType;}return super.parseAsyncArrowFromCallExpression(node,call)}shouldParseAsyncArrow(){return this.match(14)||super.shouldParseAsyncArrow()}parseMaybeAssign(refExpressionErrors,afterLeftParse){var _jsx;let jsx,state=null;if(this.hasPlugin("jsx")&&(this.match(140)||this.match(47))){if(state=this.state.clone(),jsx=this.tryParse((()=>super.parseMaybeAssign(refExpressionErrors,afterLeftParse)),state),!jsx.error)return jsx.node;const{context}=this.state,currentContext=context[context.length-1];currentContext!==types.j_oTag&&currentContext!==types.j_expr||context.pop();}if(null!=(_jsx=jsx)&&_jsx.error||this.match(47)){var _jsx2,_jsx3;let typeParameters;state=state||this.state.clone();const arrow=this.tryParse((abort=>{var _arrowExpression$extr;typeParameters=this.flowParseTypeParameterDeclaration();const arrowExpression=this.forwardNoArrowParamsConversionAt(typeParameters,(()=>{const result=super.parseMaybeAssign(refExpressionErrors,afterLeftParse);return this.resetStartLocationFromNode(result,typeParameters),result}));null!=(_arrowExpression$extr=arrowExpression.extra)&&_arrowExpression$extr.parenthesized&&abort();const expr=this.maybeUnwrapTypeCastExpression(arrowExpression);return "ArrowFunctionExpression"!==expr.type&&abort(),expr.typeParameters=typeParameters,this.resetStartLocationFromNode(expr,typeParameters),arrowExpression}),state);let arrowExpression=null;if(arrow.node&&"ArrowFunctionExpression"===this.maybeUnwrapTypeCastExpression(arrow.node).type){if(!arrow.error&&!arrow.aborted)return arrow.node.async&&this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,{at:typeParameters}),arrow.node;arrowExpression=arrow.node;}if(null!=(_jsx2=jsx)&&_jsx2.node)return this.state=jsx.failState,jsx.node;if(arrowExpression)return this.state=arrow.failState,arrowExpression;if(null!=(_jsx3=jsx)&&_jsx3.thrown)throw jsx.error;if(arrow.thrown)throw arrow.error;throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter,{at:typeParameters})}return super.parseMaybeAssign(refExpressionErrors,afterLeftParse)}parseArrow(node){if(this.match(14)){const result=this.tryParse((()=>{const oldNoAnonFunctionType=this.state.noAnonFunctionType;this.state.noAnonFunctionType=!0;const typeNode=this.startNode();return [typeNode.typeAnnotation,node.predicate]=this.flowParseTypeAndPredicateInitialiser(),this.state.noAnonFunctionType=oldNoAnonFunctionType,this.canInsertSemicolon()&&this.unexpected(),this.match(19)||this.unexpected(),typeNode}));if(result.thrown)return null;result.error&&(this.state=result.failState),node.returnType=result.node.typeAnnotation?this.finishNode(result.node,"TypeAnnotation"):null;}return super.parseArrow(node)}shouldParseArrow(params){return this.match(14)||super.shouldParseArrow(params)}setArrowFunctionParameters(node,params){-1!==this.state.noArrowParamsConversionAt.indexOf(node.start)?node.params=params:super.setArrowFunctionParameters(node,params);}checkParams(node,allowDuplicates,isArrowFunction,strictModeChanged=!0){if(!isArrowFunction||-1===this.state.noArrowParamsConversionAt.indexOf(node.start)){for(let i=0;i<node.params.length;i++)this.isThisParam(node.params[i])&&i>0&&this.raise(FlowErrors.ThisParamMustBeFirst,{at:node.params[i]});super.checkParams(node,allowDuplicates,isArrowFunction,strictModeChanged);}}parseParenAndDistinguishExpression(canBeArrow){return super.parseParenAndDistinguishExpression(canBeArrow&&-1===this.state.noArrowAt.indexOf(this.state.start))}parseSubscripts(base,startLoc,noCalls){if("Identifier"===base.type&&"async"===base.name&&-1!==this.state.noArrowAt.indexOf(startLoc.index)){this.next();const node=this.startNodeAt(startLoc);node.callee=base,node.arguments=super.parseCallExpressionArguments(11,!1),base=this.finishNode(node,"CallExpression");}else if("Identifier"===base.type&&"async"===base.name&&this.match(47)){const state=this.state.clone(),arrow=this.tryParse((abort=>this.parseAsyncArrowWithTypeParameters(startLoc)||abort()),state);if(!arrow.error&&!arrow.aborted)return arrow.node;const result=this.tryParse((()=>super.parseSubscripts(base,startLoc,noCalls)),state);if(result.node&&!result.error)return result.node;if(arrow.node)return this.state=arrow.failState,arrow.node;if(result.node)return this.state=result.failState,result.node;throw arrow.error||result.error}return super.parseSubscripts(base,startLoc,noCalls)}parseSubscript(base,startLoc,noCalls,subscriptState){if(this.match(18)&&this.isLookaheadToken_lt()){if(subscriptState.optionalChainMember=!0,noCalls)return subscriptState.stop=!0,base;this.next();const node=this.startNodeAt(startLoc);return node.callee=base,node.typeArguments=this.flowParseTypeParameterInstantiation(),this.expect(10),node.arguments=this.parseCallExpressionArguments(11,!1),node.optional=!0,this.finishCallExpression(node,!0)}if(!noCalls&&this.shouldParseTypes()&&this.match(47)){const node=this.startNodeAt(startLoc);node.callee=base;const result=this.tryParse((()=>(node.typeArguments=this.flowParseTypeParameterInstantiationCallOrNew(),this.expect(10),node.arguments=super.parseCallExpressionArguments(11,!1),subscriptState.optionalChainMember&&(node.optional=!1),this.finishCallExpression(node,subscriptState.optionalChainMember))));if(result.node)return result.error&&(this.state=result.failState),result.node}return super.parseSubscript(base,startLoc,noCalls,subscriptState)}parseNewCallee(node){super.parseNewCallee(node);let targs=null;this.shouldParseTypes()&&this.match(47)&&(targs=this.tryParse((()=>this.flowParseTypeParameterInstantiationCallOrNew())).node),node.typeArguments=targs;}parseAsyncArrowWithTypeParameters(startLoc){const node=this.startNodeAt(startLoc);if(this.parseFunctionParams(node,!1),this.parseArrow(node))return super.parseArrowExpression(node,void 0,!0)}readToken_mult_modulo(code){const next=this.input.charCodeAt(this.state.pos+1);if(42===code&&47===next&&this.state.hasFlowComment)return this.state.hasFlowComment=!1,this.state.pos+=2,void this.nextToken();super.readToken_mult_modulo(code);}readToken_pipe_amp(code){const next=this.input.charCodeAt(this.state.pos+1);124!==code||125!==next?super.readToken_pipe_amp(code):this.finishOp(9,2);}parseTopLevel(file,program){const fileNode=super.parseTopLevel(file,program);return this.state.hasFlowComment&&this.raise(FlowErrors.UnterminatedFlowComment,{at:this.state.curPosition()}),fileNode}skipBlockComment(){if(!this.hasPlugin("flowComments")||!this.skipFlowComment())return super.skipBlockComment(this.state.hasFlowComment?"*-/":"*/");{if(this.state.hasFlowComment)throw this.raise(FlowErrors.NestedFlowComment,{at:this.state.startLoc});this.hasFlowCommentCompletion();const commentSkip=this.skipFlowComment();commentSkip&&(this.state.pos+=commentSkip,this.state.hasFlowComment=!0);}}skipFlowComment(){const{pos}=this.state;let shiftToFirstNonWhiteSpace=2;for(;[32,9].includes(this.input.charCodeAt(pos+shiftToFirstNonWhiteSpace));)shiftToFirstNonWhiteSpace++;const ch2=this.input.charCodeAt(shiftToFirstNonWhiteSpace+pos),ch3=this.input.charCodeAt(shiftToFirstNonWhiteSpace+pos+1);return 58===ch2&&58===ch3?shiftToFirstNonWhiteSpace+2:"flow-include"===this.input.slice(shiftToFirstNonWhiteSpace+pos,shiftToFirstNonWhiteSpace+pos+12)?shiftToFirstNonWhiteSpace+12:58===ch2&&58!==ch3&&shiftToFirstNonWhiteSpace}hasFlowCommentCompletion(){if(-1===this.input.indexOf("*/",this.state.pos))throw this.raise(Errors.UnterminatedComment,{at:this.state.curPosition()})}flowEnumErrorBooleanMemberNotInitialized(loc,{enumName,memberName}){this.raise(FlowErrors.EnumBooleanMemberNotInitialized,{at:loc,memberName,enumName});}flowEnumErrorInvalidMemberInitializer(loc,enumContext){return this.raise(enumContext.explicitType?"symbol"===enumContext.explicitType?FlowErrors.EnumInvalidMemberInitializerSymbolType:FlowErrors.EnumInvalidMemberInitializerPrimaryType:FlowErrors.EnumInvalidMemberInitializerUnknownType,Object.assign({at:loc},enumContext))}flowEnumErrorNumberMemberNotInitialized(loc,{enumName,memberName}){this.raise(FlowErrors.EnumNumberMemberNotInitialized,{at:loc,enumName,memberName});}flowEnumErrorStringMemberInconsistentlyInitailized(node,{enumName}){this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized,{at:node,enumName});}flowEnumMemberInit(){const startLoc=this.state.startLoc,endOfInit=()=>this.match(12)||this.match(8);switch(this.state.type){case 132:{const literal=this.parseNumericLiteral(this.state.value);return endOfInit()?{type:"number",loc:literal.loc.start,value:literal}:{type:"invalid",loc:startLoc}}case 131:{const literal=this.parseStringLiteral(this.state.value);return endOfInit()?{type:"string",loc:literal.loc.start,value:literal}:{type:"invalid",loc:startLoc}}case 85:case 86:{const literal=this.parseBooleanLiteral(this.match(85));return endOfInit()?{type:"boolean",loc:literal.loc.start,value:literal}:{type:"invalid",loc:startLoc}}default:return {type:"invalid",loc:startLoc}}}flowEnumMemberRaw(){const loc=this.state.startLoc;return {id:this.parseIdentifier(!0),init:this.eat(29)?this.flowEnumMemberInit():{type:"none",loc}}}flowEnumCheckExplicitTypeMismatch(loc,context,expectedType){const{explicitType}=context;null!==explicitType&&explicitType!==expectedType&&this.flowEnumErrorInvalidMemberInitializer(loc,context);}flowEnumMembers({enumName,explicitType}){const seenNames=new Set,members={booleanMembers:[],numberMembers:[],stringMembers:[],defaultedMembers:[]};let hasUnknownMembers=!1;for(;!this.match(8);){if(this.eat(21)){hasUnknownMembers=!0;break}const memberNode=this.startNode(),{id,init}=this.flowEnumMemberRaw(),memberName=id.name;if(""===memberName)continue;/^[a-z]/.test(memberName)&&this.raise(FlowErrors.EnumInvalidMemberName,{at:id,memberName,suggestion:memberName[0].toUpperCase()+memberName.slice(1),enumName}),seenNames.has(memberName)&&this.raise(FlowErrors.EnumDuplicateMemberName,{at:id,memberName,enumName}),seenNames.add(memberName);const context={enumName,explicitType,memberName};switch(memberNode.id=id,init.type){case"boolean":this.flowEnumCheckExplicitTypeMismatch(init.loc,context,"boolean"),memberNode.init=init.value,members.booleanMembers.push(this.finishNode(memberNode,"EnumBooleanMember"));break;case"number":this.flowEnumCheckExplicitTypeMismatch(init.loc,context,"number"),memberNode.init=init.value,members.numberMembers.push(this.finishNode(memberNode,"EnumNumberMember"));break;case"string":this.flowEnumCheckExplicitTypeMismatch(init.loc,context,"string"),memberNode.init=init.value,members.stringMembers.push(this.finishNode(memberNode,"EnumStringMember"));break;case"invalid":throw this.flowEnumErrorInvalidMemberInitializer(init.loc,context);case"none":switch(explicitType){case"boolean":this.flowEnumErrorBooleanMemberNotInitialized(init.loc,context);break;case"number":this.flowEnumErrorNumberMemberNotInitialized(init.loc,context);break;default:members.defaultedMembers.push(this.finishNode(memberNode,"EnumDefaultedMember"));}}this.match(8)||this.expect(12);}return {members,hasUnknownMembers}}flowEnumStringMembers(initializedMembers,defaultedMembers,{enumName}){if(0===initializedMembers.length)return defaultedMembers;if(0===defaultedMembers.length)return initializedMembers;if(defaultedMembers.length>initializedMembers.length){for(const member of initializedMembers)this.flowEnumErrorStringMemberInconsistentlyInitailized(member,{enumName});return defaultedMembers}for(const member of defaultedMembers)this.flowEnumErrorStringMemberInconsistentlyInitailized(member,{enumName});return initializedMembers}flowEnumParseExplicitType({enumName}){if(!this.eatContextual(101))return null;if(!tokenIsIdentifier(this.state.type))throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied,{at:this.state.startLoc,enumName});const{value}=this.state;return this.next(),"boolean"!==value&&"number"!==value&&"string"!==value&&"symbol"!==value&&this.raise(FlowErrors.EnumInvalidExplicitType,{at:this.state.startLoc,enumName,invalidEnumType:value}),value}flowEnumBody(node,id){const enumName=id.name,nameLoc=id.loc.start,explicitType=this.flowEnumParseExplicitType({enumName});this.expect(5);const{members,hasUnknownMembers}=this.flowEnumMembers({enumName,explicitType});switch(node.hasUnknownMembers=hasUnknownMembers,explicitType){case"boolean":return node.explicitType=!0,node.members=members.booleanMembers,this.expect(8),this.finishNode(node,"EnumBooleanBody");case"number":return node.explicitType=!0,node.members=members.numberMembers,this.expect(8),this.finishNode(node,"EnumNumberBody");case"string":return node.explicitType=!0,node.members=this.flowEnumStringMembers(members.stringMembers,members.defaultedMembers,{enumName}),this.expect(8),this.finishNode(node,"EnumStringBody");case"symbol":return node.members=members.defaultedMembers,this.expect(8),this.finishNode(node,"EnumSymbolBody");default:{const empty=()=>(node.members=[],this.expect(8),this.finishNode(node,"EnumStringBody"));node.explicitType=!1;const boolsLen=members.booleanMembers.length,numsLen=members.numberMembers.length,strsLen=members.stringMembers.length,defaultedLen=members.defaultedMembers.length;if(boolsLen||numsLen||strsLen||defaultedLen){if(boolsLen||numsLen){if(!numsLen&&!strsLen&&boolsLen>=defaultedLen){for(const member of members.defaultedMembers)this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start,{enumName,memberName:member.id.name});return node.members=members.booleanMembers,this.expect(8),this.finishNode(node,"EnumBooleanBody")}if(!boolsLen&&!strsLen&&numsLen>=defaultedLen){for(const member of members.defaultedMembers)this.flowEnumErrorNumberMemberNotInitialized(member.loc.start,{enumName,memberName:member.id.name});return node.members=members.numberMembers,this.expect(8),this.finishNode(node,"EnumNumberBody")}return this.raise(FlowErrors.EnumInconsistentMemberValues,{at:nameLoc,enumName}),empty()}return node.members=this.flowEnumStringMembers(members.stringMembers,members.defaultedMembers,{enumName}),this.expect(8),this.finishNode(node,"EnumStringBody")}return empty()}}}flowParseEnumDeclaration(node){const id=this.parseIdentifier();return node.id=id,node.body=this.flowEnumBody(this.startNode(),id),this.finishNode(node,"EnumDeclaration")}isLookaheadToken_lt(){const next=this.nextTokenStart();if(60===this.input.charCodeAt(next)){const afterNext=this.input.charCodeAt(next+1);return 60!==afterNext&&61!==afterNext}return !1}maybeUnwrapTypeCastExpression(node){return "TypeCastExpression"===node.type?node.expression:node}},typescript:superClass=>class extends superClass{constructor(...args){super(...args),this.tsParseInOutModifiers=this.tsParseModifiers.bind(this,{allowedModifiers:["in","out"],disallowedModifiers:["const","public","private","protected","readonly","declare","abstract","override"],errorTemplate:TSErrors.InvalidModifierOnTypeParameter}),this.tsParseConstModifier=this.tsParseModifiers.bind(this,{allowedModifiers:["const"],disallowedModifiers:["in","out"],errorTemplate:TSErrors.InvalidModifierOnTypeParameterPositions}),this.tsParseInOutConstModifiers=this.tsParseModifiers.bind(this,{allowedModifiers:["in","out","const"],disallowedModifiers:["public","private","protected","readonly","declare","abstract","override"],errorTemplate:TSErrors.InvalidModifierOnTypeParameter});}getScopeHandler(){return TypeScriptScopeHandler}tsIsIdentifier(){return tokenIsIdentifier(this.state.type)}tsTokenCanFollowModifier(){return (this.match(0)||this.match(5)||this.match(55)||this.match(21)||this.match(136)||this.isLiteralPropertyName())&&!this.hasPrecedingLineBreak()}tsNextTokenCanFollowModifier(){return this.next(),this.tsTokenCanFollowModifier()}tsParseModifier(allowedModifiers,stopOnStartOfClassStaticBlock){if(!tokenIsIdentifier(this.state.type)&&58!==this.state.type&&75!==this.state.type)return;const modifier=this.state.value;if(-1!==allowedModifiers.indexOf(modifier)){if(stopOnStartOfClassStaticBlock&&this.tsIsStartOfStaticBlocks())return;if(this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this)))return modifier}}tsParseModifiers({allowedModifiers,disallowedModifiers,stopOnStartOfClassStaticBlock,errorTemplate=TSErrors.InvalidModifierOnTypeMember},modified){const enforceOrder=(loc,modifier,before,after)=>{modifier===before&&modified[after]&&this.raise(TSErrors.InvalidModifiersOrder,{at:loc,orderedModifiers:[before,after]});},incompatible=(loc,modifier,mod1,mod2)=>{(modified[mod1]&&modifier===mod2||modified[mod2]&&modifier===mod1)&&this.raise(TSErrors.IncompatibleModifiers,{at:loc,modifiers:[mod1,mod2]});};for(;;){const{startLoc}=this.state,modifier=this.tsParseModifier(allowedModifiers.concat(null!=disallowedModifiers?disallowedModifiers:[]),stopOnStartOfClassStaticBlock);if(!modifier)break;tsIsAccessModifier(modifier)?modified.accessibility?this.raise(TSErrors.DuplicateAccessibilityModifier,{at:startLoc,modifier}):(enforceOrder(startLoc,modifier,modifier,"override"),enforceOrder(startLoc,modifier,modifier,"static"),enforceOrder(startLoc,modifier,modifier,"readonly"),modified.accessibility=modifier):tsIsVarianceAnnotations(modifier)?(modified[modifier]&&this.raise(TSErrors.DuplicateModifier,{at:startLoc,modifier}),modified[modifier]=!0,enforceOrder(startLoc,modifier,"in","out")):(Object.hasOwnProperty.call(modified,modifier)?this.raise(TSErrors.DuplicateModifier,{at:startLoc,modifier}):(enforceOrder(startLoc,modifier,"static","readonly"),enforceOrder(startLoc,modifier,"static","override"),enforceOrder(startLoc,modifier,"override","readonly"),enforceOrder(startLoc,modifier,"abstract","override"),incompatible(startLoc,modifier,"declare","override"),incompatible(startLoc,modifier,"static","abstract")),modified[modifier]=!0),null!=disallowedModifiers&&disallowedModifiers.includes(modifier)&&this.raise(errorTemplate,{at:startLoc,modifier});}}tsIsListTerminator(kind){switch(kind){case"EnumMembers":case"TypeMembers":return this.match(8);case"HeritageClauseElement":return this.match(5);case"TupleElementTypes":return this.match(3);case"TypeParametersOrArguments":return this.match(48)}}tsParseList(kind,parseElement){const result=[];for(;!this.tsIsListTerminator(kind);)result.push(parseElement());return result}tsParseDelimitedList(kind,parseElement,refTrailingCommaPos){return function(x){if(null==x)throw new Error(`Unexpected ${x} value.`);return x}(this.tsParseDelimitedListWorker(kind,parseElement,!0,refTrailingCommaPos))}tsParseDelimitedListWorker(kind,parseElement,expectSuccess,refTrailingCommaPos){const result=[];let trailingCommaPos=-1;for(;!this.tsIsListTerminator(kind);){trailingCommaPos=-1;const element=parseElement();if(null==element)return;if(result.push(element),!this.eat(12)){if(this.tsIsListTerminator(kind))break;return void(expectSuccess&&this.expect(12))}trailingCommaPos=this.state.lastTokStart;}return refTrailingCommaPos&&(refTrailingCommaPos.value=trailingCommaPos),result}tsParseBracketedList(kind,parseElement,bracket,skipFirstToken,refTrailingCommaPos){skipFirstToken||(bracket?this.expect(0):this.expect(47));const result=this.tsParseDelimitedList(kind,parseElement,refTrailingCommaPos);return bracket?this.expect(3):this.expect(48),result}tsParseImportType(){const node=this.startNode();return this.expect(83),this.expect(10),this.match(131)||this.raise(TSErrors.UnsupportedImportTypeArgument,{at:this.state.startLoc}),node.argument=super.parseExprAtom(),this.expect(11),this.eat(16)&&(node.qualifier=this.tsParseEntityName()),this.match(47)&&(node.typeParameters=this.tsParseTypeArguments()),this.finishNode(node,"TSImportType")}tsParseEntityName(allowReservedWords=!0){let entity=this.parseIdentifier(allowReservedWords);for(;this.eat(16);){const node=this.startNodeAtNode(entity);node.left=entity,node.right=this.parseIdentifier(allowReservedWords),entity=this.finishNode(node,"TSQualifiedName");}return entity}tsParseTypeReference(){const node=this.startNode();return node.typeName=this.tsParseEntityName(),!this.hasPrecedingLineBreak()&&this.match(47)&&(node.typeParameters=this.tsParseTypeArguments()),this.finishNode(node,"TSTypeReference")}tsParseThisTypePredicate(lhs){this.next();const node=this.startNodeAtNode(lhs);return node.parameterName=lhs,node.typeAnnotation=this.tsParseTypeAnnotation(!1),node.asserts=!1,this.finishNode(node,"TSTypePredicate")}tsParseThisTypeNode(){const node=this.startNode();return this.next(),this.finishNode(node,"TSThisType")}tsParseTypeQuery(){const node=this.startNode();return this.expect(87),this.match(83)?node.exprName=this.tsParseImportType():node.exprName=this.tsParseEntityName(),!this.hasPrecedingLineBreak()&&this.match(47)&&(node.typeParameters=this.tsParseTypeArguments()),this.finishNode(node,"TSTypeQuery")}tsParseTypeParameter(parseModifiers){const node=this.startNode();return parseModifiers(node),node.name=this.tsParseTypeParameterName(),node.constraint=this.tsEatThenParseType(81),node.default=this.tsEatThenParseType(29),this.finishNode(node,"TSTypeParameter")}tsTryParseTypeParameters(parseModifiers){if(this.match(47))return this.tsParseTypeParameters(parseModifiers)}tsParseTypeParameters(parseModifiers){const node=this.startNode();this.match(47)||this.match(140)?this.next():this.unexpected();const refTrailingCommaPos={value:-1};return node.params=this.tsParseBracketedList("TypeParametersOrArguments",this.tsParseTypeParameter.bind(this,parseModifiers),!1,!0,refTrailingCommaPos),0===node.params.length&&this.raise(TSErrors.EmptyTypeParameters,{at:node}),-1!==refTrailingCommaPos.value&&this.addExtra(node,"trailingComma",refTrailingCommaPos.value),this.finishNode(node,"TSTypeParameterDeclaration")}tsFillSignature(returnToken,signature){const returnTokenRequired=19===returnToken;signature.typeParameters=this.tsTryParseTypeParameters(this.tsParseConstModifier),this.expect(10),signature.parameters=this.tsParseBindingListForSignature(),(returnTokenRequired||this.match(returnToken))&&(signature.typeAnnotation=this.tsParseTypeOrTypePredicateAnnotation(returnToken));}tsParseBindingListForSignature(){return super.parseBindingList(11,41,2).map((pattern=>("Identifier"!==pattern.type&&"RestElement"!==pattern.type&&"ObjectPattern"!==pattern.type&&"ArrayPattern"!==pattern.type&&this.raise(TSErrors.UnsupportedSignatureParameterKind,{at:pattern,type:pattern.type}),pattern)))}tsParseTypeMemberSemicolon(){this.eat(12)||this.isLineTerminator()||this.expect(13);}tsParseSignatureMember(kind,node){return this.tsFillSignature(14,node),this.tsParseTypeMemberSemicolon(),this.finishNode(node,kind)}tsIsUnambiguouslyIndexSignature(){return this.next(),!!tokenIsIdentifier(this.state.type)&&(this.next(),this.match(14))}tsTryParseIndexSignature(node){if(!this.match(0)||!this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))return;this.expect(0);const id=this.parseIdentifier();id.typeAnnotation=this.tsParseTypeAnnotation(),this.resetEndLocation(id),this.expect(3),node.parameters=[id];const type=this.tsTryParseTypeAnnotation();return type&&(node.typeAnnotation=type),this.tsParseTypeMemberSemicolon(),this.finishNode(node,"TSIndexSignature")}tsParsePropertyOrMethodSignature(node,readonly){this.eat(17)&&(node.optional=!0);const nodeAny=node;if(this.match(10)||this.match(47)){readonly&&this.raise(TSErrors.ReadonlyForMethodSignature,{at:node});const method=nodeAny;method.kind&&this.match(47)&&this.raise(TSErrors.AccesorCannotHaveTypeParameters,{at:this.state.curPosition()}),this.tsFillSignature(14,method),this.tsParseTypeMemberSemicolon();const paramsKey="parameters",returnTypeKey="typeAnnotation";if("get"===method.kind)method[paramsKey].length>0&&(this.raise(Errors.BadGetterArity,{at:this.state.curPosition()}),this.isThisParam(method[paramsKey][0])&&this.raise(TSErrors.AccesorCannotDeclareThisParameter,{at:this.state.curPosition()}));else if("set"===method.kind){if(1!==method[paramsKey].length)this.raise(Errors.BadSetterArity,{at:this.state.curPosition()});else {const firstParameter=method[paramsKey][0];this.isThisParam(firstParameter)&&this.raise(TSErrors.AccesorCannotDeclareThisParameter,{at:this.state.curPosition()}),"Identifier"===firstParameter.type&&firstParameter.optional&&this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter,{at:this.state.curPosition()}),"RestElement"===firstParameter.type&&this.raise(TSErrors.SetAccesorCannotHaveRestParameter,{at:this.state.curPosition()});}method[returnTypeKey]&&this.raise(TSErrors.SetAccesorCannotHaveReturnType,{at:method[returnTypeKey]});}else method.kind="method";return this.finishNode(method,"TSMethodSignature")}{const property=nodeAny;readonly&&(property.readonly=!0);const type=this.tsTryParseTypeAnnotation();return type&&(property.typeAnnotation=type),this.tsParseTypeMemberSemicolon(),this.finishNode(property,"TSPropertySignature")}}tsParseTypeMember(){const node=this.startNode();if(this.match(10)||this.match(47))return this.tsParseSignatureMember("TSCallSignatureDeclaration",node);if(this.match(77)){const id=this.startNode();return this.next(),this.match(10)||this.match(47)?this.tsParseSignatureMember("TSConstructSignatureDeclaration",node):(node.key=this.createIdentifier(id,"new"),this.tsParsePropertyOrMethodSignature(node,!1))}this.tsParseModifiers({allowedModifiers:["readonly"],disallowedModifiers:["declare","abstract","private","protected","public","static","override"]},node);const idx=this.tsTryParseIndexSignature(node);return idx||(super.parsePropertyName(node),node.computed||"Identifier"!==node.key.type||"get"!==node.key.name&&"set"!==node.key.name||!this.tsTokenCanFollowModifier()||(node.kind=node.key.name,super.parsePropertyName(node)),this.tsParsePropertyOrMethodSignature(node,!!node.readonly))}tsParseTypeLiteral(){const node=this.startNode();return node.members=this.tsParseObjectTypeMembers(),this.finishNode(node,"TSTypeLiteral")}tsParseObjectTypeMembers(){this.expect(5);const members=this.tsParseList("TypeMembers",this.tsParseTypeMember.bind(this));return this.expect(8),members}tsIsStartOfMappedType(){return this.next(),this.eat(53)?this.isContextual(120):(this.isContextual(120)&&this.next(),!!this.match(0)&&(this.next(),!!this.tsIsIdentifier()&&(this.next(),this.match(58))))}tsParseMappedTypeParameter(){const node=this.startNode();return node.name=this.tsParseTypeParameterName(),node.constraint=this.tsExpectThenParseType(58),this.finishNode(node,"TSTypeParameter")}tsParseMappedType(){const node=this.startNode();return this.expect(5),this.match(53)?(node.readonly=this.state.value,this.next(),this.expectContextual(120)):this.eatContextual(120)&&(node.readonly=!0),this.expect(0),node.typeParameter=this.tsParseMappedTypeParameter(),node.nameType=this.eatContextual(93)?this.tsParseType():null,this.expect(3),this.match(53)?(node.optional=this.state.value,this.next(),this.expect(17)):this.eat(17)&&(node.optional=!0),node.typeAnnotation=this.tsTryParseType(),this.semicolon(),this.expect(8),this.finishNode(node,"TSMappedType")}tsParseTupleType(){const node=this.startNode();node.elementTypes=this.tsParseBracketedList("TupleElementTypes",this.tsParseTupleElementType.bind(this),!0,!1);let seenOptionalElement=!1,labeledElements=null;return node.elementTypes.forEach((elementNode=>{const{type}=elementNode;!seenOptionalElement||"TSRestType"===type||"TSOptionalType"===type||"TSNamedTupleMember"===type&&elementNode.optional||this.raise(TSErrors.OptionalTypeBeforeRequired,{at:elementNode}),seenOptionalElement||(seenOptionalElement="TSNamedTupleMember"===type&&elementNode.optional||"TSOptionalType"===type);let checkType=type;"TSRestType"===type&&(checkType=(elementNode=elementNode.typeAnnotation).type);const isLabeled="TSNamedTupleMember"===checkType;null!=labeledElements||(labeledElements=isLabeled),labeledElements!==isLabeled&&this.raise(TSErrors.MixedLabeledAndUnlabeledElements,{at:elementNode});})),this.finishNode(node,"TSTupleType")}tsParseTupleElementType(){const{startLoc}=this.state,rest=this.eat(21);let labeled,label,optional,type;const chAfterWord=tokenIsKeywordOrIdentifier(this.state.type)?this.lookaheadCharCode():null;if(58===chAfterWord)labeled=!0,optional=!1,label=this.parseIdentifier(!0),this.expect(14),type=this.tsParseType();else if(63===chAfterWord){optional=!0;const startLoc=this.state.startLoc,wordName=this.state.value,typeOrLabel=this.tsParseNonArrayType();58===this.lookaheadCharCode()?(labeled=!0,label=this.createIdentifier(this.startNodeAt(startLoc),wordName),this.expect(17),this.expect(14),type=this.tsParseType()):(labeled=!1,type=typeOrLabel,this.expect(17));}else type=this.tsParseType(),optional=this.eat(17),labeled=this.eat(14);if(labeled){let labeledNode;label?(labeledNode=this.startNodeAtNode(label),labeledNode.optional=optional,labeledNode.label=label,labeledNode.elementType=type,this.eat(17)&&(labeledNode.optional=!0,this.raise(TSErrors.TupleOptionalAfterType,{at:this.state.lastTokStartLoc}))):(labeledNode=this.startNodeAtNode(type),labeledNode.optional=optional,this.raise(TSErrors.InvalidTupleMemberLabel,{at:type}),labeledNode.label=type,labeledNode.elementType=this.tsParseType()),type=this.finishNode(labeledNode,"TSNamedTupleMember");}else if(optional){const optionalTypeNode=this.startNodeAtNode(type);optionalTypeNode.typeAnnotation=type,type=this.finishNode(optionalTypeNode,"TSOptionalType");}if(rest){const restNode=this.startNodeAt(startLoc);restNode.typeAnnotation=type,type=this.finishNode(restNode,"TSRestType");}return type}tsParseParenthesizedType(){const node=this.startNode();return this.expect(10),node.typeAnnotation=this.tsParseType(),this.expect(11),this.finishNode(node,"TSParenthesizedType")}tsParseFunctionOrConstructorType(type,abstract){const node=this.startNode();return "TSConstructorType"===type&&(node.abstract=!!abstract,abstract&&this.next(),this.next()),this.tsInAllowConditionalTypesContext((()=>this.tsFillSignature(19,node))),this.finishNode(node,type)}tsParseLiteralTypeNode(){const node=this.startNode();return node.literal=(()=>{switch(this.state.type){case 132:case 133:case 131:case 85:case 86:return super.parseExprAtom();default:this.unexpected();}})(),this.finishNode(node,"TSLiteralType")}tsParseTemplateLiteralType(){const node=this.startNode();return node.literal=super.parseTemplate(!1),this.finishNode(node,"TSLiteralType")}parseTemplateSubstitution(){return this.state.inType?this.tsParseType():super.parseTemplateSubstitution()}tsParseThisTypeOrThisTypePredicate(){const thisKeyword=this.tsParseThisTypeNode();return this.isContextual(114)&&!this.hasPrecedingLineBreak()?this.tsParseThisTypePredicate(thisKeyword):thisKeyword}tsParseNonArrayType(){switch(this.state.type){case 131:case 132:case 133:case 85:case 86:return this.tsParseLiteralTypeNode();case 53:if("-"===this.state.value){const node=this.startNode(),nextToken=this.lookahead();return 132!==nextToken.type&&133!==nextToken.type&&this.unexpected(),node.literal=this.parseMaybeUnary(),this.finishNode(node,"TSLiteralType")}break;case 78:return this.tsParseThisTypeOrThisTypePredicate();case 87:return this.tsParseTypeQuery();case 83:return this.tsParseImportType();case 5:return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))?this.tsParseMappedType():this.tsParseTypeLiteral();case 0:return this.tsParseTupleType();case 10:return this.tsParseParenthesizedType();case 25:case 24:return this.tsParseTemplateLiteralType();default:{const{type}=this.state;if(tokenIsIdentifier(type)||88===type||84===type){const nodeType=88===type?"TSVoidKeyword":84===type?"TSNullKeyword":function(value){switch(value){case"any":return "TSAnyKeyword";case"boolean":return "TSBooleanKeyword";case"bigint":return "TSBigIntKeyword";case"never":return "TSNeverKeyword";case"number":return "TSNumberKeyword";case"object":return "TSObjectKeyword";case"string":return "TSStringKeyword";case"symbol":return "TSSymbolKeyword";case"undefined":return "TSUndefinedKeyword";case"unknown":return "TSUnknownKeyword";default:return}}(this.state.value);if(void 0!==nodeType&&46!==this.lookaheadCharCode()){const node=this.startNode();return this.next(),this.finishNode(node,nodeType)}return this.tsParseTypeReference()}}}this.unexpected();}tsParseArrayTypeOrHigher(){let type=this.tsParseNonArrayType();for(;!this.hasPrecedingLineBreak()&&this.eat(0);)if(this.match(3)){const node=this.startNodeAtNode(type);node.elementType=type,this.expect(3),type=this.finishNode(node,"TSArrayType");}else {const node=this.startNodeAtNode(type);node.objectType=type,node.indexType=this.tsParseType(),this.expect(3),type=this.finishNode(node,"TSIndexedAccessType");}return type}tsParseTypeOperator(){const node=this.startNode(),operator=this.state.value;return this.next(),node.operator=operator,node.typeAnnotation=this.tsParseTypeOperatorOrHigher(),"readonly"===operator&&this.tsCheckTypeAnnotationForReadOnly(node),this.finishNode(node,"TSTypeOperator")}tsCheckTypeAnnotationForReadOnly(node){switch(node.typeAnnotation.type){case"TSTupleType":case"TSArrayType":return;default:this.raise(TSErrors.UnexpectedReadonly,{at:node});}}tsParseInferType(){const node=this.startNode();this.expectContextual(113);const typeParameter=this.startNode();return typeParameter.name=this.tsParseTypeParameterName(),typeParameter.constraint=this.tsTryParse((()=>this.tsParseConstraintForInferType())),node.typeParameter=this.finishNode(typeParameter,"TSTypeParameter"),this.finishNode(node,"TSInferType")}tsParseConstraintForInferType(){if(this.eat(81)){const constraint=this.tsInDisallowConditionalTypesContext((()=>this.tsParseType()));if(this.state.inDisallowConditionalTypesContext||!this.match(17))return constraint}}tsParseTypeOperatorOrHigher(){var token;return (token=this.state.type)>=119&&token<=121&&!this.state.containsEsc?this.tsParseTypeOperator():this.isContextual(113)?this.tsParseInferType():this.tsInAllowConditionalTypesContext((()=>this.tsParseArrayTypeOrHigher()))}tsParseUnionOrIntersectionType(kind,parseConstituentType,operator){const node=this.startNode(),hasLeadingOperator=this.eat(operator),types=[];do{types.push(parseConstituentType());}while(this.eat(operator));return 1!==types.length||hasLeadingOperator?(node.types=types,this.finishNode(node,kind)):types[0]}tsParseIntersectionTypeOrHigher(){return this.tsParseUnionOrIntersectionType("TSIntersectionType",this.tsParseTypeOperatorOrHigher.bind(this),45)}tsParseUnionTypeOrHigher(){return this.tsParseUnionOrIntersectionType("TSUnionType",this.tsParseIntersectionTypeOrHigher.bind(this),43)}tsIsStartOfFunctionType(){return !!this.match(47)||this.match(10)&&this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))}tsSkipParameterStart(){if(tokenIsIdentifier(this.state.type)||this.match(78))return this.next(),!0;if(this.match(5)){const{errors}=this.state,previousErrorCount=errors.length;try{return this.parseObjectLike(8,!0),errors.length===previousErrorCount}catch(_unused){return !1}}if(this.match(0)){this.next();const{errors}=this.state,previousErrorCount=errors.length;try{return super.parseBindingList(3,93,1),errors.length===previousErrorCount}catch(_unused2){return !1}}return !1}tsIsUnambiguouslyStartOfFunctionType(){if(this.next(),this.match(11)||this.match(21))return !0;if(this.tsSkipParameterStart()){if(this.match(14)||this.match(12)||this.match(17)||this.match(29))return !0;if(this.match(11)&&(this.next(),this.match(19)))return !0}return !1}tsParseTypeOrTypePredicateAnnotation(returnToken){return this.tsInType((()=>{const t=this.startNode();this.expect(returnToken);const node=this.startNode(),asserts=!!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));if(asserts&&this.match(78)){let thisTypePredicate=this.tsParseThisTypeOrThisTypePredicate();return "TSThisType"===thisTypePredicate.type?(node.parameterName=thisTypePredicate,node.asserts=!0,node.typeAnnotation=null,thisTypePredicate=this.finishNode(node,"TSTypePredicate")):(this.resetStartLocationFromNode(thisTypePredicate,node),thisTypePredicate.asserts=!0),t.typeAnnotation=thisTypePredicate,this.finishNode(t,"TSTypeAnnotation")}const typePredicateVariable=this.tsIsIdentifier()&&this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));if(!typePredicateVariable)return asserts?(node.parameterName=this.parseIdentifier(),node.asserts=asserts,node.typeAnnotation=null,t.typeAnnotation=this.finishNode(node,"TSTypePredicate"),this.finishNode(t,"TSTypeAnnotation")):this.tsParseTypeAnnotation(!1,t);const type=this.tsParseTypeAnnotation(!1);return node.parameterName=typePredicateVariable,node.typeAnnotation=type,node.asserts=asserts,t.typeAnnotation=this.finishNode(node,"TSTypePredicate"),this.finishNode(t,"TSTypeAnnotation")}))}tsTryParseTypeOrTypePredicateAnnotation(){return this.match(14)?this.tsParseTypeOrTypePredicateAnnotation(14):void 0}tsTryParseTypeAnnotation(){return this.match(14)?this.tsParseTypeAnnotation():void 0}tsTryParseType(){return this.tsEatThenParseType(14)}tsParseTypePredicatePrefix(){const id=this.parseIdentifier();if(this.isContextual(114)&&!this.hasPrecedingLineBreak())return this.next(),id}tsParseTypePredicateAsserts(){if(107!==this.state.type)return !1;const containsEsc=this.state.containsEsc;return this.next(),!(!tokenIsIdentifier(this.state.type)&&!this.match(78))&&(containsEsc&&this.raise(Errors.InvalidEscapedReservedWord,{at:this.state.lastTokStartLoc,reservedWord:"asserts"}),!0)}tsParseTypeAnnotation(eatColon=!0,t=this.startNode()){return this.tsInType((()=>{eatColon&&this.expect(14),t.typeAnnotation=this.tsParseType();})),this.finishNode(t,"TSTypeAnnotation")}tsParseType(){assert(this.state.inType);const type=this.tsParseNonConditionalType();if(this.state.inDisallowConditionalTypesContext||this.hasPrecedingLineBreak()||!this.eat(81))return type;const node=this.startNodeAtNode(type);return node.checkType=type,node.extendsType=this.tsInDisallowConditionalTypesContext((()=>this.tsParseNonConditionalType())),this.expect(17),node.trueType=this.tsInAllowConditionalTypesContext((()=>this.tsParseType())),this.expect(14),node.falseType=this.tsInAllowConditionalTypesContext((()=>this.tsParseType())),this.finishNode(node,"TSConditionalType")}isAbstractConstructorSignature(){return this.isContextual(122)&&77===this.lookahead().type}tsParseNonConditionalType(){return this.tsIsStartOfFunctionType()?this.tsParseFunctionOrConstructorType("TSFunctionType"):this.match(77)?this.tsParseFunctionOrConstructorType("TSConstructorType"):this.isAbstractConstructorSignature()?this.tsParseFunctionOrConstructorType("TSConstructorType",!0):this.tsParseUnionTypeOrHigher()}tsParseTypeAssertion(){this.getPluginOption("typescript","disallowAmbiguousJSXLike")&&this.raise(TSErrors.ReservedTypeAssertion,{at:this.state.startLoc});const node=this.startNode();return node.typeAnnotation=this.tsInType((()=>(this.next(),this.match(75)?this.tsParseTypeReference():this.tsParseType()))),this.expect(48),node.expression=this.parseMaybeUnary(),this.finishNode(node,"TSTypeAssertion")}tsParseHeritageClause(token){const originalStartLoc=this.state.startLoc,delimitedList=this.tsParseDelimitedList("HeritageClauseElement",(()=>{const node=this.startNode();return node.expression=this.tsParseEntityName(),this.match(47)&&(node.typeParameters=this.tsParseTypeArguments()),this.finishNode(node,"TSExpressionWithTypeArguments")}));return delimitedList.length||this.raise(TSErrors.EmptyHeritageClauseType,{at:originalStartLoc,token}),delimitedList}tsParseInterfaceDeclaration(node,properties={}){if(this.hasFollowingLineBreak())return null;this.expectContextual(127),properties.declare&&(node.declare=!0),tokenIsIdentifier(this.state.type)?(node.id=this.parseIdentifier(),this.checkIdentifier(node.id,130)):(node.id=null,this.raise(TSErrors.MissingInterfaceName,{at:this.state.startLoc})),node.typeParameters=this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers),this.eat(81)&&(node.extends=this.tsParseHeritageClause("extends"));const body=this.startNode();return body.body=this.tsInType(this.tsParseObjectTypeMembers.bind(this)),node.body=this.finishNode(body,"TSInterfaceBody"),this.finishNode(node,"TSInterfaceDeclaration")}tsParseTypeAliasDeclaration(node){return node.id=this.parseIdentifier(),this.checkIdentifier(node.id,2),node.typeAnnotation=this.tsInType((()=>{if(node.typeParameters=this.tsTryParseTypeParameters(this.tsParseInOutModifiers),this.expect(29),this.isContextual(112)&&16!==this.lookahead().type){const node=this.startNode();return this.next(),this.finishNode(node,"TSIntrinsicKeyword")}return this.tsParseType()})),this.semicolon(),this.finishNode(node,"TSTypeAliasDeclaration")}tsInNoContext(cb){const oldContext=this.state.context;this.state.context=[oldContext[0]];try{return cb()}finally{this.state.context=oldContext;}}tsInType(cb){const oldInType=this.state.inType;this.state.inType=!0;try{return cb()}finally{this.state.inType=oldInType;}}tsInDisallowConditionalTypesContext(cb){const oldInDisallowConditionalTypesContext=this.state.inDisallowConditionalTypesContext;this.state.inDisallowConditionalTypesContext=!0;try{return cb()}finally{this.state.inDisallowConditionalTypesContext=oldInDisallowConditionalTypesContext;}}tsInAllowConditionalTypesContext(cb){const oldInDisallowConditionalTypesContext=this.state.inDisallowConditionalTypesContext;this.state.inDisallowConditionalTypesContext=!1;try{return cb()}finally{this.state.inDisallowConditionalTypesContext=oldInDisallowConditionalTypesContext;}}tsEatThenParseType(token){return this.match(token)?this.tsNextThenParseType():void 0}tsExpectThenParseType(token){return this.tsDoThenParseType((()=>this.expect(token)))}tsNextThenParseType(){return this.tsDoThenParseType((()=>this.next()))}tsDoThenParseType(cb){return this.tsInType((()=>(cb(),this.tsParseType())))}tsParseEnumMember(){const node=this.startNode();return node.id=this.match(131)?super.parseStringLiteral(this.state.value):this.parseIdentifier(!0),this.eat(29)&&(node.initializer=super.parseMaybeAssignAllowIn()),this.finishNode(node,"TSEnumMember")}tsParseEnumDeclaration(node,properties={}){return properties.const&&(node.const=!0),properties.declare&&(node.declare=!0),this.expectContextual(124),node.id=this.parseIdentifier(),this.checkIdentifier(node.id,node.const?8971:8459),this.expect(5),node.members=this.tsParseDelimitedList("EnumMembers",this.tsParseEnumMember.bind(this)),this.expect(8),this.finishNode(node,"TSEnumDeclaration")}tsParseModuleBlock(){const node=this.startNode();return this.scope.enter(0),this.expect(5),super.parseBlockOrModuleBlockBody(node.body=[],void 0,!0,8),this.scope.exit(),this.finishNode(node,"TSModuleBlock")}tsParseModuleOrNamespaceDeclaration(node,nested=!1){if(node.id=this.parseIdentifier(),nested||this.checkIdentifier(node.id,1024),this.eat(16)){const inner=this.startNode();this.tsParseModuleOrNamespaceDeclaration(inner,!0),node.body=inner;}else this.scope.enter(256),this.prodParam.enter(0),node.body=this.tsParseModuleBlock(),this.prodParam.exit(),this.scope.exit();return this.finishNode(node,"TSModuleDeclaration")}tsParseAmbientExternalModuleDeclaration(node){return this.isContextual(110)?(node.global=!0,node.id=this.parseIdentifier()):this.match(131)?node.id=super.parseStringLiteral(this.state.value):this.unexpected(),this.match(5)?(this.scope.enter(256),this.prodParam.enter(0),node.body=this.tsParseModuleBlock(),this.prodParam.exit(),this.scope.exit()):this.semicolon(),this.finishNode(node,"TSModuleDeclaration")}tsParseImportEqualsDeclaration(node,isExport){node.isExport=isExport||!1,node.id=this.parseIdentifier(),this.checkIdentifier(node.id,4096),this.expect(29);const moduleReference=this.tsParseModuleReference();return "type"===node.importKind&&"TSExternalModuleReference"!==moduleReference.type&&this.raise(TSErrors.ImportAliasHasImportType,{at:moduleReference}),node.moduleReference=moduleReference,this.semicolon(),this.finishNode(node,"TSImportEqualsDeclaration")}tsIsExternalModuleReference(){return this.isContextual(117)&&40===this.lookaheadCharCode()}tsParseModuleReference(){return this.tsIsExternalModuleReference()?this.tsParseExternalModuleReference():this.tsParseEntityName(!1)}tsParseExternalModuleReference(){const node=this.startNode();return this.expectContextual(117),this.expect(10),this.match(131)||this.unexpected(),node.expression=super.parseExprAtom(),this.expect(11),this.finishNode(node,"TSExternalModuleReference")}tsLookAhead(f){const state=this.state.clone(),res=f();return this.state=state,res}tsTryParseAndCatch(f){const result=this.tryParse((abort=>f()||abort()));if(!result.aborted&&result.node)return result.error&&(this.state=result.failState),result.node}tsTryParse(f){const state=this.state.clone(),result=f();return void 0!==result&&!1!==result?result:void(this.state=state)}tsTryParseDeclare(nany){if(this.isLineTerminator())return;let kind,starttype=this.state.type;return this.isContextual(99)&&(starttype=74,kind="let"),this.tsInAmbientContext((()=>{if(68===starttype)return nany.declare=!0,super.parseFunctionStatement(nany,!1,!1);if(80===starttype)return nany.declare=!0,this.parseClass(nany,!0,!1);if(124===starttype)return this.tsParseEnumDeclaration(nany,{declare:!0});if(110===starttype)return this.tsParseAmbientExternalModuleDeclaration(nany);if(75===starttype||74===starttype)return this.match(75)&&this.isLookaheadContextual("enum")?(this.expect(75),this.tsParseEnumDeclaration(nany,{const:!0,declare:!0})):(nany.declare=!0,this.parseVarStatement(nany,kind||this.state.value,!0));if(127===starttype){const result=this.tsParseInterfaceDeclaration(nany,{declare:!0});if(result)return result}return tokenIsIdentifier(starttype)?this.tsParseDeclaration(nany,this.state.value,!0,null):void 0}))}tsTryParseExportDeclaration(){return this.tsParseDeclaration(this.startNode(),this.state.value,!0,null)}tsParseExpressionStatement(node,expr,decorators){switch(expr.name){case"declare":{const declaration=this.tsTryParseDeclare(node);if(declaration)return declaration.declare=!0,declaration;break}case"global":if(this.match(5)){this.scope.enter(256),this.prodParam.enter(0);const mod=node;return mod.global=!0,mod.id=expr,mod.body=this.tsParseModuleBlock(),this.scope.exit(),this.prodParam.exit(),this.finishNode(mod,"TSModuleDeclaration")}break;default:return this.tsParseDeclaration(node,expr.name,!1,decorators)}}tsParseDeclaration(node,value,next,decorators){switch(value){case"abstract":if(this.tsCheckLineTerminator(next)&&(this.match(80)||tokenIsIdentifier(this.state.type)))return this.tsParseAbstractDeclaration(node,decorators);break;case"module":if(this.tsCheckLineTerminator(next)){if(this.match(131))return this.tsParseAmbientExternalModuleDeclaration(node);if(tokenIsIdentifier(this.state.type))return this.tsParseModuleOrNamespaceDeclaration(node)}break;case"namespace":if(this.tsCheckLineTerminator(next)&&tokenIsIdentifier(this.state.type))return this.tsParseModuleOrNamespaceDeclaration(node);break;case"type":if(this.tsCheckLineTerminator(next)&&tokenIsIdentifier(this.state.type))return this.tsParseTypeAliasDeclaration(node)}}tsCheckLineTerminator(next){return next?!this.hasFollowingLineBreak()&&(this.next(),!0):!this.isLineTerminator()}tsTryParseGenericAsyncArrowFunction(startLoc){if(!this.match(47))return;const oldMaybeInArrowParameters=this.state.maybeInArrowParameters;this.state.maybeInArrowParameters=!0;const res=this.tsTryParseAndCatch((()=>{const node=this.startNodeAt(startLoc);return node.typeParameters=this.tsParseTypeParameters(this.tsParseConstModifier),super.parseFunctionParams(node),node.returnType=this.tsTryParseTypeOrTypePredicateAnnotation(),this.expect(19),node}));return this.state.maybeInArrowParameters=oldMaybeInArrowParameters,res?super.parseArrowExpression(res,null,!0):void 0}tsParseTypeArgumentsInExpression(){if(47===this.reScan_lt())return this.tsParseTypeArguments()}tsParseTypeArguments(){const node=this.startNode();return node.params=this.tsInType((()=>this.tsInNoContext((()=>(this.expect(47),this.tsParseDelimitedList("TypeParametersOrArguments",this.tsParseType.bind(this))))))),0===node.params.length&&this.raise(TSErrors.EmptyTypeArguments,{at:node}),this.expect(48),this.finishNode(node,"TSTypeParameterInstantiation")}tsIsDeclarationStart(){return (token=this.state.type)>=122&&token<=128;var token;}isExportDefaultSpecifier(){return !this.tsIsDeclarationStart()&&super.isExportDefaultSpecifier()}parseAssignableListItem(flags,decorators){const startLoc=this.state.startLoc,modified={};this.tsParseModifiers({allowedModifiers:["public","private","protected","override","readonly"]},modified);const accessibility=modified.accessibility,override=modified.override,readonly=modified.readonly;4&flags||!(accessibility||readonly||override)||this.raise(TSErrors.UnexpectedParameterModifier,{at:startLoc});const left=this.parseMaybeDefault();this.parseAssignableListItemTypes(left,flags);const elt=this.parseMaybeDefault(left.loc.start,left);if(accessibility||readonly||override){const pp=this.startNodeAt(startLoc);return decorators.length&&(pp.decorators=decorators),accessibility&&(pp.accessibility=accessibility),readonly&&(pp.readonly=readonly),override&&(pp.override=override),"Identifier"!==elt.type&&"AssignmentPattern"!==elt.type&&this.raise(TSErrors.UnsupportedParameterPropertyKind,{at:pp}),pp.parameter=elt,this.finishNode(pp,"TSParameterProperty")}return decorators.length&&(left.decorators=decorators),elt}isSimpleParameter(node){return "TSParameterProperty"===node.type&&super.isSimpleParameter(node.parameter)||super.isSimpleParameter(node)}tsDisallowOptionalPattern(node){for(const param of node.params)"Identifier"!==param.type&&param.optional&&!this.state.isAmbientContext&&this.raise(TSErrors.PatternIsOptional,{at:param});}setArrowFunctionParameters(node,params,trailingCommaLoc){super.setArrowFunctionParameters(node,params,trailingCommaLoc),this.tsDisallowOptionalPattern(node);}parseFunctionBodyAndFinish(node,type,isMethod=!1){this.match(14)&&(node.returnType=this.tsParseTypeOrTypePredicateAnnotation(14));const bodilessType="FunctionDeclaration"===type?"TSDeclareFunction":"ClassMethod"===type||"ClassPrivateMethod"===type?"TSDeclareMethod":void 0;return bodilessType&&!this.match(5)&&this.isLineTerminator()?this.finishNode(node,bodilessType):"TSDeclareFunction"===bodilessType&&this.state.isAmbientContext&&(this.raise(TSErrors.DeclareFunctionHasImplementation,{at:node}),node.declare)?super.parseFunctionBodyAndFinish(node,bodilessType,isMethod):(this.tsDisallowOptionalPattern(node),super.parseFunctionBodyAndFinish(node,type,isMethod))}registerFunctionStatementId(node){!node.body&&node.id?this.checkIdentifier(node.id,1024):super.registerFunctionStatementId(node);}tsCheckForInvalidTypeCasts(items){items.forEach((node=>{"TSTypeCastExpression"===(null==node?void 0:node.type)&&this.raise(TSErrors.UnexpectedTypeAnnotation,{at:node.typeAnnotation});}));}toReferencedList(exprList,isInParens){return this.tsCheckForInvalidTypeCasts(exprList),exprList}parseArrayLike(close,canBePattern,isTuple,refExpressionErrors){const node=super.parseArrayLike(close,canBePattern,isTuple,refExpressionErrors);return "ArrayExpression"===node.type&&this.tsCheckForInvalidTypeCasts(node.elements),node}parseSubscript(base,startLoc,noCalls,state){if(!this.hasPrecedingLineBreak()&&this.match(35)){this.state.canStartJSXElement=!1,this.next();const nonNullExpression=this.startNodeAt(startLoc);return nonNullExpression.expression=base,this.finishNode(nonNullExpression,"TSNonNullExpression")}let isOptionalCall=!1;if(this.match(18)&&60===this.lookaheadCharCode()){if(noCalls)return state.stop=!0,base;state.optionalChainMember=isOptionalCall=!0,this.next();}if(this.match(47)||this.match(51)){let missingParenErrorLoc;const result=this.tsTryParseAndCatch((()=>{if(!noCalls&&this.atPossibleAsyncArrow(base)){const asyncArrowFn=this.tsTryParseGenericAsyncArrowFunction(startLoc);if(asyncArrowFn)return asyncArrowFn}const typeArguments=this.tsParseTypeArgumentsInExpression();if(!typeArguments)return;if(isOptionalCall&&!this.match(10))return void(missingParenErrorLoc=this.state.curPosition());if(tokenIsTemplate(this.state.type)){const result=super.parseTaggedTemplateExpression(base,startLoc,state);return result.typeParameters=typeArguments,result}if(!noCalls&&this.eat(10)){const node=this.startNodeAt(startLoc);return node.callee=base,node.arguments=this.parseCallExpressionArguments(11,!1),this.tsCheckForInvalidTypeCasts(node.arguments),node.typeParameters=typeArguments,state.optionalChainMember&&(node.optional=isOptionalCall),this.finishCallExpression(node,state.optionalChainMember)}const tokenType=this.state.type;if(48===tokenType||52===tokenType||10!==tokenType&&tokenCanStartExpression(tokenType)&&!this.hasPrecedingLineBreak())return;const node=this.startNodeAt(startLoc);return node.expression=base,node.typeParameters=typeArguments,this.finishNode(node,"TSInstantiationExpression")}));if(missingParenErrorLoc&&this.unexpected(missingParenErrorLoc,10),result)return "TSInstantiationExpression"===result.type&&(this.match(16)||this.match(18)&&40!==this.lookaheadCharCode())&&this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression,{at:this.state.startLoc}),result}return super.parseSubscript(base,startLoc,noCalls,state)}parseNewCallee(node){var _callee$extra;super.parseNewCallee(node);const{callee}=node;"TSInstantiationExpression"!==callee.type||null!=(_callee$extra=callee.extra)&&_callee$extra.parenthesized||(node.typeParameters=callee.typeParameters,node.callee=callee.expression);}parseExprOp(left,leftStartLoc,minPrec){let isSatisfies;if(tokenOperatorPrecedence(58)>minPrec&&!this.hasPrecedingLineBreak()&&(this.isContextual(93)||(isSatisfies=this.isContextual(118)))){const node=this.startNodeAt(leftStartLoc);return node.expression=left,node.typeAnnotation=this.tsInType((()=>(this.next(),this.match(75)?(isSatisfies&&this.raise(Errors.UnexpectedKeyword,{at:this.state.startLoc,keyword:"const"}),this.tsParseTypeReference()):this.tsParseType()))),this.finishNode(node,isSatisfies?"TSSatisfiesExpression":"TSAsExpression"),this.reScan_lt_gt(),this.parseExprOp(node,leftStartLoc,minPrec)}return super.parseExprOp(left,leftStartLoc,minPrec)}checkReservedWord(word,startLoc,checkKeywords,isBinding){this.state.isAmbientContext||super.checkReservedWord(word,startLoc,checkKeywords,isBinding);}checkImportReflection(node){super.checkImportReflection(node),node.module&&"value"!==node.importKind&&this.raise(TSErrors.ImportReflectionHasImportType,{at:node.specifiers[0].loc.start});}checkDuplicateExports(){}parseImport(node){if(node.importKind="value",tokenIsIdentifier(this.state.type)||this.match(55)||this.match(5)){let ahead=this.lookahead();if(this.isContextual(128)&&12!==ahead.type&&97!==ahead.type&&29!==ahead.type&&(node.importKind="type",this.next(),ahead=this.lookahead()),tokenIsIdentifier(this.state.type)&&29===ahead.type)return this.tsParseImportEqualsDeclaration(node)}const importNode=super.parseImport(node);return "type"===importNode.importKind&&importNode.specifiers.length>1&&"ImportDefaultSpecifier"===importNode.specifiers[0].type&&this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed,{at:importNode}),importNode}parseExport(node,decorators){if(this.match(83))return this.next(),this.isContextual(128)&&61!==this.lookaheadCharCode()?(node.importKind="type",this.next()):node.importKind="value",this.tsParseImportEqualsDeclaration(node,!0);if(this.eat(29)){const assign=node;return assign.expression=super.parseExpression(),this.semicolon(),this.finishNode(assign,"TSExportAssignment")}if(this.eatContextual(93)){const decl=node;return this.expectContextual(126),decl.id=this.parseIdentifier(),this.semicolon(),this.finishNode(decl,"TSNamespaceExportDeclaration")}if(node.exportKind="value",this.isContextual(128)){const ch=this.lookaheadCharCode();123!==ch&&42!==ch||(this.next(),node.exportKind="type");}return super.parseExport(node,decorators)}isAbstractClass(){return this.isContextual(122)&&80===this.lookahead().type}parseExportDefaultExpression(){if(this.isAbstractClass()){const cls=this.startNode();return this.next(),cls.abstract=!0,this.parseClass(cls,!0,!0)}if(this.match(127)){const result=this.tsParseInterfaceDeclaration(this.startNode());if(result)return result}return super.parseExportDefaultExpression()}parseVarStatement(node,kind,allowMissingInitializer=!1){const{isAmbientContext}=this.state,declaration=super.parseVarStatement(node,kind,allowMissingInitializer||isAmbientContext);if(!isAmbientContext)return declaration;for(const{id,init}of declaration.declarations)init&&("const"!==kind||id.typeAnnotation?this.raise(TSErrors.InitializerNotAllowedInAmbientContext,{at:init}):isValidAmbientConstInitializer(init,this.hasPlugin("estree"))||this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,{at:init}));return declaration}parseStatementContent(flags,decorators){if(this.match(75)&&this.isLookaheadContextual("enum")){const node=this.startNode();return this.expect(75),this.tsParseEnumDeclaration(node,{const:!0})}if(this.isContextual(124))return this.tsParseEnumDeclaration(this.startNode());if(this.isContextual(127)){const result=this.tsParseInterfaceDeclaration(this.startNode());if(result)return result}return super.parseStatementContent(flags,decorators)}parseAccessModifier(){return this.tsParseModifier(["public","protected","private"])}tsHasSomeModifiers(member,modifiers){return modifiers.some((modifier=>tsIsAccessModifier(modifier)?member.accessibility===modifier:!!member[modifier]))}tsIsStartOfStaticBlocks(){return this.isContextual(104)&&123===this.lookaheadCharCode()}parseClassMember(classBody,member,state){const modifiers=["declare","private","public","protected","override","abstract","readonly","static"];this.tsParseModifiers({allowedModifiers:modifiers,disallowedModifiers:["in","out"],stopOnStartOfClassStaticBlock:!0,errorTemplate:TSErrors.InvalidModifierOnTypeParameterPositions},member);const callParseClassMemberWithIsStatic=()=>{this.tsIsStartOfStaticBlocks()?(this.next(),this.next(),this.tsHasSomeModifiers(member,modifiers)&&this.raise(TSErrors.StaticBlockCannotHaveModifier,{at:this.state.curPosition()}),super.parseClassStaticBlock(classBody,member)):this.parseClassMemberWithIsStatic(classBody,member,state,!!member.static);};member.declare?this.tsInAmbientContext(callParseClassMemberWithIsStatic):callParseClassMemberWithIsStatic();}parseClassMemberWithIsStatic(classBody,member,state,isStatic){const idx=this.tsTryParseIndexSignature(member);if(idx)return classBody.body.push(idx),member.abstract&&this.raise(TSErrors.IndexSignatureHasAbstract,{at:member}),member.accessibility&&this.raise(TSErrors.IndexSignatureHasAccessibility,{at:member,modifier:member.accessibility}),member.declare&&this.raise(TSErrors.IndexSignatureHasDeclare,{at:member}),void(member.override&&this.raise(TSErrors.IndexSignatureHasOverride,{at:member}));!this.state.inAbstractClass&&member.abstract&&this.raise(TSErrors.NonAbstractClassHasAbstractMethod,{at:member}),member.override&&(state.hadSuperClass||this.raise(TSErrors.OverrideNotInSubClass,{at:member})),super.parseClassMemberWithIsStatic(classBody,member,state,isStatic);}parsePostMemberNameModifiers(methodOrProp){this.eat(17)&&(methodOrProp.optional=!0),methodOrProp.readonly&&this.match(10)&&this.raise(TSErrors.ClassMethodHasReadonly,{at:methodOrProp}),methodOrProp.declare&&this.match(10)&&this.raise(TSErrors.ClassMethodHasDeclare,{at:methodOrProp});}parseExpressionStatement(node,expr,decorators){return ("Identifier"===expr.type?this.tsParseExpressionStatement(node,expr,decorators):void 0)||super.parseExpressionStatement(node,expr,decorators)}shouldParseExportDeclaration(){return !!this.tsIsDeclarationStart()||super.shouldParseExportDeclaration()}parseConditional(expr,startLoc,refExpressionErrors){if(!this.state.maybeInArrowParameters||!this.match(17))return super.parseConditional(expr,startLoc,refExpressionErrors);const result=this.tryParse((()=>super.parseConditional(expr,startLoc)));return result.node?(result.error&&(this.state=result.failState),result.node):(result.error&&super.setOptionalParametersError(refExpressionErrors,result.error),expr)}parseParenItem(node,startLoc){if(node=super.parseParenItem(node,startLoc),this.eat(17)&&(node.optional=!0,this.resetEndLocation(node)),this.match(14)){const typeCastNode=this.startNodeAt(startLoc);return typeCastNode.expression=node,typeCastNode.typeAnnotation=this.tsParseTypeAnnotation(),this.finishNode(typeCastNode,"TSTypeCastExpression")}return node}parseExportDeclaration(node){if(!this.state.isAmbientContext&&this.isContextual(123))return this.tsInAmbientContext((()=>this.parseExportDeclaration(node)));const startLoc=this.state.startLoc,isDeclare=this.eatContextual(123);if(isDeclare&&(this.isContextual(123)||!this.shouldParseExportDeclaration()))throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare,{at:this.state.startLoc});const declaration=tokenIsIdentifier(this.state.type)&&this.tsTryParseExportDeclaration()||super.parseExportDeclaration(node);return declaration?(("TSInterfaceDeclaration"===declaration.type||"TSTypeAliasDeclaration"===declaration.type||isDeclare)&&(node.exportKind="type"),isDeclare&&(this.resetStartLocation(declaration,startLoc),declaration.declare=!0),declaration):null}parseClassId(node,isStatement,optionalId,bindingType){if((!isStatement||optionalId)&&this.isContextual(111))return;super.parseClassId(node,isStatement,optionalId,node.declare?1024:8331);const typeParameters=this.tsTryParseTypeParameters(this.tsParseInOutConstModifiers);typeParameters&&(node.typeParameters=typeParameters);}parseClassPropertyAnnotation(node){node.optional||(this.eat(35)?node.definite=!0:this.eat(17)&&(node.optional=!0));const type=this.tsTryParseTypeAnnotation();type&&(node.typeAnnotation=type);}parseClassProperty(node){if(this.parseClassPropertyAnnotation(node),this.state.isAmbientContext&&(!node.readonly||node.typeAnnotation)&&this.match(29)&&this.raise(TSErrors.DeclareClassFieldHasInitializer,{at:this.state.startLoc}),node.abstract&&this.match(29)){const{key}=node;this.raise(TSErrors.AbstractPropertyHasInitializer,{at:this.state.startLoc,propertyName:"Identifier"!==key.type||node.computed?`[${this.input.slice(key.start,key.end)}]`:key.name});}return super.parseClassProperty(node)}parseClassPrivateProperty(node){return node.abstract&&this.raise(TSErrors.PrivateElementHasAbstract,{at:node}),node.accessibility&&this.raise(TSErrors.PrivateElementHasAccessibility,{at:node,modifier:node.accessibility}),this.parseClassPropertyAnnotation(node),super.parseClassPrivateProperty(node)}parseClassAccessorProperty(node){return this.parseClassPropertyAnnotation(node),node.optional&&this.raise(TSErrors.AccessorCannotBeOptional,{at:node}),super.parseClassAccessorProperty(node)}pushClassMethod(classBody,method,isGenerator,isAsync,isConstructor,allowsDirectSuper){const typeParameters=this.tsTryParseTypeParameters(this.tsParseConstModifier);typeParameters&&isConstructor&&this.raise(TSErrors.ConstructorHasTypeParameters,{at:typeParameters});const{declare=!1,kind}=method;!declare||"get"!==kind&&"set"!==kind||this.raise(TSErrors.DeclareAccessor,{at:method,kind}),typeParameters&&(method.typeParameters=typeParameters),super.pushClassMethod(classBody,method,isGenerator,isAsync,isConstructor,allowsDirectSuper);}pushClassPrivateMethod(classBody,method,isGenerator,isAsync){const typeParameters=this.tsTryParseTypeParameters(this.tsParseConstModifier);typeParameters&&(method.typeParameters=typeParameters),super.pushClassPrivateMethod(classBody,method,isGenerator,isAsync);}declareClassPrivateMethodInScope(node,kind){"TSDeclareMethod"!==node.type&&("MethodDefinition"!==node.type||node.value.body)&&super.declareClassPrivateMethodInScope(node,kind);}parseClassSuper(node){super.parseClassSuper(node),node.superClass&&(this.match(47)||this.match(51))&&(node.superTypeParameters=this.tsParseTypeArgumentsInExpression()),this.eatContextual(111)&&(node.implements=this.tsParseHeritageClause("implements"));}parseObjPropValue(prop,startLoc,isGenerator,isAsync,isPattern,isAccessor,refExpressionErrors){const typeParameters=this.tsTryParseTypeParameters(this.tsParseConstModifier);return typeParameters&&(prop.typeParameters=typeParameters),super.parseObjPropValue(prop,startLoc,isGenerator,isAsync,isPattern,isAccessor,refExpressionErrors)}parseFunctionParams(node,isConstructor){const typeParameters=this.tsTryParseTypeParameters(this.tsParseConstModifier);typeParameters&&(node.typeParameters=typeParameters),super.parseFunctionParams(node,isConstructor);}parseVarId(decl,kind){super.parseVarId(decl,kind),"Identifier"===decl.id.type&&!this.hasPrecedingLineBreak()&&this.eat(35)&&(decl.definite=!0);const type=this.tsTryParseTypeAnnotation();type&&(decl.id.typeAnnotation=type,this.resetEndLocation(decl.id));}parseAsyncArrowFromCallExpression(node,call){return this.match(14)&&(node.returnType=this.tsParseTypeAnnotation()),super.parseAsyncArrowFromCallExpression(node,call)}parseMaybeAssign(refExpressionErrors,afterLeftParse){var _jsx,_jsx2,_typeCast,_jsx3,_typeCast2,_jsx4,_typeCast3;let state,jsx,typeCast,typeParameters;if(this.hasPlugin("jsx")&&(this.match(140)||this.match(47))){if(state=this.state.clone(),jsx=this.tryParse((()=>super.parseMaybeAssign(refExpressionErrors,afterLeftParse)),state),!jsx.error)return jsx.node;const{context}=this.state,currentContext=context[context.length-1];currentContext!==types.j_oTag&&currentContext!==types.j_expr||context.pop();}if(!(null!=(_jsx=jsx)&&_jsx.error||this.match(47)))return super.parseMaybeAssign(refExpressionErrors,afterLeftParse);state&&state!==this.state||(state=this.state.clone());const arrow=this.tryParse((abort=>{var _expr$extra,_typeParameters;typeParameters=this.tsParseTypeParameters(this.tsParseConstModifier);const expr=super.parseMaybeAssign(refExpressionErrors,afterLeftParse);return ("ArrowFunctionExpression"!==expr.type||null!=(_expr$extra=expr.extra)&&_expr$extra.parenthesized)&&abort(),0!==(null==(_typeParameters=typeParameters)?void 0:_typeParameters.params.length)&&this.resetStartLocationFromNode(expr,typeParameters),expr.typeParameters=typeParameters,expr}),state);if(!arrow.error&&!arrow.aborted)return typeParameters&&this.reportReservedArrowTypeParam(typeParameters),arrow.node;if(!jsx&&(assert(!this.hasPlugin("jsx")),typeCast=this.tryParse((()=>super.parseMaybeAssign(refExpressionErrors,afterLeftParse)),state),!typeCast.error))return typeCast.node;if(null!=(_jsx2=jsx)&&_jsx2.node)return this.state=jsx.failState,jsx.node;if(arrow.node)return this.state=arrow.failState,typeParameters&&this.reportReservedArrowTypeParam(typeParameters),arrow.node;if(null!=(_typeCast=typeCast)&&_typeCast.node)return this.state=typeCast.failState,typeCast.node;if(null!=(_jsx3=jsx)&&_jsx3.thrown)throw jsx.error;if(arrow.thrown)throw arrow.error;if(null!=(_typeCast2=typeCast)&&_typeCast2.thrown)throw typeCast.error;throw (null==(_jsx4=jsx)?void 0:_jsx4.error)||arrow.error||(null==(_typeCast3=typeCast)?void 0:_typeCast3.error)}reportReservedArrowTypeParam(node){var _node$extra;1!==node.params.length||node.params[0].constraint||null!=(_node$extra=node.extra)&&_node$extra.trailingComma||!this.getPluginOption("typescript","disallowAmbiguousJSXLike")||this.raise(TSErrors.ReservedArrowTypeParam,{at:node});}parseMaybeUnary(refExpressionErrors,sawUnary){return !this.hasPlugin("jsx")&&this.match(47)?this.tsParseTypeAssertion():super.parseMaybeUnary(refExpressionErrors,sawUnary)}parseArrow(node){if(this.match(14)){const result=this.tryParse((abort=>{const returnType=this.tsParseTypeOrTypePredicateAnnotation(14);return !this.canInsertSemicolon()&&this.match(19)||abort(),returnType}));if(result.aborted)return;result.thrown||(result.error&&(this.state=result.failState),node.returnType=result.node);}return super.parseArrow(node)}parseAssignableListItemTypes(param,flags){if(!(2&flags))return param;this.eat(17)&&(param.optional=!0);const type=this.tsTryParseTypeAnnotation();return type&&(param.typeAnnotation=type),this.resetEndLocation(param),param}isAssignable(node,isBinding){switch(node.type){case"TSTypeCastExpression":return this.isAssignable(node.expression,isBinding);case"TSParameterProperty":return !0;default:return super.isAssignable(node,isBinding)}}toAssignable(node,isLHS=!1){switch(node.type){case"ParenthesizedExpression":this.toAssignableParenthesizedExpression(node,isLHS);break;case"TSAsExpression":case"TSSatisfiesExpression":case"TSNonNullExpression":case"TSTypeAssertion":isLHS?this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter,{at:node}):this.raise(TSErrors.UnexpectedTypeCastInParameter,{at:node}),this.toAssignable(node.expression,isLHS);break;case"AssignmentExpression":isLHS||"TSTypeCastExpression"!==node.left.type||(node.left=this.typeCastToParameter(node.left));default:super.toAssignable(node,isLHS);}}toAssignableParenthesizedExpression(node,isLHS){switch(node.expression.type){case"TSAsExpression":case"TSSatisfiesExpression":case"TSNonNullExpression":case"TSTypeAssertion":case"ParenthesizedExpression":this.toAssignable(node.expression,isLHS);break;default:super.toAssignable(node,isLHS);}}checkToRestConversion(node,allowPattern){switch(node.type){case"TSAsExpression":case"TSSatisfiesExpression":case"TSTypeAssertion":case"TSNonNullExpression":this.checkToRestConversion(node.expression,!1);break;default:super.checkToRestConversion(node,allowPattern);}}isValidLVal(type,isUnparenthesizedInAssign,binding){return object={TSTypeCastExpression:!0,TSParameterProperty:"parameter",TSNonNullExpression:"expression",TSAsExpression:(64!==binding||!isUnparenthesizedInAssign)&&["expression",!0],TSSatisfiesExpression:(64!==binding||!isUnparenthesizedInAssign)&&["expression",!0],TSTypeAssertion:(64!==binding||!isUnparenthesizedInAssign)&&["expression",!0]},key=type,Object.hasOwnProperty.call(object,key)&&object[key]||super.isValidLVal(type,isUnparenthesizedInAssign,binding);var object,key;}parseBindingAtom(){return 78===this.state.type?this.parseIdentifier(!0):super.parseBindingAtom()}parseMaybeDecoratorArguments(expr){if(this.match(47)||this.match(51)){const typeArguments=this.tsParseTypeArgumentsInExpression();if(this.match(10)){const call=super.parseMaybeDecoratorArguments(expr);return call.typeParameters=typeArguments,call}this.unexpected(null,10);}return super.parseMaybeDecoratorArguments(expr)}checkCommaAfterRest(close){return this.state.isAmbientContext&&this.match(12)&&this.lookaheadCharCode()===close?(this.next(),!1):super.checkCommaAfterRest(close)}isClassMethod(){return this.match(47)||super.isClassMethod()}isClassProperty(){return this.match(35)||this.match(14)||super.isClassProperty()}parseMaybeDefault(startLoc,left){const node=super.parseMaybeDefault(startLoc,left);return "AssignmentPattern"===node.type&&node.typeAnnotation&&node.right.start<node.typeAnnotation.start&&this.raise(TSErrors.TypeAnnotationAfterAssign,{at:node.typeAnnotation}),node}getTokenFromCode(code){if(this.state.inType){if(62===code)return void this.finishOp(48,1);if(60===code)return void this.finishOp(47,1)}super.getTokenFromCode(code);}reScan_lt_gt(){const{type}=this.state;47===type?(this.state.pos-=1,this.readToken_lt()):48===type&&(this.state.pos-=1,this.readToken_gt());}reScan_lt(){const{type}=this.state;return 51===type?(this.state.pos-=2,this.finishOp(47,1),47):type}toAssignableList(exprList,trailingCommaLoc,isLHS){for(let i=0;i<exprList.length;i++){const expr=exprList[i];"TSTypeCastExpression"===(null==expr?void 0:expr.type)&&(exprList[i]=this.typeCastToParameter(expr));}super.toAssignableList(exprList,trailingCommaLoc,isLHS);}typeCastToParameter(node){return node.expression.typeAnnotation=node.typeAnnotation,this.resetEndLocation(node.expression,node.typeAnnotation.loc.end),node.expression}shouldParseArrow(params){return this.match(14)?params.every((expr=>this.isAssignable(expr,!0))):super.shouldParseArrow(params)}shouldParseAsyncArrow(){return this.match(14)||super.shouldParseAsyncArrow()}canHaveLeadingDecorator(){return super.canHaveLeadingDecorator()||this.isAbstractClass()}jsxParseOpeningElementAfterName(node){if(this.match(47)||this.match(51)){const typeArguments=this.tsTryParseAndCatch((()=>this.tsParseTypeArgumentsInExpression()));typeArguments&&(node.typeParameters=typeArguments);}return super.jsxParseOpeningElementAfterName(node)}getGetterSetterExpectedParamCount(method){const baseCount=super.getGetterSetterExpectedParamCount(method),firstParam=this.getObjectOrClassMethodParams(method)[0];return firstParam&&this.isThisParam(firstParam)?baseCount+1:baseCount}parseCatchClauseParam(){const param=super.parseCatchClauseParam(),type=this.tsTryParseTypeAnnotation();return type&&(param.typeAnnotation=type,this.resetEndLocation(param)),param}tsInAmbientContext(cb){const oldIsAmbientContext=this.state.isAmbientContext;this.state.isAmbientContext=!0;try{return cb()}finally{this.state.isAmbientContext=oldIsAmbientContext;}}parseClass(node,isStatement,optionalId){const oldInAbstractClass=this.state.inAbstractClass;this.state.inAbstractClass=!!node.abstract;try{return super.parseClass(node,isStatement,optionalId)}finally{this.state.inAbstractClass=oldInAbstractClass;}}tsParseAbstractDeclaration(node,decorators){if(this.match(80))return node.abstract=!0,this.maybeTakeDecorators(decorators,this.parseClass(node,!0,!1));if(this.isContextual(127)){if(!this.hasFollowingLineBreak())return node.abstract=!0,this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer,{at:node}),this.tsParseInterfaceDeclaration(node)}else this.unexpected(null,80);}parseMethod(node,isGenerator,isAsync,isConstructor,allowDirectSuper,type,inClassScope){const method=super.parseMethod(node,isGenerator,isAsync,isConstructor,allowDirectSuper,type,inClassScope);if(method.abstract){if(this.hasPlugin("estree")?!!method.value.body:!!method.body){const{key}=method;this.raise(TSErrors.AbstractMethodHasImplementation,{at:method,methodName:"Identifier"!==key.type||method.computed?`[${this.input.slice(key.start,key.end)}]`:key.name});}}return method}tsParseTypeParameterName(){return this.parseIdentifier().name}shouldParseAsAmbientContext(){return !!this.getPluginOption("typescript","dts")}parse(){return this.shouldParseAsAmbientContext()&&(this.state.isAmbientContext=!0),super.parse()}getExpression(){return this.shouldParseAsAmbientContext()&&(this.state.isAmbientContext=!0),super.getExpression()}parseExportSpecifier(node,isString,isInTypeExport,isMaybeTypeOnly){return !isString&&isMaybeTypeOnly?(this.parseTypeOnlyImportExportSpecifier(node,!1,isInTypeExport),this.finishNode(node,"ExportSpecifier")):(node.exportKind="value",super.parseExportSpecifier(node,isString,isInTypeExport,isMaybeTypeOnly))}parseImportSpecifier(specifier,importedIsString,isInTypeOnlyImport,isMaybeTypeOnly,bindingType){return !importedIsString&&isMaybeTypeOnly?(this.parseTypeOnlyImportExportSpecifier(specifier,!0,isInTypeOnlyImport),this.finishNode(specifier,"ImportSpecifier")):(specifier.importKind="value",super.parseImportSpecifier(specifier,importedIsString,isInTypeOnlyImport,isMaybeTypeOnly,isInTypeOnlyImport?4098:4096))}parseTypeOnlyImportExportSpecifier(node,isImport,isInTypeOnlyImportExport){const leftOfAsKey=isImport?"imported":"local",rightOfAsKey=isImport?"local":"exported";let rightOfAs,leftOfAs=node[leftOfAsKey],hasTypeSpecifier=!1,canParseAsKeyword=!0;const loc=leftOfAs.loc.start;if(this.isContextual(93)){const firstAs=this.parseIdentifier();if(this.isContextual(93)){const secondAs=this.parseIdentifier();tokenIsKeywordOrIdentifier(this.state.type)?(hasTypeSpecifier=!0,leftOfAs=firstAs,rightOfAs=isImport?this.parseIdentifier():this.parseModuleExportName(),canParseAsKeyword=!1):(rightOfAs=secondAs,canParseAsKeyword=!1);}else tokenIsKeywordOrIdentifier(this.state.type)?(canParseAsKeyword=!1,rightOfAs=isImport?this.parseIdentifier():this.parseModuleExportName()):(hasTypeSpecifier=!0,leftOfAs=firstAs);}else tokenIsKeywordOrIdentifier(this.state.type)&&(hasTypeSpecifier=!0,isImport?(leftOfAs=this.parseIdentifier(!0),this.isContextual(93)||this.checkReservedWord(leftOfAs.name,leftOfAs.loc.start,!0,!0)):leftOfAs=this.parseModuleExportName());hasTypeSpecifier&&isInTypeOnlyImportExport&&this.raise(isImport?TSErrors.TypeModifierIsUsedInTypeImports:TSErrors.TypeModifierIsUsedInTypeExports,{at:loc}),node[leftOfAsKey]=leftOfAs,node[rightOfAsKey]=rightOfAs;node[isImport?"importKind":"exportKind"]=hasTypeSpecifier?"type":"value",canParseAsKeyword&&this.eatContextual(93)&&(node[rightOfAsKey]=isImport?this.parseIdentifier():this.parseModuleExportName()),node[rightOfAsKey]||(node[rightOfAsKey]=cloneIdentifier(node[leftOfAsKey])),isImport&&this.checkIdentifier(node[rightOfAsKey],hasTypeSpecifier?4098:4096);}},v8intrinsic:superClass=>class extends superClass{parseV8Intrinsic(){if(this.match(54)){const v8IntrinsicStartLoc=this.state.startLoc,node=this.startNode();if(this.next(),tokenIsIdentifier(this.state.type)){const name=this.parseIdentifierName(),identifier=this.createIdentifier(node,name);if(identifier.type="V8IntrinsicIdentifier",this.match(10))return identifier}this.unexpected(v8IntrinsicStartLoc);}}parseExprAtom(refExpressionErrors){return this.parseV8Intrinsic()||super.parseExprAtom(refExpressionErrors)}},placeholders:superClass=>class extends superClass{parsePlaceholder(expectedNode){if(this.match(142)){const node=this.startNode();return this.next(),this.assertNoSpace(),node.name=super.parseIdentifier(!0),this.assertNoSpace(),this.expect(142),this.finishPlaceholder(node,expectedNode)}}finishPlaceholder(node,expectedNode){const isFinished=!(!node.expectedNode||"Placeholder"!==node.type);return node.expectedNode=expectedNode,isFinished?node:this.finishNode(node,"Placeholder")}getTokenFromCode(code){37===code&&37===this.input.charCodeAt(this.state.pos+1)?this.finishOp(142,2):super.getTokenFromCode(code);}parseExprAtom(refExpressionErrors){return this.parsePlaceholder("Expression")||super.parseExprAtom(refExpressionErrors)}parseIdentifier(liberal){return this.parsePlaceholder("Identifier")||super.parseIdentifier(liberal)}checkReservedWord(word,startLoc,checkKeywords,isBinding){void 0!==word&&super.checkReservedWord(word,startLoc,checkKeywords,isBinding);}parseBindingAtom(){return this.parsePlaceholder("Pattern")||super.parseBindingAtom()}isValidLVal(type,isParenthesized,binding){return "Placeholder"===type||super.isValidLVal(type,isParenthesized,binding)}toAssignable(node,isLHS){node&&"Placeholder"===node.type&&"Expression"===node.expectedNode?node.expectedNode="Pattern":super.toAssignable(node,isLHS);}chStartsBindingIdentifier(ch,pos){if(super.chStartsBindingIdentifier(ch,pos))return !0;return 142===this.lookahead().type}verifyBreakContinue(node,isBreak){node.label&&"Placeholder"===node.label.type||super.verifyBreakContinue(node,isBreak);}parseExpressionStatement(node,expr){if("Placeholder"!==expr.type||expr.extra&&expr.extra.parenthesized)return super.parseExpressionStatement(node,expr);if(this.match(14)){const stmt=node;return stmt.label=this.finishPlaceholder(expr,"Identifier"),this.next(),stmt.body=super.parseStatementOrSloppyAnnexBFunctionDeclaration(),this.finishNode(stmt,"LabeledStatement")}return this.semicolon(),node.name=expr.name,this.finishPlaceholder(node,"Statement")}parseBlock(allowDirectives,createNewLexicalScope,afterBlockParse){return this.parsePlaceholder("BlockStatement")||super.parseBlock(allowDirectives,createNewLexicalScope,afterBlockParse)}parseFunctionId(requireId){return this.parsePlaceholder("Identifier")||super.parseFunctionId(requireId)}parseClass(node,isStatement,optionalId){const type=isStatement?"ClassDeclaration":"ClassExpression";this.next();const oldStrict=this.state.strict,placeholder=this.parsePlaceholder("Identifier");if(placeholder){if(!(this.match(81)||this.match(142)||this.match(5))){if(optionalId||!isStatement)return node.id=null,node.body=this.finishPlaceholder(placeholder,"ClassBody"),this.finishNode(node,type);throw this.raise(PlaceholderErrors.ClassNameIsRequired,{at:this.state.startLoc})}node.id=placeholder;}else this.parseClassId(node,isStatement,optionalId);return super.parseClassSuper(node),node.body=this.parsePlaceholder("ClassBody")||super.parseClassBody(!!node.superClass,oldStrict),this.finishNode(node,type)}parseExport(node,decorators){const placeholder=this.parsePlaceholder("Identifier");if(!placeholder)return super.parseExport(node,decorators);if(!this.isContextual(97)&&!this.match(12))return node.specifiers=[],node.source=null,node.declaration=this.finishPlaceholder(placeholder,"Declaration"),this.finishNode(node,"ExportNamedDeclaration");this.expectPlugin("exportDefaultFrom");const specifier=this.startNode();return specifier.exported=placeholder,node.specifiers=[this.finishNode(specifier,"ExportDefaultSpecifier")],super.parseExport(node,decorators)}isExportDefaultSpecifier(){if(this.match(65)){const next=this.nextTokenStart();if(this.isUnparsedContextual(next,"from")&&this.input.startsWith(tokenLabelName(142),this.nextTokenStartSince(next+4)))return !0}return super.isExportDefaultSpecifier()}maybeParseExportDefaultSpecifier(node){return !!(node.specifiers&&node.specifiers.length>0)||super.maybeParseExportDefaultSpecifier(node)}checkExport(node){const{specifiers}=node;null!=specifiers&&specifiers.length&&(node.specifiers=specifiers.filter((node=>"Placeholder"===node.exported.type))),super.checkExport(node),node.specifiers=specifiers;}parseImport(node){const placeholder=this.parsePlaceholder("Identifier");if(!placeholder)return super.parseImport(node);if(node.specifiers=[],!this.isContextual(97)&&!this.match(12))return node.source=this.finishPlaceholder(placeholder,"StringLiteral"),this.semicolon(),this.finishNode(node,"ImportDeclaration");const specifier=this.startNodeAtNode(placeholder);if(specifier.local=placeholder,node.specifiers.push(this.finishNode(specifier,"ImportDefaultSpecifier")),this.eat(12)){this.maybeParseStarImportSpecifier(node)||this.parseNamedImportSpecifiers(node);}return this.expectContextual(97),node.source=this.parseImportSource(),this.semicolon(),this.finishNode(node,"ImportDeclaration")}parseImportSource(){return this.parsePlaceholder("StringLiteral")||super.parseImportSource()}assertNoSpace(){this.state.start>this.state.lastTokEndLoc.index&&this.raise(PlaceholderErrors.UnexpectedSpace,{at:this.state.lastTokEndLoc});}}},mixinPluginNames=Object.keys(mixinPlugins);class ExpressionParser extends LValParser{checkProto(prop,isRecord,protoRef,refExpressionErrors){if("SpreadElement"===prop.type||this.isObjectMethod(prop)||prop.computed||prop.shorthand)return;const key=prop.key;if("__proto__"===("Identifier"===key.type?key.name:key.value)){if(isRecord)return void this.raise(Errors.RecordNoProto,{at:key});protoRef.used&&(refExpressionErrors?null===refExpressionErrors.doubleProtoLoc&&(refExpressionErrors.doubleProtoLoc=key.loc.start):this.raise(Errors.DuplicateProto,{at:key})),protoRef.used=!0;}}shouldExitDescending(expr,potentialArrowAt){return "ArrowFunctionExpression"===expr.type&&expr.start===potentialArrowAt}getExpression(){this.enterInitialScopes(),this.nextToken();const expr=this.parseExpression();return this.match(137)||this.unexpected(),this.finalizeRemainingComments(),expr.comments=this.state.comments,expr.errors=this.state.errors,this.options.tokens&&(expr.tokens=this.tokens),expr}parseExpression(disallowIn,refExpressionErrors){return disallowIn?this.disallowInAnd((()=>this.parseExpressionBase(refExpressionErrors))):this.allowInAnd((()=>this.parseExpressionBase(refExpressionErrors)))}parseExpressionBase(refExpressionErrors){const startLoc=this.state.startLoc,expr=this.parseMaybeAssign(refExpressionErrors);if(this.match(12)){const node=this.startNodeAt(startLoc);for(node.expressions=[expr];this.eat(12);)node.expressions.push(this.parseMaybeAssign(refExpressionErrors));return this.toReferencedList(node.expressions),this.finishNode(node,"SequenceExpression")}return expr}parseMaybeAssignDisallowIn(refExpressionErrors,afterLeftParse){return this.disallowInAnd((()=>this.parseMaybeAssign(refExpressionErrors,afterLeftParse)))}parseMaybeAssignAllowIn(refExpressionErrors,afterLeftParse){return this.allowInAnd((()=>this.parseMaybeAssign(refExpressionErrors,afterLeftParse)))}setOptionalParametersError(refExpressionErrors,resultError){var _resultError$loc;refExpressionErrors.optionalParametersLoc=null!=(_resultError$loc=null==resultError?void 0:resultError.loc)?_resultError$loc:this.state.startLoc;}parseMaybeAssign(refExpressionErrors,afterLeftParse){const startLoc=this.state.startLoc;if(this.isContextual(106)&&this.prodParam.hasYield){let left=this.parseYield();return afterLeftParse&&(left=afterLeftParse.call(this,left,startLoc)),left}let ownExpressionErrors;refExpressionErrors?ownExpressionErrors=!1:(refExpressionErrors=new ExpressionErrors,ownExpressionErrors=!0);const{type}=this.state;(10===type||tokenIsIdentifier(type))&&(this.state.potentialArrowAt=this.state.start);let left=this.parseMaybeConditional(refExpressionErrors);if(afterLeftParse&&(left=afterLeftParse.call(this,left,startLoc)),(token=this.state.type)>=29&&token<=33){const node=this.startNodeAt(startLoc),operator=this.state.value;if(node.operator=operator,this.match(29)){this.toAssignable(left,!0),node.left=left;const startIndex=startLoc.index;null!=refExpressionErrors.doubleProtoLoc&&refExpressionErrors.doubleProtoLoc.index>=startIndex&&(refExpressionErrors.doubleProtoLoc=null),null!=refExpressionErrors.shorthandAssignLoc&&refExpressionErrors.shorthandAssignLoc.index>=startIndex&&(refExpressionErrors.shorthandAssignLoc=null),null!=refExpressionErrors.privateKeyLoc&&refExpressionErrors.privateKeyLoc.index>=startIndex&&(this.checkDestructuringPrivate(refExpressionErrors),refExpressionErrors.privateKeyLoc=null);}else node.left=left;return this.next(),node.right=this.parseMaybeAssign(),this.checkLVal(left,{in:this.finishNode(node,"AssignmentExpression")}),node}var token;return ownExpressionErrors&&this.checkExpressionErrors(refExpressionErrors,!0),left}parseMaybeConditional(refExpressionErrors){const startLoc=this.state.startLoc,potentialArrowAt=this.state.potentialArrowAt,expr=this.parseExprOps(refExpressionErrors);return this.shouldExitDescending(expr,potentialArrowAt)?expr:this.parseConditional(expr,startLoc,refExpressionErrors)}parseConditional(expr,startLoc,refExpressionErrors){if(this.eat(17)){const node=this.startNodeAt(startLoc);return node.test=expr,node.consequent=this.parseMaybeAssignAllowIn(),this.expect(14),node.alternate=this.parseMaybeAssign(),this.finishNode(node,"ConditionalExpression")}return expr}parseMaybeUnaryOrPrivate(refExpressionErrors){return this.match(136)?this.parsePrivateName():this.parseMaybeUnary(refExpressionErrors)}parseExprOps(refExpressionErrors){const startLoc=this.state.startLoc,potentialArrowAt=this.state.potentialArrowAt,expr=this.parseMaybeUnaryOrPrivate(refExpressionErrors);return this.shouldExitDescending(expr,potentialArrowAt)?expr:this.parseExprOp(expr,startLoc,-1)}parseExprOp(left,leftStartLoc,minPrec){if(this.isPrivateName(left)){const value=this.getPrivateNameSV(left);(minPrec>=tokenOperatorPrecedence(58)||!this.prodParam.hasIn||!this.match(58))&&this.raise(Errors.PrivateInExpectedIn,{at:left,identifierName:value}),this.classScope.usePrivateName(value,left.loc.start);}const op=this.state.type;if((token=op)>=39&&token<=59&&(this.prodParam.hasIn||!this.match(58))){let prec=tokenOperatorPrecedence(op);if(prec>minPrec){if(39===op){if(this.expectPlugin("pipelineOperator"),this.state.inFSharpPipelineDirectBody)return left;this.checkPipelineAtInfixOperator(left,leftStartLoc);}const node=this.startNodeAt(leftStartLoc);node.left=left,node.operator=this.state.value;const logical=41===op||42===op,coalesce=40===op;if(coalesce&&(prec=tokenOperatorPrecedence(42)),this.next(),39===op&&this.hasPlugin(["pipelineOperator",{proposal:"minimal"}])&&96===this.state.type&&this.prodParam.hasAwait)throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody,{at:this.state.startLoc});node.right=this.parseExprOpRightExpr(op,prec);const finishedNode=this.finishNode(node,logical||coalesce?"LogicalExpression":"BinaryExpression"),nextOp=this.state.type;if(coalesce&&(41===nextOp||42===nextOp)||logical&&40===nextOp)throw this.raise(Errors.MixingCoalesceWithLogical,{at:this.state.startLoc});return this.parseExprOp(finishedNode,leftStartLoc,minPrec)}}var token;return left}parseExprOpRightExpr(op,prec){const startLoc=this.state.startLoc;if(39===op)switch(this.getPluginOption("pipelineOperator","proposal")){case"hack":return this.withTopicBindingContext((()=>this.parseHackPipeBody()));case"smart":return this.withTopicBindingContext((()=>{if(this.prodParam.hasYield&&this.isContextual(106))throw this.raise(Errors.PipeBodyIsTighter,{at:this.state.startLoc});return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op,prec),startLoc)}));case"fsharp":return this.withSoloAwaitPermittingContext((()=>this.parseFSharpPipelineBody(prec)))}return this.parseExprOpBaseRightExpr(op,prec)}parseExprOpBaseRightExpr(op,prec){const startLoc=this.state.startLoc;return this.parseExprOp(this.parseMaybeUnaryOrPrivate(),startLoc,57===op?prec-1:prec)}parseHackPipeBody(){var _body$extra;const{startLoc}=this.state,body=this.parseMaybeAssign();return !UnparenthesizedPipeBodyDescriptions.has(body.type)||null!=(_body$extra=body.extra)&&_body$extra.parenthesized||this.raise(Errors.PipeUnparenthesizedBody,{at:startLoc,type:body.type}),this.topicReferenceWasUsedInCurrentContext()||this.raise(Errors.PipeTopicUnused,{at:startLoc}),body}checkExponentialAfterUnary(node){this.match(57)&&this.raise(Errors.UnexpectedTokenUnaryExponentiation,{at:node.argument});}parseMaybeUnary(refExpressionErrors,sawUnary){const startLoc=this.state.startLoc,isAwait=this.isContextual(96);if(isAwait&&this.isAwaitAllowed()){this.next();const expr=this.parseAwait(startLoc);return sawUnary||this.checkExponentialAfterUnary(expr),expr}const update=this.match(34),node=this.startNode();if(token=this.state.type,tokenPrefixes[token]){node.operator=this.state.value,node.prefix=!0,this.match(72)&&this.expectPlugin("throwExpressions");const isDelete=this.match(89);if(this.next(),node.argument=this.parseMaybeUnary(null,!0),this.checkExpressionErrors(refExpressionErrors,!0),this.state.strict&&isDelete){const arg=node.argument;"Identifier"===arg.type?this.raise(Errors.StrictDelete,{at:node}):this.hasPropertyAsPrivateName(arg)&&this.raise(Errors.DeletePrivateField,{at:node});}if(!update)return sawUnary||this.checkExponentialAfterUnary(node),this.finishNode(node,"UnaryExpression")}var token;const expr=this.parseUpdate(node,update,refExpressionErrors);if(isAwait){const{type}=this.state;if((this.hasPlugin("v8intrinsic")?tokenCanStartExpression(type):tokenCanStartExpression(type)&&!this.match(54))&&!this.isAmbiguousAwait())return this.raiseOverwrite(Errors.AwaitNotInAsyncContext,{at:startLoc}),this.parseAwait(startLoc)}return expr}parseUpdate(node,update,refExpressionErrors){if(update){const updateExpressionNode=node;return this.checkLVal(updateExpressionNode.argument,{in:this.finishNode(updateExpressionNode,"UpdateExpression")}),node}const startLoc=this.state.startLoc;let expr=this.parseExprSubscripts(refExpressionErrors);if(this.checkExpressionErrors(refExpressionErrors,!1))return expr;for(;34===this.state.type&&!this.canInsertSemicolon();){const node=this.startNodeAt(startLoc);node.operator=this.state.value,node.prefix=!1,node.argument=expr,this.next(),this.checkLVal(expr,{in:expr=this.finishNode(node,"UpdateExpression")});}return expr}parseExprSubscripts(refExpressionErrors){const startLoc=this.state.startLoc,potentialArrowAt=this.state.potentialArrowAt,expr=this.parseExprAtom(refExpressionErrors);return this.shouldExitDescending(expr,potentialArrowAt)?expr:this.parseSubscripts(expr,startLoc)}parseSubscripts(base,startLoc,noCalls){const state={optionalChainMember:!1,maybeAsyncArrow:this.atPossibleAsyncArrow(base),stop:!1};do{base=this.parseSubscript(base,startLoc,noCalls,state),state.maybeAsyncArrow=!1;}while(!state.stop);return base}parseSubscript(base,startLoc,noCalls,state){const{type}=this.state;if(!noCalls&&15===type)return this.parseBind(base,startLoc,noCalls,state);if(tokenIsTemplate(type))return this.parseTaggedTemplateExpression(base,startLoc,state);let optional=!1;if(18===type){if(noCalls&&(this.raise(Errors.OptionalChainingNoNew,{at:this.state.startLoc}),40===this.lookaheadCharCode()))return state.stop=!0,base;state.optionalChainMember=optional=!0,this.next();}if(!noCalls&&this.match(10))return this.parseCoverCallAndAsyncArrowHead(base,startLoc,state,optional);{const computed=this.eat(0);return computed||optional||this.eat(16)?this.parseMember(base,startLoc,state,computed,optional):(state.stop=!0,base)}}parseMember(base,startLoc,state,computed,optional){const node=this.startNodeAt(startLoc);return node.object=base,node.computed=computed,computed?(node.property=this.parseExpression(),this.expect(3)):this.match(136)?("Super"===base.type&&this.raise(Errors.SuperPrivateField,{at:startLoc}),this.classScope.usePrivateName(this.state.value,this.state.startLoc),node.property=this.parsePrivateName()):node.property=this.parseIdentifier(!0),state.optionalChainMember?(node.optional=optional,this.finishNode(node,"OptionalMemberExpression")):this.finishNode(node,"MemberExpression")}parseBind(base,startLoc,noCalls,state){const node=this.startNodeAt(startLoc);return node.object=base,this.next(),node.callee=this.parseNoCallExpr(),state.stop=!0,this.parseSubscripts(this.finishNode(node,"BindExpression"),startLoc,noCalls)}parseCoverCallAndAsyncArrowHead(base,startLoc,state,optional){const oldMaybeInArrowParameters=this.state.maybeInArrowParameters;let refExpressionErrors=null;this.state.maybeInArrowParameters=!0,this.next();const node=this.startNodeAt(startLoc);node.callee=base;const{maybeAsyncArrow,optionalChainMember}=state;maybeAsyncArrow&&(this.expressionScope.enter(new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration)),refExpressionErrors=new ExpressionErrors),optionalChainMember&&(node.optional=optional),node.arguments=optional?this.parseCallExpressionArguments(11):this.parseCallExpressionArguments(11,"Import"===base.type,"Super"!==base.type,node,refExpressionErrors);let finishedNode=this.finishCallExpression(node,optionalChainMember);return maybeAsyncArrow&&this.shouldParseAsyncArrow()&&!optional?(state.stop=!0,this.checkDestructuringPrivate(refExpressionErrors),this.expressionScope.validateAsPattern(),this.expressionScope.exit(),finishedNode=this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc),finishedNode)):(maybeAsyncArrow&&(this.checkExpressionErrors(refExpressionErrors,!0),this.expressionScope.exit()),this.toReferencedArguments(finishedNode)),this.state.maybeInArrowParameters=oldMaybeInArrowParameters,finishedNode}toReferencedArguments(node,isParenthesizedExpr){this.toReferencedListDeep(node.arguments,isParenthesizedExpr);}parseTaggedTemplateExpression(base,startLoc,state){const node=this.startNodeAt(startLoc);return node.tag=base,node.quasi=this.parseTemplate(!0),state.optionalChainMember&&this.raise(Errors.OptionalChainingNoTemplate,{at:startLoc}),this.finishNode(node,"TaggedTemplateExpression")}atPossibleAsyncArrow(base){return "Identifier"===base.type&&"async"===base.name&&this.state.lastTokEndLoc.index===base.end&&!this.canInsertSemicolon()&&base.end-base.start==5&&base.start===this.state.potentialArrowAt}finishCallExpression(node,optional){if("Import"===node.callee.type)if(2===node.arguments.length&&(this.hasPlugin("moduleAttributes")||this.expectPlugin("importAssertions")),0===node.arguments.length||node.arguments.length>2)this.raise(Errors.ImportCallArity,{at:node,maxArgumentCount:this.hasPlugin("importAssertions")||this.hasPlugin("moduleAttributes")?2:1});else for(const arg of node.arguments)"SpreadElement"===arg.type&&this.raise(Errors.ImportCallSpreadArgument,{at:arg});return this.finishNode(node,optional?"OptionalCallExpression":"CallExpression")}parseCallExpressionArguments(close,dynamicImport,allowPlaceholder,nodeForExtra,refExpressionErrors){const elts=[];let first=!0;const oldInFSharpPipelineDirectBody=this.state.inFSharpPipelineDirectBody;for(this.state.inFSharpPipelineDirectBody=!1;!this.eat(close);){if(first)first=!1;else if(this.expect(12),this.match(close)){!dynamicImport||this.hasPlugin("importAssertions")||this.hasPlugin("moduleAttributes")||this.raise(Errors.ImportCallArgumentTrailingComma,{at:this.state.lastTokStartLoc}),nodeForExtra&&this.addTrailingCommaExtraToNode(nodeForExtra),this.next();break}elts.push(this.parseExprListItem(!1,refExpressionErrors,allowPlaceholder));}return this.state.inFSharpPipelineDirectBody=oldInFSharpPipelineDirectBody,elts}shouldParseAsyncArrow(){return this.match(19)&&!this.canInsertSemicolon()}parseAsyncArrowFromCallExpression(node,call){var _call$extra;return this.resetPreviousNodeTrailingComments(call),this.expect(19),this.parseArrowExpression(node,call.arguments,!0,null==(_call$extra=call.extra)?void 0:_call$extra.trailingCommaLoc),call.innerComments&&setInnerComments(node,call.innerComments),call.callee.trailingComments&&setInnerComments(node,call.callee.trailingComments),node}parseNoCallExpr(){const startLoc=this.state.startLoc;return this.parseSubscripts(this.parseExprAtom(),startLoc,!0)}parseExprAtom(refExpressionErrors){let node,decorators=null;const{type}=this.state;switch(type){case 79:return this.parseSuper();case 83:return node=this.startNode(),this.next(),this.match(16)?this.parseImportMetaProperty(node):(this.match(10)||this.raise(Errors.UnsupportedImport,{at:this.state.lastTokStartLoc}),this.finishNode(node,"Import"));case 78:return node=this.startNode(),this.next(),this.finishNode(node,"ThisExpression");case 90:return this.parseDo(this.startNode(),!1);case 56:case 31:return this.readRegexp(),this.parseRegExpLiteral(this.state.value);case 132:return this.parseNumericLiteral(this.state.value);case 133:return this.parseBigIntLiteral(this.state.value);case 134:return this.parseDecimalLiteral(this.state.value);case 131:return this.parseStringLiteral(this.state.value);case 84:return this.parseNullLiteral();case 85:return this.parseBooleanLiteral(!0);case 86:return this.parseBooleanLiteral(!1);case 10:{const canBeArrow=this.state.potentialArrowAt===this.state.start;return this.parseParenAndDistinguishExpression(canBeArrow)}case 2:case 1:return this.parseArrayLike(2===this.state.type?4:3,!1,!0);case 0:return this.parseArrayLike(3,!0,!1,refExpressionErrors);case 6:case 7:return this.parseObjectLike(6===this.state.type?9:8,!1,!0);case 5:return this.parseObjectLike(8,!1,!1,refExpressionErrors);case 68:return this.parseFunctionOrFunctionSent();case 26:decorators=this.parseDecorators();case 80:return this.parseClass(this.maybeTakeDecorators(decorators,this.startNode()),!1);case 77:return this.parseNewOrNewTarget();case 25:case 24:return this.parseTemplate(!1);case 15:{node=this.startNode(),this.next(),node.object=null;const callee=node.callee=this.parseNoCallExpr();if("MemberExpression"===callee.type)return this.finishNode(node,"BindExpression");throw this.raise(Errors.UnsupportedBind,{at:callee})}case 136:return this.raise(Errors.PrivateInExpectedIn,{at:this.state.startLoc,identifierName:this.state.value}),this.parsePrivateName();case 33:return this.parseTopicReferenceThenEqualsSign(54,"%");case 32:return this.parseTopicReferenceThenEqualsSign(44,"^");case 37:case 38:return this.parseTopicReference("hack");case 44:case 54:case 27:{const pipeProposal=this.getPluginOption("pipelineOperator","proposal");if(pipeProposal)return this.parseTopicReference(pipeProposal);this.unexpected();break}case 47:{const lookaheadCh=this.input.codePointAt(this.nextTokenStart());isIdentifierStart(lookaheadCh)||62===lookaheadCh?this.expectOnePlugin(["jsx","flow","typescript"]):this.unexpected();break}default:if(tokenIsIdentifier(type)){if(this.isContextual(125)&&123===this.lookaheadCharCode()&&!this.hasFollowingLineBreak())return this.parseModuleExpression();const canBeArrow=this.state.potentialArrowAt===this.state.start,containsEsc=this.state.containsEsc,id=this.parseIdentifier();if(!containsEsc&&"async"===id.name&&!this.canInsertSemicolon()){const{type}=this.state;if(68===type)return this.resetPreviousNodeTrailingComments(id),this.next(),this.parseAsyncFunctionExpression(this.startNodeAtNode(id));if(tokenIsIdentifier(type))return 61===this.lookaheadCharCode()?this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id)):id;if(90===type)return this.resetPreviousNodeTrailingComments(id),this.parseDo(this.startNodeAtNode(id),!0)}return canBeArrow&&this.match(19)&&!this.canInsertSemicolon()?(this.next(),this.parseArrowExpression(this.startNodeAtNode(id),[id],!1)):id}this.unexpected();}}parseTopicReferenceThenEqualsSign(topicTokenType,topicTokenValue){const pipeProposal=this.getPluginOption("pipelineOperator","proposal");if(pipeProposal)return this.state.type=topicTokenType,this.state.value=topicTokenValue,this.state.pos--,this.state.end--,this.state.endLoc=createPositionWithColumnOffset(this.state.endLoc,-1),this.parseTopicReference(pipeProposal);this.unexpected();}parseTopicReference(pipeProposal){const node=this.startNode(),startLoc=this.state.startLoc,tokenType=this.state.type;return this.next(),this.finishTopicReference(node,startLoc,pipeProposal,tokenType)}finishTopicReference(node,startLoc,pipeProposal,tokenType){if(this.testTopicReferenceConfiguration(pipeProposal,startLoc,tokenType)){const nodeType="smart"===pipeProposal?"PipelinePrimaryTopicReference":"TopicReference";return this.topicReferenceIsAllowedInCurrentContext()||this.raise("smart"===pipeProposal?Errors.PrimaryTopicNotAllowed:Errors.PipeTopicUnbound,{at:startLoc}),this.registerTopicReference(),this.finishNode(node,nodeType)}throw this.raise(Errors.PipeTopicUnconfiguredToken,{at:startLoc,token:tokenLabelName(tokenType)})}testTopicReferenceConfiguration(pipeProposal,startLoc,tokenType){switch(pipeProposal){case"hack":return this.hasPlugin(["pipelineOperator",{topicToken:tokenLabelName(tokenType)}]);case"smart":return 27===tokenType;default:throw this.raise(Errors.PipeTopicRequiresHackPipes,{at:startLoc})}}parseAsyncArrowUnaryFunction(node){this.prodParam.enter(functionFlags(!0,this.prodParam.hasYield));const params=[this.parseIdentifier()];return this.prodParam.exit(),this.hasPrecedingLineBreak()&&this.raise(Errors.LineTerminatorBeforeArrow,{at:this.state.curPosition()}),this.expect(19),this.parseArrowExpression(node,params,!0)}parseDo(node,isAsync){this.expectPlugin("doExpressions"),isAsync&&this.expectPlugin("asyncDoExpressions"),node.async=isAsync,this.next();const oldLabels=this.state.labels;return this.state.labels=[],isAsync?(this.prodParam.enter(PARAM_AWAIT),node.body=this.parseBlock(),this.prodParam.exit()):node.body=this.parseBlock(),this.state.labels=oldLabels,this.finishNode(node,"DoExpression")}parseSuper(){const node=this.startNode();return this.next(),!this.match(10)||this.scope.allowDirectSuper||this.options.allowSuperOutsideMethod?this.scope.allowSuper||this.options.allowSuperOutsideMethod||this.raise(Errors.UnexpectedSuper,{at:node}):this.raise(Errors.SuperNotAllowed,{at:node}),this.match(10)||this.match(0)||this.match(16)||this.raise(Errors.UnsupportedSuper,{at:node}),this.finishNode(node,"Super")}parsePrivateName(){const node=this.startNode(),id=this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc,1)),name=this.state.value;return this.next(),node.id=this.createIdentifier(id,name),this.finishNode(node,"PrivateName")}parseFunctionOrFunctionSent(){const node=this.startNode();if(this.next(),this.prodParam.hasYield&&this.match(16)){const meta=this.createIdentifier(this.startNodeAtNode(node),"function");return this.next(),this.match(102)?this.expectPlugin("functionSent"):this.hasPlugin("functionSent")||this.unexpected(),this.parseMetaProperty(node,meta,"sent")}return this.parseFunction(node)}parseMetaProperty(node,meta,propertyName){node.meta=meta;const containsEsc=this.state.containsEsc;return node.property=this.parseIdentifier(!0),(node.property.name!==propertyName||containsEsc)&&this.raise(Errors.UnsupportedMetaProperty,{at:node.property,target:meta.name,onlyValidPropertyName:propertyName}),this.finishNode(node,"MetaProperty")}parseImportMetaProperty(node){const id=this.createIdentifier(this.startNodeAtNode(node),"import");return this.next(),this.isContextual(100)&&(this.inModule||this.raise(Errors.ImportMetaOutsideModule,{at:id}),this.sawUnambiguousESM=!0),this.parseMetaProperty(node,id,"meta")}parseLiteralAtNode(value,type,node){return this.addExtra(node,"rawValue",value),this.addExtra(node,"raw",this.input.slice(node.start,this.state.end)),node.value=value,this.next(),this.finishNode(node,type)}parseLiteral(value,type){const node=this.startNode();return this.parseLiteralAtNode(value,type,node)}parseStringLiteral(value){return this.parseLiteral(value,"StringLiteral")}parseNumericLiteral(value){return this.parseLiteral(value,"NumericLiteral")}parseBigIntLiteral(value){return this.parseLiteral(value,"BigIntLiteral")}parseDecimalLiteral(value){return this.parseLiteral(value,"DecimalLiteral")}parseRegExpLiteral(value){const node=this.parseLiteral(value.value,"RegExpLiteral");return node.pattern=value.pattern,node.flags=value.flags,node}parseBooleanLiteral(value){const node=this.startNode();return node.value=value,this.next(),this.finishNode(node,"BooleanLiteral")}parseNullLiteral(){const node=this.startNode();return this.next(),this.finishNode(node,"NullLiteral")}parseParenAndDistinguishExpression(canBeArrow){const startLoc=this.state.startLoc;let val;this.next(),this.expressionScope.enter(new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration));const oldMaybeInArrowParameters=this.state.maybeInArrowParameters,oldInFSharpPipelineDirectBody=this.state.inFSharpPipelineDirectBody;this.state.maybeInArrowParameters=!0,this.state.inFSharpPipelineDirectBody=!1;const innerStartLoc=this.state.startLoc,exprList=[],refExpressionErrors=new ExpressionErrors;let spreadStartLoc,optionalCommaStartLoc,first=!0;for(;!this.match(11);){if(first)first=!1;else if(this.expect(12,null===refExpressionErrors.optionalParametersLoc?null:refExpressionErrors.optionalParametersLoc),this.match(11)){optionalCommaStartLoc=this.state.startLoc;break}if(this.match(21)){const spreadNodeStartLoc=this.state.startLoc;if(spreadStartLoc=this.state.startLoc,exprList.push(this.parseParenItem(this.parseRestBinding(),spreadNodeStartLoc)),!this.checkCommaAfterRest(41))break}else exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors,this.parseParenItem));}const innerEndLoc=this.state.lastTokEndLoc;this.expect(11),this.state.maybeInArrowParameters=oldMaybeInArrowParameters,this.state.inFSharpPipelineDirectBody=oldInFSharpPipelineDirectBody;let arrowNode=this.startNodeAt(startLoc);return canBeArrow&&this.shouldParseArrow(exprList)&&(arrowNode=this.parseArrow(arrowNode))?(this.checkDestructuringPrivate(refExpressionErrors),this.expressionScope.validateAsPattern(),this.expressionScope.exit(),this.parseArrowExpression(arrowNode,exprList,!1),arrowNode):(this.expressionScope.exit(),exprList.length||this.unexpected(this.state.lastTokStartLoc),optionalCommaStartLoc&&this.unexpected(optionalCommaStartLoc),spreadStartLoc&&this.unexpected(spreadStartLoc),this.checkExpressionErrors(refExpressionErrors,!0),this.toReferencedListDeep(exprList,!0),exprList.length>1?(val=this.startNodeAt(innerStartLoc),val.expressions=exprList,this.finishNode(val,"SequenceExpression"),this.resetEndLocation(val,innerEndLoc)):val=exprList[0],this.wrapParenthesis(startLoc,val))}wrapParenthesis(startLoc,expression){if(!this.options.createParenthesizedExpressions)return this.addExtra(expression,"parenthesized",!0),this.addExtra(expression,"parenStart",startLoc.index),this.takeSurroundingComments(expression,startLoc.index,this.state.lastTokEndLoc.index),expression;const parenExpression=this.startNodeAt(startLoc);return parenExpression.expression=expression,this.finishNode(parenExpression,"ParenthesizedExpression")}shouldParseArrow(params){return !this.canInsertSemicolon()}parseArrow(node){if(this.eat(19))return node}parseParenItem(node,startLoc){return node}parseNewOrNewTarget(){const node=this.startNode();if(this.next(),this.match(16)){const meta=this.createIdentifier(this.startNodeAtNode(node),"new");this.next();const metaProp=this.parseMetaProperty(node,meta,"target");return this.scope.inNonArrowFunction||this.scope.inClass||this.options.allowNewTargetOutsideFunction||this.raise(Errors.UnexpectedNewTarget,{at:metaProp}),metaProp}return this.parseNew(node)}parseNew(node){if(this.parseNewCallee(node),this.eat(10)){const args=this.parseExprList(11);this.toReferencedList(args),node.arguments=args;}else node.arguments=[];return this.finishNode(node,"NewExpression")}parseNewCallee(node){node.callee=this.parseNoCallExpr(),"Import"===node.callee.type&&this.raise(Errors.ImportCallNotNewExpression,{at:node.callee});}parseTemplateElement(isTagged){const{start,startLoc,end,value}=this.state,elemStart=start+1,elem=this.startNodeAt(createPositionWithColumnOffset(startLoc,1));null===value&&(isTagged||this.raise(Errors.InvalidEscapeSequenceTemplate,{at:createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos,1)}));const isTail=this.match(24),endOffset=isTail?-1:-2,elemEnd=end+endOffset;elem.value={raw:this.input.slice(elemStart,elemEnd).replace(/\r\n?/g,"\n"),cooked:null===value?null:value.slice(1,endOffset)},elem.tail=isTail,this.next();const finishedNode=this.finishNode(elem,"TemplateElement");return this.resetEndLocation(finishedNode,createPositionWithColumnOffset(this.state.lastTokEndLoc,endOffset)),finishedNode}parseTemplate(isTagged){const node=this.startNode();node.expressions=[];let curElt=this.parseTemplateElement(isTagged);for(node.quasis=[curElt];!curElt.tail;)node.expressions.push(this.parseTemplateSubstitution()),this.readTemplateContinuation(),node.quasis.push(curElt=this.parseTemplateElement(isTagged));return this.finishNode(node,"TemplateLiteral")}parseTemplateSubstitution(){return this.parseExpression()}parseObjectLike(close,isPattern,isRecord,refExpressionErrors){isRecord&&this.expectPlugin("recordAndTuple");const oldInFSharpPipelineDirectBody=this.state.inFSharpPipelineDirectBody;this.state.inFSharpPipelineDirectBody=!1;const propHash=Object.create(null);let first=!0;const node=this.startNode();for(node.properties=[],this.next();!this.match(close);){if(first)first=!1;else if(this.expect(12),this.match(close)){this.addTrailingCommaExtraToNode(node);break}let prop;isPattern?prop=this.parseBindingProperty():(prop=this.parsePropertyDefinition(refExpressionErrors),this.checkProto(prop,isRecord,propHash,refExpressionErrors)),isRecord&&!this.isObjectProperty(prop)&&"SpreadElement"!==prop.type&&this.raise(Errors.InvalidRecordProperty,{at:prop}),prop.shorthand&&this.addExtra(prop,"shorthand",!0),node.properties.push(prop);}this.next(),this.state.inFSharpPipelineDirectBody=oldInFSharpPipelineDirectBody;let type="ObjectExpression";return isPattern?type="ObjectPattern":isRecord&&(type="RecordExpression"),this.finishNode(node,type)}addTrailingCommaExtraToNode(node){this.addExtra(node,"trailingComma",this.state.lastTokStart),this.addExtra(node,"trailingCommaLoc",this.state.lastTokStartLoc,!1);}maybeAsyncOrAccessorProp(prop){return !prop.computed&&"Identifier"===prop.key.type&&(this.isLiteralPropertyName()||this.match(0)||this.match(55))}parsePropertyDefinition(refExpressionErrors){let decorators=[];if(this.match(26))for(this.hasPlugin("decorators")&&this.raise(Errors.UnsupportedPropertyDecorator,{at:this.state.startLoc});this.match(26);)decorators.push(this.parseDecorator());const prop=this.startNode();let startLoc,isAsync=!1,isAccessor=!1;if(this.match(21))return decorators.length&&this.unexpected(),this.parseSpread();decorators.length&&(prop.decorators=decorators,decorators=[]),prop.method=!1,refExpressionErrors&&(startLoc=this.state.startLoc);let isGenerator=this.eat(55);this.parsePropertyNamePrefixOperator(prop);const containsEsc=this.state.containsEsc,key=this.parsePropertyName(prop,refExpressionErrors);if(!isGenerator&&!containsEsc&&this.maybeAsyncOrAccessorProp(prop)){const keyName=key.name;"async"!==keyName||this.hasPrecedingLineBreak()||(isAsync=!0,this.resetPreviousNodeTrailingComments(key),isGenerator=this.eat(55),this.parsePropertyName(prop)),"get"!==keyName&&"set"!==keyName||(isAccessor=!0,this.resetPreviousNodeTrailingComments(key),prop.kind=keyName,this.match(55)&&(isGenerator=!0,this.raise(Errors.AccessorIsGenerator,{at:this.state.curPosition(),kind:keyName}),this.next()),this.parsePropertyName(prop));}return this.parseObjPropValue(prop,startLoc,isGenerator,isAsync,!1,isAccessor,refExpressionErrors)}getGetterSetterExpectedParamCount(method){return "get"===method.kind?0:1}getObjectOrClassMethodParams(method){return method.params}checkGetterSetterParams(method){var _params;const paramCount=this.getGetterSetterExpectedParamCount(method),params=this.getObjectOrClassMethodParams(method);params.length!==paramCount&&this.raise("get"===method.kind?Errors.BadGetterArity:Errors.BadSetterArity,{at:method}),"set"===method.kind&&"RestElement"===(null==(_params=params[params.length-1])?void 0:_params.type)&&this.raise(Errors.BadSetterRestParameter,{at:method});}parseObjectMethod(prop,isGenerator,isAsync,isPattern,isAccessor){if(isAccessor){const finishedProp=this.parseMethod(prop,isGenerator,!1,!1,!1,"ObjectMethod");return this.checkGetterSetterParams(finishedProp),finishedProp}if(isAsync||isGenerator||this.match(10))return isPattern&&this.unexpected(),prop.kind="method",prop.method=!0,this.parseMethod(prop,isGenerator,isAsync,!1,!1,"ObjectMethod")}parseObjectProperty(prop,startLoc,isPattern,refExpressionErrors){if(prop.shorthand=!1,this.eat(14))return prop.value=isPattern?this.parseMaybeDefault(this.state.startLoc):this.parseMaybeAssignAllowIn(refExpressionErrors),this.finishNode(prop,"ObjectProperty");if(!prop.computed&&"Identifier"===prop.key.type){if(this.checkReservedWord(prop.key.name,prop.key.loc.start,!0,!1),isPattern)prop.value=this.parseMaybeDefault(startLoc,cloneIdentifier(prop.key));else if(this.match(29)){const shorthandAssignLoc=this.state.startLoc;null!=refExpressionErrors?null===refExpressionErrors.shorthandAssignLoc&&(refExpressionErrors.shorthandAssignLoc=shorthandAssignLoc):this.raise(Errors.InvalidCoverInitializedName,{at:shorthandAssignLoc}),prop.value=this.parseMaybeDefault(startLoc,cloneIdentifier(prop.key));}else prop.value=cloneIdentifier(prop.key);return prop.shorthand=!0,this.finishNode(prop,"ObjectProperty")}}parseObjPropValue(prop,startLoc,isGenerator,isAsync,isPattern,isAccessor,refExpressionErrors){const node=this.parseObjectMethod(prop,isGenerator,isAsync,isPattern,isAccessor)||this.parseObjectProperty(prop,startLoc,isPattern,refExpressionErrors);return node||this.unexpected(),node}parsePropertyName(prop,refExpressionErrors){if(this.eat(0))prop.computed=!0,prop.key=this.parseMaybeAssignAllowIn(),this.expect(3);else {const{type,value}=this.state;let key;if(tokenIsKeywordOrIdentifier(type))key=this.parseIdentifier(!0);else switch(type){case 132:key=this.parseNumericLiteral(value);break;case 131:key=this.parseStringLiteral(value);break;case 133:key=this.parseBigIntLiteral(value);break;case 134:key=this.parseDecimalLiteral(value);break;case 136:{const privateKeyLoc=this.state.startLoc;null!=refExpressionErrors?null===refExpressionErrors.privateKeyLoc&&(refExpressionErrors.privateKeyLoc=privateKeyLoc):this.raise(Errors.UnexpectedPrivateField,{at:privateKeyLoc}),key=this.parsePrivateName();break}default:this.unexpected();}prop.key=key,136!==type&&(prop.computed=!1);}return prop.key}initFunction(node,isAsync){node.id=null,node.generator=!1,node.async=isAsync;}parseMethod(node,isGenerator,isAsync,isConstructor,allowDirectSuper,type,inClassScope=!1){this.initFunction(node,isAsync),node.generator=isGenerator,this.scope.enter(18|(inClassScope?64:0)|(allowDirectSuper?32:0)),this.prodParam.enter(functionFlags(isAsync,node.generator)),this.parseFunctionParams(node,isConstructor);const finishedNode=this.parseFunctionBodyAndFinish(node,type,!0);return this.prodParam.exit(),this.scope.exit(),finishedNode}parseArrayLike(close,canBePattern,isTuple,refExpressionErrors){isTuple&&this.expectPlugin("recordAndTuple");const oldInFSharpPipelineDirectBody=this.state.inFSharpPipelineDirectBody;this.state.inFSharpPipelineDirectBody=!1;const node=this.startNode();return this.next(),node.elements=this.parseExprList(close,!isTuple,refExpressionErrors,node),this.state.inFSharpPipelineDirectBody=oldInFSharpPipelineDirectBody,this.finishNode(node,isTuple?"TupleExpression":"ArrayExpression")}parseArrowExpression(node,params,isAsync,trailingCommaLoc){this.scope.enter(6);let flags=functionFlags(isAsync,!1);!this.match(5)&&this.prodParam.hasIn&&(flags|=8),this.prodParam.enter(flags),this.initFunction(node,isAsync);const oldMaybeInArrowParameters=this.state.maybeInArrowParameters;return params&&(this.state.maybeInArrowParameters=!0,this.setArrowFunctionParameters(node,params,trailingCommaLoc)),this.state.maybeInArrowParameters=!1,this.parseFunctionBody(node,!0),this.prodParam.exit(),this.scope.exit(),this.state.maybeInArrowParameters=oldMaybeInArrowParameters,this.finishNode(node,"ArrowFunctionExpression")}setArrowFunctionParameters(node,params,trailingCommaLoc){this.toAssignableList(params,trailingCommaLoc,!1),node.params=params;}parseFunctionBodyAndFinish(node,type,isMethod=!1){return this.parseFunctionBody(node,!1,isMethod),this.finishNode(node,type)}parseFunctionBody(node,allowExpression,isMethod=!1){const isExpression=allowExpression&&!this.match(5);if(this.expressionScope.enter(newExpressionScope()),isExpression)node.body=this.parseMaybeAssign(),this.checkParams(node,!1,allowExpression,!1);else {const oldStrict=this.state.strict,oldLabels=this.state.labels;this.state.labels=[],this.prodParam.enter(4|this.prodParam.currentFlags()),node.body=this.parseBlock(!0,!1,(hasStrictModeDirective=>{const nonSimple=!this.isSimpleParamList(node.params);hasStrictModeDirective&&nonSimple&&this.raise(Errors.IllegalLanguageModeDirective,{at:"method"!==node.kind&&"constructor"!==node.kind||!node.key?node:node.key.loc.end});const strictModeChanged=!oldStrict&&this.state.strict;this.checkParams(node,!(this.state.strict||allowExpression||isMethod||nonSimple),allowExpression,strictModeChanged),this.state.strict&&node.id&&this.checkIdentifier(node.id,65,strictModeChanged);})),this.prodParam.exit(),this.state.labels=oldLabels;}this.expressionScope.exit();}isSimpleParameter(node){return "Identifier"===node.type}isSimpleParamList(params){for(let i=0,len=params.length;i<len;i++)if(!this.isSimpleParameter(params[i]))return !1;return !0}checkParams(node,allowDuplicates,isArrowFunction,strictModeChanged=!0){const checkClashes=!allowDuplicates&&new Set,formalParameters={type:"FormalParameters"};for(const param of node.params)this.checkLVal(param,{in:formalParameters,binding:5,checkClashes,strictModeChanged});}parseExprList(close,allowEmpty,refExpressionErrors,nodeForExtra){const elts=[];let first=!0;for(;!this.eat(close);){if(first)first=!1;else if(this.expect(12),this.match(close)){nodeForExtra&&this.addTrailingCommaExtraToNode(nodeForExtra),this.next();break}elts.push(this.parseExprListItem(allowEmpty,refExpressionErrors));}return elts}parseExprListItem(allowEmpty,refExpressionErrors,allowPlaceholder){let elt;if(this.match(12))allowEmpty||this.raise(Errors.UnexpectedToken,{at:this.state.curPosition(),unexpected:","}),elt=null;else if(this.match(21)){const spreadNodeStartLoc=this.state.startLoc;elt=this.parseParenItem(this.parseSpread(refExpressionErrors),spreadNodeStartLoc);}else if(this.match(17)){this.expectPlugin("partialApplication"),allowPlaceholder||this.raise(Errors.UnexpectedArgumentPlaceholder,{at:this.state.startLoc});const node=this.startNode();this.next(),elt=this.finishNode(node,"ArgumentPlaceholder");}else elt=this.parseMaybeAssignAllowIn(refExpressionErrors,this.parseParenItem);return elt}parseIdentifier(liberal){const node=this.startNode(),name=this.parseIdentifierName(liberal);return this.createIdentifier(node,name)}createIdentifier(node,name){return node.name=name,node.loc.identifierName=name,this.finishNode(node,"Identifier")}parseIdentifierName(liberal){let name;const{startLoc,type}=this.state;tokenIsKeywordOrIdentifier(type)?name=this.state.value:this.unexpected();const tokenIsKeyword=type<=92;return liberal?tokenIsKeyword&&this.replaceToken(130):this.checkReservedWord(name,startLoc,tokenIsKeyword,!1),this.next(),name}checkReservedWord(word,startLoc,checkKeywords,isBinding){if(word.length>10)return;if(!function(word){return reservedWordLikeSet.has(word)}(word))return;if(checkKeywords&&function(word){return keywords.has(word)}(word))return void this.raise(Errors.UnexpectedKeyword,{at:startLoc,keyword:word});if((this.state.strict?isBinding?isStrictBindReservedWord:isStrictReservedWord:isReservedWord)(word,this.inModule))this.raise(Errors.UnexpectedReservedWord,{at:startLoc,reservedWord:word});else if("yield"===word){if(this.prodParam.hasYield)return void this.raise(Errors.YieldBindingIdentifier,{at:startLoc})}else if("await"===word){if(this.prodParam.hasAwait)return void this.raise(Errors.AwaitBindingIdentifier,{at:startLoc});if(this.scope.inStaticBlock)return void this.raise(Errors.AwaitBindingIdentifierInStaticBlock,{at:startLoc});this.expressionScope.recordAsyncArrowParametersError({at:startLoc});}else if("arguments"===word&&this.scope.inClassAndNotInNonArrowFunction)return void this.raise(Errors.ArgumentsInClass,{at:startLoc})}isAwaitAllowed(){return !!this.prodParam.hasAwait||!(!this.options.allowAwaitOutsideFunction||this.scope.inFunction)}parseAwait(startLoc){const node=this.startNodeAt(startLoc);return this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter,{at:node}),this.eat(55)&&this.raise(Errors.ObsoleteAwaitStar,{at:node}),this.scope.inFunction||this.options.allowAwaitOutsideFunction||(this.isAmbiguousAwait()?this.ambiguousScriptDifferentAst=!0:this.sawUnambiguousESM=!0),this.state.soloAwait||(node.argument=this.parseMaybeUnary(null,!0)),this.finishNode(node,"AwaitExpression")}isAmbiguousAwait(){if(this.hasPrecedingLineBreak())return !0;const{type}=this.state;return 53===type||10===type||0===type||tokenIsTemplate(type)||101===type&&!this.state.containsEsc||135===type||56===type||this.hasPlugin("v8intrinsic")&&54===type}parseYield(){const node=this.startNode();this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter,{at:node}),this.next();let delegating=!1,argument=null;if(!this.hasPrecedingLineBreak())switch(delegating=this.eat(55),this.state.type){case 13:case 137:case 8:case 11:case 3:case 9:case 14:case 12:if(!delegating)break;default:argument=this.parseMaybeAssign();}return node.delegate=delegating,node.argument=argument,this.finishNode(node,"YieldExpression")}checkPipelineAtInfixOperator(left,leftStartLoc){this.hasPlugin(["pipelineOperator",{proposal:"smart"}])&&"SequenceExpression"===left.type&&this.raise(Errors.PipelineHeadSequenceExpression,{at:leftStartLoc});}parseSmartPipelineBodyInStyle(childExpr,startLoc){if(this.isSimpleReference(childExpr)){const bodyNode=this.startNodeAt(startLoc);return bodyNode.callee=childExpr,this.finishNode(bodyNode,"PipelineBareFunction")}{const bodyNode=this.startNodeAt(startLoc);return this.checkSmartPipeTopicBodyEarlyErrors(startLoc),bodyNode.expression=childExpr,this.finishNode(bodyNode,"PipelineTopicExpression")}}isSimpleReference(expression){switch(expression.type){case"MemberExpression":return !expression.computed&&this.isSimpleReference(expression.object);case"Identifier":return !0;default:return !1}}checkSmartPipeTopicBodyEarlyErrors(startLoc){if(this.match(19))throw this.raise(Errors.PipelineBodyNoArrow,{at:this.state.startLoc});this.topicReferenceWasUsedInCurrentContext()||this.raise(Errors.PipelineTopicUnused,{at:startLoc});}withTopicBindingContext(callback){const outerContextTopicState=this.state.topicContext;this.state.topicContext={maxNumOfResolvableTopics:1,maxTopicIndex:null};try{return callback()}finally{this.state.topicContext=outerContextTopicState;}}withSmartMixTopicForbiddingContext(callback){if(!this.hasPlugin(["pipelineOperator",{proposal:"smart"}]))return callback();{const outerContextTopicState=this.state.topicContext;this.state.topicContext={maxNumOfResolvableTopics:0,maxTopicIndex:null};try{return callback()}finally{this.state.topicContext=outerContextTopicState;}}}withSoloAwaitPermittingContext(callback){const outerContextSoloAwaitState=this.state.soloAwait;this.state.soloAwait=!0;try{return callback()}finally{this.state.soloAwait=outerContextSoloAwaitState;}}allowInAnd(callback){const flags=this.prodParam.currentFlags();if(8&~flags){this.prodParam.enter(8|flags);try{return callback()}finally{this.prodParam.exit();}}return callback()}disallowInAnd(callback){const flags=this.prodParam.currentFlags();if(8&flags){this.prodParam.enter(-9&flags);try{return callback()}finally{this.prodParam.exit();}}return callback()}registerTopicReference(){this.state.topicContext.maxTopicIndex=0;}topicReferenceIsAllowedInCurrentContext(){return this.state.topicContext.maxNumOfResolvableTopics>=1}topicReferenceWasUsedInCurrentContext(){return null!=this.state.topicContext.maxTopicIndex&&this.state.topicContext.maxTopicIndex>=0}parseFSharpPipelineBody(prec){const startLoc=this.state.startLoc;this.state.potentialArrowAt=this.state.start;const oldInFSharpPipelineDirectBody=this.state.inFSharpPipelineDirectBody;this.state.inFSharpPipelineDirectBody=!0;const ret=this.parseExprOp(this.parseMaybeUnaryOrPrivate(),startLoc,prec);return this.state.inFSharpPipelineDirectBody=oldInFSharpPipelineDirectBody,ret}parseModuleExpression(){this.expectPlugin("moduleBlocks");const node=this.startNode();this.next(),this.match(5)||this.unexpected(null,5);const program=this.startNodeAt(this.state.endLoc);this.next();const revertScopes=this.initializeScopes(!0);this.enterInitialScopes();try{node.body=this.parseProgram(program,8,"module");}finally{revertScopes();}return this.finishNode(node,"ModuleExpression")}parsePropertyNamePrefixOperator(prop){}}const loopLabel={kind:"loop"},switchLabel={kind:"switch"},loneSurrogate=/[\uD800-\uDFFF]/u,keywordRelationalOperator=/in(?:stanceof)?/y;class StatementParser extends ExpressionParser{parseTopLevel(file,program){return file.program=this.parseProgram(program),file.comments=this.state.comments,this.options.tokens&&(file.tokens=function(tokens,input){for(let i=0;i<tokens.length;i++){const token=tokens[i],{type}=token;if("number"==typeof type){if(136===type){const{loc,start,value,end}=token,hashEndPos=start+1,hashEndLoc=createPositionWithColumnOffset(loc.start,1);tokens.splice(i,1,new Token({type:getExportedToken(27),value:"#",start,end:hashEndPos,startLoc:loc.start,endLoc:hashEndLoc}),new Token({type:getExportedToken(130),value,start:hashEndPos,end,startLoc:hashEndLoc,endLoc:loc.end})),i++;continue}if(tokenIsTemplate(type)){const{loc,start,value,end}=token,backquoteEnd=start+1,backquoteEndLoc=createPositionWithColumnOffset(loc.start,1);let startToken,templateValue,templateElementEnd,templateElementEndLoc,endToken;startToken=96===input.charCodeAt(start)?new Token({type:getExportedToken(22),value:"`",start,end:backquoteEnd,startLoc:loc.start,endLoc:backquoteEndLoc}):new Token({type:getExportedToken(8),value:"}",start,end:backquoteEnd,startLoc:loc.start,endLoc:backquoteEndLoc}),24===type?(templateElementEnd=end-1,templateElementEndLoc=createPositionWithColumnOffset(loc.end,-1),templateValue=null===value?null:value.slice(1,-1),endToken=new Token({type:getExportedToken(22),value:"`",start:templateElementEnd,end,startLoc:templateElementEndLoc,endLoc:loc.end})):(templateElementEnd=end-2,templateElementEndLoc=createPositionWithColumnOffset(loc.end,-2),templateValue=null===value?null:value.slice(1,-2),endToken=new Token({type:getExportedToken(23),value:"${",start:templateElementEnd,end,startLoc:templateElementEndLoc,endLoc:loc.end})),tokens.splice(i,1,startToken,new Token({type:getExportedToken(20),value:templateValue,start:backquoteEnd,end:templateElementEnd,startLoc:backquoteEndLoc,endLoc:templateElementEndLoc}),endToken),i+=2;continue}token.type=getExportedToken(type);}}return tokens}(this.tokens,this.input)),this.finishNode(file,"File")}parseProgram(program,end=137,sourceType=this.options.sourceType){if(program.sourceType=sourceType,program.interpreter=this.parseInterpreterDirective(),this.parseBlockBody(program,!0,!0,end),this.inModule&&!this.options.allowUndeclaredExports&&this.scope.undefinedExports.size>0)for(const[localName,at]of Array.from(this.scope.undefinedExports))this.raise(Errors.ModuleExportUndefined,{at,localName});let finishedProgram;return finishedProgram=137===end?this.finishNode(program,"Program"):this.finishNodeAt(program,"Program",createPositionWithColumnOffset(this.state.startLoc,-1)),finishedProgram}stmtToDirective(stmt){const directive=stmt;directive.type="Directive",directive.value=directive.expression,delete directive.expression;const directiveLiteral=directive.value,expressionValue=directiveLiteral.value,raw=this.input.slice(directiveLiteral.start,directiveLiteral.end),val=directiveLiteral.value=raw.slice(1,-1);return this.addExtra(directiveLiteral,"raw",raw),this.addExtra(directiveLiteral,"rawValue",val),this.addExtra(directiveLiteral,"expressionValue",expressionValue),directiveLiteral.type="DirectiveLiteral",directive}parseInterpreterDirective(){if(!this.match(28))return null;const node=this.startNode();return node.value=this.state.value,this.next(),this.finishNode(node,"InterpreterDirective")}isLet(){return !!this.isContextual(99)&&this.hasFollowingBindingAtom()}chStartsBindingIdentifier(ch,pos){if(isIdentifierStart(ch)){if(keywordRelationalOperator.lastIndex=pos,keywordRelationalOperator.test(this.input)){const endCh=this.codePointAtPos(keywordRelationalOperator.lastIndex);if(!isIdentifierChar(endCh)&&92!==endCh)return !1}return !0}return 92===ch}chStartsBindingPattern(ch){return 91===ch||123===ch}hasFollowingBindingAtom(){const next=this.nextTokenStart(),nextCh=this.codePointAtPos(next);return this.chStartsBindingPattern(nextCh)||this.chStartsBindingIdentifier(nextCh,next)}hasFollowingBindingIdentifier(){const next=this.nextTokenStart(),nextCh=this.codePointAtPos(next);return this.chStartsBindingIdentifier(nextCh,next)}startsUsingForOf(){const lookahead=this.lookahead();return !(101===lookahead.type&&!lookahead.containsEsc)&&(this.expectPlugin("explicitResourceManagement"),!0)}parseModuleItem(){return this.parseStatementLike(15)}parseStatementListItem(){return this.parseStatementLike(6|(!this.options.annexB||this.state.strict?0:8))}parseStatementOrSloppyAnnexBFunctionDeclaration(allowLabeledFunction=!1){let flags=0;return this.options.annexB&&!this.state.strict&&(flags|=4,allowLabeledFunction&&(flags|=8)),this.parseStatementLike(flags)}parseStatement(){return this.parseStatementLike(0)}parseStatementLike(flags){let decorators=null;return this.match(26)&&(decorators=this.parseDecorators(!0)),this.parseStatementContent(flags,decorators)}parseStatementContent(flags,decorators){const starttype=this.state.type,node=this.startNode(),allowDeclaration=!!(2&flags),allowFunctionDeclaration=!!(4&flags),topLevel=1&flags;switch(starttype){case 60:return this.parseBreakContinueStatement(node,!0);case 63:return this.parseBreakContinueStatement(node,!1);case 64:return this.parseDebuggerStatement(node);case 90:return this.parseDoWhileStatement(node);case 91:return this.parseForStatement(node);case 68:if(46===this.lookaheadCharCode())break;return allowFunctionDeclaration||this.raise(this.state.strict?Errors.StrictFunction:this.options.annexB?Errors.SloppyFunctionAnnexB:Errors.SloppyFunction,{at:this.state.startLoc}),this.parseFunctionStatement(node,!1,!allowDeclaration&&allowFunctionDeclaration);case 80:return allowDeclaration||this.unexpected(),this.parseClass(this.maybeTakeDecorators(decorators,node),!0);case 69:return this.parseIfStatement(node);case 70:return this.parseReturnStatement(node);case 71:return this.parseSwitchStatement(node);case 72:return this.parseThrowStatement(node);case 73:return this.parseTryStatement(node);case 105:if(this.hasFollowingLineBreak()||this.state.containsEsc||!this.hasFollowingBindingIdentifier())break;return this.expectPlugin("explicitResourceManagement"),!this.scope.inModule&&this.scope.inTopLevel?this.raise(Errors.UnexpectedUsingDeclaration,{at:this.state.startLoc}):allowDeclaration||this.raise(Errors.UnexpectedLexicalDeclaration,{at:this.state.startLoc}),this.parseVarStatement(node,"using");case 99:{if(this.state.containsEsc)break;const next=this.nextTokenStart(),nextCh=this.codePointAtPos(next);if(91!==nextCh){if(!allowDeclaration&&this.hasFollowingLineBreak())break;if(!this.chStartsBindingIdentifier(nextCh,next)&&123!==nextCh)break}}case 75:allowDeclaration||this.raise(Errors.UnexpectedLexicalDeclaration,{at:this.state.startLoc});case 74:{const kind=this.state.value;return this.parseVarStatement(node,kind)}case 92:return this.parseWhileStatement(node);case 76:return this.parseWithStatement(node);case 5:return this.parseBlock();case 13:return this.parseEmptyStatement(node);case 83:{const nextTokenCharCode=this.lookaheadCharCode();if(40===nextTokenCharCode||46===nextTokenCharCode)break}case 82:{let result;return this.options.allowImportExportEverywhere||topLevel||this.raise(Errors.UnexpectedImportExport,{at:this.state.startLoc}),this.next(),83===starttype?(result=this.parseImport(node),"ImportDeclaration"!==result.type||result.importKind&&"value"!==result.importKind||(this.sawUnambiguousESM=!0)):(result=this.parseExport(node,decorators),("ExportNamedDeclaration"!==result.type||result.exportKind&&"value"!==result.exportKind)&&("ExportAllDeclaration"!==result.type||result.exportKind&&"value"!==result.exportKind)&&"ExportDefaultDeclaration"!==result.type||(this.sawUnambiguousESM=!0)),this.assertModuleNodeAllowed(result),result}default:if(this.isAsyncFunction())return allowDeclaration||this.raise(Errors.AsyncFunctionInSingleStatementContext,{at:this.state.startLoc}),this.next(),this.parseFunctionStatement(node,!0,!allowDeclaration&&allowFunctionDeclaration)}const maybeName=this.state.value,expr=this.parseExpression();return tokenIsIdentifier(starttype)&&"Identifier"===expr.type&&this.eat(14)?this.parseLabeledStatement(node,maybeName,expr,flags):this.parseExpressionStatement(node,expr,decorators)}assertModuleNodeAllowed(node){this.options.allowImportExportEverywhere||this.inModule||this.raise(Errors.ImportOutsideModule,{at:node});}decoratorsEnabledBeforeExport(){return !!this.hasPlugin("decorators-legacy")||this.hasPlugin("decorators")&&!1!==this.getPluginOption("decorators","decoratorsBeforeExport")}maybeTakeDecorators(maybeDecorators,classNode,exportNode){return maybeDecorators&&(classNode.decorators&&classNode.decorators.length>0?("boolean"!=typeof this.getPluginOption("decorators","decoratorsBeforeExport")&&this.raise(Errors.DecoratorsBeforeAfterExport,{at:classNode.decorators[0]}),classNode.decorators.unshift(...maybeDecorators)):classNode.decorators=maybeDecorators,this.resetStartLocationFromNode(classNode,maybeDecorators[0]),exportNode&&this.resetStartLocationFromNode(exportNode,classNode)),classNode}canHaveLeadingDecorator(){return this.match(80)}parseDecorators(allowExport){const decorators=[];do{decorators.push(this.parseDecorator());}while(this.match(26));if(this.match(82))allowExport||this.unexpected(),this.decoratorsEnabledBeforeExport()||this.raise(Errors.DecoratorExportClass,{at:this.state.startLoc});else if(!this.canHaveLeadingDecorator())throw this.raise(Errors.UnexpectedLeadingDecorator,{at:this.state.startLoc});return decorators}parseDecorator(){this.expectOnePlugin(["decorators","decorators-legacy"]);const node=this.startNode();if(this.next(),this.hasPlugin("decorators")){const startLoc=this.state.startLoc;let expr;if(this.match(10)){const startLoc=this.state.startLoc;this.next(),expr=this.parseExpression(),this.expect(11),expr=this.wrapParenthesis(startLoc,expr);const paramsStartLoc=this.state.startLoc;node.expression=this.parseMaybeDecoratorArguments(expr),!1===this.getPluginOption("decorators","allowCallParenthesized")&&node.expression!==expr&&this.raise(Errors.DecoratorArgumentsOutsideParentheses,{at:paramsStartLoc});}else {for(expr=this.parseIdentifier(!1);this.eat(16);){const node=this.startNodeAt(startLoc);node.object=expr,this.match(136)?(this.classScope.usePrivateName(this.state.value,this.state.startLoc),node.property=this.parsePrivateName()):node.property=this.parseIdentifier(!0),node.computed=!1,expr=this.finishNode(node,"MemberExpression");}node.expression=this.parseMaybeDecoratorArguments(expr);}}else node.expression=this.parseExprSubscripts();return this.finishNode(node,"Decorator")}parseMaybeDecoratorArguments(expr){if(this.eat(10)){const node=this.startNodeAtNode(expr);return node.callee=expr,node.arguments=this.parseCallExpressionArguments(11,!1),this.toReferencedList(node.arguments),this.finishNode(node,"CallExpression")}return expr}parseBreakContinueStatement(node,isBreak){return this.next(),this.isLineTerminator()?node.label=null:(node.label=this.parseIdentifier(),this.semicolon()),this.verifyBreakContinue(node,isBreak),this.finishNode(node,isBreak?"BreakStatement":"ContinueStatement")}verifyBreakContinue(node,isBreak){let i;for(i=0;i<this.state.labels.length;++i){const lab=this.state.labels[i];if(null==node.label||lab.name===node.label.name){if(null!=lab.kind&&(isBreak||"loop"===lab.kind))break;if(node.label&&isBreak)break}}if(i===this.state.labels.length){const type=isBreak?"BreakStatement":"ContinueStatement";this.raise(Errors.IllegalBreakContinue,{at:node,type});}}parseDebuggerStatement(node){return this.next(),this.semicolon(),this.finishNode(node,"DebuggerStatement")}parseHeaderExpression(){this.expect(10);const val=this.parseExpression();return this.expect(11),val}parseDoWhileStatement(node){return this.next(),this.state.labels.push(loopLabel),node.body=this.withSmartMixTopicForbiddingContext((()=>this.parseStatement())),this.state.labels.pop(),this.expect(92),node.test=this.parseHeaderExpression(),this.eat(13),this.finishNode(node,"DoWhileStatement")}parseForStatement(node){this.next(),this.state.labels.push(loopLabel);let awaitAt=null;if(this.isAwaitAllowed()&&this.eatContextual(96)&&(awaitAt=this.state.lastTokStartLoc),this.scope.enter(0),this.expect(10),this.match(13))return null!==awaitAt&&this.unexpected(awaitAt),this.parseFor(node,null);const startsWithLet=this.isContextual(99),startsWithUsing=this.isContextual(105)&&!this.hasFollowingLineBreak(),isLetOrUsing=startsWithLet&&this.hasFollowingBindingAtom()||startsWithUsing&&this.hasFollowingBindingIdentifier()&&this.startsUsingForOf();if(this.match(74)||this.match(75)||isLetOrUsing){const initNode=this.startNode(),kind=this.state.value;this.next(),this.parseVar(initNode,!0,kind);const init=this.finishNode(initNode,"VariableDeclaration"),isForIn=this.match(58);return isForIn&&startsWithUsing&&this.raise(Errors.ForInUsing,{at:init}),(isForIn||this.isContextual(101))&&1===init.declarations.length?this.parseForIn(node,init,awaitAt):(null!==awaitAt&&this.unexpected(awaitAt),this.parseFor(node,init))}const startsWithAsync=this.isContextual(95),refExpressionErrors=new ExpressionErrors,init=this.parseExpression(!0,refExpressionErrors),isForOf=this.isContextual(101);if(isForOf&&(startsWithLet&&this.raise(Errors.ForOfLet,{at:init}),null===awaitAt&&startsWithAsync&&"Identifier"===init.type&&this.raise(Errors.ForOfAsync,{at:init})),isForOf||this.match(58)){this.checkDestructuringPrivate(refExpressionErrors),this.toAssignable(init,!0);const type=isForOf?"ForOfStatement":"ForInStatement";return this.checkLVal(init,{in:{type}}),this.parseForIn(node,init,awaitAt)}return this.checkExpressionErrors(refExpressionErrors,!0),null!==awaitAt&&this.unexpected(awaitAt),this.parseFor(node,init)}parseFunctionStatement(node,isAsync,isHangingDeclaration){return this.next(),this.parseFunction(node,1|(isHangingDeclaration?2:0)|(isAsync?8:0))}parseIfStatement(node){return this.next(),node.test=this.parseHeaderExpression(),node.consequent=this.parseStatementOrSloppyAnnexBFunctionDeclaration(),node.alternate=this.eat(66)?this.parseStatementOrSloppyAnnexBFunctionDeclaration():null,this.finishNode(node,"IfStatement")}parseReturnStatement(node){return this.prodParam.hasReturn||this.options.allowReturnOutsideFunction||this.raise(Errors.IllegalReturn,{at:this.state.startLoc}),this.next(),this.isLineTerminator()?node.argument=null:(node.argument=this.parseExpression(),this.semicolon()),this.finishNode(node,"ReturnStatement")}parseSwitchStatement(node){this.next(),node.discriminant=this.parseHeaderExpression();const cases=node.cases=[];let cur;this.expect(5),this.state.labels.push(switchLabel),this.scope.enter(0);for(let sawDefault;!this.match(8);)if(this.match(61)||this.match(65)){const isCase=this.match(61);cur&&this.finishNode(cur,"SwitchCase"),cases.push(cur=this.startNode()),cur.consequent=[],this.next(),isCase?cur.test=this.parseExpression():(sawDefault&&this.raise(Errors.MultipleDefaultsInSwitch,{at:this.state.lastTokStartLoc}),sawDefault=!0,cur.test=null),this.expect(14);}else cur?cur.consequent.push(this.parseStatementListItem()):this.unexpected();return this.scope.exit(),cur&&this.finishNode(cur,"SwitchCase"),this.next(),this.state.labels.pop(),this.finishNode(node,"SwitchStatement")}parseThrowStatement(node){return this.next(),this.hasPrecedingLineBreak()&&this.raise(Errors.NewlineAfterThrow,{at:this.state.lastTokEndLoc}),node.argument=this.parseExpression(),this.semicolon(),this.finishNode(node,"ThrowStatement")}parseCatchClauseParam(){const param=this.parseBindingAtom();return this.scope.enter(this.options.annexB&&"Identifier"===param.type?8:0),this.checkLVal(param,{in:{type:"CatchClause"},binding:9}),param}parseTryStatement(node){if(this.next(),node.block=this.parseBlock(),node.handler=null,this.match(62)){const clause=this.startNode();this.next(),this.match(10)?(this.expect(10),clause.param=this.parseCatchClauseParam(),this.expect(11)):(clause.param=null,this.scope.enter(0)),clause.body=this.withSmartMixTopicForbiddingContext((()=>this.parseBlock(!1,!1))),this.scope.exit(),node.handler=this.finishNode(clause,"CatchClause");}return node.finalizer=this.eat(67)?this.parseBlock():null,node.handler||node.finalizer||this.raise(Errors.NoCatchOrFinally,{at:node}),this.finishNode(node,"TryStatement")}parseVarStatement(node,kind,allowMissingInitializer=!1){return this.next(),this.parseVar(node,!1,kind,allowMissingInitializer),this.semicolon(),this.finishNode(node,"VariableDeclaration")}parseWhileStatement(node){return this.next(),node.test=this.parseHeaderExpression(),this.state.labels.push(loopLabel),node.body=this.withSmartMixTopicForbiddingContext((()=>this.parseStatement())),this.state.labels.pop(),this.finishNode(node,"WhileStatement")}parseWithStatement(node){return this.state.strict&&this.raise(Errors.StrictWith,{at:this.state.startLoc}),this.next(),node.object=this.parseHeaderExpression(),node.body=this.withSmartMixTopicForbiddingContext((()=>this.parseStatement())),this.finishNode(node,"WithStatement")}parseEmptyStatement(node){return this.next(),this.finishNode(node,"EmptyStatement")}parseLabeledStatement(node,maybeName,expr,flags){for(const label of this.state.labels)label.name===maybeName&&this.raise(Errors.LabelRedeclaration,{at:expr,labelName:maybeName});const kind=(token=this.state.type)>=90&&token<=92?"loop":this.match(71)?"switch":null;var token;for(let i=this.state.labels.length-1;i>=0;i--){const label=this.state.labels[i];if(label.statementStart!==node.start)break;label.statementStart=this.state.start,label.kind=kind;}return this.state.labels.push({name:maybeName,kind,statementStart:this.state.start}),node.body=8&flags?this.parseStatementOrSloppyAnnexBFunctionDeclaration(!0):this.parseStatement(),this.state.labels.pop(),node.label=expr,this.finishNode(node,"LabeledStatement")}parseExpressionStatement(node,expr,decorators){return node.expression=expr,this.semicolon(),this.finishNode(node,"ExpressionStatement")}parseBlock(allowDirectives=!1,createNewLexicalScope=!0,afterBlockParse){const node=this.startNode();return allowDirectives&&this.state.strictErrors.clear(),this.expect(5),createNewLexicalScope&&this.scope.enter(0),this.parseBlockBody(node,allowDirectives,!1,8,afterBlockParse),createNewLexicalScope&&this.scope.exit(),this.finishNode(node,"BlockStatement")}isValidDirective(stmt){return "ExpressionStatement"===stmt.type&&"StringLiteral"===stmt.expression.type&&!stmt.expression.extra.parenthesized}parseBlockBody(node,allowDirectives,topLevel,end,afterBlockParse){const body=node.body=[],directives=node.directives=[];this.parseBlockOrModuleBlockBody(body,allowDirectives?directives:void 0,topLevel,end,afterBlockParse);}parseBlockOrModuleBlockBody(body,directives,topLevel,end,afterBlockParse){const oldStrict=this.state.strict;let hasStrictModeDirective=!1,parsedNonDirective=!1;for(;!this.match(end);){const stmt=topLevel?this.parseModuleItem():this.parseStatementListItem();if(directives&&!parsedNonDirective){if(this.isValidDirective(stmt)){const directive=this.stmtToDirective(stmt);directives.push(directive),hasStrictModeDirective||"use strict"!==directive.value.value||(hasStrictModeDirective=!0,this.setStrict(!0));continue}parsedNonDirective=!0,this.state.strictErrors.clear();}body.push(stmt);}afterBlockParse&&afterBlockParse.call(this,hasStrictModeDirective),oldStrict||this.setStrict(!1),this.next();}parseFor(node,init){return node.init=init,this.semicolon(!1),node.test=this.match(13)?null:this.parseExpression(),this.semicolon(!1),node.update=this.match(11)?null:this.parseExpression(),this.expect(11),node.body=this.withSmartMixTopicForbiddingContext((()=>this.parseStatement())),this.scope.exit(),this.state.labels.pop(),this.finishNode(node,"ForStatement")}parseForIn(node,init,awaitAt){const isForIn=this.match(58);return this.next(),isForIn?null!==awaitAt&&this.unexpected(awaitAt):node.await=null!==awaitAt,"VariableDeclaration"!==init.type||null==init.declarations[0].init||isForIn&&this.options.annexB&&!this.state.strict&&"var"===init.kind&&"Identifier"===init.declarations[0].id.type||this.raise(Errors.ForInOfLoopInitializer,{at:init,type:isForIn?"ForInStatement":"ForOfStatement"}),"AssignmentPattern"===init.type&&this.raise(Errors.InvalidLhs,{at:init,ancestor:{type:"ForStatement"}}),node.left=init,node.right=isForIn?this.parseExpression():this.parseMaybeAssignAllowIn(),this.expect(11),node.body=this.withSmartMixTopicForbiddingContext((()=>this.parseStatement())),this.scope.exit(),this.state.labels.pop(),this.finishNode(node,isForIn?"ForInStatement":"ForOfStatement")}parseVar(node,isFor,kind,allowMissingInitializer=!1){const declarations=node.declarations=[];for(node.kind=kind;;){const decl=this.startNode();if(this.parseVarId(decl,kind),decl.init=this.eat(29)?isFor?this.parseMaybeAssignDisallowIn():this.parseMaybeAssignAllowIn():null,null!==decl.init||allowMissingInitializer||("Identifier"===decl.id.type||isFor&&(this.match(58)||this.isContextual(101))?"const"!==kind||this.match(58)||this.isContextual(101)||this.raise(Errors.DeclarationMissingInitializer,{at:this.state.lastTokEndLoc,kind:"const"}):this.raise(Errors.DeclarationMissingInitializer,{at:this.state.lastTokEndLoc,kind:"destructuring"})),declarations.push(this.finishNode(decl,"VariableDeclarator")),!this.eat(12))break}return node}parseVarId(decl,kind){"using"===kind&&!this.inModule&&this.match(96)&&this.raise(Errors.AwaitInUsingBinding,{at:this.state.startLoc});const id=this.parseBindingAtom();this.checkLVal(id,{in:{type:"VariableDeclarator"},binding:"var"===kind?5:8201}),decl.id=id;}parseAsyncFunctionExpression(node){return this.parseFunction(node,8)}parseFunction(node,flags=0){const hangingDeclaration=2&flags,isDeclaration=!!(1&flags),requireId=isDeclaration&&!(4&flags),isAsync=!!(8&flags);this.initFunction(node,isAsync),this.match(55)&&(hangingDeclaration&&this.raise(Errors.GeneratorInSingleStatementContext,{at:this.state.startLoc}),this.next(),node.generator=!0),isDeclaration&&(node.id=this.parseFunctionId(requireId));const oldMaybeInArrowParameters=this.state.maybeInArrowParameters;return this.state.maybeInArrowParameters=!1,this.scope.enter(2),this.prodParam.enter(functionFlags(isAsync,node.generator)),isDeclaration||(node.id=this.parseFunctionId()),this.parseFunctionParams(node,!1),this.withSmartMixTopicForbiddingContext((()=>{this.parseFunctionBodyAndFinish(node,isDeclaration?"FunctionDeclaration":"FunctionExpression");})),this.prodParam.exit(),this.scope.exit(),isDeclaration&&!hangingDeclaration&&this.registerFunctionStatementId(node),this.state.maybeInArrowParameters=oldMaybeInArrowParameters,node}parseFunctionId(requireId){return requireId||tokenIsIdentifier(this.state.type)?this.parseIdentifier():null}parseFunctionParams(node,isConstructor){this.expect(10),this.expressionScope.enter(new ExpressionScope(kParameterDeclaration)),node.params=this.parseBindingList(11,41,2|(isConstructor?4:0)),this.expressionScope.exit();}registerFunctionStatementId(node){node.id&&this.scope.declareName(node.id.name,!this.options.annexB||this.state.strict||node.generator||node.async?this.scope.treatFunctionsAsVar?5:8201:17,node.id.loc.start);}parseClass(node,isStatement,optionalId){this.next();const oldStrict=this.state.strict;return this.state.strict=!0,this.parseClassId(node,isStatement,optionalId),this.parseClassSuper(node),node.body=this.parseClassBody(!!node.superClass,oldStrict),this.finishNode(node,isStatement?"ClassDeclaration":"ClassExpression")}isClassProperty(){return this.match(29)||this.match(13)||this.match(8)}isClassMethod(){return this.match(10)}isNonstaticConstructor(method){return !(method.computed||method.static||"constructor"!==method.key.name&&"constructor"!==method.key.value)}parseClassBody(hadSuperClass,oldStrict){this.classScope.enter();const state={hadConstructor:!1,hadSuperClass};let decorators=[];const classBody=this.startNode();if(classBody.body=[],this.expect(5),this.withSmartMixTopicForbiddingContext((()=>{for(;!this.match(8);){if(this.eat(13)){if(decorators.length>0)throw this.raise(Errors.DecoratorSemicolon,{at:this.state.lastTokEndLoc});continue}if(this.match(26)){decorators.push(this.parseDecorator());continue}const member=this.startNode();decorators.length&&(member.decorators=decorators,this.resetStartLocationFromNode(member,decorators[0]),decorators=[]),this.parseClassMember(classBody,member,state),"constructor"===member.kind&&member.decorators&&member.decorators.length>0&&this.raise(Errors.DecoratorConstructor,{at:member});}})),this.state.strict=oldStrict,this.next(),decorators.length)throw this.raise(Errors.TrailingDecorator,{at:this.state.startLoc});return this.classScope.exit(),this.finishNode(classBody,"ClassBody")}parseClassMemberFromModifier(classBody,member){const key=this.parseIdentifier(!0);if(this.isClassMethod()){const method=member;return method.kind="method",method.computed=!1,method.key=key,method.static=!1,this.pushClassMethod(classBody,method,!1,!1,!1,!1),!0}if(this.isClassProperty()){const prop=member;return prop.computed=!1,prop.key=key,prop.static=!1,classBody.body.push(this.parseClassProperty(prop)),!0}return this.resetPreviousNodeTrailingComments(key),!1}parseClassMember(classBody,member,state){const isStatic=this.isContextual(104);if(isStatic){if(this.parseClassMemberFromModifier(classBody,member))return;if(this.eat(5))return void this.parseClassStaticBlock(classBody,member)}this.parseClassMemberWithIsStatic(classBody,member,state,isStatic);}parseClassMemberWithIsStatic(classBody,member,state,isStatic){const publicMethod=member,privateMethod=member,publicProp=member,privateProp=member,accessorProp=member,method=publicMethod,publicMember=publicMethod;if(member.static=isStatic,this.parsePropertyNamePrefixOperator(member),this.eat(55)){method.kind="method";const isPrivateName=this.match(136);return this.parseClassElementName(method),isPrivateName?void this.pushClassPrivateMethod(classBody,privateMethod,!0,!1):(this.isNonstaticConstructor(publicMethod)&&this.raise(Errors.ConstructorIsGenerator,{at:publicMethod.key}),void this.pushClassMethod(classBody,publicMethod,!0,!1,!1,!1))}const isContextual=tokenIsIdentifier(this.state.type)&&!this.state.containsEsc,isPrivate=this.match(136),key=this.parseClassElementName(member),maybeQuestionTokenStartLoc=this.state.startLoc;if(this.parsePostMemberNameModifiers(publicMember),this.isClassMethod()){if(method.kind="method",isPrivate)return void this.pushClassPrivateMethod(classBody,privateMethod,!1,!1);const isConstructor=this.isNonstaticConstructor(publicMethod);let allowsDirectSuper=!1;isConstructor&&(publicMethod.kind="constructor",state.hadConstructor&&!this.hasPlugin("typescript")&&this.raise(Errors.DuplicateConstructor,{at:key}),isConstructor&&this.hasPlugin("typescript")&&member.override&&this.raise(Errors.OverrideOnConstructor,{at:key}),state.hadConstructor=!0,allowsDirectSuper=state.hadSuperClass),this.pushClassMethod(classBody,publicMethod,!1,!1,isConstructor,allowsDirectSuper);}else if(this.isClassProperty())isPrivate?this.pushClassPrivateProperty(classBody,privateProp):this.pushClassProperty(classBody,publicProp);else if(isContextual&&"async"===key.name&&!this.isLineTerminator()){this.resetPreviousNodeTrailingComments(key);const isGenerator=this.eat(55);publicMember.optional&&this.unexpected(maybeQuestionTokenStartLoc),method.kind="method";const isPrivate=this.match(136);this.parseClassElementName(method),this.parsePostMemberNameModifiers(publicMember),isPrivate?this.pushClassPrivateMethod(classBody,privateMethod,isGenerator,!0):(this.isNonstaticConstructor(publicMethod)&&this.raise(Errors.ConstructorIsAsync,{at:publicMethod.key}),this.pushClassMethod(classBody,publicMethod,isGenerator,!0,!1,!1));}else if(!isContextual||"get"!==key.name&&"set"!==key.name||this.match(55)&&this.isLineTerminator())if(isContextual&&"accessor"===key.name&&!this.isLineTerminator()){this.expectPlugin("decoratorAutoAccessors"),this.resetPreviousNodeTrailingComments(key);const isPrivate=this.match(136);this.parseClassElementName(publicProp),this.pushClassAccessorProperty(classBody,accessorProp,isPrivate);}else this.isLineTerminator()?isPrivate?this.pushClassPrivateProperty(classBody,privateProp):this.pushClassProperty(classBody,publicProp):this.unexpected();else {this.resetPreviousNodeTrailingComments(key),method.kind=key.name;const isPrivate=this.match(136);this.parseClassElementName(publicMethod),isPrivate?this.pushClassPrivateMethod(classBody,privateMethod,!1,!1):(this.isNonstaticConstructor(publicMethod)&&this.raise(Errors.ConstructorIsAccessor,{at:publicMethod.key}),this.pushClassMethod(classBody,publicMethod,!1,!1,!1,!1)),this.checkGetterSetterParams(publicMethod);}}parseClassElementName(member){const{type,value}=this.state;if(130!==type&&131!==type||!member.static||"prototype"!==value||this.raise(Errors.StaticPrototype,{at:this.state.startLoc}),136===type){"constructor"===value&&this.raise(Errors.ConstructorClassPrivateField,{at:this.state.startLoc});const key=this.parsePrivateName();return member.key=key,key}return this.parsePropertyName(member)}parseClassStaticBlock(classBody,member){var _member$decorators;this.scope.enter(208);const oldLabels=this.state.labels;this.state.labels=[],this.prodParam.enter(0);const body=member.body=[];this.parseBlockOrModuleBlockBody(body,void 0,!1,8),this.prodParam.exit(),this.scope.exit(),this.state.labels=oldLabels,classBody.body.push(this.finishNode(member,"StaticBlock")),null!=(_member$decorators=member.decorators)&&_member$decorators.length&&this.raise(Errors.DecoratorStaticBlock,{at:member});}pushClassProperty(classBody,prop){prop.computed||"constructor"!==prop.key.name&&"constructor"!==prop.key.value||this.raise(Errors.ConstructorClassField,{at:prop.key}),classBody.body.push(this.parseClassProperty(prop));}pushClassPrivateProperty(classBody,prop){const node=this.parseClassPrivateProperty(prop);classBody.body.push(node),this.classScope.declarePrivateName(this.getPrivateNameSV(node.key),0,node.key.loc.start);}pushClassAccessorProperty(classBody,prop,isPrivate){if(!isPrivate&&!prop.computed){const key=prop.key;"constructor"!==key.name&&"constructor"!==key.value||this.raise(Errors.ConstructorClassField,{at:key});}const node=this.parseClassAccessorProperty(prop);classBody.body.push(node),isPrivate&&this.classScope.declarePrivateName(this.getPrivateNameSV(node.key),0,node.key.loc.start);}pushClassMethod(classBody,method,isGenerator,isAsync,isConstructor,allowsDirectSuper){classBody.body.push(this.parseMethod(method,isGenerator,isAsync,isConstructor,allowsDirectSuper,"ClassMethod",!0));}pushClassPrivateMethod(classBody,method,isGenerator,isAsync){const node=this.parseMethod(method,isGenerator,isAsync,!1,!1,"ClassPrivateMethod",!0);classBody.body.push(node);const kind="get"===node.kind?node.static?6:2:"set"===node.kind?node.static?5:1:0;this.declareClassPrivateMethodInScope(node,kind);}declareClassPrivateMethodInScope(node,kind){this.classScope.declarePrivateName(this.getPrivateNameSV(node.key),kind,node.key.loc.start);}parsePostMemberNameModifiers(methodOrProp){}parseClassPrivateProperty(node){return this.parseInitializer(node),this.semicolon(),this.finishNode(node,"ClassPrivateProperty")}parseClassProperty(node){return this.parseInitializer(node),this.semicolon(),this.finishNode(node,"ClassProperty")}parseClassAccessorProperty(node){return this.parseInitializer(node),this.semicolon(),this.finishNode(node,"ClassAccessorProperty")}parseInitializer(node){this.scope.enter(80),this.expressionScope.enter(newExpressionScope()),this.prodParam.enter(0),node.value=this.eat(29)?this.parseMaybeAssignAllowIn():null,this.expressionScope.exit(),this.prodParam.exit(),this.scope.exit();}parseClassId(node,isStatement,optionalId,bindingType=8331){if(tokenIsIdentifier(this.state.type))node.id=this.parseIdentifier(),isStatement&&this.declareNameFromIdentifier(node.id,bindingType);else {if(!optionalId&&isStatement)throw this.raise(Errors.MissingClassName,{at:this.state.startLoc});node.id=null;}}parseClassSuper(node){node.superClass=this.eat(81)?this.parseExprSubscripts():null;}parseExport(node,decorators){const hasDefault=this.maybeParseExportDefaultSpecifier(node),parseAfterDefault=!hasDefault||this.eat(12),hasStar=parseAfterDefault&&this.eatExportStar(node),hasNamespace=hasStar&&this.maybeParseExportNamespaceSpecifier(node),parseAfterNamespace=parseAfterDefault&&(!hasNamespace||this.eat(12)),isFromRequired=hasDefault||hasStar;if(hasStar&&!hasNamespace){if(hasDefault&&this.unexpected(),decorators)throw this.raise(Errors.UnsupportedDecoratorExport,{at:node});return this.parseExportFrom(node,!0),this.finishNode(node,"ExportAllDeclaration")}const hasSpecifiers=this.maybeParseExportNamedSpecifiers(node);let hasDeclaration;if(hasDefault&&parseAfterDefault&&!hasStar&&!hasSpecifiers&&this.unexpected(null,5),hasNamespace&&parseAfterNamespace&&this.unexpected(null,97),isFromRequired||hasSpecifiers){if(hasDeclaration=!1,decorators)throw this.raise(Errors.UnsupportedDecoratorExport,{at:node});this.parseExportFrom(node,isFromRequired);}else hasDeclaration=this.maybeParseExportDeclaration(node);if(isFromRequired||hasSpecifiers||hasDeclaration){var _node2$declaration;const node2=node;if(this.checkExport(node2,!0,!1,!!node2.source),"ClassDeclaration"===(null==(_node2$declaration=node2.declaration)?void 0:_node2$declaration.type))this.maybeTakeDecorators(decorators,node2.declaration,node2);else if(decorators)throw this.raise(Errors.UnsupportedDecoratorExport,{at:node});return this.finishNode(node2,"ExportNamedDeclaration")}if(this.eat(65)){const node2=node,decl=this.parseExportDefaultExpression();if(node2.declaration=decl,"ClassDeclaration"===decl.type)this.maybeTakeDecorators(decorators,decl,node2);else if(decorators)throw this.raise(Errors.UnsupportedDecoratorExport,{at:node});return this.checkExport(node2,!0,!0),this.finishNode(node2,"ExportDefaultDeclaration")}this.unexpected(null,5);}eatExportStar(node){return this.eat(55)}maybeParseExportDefaultSpecifier(node){if(this.isExportDefaultSpecifier()){this.expectPlugin("exportDefaultFrom");const specifier=this.startNode();return specifier.exported=this.parseIdentifier(!0),node.specifiers=[this.finishNode(specifier,"ExportDefaultSpecifier")],!0}return !1}maybeParseExportNamespaceSpecifier(node){if(this.isContextual(93)){node.specifiers||(node.specifiers=[]);const specifier=this.startNodeAt(this.state.lastTokStartLoc);return this.next(),specifier.exported=this.parseModuleExportName(),node.specifiers.push(this.finishNode(specifier,"ExportNamespaceSpecifier")),!0}return !1}maybeParseExportNamedSpecifiers(node){if(this.match(5)){node.specifiers||(node.specifiers=[]);const isTypeExport="type"===node.exportKind;return node.specifiers.push(...this.parseExportSpecifiers(isTypeExport)),node.source=null,node.declaration=null,this.hasPlugin("importAssertions")&&(node.assertions=[]),!0}return !1}maybeParseExportDeclaration(node){return !!this.shouldParseExportDeclaration()&&(node.specifiers=[],node.source=null,this.hasPlugin("importAssertions")&&(node.assertions=[]),node.declaration=this.parseExportDeclaration(node),!0)}isAsyncFunction(){if(!this.isContextual(95))return !1;const next=this.nextTokenStart();return !lineBreak.test(this.input.slice(this.state.pos,next))&&this.isUnparsedContextual(next,"function")}parseExportDefaultExpression(){const expr=this.startNode();if(this.match(68))return this.next(),this.parseFunction(expr,5);if(this.isAsyncFunction())return this.next(),this.next(),this.parseFunction(expr,13);if(this.match(80))return this.parseClass(expr,!0,!0);if(this.match(26))return this.hasPlugin("decorators")&&!0===this.getPluginOption("decorators","decoratorsBeforeExport")&&this.raise(Errors.DecoratorBeforeExport,{at:this.state.startLoc}),this.parseClass(this.maybeTakeDecorators(this.parseDecorators(!1),this.startNode()),!0,!0);if(this.match(75)||this.match(74)||this.isLet())throw this.raise(Errors.UnsupportedDefaultExport,{at:this.state.startLoc});const res=this.parseMaybeAssignAllowIn();return this.semicolon(),res}parseExportDeclaration(node){if(this.match(80)){return this.parseClass(this.startNode(),!0,!1)}return this.parseStatementListItem()}isExportDefaultSpecifier(){const{type}=this.state;if(tokenIsIdentifier(type)){if(95===type&&!this.state.containsEsc||99===type)return !1;if((128===type||127===type)&&!this.state.containsEsc){const{type:nextType}=this.lookahead();if(tokenIsIdentifier(nextType)&&97!==nextType||5===nextType)return this.expectOnePlugin(["flow","typescript"]),!1}}else if(!this.match(65))return !1;const next=this.nextTokenStart(),hasFrom=this.isUnparsedContextual(next,"from");if(44===this.input.charCodeAt(next)||tokenIsIdentifier(this.state.type)&&hasFrom)return !0;if(this.match(65)&&hasFrom){const nextAfterFrom=this.input.charCodeAt(this.nextTokenStartSince(next+4));return 34===nextAfterFrom||39===nextAfterFrom}return !1}parseExportFrom(node,expect){if(this.eatContextual(97)){node.source=this.parseImportSource(),this.checkExport(node);const assertions=this.maybeParseImportAssertions();assertions&&(node.assertions=assertions,this.checkJSONModuleImport(node));}else expect&&this.unexpected();this.semicolon();}shouldParseExportDeclaration(){const{type}=this.state;return 26===type&&(this.expectOnePlugin(["decorators","decorators-legacy"]),this.hasPlugin("decorators"))?(!0===this.getPluginOption("decorators","decoratorsBeforeExport")&&this.raise(Errors.DecoratorBeforeExport,{at:this.state.startLoc}),!0):74===type||75===type||68===type||80===type||this.isLet()||this.isAsyncFunction()}checkExport(node,checkNames,isDefault,isFrom){if(checkNames)if(isDefault){if(this.checkDuplicateExports(node,"default"),this.hasPlugin("exportDefaultFrom")){var _declaration$extra;const declaration=node.declaration;"Identifier"!==declaration.type||"from"!==declaration.name||declaration.end-declaration.start!=4||null!=(_declaration$extra=declaration.extra)&&_declaration$extra.parenthesized||this.raise(Errors.ExportDefaultFromAsIdentifier,{at:declaration});}}else if(node.specifiers&&node.specifiers.length)for(const specifier of node.specifiers){const{exported}=specifier,exportName="Identifier"===exported.type?exported.name:exported.value;if(this.checkDuplicateExports(specifier,exportName),!isFrom&&specifier.local){const{local}=specifier;"Identifier"!==local.type?this.raise(Errors.ExportBindingIsString,{at:specifier,localName:local.value,exportName}):(this.checkReservedWord(local.name,local.loc.start,!0,!1),this.scope.checkLocalExport(local));}}else if(node.declaration)if("FunctionDeclaration"===node.declaration.type||"ClassDeclaration"===node.declaration.type){const id=node.declaration.id;if(!id)throw new Error("Assertion failure");this.checkDuplicateExports(node,id.name);}else if("VariableDeclaration"===node.declaration.type)for(const declaration of node.declaration.declarations)this.checkDeclaration(declaration.id);}checkDeclaration(node){if("Identifier"===node.type)this.checkDuplicateExports(node,node.name);else if("ObjectPattern"===node.type)for(const prop of node.properties)this.checkDeclaration(prop);else if("ArrayPattern"===node.type)for(const elem of node.elements)elem&&this.checkDeclaration(elem);else "ObjectProperty"===node.type?this.checkDeclaration(node.value):"RestElement"===node.type?this.checkDeclaration(node.argument):"AssignmentPattern"===node.type&&this.checkDeclaration(node.left);}checkDuplicateExports(node,exportName){this.exportedIdentifiers.has(exportName)&&("default"===exportName?this.raise(Errors.DuplicateDefaultExport,{at:node}):this.raise(Errors.DuplicateExport,{at:node,exportName})),this.exportedIdentifiers.add(exportName);}parseExportSpecifiers(isInTypeExport){const nodes=[];let first=!0;for(this.expect(5);!this.eat(8);){if(first)first=!1;else if(this.expect(12),this.eat(8))break;const isMaybeTypeOnly=this.isContextual(128),isString=this.match(131),node=this.startNode();node.local=this.parseModuleExportName(),nodes.push(this.parseExportSpecifier(node,isString,isInTypeExport,isMaybeTypeOnly));}return nodes}parseExportSpecifier(node,isString,isInTypeExport,isMaybeTypeOnly){return this.eatContextual(93)?node.exported=this.parseModuleExportName():isString?node.exported=cloneStringLiteral(node.local):node.exported||(node.exported=cloneIdentifier(node.local)),this.finishNode(node,"ExportSpecifier")}parseModuleExportName(){if(this.match(131)){const result=this.parseStringLiteral(this.state.value),surrogate=result.value.match(loneSurrogate);return surrogate&&this.raise(Errors.ModuleExportNameHasLoneSurrogate,{at:result,surrogateCharCode:surrogate[0].charCodeAt(0)}),result}return this.parseIdentifier(!0)}isJSONModuleImport(node){return null!=node.assertions&&node.assertions.some((({key,value})=>"json"===value.value&&("Identifier"===key.type?"type"===key.name:"type"===key.value)))}checkImportReflection(node){var _node$assertions;node.module&&(1===node.specifiers.length&&"ImportDefaultSpecifier"===node.specifiers[0].type||this.raise(Errors.ImportReflectionNotBinding,{at:node.specifiers[0].loc.start}),(null==(_node$assertions=node.assertions)?void 0:_node$assertions.length)>0&&this.raise(Errors.ImportReflectionHasAssertion,{at:node.specifiers[0].loc.start}));}checkJSONModuleImport(node){if(this.isJSONModuleImport(node)&&"ExportAllDeclaration"!==node.type){const{specifiers}=node;if(null!=specifiers){const nonDefaultNamedSpecifier=specifiers.find((specifier=>{let imported;if("ExportSpecifier"===specifier.type?imported=specifier.local:"ImportSpecifier"===specifier.type&&(imported=specifier.imported),void 0!==imported)return "Identifier"===imported.type?"default"!==imported.name:"default"!==imported.value}));void 0!==nonDefaultNamedSpecifier&&this.raise(Errors.ImportJSONBindingNotDefault,{at:nonDefaultNamedSpecifier.loc.start});}}}parseMaybeImportReflection(node){let isImportReflection=!1;if(this.isContextual(125)){const lookahead=this.lookahead(),nextType=lookahead.type;if(tokenIsIdentifier(nextType))if(97!==nextType)isImportReflection=!0;else {102===this.input.charCodeAt(this.nextTokenStartSince(lookahead.end))&&(isImportReflection=!0);}else 12!==nextType&&(isImportReflection=!0);}isImportReflection?(this.expectPlugin("importReflection"),this.next(),node.module=!0):this.hasPlugin("importReflection")&&(node.module=!1);}parseImport(node){if(node.specifiers=[],!this.match(131)){this.parseMaybeImportReflection(node);const parseNext=!this.maybeParseDefaultImportSpecifier(node)||this.eat(12),hasStar=parseNext&&this.maybeParseStarImportSpecifier(node);parseNext&&!hasStar&&this.parseNamedImportSpecifiers(node),this.expectContextual(97);}node.source=this.parseImportSource();const assertions=this.maybeParseImportAssertions();if(assertions)node.assertions=assertions;else {const attributes=this.maybeParseModuleAttributes();attributes&&(node.attributes=attributes);}return this.checkImportReflection(node),this.checkJSONModuleImport(node),this.semicolon(),this.finishNode(node,"ImportDeclaration")}parseImportSource(){return this.match(131)||this.unexpected(),this.parseExprAtom()}shouldParseDefaultImport(node){return tokenIsIdentifier(this.state.type)}parseImportSpecifierLocal(node,specifier,type){specifier.local=this.parseIdentifier(),node.specifiers.push(this.finishImportSpecifier(specifier,type));}finishImportSpecifier(specifier,type,bindingType=8201){return this.checkLVal(specifier.local,{in:{type},binding:bindingType}),this.finishNode(specifier,type)}parseAssertEntries(){const attrs=[],attrNames=new Set;do{if(this.match(8))break;const node=this.startNode(),keyName=this.state.value;if(attrNames.has(keyName)&&this.raise(Errors.ModuleAttributesWithDuplicateKeys,{at:this.state.startLoc,key:keyName}),attrNames.add(keyName),this.match(131)?node.key=this.parseStringLiteral(keyName):node.key=this.parseIdentifier(!0),this.expect(14),!this.match(131))throw this.raise(Errors.ModuleAttributeInvalidValue,{at:this.state.startLoc});node.value=this.parseStringLiteral(this.state.value),attrs.push(this.finishNode(node,"ImportAttribute"));}while(this.eat(12));return attrs}maybeParseModuleAttributes(){if(!this.match(76)||this.hasPrecedingLineBreak())return this.hasPlugin("moduleAttributes")?[]:null;this.expectPlugin("moduleAttributes"),this.next();const attrs=[],attributes=new Set;do{const node=this.startNode();if(node.key=this.parseIdentifier(!0),"type"!==node.key.name&&this.raise(Errors.ModuleAttributeDifferentFromType,{at:node.key}),attributes.has(node.key.name)&&this.raise(Errors.ModuleAttributesWithDuplicateKeys,{at:node.key,key:node.key.name}),attributes.add(node.key.name),this.expect(14),!this.match(131))throw this.raise(Errors.ModuleAttributeInvalidValue,{at:this.state.startLoc});node.value=this.parseStringLiteral(this.state.value),this.finishNode(node,"ImportAttribute"),attrs.push(node);}while(this.eat(12));return attrs}maybeParseImportAssertions(){if(!this.isContextual(94)||this.hasPrecedingLineBreak())return this.hasPlugin("importAssertions")?[]:null;this.expectPlugin("importAssertions"),this.next(),this.eat(5);const attrs=this.parseAssertEntries();return this.eat(8),attrs}maybeParseDefaultImportSpecifier(node){return !!this.shouldParseDefaultImport(node)&&(this.parseImportSpecifierLocal(node,this.startNode(),"ImportDefaultSpecifier"),!0)}maybeParseStarImportSpecifier(node){if(this.match(55)){const specifier=this.startNode();return this.next(),this.expectContextual(93),this.parseImportSpecifierLocal(node,specifier,"ImportNamespaceSpecifier"),!0}return !1}parseNamedImportSpecifiers(node){let first=!0;for(this.expect(5);!this.eat(8);){if(first)first=!1;else {if(this.eat(14))throw this.raise(Errors.DestructureNamedImport,{at:this.state.startLoc});if(this.expect(12),this.eat(8))break}const specifier=this.startNode(),importedIsString=this.match(131),isMaybeTypeOnly=this.isContextual(128);specifier.imported=this.parseModuleExportName();const importSpecifier=this.parseImportSpecifier(specifier,importedIsString,"type"===node.importKind||"typeof"===node.importKind,isMaybeTypeOnly,void 0);node.specifiers.push(importSpecifier);}}parseImportSpecifier(specifier,importedIsString,isInTypeOnlyImport,isMaybeTypeOnly,bindingType){if(this.eatContextual(93))specifier.local=this.parseIdentifier();else {const{imported}=specifier;if(importedIsString)throw this.raise(Errors.ImportBindingIsString,{at:specifier,importName:imported.value});this.checkReservedWord(imported.name,specifier.loc.start,!0,!0),specifier.local||(specifier.local=cloneIdentifier(imported));}return this.finishImportSpecifier(specifier,"ImportSpecifier",bindingType)}isThisParam(param){return "Identifier"===param.type&&"this"===param.name}}class Parser extends StatementParser{constructor(options,input){super(options=function(opts){if(opts&&null!=opts.annexB&&!1!==opts.annexB)throw new Error("The `annexB` option can only be set to `false`.");const options={};for(const key of Object.keys(defaultOptions))options[key]=opts&&null!=opts[key]?opts[key]:defaultOptions[key];return options}(options),input),this.options=options,this.initializeScopes(),this.plugins=function(plugins){const pluginMap=new Map;for(const plugin of plugins){const[name,options]=Array.isArray(plugin)?plugin:[plugin,{}];pluginMap.has(name)||pluginMap.set(name,options||{});}return pluginMap}(this.options.plugins),this.filename=options.sourceFilename;}getScopeHandler(){return ScopeHandler}parse(){this.enterInitialScopes();const file=this.startNode(),program=this.startNode();return this.nextToken(),file.errors=null,this.parseTopLevel(file,program),file.errors=this.state.errors,file}}const tokTypes=function(internalTokenTypes){const tokenTypes={};for(const typeName of Object.keys(internalTokenTypes))tokenTypes[typeName]=getExportedToken(internalTokenTypes[typeName]);return tokenTypes}(tt);function getParser(options,input){let cls=Parser;return null!=options&&options.plugins&&(!function(plugins){if(hasPlugin(plugins,"decorators")){if(hasPlugin(plugins,"decorators-legacy"))throw new Error("Cannot use the decorators and decorators-legacy plugin together");const decoratorsBeforeExport=getPluginOption(plugins,"decorators","decoratorsBeforeExport");if(null!=decoratorsBeforeExport&&"boolean"!=typeof decoratorsBeforeExport)throw new Error("'decoratorsBeforeExport' must be a boolean, if specified.");const allowCallParenthesized=getPluginOption(plugins,"decorators","allowCallParenthesized");if(null!=allowCallParenthesized&&"boolean"!=typeof allowCallParenthesized)throw new Error("'allowCallParenthesized' must be a boolean.")}if(hasPlugin(plugins,"flow")&&hasPlugin(plugins,"typescript"))throw new Error("Cannot combine flow and typescript plugins.");if(hasPlugin(plugins,"placeholders")&&hasPlugin(plugins,"v8intrinsic"))throw new Error("Cannot combine placeholders and v8intrinsic plugins.");if(hasPlugin(plugins,"pipelineOperator")){const proposal=getPluginOption(plugins,"pipelineOperator","proposal");if(!PIPELINE_PROPOSALS.includes(proposal)){const proposalList=PIPELINE_PROPOSALS.map((p=>`"${p}"`)).join(", ");throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`)}const tupleSyntaxIsHash=hasPlugin(plugins,["recordAndTuple",{syntaxType:"hash"}]);if("hack"===proposal){if(hasPlugin(plugins,"placeholders"))throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");if(hasPlugin(plugins,"v8intrinsic"))throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");const topicToken=getPluginOption(plugins,"pipelineOperator","topicToken");if(!TOPIC_TOKENS.includes(topicToken)){const tokenList=TOPIC_TOKENS.map((t=>`"${t}"`)).join(", ");throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`)}if("#"===topicToken&&tupleSyntaxIsHash)throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.')}else if("smart"===proposal&&tupleSyntaxIsHash)throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.')}if(hasPlugin(plugins,"moduleAttributes")){if(hasPlugin(plugins,"importAssertions"))throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");if("may-2020"!==getPluginOption(plugins,"moduleAttributes","version"))throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.")}if(hasPlugin(plugins,"recordAndTuple")&&null!=getPluginOption(plugins,"recordAndTuple","syntaxType")&&!RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins,"recordAndTuple","syntaxType")))throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: "+RECORD_AND_TUPLE_SYNTAX_TYPES.map((p=>`'${p}'`)).join(", "));if(hasPlugin(plugins,"asyncDoExpressions")&&!hasPlugin(plugins,"doExpressions")){const error=new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");throw error.missingPlugins="doExpressions",error}}(options.plugins),cls=function(pluginsFromOptions){const pluginList=mixinPluginNames.filter((name=>hasPlugin(pluginsFromOptions,name))),key=pluginList.join("/");let cls=parserClassCache[key];if(!cls){cls=Parser;for(const plugin of pluginList)cls=mixinPlugins[plugin](cls);parserClassCache[key]=cls;}return cls}(options.plugins)),new cls(options,input)}const parserClassCache={};exports.parse=function(input,options){var _options;if("unambiguous"!==(null==(_options=options)?void 0:_options.sourceType))return getParser(options,input).parse();options=Object.assign({},options);try{options.sourceType="module";const parser=getParser(options,input),ast=parser.parse();if(parser.sawUnambiguousESM)return ast;if(parser.ambiguousScriptDifferentAst)try{return options.sourceType="script",getParser(options,input).parse()}catch(_unused){}else ast.program.sourceType="script";return ast}catch(moduleError){try{return options.sourceType="script",getParser(options,input).parse()}catch(_unused2){}throw moduleError}},exports.parseExpression=function(input,options){const parser=getParser(options,input);return parser.options.strictMode&&(parser.state.strict=!0),parser.getExpression()},exports.tokTypes=tokTypes;},"./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-decorators/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _helperPluginUtils=__webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"),_pluginSyntaxDecorators=__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-decorators/lib/index.js"),_helperCreateClassFeaturesPlugin=__webpack_require__("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"),_transformerLegacy=__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js"),_transformer=__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-decorators/lib/transformer-2023-01.js"),_default=(0, _helperPluginUtils.declare)(((api,options)=>{api.assertVersion(7);var{legacy}=options;const{version}=options;return legacy||"legacy"===version?{name:"proposal-decorators",inherits:_pluginSyntaxDecorators.default,visitor:_transformerLegacy.default}:"2021-12"===version||"2022-03"===version||"2023-01"===version?(0, _transformer.default)(api,options,version):(api.assertVersion("^7.0.2"),(0, _helperCreateClassFeaturesPlugin.createClassFeaturePlugin)({name:"proposal-decorators",api,feature:_helperCreateClassFeaturesPlugin.FEATURES.decorators,inherits:_pluginSyntaxDecorators.default}))}));exports.default=_default;},"./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-decorators/lib/transformer-2023-01.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function({assertVersion,assumption},{loose},version){var _assumption;assertVersion("2023-01"===version?"^7.21.0":"2021-12"===version?"^7.16.0":"^7.19.0");const VISITED=new WeakSet,constantSuper=null!=(_assumption=assumption("constantSuper"))?_assumption:loose;return {name:"proposal-decorators",inherits:_pluginSyntaxDecorators.default,visitor:{"ExportNamedDeclaration|ExportDefaultDeclaration"(path){var _declaration$decorato;const{declaration}=path.node;"ClassDeclaration"===(null==declaration?void 0:declaration.type)&&(null==(_declaration$decorato=declaration.decorators)?void 0:_declaration$decorato.length)>0&&(0, _helperSplitExportDeclaration.default)(path);},Class(path,state){if(VISITED.has(path))return;const newPath=function(path,state,constantSuper,version){const body=path.get("body.body"),classDecorators=path.node.decorators;let hasElementDecorators=!1;const generateClassPrivateUid=function(classPath){let generator;return ()=>(generator||(generator=function(classPath){const currentPrivateId=[],privateNames=new Set;return classPath.traverse({PrivateName(path){privateNames.add(path.node.id.name);}}),()=>{let reifiedId;do{incrementId(currentPrivateId),reifiedId=String.fromCharCode(...currentPrivateId);}while(privateNames.has(reifiedId));return _core.types.privateName(_core.types.identifier(reifiedId))}}(classPath)),generator())}(path);for(const element of body)if(isClassDecoratableElementPath(element))if(element.node.decorators&&element.node.decorators.length>0)hasElementDecorators=!0;else if("ClassAccessorProperty"===element.node.type){const{key,value,static:isStatic,computed}=element.node,newId=generateClassPrivateUid(),newField=generateClassProperty(newId,value?_core.types.cloneNode(value):void 0,isStatic),[newPath]=element.replaceWith(newField);addProxyAccessorsFor(newPath,key,newId,computed);}if(!classDecorators&&!hasElementDecorators)return;const elementDecoratorInfo=[];let firstFieldPath,constructorPath,requiresProtoInit=!1,requiresStaticInit=!1;const decoratedPrivateMethods=new Set;let protoInitLocal,staticInitLocal,classInitLocal,classIdLocal;const assignments=[],scopeParent=path.scope.parent,memoiseExpression=(expression,hint)=>{const localEvaluatedId=scopeParent.generateDeclaredUidIdentifier(hint);return assignments.push(_core.types.assignmentExpression("=",localEvaluatedId,expression)),_core.types.cloneNode(localEvaluatedId)};if(classDecorators){classInitLocal=scopeParent.generateDeclaredUidIdentifier("initClass");const[classId,classPath]=function(path){if("ClassDeclaration"===path.type){const varId=path.scope.generateUidIdentifierBasedOnNode(path.node.id),classId=_core.types.identifier(path.node.id.name);return path.scope.rename(classId.name,varId.name),path.insertBefore(_core.types.variableDeclaration("let",[_core.types.variableDeclarator(varId)])),path.get("id").replaceWith(classId),[_core.types.cloneNode(varId),path]}{let className,varId;path.node.id?(className=path.node.id.name,varId=path.scope.parent.generateDeclaredUidIdentifier(className),path.scope.rename(className,varId.name)):"VariableDeclarator"===path.parentPath.node.type&&"Identifier"===path.parentPath.node.id.type?(className=path.parentPath.node.id.name,varId=path.scope.parent.generateDeclaredUidIdentifier(className)):varId=path.scope.parent.generateDeclaredUidIdentifier("decorated_class");const newClassExpr=_core.types.classExpression(className&&_core.types.identifier(className),path.node.superClass,path.node.body),[newPath]=path.replaceWith(_core.types.sequenceExpression([newClassExpr,varId]));return [_core.types.cloneNode(varId),newPath.get("expressions.0")]}}(path);classIdLocal=classId,(path=classPath).node.decorators=null;for(const classDecorator of classDecorators)scopeParent.isStatic(classDecorator.expression)||(classDecorator.expression=memoiseExpression(classDecorator.expression,"dec"));}else path.node.id||(path.node.id=path.scope.generateUidIdentifier("Class")),classIdLocal=_core.types.cloneNode(path.node.id);let lastInstancePrivateName,needsInstancePrivateBrandCheck=!1;if(hasElementDecorators)for(const element of body){if(!isClassDecoratableElementPath(element))continue;const{node}=element,decorators=element.get("decorators"),hasDecorators=Array.isArray(decorators)&&decorators.length>0;if(hasDecorators)for(const decoratorPath of decorators)scopeParent.isStatic(decoratorPath.node.expression)||(decoratorPath.node.expression=memoiseExpression(decoratorPath.node.expression,"dec"));const isComputed="computed"in element.node&&!0===element.node.computed;isComputed&&(scopeParent.isStatic(node.key)||(node.key=memoiseExpression(node.key,"computedKey")));const kind=getElementKind(element),{key}=node,isPrivate="PrivateName"===key.type,isStatic=!!element.node.static;let name="computedKey";if(isPrivate?name=key.id.name:isComputed||"Identifier"!==key.type||(name=key.name),isPrivate&&!isStatic&&(hasDecorators&&(needsInstancePrivateBrandCheck=!0),!_core.types.isClassPrivateProperty(node)&&lastInstancePrivateName||(lastInstancePrivateName=key)),element.isClassMethod({kind:"constructor"})&&(constructorPath=element),hasDecorators){let locals,privateMethods,nameExpr;if(kind===ACCESSOR){const{value}=element.node,params=[_core.types.thisExpression()];value&&params.push(_core.types.cloneNode(value));const newId=generateClassPrivateUid(),newFieldInitId=element.scope.parent.generateDeclaredUidIdentifier(`init_${name}`),newField=generateClassProperty(newId,_core.types.callExpression(_core.types.cloneNode(newFieldInitId),params),isStatic),[newPath]=element.replaceWith(newField);if(isPrivate){privateMethods=extractProxyAccessorsFor(newId,version);const getId=newPath.scope.parent.generateDeclaredUidIdentifier(`get_${name}`),setId=newPath.scope.parent.generateDeclaredUidIdentifier(`set_${name}`);addCallAccessorsFor(newPath,key,getId,setId),locals=[newFieldInitId,getId,setId];}else addProxyAccessorsFor(newPath,key,newId,isComputed),locals=newFieldInitId;}else if(kind===FIELD){const initId=element.scope.parent.generateDeclaredUidIdentifier(`init_${name}`),valuePath=element.get("value");valuePath.replaceWith(_core.types.callExpression(_core.types.cloneNode(initId),[_core.types.thisExpression(),valuePath.node].filter((v=>v)))),locals=initId,isPrivate&&(privateMethods=extractProxyAccessorsFor(key,version));}else if(isPrivate){locals=element.scope.parent.generateDeclaredUidIdentifier(`call_${name}`);new _helperReplaceSupers.default({constantSuper,methodPath:element,objectRef:classIdLocal,superRef:path.node.superClass,file:state.file,refToPreserve:classIdLocal}).replace();const{params,body,async:isAsync}=element.node;if(privateMethods=[_core.types.functionExpression(void 0,params.filter(isNotTsParameter),body,isAsync)],kind===GETTER||kind===SETTER)movePrivateAccessor(element,_core.types.cloneNode(key),_core.types.cloneNode(locals),isStatic);else {const node=element.node;path.node.body.body.unshift(_core.types.classPrivateProperty(key,_core.types.cloneNode(locals),[],node.static)),decoratedPrivateMethods.add(key.id.name),element.remove();}}nameExpr=isComputed?_core.types.cloneNode(key):"PrivateName"===key.type?_core.types.stringLiteral(key.id.name):"Identifier"===key.type?_core.types.stringLiteral(key.name):_core.types.cloneNode(key),elementDecoratorInfo.push({kind,decorators:decorators.map((d=>d.node.expression)),name:nameExpr,isStatic,privateMethods,locals}),kind!==FIELD&&(isStatic?requiresStaticInit=!0:requiresProtoInit=!0),element.node&&(element.node.decorators=null),firstFieldPath||isStatic||kind!==FIELD&&kind!==ACCESSOR||(firstFieldPath=element);}}const elementDecorations=(info=elementDecoratorInfo,_core.types.arrayExpression(filteredOrderedDecoratorInfo(info).map((el=>{const decs=el.decorators.length>1?_core.types.arrayExpression(el.decorators):el.decorators[0],kind=el.isStatic?el.kind+STATIC:el.kind;return _core.types.arrayExpression([decs,_core.types.numericLiteral(kind),el.name,...el.privateMethods||[]])})))),classDecorations=_core.types.arrayExpression((classDecorators||[]).map((d=>d.expression))),elementLocals=function(decorationInfo){const localIds=[];for(const el of filteredOrderedDecoratorInfo(decorationInfo)){const{locals}=el;Array.isArray(locals)?localIds.push(...locals):void 0!==locals&&localIds.push(locals);}return localIds}(elementDecoratorInfo);var info;if(requiresProtoInit){protoInitLocal=scopeParent.generateDeclaredUidIdentifier("initProto"),elementLocals.push(protoInitLocal);const protoInitCall=_core.types.callExpression(_core.types.cloneNode(protoInitLocal),[_core.types.thisExpression()]);if(firstFieldPath){const value=firstFieldPath.get("value"),body=[protoInitCall];value.node&&body.push(value.node),value.replaceWith(_core.types.sequenceExpression(body));}else if(constructorPath)path.node.superClass?path.traverse({CallExpression:{exit(path){path.get("callee").isSuper()&&(path.replaceWith(_core.types.callExpression(_core.types.cloneNode(protoInitLocal),[path.node])),path.skip());}}}):constructorPath.node.body.body.unshift(_core.types.expressionStatement(protoInitCall));else {const body=[_core.types.expressionStatement(protoInitCall)];path.node.superClass&&body.unshift(_core.types.expressionStatement(_core.types.callExpression(_core.types.super(),[_core.types.spreadElement(_core.types.identifier("args"))]))),path.node.body.body.unshift(_core.types.classMethod("constructor",_core.types.identifier("constructor"),[_core.types.restElement(_core.types.identifier("args"))],_core.types.blockStatement(body)));}}requiresStaticInit&&(staticInitLocal=scopeParent.generateDeclaredUidIdentifier("initStatic"),elementLocals.push(staticInitLocal));decoratedPrivateMethods.size>0&&path.traverse({PrivateName(path){if(!decoratedPrivateMethods.has(path.node.id.name))return;const parentPath=path.parentPath,parentParentPath=parentPath.parentPath;if("AssignmentExpression"===parentParentPath.node.type&&parentParentPath.node.left===parentPath.node||"UpdateExpression"===parentParentPath.node.type||"RestElement"===parentParentPath.node.type||"ArrayPattern"===parentParentPath.node.type||"ObjectProperty"===parentParentPath.node.type&&parentParentPath.node.value===parentPath.node&&"ObjectPattern"===parentParentPath.parentPath.type||"ForOfStatement"===parentParentPath.node.type&&parentParentPath.node.left===parentPath.node)throw path.buildCodeFrameError(`Decorated private methods are not updatable, but "#${path.node.id.name}" is updated via this expression.`)}});const classLocals=[];let classInitInjected=!1;const classInitCall=classInitLocal&&_core.types.callExpression(_core.types.cloneNode(classInitLocal),[]),originalClass=path.node;if(classDecorators){classLocals.push(classIdLocal,classInitLocal);const statics=[];let staticBlocks=[];if(path.get("body.body").forEach((element=>{if(element.isStaticBlock())return staticBlocks.push(element.node),void element.remove();const isProperty=element.isClassProperty()||element.isClassPrivateProperty();if((isProperty||element.isClassPrivateMethod())&&element.node.static){if(isProperty&&staticBlocks.length>0){const allValues=staticBlocks.map(staticBlockToIIFE);element.node.value&&allValues.push(element.node.value),element.node.value=0===(exprs=allValues).length?_core.types.unaryExpression("void",_core.types.numericLiteral(0)):1===exprs.length?exprs[0]:_core.types.sequenceExpression(exprs),staticBlocks=[];}element.node.static=!1,statics.push(element.node),element.remove();}var exprs;})),statics.length>0||staticBlocks.length>0){const staticsClass=_core.template.expression.ast`
        class extends ${state.addHelper("identity")} {}
      `;staticsClass.body.body=[_core.types.staticBlock([_core.types.toStatement(originalClass,!0)||_core.types.expressionStatement(originalClass)]),...statics];const constructorBody=[],newExpr=_core.types.newExpression(staticsClass,[]);staticBlocks.length>0&&constructorBody.push(...staticBlocks.map(staticBlockToIIFE)),classInitCall&&(classInitInjected=!0,constructorBody.push(classInitCall)),constructorBody.length>0?(constructorBody.unshift(_core.types.callExpression(_core.types.super(),[_core.types.cloneNode(classIdLocal)])),staticsClass.body.body.push(_core.types.classMethod("constructor",_core.types.identifier("constructor"),[],_core.types.blockStatement([_core.types.expressionStatement(_core.types.sequenceExpression(constructorBody))])))):newExpr.arguments.push(_core.types.cloneNode(classIdLocal)),path.replaceWith(newExpr);}}!classInitInjected&&classInitCall&&path.node.body.body.push(_core.types.staticBlock([_core.types.expressionStatement(classInitCall)]));return originalClass.body.body.unshift(_core.types.staticBlock([_core.types.expressionStatement(createLocalsAssignment(elementLocals,classLocals,elementDecorations,classDecorations,needsInstancePrivateBrandCheck?lastInstancePrivateName:null,state,version)),requiresStaticInit&&_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(staticInitLocal),[_core.types.thisExpression()]))].filter(Boolean))),path.insertBefore(assignments.map((expr=>_core.types.expressionStatement(expr)))),path.scope.crawl(),path}(path,state,constantSuper,version);newPath&&VISITED.add(newPath);}}}};var _core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_pluginSyntaxDecorators=__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-decorators/lib/index.js"),_helperReplaceSupers=__webpack_require__("./node_modules/.pnpm/@babel+helper-replace-supers@7.20.7/node_modules/@babel/helper-replace-supers/lib/index.js"),_helperSplitExportDeclaration=__webpack_require__("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js");function incrementId(id,idx=id.length-1){if(-1===idx)return void id.unshift(65);const current=id[idx];90===current?id[idx]=97:122===current?(id[idx]=65,incrementId(id,idx-1)):id[idx]=current+1;}function generateClassProperty(key,value,isStatic){return "PrivateName"===key.type?_core.types.classPrivateProperty(key,value,void 0,isStatic):_core.types.classProperty(key,value,void 0,void 0,isStatic)}function addProxyAccessorsFor(element,originalKey,targetKey,isComputed=!1){const{static:isStatic}=element.node,getterBody=_core.types.blockStatement([_core.types.returnStatement(_core.types.memberExpression(_core.types.thisExpression(),_core.types.cloneNode(targetKey)))]),setterBody=_core.types.blockStatement([_core.types.expressionStatement(_core.types.assignmentExpression("=",_core.types.memberExpression(_core.types.thisExpression(),_core.types.cloneNode(targetKey)),_core.types.identifier("v")))]);let getter,setter;"PrivateName"===originalKey.type?(getter=_core.types.classPrivateMethod("get",_core.types.cloneNode(originalKey),[],getterBody,isStatic),setter=_core.types.classPrivateMethod("set",_core.types.cloneNode(originalKey),[_core.types.identifier("v")],setterBody,isStatic)):(getter=_core.types.classMethod("get",_core.types.cloneNode(originalKey),[],getterBody,isComputed,isStatic),setter=_core.types.classMethod("set",_core.types.cloneNode(originalKey),[_core.types.identifier("v")],setterBody,isComputed,isStatic)),element.insertAfter(setter),element.insertAfter(getter);}function extractProxyAccessorsFor(targetKey,version){return "2023-01"!==version?[_core.template.expression.ast`
        function () {
          return this.${_core.types.cloneNode(targetKey)};
        }
      `,_core.template.expression.ast`
        function (value) {
          this.${_core.types.cloneNode(targetKey)} = value;
        }
      `]:[_core.template.expression.ast`
      o => o.${_core.types.cloneNode(targetKey)}
    `,_core.template.expression.ast`
      (o, v) => o.${_core.types.cloneNode(targetKey)} = v
    `]}const FIELD=0,ACCESSOR=1,METHOD=2,GETTER=3,SETTER=4,STATIC=5;function getElementKind(element){switch(element.node.type){case"ClassProperty":case"ClassPrivateProperty":return FIELD;case"ClassAccessorProperty":return ACCESSOR;case"ClassMethod":case"ClassPrivateMethod":return "get"===element.node.kind?GETTER:"set"===element.node.kind?SETTER:METHOD}}function isDecoratorInfo(info){return "decorators"in info}function filteredOrderedDecoratorInfo(info){const filtered=info.filter(isDecoratorInfo);return [...filtered.filter((el=>el.isStatic&&el.kind>=ACCESSOR&&el.kind<=SETTER)),...filtered.filter((el=>!el.isStatic&&el.kind>=ACCESSOR&&el.kind<=SETTER)),...filtered.filter((el=>el.isStatic&&el.kind===FIELD)),...filtered.filter((el=>!el.isStatic&&el.kind===FIELD))]}function addCallAccessorsFor(element,key,getId,setId){element.insertAfter(_core.types.classPrivateMethod("get",_core.types.cloneNode(key),[],_core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.cloneNode(getId),[_core.types.thisExpression()]))]))),element.insertAfter(_core.types.classPrivateMethod("set",_core.types.cloneNode(key),[_core.types.identifier("v")],_core.types.blockStatement([_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(setId),[_core.types.thisExpression(),_core.types.identifier("v")]))])));}function isNotTsParameter(node){return "TSParameterProperty"!==node.type}function movePrivateAccessor(element,key,methodLocalVar,isStatic){let params,block;"set"===element.node.kind?(params=[_core.types.identifier("v")],block=[_core.types.expressionStatement(_core.types.callExpression(methodLocalVar,[_core.types.thisExpression(),_core.types.identifier("v")]))]):(params=[],block=[_core.types.returnStatement(_core.types.callExpression(methodLocalVar,[_core.types.thisExpression()]))]),element.replaceWith(_core.types.classPrivateMethod(element.node.kind,_core.types.cloneNode(key),params,_core.types.blockStatement(block),isStatic));}function isClassDecoratableElementPath(path){const{type}=path;return "TSDeclareMethod"!==type&&"TSIndexSignature"!==type&&"StaticBlock"!==type}function staticBlockToIIFE(block){return _core.types.callExpression(_core.types.arrowFunctionExpression([],_core.types.blockStatement(block.body)),[])}function createLocalsAssignment(elementLocals,classLocals,elementDecorations,classDecorations,maybePrivateBranName,state,version){let lhs,rhs;const args=[_core.types.thisExpression(),elementDecorations,classDecorations];return "2021-12"===version||"2022-03"===version&&!state.availableHelper("applyDecs2203R")?(lhs=_core.types.arrayPattern([...elementLocals,...classLocals]),rhs=_core.types.callExpression(state.addHelper("2021-12"===version?"applyDecs":"applyDecs2203"),args)):("2023-01"===version?(maybePrivateBranName&&args.push(_core.template.expression.ast`
            _ => ${_core.types.cloneNode(maybePrivateBranName)} in _
          `),rhs=_core.types.callExpression(state.addHelper("applyDecs2301"),args)):rhs=_core.types.callExpression(state.addHelper("applyDecs2203R"),args),elementLocals.length>0?classLocals.length>0?lhs=_core.types.objectPattern([_core.types.objectProperty(_core.types.identifier("e"),_core.types.arrayPattern(elementLocals)),_core.types.objectProperty(_core.types.identifier("c"),_core.types.arrayPattern(classLocals))]):(lhs=_core.types.arrayPattern(elementLocals),rhs=_core.types.memberExpression(rhs,_core.types.identifier("e"),!1,!1)):(lhs=_core.types.arrayPattern(classLocals),rhs=_core.types.memberExpression(rhs,_core.types.identifier("c"),!1,!1))),_core.types.assignmentExpression("=",lhs,rhs)}},"./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js");const buildClassDecorator=_core.template.statement("\n  DECORATOR(CLASS_REF = INNER) || CLASS_REF;\n"),buildClassPrototype=(0, _core.template)("\n  CLASS_REF.prototype;\n"),buildGetDescriptor=(0, _core.template)("\n    Object.getOwnPropertyDescriptor(TARGET, PROPERTY);\n"),buildGetObjectInitializer=(0, _core.template)("\n    (TEMP = Object.getOwnPropertyDescriptor(TARGET, PROPERTY), (TEMP = TEMP ? TEMP.value : undefined), {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        initializer: function(){\n            return TEMP;\n        }\n    })\n"),WARNING_CALLS=new WeakSet;function applyEnsureOrdering(path){const identDecorators=(path.isClass()?[path,...path.get("body.body")]:path.get("properties")).reduce(((acc,prop)=>acc.concat(prop.node.decorators||[])),[]).filter((decorator=>!_core.types.isIdentifier(decorator.expression)));if(0!==identDecorators.length)return _core.types.sequenceExpression(identDecorators.map((decorator=>{const expression=decorator.expression,id=decorator.expression=path.scope.generateDeclaredUidIdentifier("dec");return _core.types.assignmentExpression("=",id,expression)})).concat([path.node]))}function hasClassDecorators(classNode){return !(!classNode.decorators||!classNode.decorators.length)}function hasMethodDecorators(body){return body.some((node=>{var _node$decorators;return null==(_node$decorators=node.decorators)?void 0:_node$decorators.length}))}function applyTargetDecorators(path,state,decoratedProps){const name=path.scope.generateDeclaredUidIdentifier(path.isClass()?"class":"obj"),exprs=decoratedProps.reduce((function(acc,node){let decorators=[];if(null!=node.decorators&&(decorators=node.decorators,node.decorators=null),0===decorators.length)return acc;if(node.computed)throw path.buildCodeFrameError("Computed method/property decorators are not yet supported.");const property=_core.types.isLiteral(node.key)?node.key:_core.types.stringLiteral(node.key.name),target=path.isClass()&&!node.static?buildClassPrototype({CLASS_REF:name}).expression:name;if(_core.types.isClassProperty(node,{static:!1})){const descriptor=path.scope.generateDeclaredUidIdentifier("descriptor"),initializer=node.value?_core.types.functionExpression(null,[],_core.types.blockStatement([_core.types.returnStatement(node.value)])):_core.types.nullLiteral();node.value=_core.types.callExpression(state.addHelper("initializerWarningHelper"),[descriptor,_core.types.thisExpression()]),WARNING_CALLS.add(node.value),acc.push(_core.types.assignmentExpression("=",_core.types.cloneNode(descriptor),_core.types.callExpression(state.addHelper("applyDecoratedDescriptor"),[_core.types.cloneNode(target),_core.types.cloneNode(property),_core.types.arrayExpression(decorators.map((dec=>_core.types.cloneNode(dec.expression)))),_core.types.objectExpression([_core.types.objectProperty(_core.types.identifier("configurable"),_core.types.booleanLiteral(!0)),_core.types.objectProperty(_core.types.identifier("enumerable"),_core.types.booleanLiteral(!0)),_core.types.objectProperty(_core.types.identifier("writable"),_core.types.booleanLiteral(!0)),_core.types.objectProperty(_core.types.identifier("initializer"),initializer)])])));}else acc.push(_core.types.callExpression(state.addHelper("applyDecoratedDescriptor"),[_core.types.cloneNode(target),_core.types.cloneNode(property),_core.types.arrayExpression(decorators.map((dec=>_core.types.cloneNode(dec.expression)))),_core.types.isObjectProperty(node)||_core.types.isClassProperty(node,{static:!0})?buildGetObjectInitializer({TEMP:path.scope.generateDeclaredUidIdentifier("init"),TARGET:_core.types.cloneNode(target),PROPERTY:_core.types.cloneNode(property)}).expression:buildGetDescriptor({TARGET:_core.types.cloneNode(target),PROPERTY:_core.types.cloneNode(property)}).expression,_core.types.cloneNode(target)]));return acc}),[]);return _core.types.sequenceExpression([_core.types.assignmentExpression("=",_core.types.cloneNode(name),path.node),_core.types.sequenceExpression(exprs),_core.types.cloneNode(name)])}function decoratedClassToExpression({node,scope}){if(!hasClassDecorators(node)&&!hasMethodDecorators(node.body.body))return;const ref=node.id?_core.types.cloneNode(node.id):scope.generateUidIdentifier("class");return _core.types.variableDeclaration("let",[_core.types.variableDeclarator(ref,_core.types.toExpression(node))])}var _default={ExportDefaultDeclaration(path){const decl=path.get("declaration");if(!decl.isClassDeclaration())return;const replacement=decoratedClassToExpression(decl);if(replacement){const[varDeclPath]=path.replaceWithMultiple([replacement,_core.types.exportNamedDeclaration(null,[_core.types.exportSpecifier(_core.types.cloneNode(replacement.declarations[0].id),_core.types.identifier("default"))])]);decl.node.id||path.scope.registerDeclaration(varDeclPath);}},ClassDeclaration(path){const replacement=decoratedClassToExpression(path);if(replacement){const[newPath]=path.replaceWith(replacement),decl=newPath.get("declarations.0"),id=decl.node.id,binding=path.scope.getOwnBinding(id.name);binding.identifier=id,binding.path=decl;}},ClassExpression(path,state){const decoratedClass=applyEnsureOrdering(path)||function(classPath){if(!hasClassDecorators(classPath.node))return;const decorators=classPath.node.decorators||[];classPath.node.decorators=null;const name=classPath.scope.generateDeclaredUidIdentifier("class");return decorators.map((dec=>dec.expression)).reverse().reduce((function(acc,decorator){return buildClassDecorator({CLASS_REF:_core.types.cloneNode(name),DECORATOR:_core.types.cloneNode(decorator),INNER:acc}).expression}),classPath.node)}(path)||function(path,state){if(hasMethodDecorators(path.node.body.body))return applyTargetDecorators(path,state,path.node.body.body)}(path,state);decoratedClass&&path.replaceWith(decoratedClass);},ObjectExpression(path,state){const decoratedObject=applyEnsureOrdering(path)||function(path,state){if(hasMethodDecorators(path.node.properties))return applyTargetDecorators(path,state,path.node.properties.filter((prop=>"SpreadElement"!==prop.type)))}(path,state);decoratedObject&&path.replaceWith(decoratedObject);},AssignmentExpression(path,state){WARNING_CALLS.has(path.node.right)&&path.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"),[_core.types.cloneNode(path.get("left.object").node),_core.types.stringLiteral(path.get("left.property").node.name||path.get("left.property").node.value),_core.types.cloneNode(path.get("right.arguments")[0].node),_core.types.cloneNode(path.get("right.arguments")[1].node)]));},CallExpression(path,state){3===path.node.arguments.length&&WARNING_CALLS.has(path.node.arguments[2])&&path.node.callee.name===state.addHelper("defineProperty").name&&path.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"),[_core.types.cloneNode(path.get("arguments")[0].node),_core.types.cloneNode(path.get("arguments")[1].node),_core.types.cloneNode(path.get("arguments.2.arguments")[0].node),_core.types.cloneNode(path.get("arguments.2.arguments")[1].node)]));}};exports.default=_default;},"./node_modules/.pnpm/@babel+plugin-proposal-export-namespace-from@7.18.9_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-export-namespace-from/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _helperPluginUtils=__webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"),_pluginSyntaxExportNamespaceFrom=__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-export-namespace-from@7.8.3_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-export-namespace-from/lib/index.js"),_core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_default=(0, _helperPluginUtils.declare)((api=>(api.assertVersion(7),{name:"proposal-export-namespace-from",inherits:_pluginSyntaxExportNamespaceFrom.default,visitor:{ExportNamedDeclaration(path){var _exported$name;const{node,scope}=path,{specifiers}=node,index=_core.types.isExportDefaultSpecifier(specifiers[0])?1:0;if(!_core.types.isExportNamespaceSpecifier(specifiers[index]))return;const nodes=[];1===index&&nodes.push(_core.types.exportNamedDeclaration(null,[specifiers.shift()],node.source));const specifier=specifiers.shift(),{exported}=specifier,uid=scope.generateUidIdentifier(null!=(_exported$name=exported.name)?_exported$name:exported.value);nodes.push(_core.types.importDeclaration([_core.types.importNamespaceSpecifier(uid)],_core.types.cloneNode(node.source)),_core.types.exportNamedDeclaration(null,[_core.types.exportSpecifier(_core.types.cloneNode(uid),exported)])),node.specifiers.length>=1&&nodes.push(node);const[importDeclaration]=path.replaceWithMultiple(nodes);path.scope.registerDeclaration(importDeclaration);}}})));exports.default=_default;},"./node_modules/.pnpm/@babel+plugin-proposal-nullish-coalescing-operator@7.18.6_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-nullish-coalescing-operator/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _helperPluginUtils=__webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"),_pluginSyntaxNullishCoalescingOperator=__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-nullish-coalescing-operator@7.8.3_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-nullish-coalescing-operator/lib/index.js"),_core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_default=(0, _helperPluginUtils.declare)(((api,{loose=!1})=>{var _api$assumption;api.assertVersion(7);const noDocumentAll=null!=(_api$assumption=api.assumption("noDocumentAll"))?_api$assumption:loose;return {name:"proposal-nullish-coalescing-operator",inherits:_pluginSyntaxNullishCoalescingOperator.default,visitor:{LogicalExpression(path){const{node,scope}=path;if("??"!==node.operator)return;let ref,assignment;if(scope.isStatic(node.left))ref=node.left,assignment=_core.types.cloneNode(node.left);else {if(scope.path.isPattern())return void path.replaceWith(_core.template.statement.ast`(() => ${path.node})()`);ref=scope.generateUidIdentifierBasedOnNode(node.left),scope.push({id:_core.types.cloneNode(ref)}),assignment=_core.types.assignmentExpression("=",ref,node.left);}path.replaceWith(_core.types.conditionalExpression(noDocumentAll?_core.types.binaryExpression("!=",assignment,_core.types.nullLiteral()):_core.types.logicalExpression("&&",_core.types.binaryExpression("!==",assignment,_core.types.nullLiteral()),_core.types.binaryExpression("!==",_core.types.cloneNode(ref),scope.buildUndefinedNode())),_core.types.cloneNode(ref),node.right));}}}}));exports.default=_default;},"./node_modules/.pnpm/@babel+plugin-proposal-optional-chaining@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-optional-chaining/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0});var helperPluginUtils=__webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"),syntaxOptionalChaining=__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-optional-chaining@7.8.3_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-optional-chaining/lib/index.js"),core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),helperSkipTransparentExpressionWrappers=__webpack_require__("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.20.0/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js");function willPathCastToBoolean(path){const maybeWrapped=findOutermostTransparentParent(path),{node,parentPath}=maybeWrapped;if(parentPath.isLogicalExpression()){const{operator,right}=parentPath.node;if("&&"===operator||"||"===operator||"??"===operator&&node===right)return willPathCastToBoolean(parentPath)}if(parentPath.isSequenceExpression()){const{expressions}=parentPath.node;return expressions[expressions.length-1]!==node||willPathCastToBoolean(parentPath)}return parentPath.isConditional({test:node})||parentPath.isUnaryExpression({operator:"!"})||parentPath.isLoop({test:node})}function findOutermostTransparentParent(path){let maybeWrapped=path;return path.findParent((p=>{if(!helperSkipTransparentExpressionWrappers.isTransparentExprWrapper(p.node))return !0;maybeWrapped=p;})),maybeWrapped}const{ast}=core.template.expression;function isSimpleMemberExpression(expression){return expression=helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(expression),core.types.isIdentifier(expression)||core.types.isSuper(expression)||core.types.isMemberExpression(expression)&&!expression.computed&&isSimpleMemberExpression(expression.object)}function transform(path,{pureGetters,noDocumentAll}){const{scope}=path,maybeWrapped=findOutermostTransparentParent(path),{parentPath}=maybeWrapped,willReplacementCastToBoolean=willPathCastToBoolean(maybeWrapped);let isDeleteOperation=!1;const parentIsCall=parentPath.isCallExpression({callee:maybeWrapped.node})&&path.isOptionalMemberExpression(),optionals=[];let optionalPath=path;if(scope.path.isPattern()&&function(path){let optionalPath=path;const{scope}=path;for(;optionalPath.isOptionalMemberExpression()||optionalPath.isOptionalCallExpression();){const{node}=optionalPath,childPath=helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.isOptionalMemberExpression()?optionalPath.get("object"):optionalPath.get("callee"));if(node.optional)return !scope.isStatic(childPath.node);optionalPath=childPath;}}(optionalPath))return void path.replaceWith(core.template.ast`(() => ${path.node})()`);for(;optionalPath.isOptionalMemberExpression()||optionalPath.isOptionalCallExpression();){const{node}=optionalPath;node.optional&&optionals.push(node),optionalPath.isOptionalMemberExpression()?(optionalPath.node.type="MemberExpression",optionalPath=helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("object"))):optionalPath.isOptionalCallExpression()&&(optionalPath.node.type="CallExpression",optionalPath=helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("callee")));}let replacementPath=path;parentPath.isUnaryExpression({operator:"delete"})&&(replacementPath=parentPath,isDeleteOperation=!0);for(let i=optionals.length-1;i>=0;i--){const node=optionals[i],isCall=core.types.isCallExpression(node),chainWithTypes=isCall?node.callee:node.object,chain=helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(chainWithTypes);let ref,check;if(isCall&&core.types.isIdentifier(chain,{name:"eval"})?(check=ref=chain,node.callee=core.types.sequenceExpression([core.types.numericLiteral(0),ref])):pureGetters&&isCall&&isSimpleMemberExpression(chain)?check=ref=node.callee:(ref=scope.maybeGenerateMemoised(chain),ref?(check=core.types.assignmentExpression("=",core.types.cloneNode(ref),chainWithTypes),isCall?node.callee=ref:node.object=ref):check=ref=chainWithTypes),isCall&&core.types.isMemberExpression(chain))if(pureGetters&&isSimpleMemberExpression(chain))node.callee=chainWithTypes;else {const{object}=chain;let context;if(core.types.isSuper(object))context=core.types.thisExpression();else {const memoized=scope.maybeGenerateMemoised(object);memoized?(context=memoized,chain.object=core.types.assignmentExpression("=",memoized,object)):context=object;}node.arguments.unshift(core.types.cloneNode(context)),node.callee=core.types.memberExpression(node.callee,core.types.identifier("call"));}let replacement=replacementPath.node;if(0===i&&parentIsCall){var _baseRef;const object=helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(replacement.object);let baseRef;pureGetters&&isSimpleMemberExpression(object)||(baseRef=scope.maybeGenerateMemoised(object),baseRef&&(replacement.object=core.types.assignmentExpression("=",baseRef,object))),replacement=core.types.callExpression(core.types.memberExpression(replacement,core.types.identifier("bind")),[core.types.cloneNode(null!=(_baseRef=baseRef)?_baseRef:object)]);}if(willReplacementCastToBoolean){const nonNullishCheck=noDocumentAll?ast`${core.types.cloneNode(check)} != null`:ast`
            ${core.types.cloneNode(check)} !== null && ${core.types.cloneNode(ref)} !== void 0`;replacementPath.replaceWith(core.types.logicalExpression("&&",nonNullishCheck,replacement)),replacementPath=helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(replacementPath.get("right"));}else {const nullishCheck=noDocumentAll?ast`${core.types.cloneNode(check)} == null`:ast`
            ${core.types.cloneNode(check)} === null || ${core.types.cloneNode(ref)} === void 0`,returnValue=isDeleteOperation?ast`true`:ast`void 0`;replacementPath.replaceWith(core.types.conditionalExpression(nullishCheck,returnValue,replacement)),replacementPath=helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(replacementPath.get("alternate"));}}}var index=helperPluginUtils.declare(((api,options)=>{var _api$assumption,_api$assumption2;api.assertVersion(7);const{loose=!1}=options,noDocumentAll=null!=(_api$assumption=api.assumption("noDocumentAll"))?_api$assumption:loose,pureGetters=null!=(_api$assumption2=api.assumption("pureGetters"))?_api$assumption2:loose;return {name:"proposal-optional-chaining",inherits:syntaxOptionalChaining.default,visitor:{"OptionalCallExpression|OptionalMemberExpression"(path){transform(path,{noDocumentAll,pureGetters});}}}}));exports.default=index,exports.transform=transform;},"./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-decorators/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=(0, __webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)(((api,options)=>{api.assertVersion(7);let{version}=options;{const{legacy}=options;if(void 0!==legacy){if("boolean"!=typeof legacy)throw new Error(".legacy must be a boolean.");if(void 0!==version)throw new Error("You can either use the .legacy or the .version option, not both.")}if(void 0===version)version=legacy?"legacy":"2018-09";else if("2023-01"!==version&&"2022-03"!==version&&"2021-12"!==version&&"2018-09"!==version&&"legacy"!==version)throw new Error("Unsupported decorators version: "+version);var{decoratorsBeforeExport}=options;if(void 0===decoratorsBeforeExport){if("2021-12"===version||"2022-03"===version)decoratorsBeforeExport=!1;else if("2018-09"===version)throw new Error("The decorators plugin, when .version is '2018-09' or not specified, requires a 'decoratorsBeforeExport' option, whose value must be a boolean.")}else {if("legacy"===version||"2022-03"===version||"2023-01"===version)throw new Error(`'decoratorsBeforeExport' can't be used with ${version} decorators.`);if("boolean"!=typeof decoratorsBeforeExport)throw new Error("'decoratorsBeforeExport' must be a boolean.")}}return {name:"syntax-decorators",manipulateOptions({generatorOpts},parserOpts){"legacy"===version?parserOpts.plugins.push("decorators-legacy"):"2023-01"===version?parserOpts.plugins.push(["decorators",{allowCallParenthesized:!1}],"decoratorAutoAccessors"):"2022-03"===version?parserOpts.plugins.push(["decorators",{decoratorsBeforeExport:!1,allowCallParenthesized:!1}],"decoratorAutoAccessors"):"2021-12"===version?(parserOpts.plugins.push(["decorators",{decoratorsBeforeExport}],"decoratorAutoAccessors"),generatorOpts.decoratorsBeforeExport=decoratorsBeforeExport):"2018-09"===version&&(parserOpts.plugins.push(["decorators",{decoratorsBeforeExport}]),generatorOpts.decoratorsBeforeExport=decoratorsBeforeExport);}}}));exports.default=_default;},"./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.20.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=(0, __webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api=>(api.assertVersion(7),{name:"syntax-import-assertions",manipulateOptions(opts,parserOpts){parserOpts.plugins.push("importAssertions");}})));exports.default=_default;},"./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.20.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-typescript/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{function removePlugin(plugins,name){const indices=[];plugins.forEach(((plugin,i)=>{(Array.isArray(plugin)?plugin[0]:plugin)===name&&indices.unshift(i);}));for(const i of indices)plugins.splice(i,1);}Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=(0, __webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)(((api,{disallowAmbiguousJSXLike,dts,isTSX})=>(api.assertVersion(7),{name:"syntax-typescript",manipulateOptions(opts,parserOpts){const{plugins}=parserOpts;removePlugin(plugins,"flow"),removePlugin(plugins,"jsx"),plugins.push(["typescript",{disallowAmbiguousJSXLike,dts}],"classProperties"),plugins.push("objectRestSpread"),isTSX&&plugins.push("jsx");}})));exports.default=_default;},"./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.21.2_@babel+core@7.21.3/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.transformDynamicImport=function(path,noInterop,file){const buildRequire=noInterop?requireNoInterop:requireInterop;path.replaceWith((0, _helperModuleTransforms.buildDynamicImport)(path.node,!0,!1,(specifier=>buildRequire(specifier,file))));};var _core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_helperModuleTransforms=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/index.js");const requireNoInterop=source=>_core.template.expression.ast`require(${source})`,requireInterop=(source,file)=>_core.types.callExpression(file.addHelper("interopRequireWildcard"),[requireNoInterop(source)]);},"./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.21.2_@babel+core@7.21.3/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _helperPluginUtils=__webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"),_helperModuleTransforms=__webpack_require__("./node_modules/.pnpm/@babel+helper-module-transforms@7.21.2/node_modules/@babel/helper-module-transforms/lib/index.js"),_helperSimpleAccess=__webpack_require__("./node_modules/.pnpm/@babel+helper-simple-access@7.20.2/node_modules/@babel/helper-simple-access/lib/index.js"),_core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_dynamicImport=__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.21.2_@babel+core@7.21.3/node_modules/@babel/plugin-transform-modules-commonjs/lib/dynamic-import.js"),_default=(0, _helperPluginUtils.declare)(((api,options)=>{var _api$assumption,_api$assumption2,_api$assumption3;api.assertVersion(7);const{strictNamespace=!1,mjsStrictNamespace=strictNamespace,allowTopLevelThis,strict,strictMode,noInterop,importInterop,lazy=!1,allowCommonJSExports=!0,loose=!1}=options,constantReexports=null!=(_api$assumption=api.assumption("constantReexports"))?_api$assumption:loose,enumerableModuleMeta=null!=(_api$assumption2=api.assumption("enumerableModuleMeta"))?_api$assumption2:loose,noIncompleteNsImportDetection=null!=(_api$assumption3=api.assumption("noIncompleteNsImportDetection"))&&_api$assumption3;if(!("boolean"==typeof lazy||"function"==typeof lazy||Array.isArray(lazy)&&lazy.every((item=>"string"==typeof item))))throw new Error(".lazy must be a boolean, array of strings, or a function");if("boolean"!=typeof strictNamespace)throw new Error(".strictNamespace must be a boolean, or undefined");if("boolean"!=typeof mjsStrictNamespace)throw new Error(".mjsStrictNamespace must be a boolean, or undefined");const getAssertion=localName=>_core.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `,moduleExportsVisitor={ReferencedIdentifier(path){const localName=path.node.name;if("module"!==localName&&"exports"!==localName)return;const localBinding=path.scope.getBinding(localName);this.scope.getBinding(localName)!==localBinding||path.parentPath.isObjectProperty({value:path.node})&&path.parentPath.parentPath.isObjectPattern()||path.parentPath.isAssignmentExpression({left:path.node})||path.isAssignmentExpression({left:path.node})||path.replaceWith(getAssertion(localName));},UpdateExpression(path){const arg=path.get("argument");if(!arg.isIdentifier())return;const localName=arg.node.name;if("module"!==localName&&"exports"!==localName)return;const localBinding=path.scope.getBinding(localName);this.scope.getBinding(localName)===localBinding&&path.replaceWith(_core.types.assignmentExpression(path.node.operator[0]+"=",arg.node,getAssertion(localName)));},AssignmentExpression(path){const left=path.get("left");if(left.isIdentifier()){const localName=left.node.name;if("module"!==localName&&"exports"!==localName)return;const localBinding=path.scope.getBinding(localName);if(this.scope.getBinding(localName)!==localBinding)return;const right=path.get("right");right.replaceWith(_core.types.sequenceExpression([right.node,getAssertion(localName)]));}else if(left.isPattern()){const ids=left.getOuterBindingIdentifiers(),localName=Object.keys(ids).filter((localName=>("module"===localName||"exports"===localName)&&this.scope.getBinding(localName)===path.scope.getBinding(localName)))[0];if(localName){const right=path.get("right");right.replaceWith(_core.types.sequenceExpression([right.node,getAssertion(localName)]));}}}};return {name:"transform-modules-commonjs",pre(){this.file.set("@babel/plugin-transform-modules-*","commonjs");},visitor:{CallExpression(path){if(!this.file.has("@babel/plugin-proposal-dynamic-import"))return;if(!_core.types.isImport(path.node.callee))return;let{scope}=path;do{scope.rename("require");}while(scope=scope.parent);(0, _dynamicImport.transformDynamicImport)(path,noInterop,this.file);},Program:{exit(path,state){if(!(0, _helperModuleTransforms.isModule)(path))return;path.scope.rename("exports"),path.scope.rename("module"),path.scope.rename("require"),path.scope.rename("__filename"),path.scope.rename("__dirname"),allowCommonJSExports||((0, _helperSimpleAccess.default)(path,new Set(["module","exports"]),!1),path.traverse(moduleExportsVisitor,{scope:path.scope}));let moduleName=(0, _helperModuleTransforms.getModuleName)(this.file.opts,options);moduleName&&(moduleName=_core.types.stringLiteral(moduleName));const{meta,headers}=(0, _helperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path,{exportName:"exports",constantReexports,enumerableModuleMeta,strict,strictMode,allowTopLevelThis,noInterop,importInterop,lazy,esNamespaceOnly:"string"==typeof state.filename&&/\.mjs$/.test(state.filename)?mjsStrictNamespace:strictNamespace,noIncompleteNsImportDetection,filename:this.file.opts.filename});for(const[source,metadata]of meta.source){const loadExpr=_core.types.callExpression(_core.types.identifier("require"),[_core.types.stringLiteral(source)]);let header;if((0, _helperModuleTransforms.isSideEffectImport)(metadata)){if(metadata.lazy)throw new Error("Assertion failure");header=_core.types.expressionStatement(loadExpr);}else {if(metadata.lazy&&!metadata.referenced)continue;const init=(0, _helperModuleTransforms.wrapInterop)(path,loadExpr,metadata.interop)||loadExpr;header=metadata.lazy?_core.template.statement.ast`
                  function ${metadata.name}() {
                    const data = ${init};
                    ${metadata.name} = function(){ return data; };
                    return data;
                  }
                `:_core.template.statement.ast`
                  var ${metadata.name} = ${init};
                `;}header.loc=metadata.loc,headers.push(header),headers.push(...(0, _helperModuleTransforms.buildNamespaceInitStatements)(meta,metadata,constantReexports));}(0, _helperModuleTransforms.ensureStatementsHoisted)(headers),path.unshiftContainer("body",headers),path.get("body").forEach((path=>{-1!==headers.indexOf(path.node)&&path.isVariableDeclaration()&&path.scope.registerDeclaration(path);}));}}}}}));exports.default=_default;},"./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(path,t){const{name}=path.node.id,parentIsExport=path.parentPath.isExportNamedDeclaration();let isExported=parentIsExport;!isExported&&t.isProgram(path.parent)&&(isExported=path.parent.body.some((stmt=>t.isExportNamedDeclaration(stmt)&&"type"!==stmt.exportKind&&!stmt.source&&stmt.specifiers.some((spec=>t.isExportSpecifier(spec)&&"type"!==spec.exportKind&&spec.local.name===name)))));const{enumValues:entries}=(0, _enum.translateEnumValues)(path,t);if(isExported){const obj=t.objectExpression(entries.map((([name,value])=>t.objectProperty(t.isValidIdentifier(name)?t.identifier(name):t.stringLiteral(name),value))));return void(path.scope.hasOwnBinding(name)?(parentIsExport?path.parentPath:path).replaceWith(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("Object"),t.identifier("assign")),[path.node.id,obj]))):(path.replaceWith(t.variableDeclaration("var",[t.variableDeclarator(path.node.id,obj)])),path.scope.registerDeclaration(path)))}const entriesMap=new Map(entries);path.scope.path.traverse({Scope(path){path.scope.hasOwnBinding(name)&&path.skip();},MemberExpression(path){if(!t.isIdentifier(path.node.object,{name}))return;let key;if(path.node.computed){if(!t.isStringLiteral(path.node.property))return;key=path.node.property.value;}else {if(!t.isIdentifier(path.node.property))return;key=path.node.property.name;}entriesMap.has(key)&&path.replaceWith(t.cloneNode(entriesMap.get(key)));}}),path.remove();};var _enum=__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/enum.js");},"./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/enum.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(path,t){const{node,parentPath}=path;if(node.declare)return void path.remove();const name=node.id.name,{fill,data,isPure}=function(path,t,id){const{enumValues:x,data,isPure}=translateEnumValues(path,t),assignments=x.map((([memberName,memberValue])=>buildEnumMember(t.isStringLiteral(memberValue),{ENUM:t.cloneNode(id),NAME:memberName,VALUE:memberValue})));return {fill:{ID:t.cloneNode(id),ASSIGNMENTS:assignments},data,isPure}}(path,t,node.id);switch(parentPath.type){case"BlockStatement":case"ExportNamedDeclaration":case"Program":{const isGlobal=t.isProgram(path.parent),isSeen=function seen(parentPath){if(parentPath.isExportDeclaration())return seen(parentPath.parentPath);return !!parentPath.getData(name)||(parentPath.setData(name,!0),!1)}(parentPath);let init=t.objectExpression([]);(isSeen||isGlobal)&&(init=t.logicalExpression("||",t.cloneNode(fill.ID),init));const enumIIFE=buildEnumWrapper(Object.assign({},fill,{INIT:init}));if(isPure&&(0, _helperAnnotateAsPure.default)(enumIIFE),isSeen){(parentPath.isExportDeclaration()?parentPath:path).replaceWith(t.expressionStatement(t.assignmentExpression("=",t.cloneNode(node.id),enumIIFE)));}else path.scope.registerDeclaration(path.replaceWith(t.variableDeclaration(isGlobal?"var":"let",[t.variableDeclarator(node.id,enumIIFE)]))[0]);ENUMS.set(path.scope.getBindingIdentifier(name),data);break}default:throw new Error(`Unexpected enum parent '${path.parent.type}`)}},exports.translateEnumValues=translateEnumValues;var _core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),_assert=__webpack_require__("assert"),_helperAnnotateAsPure=__webpack_require__("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.18.6/node_modules/@babel/helper-annotate-as-pure/lib/index.js");const ENUMS=new WeakMap,buildEnumWrapper=_core.template.expression("\n    (function (ID) {\n      ASSIGNMENTS;\n      return ID;\n    })(INIT)\n  ");const buildStringAssignment=(0, _core.template)('\n  ENUM["NAME"] = VALUE;\n'),buildNumericAssignment=(0, _core.template)('\n  ENUM[ENUM["NAME"] = VALUE] = "NAME";\n'),buildEnumMember=(isString,options)=>(isString?buildStringAssignment:buildNumericAssignment)(options);function ReferencedIdentifier(expr,state){const{seen,path,t}=state,name=expr.node.name;seen.has(name)&&!expr.scope.hasOwnBinding(name)&&(expr.replaceWith(t.memberExpression(t.cloneNode(path.node.id),t.cloneNode(expr.node))),expr.skip());}const enumSelfReferenceVisitor={ReferencedIdentifier};function translateEnumValues(path,t){const seen=new Map;let lastName,constValue=-1,isPure=!0;const enumValues=path.get("members").map((memberPath=>{const member=memberPath.node,name=t.isIdentifier(member.id)?member.id.name:member.id.value,initializerPath=memberPath.get("initializer");let value;if(member.initializer)constValue=computeConstantValue(initializerPath,seen),void 0!==constValue?(seen.set(name,constValue),"number"==typeof constValue?value=t.numericLiteral(constValue):(_assert("string"==typeof constValue),value=t.stringLiteral(constValue))):(isPure&&(isPure=initializerPath.isPure()),initializerPath.isReferencedIdentifier()?ReferencedIdentifier(initializerPath,{t,seen,path}):initializerPath.traverse(enumSelfReferenceVisitor,{t,seen,path}),value=initializerPath.node,seen.set(name,void 0));else if("number"==typeof constValue)constValue+=1,value=t.numericLiteral(constValue),seen.set(name,constValue);else {if("string"==typeof constValue)throw path.buildCodeFrameError("Enum member must have initializer.");{const lastRef=t.memberExpression(t.cloneNode(path.node.id),t.stringLiteral(lastName),!0);value=t.binaryExpression("+",t.numericLiteral(1),lastRef),seen.set(name,void 0);}}return lastName=name,[name,value]}));return {isPure,data:seen,enumValues}}function computeConstantValue(path,prevMembers,seen=new Set){return evaluate(path);function evaluate(path){const expr=path.node;switch(expr.type){case"MemberExpression":case"Identifier":return evaluateRef(path,prevMembers,seen);case"StringLiteral":case"NumericLiteral":return expr.value;case"UnaryExpression":return function(path){const value=evaluate(path.get("argument"));if(void 0===value)return;switch(path.node.operator){case"+":return value;case"-":return -value;case"~":return ~value;default:return}}(path);case"BinaryExpression":return function(path){const left=evaluate(path.get("left"));if(void 0===left)return;const right=evaluate(path.get("right"));if(void 0===right)return;switch(path.node.operator){case"|":return left|right;case"&":return left&right;case">>":return left>>right;case">>>":return left>>>right;case"<<":return left<<right;case"^":return left^right;case"*":return left*right;case"/":return left/right;case"+":return left+right;case"-":return left-right;case"%":return left%right;case"**":return Math.pow(left,right);default:return}}(path);case"ParenthesizedExpression":return evaluate(path.get("expression"));case"TemplateLiteral":{if(1===expr.quasis.length)return expr.quasis[0].value.cooked;const paths=path.get("expressions"),quasis=expr.quasis;let str="";for(let i=0;i<quasis.length;i++)if(str+=quasis[i].value.cooked,i+1<quasis.length){const value=evaluateRef(paths[i],prevMembers,seen);if(void 0===value)return;str+=value;}return str}default:return}}function evaluateRef(path,prevMembers,seen){if(path.isMemberExpression()){const expr=path.node,obj=expr.object,prop=expr.property;if(!_core.types.isIdentifier(obj)||(expr.computed?!_core.types.isStringLiteral(prop):!_core.types.isIdentifier(prop)))return;const bindingIdentifier=path.scope.getBindingIdentifier(obj.name),data=ENUMS.get(bindingIdentifier);if(!data)return;return data.get(prop.computed?prop.value:prop.name)}if(path.isIdentifier()){const name=path.node.name;let value=null==prevMembers?void 0:prevMembers.get(name);if(void 0!==value)return value;if(seen.has(path.node))return;const bindingInitPath=path.resolve();if(bindingInitPath)return seen.add(path.node),value=computeConstantValue(bindingInitPath,void 0,seen),null==prevMembers||prevMembers.set(name,value),value}}}},"./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _helperPluginUtils=__webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"),_pluginSyntaxTypescript=__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.20.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-typescript/lib/index.js"),_helperCreateClassFeaturesPlugin=__webpack_require__("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.21.0_@babel+core@7.21.3/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"),_constEnum=__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js"),_enum=__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/enum.js"),_namespace=__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/namespace.js");function isInType(path){switch(path.parent.type){case"TSTypeReference":case"TSExpressionWithTypeArguments":case"TSTypeQuery":return !0;case"TSQualifiedName":return "TSImportEqualsDeclaration"!==path.parentPath.findParent((path=>"TSQualifiedName"!==path.type)).type;case"ExportSpecifier":return "type"===path.parent.exportKind||"type"===path.parentPath.parent.exportKind;default:return !1}}const GLOBAL_TYPES=new WeakMap,NEEDS_EXPLICIT_ESM=new WeakMap,PARSED_PARAMS=new WeakSet;function isGlobalType({scope},name){return !scope.hasBinding(name)&&(!!GLOBAL_TYPES.get(scope).has(name)||(console.warn(`The exported identifier "${name}" is not declared in Babel's scope tracker\nas a JavaScript value binding, and "@babel/plugin-transform-typescript"\nnever encountered it as a TypeScript type declaration.\nIt will be treated as a JavaScript value.\n\nThis problem is likely caused by another plugin injecting\n"${name}" without registering it in the scope tracker. If you are the author\n of that plugin, please use "scope.registerDeclaration(declarationPath)".`),!1))}function registerGlobalType(programScope,name){GLOBAL_TYPES.get(programScope).add(name);}function safeRemove(path){const ids=path.getBindingIdentifiers();for(const name of Object.keys(ids)){const binding=path.scope.getBinding(name);binding&&binding.identifier===ids[name]&&binding.scope.removeBinding(name);}path.opts.noScope=!0,path.remove(),path.opts.noScope=!1;}var _default=(0, _helperPluginUtils.declare)(((api,opts)=>{const{types:t,template}=api;api.assertVersion(7);const JSX_PRAGMA_REGEX=/\*?\s*@jsx((?:Frag)?)\s+([^\s]+)/,{allowNamespaces=!0,jsxPragma="React.createElement",jsxPragmaFrag="React.Fragment",onlyRemoveTypeImports=!1,optimizeConstEnums=!1}=opts;var{allowDeclareFields=!1}=opts;const classMemberVisitors={field(path){const{node}=path;if(!allowDeclareFields&&node.declare)throw path.buildCodeFrameError("The 'declare' modifier is only allowed when the 'allowDeclareFields' option of @babel/plugin-transform-typescript or @babel/preset-typescript is enabled.");if(node.declare){if(node.value)throw path.buildCodeFrameError("Fields with the 'declare' modifier cannot be initialized here, but only in the constructor");node.decorators||path.remove();}else if(node.definite){if(node.value)throw path.buildCodeFrameError("Definitely assigned fields cannot be initialized here, but only in the constructor");allowDeclareFields||node.decorators||t.isClassPrivateProperty(node)||path.remove();}else node.abstract?path.remove():allowDeclareFields||node.value||node.decorators||t.isClassPrivateProperty(node)||path.remove();node.accessibility&&(node.accessibility=null),node.abstract&&(node.abstract=null),node.readonly&&(node.readonly=null),node.optional&&(node.optional=null),node.typeAnnotation&&(node.typeAnnotation=null),node.definite&&(node.definite=null),node.declare&&(node.declare=null),node.override&&(node.override=null);},method({node}){node.accessibility&&(node.accessibility=null),node.abstract&&(node.abstract=null),node.optional&&(node.optional=null),node.override&&(node.override=null);},constructor(path,classPath){path.node.accessibility&&(path.node.accessibility=null);const assigns=[],{scope}=path;for(const paramPath of path.get("params")){const param=paramPath.node;if("TSParameterProperty"===param.type){const parameter=param.parameter;if(PARSED_PARAMS.has(parameter))continue;let id;if(PARSED_PARAMS.add(parameter),t.isIdentifier(parameter))id=parameter;else {if(!t.isAssignmentPattern(parameter)||!t.isIdentifier(parameter.left))throw paramPath.buildCodeFrameError("Parameter properties can not be destructuring patterns.");id=parameter.left;}assigns.push(template.statement.ast`
          this.${t.cloneNode(id)} = ${t.cloneNode(id)}`),paramPath.replaceWith(paramPath.get("parameter")),scope.registerBinding("param",paramPath);}}(0, _helperCreateClassFeaturesPlugin.injectInitialization)(classPath,path,assigns);}};return {name:"transform-typescript",inherits:_pluginSyntaxTypescript.default,visitor:{Pattern:visitPattern,Identifier:visitPattern,RestElement:visitPattern,Program:{enter(path,state){const{file}=state;let fileJsxPragma=null,fileJsxPragmaFrag=null;const programScope=path.scope;if(GLOBAL_TYPES.has(programScope)||GLOBAL_TYPES.set(programScope,new Set),file.ast.comments)for(const comment of file.ast.comments){const jsxMatches=JSX_PRAGMA_REGEX.exec(comment.value);jsxMatches&&(jsxMatches[1]?fileJsxPragmaFrag=jsxMatches[2]:fileJsxPragma=jsxMatches[2]);}let pragmaImportName=fileJsxPragma||jsxPragma;pragmaImportName&&([pragmaImportName]=pragmaImportName.split("."));let pragmaFragImportName=fileJsxPragmaFrag||jsxPragmaFrag;pragmaFragImportName&&([pragmaFragImportName]=pragmaFragImportName.split("."));for(let stmt of path.get("body"))if(stmt.isImportDeclaration()){if(NEEDS_EXPLICIT_ESM.has(state.file.ast.program)||NEEDS_EXPLICIT_ESM.set(state.file.ast.program,!0),"type"===stmt.node.importKind){for(const specifier of stmt.node.specifiers)registerGlobalType(programScope,specifier.local.name);stmt.remove();continue}const importsToRemove=new Set,specifiersLength=stmt.node.specifiers.length,isAllSpecifiersElided=()=>specifiersLength>0&&specifiersLength===importsToRemove.size;for(const specifier of stmt.node.specifiers)if("ImportSpecifier"===specifier.type&&"type"===specifier.importKind){registerGlobalType(programScope,specifier.local.name);const binding=stmt.scope.getBinding(specifier.local.name);binding&&importsToRemove.add(binding.path);}if(onlyRemoveTypeImports)NEEDS_EXPLICIT_ESM.set(path.node,!1);else {if(0===stmt.node.specifiers.length){NEEDS_EXPLICIT_ESM.set(path.node,!1);continue}for(const specifier of stmt.node.specifiers){const binding=stmt.scope.getBinding(specifier.local.name);binding&&!importsToRemove.has(binding.path)&&(isImportTypeOnly({binding,programPath:path,pragmaImportName,pragmaFragImportName})?importsToRemove.add(binding.path):NEEDS_EXPLICIT_ESM.set(path.node,!1));}}if(isAllSpecifiersElided()&&!onlyRemoveTypeImports)stmt.remove();else for(const importPath of importsToRemove)importPath.remove();}else if(stmt.isExportDeclaration()&&(stmt=stmt.get("declaration")),stmt.isVariableDeclaration({declare:!0}))for(const name of Object.keys(stmt.getBindingIdentifiers()))registerGlobalType(programScope,name);else (stmt.isTSTypeAliasDeclaration()||stmt.isTSDeclareFunction()&&stmt.get("id").isIdentifier()||stmt.isTSInterfaceDeclaration()||stmt.isClassDeclaration({declare:!0})||stmt.isTSEnumDeclaration({declare:!0})||stmt.isTSModuleDeclaration({declare:!0})&&stmt.get("id").isIdentifier())&&registerGlobalType(programScope,stmt.node.id.name);},exit(path){"module"===path.node.sourceType&&NEEDS_EXPLICIT_ESM.get(path.node)&&path.pushContainer("body",t.exportNamedDeclaration());}},ExportNamedDeclaration(path,state){NEEDS_EXPLICIT_ESM.has(state.file.ast.program)||NEEDS_EXPLICIT_ESM.set(state.file.ast.program,!0),"type"!==path.node.exportKind?path.node.source&&path.node.specifiers.length>0&&path.node.specifiers.every((specifier=>"ExportSpecifier"===specifier.type&&"type"===specifier.exportKind))||!path.node.source&&path.node.specifiers.length>0&&path.node.specifiers.every((specifier=>t.isExportSpecifier(specifier)&&isGlobalType(path,specifier.local.name)))?path.remove():NEEDS_EXPLICIT_ESM.set(state.file.ast.program,!1):path.remove();},ExportAllDeclaration(path){"type"===path.node.exportKind&&path.remove();},ExportSpecifier(path){(!path.parent.source&&isGlobalType(path,path.node.local.name)||"type"===path.node.exportKind)&&path.remove();},ExportDefaultDeclaration(path,state){NEEDS_EXPLICIT_ESM.has(state.file.ast.program)||NEEDS_EXPLICIT_ESM.set(state.file.ast.program,!0),t.isIdentifier(path.node.declaration)&&isGlobalType(path,path.node.declaration.name)?path.remove():NEEDS_EXPLICIT_ESM.set(state.file.ast.program,!1);},TSDeclareFunction(path){safeRemove(path);},TSDeclareMethod(path){safeRemove(path);},VariableDeclaration(path){path.node.declare&&safeRemove(path);},VariableDeclarator({node}){node.definite&&(node.definite=null);},TSIndexSignature(path){path.remove();},ClassDeclaration(path){const{node}=path;node.declare&&safeRemove(path);},Class(path){const{node}=path;node.typeParameters&&(node.typeParameters=null),node.superTypeParameters&&(node.superTypeParameters=null),node.implements&&(node.implements=null),node.abstract&&(node.abstract=null),path.get("body.body").forEach((child=>{child.isClassMethod()||child.isClassPrivateMethod()?"constructor"===child.node.kind?classMemberVisitors.constructor(child,path):classMemberVisitors.method(child):(child.isClassProperty()||child.isClassPrivateProperty()||child.isClassAccessorProperty())&&classMemberVisitors.field(child);}));},Function(path){const{node}=path;node.typeParameters&&(node.typeParameters=null),node.returnType&&(node.returnType=null);const params=node.params;params.length>0&&t.isIdentifier(params[0],{name:"this"})&&params.shift();},TSModuleDeclaration(path){(0, _namespace.default)(path,allowNamespaces);},TSInterfaceDeclaration(path){path.remove();},TSTypeAliasDeclaration(path){path.remove();},TSEnumDeclaration(path){optimizeConstEnums&&path.node.const?(0, _constEnum.default)(path,t):(0, _enum.default)(path,t);},TSImportEqualsDeclaration(path){if(t.isTSExternalModuleReference(path.node.moduleReference))throw path.buildCodeFrameError(`\`import ${path.node.id.name} = require('${path.node.moduleReference.expression.value}')\` is not supported by @babel/plugin-transform-typescript\nPlease consider using \`import ${path.node.id.name} from '${path.node.moduleReference.expression.value}';\` alongside Typescript's --allowSyntheticDefaultImports option.`);path.replaceWith(t.variableDeclaration("var",[t.variableDeclarator(path.node.id,entityNameToExpr(path.node.moduleReference))])),path.scope.registerDeclaration(path);},TSExportAssignment(path){throw path.buildCodeFrameError("`export =` is not supported by @babel/plugin-transform-typescript\nPlease consider using `export <value>;`.")},TSTypeAssertion(path){path.replaceWith(path.node.expression);},["TSAsExpression"+(t.tsSatisfiesExpression?"|TSSatisfiesExpression":"")](path){let{node}=path;do{node=node.expression;}while(t.isTSAsExpression(node)||null!=t.isTSSatisfiesExpression&&t.isTSSatisfiesExpression(node));path.replaceWith(node);},[api.types.tsInstantiationExpression?"TSNonNullExpression|TSInstantiationExpression":"TSNonNullExpression"](path){path.replaceWith(path.node.expression);},CallExpression(path){path.node.typeParameters=null;},OptionalCallExpression(path){path.node.typeParameters=null;},NewExpression(path){path.node.typeParameters=null;},JSXOpeningElement(path){path.node.typeParameters=null;},TaggedTemplateExpression(path){path.node.typeParameters=null;}}};function entityNameToExpr(node){return t.isTSQualifiedName(node)?t.memberExpression(entityNameToExpr(node.left),node.right):node}function visitPattern({node}){node.typeAnnotation&&(node.typeAnnotation=null),t.isIdentifier(node)&&node.optional&&(node.optional=null);}function isImportTypeOnly({binding,programPath,pragmaImportName,pragmaFragImportName}){for(const path of binding.referencePaths)if(!isInType(path))return !1;if(binding.identifier.name!==pragmaImportName&&binding.identifier.name!==pragmaFragImportName)return !0;let sourceFileHasJsx=!1;return programPath.traverse({"JSXElement|JSXFragment"(path){sourceFileHasJsx=!0,path.stop();}}),!sourceFileHasJsx}}));exports.default=_default;},"./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/namespace.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(path,allowNamespaces){if(path.node.declare||"StringLiteral"===path.node.id.type)return void path.remove();if(!allowNamespaces)throw path.get("id").buildCodeFrameError("Namespace not marked type-only declare. Non-declarative namespaces are only supported experimentally in Babel. To enable and review caveats see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");const name=path.node.id.name,value=handleNested(path,_core.types.cloneNode(path.node,!0)),bound=path.scope.hasOwnBinding(name);"ExportNamedDeclaration"===path.parent.type?bound?path.parentPath.replaceWith(value):(path.parentPath.insertAfter(value),path.replaceWith(getDeclaration(name)),path.scope.registerDeclaration(path.parentPath)):bound?path.replaceWith(value):path.scope.registerDeclaration(path.replaceWithMultiple([getDeclaration(name),value])[0]);};var _core=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js");function getDeclaration(name){return _core.types.variableDeclaration("let",[_core.types.variableDeclarator(_core.types.identifier(name))])}function getMemberExpression(name,itemName){return _core.types.memberExpression(_core.types.identifier(name),_core.types.identifier(itemName))}function handleVariableDeclaration(node,name,hub){if("const"!==node.kind)throw hub.file.buildCodeFrameError(node,"Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");const{declarations}=node;if(declarations.every((declarator=>_core.types.isIdentifier(declarator.id)))){for(const declarator of declarations)declarator.init=_core.types.assignmentExpression("=",getMemberExpression(name,declarator.id.name),declarator.init);return [node]}const bindingIdentifiers=_core.types.getBindingIdentifiers(node),assignments=[];for(const idName in bindingIdentifiers)assignments.push(_core.types.assignmentExpression("=",getMemberExpression(name,idName),_core.types.cloneNode(bindingIdentifiers[idName])));return [node,_core.types.expressionStatement(_core.types.sequenceExpression(assignments))]}function buildNestedAmbientModuleError(path,node){return path.hub.buildError(node,"Ambient modules cannot be nested in other modules or namespaces.",Error)}function handleNested(path,node,parentExport){const names=new Set,realName=node.id;_core.types.assertIdentifier(realName);const name=path.scope.generateUid(realName.name),namespaceTopLevel=_core.types.isTSModuleBlock(node.body)?node.body.body:[_core.types.exportNamedDeclaration(node.body)];for(let i=0;i<namespaceTopLevel.length;i++){const subNode=namespaceTopLevel[i];switch(subNode.type){case"TSModuleDeclaration":{if(!_core.types.isIdentifier(subNode.id))throw buildNestedAmbientModuleError(path,subNode);const transformed=handleNested(path,subNode),moduleName=subNode.id.name;names.has(moduleName)?namespaceTopLevel[i]=transformed:(names.add(moduleName),namespaceTopLevel.splice(i++,1,getDeclaration(moduleName),transformed));continue}case"TSEnumDeclaration":case"FunctionDeclaration":case"ClassDeclaration":names.add(subNode.id.name);continue;case"VariableDeclaration":for(const name in _core.types.getBindingIdentifiers(subNode))names.add(name);continue;default:continue;case"ExportNamedDeclaration":}if(!("declare"in subNode.declaration)||!subNode.declaration.declare)switch(subNode.declaration.type){case"TSEnumDeclaration":case"FunctionDeclaration":case"ClassDeclaration":{const itemName=subNode.declaration.id.name;names.add(itemName),namespaceTopLevel.splice(i++,1,subNode.declaration,_core.types.expressionStatement(_core.types.assignmentExpression("=",getMemberExpression(name,itemName),_core.types.identifier(itemName))));break}case"VariableDeclaration":{const nodes=handleVariableDeclaration(subNode.declaration,name,path.hub);namespaceTopLevel.splice(i,nodes.length,...nodes),i+=nodes.length-1;break}case"TSModuleDeclaration":{if(!_core.types.isIdentifier(subNode.declaration.id))throw buildNestedAmbientModuleError(path,subNode.declaration);const transformed=handleNested(path,subNode.declaration,_core.types.identifier(name)),moduleName=subNode.declaration.id.name;names.has(moduleName)?namespaceTopLevel[i]=transformed:(names.add(moduleName),namespaceTopLevel.splice(i++,1,getDeclaration(moduleName),transformed));}}}let fallthroughValue=_core.types.objectExpression([]);if(parentExport){const memberExpr=_core.types.memberExpression(parentExport,realName);fallthroughValue=_core.template.expression.ast`
      ${_core.types.cloneNode(memberExpr)} ||
        (${_core.types.cloneNode(memberExpr)} = ${fallthroughValue})
    `;}return _core.template.statement.ast`
    (function (${_core.types.identifier(name)}) {
      ${namespaceTopLevel}
    })(${realName} || (${_core.types.cloneNode(realName)} = ${fallthroughValue}));
  `}},"./node_modules/.pnpm/@babel+preset-typescript@7.21.0_@babel+core@7.21.3/node_modules/@babel/preset-typescript/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0});var helperPluginUtils=__webpack_require__("./node_modules/.pnpm/@babel+helper-plugin-utils@7.20.2/node_modules/@babel/helper-plugin-utils/lib/index.js"),transformTypeScript=__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/index.js"),helperValidatorOption=__webpack_require__("./node_modules/.pnpm/@babel+helper-validator-option@7.21.0/node_modules/@babel/helper-validator-option/lib/index.js");function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var transformTypeScript__default=_interopDefaultLegacy(transformTypeScript);const v=new helperValidatorOption.OptionValidator("@babel/preset-typescript");var index=helperPluginUtils.declarePreset(((api,opts)=>{api.assertVersion(7);const{allExtensions,allowNamespaces,disallowAmbiguousJSXLike,isTSX,jsxPragma,jsxPragmaFrag,onlyRemoveTypeImports,optimizeConstEnums}=function(options={}){let{allowNamespaces=!0,jsxPragma,onlyRemoveTypeImports}=options;const TopLevelOptions_allExtensions="allExtensions",TopLevelOptions_disallowAmbiguousJSXLike="disallowAmbiguousJSXLike",TopLevelOptions_isTSX="isTSX",TopLevelOptions_jsxPragmaFrag="jsxPragmaFrag",TopLevelOptions_optimizeConstEnums="optimizeConstEnums",jsxPragmaFrag=v.validateStringOption(TopLevelOptions_jsxPragmaFrag,options.jsxPragmaFrag,"React.Fragment"),allExtensions=v.validateBooleanOption(TopLevelOptions_allExtensions,options.allExtensions,!1),isTSX=v.validateBooleanOption(TopLevelOptions_isTSX,options.isTSX,!1);isTSX&&v.invariant(allExtensions,"isTSX:true requires allExtensions:true");const disallowAmbiguousJSXLike=v.validateBooleanOption(TopLevelOptions_disallowAmbiguousJSXLike,options.disallowAmbiguousJSXLike,!1);return disallowAmbiguousJSXLike&&v.invariant(allExtensions,"disallowAmbiguousJSXLike:true requires allExtensions:true"),{allExtensions,allowNamespaces,disallowAmbiguousJSXLike,isTSX,jsxPragma,jsxPragmaFrag,onlyRemoveTypeImports,optimizeConstEnums:v.validateBooleanOption(TopLevelOptions_optimizeConstEnums,options.optimizeConstEnums,!1)}}(opts),pluginOptions=(isTSX,disallowAmbiguousJSXLike)=>({allowDeclareFields:opts.allowDeclareFields,allowNamespaces,disallowAmbiguousJSXLike,isTSX,jsxPragma,jsxPragmaFrag,onlyRemoveTypeImports,optimizeConstEnums});return {overrides:allExtensions?[{plugins:[[transformTypeScript__default.default,pluginOptions(isTSX,disallowAmbiguousJSXLike)]]}]:[{test:/\.ts$/,plugins:[[transformTypeScript__default.default,pluginOptions(!1,!1)]]},{test:/\.mts$/,sourceType:"module",plugins:[[transformTypeScript__default.default,pluginOptions(!1,!0)]]},{test:/\.cts$/,sourceType:"script",plugins:[[transformTypeScript__default.default,pluginOptions(!1,!0)]]},{test:/\.tsx$/,plugins:[[transformTypeScript__default.default,pluginOptions(!0,!1)]]}]}}));exports.default=index;},"./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/builder.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function createTemplateBuilder(formatter,defaultOpts){const templateFnCache=new WeakMap,templateAstCache=new WeakMap,cachedOpts=defaultOpts||(0, _options.validate)(null);return Object.assign(((tpl,...args)=>{if("string"==typeof tpl){if(args.length>1)throw new Error("Unexpected extra params.");return extendedTrace((0,_string.default)(formatter,tpl,(0,_options.merge)(cachedOpts,(0,_options.validate)(args[0]))))}if(Array.isArray(tpl)){let builder=templateFnCache.get(tpl);return builder||(builder=(0, _literal.default)(formatter,tpl,cachedOpts),templateFnCache.set(tpl,builder)),extendedTrace(builder(args))}if("object"==typeof tpl&&tpl){if(args.length>0)throw new Error("Unexpected extra params.");return createTemplateBuilder(formatter,(0, _options.merge)(cachedOpts,(0, _options.validate)(tpl)))}throw new Error("Unexpected template param "+typeof tpl)}),{ast:(tpl,...args)=>{if("string"==typeof tpl){if(args.length>1)throw new Error("Unexpected extra params.");return (0, _string.default)(formatter,tpl,(0, _options.merge)((0, _options.merge)(cachedOpts,(0, _options.validate)(args[0])),NO_PLACEHOLDER))()}if(Array.isArray(tpl)){let builder=templateAstCache.get(tpl);return builder||(builder=(0, _literal.default)(formatter,tpl,(0, _options.merge)(cachedOpts,NO_PLACEHOLDER)),templateAstCache.set(tpl,builder)),builder(args)()}throw new Error("Unexpected template param "+typeof tpl)}})};var _options=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/options.js"),_string=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/string.js"),_literal=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/literal.js");const NO_PLACEHOLDER=(0, _options.validate)({placeholderPattern:!1});function extendedTrace(fn){let rootStack="";try{throw new Error}catch(error){error.stack&&(rootStack=error.stack.split("\n").slice(3).join("\n"));}return arg=>{try{return fn(arg)}catch(err){throw err.stack+=`\n    =============\n${rootStack}`,err}}}},"./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/formatters.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.statements=exports.statement=exports.smart=exports.program=exports.expression=void 0;var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{assertExpressionStatement}=_t;function makeStatementFormatter(fn){return {code:str=>`/* @babel/template */;\n${str}`,validate:()=>{},unwrap:ast=>fn(ast.program.body.slice(1))}}const smart=makeStatementFormatter((body=>body.length>1?body:body[0]));exports.smart=smart;const statements=makeStatementFormatter((body=>body));exports.statements=statements;const statement=makeStatementFormatter((body=>{if(0===body.length)throw new Error("Found nothing to return.");if(body.length>1)throw new Error("Found multiple statements but wanted one");return body[0]}));exports.statement=statement;const expression={code:str=>`(\n${str}\n)`,validate:ast=>{if(ast.program.body.length>1)throw new Error("Found multiple statements but wanted one");if(0===expression.unwrap(ast).start)throw new Error("Parse result included parens.")},unwrap:({program})=>{const[stmt]=program.body;return assertExpressionStatement(stmt),stmt.expression}};exports.expression=expression;exports.program={code:str=>str,validate:()=>{},unwrap:ast=>ast.program};},"./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.statements=exports.statement=exports.smart=exports.program=exports.expression=exports.default=void 0;var formatters=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/formatters.js"),_builder=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/builder.js");const smart=(0, _builder.default)(formatters.smart);exports.smart=smart;const statement=(0, _builder.default)(formatters.statement);exports.statement=statement;const statements=(0, _builder.default)(formatters.statements);exports.statements=statements;const expression=(0, _builder.default)(formatters.expression);exports.expression=expression;const program=(0, _builder.default)(formatters.program);exports.program=program;var _default=Object.assign(smart.bind(void 0),{smart,statement,statements,expression,program,ast:smart.ast});exports.default=_default;},"./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/literal.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(formatter,tpl,opts){const{metadata,names}=function(formatter,tpl,opts){let names,nameSet,metadata,prefix="";do{prefix+="$";const result=buildTemplateCode(tpl,prefix);names=result.names,nameSet=new Set(names),metadata=(0, _parse.default)(formatter,formatter.code(result.code),{parser:opts.parser,placeholderWhitelist:new Set(result.names.concat(opts.placeholderWhitelist?Array.from(opts.placeholderWhitelist):[])),placeholderPattern:opts.placeholderPattern,preserveComments:opts.preserveComments,syntacticPlaceholders:opts.syntacticPlaceholders});}while(metadata.placeholders.some((placeholder=>placeholder.isDuplicate&&nameSet.has(placeholder.name))));return {metadata,names}}(formatter,tpl,opts);return arg=>{const defaultReplacements={};return arg.forEach(((replacement,i)=>{defaultReplacements[names[i]]=replacement;})),arg=>{const replacements=(0, _options.normalizeReplacements)(arg);return replacements&&Object.keys(replacements).forEach((key=>{if(Object.prototype.hasOwnProperty.call(defaultReplacements,key))throw new Error("Unexpected replacement overlap.")})),formatter.unwrap((0, _populate.default)(metadata,replacements?Object.assign(replacements,defaultReplacements):defaultReplacements))}}};var _options=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/options.js"),_parse=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/parse.js"),_populate=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/populate.js");function buildTemplateCode(tpl,prefix){const names=[];let code=tpl[0];for(let i=1;i<tpl.length;i++){const value=`${prefix}${i-1}`;names.push(value),code+=value+tpl[i];}return {names,code}}},"./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/options.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.merge=function(a,b){const{placeholderWhitelist=a.placeholderWhitelist,placeholderPattern=a.placeholderPattern,preserveComments=a.preserveComments,syntacticPlaceholders=a.syntacticPlaceholders}=b;return {parser:Object.assign({},a.parser,b.parser),placeholderWhitelist,placeholderPattern,preserveComments,syntacticPlaceholders}},exports.normalizeReplacements=function(replacements){if(Array.isArray(replacements))return replacements.reduce(((acc,replacement,i)=>(acc["$"+i]=replacement,acc)),{});if("object"==typeof replacements||null==replacements)return replacements||void 0;throw new Error("Template replacements must be an array, object, null, or undefined")},exports.validate=function(opts){if(null!=opts&&"object"!=typeof opts)throw new Error("Unknown template options.");const _ref=opts||{},{placeholderWhitelist,placeholderPattern,preserveComments,syntacticPlaceholders}=_ref,parser=function(source,excluded){if(null==source)return {};var key,i,target={},sourceKeys=Object.keys(source);for(i=0;i<sourceKeys.length;i++)key=sourceKeys[i],excluded.indexOf(key)>=0||(target[key]=source[key]);return target}(_ref,_excluded);if(null!=placeholderWhitelist&&!(placeholderWhitelist instanceof Set))throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");if(null!=placeholderPattern&&!(placeholderPattern instanceof RegExp)&&!1!==placeholderPattern)throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");if(null!=preserveComments&&"boolean"!=typeof preserveComments)throw new Error("'.preserveComments' must be a boolean, null, or undefined");if(null!=syntacticPlaceholders&&"boolean"!=typeof syntacticPlaceholders)throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");if(!0===syntacticPlaceholders&&(null!=placeholderWhitelist||null!=placeholderPattern))throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");return {parser,placeholderWhitelist:placeholderWhitelist||void 0,placeholderPattern:null==placeholderPattern?void 0:placeholderPattern,preserveComments:null==preserveComments?void 0:preserveComments,syntacticPlaceholders:null==syntacticPlaceholders?void 0:syntacticPlaceholders}};const _excluded=["placeholderWhitelist","placeholderPattern","preserveComments","syntacticPlaceholders"];},"./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/parse.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(formatter,code,opts){const{placeholderWhitelist,placeholderPattern,preserveComments,syntacticPlaceholders}=opts,ast=function(code,parserOpts,syntacticPlaceholders){const plugins=(parserOpts.plugins||[]).slice();!1!==syntacticPlaceholders&&plugins.push("placeholders");parserOpts=Object.assign({allowReturnOutsideFunction:!0,allowSuperOutsideMethod:!0,sourceType:"module"},parserOpts,{plugins});try{return (0,_parser.parse)(code,parserOpts)}catch(err){const loc=err.loc;throw loc&&(err.message+="\n"+(0, _codeFrame.codeFrameColumns)(code,{start:loc}),err.code="BABEL_TEMPLATE_PARSE_ERROR"),err}}(code,opts.parser,syntacticPlaceholders);removePropertiesDeep(ast,{preserveComments}),formatter.validate(ast);const syntactic={placeholders:[],placeholderNames:new Set},legacy={placeholders:[],placeholderNames:new Set},isLegacyRef={value:void 0};return traverse(ast,placeholderVisitorHandler,{syntactic,legacy,isLegacyRef,placeholderWhitelist,placeholderPattern,syntacticPlaceholders}),Object.assign({ast},isLegacyRef.value?legacy:syntactic)};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_parser=__webpack_require__("./node_modules/.pnpm/@babel+parser@7.21.3/node_modules/@babel/parser/lib/index.js"),_codeFrame=__webpack_require__("./stubs/babel-codeframe.js");const{isCallExpression,isExpressionStatement,isFunction,isIdentifier,isJSXIdentifier,isNewExpression,isPlaceholder,isStatement,isStringLiteral,removePropertiesDeep,traverse}=_t,PATTERN=/^[_$A-Z0-9]+$/;function placeholderVisitorHandler(node,ancestors,state){var _state$placeholderWhi;let name;if(isPlaceholder(node)){if(!1===state.syntacticPlaceholders)throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");name=node.name.name,state.isLegacyRef.value=!1;}else {if(!1===state.isLegacyRef.value||state.syntacticPlaceholders)return;if(isIdentifier(node)||isJSXIdentifier(node))name=node.name,state.isLegacyRef.value=!0;else {if(!isStringLiteral(node))return;name=node.value,state.isLegacyRef.value=!0;}}if(!state.isLegacyRef.value&&(null!=state.placeholderPattern||null!=state.placeholderWhitelist))throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");if(state.isLegacyRef.value&&(!1===state.placeholderPattern||!(state.placeholderPattern||PATTERN).test(name))&&(null==(_state$placeholderWhi=state.placeholderWhitelist)||!_state$placeholderWhi.has(name)))return;ancestors=ancestors.slice();const{node:parent,key}=ancestors[ancestors.length-1];let type;isStringLiteral(node)||isPlaceholder(node,{expectedNode:"StringLiteral"})?type="string":isNewExpression(parent)&&"arguments"===key||isCallExpression(parent)&&"arguments"===key||isFunction(parent)&&"params"===key?type="param":isExpressionStatement(parent)&&!isPlaceholder(node)?(type="statement",ancestors=ancestors.slice(0,-1)):type=isStatement(node)&&isPlaceholder(node)?"statement":"other";const{placeholders,placeholderNames}=state.isLegacyRef.value?state.legacy:state.syntactic;placeholders.push({name,type,resolve:ast=>function(ast,ancestors){let parent=ast;for(let i=0;i<ancestors.length-1;i++){const{key,index}=ancestors[i];parent=void 0===index?parent[key]:parent[key][index];}const{key,index}=ancestors[ancestors.length-1];return {parent,key,index}}(ast,ancestors),isDuplicate:placeholderNames.has(name)}),placeholderNames.add(name);}},"./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/populate.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(metadata,replacements){const ast=cloneNode(metadata.ast);replacements&&(metadata.placeholders.forEach((placeholder=>{if(!Object.prototype.hasOwnProperty.call(replacements,placeholder.name)){const placeholderName=placeholder.name;throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a\n            placeholder you may want to consider passing one of the following options to @babel/template:\n            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}\n            - { placeholderPattern: /^${placeholderName}$/ }`)}})),Object.keys(replacements).forEach((key=>{if(!metadata.placeholderNames.has(key))throw new Error(`Unknown substitution "${key}" given`)})));return metadata.placeholders.slice().reverse().forEach((placeholder=>{try{!function(placeholder,ast,replacement){placeholder.isDuplicate&&(Array.isArray(replacement)?replacement=replacement.map((node=>cloneNode(node))):"object"==typeof replacement&&(replacement=cloneNode(replacement)));const{parent,key,index}=placeholder.resolve(ast);if("string"===placeholder.type){if("string"==typeof replacement&&(replacement=stringLiteral(replacement)),!replacement||!isStringLiteral(replacement))throw new Error("Expected string substitution")}else if("statement"===placeholder.type)void 0===index?replacement?Array.isArray(replacement)?replacement=blockStatement(replacement):"string"==typeof replacement?replacement=expressionStatement(identifier(replacement)):isStatement(replacement)||(replacement=expressionStatement(replacement)):replacement=emptyStatement():replacement&&!Array.isArray(replacement)&&("string"==typeof replacement&&(replacement=identifier(replacement)),isStatement(replacement)||(replacement=expressionStatement(replacement)));else if("param"===placeholder.type){if("string"==typeof replacement&&(replacement=identifier(replacement)),void 0===index)throw new Error("Assertion failure.")}else if("string"==typeof replacement&&(replacement=identifier(replacement)),Array.isArray(replacement))throw new Error("Cannot replace single expression with an array.");if(void 0===index)validate(parent,key,replacement),parent[key]=replacement;else {const items=parent[key].slice();"statement"===placeholder.type||"param"===placeholder.type?null==replacement?items.splice(index,1):Array.isArray(replacement)?items.splice(index,1,...replacement):items[index]=replacement:items[index]=replacement,validate(parent,key,items),parent[key]=items;}}(placeholder,ast,replacements&&replacements[placeholder.name]||null);}catch(e){throw e.message=`@babel/template placeholder "${placeholder.name}": ${e.message}`,e}})),ast};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{blockStatement,cloneNode,emptyStatement,expressionStatement,identifier,isStatement,isStringLiteral,stringLiteral,validate}=_t;},"./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/string.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(formatter,code,opts){let metadata;return code=formatter.code(code),arg=>{const replacements=(0, _options.normalizeReplacements)(arg);return metadata||(metadata=(0, _parse.default)(formatter,code,opts)),formatter.unwrap((0, _populate.default)(metadata,replacements))}};var _options=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/options.js"),_parse=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/parse.js"),_populate=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/populate.js");},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.clear=function(){clearPath(),clearScope();},exports.clearPath=clearPath,exports.clearScope=clearScope,exports.scope=exports.path=void 0;let path=new WeakMap;exports.path=path;let scope=new WeakMap;function clearPath(){exports.path=path=new WeakMap;}function clearScope(){exports.scope=scope=new WeakMap;}exports.scope=scope;},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/context.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _path=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{VISITOR_KEYS}=_t;exports.default=class{constructor(scope,opts,state,parentPath){this.queue=null,this.priorityQueue=null,this.parentPath=parentPath,this.scope=scope,this.state=state,this.opts=opts;}shouldVisit(node){const opts=this.opts;if(opts.enter||opts.exit)return !0;if(opts[node.type])return !0;const keys=VISITOR_KEYS[node.type];if(null==keys||!keys.length)return !1;for(const key of keys)if(node[key])return !0;return !1}create(node,container,key,listKey){return _path.default.get({parentPath:this.parentPath,parent:node,container,key,listKey})}maybeQueue(path,notPriority){this.queue&&(notPriority?this.queue.push(path):this.priorityQueue.push(path));}visitMultiple(container,parent,listKey){if(0===container.length)return !1;const queue=[];for(let key=0;key<container.length;key++){const node=container[key];node&&this.shouldVisit(node)&&queue.push(this.create(parent,container,key,listKey));}return this.visitQueue(queue)}visitSingle(node,key){return !!this.shouldVisit(node[key])&&this.visitQueue([this.create(node,node,key)])}visitQueue(queue){this.queue=queue,this.priorityQueue=[];const visited=new WeakSet;let stop=!1;for(const path of queue){if(path.resync(),0!==path.contexts.length&&path.contexts[path.contexts.length-1]===this||path.pushContext(this),null===path.key)continue;const{node}=path;if(!visited.has(node)){if(node&&visited.add(node),path.visit()){stop=!0;break}if(this.priorityQueue.length&&(stop=this.visitQueue(this.priorityQueue),this.priorityQueue=[],this.queue=queue,stop))break}}for(const path of queue)path.popContext();return this.queue=null,stop}visit(node,key){const nodes=node[key];return !!nodes&&(Array.isArray(nodes)?this.visitMultiple(nodes,node,key):this.visitSingle(node,key))}};},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/hub.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;exports.default=class{getCode(){}getScope(){}addHelper(){throw new Error("Helpers are not supported by the default hub.")}buildError(node,msg,Error=TypeError){return new Error(msg)}};},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"Hub",{enumerable:!0,get:function(){return _hub.default}}),Object.defineProperty(exports,"NodePath",{enumerable:!0,get:function(){return _path.default}}),Object.defineProperty(exports,"Scope",{enumerable:!0,get:function(){return _scope.default}}),exports.visitors=exports.default=void 0;var visitors=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/visitors.js");exports.visitors=visitors;var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),cache=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js"),_traverseNode=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/traverse-node.js"),_path=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js"),_scope=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/index.js"),_hub=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/hub.js");const{VISITOR_KEYS,removeProperties,traverseFast}=_t;function traverse(parent,opts={},scope,state,parentPath){if(parent){if(!opts.noScope&&!scope&&"Program"!==parent.type&&"File"!==parent.type)throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);VISITOR_KEYS[parent.type]&&(visitors.explode(opts),(0, _traverseNode.traverseNode)(parent,opts,scope,state,parentPath));}}var _default=traverse;function hasDenylistedType(path,state){path.node.type===state.type&&(state.has=!0,path.stop());}exports.default=_default,traverse.visitors=visitors,traverse.verify=visitors.verify,traverse.explode=visitors.explode,traverse.cheap=function(node,enter){traverseFast(node,enter);},traverse.node=function(node,opts,scope,state,path,skipKeys){(0, _traverseNode.traverseNode)(node,opts,scope,state,path,skipKeys);},traverse.clearNode=function(node,opts){removeProperties(node,opts),cache.path.delete(node);},traverse.removeProperties=function(tree,opts){return traverseFast(tree,traverse.clearNode,opts),tree},traverse.hasType=function(tree,type,denylistTypes){if(null!=denylistTypes&&denylistTypes.includes(tree.type))return !1;if(tree.type===type)return !0;const state={has:!1,type};return traverse(tree,{noScope:!0,denylist:denylistTypes,enter:hasDenylistedType},null,state),state.has},traverse.cache=cache;},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/ancestry.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.find=function(callback){let path=this;do{if(callback(path))return path}while(path=path.parentPath);return null},exports.findParent=function(callback){let path=this;for(;path=path.parentPath;)if(callback(path))return path;return null},exports.getAncestry=function(){let path=this;const paths=[];do{paths.push(path);}while(path=path.parentPath);return paths},exports.getDeepestCommonAncestorFrom=function(paths,filter){if(!paths.length)return this;if(1===paths.length)return paths[0];let lastCommonIndex,lastCommon,minDepth=1/0;const ancestries=paths.map((path=>{const ancestry=[];do{ancestry.unshift(path);}while((path=path.parentPath)&&path!==this);return ancestry.length<minDepth&&(minDepth=ancestry.length),ancestry})),first=ancestries[0];depthLoop:for(let i=0;i<minDepth;i++){const shouldMatch=first[i];for(const ancestry of ancestries)if(ancestry[i]!==shouldMatch)break depthLoop;lastCommonIndex=i,lastCommon=shouldMatch;}if(lastCommon)return filter?filter(lastCommon,lastCommonIndex,ancestries):lastCommon;throw new Error("Couldn't find intersection")},exports.getEarliestCommonAncestorFrom=function(paths){return this.getDeepestCommonAncestorFrom(paths,(function(deepest,i,ancestries){let earliest;const keys=VISITOR_KEYS[deepest.type];for(const ancestry of ancestries){const path=ancestry[i+1];if(!earliest){earliest=path;continue}if(path.listKey&&earliest.listKey===path.listKey&&path.key<earliest.key){earliest=path;continue}keys.indexOf(earliest.parentKey)>keys.indexOf(path.parentKey)&&(earliest=path);}return earliest}))},exports.getFunctionParent=function(){return this.findParent((p=>p.isFunction()))},exports.getStatementParent=function(){let path=this;do{if(!path.parentPath||Array.isArray(path.container)&&path.isStatement())break;path=path.parentPath;}while(path);if(path&&(path.isProgram()||path.isFile()))throw new Error("File/Program node, we can't possibly find a statement parent to this");return path},exports.inType=function(...candidateTypes){let path=this;for(;path;){for(const type of candidateTypes)if(path.node.type===type)return !0;path=path.parentPath;}return !1},exports.isAncestor=function(maybeDescendant){return maybeDescendant.isDescendant(this)},exports.isDescendant=function(maybeAncestor){return !!this.findParent((parent=>parent===maybeAncestor))};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{VISITOR_KEYS}=_t;},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/comments.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.addComment=function(type,content,line){_addComment(this.node,type,content,line);},exports.addComments=function(type,comments){_addComments(this.node,type,comments);},exports.shareCommentsWithSiblings=function(){if("string"==typeof this.key)return;const node=this.node;if(!node)return;const trailing=node.trailingComments,leading=node.leadingComments;if(!trailing&&!leading)return;const prev=this.getSibling(this.key-1),next=this.getSibling(this.key+1),hasPrev=Boolean(prev.node),hasNext=Boolean(next.node);hasPrev&&!hasNext?prev.addComments("trailing",trailing):hasNext&&!hasPrev&&next.addComments("leading",leading);};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{addComment:_addComment,addComments:_addComments}=_t;},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/context.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports._call=function(fns){if(!fns)return !1;for(const fn of fns){if(!fn)continue;const node=this.node;if(!node)return !0;const ret=fn.call(this.state,this,this.state);if(ret&&"object"==typeof ret&&"function"==typeof ret.then)throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");if(ret)throw new Error(`Unexpected return value from visitor method ${fn}`);if(this.node!==node)return !0;if(this._traverseFlags>0)return !0}return !1},exports._getQueueContexts=function(){let path=this,contexts=this.contexts;for(;!contexts.length&&(path=path.parentPath,path);)contexts=path.contexts;return contexts},exports._resyncKey=function(){if(!this.container)return;if(this.node===this.container[this.key])return;if(Array.isArray(this.container)){for(let i=0;i<this.container.length;i++)if(this.container[i]===this.node)return void this.setKey(i)}else for(const key of Object.keys(this.container))if(this.container[key]===this.node)return void this.setKey(key);this.key=null;},exports._resyncList=function(){if(!this.parent||!this.inList)return;const newContainer=this.parent[this.listKey];if(this.container===newContainer)return;this.container=newContainer||null;},exports._resyncParent=function(){this.parentPath&&(this.parent=this.parentPath.node);},exports._resyncRemoved=function(){null!=this.key&&this.container&&this.container[this.key]===this.node||this._markRemoved();},exports.call=function(key){const opts=this.opts;if(this.debug(key),this.node&&this._call(opts[key]))return !0;if(this.node)return this._call(opts[this.node.type]&&opts[this.node.type][key]);return !1},exports.isBlacklisted=exports.isDenylisted=function(){var _this$opts$denylist;const denylist=null!=(_this$opts$denylist=this.opts.denylist)?_this$opts$denylist:this.opts.blacklist;return denylist&&denylist.indexOf(this.node.type)>-1},exports.popContext=function(){this.contexts.pop(),this.contexts.length>0?this.setContext(this.contexts[this.contexts.length-1]):this.setContext(void 0);},exports.pushContext=function(context){this.contexts.push(context),this.setContext(context);},exports.requeue=function(pathToQueue=this){if(pathToQueue.removed)return;const contexts=this.contexts;for(const context of contexts)context.maybeQueue(pathToQueue);},exports.resync=function(){if(this.removed)return;this._resyncParent(),this._resyncList(),this._resyncKey();},exports.setContext=function(context){null!=this.skipKeys&&(this.skipKeys={});this._traverseFlags=0,context&&(this.context=context,this.state=context.state,this.opts=context.opts);return this.setScope(),this},exports.setKey=function(key){var _this$node;this.key=key,this.node=this.container[this.key],this.type=null==(_this$node=this.node)?void 0:_this$node.type;},exports.setScope=function(){if(this.opts&&this.opts.noScope)return;let target,path=this.parentPath;(("key"===this.key||"decorators"===this.listKey)&&path.isMethod()||"discriminant"===this.key&&path.isSwitchStatement())&&(path=path.parentPath);for(;path&&!target;){if(path.opts&&path.opts.noScope)return;target=path.scope,path=path.parentPath;}this.scope=this.getScope(target),this.scope&&this.scope.init();},exports.setup=function(parentPath,container,listKey,key){this.listKey=listKey,this.container=container,this.parentPath=parentPath||this.parentPath,this.setKey(key);},exports.skip=function(){this.shouldSkip=!0;},exports.skipKey=function(key){null==this.skipKeys&&(this.skipKeys={});this.skipKeys[key]=!0;},exports.stop=function(){this._traverseFlags|=_index.SHOULD_SKIP|_index.SHOULD_STOP;},exports.visit=function(){if(!this.node)return !1;if(this.isDenylisted())return !1;if(this.opts.shouldSkip&&this.opts.shouldSkip(this))return !1;const currentContext=this.context;if(this.shouldSkip||this.call("enter"))return this.debug("Skip..."),this.shouldStop;return restoreContext(this,currentContext),this.debug("Recursing into..."),this.shouldStop=(0, _traverseNode.traverseNode)(this.node,this.opts,this.scope,this.state,this,this.skipKeys),restoreContext(this,currentContext),this.call("exit"),this.shouldStop};var _traverseNode=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/traverse-node.js"),_index=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js");function restoreContext(path,context){path.context!==context&&(path.context=context,path.state=context.state,path.opts=context.opts);}},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/conversion.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.arrowFunctionToExpression=function({allowInsertArrow=!0,allowInsertArrowWithRest=allowInsertArrow,specCompliant=!1,noNewArrows=!specCompliant}={}){if(!this.isArrowFunctionExpression())throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");const{thisBinding,fnPath:fn}=hoistFunctionEnvironment(this,noNewArrows,allowInsertArrow,allowInsertArrowWithRest);if(fn.ensureBlock(),function(path,type){path.node.type=type;}(fn,"FunctionExpression"),!noNewArrows){const checkBinding=thisBinding?null:fn.scope.generateUidIdentifier("arrowCheckId");return checkBinding&&fn.parentPath.scope.push({id:checkBinding,init:objectExpression([])}),fn.get("body").unshiftContainer("body",expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"),[thisExpression(),identifier(checkBinding?checkBinding.name:thisBinding)]))),fn.replaceWith(callExpression(memberExpression((0, _helperFunctionName.default)(this,!0)||fn.node,identifier("bind")),[checkBinding?identifier(checkBinding.name):thisExpression()])),fn.get("callee.object")}return fn},exports.arrowFunctionToShadowed=function(){if(!this.isArrowFunctionExpression())return;this.arrowFunctionToExpression();},exports.ensureBlock=function(){const body=this.get("body"),bodyNode=body.node;if(Array.isArray(body))throw new Error("Can't convert array path to a block statement");if(!bodyNode)throw new Error("Can't convert node without a body");if(body.isBlockStatement())return bodyNode;const statements=[];let key,listKey,stringPath="body";body.isStatement()?(listKey="body",key=0,statements.push(body.node)):(stringPath+=".body.0",this.isFunction()?(key="argument",statements.push(returnStatement(body.node))):(key="expression",statements.push(expressionStatement(body.node))));this.node.body=blockStatement(statements);const parentPath=this.get(stringPath);return body.setup(parentPath,listKey?parentPath.node[listKey]:parentPath.node,listKey,key),this.node},exports.toComputedKey=function(){let key;if(this.isMemberExpression())key=this.node.property;else {if(!this.isProperty()&&!this.isMethod())throw new ReferenceError("todo");key=this.node.key;}this.node.computed||isIdentifier(key)&&(key=stringLiteral(key.name));return key},exports.unwrapFunctionEnvironment=function(){if(!this.isArrowFunctionExpression()&&!this.isFunctionExpression()&&!this.isFunctionDeclaration())throw this.buildCodeFrameError("Can only unwrap the environment of a function.");hoistFunctionEnvironment(this);};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_helperEnvironmentVisitor=__webpack_require__("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"),_helperFunctionName=__webpack_require__("./node_modules/.pnpm/@babel+helper-function-name@7.21.0/node_modules/@babel/helper-function-name/lib/index.js"),_visitors=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/visitors.js");const{arrowFunctionExpression,assignmentExpression,binaryExpression,blockStatement,callExpression,conditionalExpression,expressionStatement,identifier,isIdentifier,jsxIdentifier,logicalExpression,LOGICAL_OPERATORS,memberExpression,metaProperty,numericLiteral,objectExpression,restElement,returnStatement,sequenceExpression,spreadElement,stringLiteral,super:_super,thisExpression,toExpression,unaryExpression}=_t;const getSuperCallsVisitor=(0, _visitors.merge)([{CallExpression(child,{allSuperCalls}){child.get("callee").isSuper()&&allSuperCalls.push(child);}},_helperEnvironmentVisitor.default]);function hoistFunctionEnvironment(fnPath,noNewArrows=!0,allowInsertArrow=!0,allowInsertArrowWithRest=!0){let arrowParent,thisEnvFn=fnPath.findParent((p=>p.isArrowFunctionExpression()?(null!=arrowParent||(arrowParent=p),!1):p.isFunction()||p.isProgram()||p.isClassProperty({static:!1})||p.isClassPrivateProperty({static:!1})));const inConstructor=thisEnvFn.isClassMethod({kind:"constructor"});if(thisEnvFn.isClassProperty()||thisEnvFn.isClassPrivateProperty())if(arrowParent)thisEnvFn=arrowParent;else {if(!allowInsertArrow)throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");fnPath.replaceWith(callExpression(arrowFunctionExpression([],toExpression(fnPath.node)),[])),thisEnvFn=fnPath.get("callee"),fnPath=thisEnvFn.get("body");}const{thisPaths,argumentsPaths,newTargetPaths,superProps,superCalls}=function(fnPath){const thisPaths=[],argumentsPaths=[],newTargetPaths=[],superProps=[],superCalls=[];return fnPath.traverse(getScopeInformationVisitor,{thisPaths,argumentsPaths,newTargetPaths,superProps,superCalls}),{thisPaths,argumentsPaths,newTargetPaths,superProps,superCalls}}(fnPath);if(inConstructor&&superCalls.length>0){if(!allowInsertArrow)throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super()` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");if(!allowInsertArrowWithRest)throw superCalls[0].buildCodeFrameError("When using '@babel/plugin-transform-parameters', it's not possible to compile `super()` in an arrow function with default or rest parameters without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");const allSuperCalls=[];thisEnvFn.traverse(getSuperCallsVisitor,{allSuperCalls});const superBinding=function(thisEnvFn){return getBinding(thisEnvFn,"supercall",(()=>{const argsBinding=thisEnvFn.scope.generateUidIdentifier("args");return arrowFunctionExpression([restElement(argsBinding)],callExpression(_super(),[spreadElement(identifier(argsBinding.name))]))}))}(thisEnvFn);allSuperCalls.forEach((superCall=>{const callee=identifier(superBinding);callee.loc=superCall.node.callee.loc,superCall.get("callee").replaceWith(callee);}));}if(argumentsPaths.length>0){const argumentsBinding=getBinding(thisEnvFn,"arguments",(()=>{const args=()=>identifier("arguments");return thisEnvFn.scope.path.isProgram()?conditionalExpression(binaryExpression("===",unaryExpression("typeof",args()),stringLiteral("undefined")),thisEnvFn.scope.buildUndefinedNode(),args()):args()}));argumentsPaths.forEach((argumentsChild=>{const argsRef=identifier(argumentsBinding);argsRef.loc=argumentsChild.node.loc,argumentsChild.replaceWith(argsRef);}));}if(newTargetPaths.length>0){const newTargetBinding=getBinding(thisEnvFn,"newtarget",(()=>metaProperty(identifier("new"),identifier("target"))));newTargetPaths.forEach((targetChild=>{const targetRef=identifier(newTargetBinding);targetRef.loc=targetChild.node.loc,targetChild.replaceWith(targetRef);}));}if(superProps.length>0){if(!allowInsertArrow)throw superProps[0].buildCodeFrameError("When using '@babel/plugin-transform-arrow-functions', it's not possible to compile `super.prop` in an arrow function without compiling classes.\nPlease add '@babel/plugin-transform-classes' to your Babel configuration.");superProps.reduce(((acc,superProp)=>acc.concat(function(superProp){if(superProp.parentPath.isAssignmentExpression()&&"="!==superProp.parentPath.node.operator){const assignmentPath=superProp.parentPath,op=assignmentPath.node.operator.slice(0,-1),value=assignmentPath.node.right,isLogicalAssignment=function(op){return LOGICAL_OPERATORS.includes(op)}(op);if(superProp.node.computed){const tmp=superProp.scope.generateDeclaredUidIdentifier("tmp"),object=superProp.node.object,property=superProp.node.property;assignmentPath.get("left").replaceWith(memberExpression(object,assignmentExpression("=",tmp,property),!0)),assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment?"=":op,memberExpression(object,identifier(tmp.name),!0),value));}else {const object=superProp.node.object,property=superProp.node.property;assignmentPath.get("left").replaceWith(memberExpression(object,property)),assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment?"=":op,memberExpression(object,identifier(property.name)),value));}return isLogicalAssignment?assignmentPath.replaceWith(logicalExpression(op,assignmentPath.node.left,assignmentPath.node.right)):assignmentPath.node.operator="=",[assignmentPath.get("left"),assignmentPath.get("right").get("left")]}if(superProp.parentPath.isUpdateExpression()){const updateExpr=superProp.parentPath,tmp=superProp.scope.generateDeclaredUidIdentifier("tmp"),computedKey=superProp.node.computed?superProp.scope.generateDeclaredUidIdentifier("prop"):null,parts=[assignmentExpression("=",tmp,memberExpression(superProp.node.object,computedKey?assignmentExpression("=",computedKey,superProp.node.property):superProp.node.property,superProp.node.computed)),assignmentExpression("=",memberExpression(superProp.node.object,computedKey?identifier(computedKey.name):superProp.node.property,superProp.node.computed),binaryExpression(superProp.parentPath.node.operator[0],identifier(tmp.name),numericLiteral(1)))];superProp.parentPath.node.prefix||parts.push(identifier(tmp.name)),updateExpr.replaceWith(sequenceExpression(parts));return [updateExpr.get("expressions.0.right"),updateExpr.get("expressions.1.left")]}return [superProp];function rightExpression(op,left,right){return "="===op?assignmentExpression("=",left,right):binaryExpression(op,left,right)}}(superProp))),[]).forEach((superProp=>{const key=superProp.node.computed?"":superProp.get("property").node.name,superParentPath=superProp.parentPath,isAssignment=superParentPath.isAssignmentExpression({left:superProp.node}),isCall=superParentPath.isCallExpression({callee:superProp.node}),isTaggedTemplate=superParentPath.isTaggedTemplateExpression({tag:superProp.node}),superBinding=function(thisEnvFn,isAssignment,propName){const op=isAssignment?"set":"get";return getBinding(thisEnvFn,`superprop_${op}:${propName||""}`,(()=>{const argsList=[];let fnBody;if(propName)fnBody=memberExpression(_super(),identifier(propName));else {const method=thisEnvFn.scope.generateUidIdentifier("prop");argsList.unshift(method),fnBody=memberExpression(_super(),identifier(method.name),!0);}if(isAssignment){const valueIdent=thisEnvFn.scope.generateUidIdentifier("value");argsList.push(valueIdent),fnBody=assignmentExpression("=",fnBody,identifier(valueIdent.name));}return arrowFunctionExpression(argsList,fnBody)}))}(thisEnvFn,isAssignment,key),args=[];if(superProp.node.computed&&args.push(superProp.get("property").node),isAssignment){const value=superParentPath.node.right;args.push(value);}const call=callExpression(identifier(superBinding),args);isCall?(superParentPath.unshiftContainer("arguments",thisExpression()),superProp.replaceWith(memberExpression(call,identifier("call"))),thisPaths.push(superParentPath.get("arguments.0"))):isAssignment?superParentPath.replaceWith(call):isTaggedTemplate?(superProp.replaceWith(callExpression(memberExpression(call,identifier("bind"),!1),[thisExpression()])),thisPaths.push(superProp.get("arguments.0"))):superProp.replaceWith(call);}));}let thisBinding;return (thisPaths.length>0||!noNewArrows)&&(thisBinding=function(thisEnvFn,inConstructor){return getBinding(thisEnvFn,"this",(thisBinding=>{if(!inConstructor||!hasSuperClass(thisEnvFn))return thisExpression();thisEnvFn.traverse(assignSuperThisVisitor,{supers:new WeakSet,thisBinding});}))}(thisEnvFn,inConstructor),(noNewArrows||inConstructor&&hasSuperClass(thisEnvFn))&&(thisPaths.forEach((thisChild=>{const thisRef=thisChild.isJSX()?jsxIdentifier(thisBinding):identifier(thisBinding);thisRef.loc=thisChild.node.loc,thisChild.replaceWith(thisRef);})),noNewArrows||(thisBinding=null))),{thisBinding,fnPath}}function hasSuperClass(thisEnvFn){return thisEnvFn.isClassMethod()&&!!thisEnvFn.parentPath.parentPath.node.superClass}const assignSuperThisVisitor=(0, _visitors.merge)([{CallExpression(child,{supers,thisBinding}){child.get("callee").isSuper()&&(supers.has(child.node)||(supers.add(child.node),child.replaceWithMultiple([child.node,assignmentExpression("=",identifier(thisBinding),identifier("this"))])));}},_helperEnvironmentVisitor.default]);function getBinding(thisEnvFn,key,init){const cacheKey="binding:"+key;let data=thisEnvFn.getData(cacheKey);if(!data){const id=thisEnvFn.scope.generateUidIdentifier(key);data=id.name,thisEnvFn.setData(cacheKey,data),thisEnvFn.scope.push({id,init:init(data)});}return data}const getScopeInformationVisitor=(0, _visitors.merge)([{ThisExpression(child,{thisPaths}){thisPaths.push(child);},JSXIdentifier(child,{thisPaths}){"this"===child.node.name&&(child.parentPath.isJSXMemberExpression({object:child.node})||child.parentPath.isJSXOpeningElement({name:child.node}))&&thisPaths.push(child);},CallExpression(child,{superCalls}){child.get("callee").isSuper()&&superCalls.push(child);},MemberExpression(child,{superProps}){child.get("object").isSuper()&&superProps.push(child);},Identifier(child,{argumentsPaths}){if(!child.isReferencedIdentifier({name:"arguments"}))return;let curr=child.scope;do{if(curr.hasOwnBinding("arguments"))return void curr.rename("arguments");if(curr.path.isFunction()&&!curr.path.isArrowFunctionExpression())break}while(curr=curr.parent);argumentsPaths.push(child);},MetaProperty(child,{newTargetPaths}){child.get("meta").isIdentifier({name:"new"})&&child.get("property").isIdentifier({name:"target"})&&newTargetPaths.push(child);}},_helperEnvironmentVisitor.default]);},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/evaluation.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.evaluate=function(){const state={confident:!0,deoptPath:null,seen:new Map};let value=evaluateCached(this,state);state.confident||(value=void 0);return {confident:state.confident,deopt:state.deoptPath,value}},exports.evaluateTruthy=function(){const res=this.evaluate();if(res.confident)return !!res.value};const VALID_CALLEES=["String","Number","Math"],INVALID_METHODS=["random"];function isValidCallee(val){return VALID_CALLEES.includes(val)}function deopt(path,state){state.confident&&(state.deoptPath=path,state.confident=!1);}const Globals=new Map([["undefined",void 0],["Infinity",1/0],["NaN",NaN]]);function evaluateCached(path,state){const{node}=path,{seen}=state;if(seen.has(node)){const existing=seen.get(node);return existing.resolved?existing.value:void deopt(path,state)}{const item={resolved:!1};seen.set(node,item);const val=function(path,state){if(!state.confident)return;if(path.isSequenceExpression()){const exprs=path.get("expressions");return evaluateCached(exprs[exprs.length-1],state)}if(path.isStringLiteral()||path.isNumericLiteral()||path.isBooleanLiteral())return path.node.value;if(path.isNullLiteral())return null;if(path.isTemplateLiteral())return evaluateQuasis(path,path.node.quasis,state);if(path.isTaggedTemplateExpression()&&path.get("tag").isMemberExpression()){const object=path.get("tag.object"),{node:{name}}=object,property=path.get("tag.property");if(object.isIdentifier()&&"String"===name&&!path.scope.getBinding(name)&&property.isIdentifier()&&"raw"===property.node.name)return evaluateQuasis(path,path.node.quasi.quasis,state,!0)}if(path.isConditionalExpression()){const testResult=evaluateCached(path.get("test"),state);if(!state.confident)return;return evaluateCached(testResult?path.get("consequent"):path.get("alternate"),state)}if(path.isExpressionWrapper())return evaluateCached(path.get("expression"),state);if(path.isMemberExpression()&&!path.parentPath.isCallExpression({callee:path.node})){const property=path.get("property"),object=path.get("object");if(object.isLiteral()){const value=object.node.value,type=typeof value;let key=null;if(path.node.computed){if(key=evaluateCached(property,state),!state.confident)return}else property.isIdentifier()&&(key=property.node.name);if(!("number"!==type&&"string"!==type||null==key||"number"!=typeof key&&"string"!=typeof key))return value[key]}}if(path.isReferencedIdentifier()){const binding=path.scope.getBinding(path.node.name);if(binding){if(binding.constantViolations.length>0||path.node.start<binding.path.node.end)return void deopt(binding.path,state);if(binding.hasValue)return binding.value}const name=path.node.name;if(Globals.has(name))return binding?void deopt(binding.path,state):Globals.get(name);const resolved=path.resolve();return resolved===path?void deopt(path,state):evaluateCached(resolved,state)}if(path.isUnaryExpression({prefix:!0})){if("void"===path.node.operator)return;const argument=path.get("argument");if("typeof"===path.node.operator&&(argument.isFunction()||argument.isClass()))return "function";const arg=evaluateCached(argument,state);if(!state.confident)return;switch(path.node.operator){case"!":return !arg;case"+":return +arg;case"-":return -arg;case"~":return ~arg;case"typeof":return typeof arg}}if(path.isArrayExpression()){const arr=[],elems=path.get("elements");for(const elem of elems){const elemValue=elem.evaluate();if(!elemValue.confident)return void deopt(elemValue.deopt,state);arr.push(elemValue.value);}return arr}if(path.isObjectExpression()){const obj={},props=path.get("properties");for(const prop of props){if(prop.isObjectMethod()||prop.isSpreadElement())return void deopt(prop,state);const keyPath=prop.get("key");let key;if(prop.node.computed){if(key=keyPath.evaluate(),!key.confident)return void deopt(key.deopt,state);key=key.value;}else key=keyPath.isIdentifier()?keyPath.node.name:keyPath.node.value;let value=prop.get("value").evaluate();if(!value.confident)return void deopt(value.deopt,state);value=value.value,obj[key]=value;}return obj}if(path.isLogicalExpression()){const wasConfident=state.confident,left=evaluateCached(path.get("left"),state),leftConfident=state.confident;state.confident=wasConfident;const right=evaluateCached(path.get("right"),state),rightConfident=state.confident;switch(path.node.operator){case"||":if(state.confident=leftConfident&&(!!left||rightConfident),!state.confident)return;return left||right;case"&&":if(state.confident=leftConfident&&(!left||rightConfident),!state.confident)return;return left&&right;case"??":if(state.confident=leftConfident&&(null!=left||rightConfident),!state.confident)return;return null!=left?left:right}}if(path.isBinaryExpression()){const left=evaluateCached(path.get("left"),state);if(!state.confident)return;const right=evaluateCached(path.get("right"),state);if(!state.confident)return;switch(path.node.operator){case"-":return left-right;case"+":return left+right;case"/":return left/right;case"*":return left*right;case"%":return left%right;case"**":return Math.pow(left,right);case"<":return left<right;case">":return left>right;case"<=":return left<=right;case">=":return left>=right;case"==":return left==right;case"!=":return left!=right;case"===":return left===right;case"!==":return left!==right;case"|":return left|right;case"&":return left&right;case"^":return left^right;case"<<":return left<<right;case">>":return left>>right;case">>>":return left>>>right}}if(path.isCallExpression()){const callee=path.get("callee");let context,func;if(callee.isIdentifier()&&!path.scope.getBinding(callee.node.name)&&isValidCallee(callee.node.name)&&(func=commonjsGlobal[callee.node.name]),callee.isMemberExpression()){const object=callee.get("object"),property=callee.get("property");if(object.isIdentifier()&&property.isIdentifier()&&isValidCallee(object.node.name)&&!function(val){return INVALID_METHODS.includes(val)}(property.node.name)&&(context=commonjsGlobal[object.node.name],func=context[property.node.name]),object.isLiteral()&&property.isIdentifier()){const type=typeof object.node.value;"string"!==type&&"number"!==type||(context=object.node.value,func=context[property.node.name]);}}if(func){const args=path.get("arguments").map((arg=>evaluateCached(arg,state)));if(!state.confident)return;return func.apply(context,args)}}deopt(path,state);}(path,state);return state.confident&&(item.resolved=!0,item.value=val),val}}function evaluateQuasis(path,quasis,state,raw=!1){let str="",i=0;const exprs=path.isTemplateLiteral()?path.get("expressions"):path.get("quasi.expressions");for(const elem of quasis){if(!state.confident)break;str+=raw?elem.value.raw:elem.value.cooked;const expr=exprs[i++];expr&&(str+=String(evaluateCached(expr,state)));}if(state.confident)return str}},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/family.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports._getKey=function(key,context){const node=this.node,container=node[key];return Array.isArray(container)?container.map(((_,i)=>_index.default.get({listKey:key,parentPath:this,parent:node,container,key:i}).setContext(context))):_index.default.get({parentPath:this,parent:node,container:node,key}).setContext(context)},exports._getPattern=function(parts,context){let path=this;for(const part of parts)path="."===part?path.parentPath:Array.isArray(path)?path[part]:path.get(part,context);return path},exports.get=function(key,context=!0){!0===context&&(context=this.context);const parts=key.split(".");return 1===parts.length?this._getKey(key,context):this._getPattern(parts,context)},exports.getAllNextSiblings=function(){let _key=this.key,sibling=this.getSibling(++_key);const siblings=[];for(;sibling.node;)siblings.push(sibling),sibling=this.getSibling(++_key);return siblings},exports.getAllPrevSiblings=function(){let _key=this.key,sibling=this.getSibling(--_key);const siblings=[];for(;sibling.node;)siblings.push(sibling),sibling=this.getSibling(--_key);return siblings},exports.getBindingIdentifierPaths=function(duplicates=!1,outerOnly=!1){const search=[this],ids=Object.create(null);for(;search.length;){const id=search.shift();if(!id)continue;if(!id.node)continue;const keys=_getBindingIdentifiers.keys[id.node.type];if(id.isIdentifier())if(duplicates){(ids[id.node.name]=ids[id.node.name]||[]).push(id);}else ids[id.node.name]=id;else if(id.isExportDeclaration()){const declaration=id.get("declaration");isDeclaration(declaration)&&search.push(declaration);}else {if(outerOnly){if(id.isFunctionDeclaration()){search.push(id.get("id"));continue}if(id.isFunctionExpression())continue}if(keys)for(let i=0;i<keys.length;i++){const key=keys[i],child=id.get(key);Array.isArray(child)?search.push(...child):child.node&&search.push(child);}}}return ids},exports.getBindingIdentifiers=function(duplicates){return _getBindingIdentifiers(this.node,duplicates)},exports.getCompletionRecords=function(){return _getCompletionRecords(this,{canHaveBreak:!1,shouldPopulateBreak:!1,inCaseClause:!1}).map((r=>r.path))},exports.getNextSibling=function(){return this.getSibling(this.key+1)},exports.getOpposite=function(){if("left"===this.key)return this.getSibling("right");if("right"===this.key)return this.getSibling("left");return null},exports.getOuterBindingIdentifierPaths=function(duplicates=!1){return this.getBindingIdentifierPaths(duplicates,!0)},exports.getOuterBindingIdentifiers=function(duplicates){return _getOuterBindingIdentifiers(this.node,duplicates)},exports.getPrevSibling=function(){return this.getSibling(this.key-1)},exports.getSibling=function(key){return _index.default.get({parentPath:this.parentPath,parent:this.parent,container:this.container,listKey:this.listKey,key}).setContext(this.context)};var _index=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{getBindingIdentifiers:_getBindingIdentifiers,getOuterBindingIdentifiers:_getOuterBindingIdentifiers,isDeclaration,numericLiteral,unaryExpression}=_t,NORMAL_COMPLETION=0,BREAK_COMPLETION=1;function addCompletionRecords(path,records,context){return path&&records.push(..._getCompletionRecords(path,context)),records}function normalCompletionToBreak(completions){completions.forEach((c=>{c.type=BREAK_COMPLETION;}));}function replaceBreakStatementInBreakCompletion(completions,reachable){completions.forEach((c=>{c.path.isBreakStatement({label:null})&&(reachable?c.path.replaceWith(unaryExpression("void",numericLiteral(0))):c.path.remove());}));}function getStatementListCompletion(paths,context){const completions=[];if(context.canHaveBreak){let lastNormalCompletions=[];for(let i=0;i<paths.length;i++){const path=paths[i],newContext=Object.assign({},context,{inCaseClause:!1});path.isBlockStatement()&&(context.inCaseClause||context.shouldPopulateBreak)?newContext.shouldPopulateBreak=!0:newContext.shouldPopulateBreak=!1;const statementCompletions=_getCompletionRecords(path,newContext);if(statementCompletions.length>0&&statementCompletions.every((c=>c.type===BREAK_COMPLETION))){lastNormalCompletions.length>0&&statementCompletions.every((c=>c.path.isBreakStatement({label:null})))?(normalCompletionToBreak(lastNormalCompletions),completions.push(...lastNormalCompletions),lastNormalCompletions.some((c=>c.path.isDeclaration()))&&(completions.push(...statementCompletions),replaceBreakStatementInBreakCompletion(statementCompletions,!0)),replaceBreakStatementInBreakCompletion(statementCompletions,!1)):(completions.push(...statementCompletions),context.shouldPopulateBreak||replaceBreakStatementInBreakCompletion(statementCompletions,!0));break}if(i===paths.length-1)completions.push(...statementCompletions);else {lastNormalCompletions=[];for(let i=0;i<statementCompletions.length;i++){const c=statementCompletions[i];c.type===BREAK_COMPLETION&&completions.push(c),c.type===NORMAL_COMPLETION&&lastNormalCompletions.push(c);}}}}else if(paths.length)for(let i=paths.length-1;i>=0;i--){const pathCompletions=_getCompletionRecords(paths[i],context);if(pathCompletions.length>1||1===pathCompletions.length&&!pathCompletions[0].path.isVariableDeclaration()){completions.push(...pathCompletions);break}}return completions}function _getCompletionRecords(path,context){let records=[];if(path.isIfStatement())records=addCompletionRecords(path.get("consequent"),records,context),records=addCompletionRecords(path.get("alternate"),records,context);else {if(path.isDoExpression()||path.isFor()||path.isWhile()||path.isLabeledStatement())return addCompletionRecords(path.get("body"),records,context);if(path.isProgram()||path.isBlockStatement())return getStatementListCompletion(path.get("body"),context);if(path.isFunction())return _getCompletionRecords(path.get("body"),context);if(path.isTryStatement())records=addCompletionRecords(path.get("block"),records,context),records=addCompletionRecords(path.get("handler"),records,context);else {if(path.isCatchClause())return addCompletionRecords(path.get("body"),records,context);if(path.isSwitchStatement())return function(cases,records,context){let lastNormalCompletions=[];for(let i=0;i<cases.length;i++){const caseCompletions=_getCompletionRecords(cases[i],context),normalCompletions=[],breakCompletions=[];for(const c of caseCompletions)c.type===NORMAL_COMPLETION&&normalCompletions.push(c),c.type===BREAK_COMPLETION&&breakCompletions.push(c);normalCompletions.length&&(lastNormalCompletions=normalCompletions),records.push(...breakCompletions);}return records.push(...lastNormalCompletions),records}(path.get("cases"),records,context);if(path.isSwitchCase())return getStatementListCompletion(path.get("consequent"),{canHaveBreak:!0,shouldPopulateBreak:!1,inCaseClause:!0});path.isBreakStatement()?records.push(function(path){return {type:BREAK_COMPLETION,path}}(path)):records.push(function(path){return {type:NORMAL_COMPLETION,path}}(path));}}return records}},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=exports.SHOULD_STOP=exports.SHOULD_SKIP=exports.REMOVED=void 0;var virtualTypes=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"),_debug=__webpack_require__("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js"),_index=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js"),_scope=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/index.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),t=_t,_cache=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js"),_generator=__webpack_require__("./node_modules/.pnpm/@babel+generator@7.21.3/node_modules/@babel/generator/lib/index.js"),NodePath_ancestry=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/ancestry.js"),NodePath_inference=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/index.js"),NodePath_replacement=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/replacement.js"),NodePath_evaluation=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/evaluation.js"),NodePath_conversion=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/conversion.js"),NodePath_introspection=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/introspection.js"),NodePath_context=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/context.js"),NodePath_removal=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/removal.js"),NodePath_modification=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/modification.js"),NodePath_family=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/family.js"),NodePath_comments=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/comments.js"),NodePath_virtual_types_validator=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js");const{validate}=_t,debug=_debug("babel");exports.REMOVED=1;exports.SHOULD_STOP=2;exports.SHOULD_SKIP=4;class NodePath{constructor(hub,parent){this.contexts=[],this.state=null,this.opts=null,this._traverseFlags=0,this.skipKeys=null,this.parentPath=null,this.container=null,this.listKey=null,this.key=null,this.node=null,this.type=null,this.parent=parent,this.hub=hub,this.data=null,this.context=null,this.scope=null;}static get({hub,parentPath,parent,container,listKey,key}){if(!hub&&parentPath&&(hub=parentPath.hub),!parent)throw new Error("To get a node path the parent needs to exist");const targetNode=container[key];let paths=_cache.path.get(parent);paths||(paths=new Map,_cache.path.set(parent,paths));let path=paths.get(targetNode);return path||(path=new NodePath(hub,parent),targetNode&&paths.set(targetNode,path)),path.setup(parentPath,container,listKey,key),path}getScope(scope){return this.isScope()?new _scope.default(this):scope}setData(key,val){return null==this.data&&(this.data=Object.create(null)),this.data[key]=val}getData(key,def){null==this.data&&(this.data=Object.create(null));let val=this.data[key];return void 0===val&&void 0!==def&&(val=this.data[key]=def),val}hasNode(){return null!=this.node}buildCodeFrameError(msg,Error=SyntaxError){return this.hub.buildError(this.node,msg,Error)}traverse(visitor,state){(0, _index.default)(this.node,visitor,this.scope,state,this);}set(key,node){validate(this.node,key,node),this.node[key]=node;}getPathLocation(){const parts=[];let path=this;do{let key=path.key;path.inList&&(key=`${path.listKey}[${key}]`),parts.unshift(key);}while(path=path.parentPath);return parts.join(".")}debug(message){debug.enabled&&debug(`${this.getPathLocation()} ${this.type}: ${message}`);}toString(){return (0, _generator.default)(this.node).code}get inList(){return !!this.listKey}set inList(inList){inList||(this.listKey=null);}get parentKey(){return this.listKey||this.key}get shouldSkip(){return !!(4&this._traverseFlags)}set shouldSkip(v){v?this._traverseFlags|=4:this._traverseFlags&=-5;}get shouldStop(){return !!(2&this._traverseFlags)}set shouldStop(v){v?this._traverseFlags|=2:this._traverseFlags&=-3;}get removed(){return !!(1&this._traverseFlags)}set removed(v){v?this._traverseFlags|=1:this._traverseFlags&=-2;}}Object.assign(NodePath.prototype,NodePath_ancestry,NodePath_inference,NodePath_replacement,NodePath_evaluation,NodePath_conversion,NodePath_introspection,NodePath_context,NodePath_removal,NodePath_modification,NodePath_family,NodePath_comments),NodePath.prototype._guessExecutionStatusRelativeToDifferentFunctions=NodePath_introspection._guessExecutionStatusRelativeTo;for(const type of t.TYPES){const typeKey=`is${type}`,fn=t[typeKey];NodePath.prototype[typeKey]=function(opts){return fn(this.node,opts)},NodePath.prototype[`assert${type}`]=function(opts){if(!fn(this.node,opts))throw new TypeError(`Expected node path of type ${type}`)};}Object.assign(NodePath.prototype,NodePath_virtual_types_validator);for(const type of Object.keys(virtualTypes))"_"!==type[0]&&(t.TYPES.includes(type)||t.TYPES.push(type));var _default=NodePath;exports.default=_default;},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports._getTypeAnnotation=function(){const node=this.node;if(!node){if("init"===this.key&&this.parentPath.isVariableDeclarator()){const declar=this.parentPath.parentPath,declarParent=declar.parentPath;return "left"===declar.key&&declarParent.isForInStatement()?stringTypeAnnotation():"left"===declar.key&&declarParent.isForOfStatement()?anyTypeAnnotation():voidTypeAnnotation()}return}if(node.typeAnnotation)return node.typeAnnotation;if(typeAnnotationInferringNodes.has(node))return;typeAnnotationInferringNodes.add(node);try{var _inferer;let inferer=inferers[node.type];if(inferer)return inferer.call(this,node);if(inferer=inferers[this.parentPath.type],null!=(_inferer=inferer)&&_inferer.validParent)return this.parentPath.getTypeAnnotation()}finally{typeAnnotationInferringNodes.delete(node);}},exports.baseTypeStrictlyMatches=function(rightArg){const left=this.getTypeAnnotation(),right=rightArg.getTypeAnnotation();if(!isAnyTypeAnnotation(left)&&isFlowBaseAnnotation(left))return right.type===left.type;return !1},exports.couldBeBaseType=function(name){const type=this.getTypeAnnotation();if(isAnyTypeAnnotation(type))return !0;if(isUnionTypeAnnotation(type)){for(const type2 of type.types)if(isAnyTypeAnnotation(type2)||_isBaseType(name,type2,!0))return !0;return !1}return _isBaseType(name,type,!0)},exports.getTypeAnnotation=function(){let type=this.getData("typeAnnotation");if(null!=type)return type;type=this._getTypeAnnotation()||anyTypeAnnotation(),(isTypeAnnotation(type)||isTSTypeAnnotation(type))&&(type=type.typeAnnotation);return this.setData("typeAnnotation",type),type},exports.isBaseType=function(baseName,soft){return _isBaseType(baseName,this.getTypeAnnotation(),soft)},exports.isGenericType=function(genericName){const type=this.getTypeAnnotation();if("Array"===genericName&&(isTSArrayType(type)||isArrayTypeAnnotation(type)||isTupleTypeAnnotation(type)))return !0;return isGenericTypeAnnotation(type)&&isIdentifier(type.id,{name:genericName})||isTSTypeReference(type)&&isIdentifier(type.typeName,{name:genericName})};var inferers=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/inferers.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{anyTypeAnnotation,isAnyTypeAnnotation,isArrayTypeAnnotation,isBooleanTypeAnnotation,isEmptyTypeAnnotation,isFlowBaseAnnotation,isGenericTypeAnnotation,isIdentifier,isMixedTypeAnnotation,isNumberTypeAnnotation,isStringTypeAnnotation,isTSArrayType,isTSTypeAnnotation,isTSTypeReference,isTupleTypeAnnotation,isTypeAnnotation,isUnionTypeAnnotation,isVoidTypeAnnotation,stringTypeAnnotation,voidTypeAnnotation}=_t;const typeAnnotationInferringNodes=new WeakSet;function _isBaseType(baseName,type,soft){if("string"===baseName)return isStringTypeAnnotation(type);if("number"===baseName)return isNumberTypeAnnotation(type);if("boolean"===baseName)return isBooleanTypeAnnotation(type);if("any"===baseName)return isAnyTypeAnnotation(type);if("mixed"===baseName)return isMixedTypeAnnotation(type);if("empty"===baseName)return isEmptyTypeAnnotation(type);if("void"===baseName)return isVoidTypeAnnotation(type);if(soft)return !1;throw new Error(`Unknown base type ${baseName}`)}},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){if(!this.isReferenced())return;const binding=this.scope.getBinding(node.name);if(binding)return binding.identifier.typeAnnotation?binding.identifier.typeAnnotation:function(binding,path,name){const types=[],functionConstantViolations=[];let constantViolations=getConstantViolationsBefore(binding,path,functionConstantViolations);const testType=getConditionalAnnotation(binding,path,name);if(testType){const testConstantViolations=getConstantViolationsBefore(binding,testType.ifStatement);constantViolations=constantViolations.filter((path=>testConstantViolations.indexOf(path)<0)),types.push(testType.typeAnnotation);}if(constantViolations.length){constantViolations.push(...functionConstantViolations);for(const violation of constantViolations)types.push(violation.getTypeAnnotation());}if(!types.length)return;return (0, _util.createUnionType)(types)}(binding,this,node.name);if("undefined"===node.name)return voidTypeAnnotation();if("NaN"===node.name||"Infinity"===node.name)return numberTypeAnnotation();node.name;};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_util=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/util.js");const{BOOLEAN_NUMBER_BINARY_OPERATORS,createTypeAnnotationBasedOnTypeof,numberTypeAnnotation,voidTypeAnnotation}=_t;function getConstantViolationsBefore(binding,path,functions){const violations=binding.constantViolations.slice();return violations.unshift(binding.path),violations.filter((violation=>{const status=(violation=violation.resolve())._guessExecutionStatusRelativeTo(path);return functions&&"unknown"===status&&functions.push(violation),"before"===status}))}function inferAnnotationFromBinaryExpression(name,path){const operator=path.node.operator,right=path.get("right").resolve(),left=path.get("left").resolve();let target,typeofPath,typePath;if(left.isIdentifier({name})?target=right:right.isIdentifier({name})&&(target=left),target)return "==="===operator?target.getTypeAnnotation():BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator)>=0?numberTypeAnnotation():void 0;if("==="!==operator&&"=="!==operator)return;if(left.isUnaryExpression({operator:"typeof"})?(typeofPath=left,typePath=right):right.isUnaryExpression({operator:"typeof"})&&(typeofPath=right,typePath=left),!typeofPath)return;if(!typeofPath.get("argument").isIdentifier({name}))return;if(typePath=typePath.resolve(),!typePath.isLiteral())return;const typeValue=typePath.node.value;return "string"==typeof typeValue?createTypeAnnotationBasedOnTypeof(typeValue):void 0}function getConditionalAnnotation(binding,path,name){const ifStatement=function(binding,path,name){let parentPath;for(;parentPath=path.parentPath;){if(parentPath.isIfStatement()||parentPath.isConditionalExpression()){if("test"===path.key)return;return parentPath}if(parentPath.isFunction()&&parentPath.parentPath.scope.getBinding(name)!==binding)return;path=parentPath;}}(binding,path,name);if(!ifStatement)return;const paths=[ifStatement.get("test")],types=[];for(let i=0;i<paths.length;i++){const path=paths[i];if(path.isLogicalExpression())"&&"===path.node.operator&&(paths.push(path.get("left")),paths.push(path.get("right")));else if(path.isBinaryExpression()){const type=inferAnnotationFromBinaryExpression(name,path);type&&types.push(type);}}return types.length?{typeAnnotation:(0, _util.createUnionType)(types),ifStatement}:getConditionalAnnotation(binding,ifStatement,name)}},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/inferers.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.ArrayExpression=ArrayExpression,exports.AssignmentExpression=function(){return this.get("right").getTypeAnnotation()},exports.BinaryExpression=function(node){const operator=node.operator;if(NUMBER_BINARY_OPERATORS.indexOf(operator)>=0)return numberTypeAnnotation();if(BOOLEAN_BINARY_OPERATORS.indexOf(operator)>=0)return booleanTypeAnnotation();if("+"===operator){const right=this.get("right"),left=this.get("left");return left.isBaseType("number")&&right.isBaseType("number")?numberTypeAnnotation():left.isBaseType("string")||right.isBaseType("string")?stringTypeAnnotation():unionTypeAnnotation([stringTypeAnnotation(),numberTypeAnnotation()])}},exports.BooleanLiteral=function(){return booleanTypeAnnotation()},exports.CallExpression=function(){const{callee}=this.node;if(isObjectKeys(callee))return arrayTypeAnnotation(stringTypeAnnotation());if(isArrayFrom(callee)||isObjectValues(callee)||isIdentifier(callee,{name:"Array"}))return arrayTypeAnnotation(anyTypeAnnotation());if(isObjectEntries(callee))return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(),anyTypeAnnotation()]));return resolveCall(this.get("callee"))},exports.ConditionalExpression=function(){const argumentTypes=[this.get("consequent").getTypeAnnotation(),this.get("alternate").getTypeAnnotation()];return (0, _util.createUnionType)(argumentTypes)},exports.ClassDeclaration=exports.ClassExpression=exports.FunctionDeclaration=exports.ArrowFunctionExpression=exports.FunctionExpression=function(){return genericTypeAnnotation(identifier("Function"))},Object.defineProperty(exports,"Identifier",{enumerable:!0,get:function(){return _infererReference.default}}),exports.LogicalExpression=function(){const argumentTypes=[this.get("left").getTypeAnnotation(),this.get("right").getTypeAnnotation()];return (0, _util.createUnionType)(argumentTypes)},exports.NewExpression=function(node){if("Identifier"===node.callee.type)return genericTypeAnnotation(node.callee)},exports.NullLiteral=function(){return nullLiteralTypeAnnotation()},exports.NumericLiteral=function(){return numberTypeAnnotation()},exports.ObjectExpression=function(){return genericTypeAnnotation(identifier("Object"))},exports.ParenthesizedExpression=function(){return this.get("expression").getTypeAnnotation()},exports.RegExpLiteral=function(){return genericTypeAnnotation(identifier("RegExp"))},exports.RestElement=RestElement,exports.SequenceExpression=function(){return this.get("expressions").pop().getTypeAnnotation()},exports.StringLiteral=function(){return stringTypeAnnotation()},exports.TSAsExpression=TSAsExpression,exports.TSNonNullExpression=function(){return this.get("expression").getTypeAnnotation()},exports.TaggedTemplateExpression=function(){return resolveCall(this.get("tag"))},exports.TemplateLiteral=function(){return stringTypeAnnotation()},exports.TypeCastExpression=TypeCastExpression,exports.UnaryExpression=function(node){const operator=node.operator;if("void"===operator)return voidTypeAnnotation();if(NUMBER_UNARY_OPERATORS.indexOf(operator)>=0)return numberTypeAnnotation();if(STRING_UNARY_OPERATORS.indexOf(operator)>=0)return stringTypeAnnotation();if(BOOLEAN_UNARY_OPERATORS.indexOf(operator)>=0)return booleanTypeAnnotation()},exports.UpdateExpression=function(node){const operator=node.operator;if("++"===operator||"--"===operator)return numberTypeAnnotation()},exports.VariableDeclarator=function(){if(!this.get("id").isIdentifier())return;return this.get("init").getTypeAnnotation()};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_infererReference=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js"),_util=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/util.js");const{BOOLEAN_BINARY_OPERATORS,BOOLEAN_UNARY_OPERATORS,NUMBER_BINARY_OPERATORS,NUMBER_UNARY_OPERATORS,STRING_UNARY_OPERATORS,anyTypeAnnotation,arrayTypeAnnotation,booleanTypeAnnotation,buildMatchMemberExpression,genericTypeAnnotation,identifier,nullLiteralTypeAnnotation,numberTypeAnnotation,stringTypeAnnotation,tupleTypeAnnotation,unionTypeAnnotation,voidTypeAnnotation,isIdentifier}=_t;function TypeCastExpression(node){return node.typeAnnotation}function TSAsExpression(node){return node.typeAnnotation}function ArrayExpression(){return genericTypeAnnotation(identifier("Array"))}function RestElement(){return ArrayExpression()}TypeCastExpression.validParent=!0,TSAsExpression.validParent=!0,RestElement.validParent=!0;const isArrayFrom=buildMatchMemberExpression("Array.from"),isObjectKeys=buildMatchMemberExpression("Object.keys"),isObjectValues=buildMatchMemberExpression("Object.values"),isObjectEntries=buildMatchMemberExpression("Object.entries");function resolveCall(callee){if((callee=callee.resolve()).isFunction()){const{node}=callee;if(node.async)return node.generator?genericTypeAnnotation(identifier("AsyncIterator")):genericTypeAnnotation(identifier("Promise"));if(node.generator)return genericTypeAnnotation(identifier("Iterator"));if(callee.node.returnType)return callee.node.returnType}}},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/inference/util.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.createUnionType=function(types){if(isFlowType(types[0]))return createFlowUnionType?createFlowUnionType(types):createUnionTypeAnnotation(types);if(createTSUnionType)return createTSUnionType(types)};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{createFlowUnionType,createTSUnionType,createUnionTypeAnnotation,isFlowType,isTSType}=_t;},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/introspection.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports._guessExecutionStatusRelativeTo=function(target){return _guessExecutionStatusRelativeToCached(this,target,new Map)},exports._resolve=function(dangerous,resolved){if(resolved&&resolved.indexOf(this)>=0)return;if((resolved=resolved||[]).push(this),this.isVariableDeclarator()){if(this.get("id").isIdentifier())return this.get("init").resolve(dangerous,resolved)}else if(this.isReferencedIdentifier()){const binding=this.scope.getBinding(this.node.name);if(!binding)return;if(!binding.constant)return;if("module"===binding.kind)return;if(binding.path!==this){const ret=binding.path.resolve(dangerous,resolved);if(this.find((parent=>parent.node===ret.node)))return;return ret}}else {if(this.isTypeCastExpression())return this.get("expression").resolve(dangerous,resolved);if(dangerous&&this.isMemberExpression()){const targetKey=this.toComputedKey();if(!isLiteral(targetKey))return;const targetName=targetKey.value,target=this.get("object").resolve(dangerous,resolved);if(target.isObjectExpression()){const props=target.get("properties");for(const prop of props){if(!prop.isProperty())continue;const key=prop.get("key");let match=prop.isnt("computed")&&key.isIdentifier({name:targetName});if(match=match||key.isLiteral({value:targetName}),match)return prop.get("value").resolve(dangerous,resolved)}}else if(target.isArrayExpression()&&!isNaN(+targetName)){const elem=target.get("elements")[targetName];if(elem)return elem.resolve(dangerous,resolved)}}}},exports.canHaveVariableDeclarationOrExpression=function(){return ("init"===this.key||"left"===this.key)&&this.parentPath.isFor()},exports.canSwapBetweenExpressionAndStatement=function(replacement){if("body"!==this.key||!this.parentPath.isArrowFunctionExpression())return !1;if(this.isExpression())return isBlockStatement(replacement);if(this.isBlockStatement())return isExpression(replacement);return !1},exports.equals=function(key,value){return this.node[key]===value},exports.getSource=function(){const node=this.node;if(node.end){const code=this.hub.getCode();if(code)return code.slice(node.start,node.end)}return ""},exports.has=has,exports.is=void 0,exports.isCompletionRecord=function(allowInsideFunction){let path=this,first=!0;do{const{type,container}=path;if(!first&&(path.isFunction()||"StaticBlock"===type))return !!allowInsideFunction;if(first=!1,Array.isArray(container)&&path.key!==container.length-1)return !1}while((path=path.parentPath)&&!path.isProgram()&&!path.isDoExpression());return !0},exports.isConstantExpression=function(){if(this.isIdentifier()){const binding=this.scope.getBinding(this.node.name);return !!binding&&binding.constant}if(this.isLiteral())return !this.isRegExpLiteral()&&(!this.isTemplateLiteral()||this.get("expressions").every((expression=>expression.isConstantExpression())));if(this.isUnaryExpression())return "void"===this.node.operator&&this.get("argument").isConstantExpression();if(this.isBinaryExpression()){const{operator}=this.node;return "in"!==operator&&"instanceof"!==operator&&this.get("left").isConstantExpression()&&this.get("right").isConstantExpression()}return !1},exports.isInStrictMode=function(){const start=this.isProgram()?this:this.parentPath;return !!start.find((path=>{if(path.isProgram({sourceType:"module"}))return !0;if(path.isClass())return !0;if(path.isArrowFunctionExpression()&&!path.get("body").isBlockStatement())return !1;let body;if(path.isFunction())body=path.node.body;else {if(!path.isProgram())return !1;body=path.node;}for(const directive of body.directives)if("use strict"===directive.value.value)return !0}))},exports.isNodeType=function(type){return isType(this.type,type)},exports.isStatementOrBlock=function(){return !this.parentPath.isLabeledStatement()&&!isBlockStatement(this.container)&&STATEMENT_OR_BLOCK_KEYS.includes(this.key)},exports.isStatic=function(){return this.scope.isStatic(this.node)},exports.isnt=function(key){return !this.has(key)},exports.matchesPattern=function(pattern,allowPartial){return _matchesPattern(this.node,pattern,allowPartial)},exports.referencesImport=function(moduleSource,importName){if(!this.isReferencedIdentifier()){if(this.isJSXMemberExpression()&&this.node.property.name===importName||(this.isMemberExpression()||this.isOptionalMemberExpression())&&(this.node.computed?isStringLiteral(this.node.property,{value:importName}):this.node.property.name===importName)){const object=this.get("object");return object.isReferencedIdentifier()&&object.referencesImport(moduleSource,"*")}return !1}const binding=this.scope.getBinding(this.node.name);if(!binding||"module"!==binding.kind)return !1;const path=binding.path,parent=path.parentPath;if(!parent.isImportDeclaration())return !1;if(parent.node.source.value!==moduleSource)return !1;if(!importName)return !0;if(path.isImportDefaultSpecifier()&&"default"===importName)return !0;if(path.isImportNamespaceSpecifier()&&"*"===importName)return !0;if(path.isImportSpecifier()&&isIdentifier(path.node.imported,{name:importName}))return !0;return !1},exports.resolve=function(dangerous,resolved){return this._resolve(dangerous,resolved)||this},exports.willIMaybeExecuteBefore=function(target){return "after"!==this._guessExecutionStatusRelativeTo(target)};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{STATEMENT_OR_BLOCK_KEYS,VISITOR_KEYS,isBlockStatement,isExpression,isIdentifier,isLiteral,isStringLiteral,isType,matchesPattern:_matchesPattern}=_t;function has(key){const val=this.node&&this.node[key];return val&&Array.isArray(val)?!!val.length:!!val}const is=has;function getOuterFunction(path){return path.isProgram()?path:(path.parentPath.scope.getFunctionParent()||path.parentPath.scope.getProgramParent()).path}function isExecutionUncertain(type,key){switch(type){case"LogicalExpression":case"AssignmentPattern":return "right"===key;case"ConditionalExpression":case"IfStatement":return "consequent"===key||"alternate"===key;case"WhileStatement":case"DoWhileStatement":case"ForInStatement":case"ForOfStatement":return "body"===key;case"ForStatement":return "body"===key||"update"===key;case"SwitchStatement":return "cases"===key;case"TryStatement":return "handler"===key;case"OptionalMemberExpression":return "property"===key;case"OptionalCallExpression":return "arguments"===key;default:return !1}}function isExecutionUncertainInList(paths,maxIndex){for(let i=0;i<maxIndex;i++){const path=paths[i];if(isExecutionUncertain(path.parent.type,path.parentKey))return !0}return !1}exports.is=is;const SYMBOL_CHECKING=Symbol();function _guessExecutionStatusRelativeToCached(base,target,cache){const funcParent={this:getOuterFunction(base),target:getOuterFunction(target)};if(funcParent.target.node!==funcParent.this.node)return function(base,target,cache){let cached,nodeMap=cache.get(base.node);if(nodeMap){if(cached=nodeMap.get(target.node))return cached===SYMBOL_CHECKING?"unknown":cached}else cache.set(base.node,nodeMap=new Map);nodeMap.set(target.node,SYMBOL_CHECKING);const result=function(base,target,cache){if(!target.isFunctionDeclaration())return "before"===_guessExecutionStatusRelativeToCached(base,target,cache)?"before":"unknown";if(target.parentPath.isExportDeclaration())return "unknown";const binding=target.scope.getBinding(target.node.id.name);if(!binding.references)return "before";const referencePaths=binding.referencePaths;let allStatus;for(const path of referencePaths){if(!!path.find((path=>path.node===target.node)))continue;if("callee"!==path.key||!path.parentPath.isCallExpression())return "unknown";const status=_guessExecutionStatusRelativeToCached(base,path,cache);if(allStatus&&allStatus!==status)return "unknown";allStatus=status;}return allStatus}(base,target,cache);return nodeMap.set(target.node,result),result}(base,funcParent.target,cache);const paths={target:target.getAncestry(),this:base.getAncestry()};if(paths.target.indexOf(base)>=0)return "after";if(paths.this.indexOf(target)>=0)return "before";let commonPath;const commonIndex={target:0,this:0};for(;!commonPath&&commonIndex.this<paths.this.length;){const path=paths.this[commonIndex.this];commonIndex.target=paths.target.indexOf(path),commonIndex.target>=0?commonPath=path:commonIndex.this++;}if(!commonPath)throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");if(isExecutionUncertainInList(paths.this,commonIndex.this-1)||isExecutionUncertainInList(paths.target,commonIndex.target-1))return "unknown";const divergence={this:paths.this[commonIndex.this-1],target:paths.target[commonIndex.target-1]};if(divergence.target.listKey&&divergence.this.listKey&&divergence.target.container===divergence.this.container)return divergence.target.key>divergence.this.key?"before":"after";const keys=VISITOR_KEYS[commonPath.type],keyPosition_this=keys.indexOf(divergence.this.parentKey);return keys.indexOf(divergence.target.parentKey)>keyPosition_this?"before":"after"}},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/hoister.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_t2=_t;const{react}=_t,{cloneNode,jsxExpressionContainer,variableDeclaration,variableDeclarator}=_t2,referenceVisitor={ReferencedIdentifier(path,state){if(path.isJSXIdentifier()&&react.isCompatTag(path.node.name)&&!path.parentPath.isJSXMemberExpression())return;if("this"===path.node.name){let scope=path.scope;do{if(scope.path.isFunction()&&!scope.path.isArrowFunctionExpression())break}while(scope=scope.parent);scope&&state.breakOnScopePaths.push(scope.path);}const binding=path.scope.getBinding(path.node.name);if(binding){for(const violation of binding.constantViolations)if(violation.scope!==binding.path.scope)return state.mutableBinding=!0,void path.stop();binding===state.scope.getBinding(path.node.name)&&(state.bindings[path.node.name]=binding);}}};exports.default=class{constructor(path,scope){this.breakOnScopePaths=void 0,this.bindings=void 0,this.mutableBinding=void 0,this.scopes=void 0,this.scope=void 0,this.path=void 0,this.attachAfter=void 0,this.breakOnScopePaths=[],this.bindings={},this.mutableBinding=!1,this.scopes=[],this.scope=scope,this.path=path,this.attachAfter=!1;}isCompatibleScope(scope){for(const key of Object.keys(this.bindings)){const binding=this.bindings[key];if(!scope.bindingIdentifierEquals(key,binding.identifier))return !1}return !0}getCompatibleScopes(){let scope=this.path.scope;do{if(!this.isCompatibleScope(scope))break;if(this.scopes.push(scope),this.breakOnScopePaths.indexOf(scope.path)>=0)break}while(scope=scope.parent)}getAttachmentPath(){let path=this._getAttachmentPath();if(!path)return;let targetScope=path.scope;if(targetScope.path===path&&(targetScope=path.scope.parent),targetScope.path.isProgram()||targetScope.path.isFunction())for(const name of Object.keys(this.bindings)){if(!targetScope.hasOwnBinding(name))continue;const binding=this.bindings[name];if("param"===binding.kind||"params"===binding.path.parentKey)continue;if(this.getAttachmentParentForPath(binding.path).key>=path.key){this.attachAfter=!0,path=binding.path;for(const violationPath of binding.constantViolations)this.getAttachmentParentForPath(violationPath).key>path.key&&(path=violationPath);}}return path}_getAttachmentPath(){const scope=this.scopes.pop();if(scope)if(scope.path.isFunction()){if(!this.hasOwnParamBindings(scope))return this.getNextScopeAttachmentParent();{if(this.scope===scope)return;const bodies=scope.path.get("body").get("body");for(let i=0;i<bodies.length;i++)if(!bodies[i].node._blockHoist)return bodies[i]}}else if(scope.path.isProgram())return this.getNextScopeAttachmentParent()}getNextScopeAttachmentParent(){const scope=this.scopes.pop();if(scope)return this.getAttachmentParentForPath(scope.path)}getAttachmentParentForPath(path){do{if(!path.parentPath||Array.isArray(path.container)&&path.isStatement())return path}while(path=path.parentPath)}hasOwnParamBindings(scope){for(const name of Object.keys(this.bindings)){if(!scope.hasOwnBinding(name))continue;const binding=this.bindings[name];if("param"===binding.kind&&binding.constant)return !0}return !1}run(){if(this.path.traverse(referenceVisitor,this),this.mutableBinding)return;this.getCompatibleScopes();const attachTo=this.getAttachmentPath();if(!attachTo)return;if(attachTo.getFunctionParent()===this.path.getFunctionParent())return;let uid=attachTo.scope.generateUidIdentifier("ref");const declarator=variableDeclarator(uid,this.path.node),insertFn=this.attachAfter?"insertAfter":"insertBefore",[attached]=attachTo[insertFn]([attachTo.isVariableDeclarator()?declarator:variableDeclaration("var",[declarator])]),parent=this.path.parentPath;return parent.isJSXElement()&&this.path.container===parent.node.children&&(uid=jsxExpressionContainer(uid)),this.path.replaceWith(cloneNode(uid)),attachTo.isVariableDeclarator()?attached.get("init"):attached.get("declarations.0.init")}};},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.hooks=void 0;exports.hooks=[function(self,parent){if("test"===self.key&&(parent.isWhile()||parent.isSwitchCase())||"declaration"===self.key&&parent.isExportDeclaration()||"body"===self.key&&parent.isLabeledStatement()||"declarations"===self.listKey&&parent.isVariableDeclaration()&&1===parent.node.declarations.length||"expression"===self.key&&parent.isExpressionStatement())return parent.remove(),!0},function(self,parent){if(parent.isSequenceExpression()&&1===parent.node.expressions.length)return parent.replaceWith(parent.node.expressions[0]),!0},function(self,parent){if(parent.isBinary())return "left"===self.key?parent.replaceWith(parent.node.right):parent.replaceWith(parent.node.left),!0},function(self,parent){if(parent.isIfStatement()&&"consequent"===self.key||"body"===self.key&&(parent.isLoop()||parent.isArrowFunctionExpression()))return self.replaceWith({type:"BlockStatement",body:[]}),!0}];},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.isBindingIdentifier=function(){const{node,parent}=this,grandparent=this.parentPath.parent;return isIdentifier(node)&&isBinding(node,parent,grandparent)},exports.isBlockScoped=function(){return nodeIsBlockScoped(this.node)},exports.isExistentialTypeParam=function(){throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.")},exports.isExpression=function(){return this.isIdentifier()?this.isReferencedIdentifier():nodeIsExpression(this.node)},exports.isFlow=function(){const{node}=this;return !!nodeIsFlow(node)||(isImportDeclaration(node)?"type"===node.importKind||"typeof"===node.importKind:isExportDeclaration(node)?"type"===node.exportKind:!!isImportSpecifier(node)&&("type"===node.importKind||"typeof"===node.importKind))},exports.isForAwaitStatement=function(){return isForOfStatement(this.node,{await:!0})},exports.isGenerated=function(){return !this.isUser()},exports.isNumericLiteralTypeAnnotation=function(){throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.")},exports.isPure=function(constantsOnly){return this.scope.isPure(this.node,constantsOnly)},exports.isReferenced=function(){return nodeIsReferenced(this.node,this.parent)},exports.isReferencedIdentifier=function(opts){const{node,parent}=this;if(!isIdentifier(node,opts)&&!isJSXMemberExpression(parent,opts)){if(!isJSXIdentifier(node,opts))return !1;if(isCompatTag(node.name))return !1}return nodeIsReferenced(node,parent,this.parentPath.parent)},exports.isReferencedMemberExpression=function(){const{node,parent}=this;return isMemberExpression(node)&&nodeIsReferenced(node,parent)},exports.isRestProperty=function(){return nodeIsRestElement(this.node)&&this.parentPath&&this.parentPath.isObjectPattern()},exports.isScope=function(){return nodeIsScope(this.node,this.parent)},exports.isSpreadProperty=function(){return nodeIsRestElement(this.node)&&this.parentPath&&this.parentPath.isObjectExpression()},exports.isStatement=function(){const{node,parent}=this;if(nodeIsStatement(node)){if(isVariableDeclaration(node)){if(isForXStatement(parent,{left:node}))return !1;if(isForStatement(parent,{init:node}))return !1}return !0}return !1},exports.isUser=function(){return this.node&&!!this.node.loc},exports.isVar=function(){return nodeIsVar(this.node)};var _t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{isBinding,isBlockScoped:nodeIsBlockScoped,isExportDeclaration,isExpression:nodeIsExpression,isFlow:nodeIsFlow,isForStatement,isForXStatement,isIdentifier,isImportDeclaration,isImportSpecifier,isJSXIdentifier,isJSXMemberExpression,isMemberExpression,isRestElement:nodeIsRestElement,isReferenced:nodeIsReferenced,isScope:nodeIsScope,isStatement:nodeIsStatement,isVar:nodeIsVar,isVariableDeclaration,react,isForOfStatement}=_t,{isCompatTag}=react;},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/virtual-types.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.Var=exports.User=exports.Statement=exports.SpreadProperty=exports.Scope=exports.RestProperty=exports.ReferencedMemberExpression=exports.ReferencedIdentifier=exports.Referenced=exports.Pure=exports.NumericLiteralTypeAnnotation=exports.Generated=exports.ForAwaitStatement=exports.Flow=exports.Expression=exports.ExistentialTypeParam=exports.BlockScoped=exports.BindingIdentifier=void 0;exports.ReferencedIdentifier=["Identifier","JSXIdentifier"];exports.ReferencedMemberExpression=["MemberExpression"];exports.BindingIdentifier=["Identifier"];exports.Statement=["Statement"];exports.Expression=["Expression"];exports.Scope=["Scopable","Pattern"];exports.Referenced=null;exports.BlockScoped=null;exports.Var=["VariableDeclaration"];exports.User=null;exports.Generated=null;exports.Pure=null;exports.Flow=["Flow","ImportDeclaration","ExportDeclaration","ImportSpecifier"];exports.RestProperty=["RestElement"];exports.SpreadProperty=["RestElement"];exports.ExistentialTypeParam=["ExistsTypeAnnotation"];exports.NumericLiteralTypeAnnotation=["NumberLiteralTypeAnnotation"];exports.ForAwaitStatement=["ForOfStatement"];},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/modification.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports._containerInsert=function(from,nodes){this.updateSiblingKeys(from,nodes.length);const paths=[];this.container.splice(from,0,...nodes);for(let i=0;i<nodes.length;i++){const to=from+i,path=this.getSibling(to);paths.push(path),this.context&&this.context.queue&&path.pushContext(this.context);}const contexts=this._getQueueContexts();for(const path of paths){path.setScope(),path.debug("Inserted.");for(const context of contexts)context.maybeQueue(path,!0);}return paths},exports._containerInsertAfter=function(nodes){return this._containerInsert(this.key+1,nodes)},exports._containerInsertBefore=function(nodes){return this._containerInsert(this.key,nodes)},exports._verifyNodeList=function(nodes){if(!nodes)return [];Array.isArray(nodes)||(nodes=[nodes]);for(let i=0;i<nodes.length;i++){const node=nodes[i];let msg;if(node?"object"!=typeof node?msg="contains a non-object node":node.type?node instanceof _index.default&&(msg="has a NodePath when it expected a raw object"):msg="without a type":msg="has falsy node",msg){const type=Array.isArray(node)?"array":typeof node;throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`)}}return nodes},exports.hoist=function(scope=this.scope){return new _hoister.default(this,scope).run()},exports.insertAfter=function(nodes_){if(this._assertUnremoved(),this.isSequenceExpression())return last(this.get("expressions")).insertAfter(nodes_);const nodes=this._verifyNodeList(nodes_),{parentPath,parent}=this;if(parentPath.isExpressionStatement()||parentPath.isLabeledStatement()||isExportNamedDeclaration(parent)||parentPath.isExportDefaultDeclaration()&&this.isDeclaration())return parentPath.insertAfter(nodes.map((node=>isExpression(node)?expressionStatement(node):node)));if(this.isNodeType("Expression")&&!this.isJSXElement()&&!parentPath.isJSXElement()||parentPath.isForStatement()&&"init"===this.key){if(this.node){const node=this.node;let{scope}=this;if(scope.path.isPattern())return assertExpression(node),this.replaceWith(callExpression(arrowFunctionExpression([],node),[])),this.get("callee.body").insertAfter(nodes),[this];if(isHiddenInSequenceExpression(this))nodes.unshift(node);else if(isCallExpression(node)&&isSuper(node.callee))nodes.unshift(node),nodes.push(thisExpression());else if(function(node,scope){if(!isAssignmentExpression(node)||!isIdentifier(node.left))return !1;const blockScope=scope.getBlockParent();return blockScope.hasOwnBinding(node.left.name)&&blockScope.getOwnBinding(node.left.name).constantViolations.length<=1}(node,scope))nodes.unshift(node),nodes.push(cloneNode(node.left));else if(scope.isPure(node,!0))nodes.push(node);else {parentPath.isMethod({computed:!0,key:node})&&(scope=scope.parent);const temp=scope.generateDeclaredUidIdentifier();nodes.unshift(expressionStatement(assignmentExpression("=",cloneNode(temp),node))),nodes.push(expressionStatement(cloneNode(temp)));}}return this.replaceExpressionWithStatements(nodes)}if(Array.isArray(this.container))return this._containerInsertAfter(nodes);if(this.isStatementOrBlock()){const node=this.node,shouldInsertCurrentNode=node&&(!this.isExpressionStatement()||null!=node.expression);return this.replaceWith(blockStatement(shouldInsertCurrentNode?[node]:[])),this.pushContainer("body",nodes)}throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?")},exports.insertBefore=function(nodes_){this._assertUnremoved();const nodes=this._verifyNodeList(nodes_),{parentPath,parent}=this;if(parentPath.isExpressionStatement()||parentPath.isLabeledStatement()||isExportNamedDeclaration(parent)||parentPath.isExportDefaultDeclaration()&&this.isDeclaration())return parentPath.insertBefore(nodes);if(this.isNodeType("Expression")&&!this.isJSXElement()||parentPath.isForStatement()&&"init"===this.key)return this.node&&nodes.push(this.node),this.replaceExpressionWithStatements(nodes);if(Array.isArray(this.container))return this._containerInsertBefore(nodes);if(this.isStatementOrBlock()){const node=this.node,shouldInsertCurrentNode=node&&(!this.isExpressionStatement()||null!=node.expression);return this.replaceWith(blockStatement(shouldInsertCurrentNode?[node]:[])),this.unshiftContainer("body",nodes)}throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?")},exports.pushContainer=function(listKey,nodes){this._assertUnremoved();const verifiedNodes=this._verifyNodeList(nodes),container=this.node[listKey];return _index.default.get({parentPath:this,parent:this.node,container,listKey,key:container.length}).setContext(this.context).replaceWithMultiple(verifiedNodes)},exports.unshiftContainer=function(listKey,nodes){this._assertUnremoved(),nodes=this._verifyNodeList(nodes);return _index.default.get({parentPath:this,parent:this.node,container:this.node[listKey],listKey,key:0}).setContext(this.context)._containerInsertBefore(nodes)},exports.updateSiblingKeys=function(fromIndex,incrementBy){if(!this.parent)return;const paths=_cache.path.get(this.parent);for(const[,path]of paths)path.key>=fromIndex&&(path.key+=incrementBy);};var _cache=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js"),_hoister=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/hoister.js"),_index=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{arrowFunctionExpression,assertExpression,assignmentExpression,blockStatement,callExpression,cloneNode,expressionStatement,isAssignmentExpression,isCallExpression,isExportNamedDeclaration,isExpression,isIdentifier,isSequenceExpression,isSuper,thisExpression}=_t;const last=arr=>arr[arr.length-1];function isHiddenInSequenceExpression(path){return isSequenceExpression(path.parent)&&(last(path.parent.expressions)!==path.node||isHiddenInSequenceExpression(path.parentPath))}},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/removal.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports._assertUnremoved=function(){if(this.removed)throw this.buildCodeFrameError("NodePath has been removed so is read-only.")},exports._callRemovalHooks=function(){for(const fn of _removalHooks.hooks)if(fn(this,this.parentPath))return !0},exports._markRemoved=function(){this._traverseFlags|=_index.SHOULD_SKIP|_index.REMOVED,this.parent&&_cache.path.get(this.parent).delete(this.node);this.node=null;},exports._remove=function(){Array.isArray(this.container)?(this.container.splice(this.key,1),this.updateSiblingKeys(this.key,-1)):this._replaceWith(null);},exports._removeFromScope=function(){const bindings=this.getBindingIdentifiers();Object.keys(bindings).forEach((name=>this.scope.removeBinding(name)));},exports.remove=function(){var _this$opts;this._assertUnremoved(),this.resync(),null!=(_this$opts=this.opts)&&_this$opts.noScope||this._removeFromScope();if(this._callRemovalHooks())return void this._markRemoved();this.shareCommentsWithSiblings(),this._remove(),this._markRemoved();};var _removalHooks=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js"),_cache=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js"),_index=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js");},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/replacement.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports._replaceWith=function(node){var _pathCache$get2;if(!this.container)throw new ReferenceError("Container is falsy");this.inList?validate(this.parent,this.key,[node]):validate(this.parent,this.key,node);this.debug(`Replace with ${null==node?void 0:node.type}`),null==(_pathCache$get2=_cache.path.get(this.parent))||_pathCache$get2.set(node,this).delete(this.node),this.node=this.container[this.key]=node;},exports.replaceExpressionWithStatements=function(nodes){this.resync();const nodesAsSequenceExpression=toSequenceExpression(nodes,this.scope);if(nodesAsSequenceExpression)return this.replaceWith(nodesAsSequenceExpression)[0].get("expressions");const functionParent=this.getFunctionParent(),isParentAsync=null==functionParent?void 0:functionParent.is("async"),isParentGenerator=null==functionParent?void 0:functionParent.is("generator"),container=arrowFunctionExpression([],blockStatement(nodes));this.replaceWith(callExpression(container,[]));const callee=this.get("callee");(0, _helperHoistVariables.default)(callee.get("body"),(id=>{this.scope.push({id});}),"var");const completionRecords=this.get("callee").getCompletionRecords();for(const path of completionRecords){if(!path.isExpressionStatement())continue;const loop=path.findParent((path=>path.isLoop()));if(loop){let uid=loop.getData("expressionReplacementReturnUid");uid?uid=identifier(uid.name):(uid=callee.scope.generateDeclaredUidIdentifier("ret"),callee.get("body").pushContainer("body",returnStatement(cloneNode(uid))),loop.setData("expressionReplacementReturnUid",uid)),path.get("expression").replaceWith(assignmentExpression("=",cloneNode(uid),path.node.expression));}else path.replaceWith(returnStatement(path.node.expression));}callee.arrowFunctionToExpression();const newCallee=callee,needToAwaitFunction=isParentAsync&&_index.default.hasType(this.get("callee.body").node,"AwaitExpression",FUNCTION_TYPES),needToYieldFunction=isParentGenerator&&_index.default.hasType(this.get("callee.body").node,"YieldExpression",FUNCTION_TYPES);needToAwaitFunction&&(newCallee.set("async",!0),needToYieldFunction||this.replaceWith(awaitExpression(this.node)));needToYieldFunction&&(newCallee.set("generator",!0),this.replaceWith(yieldExpression(this.node,!0)));return newCallee.get("body.body")},exports.replaceInline=function(nodes){if(this.resync(),Array.isArray(nodes)){if(Array.isArray(this.container)){nodes=this._verifyNodeList(nodes);const paths=this._containerInsertAfter(nodes);return this.remove(),paths}return this.replaceWithMultiple(nodes)}return this.replaceWith(nodes)},exports.replaceWith=function(replacementPath){if(this.resync(),this.removed)throw new Error("You can't replace this node, we've already removed it");let replacement=replacementPath instanceof _index2.default?replacementPath.node:replacementPath;if(!replacement)throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");if(this.node===replacement)return [this];if(this.isProgram()&&!isProgram(replacement))throw new Error("You can only replace a Program root node with another Program node");if(Array.isArray(replacement))throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");if("string"==typeof replacement)throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");let nodePath="";this.isNodeType("Statement")&&isExpression(replacement)&&(this.canHaveVariableDeclarationOrExpression()||this.canSwapBetweenExpressionAndStatement(replacement)||this.parentPath.isExportDefaultDeclaration()||(replacement=expressionStatement(replacement),nodePath="expression"));if(this.isNodeType("Expression")&&isStatement(replacement)&&!this.canHaveVariableDeclarationOrExpression()&&!this.canSwapBetweenExpressionAndStatement(replacement))return this.replaceExpressionWithStatements([replacement]);const oldNode=this.node;oldNode&&(inheritsComments(replacement,oldNode),removeComments(oldNode));return this._replaceWith(replacement),this.type=replacement.type,this.setScope(),this.requeue(),[nodePath?this.get(nodePath):this]},exports.replaceWithMultiple=function(nodes){var _pathCache$get;this.resync(),nodes=this._verifyNodeList(nodes),inheritLeadingComments(nodes[0],this.node),inheritTrailingComments(nodes[nodes.length-1],this.node),null==(_pathCache$get=_cache.path.get(this.parent))||_pathCache$get.delete(this.node),this.node=this.container[this.key]=null;const paths=this.insertAfter(nodes);this.node?this.requeue():this.remove();return paths},exports.replaceWithSourceString=function(replacement){let ast;this.resync();try{replacement=`(${replacement})`,ast=(0,_parser.parse)(replacement);}catch(err){const loc=err.loc;throw loc&&(err.message+=" - make sure this is an expression.\n"+(0, _codeFrame.codeFrameColumns)(replacement,{start:{line:loc.line,column:loc.column+1}}),err.code="BABEL_REPLACE_SOURCE_ERROR"),err}const expressionAST=ast.program.body[0].expression;return _index.default.removeProperties(expressionAST),this.replaceWith(expressionAST)};var _codeFrame=__webpack_require__("./stubs/babel-codeframe.js"),_index=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js"),_index2=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/index.js"),_cache=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js"),_parser=__webpack_require__("./node_modules/.pnpm/@babel+parser@7.21.3/node_modules/@babel/parser/lib/index.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_helperHoistVariables=__webpack_require__("./node_modules/.pnpm/@babel+helper-hoist-variables@7.18.6/node_modules/@babel/helper-hoist-variables/lib/index.js");const{FUNCTION_TYPES,arrowFunctionExpression,assignmentExpression,awaitExpression,blockStatement,callExpression,cloneNode,expressionStatement,identifier,inheritLeadingComments,inheritTrailingComments,inheritsComments,isExpression,isProgram,isStatement,removeComments,returnStatement,toSequenceExpression,validate,yieldExpression}=_t;},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/binding.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;exports.default=class{constructor({identifier,scope,path,kind}){this.identifier=void 0,this.scope=void 0,this.path=void 0,this.kind=void 0,this.constantViolations=[],this.constant=!0,this.referencePaths=[],this.referenced=!1,this.references=0,this.identifier=identifier,this.scope=scope,this.path=path,this.kind=kind,"var"!==kind&&"hoisted"!==kind||!function(path){for(let{parentPath,key}=path;parentPath;({parentPath,key}=parentPath)){if(parentPath.isFunctionParent())return !1;if(parentPath.isWhile()||parentPath.isForXStatement()||parentPath.isForStatement()&&"body"===key)return !0}return !1}(path||(()=>{throw new Error("Internal Babel error: unreachable ")})())||this.reassign(path),this.clearValue();}deoptValue(){this.clearValue(),this.hasDeoptedValue=!0;}setValue(value){this.hasDeoptedValue||(this.hasValue=!0,this.value=value);}clearValue(){this.hasDeoptedValue=!1,this.hasValue=!1,this.value=null;}reassign(path){this.constant=!1,-1===this.constantViolations.indexOf(path)&&this.constantViolations.push(path);}reference(path){-1===this.referencePaths.indexOf(path)&&(this.referenced=!0,this.references++,this.referencePaths.push(path));}dereference(){this.references--,this.referenced=!!this.references;}};},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _renamer=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/lib/renamer.js"),_index=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/index.js"),_binding=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/binding.js"),_globals=__webpack_require__("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_cache=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/cache.js");const{NOT_LOCAL_BINDING,callExpression,cloneNode,getBindingIdentifiers,identifier,isArrayExpression,isBinary,isClass,isClassBody,isClassDeclaration,isExportAllDeclaration,isExportDefaultDeclaration,isExportNamedDeclaration,isFunctionDeclaration,isIdentifier,isImportDeclaration,isLiteral,isMethod,isModuleSpecifier,isNullLiteral,isObjectExpression,isProperty,isPureish,isRegExpLiteral,isSuper,isTaggedTemplateExpression,isTemplateLiteral,isThisExpression,isUnaryExpression,isVariableDeclaration,matchesPattern,memberExpression,numericLiteral,toIdentifier,unaryExpression,variableDeclaration,variableDeclarator,isRecordExpression,isTupleExpression,isObjectProperty,isTopicReference,isMetaProperty,isPrivateName,isExportDeclaration}=_t;function gatherNodeParts(node,parts){switch(null==node?void 0:node.type){default:if(isImportDeclaration(node)||isExportDeclaration(node))if((isExportAllDeclaration(node)||isExportNamedDeclaration(node)||isImportDeclaration(node))&&node.source)gatherNodeParts(node.source,parts);else if((isExportNamedDeclaration(node)||isImportDeclaration(node))&&node.specifiers&&node.specifiers.length)for(const e of node.specifiers)gatherNodeParts(e,parts);else (isExportDefaultDeclaration(node)||isExportNamedDeclaration(node))&&node.declaration&&gatherNodeParts(node.declaration,parts);else isModuleSpecifier(node)?gatherNodeParts(node.local,parts):!isLiteral(node)||isNullLiteral(node)||isRegExpLiteral(node)||isTemplateLiteral(node)||parts.push(node.value);break;case"MemberExpression":case"OptionalMemberExpression":case"JSXMemberExpression":gatherNodeParts(node.object,parts),gatherNodeParts(node.property,parts);break;case"Identifier":case"JSXIdentifier":parts.push(node.name);break;case"CallExpression":case"OptionalCallExpression":case"NewExpression":gatherNodeParts(node.callee,parts);break;case"ObjectExpression":case"ObjectPattern":for(const e of node.properties)gatherNodeParts(e,parts);break;case"SpreadElement":case"RestElement":case"UnaryExpression":case"UpdateExpression":gatherNodeParts(node.argument,parts);break;case"ObjectProperty":case"ObjectMethod":case"ClassProperty":case"ClassMethod":case"ClassPrivateProperty":case"ClassPrivateMethod":gatherNodeParts(node.key,parts);break;case"ThisExpression":parts.push("this");break;case"Super":parts.push("super");break;case"Import":parts.push("import");break;case"DoExpression":parts.push("do");break;case"YieldExpression":parts.push("yield"),gatherNodeParts(node.argument,parts);break;case"AwaitExpression":parts.push("await"),gatherNodeParts(node.argument,parts);break;case"AssignmentExpression":gatherNodeParts(node.left,parts);break;case"VariableDeclarator":case"FunctionExpression":case"FunctionDeclaration":case"ClassExpression":case"ClassDeclaration":case"PrivateName":gatherNodeParts(node.id,parts);break;case"ParenthesizedExpression":gatherNodeParts(node.expression,parts);break;case"MetaProperty":gatherNodeParts(node.meta,parts),gatherNodeParts(node.property,parts);break;case"JSXElement":gatherNodeParts(node.openingElement,parts);break;case"JSXOpeningElement":gatherNodeParts(node.name,parts);break;case"JSXFragment":gatherNodeParts(node.openingFragment,parts);break;case"JSXOpeningFragment":parts.push("Fragment");break;case"JSXNamespacedName":gatherNodeParts(node.namespace,parts),gatherNodeParts(node.name,parts);}}const collectorVisitor={ForStatement(path){const declar=path.get("init");if(declar.isVar()){const{scope}=path;(scope.getFunctionParent()||scope.getProgramParent()).registerBinding("var",declar);}},Declaration(path){if(path.isBlockScoped())return;if(path.isImportDeclaration())return;if(path.isExportDeclaration())return;(path.scope.getFunctionParent()||path.scope.getProgramParent()).registerDeclaration(path);},ImportDeclaration(path){path.scope.getBlockParent().registerDeclaration(path);},ReferencedIdentifier(path,state){state.references.push(path);},ForXStatement(path,state){const left=path.get("left");if(left.isPattern()||left.isIdentifier())state.constantViolations.push(path);else if(left.isVar()){const{scope}=path;(scope.getFunctionParent()||scope.getProgramParent()).registerBinding("var",left);}},ExportDeclaration:{exit(path){const{node,scope}=path;if(isExportAllDeclaration(node))return;const declar=node.declaration;if(isClassDeclaration(declar)||isFunctionDeclaration(declar)){const id=declar.id;if(!id)return;const binding=scope.getBinding(id.name);null==binding||binding.reference(path);}else if(isVariableDeclaration(declar))for(const decl of declar.declarations)for(const name of Object.keys(getBindingIdentifiers(decl))){const binding=scope.getBinding(name);null==binding||binding.reference(path);}}},LabeledStatement(path){path.scope.getBlockParent().registerDeclaration(path);},AssignmentExpression(path,state){state.assignments.push(path);},UpdateExpression(path,state){state.constantViolations.push(path);},UnaryExpression(path,state){"delete"===path.node.operator&&state.constantViolations.push(path);},BlockScoped(path){let scope=path.scope;scope.path===path&&(scope=scope.parent);if(scope.getBlockParent().registerDeclaration(path),path.isClassDeclaration()&&path.node.id){const name=path.node.id.name;path.scope.bindings[name]=path.scope.parent.getBinding(name);}},CatchClause(path){path.scope.registerBinding("let",path);},Function(path){const params=path.get("params");for(const param of params)path.scope.registerBinding("param",param);path.isFunctionExpression()&&path.has("id")&&!path.get("id").node[NOT_LOCAL_BINDING]&&path.scope.registerBinding("local",path.get("id"),path);},ClassExpression(path){path.has("id")&&!path.get("id").node[NOT_LOCAL_BINDING]&&path.scope.registerBinding("local",path);}};let uid=0;class Scope{constructor(path){this.uid=void 0,this.path=void 0,this.block=void 0,this.labels=void 0,this.inited=void 0,this.bindings=void 0,this.references=void 0,this.globals=void 0,this.uids=void 0,this.data=void 0,this.crawling=void 0;const{node}=path,cached=_cache.scope.get(node);if((null==cached?void 0:cached.path)===path)return cached;_cache.scope.set(node,this),this.uid=uid++,this.block=node,this.path=path,this.labels=new Map,this.inited=!1;}get parent(){var _parent;let parent,path=this.path;do{const shouldSkip="key"===path.key||"decorators"===path.listKey;path=path.parentPath,shouldSkip&&path.isMethod()&&(path=path.parentPath),path&&path.isScope()&&(parent=path);}while(path&&!parent);return null==(_parent=parent)?void 0:_parent.scope}get parentBlock(){return this.path.parent}get hub(){return this.path.hub}traverse(node,opts,state){(0, _index.default)(node,opts,this,state,this.path);}generateDeclaredUidIdentifier(name){const id=this.generateUidIdentifier(name);return this.push({id}),cloneNode(id)}generateUidIdentifier(name){return identifier(this.generateUid(name))}generateUid(name="temp"){let uid;name=toIdentifier(name).replace(/^_+/,"").replace(/[0-9]+$/g,"");let i=1;do{uid=this._generateUid(name,i),i++;}while(this.hasLabel(uid)||this.hasBinding(uid)||this.hasGlobal(uid)||this.hasReference(uid));const program=this.getProgramParent();return program.references[uid]=!0,program.uids[uid]=!0,uid}_generateUid(name,i){let id=name;return i>1&&(id+=i),`_${id}`}generateUidBasedOnNode(node,defaultName){const parts=[];gatherNodeParts(node,parts);let id=parts.join("$");return id=id.replace(/^_/,"")||defaultName||"ref",this.generateUid(id.slice(0,20))}generateUidIdentifierBasedOnNode(node,defaultName){return identifier(this.generateUidBasedOnNode(node,defaultName))}isStatic(node){if(isThisExpression(node)||isSuper(node)||isTopicReference(node))return !0;if(isIdentifier(node)){const binding=this.getBinding(node.name);return binding?binding.constant:this.hasBinding(node.name)}return !1}maybeGenerateMemoised(node,dontPush){if(this.isStatic(node))return null;{const id=this.generateUidIdentifierBasedOnNode(node);return dontPush?id:(this.push({id}),cloneNode(id))}}checkBlockScopedCollisions(local,kind,name,id){if("param"===kind)return;if("local"===local.kind)return;if("let"===kind||"let"===local.kind||"const"===local.kind||"module"===local.kind||"param"===local.kind&&"const"===kind)throw this.hub.buildError(id,`Duplicate declaration "${name}"`,TypeError)}rename(oldName,newName){const binding=this.getBinding(oldName);if(binding){newName||(newName=this.generateUidIdentifier(oldName).name);new _renamer.default(binding,oldName,newName).rename(arguments[2]);}}_renameFromMap(map,oldName,newName,value){map[oldName]&&(map[newName]=value,map[oldName]=null);}dump(){const sep="-".repeat(60);console.log(sep);let scope=this;do{console.log("#",scope.block.type);for(const name of Object.keys(scope.bindings)){const binding=scope.bindings[name];console.log(" -",name,{constant:binding.constant,references:binding.references,violations:binding.constantViolations.length,kind:binding.kind});}}while(scope=scope.parent);console.log(sep);}toArray(node,i,arrayLikeIsIterable){if(isIdentifier(node)){const binding=this.getBinding(node.name);if(null!=binding&&binding.constant&&binding.path.isGenericType("Array"))return node}if(isArrayExpression(node))return node;if(isIdentifier(node,{name:"arguments"}))return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"),identifier("prototype")),identifier("slice")),identifier("call")),[node]);let helperName;const args=[node];return !0===i?helperName="toConsumableArray":"number"==typeof i?(args.push(numericLiteral(i)),helperName="slicedToArray"):helperName="toArray",arrayLikeIsIterable&&(args.unshift(this.hub.addHelper(helperName)),helperName="maybeArrayLike"),callExpression(this.hub.addHelper(helperName),args)}hasLabel(name){return !!this.getLabel(name)}getLabel(name){return this.labels.get(name)}registerLabel(path){this.labels.set(path.node.label.name,path);}registerDeclaration(path){if(path.isLabeledStatement())this.registerLabel(path);else if(path.isFunctionDeclaration())this.registerBinding("hoisted",path.get("id"),path);else if(path.isVariableDeclaration()){const declarations=path.get("declarations"),{kind}=path.node;for(const declar of declarations)this.registerBinding("using"===kind?"const":kind,declar);}else if(path.isClassDeclaration()){if(path.node.declare)return;this.registerBinding("let",path);}else if(path.isImportDeclaration()){const isTypeDeclaration="type"===path.node.importKind||"typeof"===path.node.importKind,specifiers=path.get("specifiers");for(const specifier of specifiers){const isTypeSpecifier=isTypeDeclaration||specifier.isImportSpecifier()&&("type"===specifier.node.importKind||"typeof"===specifier.node.importKind);this.registerBinding(isTypeSpecifier?"unknown":"module",specifier);}}else if(path.isExportDeclaration()){const declar=path.get("declaration");(declar.isClassDeclaration()||declar.isFunctionDeclaration()||declar.isVariableDeclaration())&&this.registerDeclaration(declar);}else this.registerBinding("unknown",path);}buildUndefinedNode(){return unaryExpression("void",numericLiteral(0),!0)}registerConstantViolation(path){const ids=path.getBindingIdentifiers();for(const name of Object.keys(ids)){const binding=this.getBinding(name);binding&&binding.reassign(path);}}registerBinding(kind,path,bindingPath=path){if(!kind)throw new ReferenceError("no `kind`");if(path.isVariableDeclaration()){const declarators=path.get("declarations");for(const declar of declarators)this.registerBinding(kind,declar);return}const parent=this.getProgramParent(),ids=path.getOuterBindingIdentifiers(!0);for(const name of Object.keys(ids)){parent.references[name]=!0;for(const id of ids[name]){const local=this.getOwnBinding(name);if(local){if(local.identifier===id)continue;this.checkBlockScopedCollisions(local,kind,name,id);}local?this.registerConstantViolation(bindingPath):this.bindings[name]=new _binding.default({identifier:id,scope:this,path:bindingPath,kind});}}}addGlobal(node){this.globals[node.name]=node;}hasUid(name){let scope=this;do{if(scope.uids[name])return !0}while(scope=scope.parent);return !1}hasGlobal(name){let scope=this;do{if(scope.globals[name])return !0}while(scope=scope.parent);return !1}hasReference(name){return !!this.getProgramParent().references[name]}isPure(node,constantsOnly){if(isIdentifier(node)){const binding=this.getBinding(node.name);return !!binding&&(!constantsOnly||binding.constant)}if(isThisExpression(node)||isMetaProperty(node)||isTopicReference(node)||isPrivateName(node))return !0;var _node$decorators,_node$decorators2,_node$decorators3;if(isClass(node))return !(node.superClass&&!this.isPure(node.superClass,constantsOnly))&&(!((null==(_node$decorators=node.decorators)?void 0:_node$decorators.length)>0)&&this.isPure(node.body,constantsOnly));if(isClassBody(node)){for(const method of node.body)if(!this.isPure(method,constantsOnly))return !1;return !0}if(isBinary(node))return this.isPure(node.left,constantsOnly)&&this.isPure(node.right,constantsOnly);if(isArrayExpression(node)||isTupleExpression(node)){for(const elem of node.elements)if(null!==elem&&!this.isPure(elem,constantsOnly))return !1;return !0}if(isObjectExpression(node)||isRecordExpression(node)){for(const prop of node.properties)if(!this.isPure(prop,constantsOnly))return !1;return !0}if(isMethod(node))return !(node.computed&&!this.isPure(node.key,constantsOnly))&&!((null==(_node$decorators2=node.decorators)?void 0:_node$decorators2.length)>0);if(isProperty(node))return !(node.computed&&!this.isPure(node.key,constantsOnly))&&(!((null==(_node$decorators3=node.decorators)?void 0:_node$decorators3.length)>0)&&!((isObjectProperty(node)||node.static)&&null!==node.value&&!this.isPure(node.value,constantsOnly)));if(isUnaryExpression(node))return this.isPure(node.argument,constantsOnly);if(isTaggedTemplateExpression(node))return matchesPattern(node.tag,"String.raw")&&!this.hasBinding("String",!0)&&this.isPure(node.quasi,constantsOnly);if(isTemplateLiteral(node)){for(const expression of node.expressions)if(!this.isPure(expression,constantsOnly))return !1;return !0}return isPureish(node)}setData(key,val){return this.data[key]=val}getData(key){let scope=this;do{const data=scope.data[key];if(null!=data)return data}while(scope=scope.parent)}removeData(key){let scope=this;do{null!=scope.data[key]&&(scope.data[key]=null);}while(scope=scope.parent)}init(){this.inited||(this.inited=!0,this.crawl());}crawl(){const path=this.path;this.references=Object.create(null),this.bindings=Object.create(null),this.globals=Object.create(null),this.uids=Object.create(null),this.data=Object.create(null);const programParent=this.getProgramParent();if(programParent.crawling)return;const state={references:[],constantViolations:[],assignments:[]};if(this.crawling=!0,"Program"!==path.type&&collectorVisitor._exploded){for(const visit of collectorVisitor.enter)visit(path,state);const typeVisitors=collectorVisitor[path.type];if(typeVisitors)for(const visit of typeVisitors.enter)visit(path,state);}path.traverse(collectorVisitor,state),this.crawling=!1;for(const path of state.assignments){const ids=path.getBindingIdentifiers();for(const name of Object.keys(ids))path.scope.getBinding(name)||programParent.addGlobal(ids[name]);path.scope.registerConstantViolation(path);}for(const ref of state.references){const binding=ref.scope.getBinding(ref.node.name);binding?binding.reference(ref):programParent.addGlobal(ref.node);}for(const path of state.constantViolations)path.scope.registerConstantViolation(path);}push(opts){let path=this.path;path.isPattern()?path=this.getPatternParent().path:path.isBlockStatement()||path.isProgram()||(path=this.getBlockParent().path),path.isSwitchStatement()&&(path=(this.getFunctionParent()||this.getProgramParent()).path),(path.isLoop()||path.isCatchClause()||path.isFunction())&&(path.ensureBlock(),path=path.get("body"));const unique=opts.unique,kind=opts.kind||"var",blockHoist=null==opts._blockHoist?2:opts._blockHoist,dataKey=`declaration:${kind}:${blockHoist}`;let declarPath=!unique&&path.getData(dataKey);if(!declarPath){const declar=variableDeclaration(kind,[]);declar._blockHoist=blockHoist,[declarPath]=path.unshiftContainer("body",[declar]),unique||path.setData(dataKey,declarPath);}const declarator=variableDeclarator(opts.id,opts.init),len=declarPath.node.declarations.push(declarator);path.scope.registerBinding(kind,declarPath.get("declarations")[len-1]);}getProgramParent(){let scope=this;do{if(scope.path.isProgram())return scope}while(scope=scope.parent);throw new Error("Couldn't find a Program")}getFunctionParent(){let scope=this;do{if(scope.path.isFunctionParent())return scope}while(scope=scope.parent);return null}getBlockParent(){let scope=this;do{if(scope.path.isBlockParent())return scope}while(scope=scope.parent);throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...")}getPatternParent(){let scope=this;do{if(!scope.path.isPattern())return scope.getBlockParent()}while(scope=scope.parent.parent);throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...")}getAllBindings(){const ids=Object.create(null);let scope=this;do{for(const key of Object.keys(scope.bindings))key in ids==!1&&(ids[key]=scope.bindings[key]);scope=scope.parent;}while(scope);return ids}getAllBindingsOfKind(...kinds){const ids=Object.create(null);for(const kind of kinds){let scope=this;do{for(const name of Object.keys(scope.bindings)){const binding=scope.bindings[name];binding.kind===kind&&(ids[name]=binding);}scope=scope.parent;}while(scope)}return ids}bindingIdentifierEquals(name,node){return this.getBindingIdentifier(name)===node}getBinding(name){let previousPath,scope=this;do{const binding=scope.getOwnBinding(name);var _previousPath;if(binding){if(null==(_previousPath=previousPath)||!_previousPath.isPattern()||"param"===binding.kind||"local"===binding.kind)return binding}else if(!binding&&"arguments"===name&&scope.path.isFunction()&&!scope.path.isArrowFunctionExpression())break;previousPath=scope.path;}while(scope=scope.parent)}getOwnBinding(name){return this.bindings[name]}getBindingIdentifier(name){var _this$getBinding;return null==(_this$getBinding=this.getBinding(name))?void 0:_this$getBinding.identifier}getOwnBindingIdentifier(name){const binding=this.bindings[name];return null==binding?void 0:binding.identifier}hasOwnBinding(name){return !!this.getOwnBinding(name)}hasBinding(name,opts){var _opts,_opts2,_opts3;return !!name&&(!!this.hasOwnBinding(name)||("boolean"==typeof opts&&(opts={noGlobals:opts}),!!this.parentHasBinding(name,opts)||(!(null!=(_opts=opts)&&_opts.noUids||!this.hasUid(name))||(!(null!=(_opts2=opts)&&_opts2.noGlobals||!Scope.globals.includes(name))||!(null!=(_opts3=opts)&&_opts3.noGlobals||!Scope.contextVariables.includes(name))))))}parentHasBinding(name,opts){var _this$parent;return null==(_this$parent=this.parent)?void 0:_this$parent.hasBinding(name,opts)}moveBindingTo(name,scope){const info=this.getBinding(name);info&&(info.scope.removeOwnBinding(name),info.scope=scope,scope.bindings[name]=info);}removeOwnBinding(name){delete this.bindings[name];}removeBinding(name){var _this$getBinding2;null==(_this$getBinding2=this.getBinding(name))||_this$getBinding2.scope.removeOwnBinding(name);let scope=this;do{scope.uids[name]&&(scope.uids[name]=!1);}while(scope=scope.parent)}}exports.default=Scope,Scope.globals=Object.keys(_globals.builtin),Scope.contextVariables=["arguments","undefined","Infinity","NaN"];},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/scope/lib/renamer.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _helperSplitExportDeclaration=__webpack_require__("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js"),t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js"),_helperEnvironmentVisitor=__webpack_require__("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"),_traverseNode=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/traverse-node.js"),_visitors=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/visitors.js");const renameVisitor={ReferencedIdentifier({node},state){node.name===state.oldName&&(node.name=state.newName);},Scope(path,state){path.scope.bindingIdentifierEquals(state.oldName,state.binding.identifier)||(path.skip(),path.isMethod()&&(0, _helperEnvironmentVisitor.requeueComputedKeyAndDecorators)(path));},"AssignmentExpression|Declaration|VariableDeclarator"(path,state){if(path.isVariableDeclaration())return;const ids=path.getOuterBindingIdentifiers();for(const name in ids)name===state.oldName&&(ids[name].name=state.newName);}};exports.default=class{constructor(binding,oldName,newName){this.newName=newName,this.oldName=oldName,this.binding=binding;}maybeConvertFromExportDeclaration(parentDeclar){const maybeExportDeclar=parentDeclar.parentPath;if(maybeExportDeclar.isExportDeclaration()){if(maybeExportDeclar.isExportDefaultDeclaration()){const{declaration}=maybeExportDeclar.node;if(t.isDeclaration(declaration)&&!declaration.id)return}maybeExportDeclar.isExportAllDeclaration()||(0, _helperSplitExportDeclaration.default)(maybeExportDeclar);}}maybeConvertFromClassFunctionDeclaration(path){return path}maybeConvertFromClassFunctionExpression(path){return path}rename(){const{binding,oldName,newName}=this,{scope,path}=binding,parentDeclar=path.find((path=>path.isDeclaration()||path.isFunctionExpression()||path.isClassExpression()));if(parentDeclar){parentDeclar.getOuterBindingIdentifiers()[oldName]===binding.identifier&&this.maybeConvertFromExportDeclaration(parentDeclar);}const blockToTraverse=arguments[0]||scope.block;(0, _traverseNode.traverseNode)(blockToTraverse,(0, _visitors.explode)(renameVisitor),scope,this,scope.path,{discriminant:!0}),arguments[0]||(scope.removeOwnBinding(oldName),scope.bindings[newName]=binding,this.binding.identifier.name=newName),parentDeclar&&(this.maybeConvertFromClassFunctionDeclaration(path),this.maybeConvertFromClassFunctionExpression(path));}};},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/traverse-node.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.traverseNode=function(node,opts,scope,state,path,skipKeys){const keys=VISITOR_KEYS[node.type];if(!keys)return !1;const context=new _context.default(scope,opts,state,path);for(const key of keys)if((!skipKeys||!skipKeys[key])&&context.visit(node,key))return !0;return !1};var _context=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/context.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{VISITOR_KEYS}=_t;},"./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/visitors.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.explode=explode,exports.merge=function(visitors,states=[],wrapper){const rootVisitor={};for(let i=0;i<visitors.length;i++){const visitor=visitors[i],state=states[i];explode(visitor);for(const type of Object.keys(visitor)){let visitorType=visitor[type];(state||wrapper)&&(visitorType=wrapWithStateOrWrapper(visitorType,state,wrapper));mergePair(rootVisitor[type]||(rootVisitor[type]={}),visitorType);}}return rootVisitor},exports.verify=verify;var virtualTypes=__webpack_require__("./node_modules/.pnpm/@babel+traverse@7.21.3/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"),_t=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");const{DEPRECATED_KEYS,DEPRECATED_ALIASES,FLIPPED_ALIAS_KEYS,TYPES,__internal__deprecationWarning:deprecationWarning}=_t;function explode(visitor){if(visitor._exploded)return visitor;visitor._exploded=!0;for(const nodeType of Object.keys(visitor)){if(shouldIgnoreKey(nodeType))continue;const parts=nodeType.split("|");if(1===parts.length)continue;const fns=visitor[nodeType];delete visitor[nodeType];for(const part of parts)visitor[part]=fns;}verify(visitor),delete visitor.__esModule,function(obj){for(const key of Object.keys(obj)){if(shouldIgnoreKey(key))continue;const fns=obj[key];"function"==typeof fns&&(obj[key]={enter:fns});}}(visitor),ensureCallbackArrays(visitor);for(const nodeType of Object.keys(visitor)){if(shouldIgnoreKey(nodeType))continue;if(!(nodeType in virtualTypes))continue;const fns=visitor[nodeType];for(const type of Object.keys(fns))fns[type]=wrapCheck(nodeType,fns[type]);delete visitor[nodeType];const types=virtualTypes[nodeType];if(null!==types)for(const type of types)visitor[type]?mergePair(visitor[type],fns):visitor[type]=fns;else mergePair(visitor,fns);}for(const nodeType of Object.keys(visitor)){if(shouldIgnoreKey(nodeType))continue;let aliases=FLIPPED_ALIAS_KEYS[nodeType];if(nodeType in DEPRECATED_KEYS){const deprecatedKey=DEPRECATED_KEYS[nodeType];deprecationWarning(nodeType,deprecatedKey,"Visitor "),aliases=[deprecatedKey];}else if(nodeType in DEPRECATED_ALIASES){const deprecatedAlias=DEPRECATED_ALIASES[nodeType];deprecationWarning(nodeType,deprecatedAlias,"Visitor "),aliases=FLIPPED_ALIAS_KEYS[deprecatedAlias];}if(!aliases)continue;const fns=visitor[nodeType];delete visitor[nodeType];for(const alias of aliases){const existing=visitor[alias];existing?mergePair(existing,fns):visitor[alias]=Object.assign({},fns);}}for(const nodeType of Object.keys(visitor))shouldIgnoreKey(nodeType)||ensureCallbackArrays(visitor[nodeType]);return visitor}function verify(visitor){if(!visitor._verified){if("function"==typeof visitor)throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");for(const nodeType of Object.keys(visitor)){if("enter"!==nodeType&&"exit"!==nodeType||validateVisitorMethods(nodeType,visitor[nodeType]),shouldIgnoreKey(nodeType))continue;if(TYPES.indexOf(nodeType)<0)throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type`);const visitors=visitor[nodeType];if("object"==typeof visitors)for(const visitorKey of Object.keys(visitors)){if("enter"!==visitorKey&&"exit"!==visitorKey)throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);validateVisitorMethods(`${nodeType}.${visitorKey}`,visitors[visitorKey]);}}visitor._verified=!0;}}function validateVisitorMethods(path,val){const fns=[].concat(val);for(const fn of fns)if("function"!=typeof fn)throw new TypeError(`Non-function found defined in ${path} with type ${typeof fn}`)}function wrapWithStateOrWrapper(oldVisitor,state,wrapper){const newVisitor={};for(const key of Object.keys(oldVisitor)){let fns=oldVisitor[key];Array.isArray(fns)&&(fns=fns.map((function(fn){let newFn=fn;return state&&(newFn=function(path){return fn.call(state,path,state)}),wrapper&&(newFn=wrapper(state.key,key,newFn)),newFn!==fn&&(newFn.toString=()=>fn.toString()),newFn})),newVisitor[key]=fns);}return newVisitor}function ensureCallbackArrays(obj){obj.enter&&!Array.isArray(obj.enter)&&(obj.enter=[obj.enter]),obj.exit&&!Array.isArray(obj.exit)&&(obj.exit=[obj.exit]);}function wrapCheck(nodeType,fn){const newFn=function(path){if(path[`is${nodeType}`]())return fn.apply(this,arguments)};return newFn.toString=()=>fn.toString(),newFn}function shouldIgnoreKey(key){return "_"===key[0]||("enter"===key||"exit"===key||"shouldSkip"===key||("denylist"===key||"noScope"===key||"skipKeys"===key||"blacklist"===key))}function mergePair(dest,src){for(const key of Object.keys(src))dest[key]=[].concat(dest[key]||[],src[key]);}},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/asserts/assertNode.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){if(!(0, _isNode.default)(node)){var _node$type;const type=null!=(_node$type=null==node?void 0:node.type)?_node$type:JSON.stringify(node);throw new TypeError(`Not a valid node of type "${type}"`)}};var _isNode=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isNode.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/asserts/generated/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.assertAccessor=function(node,opts){assert("Accessor",node,opts);},exports.assertAnyTypeAnnotation=function(node,opts){assert("AnyTypeAnnotation",node,opts);},exports.assertArgumentPlaceholder=function(node,opts){assert("ArgumentPlaceholder",node,opts);},exports.assertArrayExpression=function(node,opts){assert("ArrayExpression",node,opts);},exports.assertArrayPattern=function(node,opts){assert("ArrayPattern",node,opts);},exports.assertArrayTypeAnnotation=function(node,opts){assert("ArrayTypeAnnotation",node,opts);},exports.assertArrowFunctionExpression=function(node,opts){assert("ArrowFunctionExpression",node,opts);},exports.assertAssignmentExpression=function(node,opts){assert("AssignmentExpression",node,opts);},exports.assertAssignmentPattern=function(node,opts){assert("AssignmentPattern",node,opts);},exports.assertAwaitExpression=function(node,opts){assert("AwaitExpression",node,opts);},exports.assertBigIntLiteral=function(node,opts){assert("BigIntLiteral",node,opts);},exports.assertBinary=function(node,opts){assert("Binary",node,opts);},exports.assertBinaryExpression=function(node,opts){assert("BinaryExpression",node,opts);},exports.assertBindExpression=function(node,opts){assert("BindExpression",node,opts);},exports.assertBlock=function(node,opts){assert("Block",node,opts);},exports.assertBlockParent=function(node,opts){assert("BlockParent",node,opts);},exports.assertBlockStatement=function(node,opts){assert("BlockStatement",node,opts);},exports.assertBooleanLiteral=function(node,opts){assert("BooleanLiteral",node,opts);},exports.assertBooleanLiteralTypeAnnotation=function(node,opts){assert("BooleanLiteralTypeAnnotation",node,opts);},exports.assertBooleanTypeAnnotation=function(node,opts){assert("BooleanTypeAnnotation",node,opts);},exports.assertBreakStatement=function(node,opts){assert("BreakStatement",node,opts);},exports.assertCallExpression=function(node,opts){assert("CallExpression",node,opts);},exports.assertCatchClause=function(node,opts){assert("CatchClause",node,opts);},exports.assertClass=function(node,opts){assert("Class",node,opts);},exports.assertClassAccessorProperty=function(node,opts){assert("ClassAccessorProperty",node,opts);},exports.assertClassBody=function(node,opts){assert("ClassBody",node,opts);},exports.assertClassDeclaration=function(node,opts){assert("ClassDeclaration",node,opts);},exports.assertClassExpression=function(node,opts){assert("ClassExpression",node,opts);},exports.assertClassImplements=function(node,opts){assert("ClassImplements",node,opts);},exports.assertClassMethod=function(node,opts){assert("ClassMethod",node,opts);},exports.assertClassPrivateMethod=function(node,opts){assert("ClassPrivateMethod",node,opts);},exports.assertClassPrivateProperty=function(node,opts){assert("ClassPrivateProperty",node,opts);},exports.assertClassProperty=function(node,opts){assert("ClassProperty",node,opts);},exports.assertCompletionStatement=function(node,opts){assert("CompletionStatement",node,opts);},exports.assertConditional=function(node,opts){assert("Conditional",node,opts);},exports.assertConditionalExpression=function(node,opts){assert("ConditionalExpression",node,opts);},exports.assertContinueStatement=function(node,opts){assert("ContinueStatement",node,opts);},exports.assertDebuggerStatement=function(node,opts){assert("DebuggerStatement",node,opts);},exports.assertDecimalLiteral=function(node,opts){assert("DecimalLiteral",node,opts);},exports.assertDeclaration=function(node,opts){assert("Declaration",node,opts);},exports.assertDeclareClass=function(node,opts){assert("DeclareClass",node,opts);},exports.assertDeclareExportAllDeclaration=function(node,opts){assert("DeclareExportAllDeclaration",node,opts);},exports.assertDeclareExportDeclaration=function(node,opts){assert("DeclareExportDeclaration",node,opts);},exports.assertDeclareFunction=function(node,opts){assert("DeclareFunction",node,opts);},exports.assertDeclareInterface=function(node,opts){assert("DeclareInterface",node,opts);},exports.assertDeclareModule=function(node,opts){assert("DeclareModule",node,opts);},exports.assertDeclareModuleExports=function(node,opts){assert("DeclareModuleExports",node,opts);},exports.assertDeclareOpaqueType=function(node,opts){assert("DeclareOpaqueType",node,opts);},exports.assertDeclareTypeAlias=function(node,opts){assert("DeclareTypeAlias",node,opts);},exports.assertDeclareVariable=function(node,opts){assert("DeclareVariable",node,opts);},exports.assertDeclaredPredicate=function(node,opts){assert("DeclaredPredicate",node,opts);},exports.assertDecorator=function(node,opts){assert("Decorator",node,opts);},exports.assertDirective=function(node,opts){assert("Directive",node,opts);},exports.assertDirectiveLiteral=function(node,opts){assert("DirectiveLiteral",node,opts);},exports.assertDoExpression=function(node,opts){assert("DoExpression",node,opts);},exports.assertDoWhileStatement=function(node,opts){assert("DoWhileStatement",node,opts);},exports.assertEmptyStatement=function(node,opts){assert("EmptyStatement",node,opts);},exports.assertEmptyTypeAnnotation=function(node,opts){assert("EmptyTypeAnnotation",node,opts);},exports.assertEnumBody=function(node,opts){assert("EnumBody",node,opts);},exports.assertEnumBooleanBody=function(node,opts){assert("EnumBooleanBody",node,opts);},exports.assertEnumBooleanMember=function(node,opts){assert("EnumBooleanMember",node,opts);},exports.assertEnumDeclaration=function(node,opts){assert("EnumDeclaration",node,opts);},exports.assertEnumDefaultedMember=function(node,opts){assert("EnumDefaultedMember",node,opts);},exports.assertEnumMember=function(node,opts){assert("EnumMember",node,opts);},exports.assertEnumNumberBody=function(node,opts){assert("EnumNumberBody",node,opts);},exports.assertEnumNumberMember=function(node,opts){assert("EnumNumberMember",node,opts);},exports.assertEnumStringBody=function(node,opts){assert("EnumStringBody",node,opts);},exports.assertEnumStringMember=function(node,opts){assert("EnumStringMember",node,opts);},exports.assertEnumSymbolBody=function(node,opts){assert("EnumSymbolBody",node,opts);},exports.assertExistsTypeAnnotation=function(node,opts){assert("ExistsTypeAnnotation",node,opts);},exports.assertExportAllDeclaration=function(node,opts){assert("ExportAllDeclaration",node,opts);},exports.assertExportDeclaration=function(node,opts){assert("ExportDeclaration",node,opts);},exports.assertExportDefaultDeclaration=function(node,opts){assert("ExportDefaultDeclaration",node,opts);},exports.assertExportDefaultSpecifier=function(node,opts){assert("ExportDefaultSpecifier",node,opts);},exports.assertExportNamedDeclaration=function(node,opts){assert("ExportNamedDeclaration",node,opts);},exports.assertExportNamespaceSpecifier=function(node,opts){assert("ExportNamespaceSpecifier",node,opts);},exports.assertExportSpecifier=function(node,opts){assert("ExportSpecifier",node,opts);},exports.assertExpression=function(node,opts){assert("Expression",node,opts);},exports.assertExpressionStatement=function(node,opts){assert("ExpressionStatement",node,opts);},exports.assertExpressionWrapper=function(node,opts){assert("ExpressionWrapper",node,opts);},exports.assertFile=function(node,opts){assert("File",node,opts);},exports.assertFlow=function(node,opts){assert("Flow",node,opts);},exports.assertFlowBaseAnnotation=function(node,opts){assert("FlowBaseAnnotation",node,opts);},exports.assertFlowDeclaration=function(node,opts){assert("FlowDeclaration",node,opts);},exports.assertFlowPredicate=function(node,opts){assert("FlowPredicate",node,opts);},exports.assertFlowType=function(node,opts){assert("FlowType",node,opts);},exports.assertFor=function(node,opts){assert("For",node,opts);},exports.assertForInStatement=function(node,opts){assert("ForInStatement",node,opts);},exports.assertForOfStatement=function(node,opts){assert("ForOfStatement",node,opts);},exports.assertForStatement=function(node,opts){assert("ForStatement",node,opts);},exports.assertForXStatement=function(node,opts){assert("ForXStatement",node,opts);},exports.assertFunction=function(node,opts){assert("Function",node,opts);},exports.assertFunctionDeclaration=function(node,opts){assert("FunctionDeclaration",node,opts);},exports.assertFunctionExpression=function(node,opts){assert("FunctionExpression",node,opts);},exports.assertFunctionParent=function(node,opts){assert("FunctionParent",node,opts);},exports.assertFunctionTypeAnnotation=function(node,opts){assert("FunctionTypeAnnotation",node,opts);},exports.assertFunctionTypeParam=function(node,opts){assert("FunctionTypeParam",node,opts);},exports.assertGenericTypeAnnotation=function(node,opts){assert("GenericTypeAnnotation",node,opts);},exports.assertIdentifier=function(node,opts){assert("Identifier",node,opts);},exports.assertIfStatement=function(node,opts){assert("IfStatement",node,opts);},exports.assertImmutable=function(node,opts){assert("Immutable",node,opts);},exports.assertImport=function(node,opts){assert("Import",node,opts);},exports.assertImportAttribute=function(node,opts){assert("ImportAttribute",node,opts);},exports.assertImportDeclaration=function(node,opts){assert("ImportDeclaration",node,opts);},exports.assertImportDefaultSpecifier=function(node,opts){assert("ImportDefaultSpecifier",node,opts);},exports.assertImportNamespaceSpecifier=function(node,opts){assert("ImportNamespaceSpecifier",node,opts);},exports.assertImportOrExportDeclaration=function(node,opts){assert("ImportOrExportDeclaration",node,opts);},exports.assertImportSpecifier=function(node,opts){assert("ImportSpecifier",node,opts);},exports.assertIndexedAccessType=function(node,opts){assert("IndexedAccessType",node,opts);},exports.assertInferredPredicate=function(node,opts){assert("InferredPredicate",node,opts);},exports.assertInterfaceDeclaration=function(node,opts){assert("InterfaceDeclaration",node,opts);},exports.assertInterfaceExtends=function(node,opts){assert("InterfaceExtends",node,opts);},exports.assertInterfaceTypeAnnotation=function(node,opts){assert("InterfaceTypeAnnotation",node,opts);},exports.assertInterpreterDirective=function(node,opts){assert("InterpreterDirective",node,opts);},exports.assertIntersectionTypeAnnotation=function(node,opts){assert("IntersectionTypeAnnotation",node,opts);},exports.assertJSX=function(node,opts){assert("JSX",node,opts);},exports.assertJSXAttribute=function(node,opts){assert("JSXAttribute",node,opts);},exports.assertJSXClosingElement=function(node,opts){assert("JSXClosingElement",node,opts);},exports.assertJSXClosingFragment=function(node,opts){assert("JSXClosingFragment",node,opts);},exports.assertJSXElement=function(node,opts){assert("JSXElement",node,opts);},exports.assertJSXEmptyExpression=function(node,opts){assert("JSXEmptyExpression",node,opts);},exports.assertJSXExpressionContainer=function(node,opts){assert("JSXExpressionContainer",node,opts);},exports.assertJSXFragment=function(node,opts){assert("JSXFragment",node,opts);},exports.assertJSXIdentifier=function(node,opts){assert("JSXIdentifier",node,opts);},exports.assertJSXMemberExpression=function(node,opts){assert("JSXMemberExpression",node,opts);},exports.assertJSXNamespacedName=function(node,opts){assert("JSXNamespacedName",node,opts);},exports.assertJSXOpeningElement=function(node,opts){assert("JSXOpeningElement",node,opts);},exports.assertJSXOpeningFragment=function(node,opts){assert("JSXOpeningFragment",node,opts);},exports.assertJSXSpreadAttribute=function(node,opts){assert("JSXSpreadAttribute",node,opts);},exports.assertJSXSpreadChild=function(node,opts){assert("JSXSpreadChild",node,opts);},exports.assertJSXText=function(node,opts){assert("JSXText",node,opts);},exports.assertLVal=function(node,opts){assert("LVal",node,opts);},exports.assertLabeledStatement=function(node,opts){assert("LabeledStatement",node,opts);},exports.assertLiteral=function(node,opts){assert("Literal",node,opts);},exports.assertLogicalExpression=function(node,opts){assert("LogicalExpression",node,opts);},exports.assertLoop=function(node,opts){assert("Loop",node,opts);},exports.assertMemberExpression=function(node,opts){assert("MemberExpression",node,opts);},exports.assertMetaProperty=function(node,opts){assert("MetaProperty",node,opts);},exports.assertMethod=function(node,opts){assert("Method",node,opts);},exports.assertMiscellaneous=function(node,opts){assert("Miscellaneous",node,opts);},exports.assertMixedTypeAnnotation=function(node,opts){assert("MixedTypeAnnotation",node,opts);},exports.assertModuleDeclaration=function(node,opts){(0, _deprecationWarning.default)("assertModuleDeclaration","assertImportOrExportDeclaration"),assert("ModuleDeclaration",node,opts);},exports.assertModuleExpression=function(node,opts){assert("ModuleExpression",node,opts);},exports.assertModuleSpecifier=function(node,opts){assert("ModuleSpecifier",node,opts);},exports.assertNewExpression=function(node,opts){assert("NewExpression",node,opts);},exports.assertNoop=function(node,opts){assert("Noop",node,opts);},exports.assertNullLiteral=function(node,opts){assert("NullLiteral",node,opts);},exports.assertNullLiteralTypeAnnotation=function(node,opts){assert("NullLiteralTypeAnnotation",node,opts);},exports.assertNullableTypeAnnotation=function(node,opts){assert("NullableTypeAnnotation",node,opts);},exports.assertNumberLiteral=function(node,opts){(0, _deprecationWarning.default)("assertNumberLiteral","assertNumericLiteral"),assert("NumberLiteral",node,opts);},exports.assertNumberLiteralTypeAnnotation=function(node,opts){assert("NumberLiteralTypeAnnotation",node,opts);},exports.assertNumberTypeAnnotation=function(node,opts){assert("NumberTypeAnnotation",node,opts);},exports.assertNumericLiteral=function(node,opts){assert("NumericLiteral",node,opts);},exports.assertObjectExpression=function(node,opts){assert("ObjectExpression",node,opts);},exports.assertObjectMember=function(node,opts){assert("ObjectMember",node,opts);},exports.assertObjectMethod=function(node,opts){assert("ObjectMethod",node,opts);},exports.assertObjectPattern=function(node,opts){assert("ObjectPattern",node,opts);},exports.assertObjectProperty=function(node,opts){assert("ObjectProperty",node,opts);},exports.assertObjectTypeAnnotation=function(node,opts){assert("ObjectTypeAnnotation",node,opts);},exports.assertObjectTypeCallProperty=function(node,opts){assert("ObjectTypeCallProperty",node,opts);},exports.assertObjectTypeIndexer=function(node,opts){assert("ObjectTypeIndexer",node,opts);},exports.assertObjectTypeInternalSlot=function(node,opts){assert("ObjectTypeInternalSlot",node,opts);},exports.assertObjectTypeProperty=function(node,opts){assert("ObjectTypeProperty",node,opts);},exports.assertObjectTypeSpreadProperty=function(node,opts){assert("ObjectTypeSpreadProperty",node,opts);},exports.assertOpaqueType=function(node,opts){assert("OpaqueType",node,opts);},exports.assertOptionalCallExpression=function(node,opts){assert("OptionalCallExpression",node,opts);},exports.assertOptionalIndexedAccessType=function(node,opts){assert("OptionalIndexedAccessType",node,opts);},exports.assertOptionalMemberExpression=function(node,opts){assert("OptionalMemberExpression",node,opts);},exports.assertParenthesizedExpression=function(node,opts){assert("ParenthesizedExpression",node,opts);},exports.assertPattern=function(node,opts){assert("Pattern",node,opts);},exports.assertPatternLike=function(node,opts){assert("PatternLike",node,opts);},exports.assertPipelineBareFunction=function(node,opts){assert("PipelineBareFunction",node,opts);},exports.assertPipelinePrimaryTopicReference=function(node,opts){assert("PipelinePrimaryTopicReference",node,opts);},exports.assertPipelineTopicExpression=function(node,opts){assert("PipelineTopicExpression",node,opts);},exports.assertPlaceholder=function(node,opts){assert("Placeholder",node,opts);},exports.assertPrivate=function(node,opts){assert("Private",node,opts);},exports.assertPrivateName=function(node,opts){assert("PrivateName",node,opts);},exports.assertProgram=function(node,opts){assert("Program",node,opts);},exports.assertProperty=function(node,opts){assert("Property",node,opts);},exports.assertPureish=function(node,opts){assert("Pureish",node,opts);},exports.assertQualifiedTypeIdentifier=function(node,opts){assert("QualifiedTypeIdentifier",node,opts);},exports.assertRecordExpression=function(node,opts){assert("RecordExpression",node,opts);},exports.assertRegExpLiteral=function(node,opts){assert("RegExpLiteral",node,opts);},exports.assertRegexLiteral=function(node,opts){(0, _deprecationWarning.default)("assertRegexLiteral","assertRegExpLiteral"),assert("RegexLiteral",node,opts);},exports.assertRestElement=function(node,opts){assert("RestElement",node,opts);},exports.assertRestProperty=function(node,opts){(0, _deprecationWarning.default)("assertRestProperty","assertRestElement"),assert("RestProperty",node,opts);},exports.assertReturnStatement=function(node,opts){assert("ReturnStatement",node,opts);},exports.assertScopable=function(node,opts){assert("Scopable",node,opts);},exports.assertSequenceExpression=function(node,opts){assert("SequenceExpression",node,opts);},exports.assertSpreadElement=function(node,opts){assert("SpreadElement",node,opts);},exports.assertSpreadProperty=function(node,opts){(0, _deprecationWarning.default)("assertSpreadProperty","assertSpreadElement"),assert("SpreadProperty",node,opts);},exports.assertStandardized=function(node,opts){assert("Standardized",node,opts);},exports.assertStatement=function(node,opts){assert("Statement",node,opts);},exports.assertStaticBlock=function(node,opts){assert("StaticBlock",node,opts);},exports.assertStringLiteral=function(node,opts){assert("StringLiteral",node,opts);},exports.assertStringLiteralTypeAnnotation=function(node,opts){assert("StringLiteralTypeAnnotation",node,opts);},exports.assertStringTypeAnnotation=function(node,opts){assert("StringTypeAnnotation",node,opts);},exports.assertSuper=function(node,opts){assert("Super",node,opts);},exports.assertSwitchCase=function(node,opts){assert("SwitchCase",node,opts);},exports.assertSwitchStatement=function(node,opts){assert("SwitchStatement",node,opts);},exports.assertSymbolTypeAnnotation=function(node,opts){assert("SymbolTypeAnnotation",node,opts);},exports.assertTSAnyKeyword=function(node,opts){assert("TSAnyKeyword",node,opts);},exports.assertTSArrayType=function(node,opts){assert("TSArrayType",node,opts);},exports.assertTSAsExpression=function(node,opts){assert("TSAsExpression",node,opts);},exports.assertTSBaseType=function(node,opts){assert("TSBaseType",node,opts);},exports.assertTSBigIntKeyword=function(node,opts){assert("TSBigIntKeyword",node,opts);},exports.assertTSBooleanKeyword=function(node,opts){assert("TSBooleanKeyword",node,opts);},exports.assertTSCallSignatureDeclaration=function(node,opts){assert("TSCallSignatureDeclaration",node,opts);},exports.assertTSConditionalType=function(node,opts){assert("TSConditionalType",node,opts);},exports.assertTSConstructSignatureDeclaration=function(node,opts){assert("TSConstructSignatureDeclaration",node,opts);},exports.assertTSConstructorType=function(node,opts){assert("TSConstructorType",node,opts);},exports.assertTSDeclareFunction=function(node,opts){assert("TSDeclareFunction",node,opts);},exports.assertTSDeclareMethod=function(node,opts){assert("TSDeclareMethod",node,opts);},exports.assertTSEntityName=function(node,opts){assert("TSEntityName",node,opts);},exports.assertTSEnumDeclaration=function(node,opts){assert("TSEnumDeclaration",node,opts);},exports.assertTSEnumMember=function(node,opts){assert("TSEnumMember",node,opts);},exports.assertTSExportAssignment=function(node,opts){assert("TSExportAssignment",node,opts);},exports.assertTSExpressionWithTypeArguments=function(node,opts){assert("TSExpressionWithTypeArguments",node,opts);},exports.assertTSExternalModuleReference=function(node,opts){assert("TSExternalModuleReference",node,opts);},exports.assertTSFunctionType=function(node,opts){assert("TSFunctionType",node,opts);},exports.assertTSImportEqualsDeclaration=function(node,opts){assert("TSImportEqualsDeclaration",node,opts);},exports.assertTSImportType=function(node,opts){assert("TSImportType",node,opts);},exports.assertTSIndexSignature=function(node,opts){assert("TSIndexSignature",node,opts);},exports.assertTSIndexedAccessType=function(node,opts){assert("TSIndexedAccessType",node,opts);},exports.assertTSInferType=function(node,opts){assert("TSInferType",node,opts);},exports.assertTSInstantiationExpression=function(node,opts){assert("TSInstantiationExpression",node,opts);},exports.assertTSInterfaceBody=function(node,opts){assert("TSInterfaceBody",node,opts);},exports.assertTSInterfaceDeclaration=function(node,opts){assert("TSInterfaceDeclaration",node,opts);},exports.assertTSIntersectionType=function(node,opts){assert("TSIntersectionType",node,opts);},exports.assertTSIntrinsicKeyword=function(node,opts){assert("TSIntrinsicKeyword",node,opts);},exports.assertTSLiteralType=function(node,opts){assert("TSLiteralType",node,opts);},exports.assertTSMappedType=function(node,opts){assert("TSMappedType",node,opts);},exports.assertTSMethodSignature=function(node,opts){assert("TSMethodSignature",node,opts);},exports.assertTSModuleBlock=function(node,opts){assert("TSModuleBlock",node,opts);},exports.assertTSModuleDeclaration=function(node,opts){assert("TSModuleDeclaration",node,opts);},exports.assertTSNamedTupleMember=function(node,opts){assert("TSNamedTupleMember",node,opts);},exports.assertTSNamespaceExportDeclaration=function(node,opts){assert("TSNamespaceExportDeclaration",node,opts);},exports.assertTSNeverKeyword=function(node,opts){assert("TSNeverKeyword",node,opts);},exports.assertTSNonNullExpression=function(node,opts){assert("TSNonNullExpression",node,opts);},exports.assertTSNullKeyword=function(node,opts){assert("TSNullKeyword",node,opts);},exports.assertTSNumberKeyword=function(node,opts){assert("TSNumberKeyword",node,opts);},exports.assertTSObjectKeyword=function(node,opts){assert("TSObjectKeyword",node,opts);},exports.assertTSOptionalType=function(node,opts){assert("TSOptionalType",node,opts);},exports.assertTSParameterProperty=function(node,opts){assert("TSParameterProperty",node,opts);},exports.assertTSParenthesizedType=function(node,opts){assert("TSParenthesizedType",node,opts);},exports.assertTSPropertySignature=function(node,opts){assert("TSPropertySignature",node,opts);},exports.assertTSQualifiedName=function(node,opts){assert("TSQualifiedName",node,opts);},exports.assertTSRestType=function(node,opts){assert("TSRestType",node,opts);},exports.assertTSSatisfiesExpression=function(node,opts){assert("TSSatisfiesExpression",node,opts);},exports.assertTSStringKeyword=function(node,opts){assert("TSStringKeyword",node,opts);},exports.assertTSSymbolKeyword=function(node,opts){assert("TSSymbolKeyword",node,opts);},exports.assertTSThisType=function(node,opts){assert("TSThisType",node,opts);},exports.assertTSTupleType=function(node,opts){assert("TSTupleType",node,opts);},exports.assertTSType=function(node,opts){assert("TSType",node,opts);},exports.assertTSTypeAliasDeclaration=function(node,opts){assert("TSTypeAliasDeclaration",node,opts);},exports.assertTSTypeAnnotation=function(node,opts){assert("TSTypeAnnotation",node,opts);},exports.assertTSTypeAssertion=function(node,opts){assert("TSTypeAssertion",node,opts);},exports.assertTSTypeElement=function(node,opts){assert("TSTypeElement",node,opts);},exports.assertTSTypeLiteral=function(node,opts){assert("TSTypeLiteral",node,opts);},exports.assertTSTypeOperator=function(node,opts){assert("TSTypeOperator",node,opts);},exports.assertTSTypeParameter=function(node,opts){assert("TSTypeParameter",node,opts);},exports.assertTSTypeParameterDeclaration=function(node,opts){assert("TSTypeParameterDeclaration",node,opts);},exports.assertTSTypeParameterInstantiation=function(node,opts){assert("TSTypeParameterInstantiation",node,opts);},exports.assertTSTypePredicate=function(node,opts){assert("TSTypePredicate",node,opts);},exports.assertTSTypeQuery=function(node,opts){assert("TSTypeQuery",node,opts);},exports.assertTSTypeReference=function(node,opts){assert("TSTypeReference",node,opts);},exports.assertTSUndefinedKeyword=function(node,opts){assert("TSUndefinedKeyword",node,opts);},exports.assertTSUnionType=function(node,opts){assert("TSUnionType",node,opts);},exports.assertTSUnknownKeyword=function(node,opts){assert("TSUnknownKeyword",node,opts);},exports.assertTSVoidKeyword=function(node,opts){assert("TSVoidKeyword",node,opts);},exports.assertTaggedTemplateExpression=function(node,opts){assert("TaggedTemplateExpression",node,opts);},exports.assertTemplateElement=function(node,opts){assert("TemplateElement",node,opts);},exports.assertTemplateLiteral=function(node,opts){assert("TemplateLiteral",node,opts);},exports.assertTerminatorless=function(node,opts){assert("Terminatorless",node,opts);},exports.assertThisExpression=function(node,opts){assert("ThisExpression",node,opts);},exports.assertThisTypeAnnotation=function(node,opts){assert("ThisTypeAnnotation",node,opts);},exports.assertThrowStatement=function(node,opts){assert("ThrowStatement",node,opts);},exports.assertTopicReference=function(node,opts){assert("TopicReference",node,opts);},exports.assertTryStatement=function(node,opts){assert("TryStatement",node,opts);},exports.assertTupleExpression=function(node,opts){assert("TupleExpression",node,opts);},exports.assertTupleTypeAnnotation=function(node,opts){assert("TupleTypeAnnotation",node,opts);},exports.assertTypeAlias=function(node,opts){assert("TypeAlias",node,opts);},exports.assertTypeAnnotation=function(node,opts){assert("TypeAnnotation",node,opts);},exports.assertTypeCastExpression=function(node,opts){assert("TypeCastExpression",node,opts);},exports.assertTypeParameter=function(node,opts){assert("TypeParameter",node,opts);},exports.assertTypeParameterDeclaration=function(node,opts){assert("TypeParameterDeclaration",node,opts);},exports.assertTypeParameterInstantiation=function(node,opts){assert("TypeParameterInstantiation",node,opts);},exports.assertTypeScript=function(node,opts){assert("TypeScript",node,opts);},exports.assertTypeofTypeAnnotation=function(node,opts){assert("TypeofTypeAnnotation",node,opts);},exports.assertUnaryExpression=function(node,opts){assert("UnaryExpression",node,opts);},exports.assertUnaryLike=function(node,opts){assert("UnaryLike",node,opts);},exports.assertUnionTypeAnnotation=function(node,opts){assert("UnionTypeAnnotation",node,opts);},exports.assertUpdateExpression=function(node,opts){assert("UpdateExpression",node,opts);},exports.assertUserWhitespacable=function(node,opts){assert("UserWhitespacable",node,opts);},exports.assertV8IntrinsicIdentifier=function(node,opts){assert("V8IntrinsicIdentifier",node,opts);},exports.assertVariableDeclaration=function(node,opts){assert("VariableDeclaration",node,opts);},exports.assertVariableDeclarator=function(node,opts){assert("VariableDeclarator",node,opts);},exports.assertVariance=function(node,opts){assert("Variance",node,opts);},exports.assertVoidTypeAnnotation=function(node,opts){assert("VoidTypeAnnotation",node,opts);},exports.assertWhile=function(node,opts){assert("While",node,opts);},exports.assertWhileStatement=function(node,opts){assert("WhileStatement",node,opts);},exports.assertWithStatement=function(node,opts){assert("WithStatement",node,opts);},exports.assertYieldExpression=function(node,opts){assert("YieldExpression",node,opts);};var _is=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/is.js"),_deprecationWarning=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");function assert(type,node,opts){if(!(0, _is.default)(type,node,opts))throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, but instead got "${node.type}".`)}},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(types){const flattened=(0, _removeTypeDuplicates.default)(types);return 1===flattened.length?flattened[0]:(0, _generated.unionTypeAnnotation)(flattened)};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"),_removeTypeDuplicates=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"),_default=function(type){switch(type){case"string":return (0, _generated.stringTypeAnnotation)();case"number":return (0, _generated.numberTypeAnnotation)();case"undefined":return (0, _generated.voidTypeAnnotation)();case"boolean":return (0, _generated.booleanTypeAnnotation)();case"function":return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)("Function"));case"object":return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)("Object"));case"symbol":return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)("Symbol"));case"bigint":return (0, _generated.anyTypeAnnotation)()}throw new Error("Invalid typeof value: "+type)};exports.default=_default;},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.anyTypeAnnotation=function(){return {type:"AnyTypeAnnotation"}},exports.argumentPlaceholder=function(){return {type:"ArgumentPlaceholder"}},exports.arrayExpression=function(elements=[]){return (0, _validateNode.default)({type:"ArrayExpression",elements})},exports.arrayPattern=function(elements){return (0, _validateNode.default)({type:"ArrayPattern",elements})},exports.arrayTypeAnnotation=function(elementType){return (0, _validateNode.default)({type:"ArrayTypeAnnotation",elementType})},exports.arrowFunctionExpression=function(params,body,async=!1){return (0, _validateNode.default)({type:"ArrowFunctionExpression",params,body,async,expression:null})},exports.assignmentExpression=function(operator,left,right){return (0, _validateNode.default)({type:"AssignmentExpression",operator,left,right})},exports.assignmentPattern=function(left,right){return (0, _validateNode.default)({type:"AssignmentPattern",left,right})},exports.awaitExpression=function(argument){return (0, _validateNode.default)({type:"AwaitExpression",argument})},exports.bigIntLiteral=function(value){return (0, _validateNode.default)({type:"BigIntLiteral",value})},exports.binaryExpression=function(operator,left,right){return (0, _validateNode.default)({type:"BinaryExpression",operator,left,right})},exports.bindExpression=function(object,callee){return (0, _validateNode.default)({type:"BindExpression",object,callee})},exports.blockStatement=function(body,directives=[]){return (0, _validateNode.default)({type:"BlockStatement",body,directives})},exports.booleanLiteral=function(value){return (0, _validateNode.default)({type:"BooleanLiteral",value})},exports.booleanLiteralTypeAnnotation=function(value){return (0, _validateNode.default)({type:"BooleanLiteralTypeAnnotation",value})},exports.booleanTypeAnnotation=function(){return {type:"BooleanTypeAnnotation"}},exports.breakStatement=function(label=null){return (0, _validateNode.default)({type:"BreakStatement",label})},exports.callExpression=function(callee,_arguments){return (0, _validateNode.default)({type:"CallExpression",callee,arguments:_arguments})},exports.catchClause=function(param=null,body){return (0, _validateNode.default)({type:"CatchClause",param,body})},exports.classAccessorProperty=function(key,value=null,typeAnnotation=null,decorators=null,computed=!1,_static=!1){return (0, _validateNode.default)({type:"ClassAccessorProperty",key,value,typeAnnotation,decorators,computed,static:_static})},exports.classBody=function(body){return (0, _validateNode.default)({type:"ClassBody",body})},exports.classDeclaration=function(id,superClass=null,body,decorators=null){return (0, _validateNode.default)({type:"ClassDeclaration",id,superClass,body,decorators})},exports.classExpression=function(id=null,superClass=null,body,decorators=null){return (0, _validateNode.default)({type:"ClassExpression",id,superClass,body,decorators})},exports.classImplements=function(id,typeParameters=null){return (0, _validateNode.default)({type:"ClassImplements",id,typeParameters})},exports.classMethod=function(kind="method",key,params,body,computed=!1,_static=!1,generator=!1,async=!1){return (0, _validateNode.default)({type:"ClassMethod",kind,key,params,body,computed,static:_static,generator,async})},exports.classPrivateMethod=function(kind="method",key,params,body,_static=!1){return (0, _validateNode.default)({type:"ClassPrivateMethod",kind,key,params,body,static:_static})},exports.classPrivateProperty=function(key,value=null,decorators=null,_static=!1){return (0, _validateNode.default)({type:"ClassPrivateProperty",key,value,decorators,static:_static})},exports.classProperty=function(key,value=null,typeAnnotation=null,decorators=null,computed=!1,_static=!1){return (0, _validateNode.default)({type:"ClassProperty",key,value,typeAnnotation,decorators,computed,static:_static})},exports.conditionalExpression=function(test,consequent,alternate){return (0, _validateNode.default)({type:"ConditionalExpression",test,consequent,alternate})},exports.continueStatement=function(label=null){return (0, _validateNode.default)({type:"ContinueStatement",label})},exports.debuggerStatement=function(){return {type:"DebuggerStatement"}},exports.decimalLiteral=function(value){return (0, _validateNode.default)({type:"DecimalLiteral",value})},exports.declareClass=function(id,typeParameters=null,_extends=null,body){return (0, _validateNode.default)({type:"DeclareClass",id,typeParameters,extends:_extends,body})},exports.declareExportAllDeclaration=function(source){return (0, _validateNode.default)({type:"DeclareExportAllDeclaration",source})},exports.declareExportDeclaration=function(declaration=null,specifiers=null,source=null){return (0, _validateNode.default)({type:"DeclareExportDeclaration",declaration,specifiers,source})},exports.declareFunction=function(id){return (0, _validateNode.default)({type:"DeclareFunction",id})},exports.declareInterface=function(id,typeParameters=null,_extends=null,body){return (0, _validateNode.default)({type:"DeclareInterface",id,typeParameters,extends:_extends,body})},exports.declareModule=function(id,body,kind=null){return (0, _validateNode.default)({type:"DeclareModule",id,body,kind})},exports.declareModuleExports=function(typeAnnotation){return (0, _validateNode.default)({type:"DeclareModuleExports",typeAnnotation})},exports.declareOpaqueType=function(id,typeParameters=null,supertype=null){return (0, _validateNode.default)({type:"DeclareOpaqueType",id,typeParameters,supertype})},exports.declareTypeAlias=function(id,typeParameters=null,right){return (0, _validateNode.default)({type:"DeclareTypeAlias",id,typeParameters,right})},exports.declareVariable=function(id){return (0, _validateNode.default)({type:"DeclareVariable",id})},exports.declaredPredicate=function(value){return (0, _validateNode.default)({type:"DeclaredPredicate",value})},exports.decorator=function(expression){return (0, _validateNode.default)({type:"Decorator",expression})},exports.directive=function(value){return (0, _validateNode.default)({type:"Directive",value})},exports.directiveLiteral=function(value){return (0, _validateNode.default)({type:"DirectiveLiteral",value})},exports.doExpression=function(body,async=!1){return (0, _validateNode.default)({type:"DoExpression",body,async})},exports.doWhileStatement=function(test,body){return (0, _validateNode.default)({type:"DoWhileStatement",test,body})},exports.emptyStatement=function(){return {type:"EmptyStatement"}},exports.emptyTypeAnnotation=function(){return {type:"EmptyTypeAnnotation"}},exports.enumBooleanBody=function(members){return (0, _validateNode.default)({type:"EnumBooleanBody",members,explicitType:null,hasUnknownMembers:null})},exports.enumBooleanMember=function(id){return (0, _validateNode.default)({type:"EnumBooleanMember",id,init:null})},exports.enumDeclaration=function(id,body){return (0, _validateNode.default)({type:"EnumDeclaration",id,body})},exports.enumDefaultedMember=function(id){return (0, _validateNode.default)({type:"EnumDefaultedMember",id})},exports.enumNumberBody=function(members){return (0, _validateNode.default)({type:"EnumNumberBody",members,explicitType:null,hasUnknownMembers:null})},exports.enumNumberMember=function(id,init){return (0, _validateNode.default)({type:"EnumNumberMember",id,init})},exports.enumStringBody=function(members){return (0, _validateNode.default)({type:"EnumStringBody",members,explicitType:null,hasUnknownMembers:null})},exports.enumStringMember=function(id,init){return (0, _validateNode.default)({type:"EnumStringMember",id,init})},exports.enumSymbolBody=function(members){return (0, _validateNode.default)({type:"EnumSymbolBody",members,hasUnknownMembers:null})},exports.existsTypeAnnotation=function(){return {type:"ExistsTypeAnnotation"}},exports.exportAllDeclaration=function(source){return (0, _validateNode.default)({type:"ExportAllDeclaration",source})},exports.exportDefaultDeclaration=function(declaration){return (0, _validateNode.default)({type:"ExportDefaultDeclaration",declaration})},exports.exportDefaultSpecifier=function(exported){return (0, _validateNode.default)({type:"ExportDefaultSpecifier",exported})},exports.exportNamedDeclaration=function(declaration=null,specifiers=[],source=null){return (0, _validateNode.default)({type:"ExportNamedDeclaration",declaration,specifiers,source})},exports.exportNamespaceSpecifier=function(exported){return (0, _validateNode.default)({type:"ExportNamespaceSpecifier",exported})},exports.exportSpecifier=function(local,exported){return (0, _validateNode.default)({type:"ExportSpecifier",local,exported})},exports.expressionStatement=function(expression){return (0, _validateNode.default)({type:"ExpressionStatement",expression})},exports.file=function(program,comments=null,tokens=null){return (0, _validateNode.default)({type:"File",program,comments,tokens})},exports.forInStatement=function(left,right,body){return (0, _validateNode.default)({type:"ForInStatement",left,right,body})},exports.forOfStatement=function(left,right,body,_await=!1){return (0, _validateNode.default)({type:"ForOfStatement",left,right,body,await:_await})},exports.forStatement=function(init=null,test=null,update=null,body){return (0, _validateNode.default)({type:"ForStatement",init,test,update,body})},exports.functionDeclaration=function(id=null,params,body,generator=!1,async=!1){return (0, _validateNode.default)({type:"FunctionDeclaration",id,params,body,generator,async})},exports.functionExpression=function(id=null,params,body,generator=!1,async=!1){return (0, _validateNode.default)({type:"FunctionExpression",id,params,body,generator,async})},exports.functionTypeAnnotation=function(typeParameters=null,params,rest=null,returnType){return (0, _validateNode.default)({type:"FunctionTypeAnnotation",typeParameters,params,rest,returnType})},exports.functionTypeParam=function(name=null,typeAnnotation){return (0, _validateNode.default)({type:"FunctionTypeParam",name,typeAnnotation})},exports.genericTypeAnnotation=function(id,typeParameters=null){return (0, _validateNode.default)({type:"GenericTypeAnnotation",id,typeParameters})},exports.identifier=function(name){return (0, _validateNode.default)({type:"Identifier",name})},exports.ifStatement=function(test,consequent,alternate=null){return (0, _validateNode.default)({type:"IfStatement",test,consequent,alternate})},exports.import=function(){return {type:"Import"}},exports.importAttribute=function(key,value){return (0, _validateNode.default)({type:"ImportAttribute",key,value})},exports.importDeclaration=function(specifiers,source){return (0, _validateNode.default)({type:"ImportDeclaration",specifiers,source})},exports.importDefaultSpecifier=function(local){return (0, _validateNode.default)({type:"ImportDefaultSpecifier",local})},exports.importNamespaceSpecifier=function(local){return (0, _validateNode.default)({type:"ImportNamespaceSpecifier",local})},exports.importSpecifier=function(local,imported){return (0, _validateNode.default)({type:"ImportSpecifier",local,imported})},exports.indexedAccessType=function(objectType,indexType){return (0, _validateNode.default)({type:"IndexedAccessType",objectType,indexType})},exports.inferredPredicate=function(){return {type:"InferredPredicate"}},exports.interfaceDeclaration=function(id,typeParameters=null,_extends=null,body){return (0, _validateNode.default)({type:"InterfaceDeclaration",id,typeParameters,extends:_extends,body})},exports.interfaceExtends=function(id,typeParameters=null){return (0, _validateNode.default)({type:"InterfaceExtends",id,typeParameters})},exports.interfaceTypeAnnotation=function(_extends=null,body){return (0, _validateNode.default)({type:"InterfaceTypeAnnotation",extends:_extends,body})},exports.interpreterDirective=function(value){return (0, _validateNode.default)({type:"InterpreterDirective",value})},exports.intersectionTypeAnnotation=function(types){return (0, _validateNode.default)({type:"IntersectionTypeAnnotation",types})},exports.jSXAttribute=exports.jsxAttribute=function(name,value=null){return (0, _validateNode.default)({type:"JSXAttribute",name,value})},exports.jSXClosingElement=exports.jsxClosingElement=function(name){return (0, _validateNode.default)({type:"JSXClosingElement",name})},exports.jSXClosingFragment=exports.jsxClosingFragment=function(){return {type:"JSXClosingFragment"}},exports.jSXElement=exports.jsxElement=function(openingElement,closingElement=null,children,selfClosing=null){return (0, _validateNode.default)({type:"JSXElement",openingElement,closingElement,children,selfClosing})},exports.jSXEmptyExpression=exports.jsxEmptyExpression=function(){return {type:"JSXEmptyExpression"}},exports.jSXExpressionContainer=exports.jsxExpressionContainer=function(expression){return (0, _validateNode.default)({type:"JSXExpressionContainer",expression})},exports.jSXFragment=exports.jsxFragment=function(openingFragment,closingFragment,children){return (0, _validateNode.default)({type:"JSXFragment",openingFragment,closingFragment,children})},exports.jSXIdentifier=exports.jsxIdentifier=function(name){return (0, _validateNode.default)({type:"JSXIdentifier",name})},exports.jSXMemberExpression=exports.jsxMemberExpression=function(object,property){return (0, _validateNode.default)({type:"JSXMemberExpression",object,property})},exports.jSXNamespacedName=exports.jsxNamespacedName=function(namespace,name){return (0, _validateNode.default)({type:"JSXNamespacedName",namespace,name})},exports.jSXOpeningElement=exports.jsxOpeningElement=function(name,attributes,selfClosing=!1){return (0, _validateNode.default)({type:"JSXOpeningElement",name,attributes,selfClosing})},exports.jSXOpeningFragment=exports.jsxOpeningFragment=function(){return {type:"JSXOpeningFragment"}},exports.jSXSpreadAttribute=exports.jsxSpreadAttribute=function(argument){return (0, _validateNode.default)({type:"JSXSpreadAttribute",argument})},exports.jSXSpreadChild=exports.jsxSpreadChild=function(expression){return (0, _validateNode.default)({type:"JSXSpreadChild",expression})},exports.jSXText=exports.jsxText=function(value){return (0, _validateNode.default)({type:"JSXText",value})},exports.labeledStatement=function(label,body){return (0, _validateNode.default)({type:"LabeledStatement",label,body})},exports.logicalExpression=function(operator,left,right){return (0, _validateNode.default)({type:"LogicalExpression",operator,left,right})},exports.memberExpression=function(object,property,computed=!1,optional=null){return (0, _validateNode.default)({type:"MemberExpression",object,property,computed,optional})},exports.metaProperty=function(meta,property){return (0, _validateNode.default)({type:"MetaProperty",meta,property})},exports.mixedTypeAnnotation=function(){return {type:"MixedTypeAnnotation"}},exports.moduleExpression=function(body){return (0, _validateNode.default)({type:"ModuleExpression",body})},exports.newExpression=function(callee,_arguments){return (0, _validateNode.default)({type:"NewExpression",callee,arguments:_arguments})},exports.noop=function(){return {type:"Noop"}},exports.nullLiteral=function(){return {type:"NullLiteral"}},exports.nullLiteralTypeAnnotation=function(){return {type:"NullLiteralTypeAnnotation"}},exports.nullableTypeAnnotation=function(typeAnnotation){return (0, _validateNode.default)({type:"NullableTypeAnnotation",typeAnnotation})},exports.numberLiteral=function(value){return (0, _deprecationWarning.default)("NumberLiteral","NumericLiteral","The node type "),numericLiteral(value)},exports.numberLiteralTypeAnnotation=function(value){return (0, _validateNode.default)({type:"NumberLiteralTypeAnnotation",value})},exports.numberTypeAnnotation=function(){return {type:"NumberTypeAnnotation"}},exports.numericLiteral=numericLiteral,exports.objectExpression=function(properties){return (0, _validateNode.default)({type:"ObjectExpression",properties})},exports.objectMethod=function(kind="method",key,params,body,computed=!1,generator=!1,async=!1){return (0, _validateNode.default)({type:"ObjectMethod",kind,key,params,body,computed,generator,async})},exports.objectPattern=function(properties){return (0, _validateNode.default)({type:"ObjectPattern",properties})},exports.objectProperty=function(key,value,computed=!1,shorthand=!1,decorators=null){return (0, _validateNode.default)({type:"ObjectProperty",key,value,computed,shorthand,decorators})},exports.objectTypeAnnotation=function(properties,indexers=[],callProperties=[],internalSlots=[],exact=!1){return (0, _validateNode.default)({type:"ObjectTypeAnnotation",properties,indexers,callProperties,internalSlots,exact})},exports.objectTypeCallProperty=function(value){return (0, _validateNode.default)({type:"ObjectTypeCallProperty",value,static:null})},exports.objectTypeIndexer=function(id=null,key,value,variance=null){return (0, _validateNode.default)({type:"ObjectTypeIndexer",id,key,value,variance,static:null})},exports.objectTypeInternalSlot=function(id,value,optional,_static,method){return (0, _validateNode.default)({type:"ObjectTypeInternalSlot",id,value,optional,static:_static,method})},exports.objectTypeProperty=function(key,value,variance=null){return (0, _validateNode.default)({type:"ObjectTypeProperty",key,value,variance,kind:null,method:null,optional:null,proto:null,static:null})},exports.objectTypeSpreadProperty=function(argument){return (0, _validateNode.default)({type:"ObjectTypeSpreadProperty",argument})},exports.opaqueType=function(id,typeParameters=null,supertype=null,impltype){return (0, _validateNode.default)({type:"OpaqueType",id,typeParameters,supertype,impltype})},exports.optionalCallExpression=function(callee,_arguments,optional){return (0, _validateNode.default)({type:"OptionalCallExpression",callee,arguments:_arguments,optional})},exports.optionalIndexedAccessType=function(objectType,indexType){return (0, _validateNode.default)({type:"OptionalIndexedAccessType",objectType,indexType,optional:null})},exports.optionalMemberExpression=function(object,property,computed=!1,optional){return (0, _validateNode.default)({type:"OptionalMemberExpression",object,property,computed,optional})},exports.parenthesizedExpression=function(expression){return (0, _validateNode.default)({type:"ParenthesizedExpression",expression})},exports.pipelineBareFunction=function(callee){return (0, _validateNode.default)({type:"PipelineBareFunction",callee})},exports.pipelinePrimaryTopicReference=function(){return {type:"PipelinePrimaryTopicReference"}},exports.pipelineTopicExpression=function(expression){return (0, _validateNode.default)({type:"PipelineTopicExpression",expression})},exports.placeholder=function(expectedNode,name){return (0, _validateNode.default)({type:"Placeholder",expectedNode,name})},exports.privateName=function(id){return (0, _validateNode.default)({type:"PrivateName",id})},exports.program=function(body,directives=[],sourceType="script",interpreter=null){return (0, _validateNode.default)({type:"Program",body,directives,sourceType,interpreter,sourceFile:null})},exports.qualifiedTypeIdentifier=function(id,qualification){return (0, _validateNode.default)({type:"QualifiedTypeIdentifier",id,qualification})},exports.recordExpression=function(properties){return (0, _validateNode.default)({type:"RecordExpression",properties})},exports.regExpLiteral=regExpLiteral,exports.regexLiteral=function(pattern,flags=""){return (0, _deprecationWarning.default)("RegexLiteral","RegExpLiteral","The node type "),regExpLiteral(pattern,flags)},exports.restElement=restElement,exports.restProperty=function(argument){return (0, _deprecationWarning.default)("RestProperty","RestElement","The node type "),restElement(argument)},exports.returnStatement=function(argument=null){return (0, _validateNode.default)({type:"ReturnStatement",argument})},exports.sequenceExpression=function(expressions){return (0, _validateNode.default)({type:"SequenceExpression",expressions})},exports.spreadElement=spreadElement,exports.spreadProperty=function(argument){return (0, _deprecationWarning.default)("SpreadProperty","SpreadElement","The node type "),spreadElement(argument)},exports.staticBlock=function(body){return (0, _validateNode.default)({type:"StaticBlock",body})},exports.stringLiteral=function(value){return (0, _validateNode.default)({type:"StringLiteral",value})},exports.stringLiteralTypeAnnotation=function(value){return (0, _validateNode.default)({type:"StringLiteralTypeAnnotation",value})},exports.stringTypeAnnotation=function(){return {type:"StringTypeAnnotation"}},exports.super=function(){return {type:"Super"}},exports.switchCase=function(test=null,consequent){return (0, _validateNode.default)({type:"SwitchCase",test,consequent})},exports.switchStatement=function(discriminant,cases){return (0, _validateNode.default)({type:"SwitchStatement",discriminant,cases})},exports.symbolTypeAnnotation=function(){return {type:"SymbolTypeAnnotation"}},exports.taggedTemplateExpression=function(tag,quasi){return (0, _validateNode.default)({type:"TaggedTemplateExpression",tag,quasi})},exports.templateElement=function(value,tail=!1){return (0, _validateNode.default)({type:"TemplateElement",value,tail})},exports.templateLiteral=function(quasis,expressions){return (0, _validateNode.default)({type:"TemplateLiteral",quasis,expressions})},exports.thisExpression=function(){return {type:"ThisExpression"}},exports.thisTypeAnnotation=function(){return {type:"ThisTypeAnnotation"}},exports.throwStatement=function(argument){return (0, _validateNode.default)({type:"ThrowStatement",argument})},exports.topicReference=function(){return {type:"TopicReference"}},exports.tryStatement=function(block,handler=null,finalizer=null){return (0, _validateNode.default)({type:"TryStatement",block,handler,finalizer})},exports.tSAnyKeyword=exports.tsAnyKeyword=function(){return {type:"TSAnyKeyword"}},exports.tSArrayType=exports.tsArrayType=function(elementType){return (0, _validateNode.default)({type:"TSArrayType",elementType})},exports.tSAsExpression=exports.tsAsExpression=function(expression,typeAnnotation){return (0, _validateNode.default)({type:"TSAsExpression",expression,typeAnnotation})},exports.tSBigIntKeyword=exports.tsBigIntKeyword=function(){return {type:"TSBigIntKeyword"}},exports.tSBooleanKeyword=exports.tsBooleanKeyword=function(){return {type:"TSBooleanKeyword"}},exports.tSCallSignatureDeclaration=exports.tsCallSignatureDeclaration=function(typeParameters=null,parameters,typeAnnotation=null){return (0, _validateNode.default)({type:"TSCallSignatureDeclaration",typeParameters,parameters,typeAnnotation})},exports.tSConditionalType=exports.tsConditionalType=function(checkType,extendsType,trueType,falseType){return (0, _validateNode.default)({type:"TSConditionalType",checkType,extendsType,trueType,falseType})},exports.tSConstructSignatureDeclaration=exports.tsConstructSignatureDeclaration=function(typeParameters=null,parameters,typeAnnotation=null){return (0, _validateNode.default)({type:"TSConstructSignatureDeclaration",typeParameters,parameters,typeAnnotation})},exports.tSConstructorType=exports.tsConstructorType=function(typeParameters=null,parameters,typeAnnotation=null){return (0, _validateNode.default)({type:"TSConstructorType",typeParameters,parameters,typeAnnotation})},exports.tSDeclareFunction=exports.tsDeclareFunction=function(id=null,typeParameters=null,params,returnType=null){return (0, _validateNode.default)({type:"TSDeclareFunction",id,typeParameters,params,returnType})},exports.tSDeclareMethod=exports.tsDeclareMethod=function(decorators=null,key,typeParameters=null,params,returnType=null){return (0, _validateNode.default)({type:"TSDeclareMethod",decorators,key,typeParameters,params,returnType})},exports.tSEnumDeclaration=exports.tsEnumDeclaration=function(id,members){return (0, _validateNode.default)({type:"TSEnumDeclaration",id,members})},exports.tSEnumMember=exports.tsEnumMember=function(id,initializer=null){return (0, _validateNode.default)({type:"TSEnumMember",id,initializer})},exports.tSExportAssignment=exports.tsExportAssignment=function(expression){return (0, _validateNode.default)({type:"TSExportAssignment",expression})},exports.tSExpressionWithTypeArguments=exports.tsExpressionWithTypeArguments=function(expression,typeParameters=null){return (0, _validateNode.default)({type:"TSExpressionWithTypeArguments",expression,typeParameters})},exports.tSExternalModuleReference=exports.tsExternalModuleReference=function(expression){return (0, _validateNode.default)({type:"TSExternalModuleReference",expression})},exports.tSFunctionType=exports.tsFunctionType=function(typeParameters=null,parameters,typeAnnotation=null){return (0, _validateNode.default)({type:"TSFunctionType",typeParameters,parameters,typeAnnotation})},exports.tSImportEqualsDeclaration=exports.tsImportEqualsDeclaration=function(id,moduleReference){return (0, _validateNode.default)({type:"TSImportEqualsDeclaration",id,moduleReference,isExport:null})},exports.tSImportType=exports.tsImportType=function(argument,qualifier=null,typeParameters=null){return (0, _validateNode.default)({type:"TSImportType",argument,qualifier,typeParameters})},exports.tSIndexSignature=exports.tsIndexSignature=function(parameters,typeAnnotation=null){return (0, _validateNode.default)({type:"TSIndexSignature",parameters,typeAnnotation})},exports.tSIndexedAccessType=exports.tsIndexedAccessType=function(objectType,indexType){return (0, _validateNode.default)({type:"TSIndexedAccessType",objectType,indexType})},exports.tSInferType=exports.tsInferType=function(typeParameter){return (0, _validateNode.default)({type:"TSInferType",typeParameter})},exports.tSInstantiationExpression=exports.tsInstantiationExpression=function(expression,typeParameters=null){return (0, _validateNode.default)({type:"TSInstantiationExpression",expression,typeParameters})},exports.tSInterfaceBody=exports.tsInterfaceBody=function(body){return (0, _validateNode.default)({type:"TSInterfaceBody",body})},exports.tSInterfaceDeclaration=exports.tsInterfaceDeclaration=function(id,typeParameters=null,_extends=null,body){return (0, _validateNode.default)({type:"TSInterfaceDeclaration",id,typeParameters,extends:_extends,body})},exports.tSIntersectionType=exports.tsIntersectionType=function(types){return (0, _validateNode.default)({type:"TSIntersectionType",types})},exports.tSIntrinsicKeyword=exports.tsIntrinsicKeyword=function(){return {type:"TSIntrinsicKeyword"}},exports.tSLiteralType=exports.tsLiteralType=function(literal){return (0, _validateNode.default)({type:"TSLiteralType",literal})},exports.tSMappedType=exports.tsMappedType=function(typeParameter,typeAnnotation=null,nameType=null){return (0, _validateNode.default)({type:"TSMappedType",typeParameter,typeAnnotation,nameType})},exports.tSMethodSignature=exports.tsMethodSignature=function(key,typeParameters=null,parameters,typeAnnotation=null){return (0, _validateNode.default)({type:"TSMethodSignature",key,typeParameters,parameters,typeAnnotation,kind:null})},exports.tSModuleBlock=exports.tsModuleBlock=function(body){return (0, _validateNode.default)({type:"TSModuleBlock",body})},exports.tSModuleDeclaration=exports.tsModuleDeclaration=function(id,body){return (0, _validateNode.default)({type:"TSModuleDeclaration",id,body})},exports.tSNamedTupleMember=exports.tsNamedTupleMember=function(label,elementType,optional=!1){return (0, _validateNode.default)({type:"TSNamedTupleMember",label,elementType,optional})},exports.tSNamespaceExportDeclaration=exports.tsNamespaceExportDeclaration=function(id){return (0, _validateNode.default)({type:"TSNamespaceExportDeclaration",id})},exports.tSNeverKeyword=exports.tsNeverKeyword=function(){return {type:"TSNeverKeyword"}},exports.tSNonNullExpression=exports.tsNonNullExpression=function(expression){return (0, _validateNode.default)({type:"TSNonNullExpression",expression})},exports.tSNullKeyword=exports.tsNullKeyword=function(){return {type:"TSNullKeyword"}},exports.tSNumberKeyword=exports.tsNumberKeyword=function(){return {type:"TSNumberKeyword"}},exports.tSObjectKeyword=exports.tsObjectKeyword=function(){return {type:"TSObjectKeyword"}},exports.tSOptionalType=exports.tsOptionalType=function(typeAnnotation){return (0, _validateNode.default)({type:"TSOptionalType",typeAnnotation})},exports.tSParameterProperty=exports.tsParameterProperty=function(parameter){return (0, _validateNode.default)({type:"TSParameterProperty",parameter})},exports.tSParenthesizedType=exports.tsParenthesizedType=function(typeAnnotation){return (0, _validateNode.default)({type:"TSParenthesizedType",typeAnnotation})},exports.tSPropertySignature=exports.tsPropertySignature=function(key,typeAnnotation=null,initializer=null){return (0, _validateNode.default)({type:"TSPropertySignature",key,typeAnnotation,initializer,kind:null})},exports.tSQualifiedName=exports.tsQualifiedName=function(left,right){return (0, _validateNode.default)({type:"TSQualifiedName",left,right})},exports.tSRestType=exports.tsRestType=function(typeAnnotation){return (0, _validateNode.default)({type:"TSRestType",typeAnnotation})},exports.tSSatisfiesExpression=exports.tsSatisfiesExpression=function(expression,typeAnnotation){return (0, _validateNode.default)({type:"TSSatisfiesExpression",expression,typeAnnotation})},exports.tSStringKeyword=exports.tsStringKeyword=function(){return {type:"TSStringKeyword"}},exports.tSSymbolKeyword=exports.tsSymbolKeyword=function(){return {type:"TSSymbolKeyword"}},exports.tSThisType=exports.tsThisType=function(){return {type:"TSThisType"}},exports.tSTupleType=exports.tsTupleType=function(elementTypes){return (0, _validateNode.default)({type:"TSTupleType",elementTypes})},exports.tSTypeAliasDeclaration=exports.tsTypeAliasDeclaration=function(id,typeParameters=null,typeAnnotation){return (0, _validateNode.default)({type:"TSTypeAliasDeclaration",id,typeParameters,typeAnnotation})},exports.tSTypeAnnotation=exports.tsTypeAnnotation=function(typeAnnotation){return (0, _validateNode.default)({type:"TSTypeAnnotation",typeAnnotation})},exports.tSTypeAssertion=exports.tsTypeAssertion=function(typeAnnotation,expression){return (0, _validateNode.default)({type:"TSTypeAssertion",typeAnnotation,expression})},exports.tSTypeLiteral=exports.tsTypeLiteral=function(members){return (0, _validateNode.default)({type:"TSTypeLiteral",members})},exports.tSTypeOperator=exports.tsTypeOperator=function(typeAnnotation){return (0, _validateNode.default)({type:"TSTypeOperator",typeAnnotation,operator:null})},exports.tSTypeParameter=exports.tsTypeParameter=function(constraint=null,_default=null,name){return (0, _validateNode.default)({type:"TSTypeParameter",constraint,default:_default,name})},exports.tSTypeParameterDeclaration=exports.tsTypeParameterDeclaration=function(params){return (0, _validateNode.default)({type:"TSTypeParameterDeclaration",params})},exports.tSTypeParameterInstantiation=exports.tsTypeParameterInstantiation=function(params){return (0, _validateNode.default)({type:"TSTypeParameterInstantiation",params})},exports.tSTypePredicate=exports.tsTypePredicate=function(parameterName,typeAnnotation=null,asserts=null){return (0, _validateNode.default)({type:"TSTypePredicate",parameterName,typeAnnotation,asserts})},exports.tSTypeQuery=exports.tsTypeQuery=function(exprName,typeParameters=null){return (0, _validateNode.default)({type:"TSTypeQuery",exprName,typeParameters})},exports.tSTypeReference=exports.tsTypeReference=function(typeName,typeParameters=null){return (0, _validateNode.default)({type:"TSTypeReference",typeName,typeParameters})},exports.tSUndefinedKeyword=exports.tsUndefinedKeyword=function(){return {type:"TSUndefinedKeyword"}},exports.tSUnionType=exports.tsUnionType=function(types){return (0, _validateNode.default)({type:"TSUnionType",types})},exports.tSUnknownKeyword=exports.tsUnknownKeyword=function(){return {type:"TSUnknownKeyword"}},exports.tSVoidKeyword=exports.tsVoidKeyword=function(){return {type:"TSVoidKeyword"}},exports.tupleExpression=function(elements=[]){return (0, _validateNode.default)({type:"TupleExpression",elements})},exports.tupleTypeAnnotation=function(types){return (0, _validateNode.default)({type:"TupleTypeAnnotation",types})},exports.typeAlias=function(id,typeParameters=null,right){return (0, _validateNode.default)({type:"TypeAlias",id,typeParameters,right})},exports.typeAnnotation=function(typeAnnotation){return (0, _validateNode.default)({type:"TypeAnnotation",typeAnnotation})},exports.typeCastExpression=function(expression,typeAnnotation){return (0, _validateNode.default)({type:"TypeCastExpression",expression,typeAnnotation})},exports.typeParameter=function(bound=null,_default=null,variance=null){return (0, _validateNode.default)({type:"TypeParameter",bound,default:_default,variance,name:null})},exports.typeParameterDeclaration=function(params){return (0, _validateNode.default)({type:"TypeParameterDeclaration",params})},exports.typeParameterInstantiation=function(params){return (0, _validateNode.default)({type:"TypeParameterInstantiation",params})},exports.typeofTypeAnnotation=function(argument){return (0, _validateNode.default)({type:"TypeofTypeAnnotation",argument})},exports.unaryExpression=function(operator,argument,prefix=!0){return (0, _validateNode.default)({type:"UnaryExpression",operator,argument,prefix})},exports.unionTypeAnnotation=function(types){return (0, _validateNode.default)({type:"UnionTypeAnnotation",types})},exports.updateExpression=function(operator,argument,prefix=!1){return (0, _validateNode.default)({type:"UpdateExpression",operator,argument,prefix})},exports.v8IntrinsicIdentifier=function(name){return (0, _validateNode.default)({type:"V8IntrinsicIdentifier",name})},exports.variableDeclaration=function(kind,declarations){return (0, _validateNode.default)({type:"VariableDeclaration",kind,declarations})},exports.variableDeclarator=function(id,init=null){return (0, _validateNode.default)({type:"VariableDeclarator",id,init})},exports.variance=function(kind){return (0, _validateNode.default)({type:"Variance",kind})},exports.voidTypeAnnotation=function(){return {type:"VoidTypeAnnotation"}},exports.whileStatement=function(test,body){return (0, _validateNode.default)({type:"WhileStatement",test,body})},exports.withStatement=function(object,body){return (0, _validateNode.default)({type:"WithStatement",object,body})},exports.yieldExpression=function(argument=null,delegate=!1){return (0, _validateNode.default)({type:"YieldExpression",argument,delegate})};var _validateNode=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/validateNode.js"),_deprecationWarning=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");function numericLiteral(value){return (0, _validateNode.default)({type:"NumericLiteral",value})}function regExpLiteral(pattern,flags=""){return (0, _validateNode.default)({type:"RegExpLiteral",pattern,flags})}function restElement(argument){return (0, _validateNode.default)({type:"RestElement",argument})}function spreadElement(argument){return (0, _validateNode.default)({type:"SpreadElement",argument})}},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/uppercase.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"AnyTypeAnnotation",{enumerable:!0,get:function(){return _index.anyTypeAnnotation}}),Object.defineProperty(exports,"ArgumentPlaceholder",{enumerable:!0,get:function(){return _index.argumentPlaceholder}}),Object.defineProperty(exports,"ArrayExpression",{enumerable:!0,get:function(){return _index.arrayExpression}}),Object.defineProperty(exports,"ArrayPattern",{enumerable:!0,get:function(){return _index.arrayPattern}}),Object.defineProperty(exports,"ArrayTypeAnnotation",{enumerable:!0,get:function(){return _index.arrayTypeAnnotation}}),Object.defineProperty(exports,"ArrowFunctionExpression",{enumerable:!0,get:function(){return _index.arrowFunctionExpression}}),Object.defineProperty(exports,"AssignmentExpression",{enumerable:!0,get:function(){return _index.assignmentExpression}}),Object.defineProperty(exports,"AssignmentPattern",{enumerable:!0,get:function(){return _index.assignmentPattern}}),Object.defineProperty(exports,"AwaitExpression",{enumerable:!0,get:function(){return _index.awaitExpression}}),Object.defineProperty(exports,"BigIntLiteral",{enumerable:!0,get:function(){return _index.bigIntLiteral}}),Object.defineProperty(exports,"BinaryExpression",{enumerable:!0,get:function(){return _index.binaryExpression}}),Object.defineProperty(exports,"BindExpression",{enumerable:!0,get:function(){return _index.bindExpression}}),Object.defineProperty(exports,"BlockStatement",{enumerable:!0,get:function(){return _index.blockStatement}}),Object.defineProperty(exports,"BooleanLiteral",{enumerable:!0,get:function(){return _index.booleanLiteral}}),Object.defineProperty(exports,"BooleanLiteralTypeAnnotation",{enumerable:!0,get:function(){return _index.booleanLiteralTypeAnnotation}}),Object.defineProperty(exports,"BooleanTypeAnnotation",{enumerable:!0,get:function(){return _index.booleanTypeAnnotation}}),Object.defineProperty(exports,"BreakStatement",{enumerable:!0,get:function(){return _index.breakStatement}}),Object.defineProperty(exports,"CallExpression",{enumerable:!0,get:function(){return _index.callExpression}}),Object.defineProperty(exports,"CatchClause",{enumerable:!0,get:function(){return _index.catchClause}}),Object.defineProperty(exports,"ClassAccessorProperty",{enumerable:!0,get:function(){return _index.classAccessorProperty}}),Object.defineProperty(exports,"ClassBody",{enumerable:!0,get:function(){return _index.classBody}}),Object.defineProperty(exports,"ClassDeclaration",{enumerable:!0,get:function(){return _index.classDeclaration}}),Object.defineProperty(exports,"ClassExpression",{enumerable:!0,get:function(){return _index.classExpression}}),Object.defineProperty(exports,"ClassImplements",{enumerable:!0,get:function(){return _index.classImplements}}),Object.defineProperty(exports,"ClassMethod",{enumerable:!0,get:function(){return _index.classMethod}}),Object.defineProperty(exports,"ClassPrivateMethod",{enumerable:!0,get:function(){return _index.classPrivateMethod}}),Object.defineProperty(exports,"ClassPrivateProperty",{enumerable:!0,get:function(){return _index.classPrivateProperty}}),Object.defineProperty(exports,"ClassProperty",{enumerable:!0,get:function(){return _index.classProperty}}),Object.defineProperty(exports,"ConditionalExpression",{enumerable:!0,get:function(){return _index.conditionalExpression}}),Object.defineProperty(exports,"ContinueStatement",{enumerable:!0,get:function(){return _index.continueStatement}}),Object.defineProperty(exports,"DebuggerStatement",{enumerable:!0,get:function(){return _index.debuggerStatement}}),Object.defineProperty(exports,"DecimalLiteral",{enumerable:!0,get:function(){return _index.decimalLiteral}}),Object.defineProperty(exports,"DeclareClass",{enumerable:!0,get:function(){return _index.declareClass}}),Object.defineProperty(exports,"DeclareExportAllDeclaration",{enumerable:!0,get:function(){return _index.declareExportAllDeclaration}}),Object.defineProperty(exports,"DeclareExportDeclaration",{enumerable:!0,get:function(){return _index.declareExportDeclaration}}),Object.defineProperty(exports,"DeclareFunction",{enumerable:!0,get:function(){return _index.declareFunction}}),Object.defineProperty(exports,"DeclareInterface",{enumerable:!0,get:function(){return _index.declareInterface}}),Object.defineProperty(exports,"DeclareModule",{enumerable:!0,get:function(){return _index.declareModule}}),Object.defineProperty(exports,"DeclareModuleExports",{enumerable:!0,get:function(){return _index.declareModuleExports}}),Object.defineProperty(exports,"DeclareOpaqueType",{enumerable:!0,get:function(){return _index.declareOpaqueType}}),Object.defineProperty(exports,"DeclareTypeAlias",{enumerable:!0,get:function(){return _index.declareTypeAlias}}),Object.defineProperty(exports,"DeclareVariable",{enumerable:!0,get:function(){return _index.declareVariable}}),Object.defineProperty(exports,"DeclaredPredicate",{enumerable:!0,get:function(){return _index.declaredPredicate}}),Object.defineProperty(exports,"Decorator",{enumerable:!0,get:function(){return _index.decorator}}),Object.defineProperty(exports,"Directive",{enumerable:!0,get:function(){return _index.directive}}),Object.defineProperty(exports,"DirectiveLiteral",{enumerable:!0,get:function(){return _index.directiveLiteral}}),Object.defineProperty(exports,"DoExpression",{enumerable:!0,get:function(){return _index.doExpression}}),Object.defineProperty(exports,"DoWhileStatement",{enumerable:!0,get:function(){return _index.doWhileStatement}}),Object.defineProperty(exports,"EmptyStatement",{enumerable:!0,get:function(){return _index.emptyStatement}}),Object.defineProperty(exports,"EmptyTypeAnnotation",{enumerable:!0,get:function(){return _index.emptyTypeAnnotation}}),Object.defineProperty(exports,"EnumBooleanBody",{enumerable:!0,get:function(){return _index.enumBooleanBody}}),Object.defineProperty(exports,"EnumBooleanMember",{enumerable:!0,get:function(){return _index.enumBooleanMember}}),Object.defineProperty(exports,"EnumDeclaration",{enumerable:!0,get:function(){return _index.enumDeclaration}}),Object.defineProperty(exports,"EnumDefaultedMember",{enumerable:!0,get:function(){return _index.enumDefaultedMember}}),Object.defineProperty(exports,"EnumNumberBody",{enumerable:!0,get:function(){return _index.enumNumberBody}}),Object.defineProperty(exports,"EnumNumberMember",{enumerable:!0,get:function(){return _index.enumNumberMember}}),Object.defineProperty(exports,"EnumStringBody",{enumerable:!0,get:function(){return _index.enumStringBody}}),Object.defineProperty(exports,"EnumStringMember",{enumerable:!0,get:function(){return _index.enumStringMember}}),Object.defineProperty(exports,"EnumSymbolBody",{enumerable:!0,get:function(){return _index.enumSymbolBody}}),Object.defineProperty(exports,"ExistsTypeAnnotation",{enumerable:!0,get:function(){return _index.existsTypeAnnotation}}),Object.defineProperty(exports,"ExportAllDeclaration",{enumerable:!0,get:function(){return _index.exportAllDeclaration}}),Object.defineProperty(exports,"ExportDefaultDeclaration",{enumerable:!0,get:function(){return _index.exportDefaultDeclaration}}),Object.defineProperty(exports,"ExportDefaultSpecifier",{enumerable:!0,get:function(){return _index.exportDefaultSpecifier}}),Object.defineProperty(exports,"ExportNamedDeclaration",{enumerable:!0,get:function(){return _index.exportNamedDeclaration}}),Object.defineProperty(exports,"ExportNamespaceSpecifier",{enumerable:!0,get:function(){return _index.exportNamespaceSpecifier}}),Object.defineProperty(exports,"ExportSpecifier",{enumerable:!0,get:function(){return _index.exportSpecifier}}),Object.defineProperty(exports,"ExpressionStatement",{enumerable:!0,get:function(){return _index.expressionStatement}}),Object.defineProperty(exports,"File",{enumerable:!0,get:function(){return _index.file}}),Object.defineProperty(exports,"ForInStatement",{enumerable:!0,get:function(){return _index.forInStatement}}),Object.defineProperty(exports,"ForOfStatement",{enumerable:!0,get:function(){return _index.forOfStatement}}),Object.defineProperty(exports,"ForStatement",{enumerable:!0,get:function(){return _index.forStatement}}),Object.defineProperty(exports,"FunctionDeclaration",{enumerable:!0,get:function(){return _index.functionDeclaration}}),Object.defineProperty(exports,"FunctionExpression",{enumerable:!0,get:function(){return _index.functionExpression}}),Object.defineProperty(exports,"FunctionTypeAnnotation",{enumerable:!0,get:function(){return _index.functionTypeAnnotation}}),Object.defineProperty(exports,"FunctionTypeParam",{enumerable:!0,get:function(){return _index.functionTypeParam}}),Object.defineProperty(exports,"GenericTypeAnnotation",{enumerable:!0,get:function(){return _index.genericTypeAnnotation}}),Object.defineProperty(exports,"Identifier",{enumerable:!0,get:function(){return _index.identifier}}),Object.defineProperty(exports,"IfStatement",{enumerable:!0,get:function(){return _index.ifStatement}}),Object.defineProperty(exports,"Import",{enumerable:!0,get:function(){return _index.import}}),Object.defineProperty(exports,"ImportAttribute",{enumerable:!0,get:function(){return _index.importAttribute}}),Object.defineProperty(exports,"ImportDeclaration",{enumerable:!0,get:function(){return _index.importDeclaration}}),Object.defineProperty(exports,"ImportDefaultSpecifier",{enumerable:!0,get:function(){return _index.importDefaultSpecifier}}),Object.defineProperty(exports,"ImportNamespaceSpecifier",{enumerable:!0,get:function(){return _index.importNamespaceSpecifier}}),Object.defineProperty(exports,"ImportSpecifier",{enumerable:!0,get:function(){return _index.importSpecifier}}),Object.defineProperty(exports,"IndexedAccessType",{enumerable:!0,get:function(){return _index.indexedAccessType}}),Object.defineProperty(exports,"InferredPredicate",{enumerable:!0,get:function(){return _index.inferredPredicate}}),Object.defineProperty(exports,"InterfaceDeclaration",{enumerable:!0,get:function(){return _index.interfaceDeclaration}}),Object.defineProperty(exports,"InterfaceExtends",{enumerable:!0,get:function(){return _index.interfaceExtends}}),Object.defineProperty(exports,"InterfaceTypeAnnotation",{enumerable:!0,get:function(){return _index.interfaceTypeAnnotation}}),Object.defineProperty(exports,"InterpreterDirective",{enumerable:!0,get:function(){return _index.interpreterDirective}}),Object.defineProperty(exports,"IntersectionTypeAnnotation",{enumerable:!0,get:function(){return _index.intersectionTypeAnnotation}}),Object.defineProperty(exports,"JSXAttribute",{enumerable:!0,get:function(){return _index.jsxAttribute}}),Object.defineProperty(exports,"JSXClosingElement",{enumerable:!0,get:function(){return _index.jsxClosingElement}}),Object.defineProperty(exports,"JSXClosingFragment",{enumerable:!0,get:function(){return _index.jsxClosingFragment}}),Object.defineProperty(exports,"JSXElement",{enumerable:!0,get:function(){return _index.jsxElement}}),Object.defineProperty(exports,"JSXEmptyExpression",{enumerable:!0,get:function(){return _index.jsxEmptyExpression}}),Object.defineProperty(exports,"JSXExpressionContainer",{enumerable:!0,get:function(){return _index.jsxExpressionContainer}}),Object.defineProperty(exports,"JSXFragment",{enumerable:!0,get:function(){return _index.jsxFragment}}),Object.defineProperty(exports,"JSXIdentifier",{enumerable:!0,get:function(){return _index.jsxIdentifier}}),Object.defineProperty(exports,"JSXMemberExpression",{enumerable:!0,get:function(){return _index.jsxMemberExpression}}),Object.defineProperty(exports,"JSXNamespacedName",{enumerable:!0,get:function(){return _index.jsxNamespacedName}}),Object.defineProperty(exports,"JSXOpeningElement",{enumerable:!0,get:function(){return _index.jsxOpeningElement}}),Object.defineProperty(exports,"JSXOpeningFragment",{enumerable:!0,get:function(){return _index.jsxOpeningFragment}}),Object.defineProperty(exports,"JSXSpreadAttribute",{enumerable:!0,get:function(){return _index.jsxSpreadAttribute}}),Object.defineProperty(exports,"JSXSpreadChild",{enumerable:!0,get:function(){return _index.jsxSpreadChild}}),Object.defineProperty(exports,"JSXText",{enumerable:!0,get:function(){return _index.jsxText}}),Object.defineProperty(exports,"LabeledStatement",{enumerable:!0,get:function(){return _index.labeledStatement}}),Object.defineProperty(exports,"LogicalExpression",{enumerable:!0,get:function(){return _index.logicalExpression}}),Object.defineProperty(exports,"MemberExpression",{enumerable:!0,get:function(){return _index.memberExpression}}),Object.defineProperty(exports,"MetaProperty",{enumerable:!0,get:function(){return _index.metaProperty}}),Object.defineProperty(exports,"MixedTypeAnnotation",{enumerable:!0,get:function(){return _index.mixedTypeAnnotation}}),Object.defineProperty(exports,"ModuleExpression",{enumerable:!0,get:function(){return _index.moduleExpression}}),Object.defineProperty(exports,"NewExpression",{enumerable:!0,get:function(){return _index.newExpression}}),Object.defineProperty(exports,"Noop",{enumerable:!0,get:function(){return _index.noop}}),Object.defineProperty(exports,"NullLiteral",{enumerable:!0,get:function(){return _index.nullLiteral}}),Object.defineProperty(exports,"NullLiteralTypeAnnotation",{enumerable:!0,get:function(){return _index.nullLiteralTypeAnnotation}}),Object.defineProperty(exports,"NullableTypeAnnotation",{enumerable:!0,get:function(){return _index.nullableTypeAnnotation}}),Object.defineProperty(exports,"NumberLiteral",{enumerable:!0,get:function(){return _index.numberLiteral}}),Object.defineProperty(exports,"NumberLiteralTypeAnnotation",{enumerable:!0,get:function(){return _index.numberLiteralTypeAnnotation}}),Object.defineProperty(exports,"NumberTypeAnnotation",{enumerable:!0,get:function(){return _index.numberTypeAnnotation}}),Object.defineProperty(exports,"NumericLiteral",{enumerable:!0,get:function(){return _index.numericLiteral}}),Object.defineProperty(exports,"ObjectExpression",{enumerable:!0,get:function(){return _index.objectExpression}}),Object.defineProperty(exports,"ObjectMethod",{enumerable:!0,get:function(){return _index.objectMethod}}),Object.defineProperty(exports,"ObjectPattern",{enumerable:!0,get:function(){return _index.objectPattern}}),Object.defineProperty(exports,"ObjectProperty",{enumerable:!0,get:function(){return _index.objectProperty}}),Object.defineProperty(exports,"ObjectTypeAnnotation",{enumerable:!0,get:function(){return _index.objectTypeAnnotation}}),Object.defineProperty(exports,"ObjectTypeCallProperty",{enumerable:!0,get:function(){return _index.objectTypeCallProperty}}),Object.defineProperty(exports,"ObjectTypeIndexer",{enumerable:!0,get:function(){return _index.objectTypeIndexer}}),Object.defineProperty(exports,"ObjectTypeInternalSlot",{enumerable:!0,get:function(){return _index.objectTypeInternalSlot}}),Object.defineProperty(exports,"ObjectTypeProperty",{enumerable:!0,get:function(){return _index.objectTypeProperty}}),Object.defineProperty(exports,"ObjectTypeSpreadProperty",{enumerable:!0,get:function(){return _index.objectTypeSpreadProperty}}),Object.defineProperty(exports,"OpaqueType",{enumerable:!0,get:function(){return _index.opaqueType}}),Object.defineProperty(exports,"OptionalCallExpression",{enumerable:!0,get:function(){return _index.optionalCallExpression}}),Object.defineProperty(exports,"OptionalIndexedAccessType",{enumerable:!0,get:function(){return _index.optionalIndexedAccessType}}),Object.defineProperty(exports,"OptionalMemberExpression",{enumerable:!0,get:function(){return _index.optionalMemberExpression}}),Object.defineProperty(exports,"ParenthesizedExpression",{enumerable:!0,get:function(){return _index.parenthesizedExpression}}),Object.defineProperty(exports,"PipelineBareFunction",{enumerable:!0,get:function(){return _index.pipelineBareFunction}}),Object.defineProperty(exports,"PipelinePrimaryTopicReference",{enumerable:!0,get:function(){return _index.pipelinePrimaryTopicReference}}),Object.defineProperty(exports,"PipelineTopicExpression",{enumerable:!0,get:function(){return _index.pipelineTopicExpression}}),Object.defineProperty(exports,"Placeholder",{enumerable:!0,get:function(){return _index.placeholder}}),Object.defineProperty(exports,"PrivateName",{enumerable:!0,get:function(){return _index.privateName}}),Object.defineProperty(exports,"Program",{enumerable:!0,get:function(){return _index.program}}),Object.defineProperty(exports,"QualifiedTypeIdentifier",{enumerable:!0,get:function(){return _index.qualifiedTypeIdentifier}}),Object.defineProperty(exports,"RecordExpression",{enumerable:!0,get:function(){return _index.recordExpression}}),Object.defineProperty(exports,"RegExpLiteral",{enumerable:!0,get:function(){return _index.regExpLiteral}}),Object.defineProperty(exports,"RegexLiteral",{enumerable:!0,get:function(){return _index.regexLiteral}}),Object.defineProperty(exports,"RestElement",{enumerable:!0,get:function(){return _index.restElement}}),Object.defineProperty(exports,"RestProperty",{enumerable:!0,get:function(){return _index.restProperty}}),Object.defineProperty(exports,"ReturnStatement",{enumerable:!0,get:function(){return _index.returnStatement}}),Object.defineProperty(exports,"SequenceExpression",{enumerable:!0,get:function(){return _index.sequenceExpression}}),Object.defineProperty(exports,"SpreadElement",{enumerable:!0,get:function(){return _index.spreadElement}}),Object.defineProperty(exports,"SpreadProperty",{enumerable:!0,get:function(){return _index.spreadProperty}}),Object.defineProperty(exports,"StaticBlock",{enumerable:!0,get:function(){return _index.staticBlock}}),Object.defineProperty(exports,"StringLiteral",{enumerable:!0,get:function(){return _index.stringLiteral}}),Object.defineProperty(exports,"StringLiteralTypeAnnotation",{enumerable:!0,get:function(){return _index.stringLiteralTypeAnnotation}}),Object.defineProperty(exports,"StringTypeAnnotation",{enumerable:!0,get:function(){return _index.stringTypeAnnotation}}),Object.defineProperty(exports,"Super",{enumerable:!0,get:function(){return _index.super}}),Object.defineProperty(exports,"SwitchCase",{enumerable:!0,get:function(){return _index.switchCase}}),Object.defineProperty(exports,"SwitchStatement",{enumerable:!0,get:function(){return _index.switchStatement}}),Object.defineProperty(exports,"SymbolTypeAnnotation",{enumerable:!0,get:function(){return _index.symbolTypeAnnotation}}),Object.defineProperty(exports,"TSAnyKeyword",{enumerable:!0,get:function(){return _index.tsAnyKeyword}}),Object.defineProperty(exports,"TSArrayType",{enumerable:!0,get:function(){return _index.tsArrayType}}),Object.defineProperty(exports,"TSAsExpression",{enumerable:!0,get:function(){return _index.tsAsExpression}}),Object.defineProperty(exports,"TSBigIntKeyword",{enumerable:!0,get:function(){return _index.tsBigIntKeyword}}),Object.defineProperty(exports,"TSBooleanKeyword",{enumerable:!0,get:function(){return _index.tsBooleanKeyword}}),Object.defineProperty(exports,"TSCallSignatureDeclaration",{enumerable:!0,get:function(){return _index.tsCallSignatureDeclaration}}),Object.defineProperty(exports,"TSConditionalType",{enumerable:!0,get:function(){return _index.tsConditionalType}}),Object.defineProperty(exports,"TSConstructSignatureDeclaration",{enumerable:!0,get:function(){return _index.tsConstructSignatureDeclaration}}),Object.defineProperty(exports,"TSConstructorType",{enumerable:!0,get:function(){return _index.tsConstructorType}}),Object.defineProperty(exports,"TSDeclareFunction",{enumerable:!0,get:function(){return _index.tsDeclareFunction}}),Object.defineProperty(exports,"TSDeclareMethod",{enumerable:!0,get:function(){return _index.tsDeclareMethod}}),Object.defineProperty(exports,"TSEnumDeclaration",{enumerable:!0,get:function(){return _index.tsEnumDeclaration}}),Object.defineProperty(exports,"TSEnumMember",{enumerable:!0,get:function(){return _index.tsEnumMember}}),Object.defineProperty(exports,"TSExportAssignment",{enumerable:!0,get:function(){return _index.tsExportAssignment}}),Object.defineProperty(exports,"TSExpressionWithTypeArguments",{enumerable:!0,get:function(){return _index.tsExpressionWithTypeArguments}}),Object.defineProperty(exports,"TSExternalModuleReference",{enumerable:!0,get:function(){return _index.tsExternalModuleReference}}),Object.defineProperty(exports,"TSFunctionType",{enumerable:!0,get:function(){return _index.tsFunctionType}}),Object.defineProperty(exports,"TSImportEqualsDeclaration",{enumerable:!0,get:function(){return _index.tsImportEqualsDeclaration}}),Object.defineProperty(exports,"TSImportType",{enumerable:!0,get:function(){return _index.tsImportType}}),Object.defineProperty(exports,"TSIndexSignature",{enumerable:!0,get:function(){return _index.tsIndexSignature}}),Object.defineProperty(exports,"TSIndexedAccessType",{enumerable:!0,get:function(){return _index.tsIndexedAccessType}}),Object.defineProperty(exports,"TSInferType",{enumerable:!0,get:function(){return _index.tsInferType}}),Object.defineProperty(exports,"TSInstantiationExpression",{enumerable:!0,get:function(){return _index.tsInstantiationExpression}}),Object.defineProperty(exports,"TSInterfaceBody",{enumerable:!0,get:function(){return _index.tsInterfaceBody}}),Object.defineProperty(exports,"TSInterfaceDeclaration",{enumerable:!0,get:function(){return _index.tsInterfaceDeclaration}}),Object.defineProperty(exports,"TSIntersectionType",{enumerable:!0,get:function(){return _index.tsIntersectionType}}),Object.defineProperty(exports,"TSIntrinsicKeyword",{enumerable:!0,get:function(){return _index.tsIntrinsicKeyword}}),Object.defineProperty(exports,"TSLiteralType",{enumerable:!0,get:function(){return _index.tsLiteralType}}),Object.defineProperty(exports,"TSMappedType",{enumerable:!0,get:function(){return _index.tsMappedType}}),Object.defineProperty(exports,"TSMethodSignature",{enumerable:!0,get:function(){return _index.tsMethodSignature}}),Object.defineProperty(exports,"TSModuleBlock",{enumerable:!0,get:function(){return _index.tsModuleBlock}}),Object.defineProperty(exports,"TSModuleDeclaration",{enumerable:!0,get:function(){return _index.tsModuleDeclaration}}),Object.defineProperty(exports,"TSNamedTupleMember",{enumerable:!0,get:function(){return _index.tsNamedTupleMember}}),Object.defineProperty(exports,"TSNamespaceExportDeclaration",{enumerable:!0,get:function(){return _index.tsNamespaceExportDeclaration}}),Object.defineProperty(exports,"TSNeverKeyword",{enumerable:!0,get:function(){return _index.tsNeverKeyword}}),Object.defineProperty(exports,"TSNonNullExpression",{enumerable:!0,get:function(){return _index.tsNonNullExpression}}),Object.defineProperty(exports,"TSNullKeyword",{enumerable:!0,get:function(){return _index.tsNullKeyword}}),Object.defineProperty(exports,"TSNumberKeyword",{enumerable:!0,get:function(){return _index.tsNumberKeyword}}),Object.defineProperty(exports,"TSObjectKeyword",{enumerable:!0,get:function(){return _index.tsObjectKeyword}}),Object.defineProperty(exports,"TSOptionalType",{enumerable:!0,get:function(){return _index.tsOptionalType}}),Object.defineProperty(exports,"TSParameterProperty",{enumerable:!0,get:function(){return _index.tsParameterProperty}}),Object.defineProperty(exports,"TSParenthesizedType",{enumerable:!0,get:function(){return _index.tsParenthesizedType}}),Object.defineProperty(exports,"TSPropertySignature",{enumerable:!0,get:function(){return _index.tsPropertySignature}}),Object.defineProperty(exports,"TSQualifiedName",{enumerable:!0,get:function(){return _index.tsQualifiedName}}),Object.defineProperty(exports,"TSRestType",{enumerable:!0,get:function(){return _index.tsRestType}}),Object.defineProperty(exports,"TSSatisfiesExpression",{enumerable:!0,get:function(){return _index.tsSatisfiesExpression}}),Object.defineProperty(exports,"TSStringKeyword",{enumerable:!0,get:function(){return _index.tsStringKeyword}}),Object.defineProperty(exports,"TSSymbolKeyword",{enumerable:!0,get:function(){return _index.tsSymbolKeyword}}),Object.defineProperty(exports,"TSThisType",{enumerable:!0,get:function(){return _index.tsThisType}}),Object.defineProperty(exports,"TSTupleType",{enumerable:!0,get:function(){return _index.tsTupleType}}),Object.defineProperty(exports,"TSTypeAliasDeclaration",{enumerable:!0,get:function(){return _index.tsTypeAliasDeclaration}}),Object.defineProperty(exports,"TSTypeAnnotation",{enumerable:!0,get:function(){return _index.tsTypeAnnotation}}),Object.defineProperty(exports,"TSTypeAssertion",{enumerable:!0,get:function(){return _index.tsTypeAssertion}}),Object.defineProperty(exports,"TSTypeLiteral",{enumerable:!0,get:function(){return _index.tsTypeLiteral}}),Object.defineProperty(exports,"TSTypeOperator",{enumerable:!0,get:function(){return _index.tsTypeOperator}}),Object.defineProperty(exports,"TSTypeParameter",{enumerable:!0,get:function(){return _index.tsTypeParameter}}),Object.defineProperty(exports,"TSTypeParameterDeclaration",{enumerable:!0,get:function(){return _index.tsTypeParameterDeclaration}}),Object.defineProperty(exports,"TSTypeParameterInstantiation",{enumerable:!0,get:function(){return _index.tsTypeParameterInstantiation}}),Object.defineProperty(exports,"TSTypePredicate",{enumerable:!0,get:function(){return _index.tsTypePredicate}}),Object.defineProperty(exports,"TSTypeQuery",{enumerable:!0,get:function(){return _index.tsTypeQuery}}),Object.defineProperty(exports,"TSTypeReference",{enumerable:!0,get:function(){return _index.tsTypeReference}}),Object.defineProperty(exports,"TSUndefinedKeyword",{enumerable:!0,get:function(){return _index.tsUndefinedKeyword}}),Object.defineProperty(exports,"TSUnionType",{enumerable:!0,get:function(){return _index.tsUnionType}}),Object.defineProperty(exports,"TSUnknownKeyword",{enumerable:!0,get:function(){return _index.tsUnknownKeyword}}),Object.defineProperty(exports,"TSVoidKeyword",{enumerable:!0,get:function(){return _index.tsVoidKeyword}}),Object.defineProperty(exports,"TaggedTemplateExpression",{enumerable:!0,get:function(){return _index.taggedTemplateExpression}}),Object.defineProperty(exports,"TemplateElement",{enumerable:!0,get:function(){return _index.templateElement}}),Object.defineProperty(exports,"TemplateLiteral",{enumerable:!0,get:function(){return _index.templateLiteral}}),Object.defineProperty(exports,"ThisExpression",{enumerable:!0,get:function(){return _index.thisExpression}}),Object.defineProperty(exports,"ThisTypeAnnotation",{enumerable:!0,get:function(){return _index.thisTypeAnnotation}}),Object.defineProperty(exports,"ThrowStatement",{enumerable:!0,get:function(){return _index.throwStatement}}),Object.defineProperty(exports,"TopicReference",{enumerable:!0,get:function(){return _index.topicReference}}),Object.defineProperty(exports,"TryStatement",{enumerable:!0,get:function(){return _index.tryStatement}}),Object.defineProperty(exports,"TupleExpression",{enumerable:!0,get:function(){return _index.tupleExpression}}),Object.defineProperty(exports,"TupleTypeAnnotation",{enumerable:!0,get:function(){return _index.tupleTypeAnnotation}}),Object.defineProperty(exports,"TypeAlias",{enumerable:!0,get:function(){return _index.typeAlias}}),Object.defineProperty(exports,"TypeAnnotation",{enumerable:!0,get:function(){return _index.typeAnnotation}}),Object.defineProperty(exports,"TypeCastExpression",{enumerable:!0,get:function(){return _index.typeCastExpression}}),Object.defineProperty(exports,"TypeParameter",{enumerable:!0,get:function(){return _index.typeParameter}}),Object.defineProperty(exports,"TypeParameterDeclaration",{enumerable:!0,get:function(){return _index.typeParameterDeclaration}}),Object.defineProperty(exports,"TypeParameterInstantiation",{enumerable:!0,get:function(){return _index.typeParameterInstantiation}}),Object.defineProperty(exports,"TypeofTypeAnnotation",{enumerable:!0,get:function(){return _index.typeofTypeAnnotation}}),Object.defineProperty(exports,"UnaryExpression",{enumerable:!0,get:function(){return _index.unaryExpression}}),Object.defineProperty(exports,"UnionTypeAnnotation",{enumerable:!0,get:function(){return _index.unionTypeAnnotation}}),Object.defineProperty(exports,"UpdateExpression",{enumerable:!0,get:function(){return _index.updateExpression}}),Object.defineProperty(exports,"V8IntrinsicIdentifier",{enumerable:!0,get:function(){return _index.v8IntrinsicIdentifier}}),Object.defineProperty(exports,"VariableDeclaration",{enumerable:!0,get:function(){return _index.variableDeclaration}}),Object.defineProperty(exports,"VariableDeclarator",{enumerable:!0,get:function(){return _index.variableDeclarator}}),Object.defineProperty(exports,"Variance",{enumerable:!0,get:function(){return _index.variance}}),Object.defineProperty(exports,"VoidTypeAnnotation",{enumerable:!0,get:function(){return _index.voidTypeAnnotation}}),Object.defineProperty(exports,"WhileStatement",{enumerable:!0,get:function(){return _index.whileStatement}}),Object.defineProperty(exports,"WithStatement",{enumerable:!0,get:function(){return _index.withStatement}}),Object.defineProperty(exports,"YieldExpression",{enumerable:!0,get:function(){return _index.yieldExpression}});var _index=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/react/buildChildren.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){const elements=[];for(let i=0;i<node.children.length;i++){let child=node.children[i];(0, _generated.isJSXText)(child)?(0, _cleanJSXElementLiteralChild.default)(child,elements):((0, _generated.isJSXExpressionContainer)(child)&&(child=child.expression),(0, _generated.isJSXEmptyExpression)(child)||elements.push(child));}return elements};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"),_cleanJSXElementLiteralChild=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(typeAnnotations){const types=typeAnnotations.map((type=>(0, _index.isTSTypeAnnotation)(type)?type.typeAnnotation:type)),flattened=(0, _removeTypeDuplicates.default)(types);return 1===flattened.length?flattened[0]:(0, _generated.tsUnionType)(flattened)};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"),_removeTypeDuplicates=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"),_index=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/validateNode.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){const keys=_.BUILDER_KEYS[node.type];for(const key of keys)(0, _validate.default)(node,key,node[key]);return node};var _validate=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/validate.js"),_=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/clone.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){return (0, _cloneNode.default)(node,!1)};var _cloneNode=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneDeep.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){return (0, _cloneNode.default)(node)};var _cloneNode=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){return (0, _cloneNode.default)(node,!0,!0)};var _cloneNode=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node,deep=!0,withoutLoc=!1){return cloneNodeInternal(node,deep,withoutLoc,new Map)};var _definitions=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js"),_generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");const has=Function.call.bind(Object.prototype.hasOwnProperty);function cloneIfNode(obj,deep,withoutLoc,commentsCache){return obj&&"string"==typeof obj.type?cloneNodeInternal(obj,deep,withoutLoc,commentsCache):obj}function cloneIfNodeOrArray(obj,deep,withoutLoc,commentsCache){return Array.isArray(obj)?obj.map((node=>cloneIfNode(node,deep,withoutLoc,commentsCache))):cloneIfNode(obj,deep,withoutLoc,commentsCache)}function cloneNodeInternal(node,deep=!0,withoutLoc=!1,commentsCache){if(!node)return node;const{type}=node,newNode={type:node.type};if((0, _generated.isIdentifier)(node))newNode.name=node.name,has(node,"optional")&&"boolean"==typeof node.optional&&(newNode.optional=node.optional),has(node,"typeAnnotation")&&(newNode.typeAnnotation=deep?cloneIfNodeOrArray(node.typeAnnotation,!0,withoutLoc,commentsCache):node.typeAnnotation);else {if(!has(_definitions.NODE_FIELDS,type))throw new Error(`Unknown node type: "${type}"`);for(const field of Object.keys(_definitions.NODE_FIELDS[type]))has(node,field)&&(newNode[field]=deep?(0, _generated.isFile)(node)&&"comments"===field?maybeCloneComments(node.comments,deep,withoutLoc,commentsCache):cloneIfNodeOrArray(node[field],!0,withoutLoc,commentsCache):node[field]);}return has(node,"loc")&&(newNode.loc=withoutLoc?null:node.loc),has(node,"leadingComments")&&(newNode.leadingComments=maybeCloneComments(node.leadingComments,deep,withoutLoc,commentsCache)),has(node,"innerComments")&&(newNode.innerComments=maybeCloneComments(node.innerComments,deep,withoutLoc,commentsCache)),has(node,"trailingComments")&&(newNode.trailingComments=maybeCloneComments(node.trailingComments,deep,withoutLoc,commentsCache)),has(node,"extra")&&(newNode.extra=Object.assign({},node.extra)),newNode}function maybeCloneComments(comments,deep,withoutLoc,commentsCache){return comments&&deep?comments.map((comment=>{const cache=commentsCache.get(comment);if(cache)return cache;const{type,value,loc}=comment,ret={type,value,loc};return withoutLoc&&(ret.loc=null),commentsCache.set(comment,ret),ret})):comments}},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){return (0, _cloneNode.default)(node,!1,!0)};var _cloneNode=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/addComment.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node,type,content,line){return (0, _addComments.default)(node,type,[{type:line?"CommentLine":"CommentBlock",value:content}])};var _addComments=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/addComments.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/addComments.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node,type,comments){if(!comments||!node)return node;const key=`${type}Comments`;node[key]?"leading"===type?node[key]=comments.concat(node[key]):node[key].push(...comments):node[key]=comments;return node};},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(child,parent){(0, _inherit.default)("innerComments",child,parent);};var _inherit=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/inherit.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(child,parent){(0, _inherit.default)("leadingComments",child,parent);};var _inherit=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/inherit.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(child,parent){(0, _inherit.default)("trailingComments",child,parent);};var _inherit=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/inherit.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritsComments.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(child,parent){return (0, _inheritTrailingComments.default)(child,parent),(0, _inheritLeadingComments.default)(child,parent),(0, _inheritInnerComments.default)(child,parent),child};var _inheritTrailingComments=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"),_inheritLeadingComments=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"),_inheritInnerComments=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/removeComments.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){return _constants.COMMENT_KEYS.forEach((key=>{node[key]=null;})),node};var _constants=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/generated/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.WHILE_TYPES=exports.USERWHITESPACABLE_TYPES=exports.UNARYLIKE_TYPES=exports.TYPESCRIPT_TYPES=exports.TSTYPE_TYPES=exports.TSTYPEELEMENT_TYPES=exports.TSENTITYNAME_TYPES=exports.TSBASETYPE_TYPES=exports.TERMINATORLESS_TYPES=exports.STATEMENT_TYPES=exports.STANDARDIZED_TYPES=exports.SCOPABLE_TYPES=exports.PUREISH_TYPES=exports.PROPERTY_TYPES=exports.PRIVATE_TYPES=exports.PATTERN_TYPES=exports.PATTERNLIKE_TYPES=exports.OBJECTMEMBER_TYPES=exports.MODULESPECIFIER_TYPES=exports.MODULEDECLARATION_TYPES=exports.MISCELLANEOUS_TYPES=exports.METHOD_TYPES=exports.LVAL_TYPES=exports.LOOP_TYPES=exports.LITERAL_TYPES=exports.JSX_TYPES=exports.IMPORTOREXPORTDECLARATION_TYPES=exports.IMMUTABLE_TYPES=exports.FUNCTION_TYPES=exports.FUNCTIONPARENT_TYPES=exports.FOR_TYPES=exports.FORXSTATEMENT_TYPES=exports.FLOW_TYPES=exports.FLOWTYPE_TYPES=exports.FLOWPREDICATE_TYPES=exports.FLOWDECLARATION_TYPES=exports.FLOWBASEANNOTATION_TYPES=exports.EXPRESSION_TYPES=exports.EXPRESSIONWRAPPER_TYPES=exports.EXPORTDECLARATION_TYPES=exports.ENUMMEMBER_TYPES=exports.ENUMBODY_TYPES=exports.DECLARATION_TYPES=exports.CONDITIONAL_TYPES=exports.COMPLETIONSTATEMENT_TYPES=exports.CLASS_TYPES=exports.BLOCK_TYPES=exports.BLOCKPARENT_TYPES=exports.BINARY_TYPES=exports.ACCESSOR_TYPES=void 0;var _definitions=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");const STANDARDIZED_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Standardized;exports.STANDARDIZED_TYPES=STANDARDIZED_TYPES;const EXPRESSION_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Expression;exports.EXPRESSION_TYPES=EXPRESSION_TYPES;const BINARY_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Binary;exports.BINARY_TYPES=BINARY_TYPES;const SCOPABLE_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Scopable;exports.SCOPABLE_TYPES=SCOPABLE_TYPES;const BLOCKPARENT_TYPES=_definitions.FLIPPED_ALIAS_KEYS.BlockParent;exports.BLOCKPARENT_TYPES=BLOCKPARENT_TYPES;const BLOCK_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Block;exports.BLOCK_TYPES=BLOCK_TYPES;const STATEMENT_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Statement;exports.STATEMENT_TYPES=STATEMENT_TYPES;const TERMINATORLESS_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Terminatorless;exports.TERMINATORLESS_TYPES=TERMINATORLESS_TYPES;const COMPLETIONSTATEMENT_TYPES=_definitions.FLIPPED_ALIAS_KEYS.CompletionStatement;exports.COMPLETIONSTATEMENT_TYPES=COMPLETIONSTATEMENT_TYPES;const CONDITIONAL_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Conditional;exports.CONDITIONAL_TYPES=CONDITIONAL_TYPES;const LOOP_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Loop;exports.LOOP_TYPES=LOOP_TYPES;const WHILE_TYPES=_definitions.FLIPPED_ALIAS_KEYS.While;exports.WHILE_TYPES=WHILE_TYPES;const EXPRESSIONWRAPPER_TYPES=_definitions.FLIPPED_ALIAS_KEYS.ExpressionWrapper;exports.EXPRESSIONWRAPPER_TYPES=EXPRESSIONWRAPPER_TYPES;const FOR_TYPES=_definitions.FLIPPED_ALIAS_KEYS.For;exports.FOR_TYPES=FOR_TYPES;const FORXSTATEMENT_TYPES=_definitions.FLIPPED_ALIAS_KEYS.ForXStatement;exports.FORXSTATEMENT_TYPES=FORXSTATEMENT_TYPES;const FUNCTION_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Function;exports.FUNCTION_TYPES=FUNCTION_TYPES;const FUNCTIONPARENT_TYPES=_definitions.FLIPPED_ALIAS_KEYS.FunctionParent;exports.FUNCTIONPARENT_TYPES=FUNCTIONPARENT_TYPES;const PUREISH_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Pureish;exports.PUREISH_TYPES=PUREISH_TYPES;const DECLARATION_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Declaration;exports.DECLARATION_TYPES=DECLARATION_TYPES;const PATTERNLIKE_TYPES=_definitions.FLIPPED_ALIAS_KEYS.PatternLike;exports.PATTERNLIKE_TYPES=PATTERNLIKE_TYPES;const LVAL_TYPES=_definitions.FLIPPED_ALIAS_KEYS.LVal;exports.LVAL_TYPES=LVAL_TYPES;const TSENTITYNAME_TYPES=_definitions.FLIPPED_ALIAS_KEYS.TSEntityName;exports.TSENTITYNAME_TYPES=TSENTITYNAME_TYPES;const LITERAL_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Literal;exports.LITERAL_TYPES=LITERAL_TYPES;const IMMUTABLE_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Immutable;exports.IMMUTABLE_TYPES=IMMUTABLE_TYPES;const USERWHITESPACABLE_TYPES=_definitions.FLIPPED_ALIAS_KEYS.UserWhitespacable;exports.USERWHITESPACABLE_TYPES=USERWHITESPACABLE_TYPES;const METHOD_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Method;exports.METHOD_TYPES=METHOD_TYPES;const OBJECTMEMBER_TYPES=_definitions.FLIPPED_ALIAS_KEYS.ObjectMember;exports.OBJECTMEMBER_TYPES=OBJECTMEMBER_TYPES;const PROPERTY_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Property;exports.PROPERTY_TYPES=PROPERTY_TYPES;const UNARYLIKE_TYPES=_definitions.FLIPPED_ALIAS_KEYS.UnaryLike;exports.UNARYLIKE_TYPES=UNARYLIKE_TYPES;const PATTERN_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Pattern;exports.PATTERN_TYPES=PATTERN_TYPES;const CLASS_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Class;exports.CLASS_TYPES=CLASS_TYPES;const IMPORTOREXPORTDECLARATION_TYPES=_definitions.FLIPPED_ALIAS_KEYS.ImportOrExportDeclaration;exports.IMPORTOREXPORTDECLARATION_TYPES=IMPORTOREXPORTDECLARATION_TYPES;const EXPORTDECLARATION_TYPES=_definitions.FLIPPED_ALIAS_KEYS.ExportDeclaration;exports.EXPORTDECLARATION_TYPES=EXPORTDECLARATION_TYPES;const MODULESPECIFIER_TYPES=_definitions.FLIPPED_ALIAS_KEYS.ModuleSpecifier;exports.MODULESPECIFIER_TYPES=MODULESPECIFIER_TYPES;const ACCESSOR_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Accessor;exports.ACCESSOR_TYPES=ACCESSOR_TYPES;const PRIVATE_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Private;exports.PRIVATE_TYPES=PRIVATE_TYPES;const FLOW_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Flow;exports.FLOW_TYPES=FLOW_TYPES;const FLOWTYPE_TYPES=_definitions.FLIPPED_ALIAS_KEYS.FlowType;exports.FLOWTYPE_TYPES=FLOWTYPE_TYPES;const FLOWBASEANNOTATION_TYPES=_definitions.FLIPPED_ALIAS_KEYS.FlowBaseAnnotation;exports.FLOWBASEANNOTATION_TYPES=FLOWBASEANNOTATION_TYPES;const FLOWDECLARATION_TYPES=_definitions.FLIPPED_ALIAS_KEYS.FlowDeclaration;exports.FLOWDECLARATION_TYPES=FLOWDECLARATION_TYPES;const FLOWPREDICATE_TYPES=_definitions.FLIPPED_ALIAS_KEYS.FlowPredicate;exports.FLOWPREDICATE_TYPES=FLOWPREDICATE_TYPES;const ENUMBODY_TYPES=_definitions.FLIPPED_ALIAS_KEYS.EnumBody;exports.ENUMBODY_TYPES=ENUMBODY_TYPES;const ENUMMEMBER_TYPES=_definitions.FLIPPED_ALIAS_KEYS.EnumMember;exports.ENUMMEMBER_TYPES=ENUMMEMBER_TYPES;const JSX_TYPES=_definitions.FLIPPED_ALIAS_KEYS.JSX;exports.JSX_TYPES=JSX_TYPES;const MISCELLANEOUS_TYPES=_definitions.FLIPPED_ALIAS_KEYS.Miscellaneous;exports.MISCELLANEOUS_TYPES=MISCELLANEOUS_TYPES;const TYPESCRIPT_TYPES=_definitions.FLIPPED_ALIAS_KEYS.TypeScript;exports.TYPESCRIPT_TYPES=TYPESCRIPT_TYPES;const TSTYPEELEMENT_TYPES=_definitions.FLIPPED_ALIAS_KEYS.TSTypeElement;exports.TSTYPEELEMENT_TYPES=TSTYPEELEMENT_TYPES;const TSTYPE_TYPES=_definitions.FLIPPED_ALIAS_KEYS.TSType;exports.TSTYPE_TYPES=TSTYPE_TYPES;const TSBASETYPE_TYPES=_definitions.FLIPPED_ALIAS_KEYS.TSBaseType;exports.TSBASETYPE_TYPES=TSBASETYPE_TYPES;const MODULEDECLARATION_TYPES=IMPORTOREXPORTDECLARATION_TYPES;exports.MODULEDECLARATION_TYPES=MODULEDECLARATION_TYPES;},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.UPDATE_OPERATORS=exports.UNARY_OPERATORS=exports.STRING_UNARY_OPERATORS=exports.STATEMENT_OR_BLOCK_KEYS=exports.NUMBER_UNARY_OPERATORS=exports.NUMBER_BINARY_OPERATORS=exports.NOT_LOCAL_BINDING=exports.LOGICAL_OPERATORS=exports.INHERIT_KEYS=exports.FOR_INIT_KEYS=exports.FLATTENABLE_KEYS=exports.EQUALITY_BINARY_OPERATORS=exports.COMPARISON_BINARY_OPERATORS=exports.COMMENT_KEYS=exports.BOOLEAN_UNARY_OPERATORS=exports.BOOLEAN_NUMBER_BINARY_OPERATORS=exports.BOOLEAN_BINARY_OPERATORS=exports.BLOCK_SCOPED_SYMBOL=exports.BINARY_OPERATORS=exports.ASSIGNMENT_OPERATORS=void 0;exports.STATEMENT_OR_BLOCK_KEYS=["consequent","body","alternate"];exports.FLATTENABLE_KEYS=["body","expressions"];exports.FOR_INIT_KEYS=["left","init"];exports.COMMENT_KEYS=["leadingComments","trailingComments","innerComments"];const LOGICAL_OPERATORS=["||","&&","??"];exports.LOGICAL_OPERATORS=LOGICAL_OPERATORS;exports.UPDATE_OPERATORS=["++","--"];const BOOLEAN_NUMBER_BINARY_OPERATORS=[">","<",">=","<="];exports.BOOLEAN_NUMBER_BINARY_OPERATORS=BOOLEAN_NUMBER_BINARY_OPERATORS;const EQUALITY_BINARY_OPERATORS=["==","===","!=","!=="];exports.EQUALITY_BINARY_OPERATORS=EQUALITY_BINARY_OPERATORS;const COMPARISON_BINARY_OPERATORS=[...EQUALITY_BINARY_OPERATORS,"in","instanceof"];exports.COMPARISON_BINARY_OPERATORS=COMPARISON_BINARY_OPERATORS;const BOOLEAN_BINARY_OPERATORS=[...COMPARISON_BINARY_OPERATORS,...BOOLEAN_NUMBER_BINARY_OPERATORS];exports.BOOLEAN_BINARY_OPERATORS=BOOLEAN_BINARY_OPERATORS;const NUMBER_BINARY_OPERATORS=["-","/","%","*","**","&","|",">>",">>>","<<","^"];exports.NUMBER_BINARY_OPERATORS=NUMBER_BINARY_OPERATORS;const BINARY_OPERATORS=["+",...NUMBER_BINARY_OPERATORS,...BOOLEAN_BINARY_OPERATORS,"|>"];exports.BINARY_OPERATORS=BINARY_OPERATORS;const ASSIGNMENT_OPERATORS=["=","+=",...NUMBER_BINARY_OPERATORS.map((op=>op+"=")),...LOGICAL_OPERATORS.map((op=>op+"="))];exports.ASSIGNMENT_OPERATORS=ASSIGNMENT_OPERATORS;const BOOLEAN_UNARY_OPERATORS=["delete","!"];exports.BOOLEAN_UNARY_OPERATORS=BOOLEAN_UNARY_OPERATORS;const NUMBER_UNARY_OPERATORS=["+","-","~"];exports.NUMBER_UNARY_OPERATORS=NUMBER_UNARY_OPERATORS;const STRING_UNARY_OPERATORS=["typeof"];exports.STRING_UNARY_OPERATORS=STRING_UNARY_OPERATORS;const UNARY_OPERATORS=["void","throw",...BOOLEAN_UNARY_OPERATORS,...NUMBER_UNARY_OPERATORS,...STRING_UNARY_OPERATORS];exports.UNARY_OPERATORS=UNARY_OPERATORS;exports.INHERIT_KEYS={optional:["typeAnnotation","typeParameters","returnType"],force:["start","loc","end"]};const BLOCK_SCOPED_SYMBOL=Symbol.for("var used to be block scoped");exports.BLOCK_SCOPED_SYMBOL=BLOCK_SCOPED_SYMBOL;const NOT_LOCAL_BINDING=Symbol.for("should not be considered a local binding");exports.NOT_LOCAL_BINDING=NOT_LOCAL_BINDING;},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/ensureBlock.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node,key="body"){const result=(0, _toBlock.default)(node[key],node);return node[key]=result,result};var _toBlock=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toBlock.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function gatherSequenceExpressions(nodes,scope,declars){const exprs=[];let ensureLastUndefined=!0;for(const node of nodes)if((0, _generated.isEmptyStatement)(node)||(ensureLastUndefined=!1),(0, _generated.isExpression)(node))exprs.push(node);else if((0, _generated.isExpressionStatement)(node))exprs.push(node.expression);else if((0, _generated.isVariableDeclaration)(node)){if("var"!==node.kind)return;for(const declar of node.declarations){const bindings=(0, _getBindingIdentifiers.default)(declar);for(const key of Object.keys(bindings))declars.push({kind:node.kind,id:(0, _cloneNode.default)(bindings[key])});declar.init&&exprs.push((0, _generated2.assignmentExpression)("=",declar.id,declar.init));}ensureLastUndefined=!0;}else if((0, _generated.isIfStatement)(node)){const consequent=node.consequent?gatherSequenceExpressions([node.consequent],scope,declars):scope.buildUndefinedNode(),alternate=node.alternate?gatherSequenceExpressions([node.alternate],scope,declars):scope.buildUndefinedNode();if(!consequent||!alternate)return;exprs.push((0, _generated2.conditionalExpression)(node.test,consequent,alternate));}else if((0, _generated.isBlockStatement)(node)){const body=gatherSequenceExpressions(node.body,scope,declars);if(!body)return;exprs.push(body);}else {if(!(0, _generated.isEmptyStatement)(node))return;0===nodes.indexOf(node)&&(ensureLastUndefined=!0);}ensureLastUndefined&&exprs.push(scope.buildUndefinedNode());return 1===exprs.length?exprs[0]:(0, _generated2.sequenceExpression)(exprs)};var _getBindingIdentifiers=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"),_generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"),_generated2=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"),_cloneNode=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(name){"eval"!==(name=(0, _toIdentifier.default)(name))&&"arguments"!==name||(name="_"+name);return name};var _toIdentifier=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toIdentifier.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toBlock.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node,parent){if((0, _generated.isBlockStatement)(node))return node;let blockNodes=[];(0, _generated.isEmptyStatement)(node)?blockNodes=[]:((0, _generated.isStatement)(node)||(node=(0, _generated.isFunction)(parent)?(0, _generated2.returnStatement)(node):(0, _generated2.expressionStatement)(node)),blockNodes=[node]);return (0, _generated2.blockStatement)(blockNodes)};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"),_generated2=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toComputedKey.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node,key=node.key||node.property){!node.computed&&(0, _generated.isIdentifier)(key)&&(key=(0, _generated2.stringLiteral)(key.name));return key};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"),_generated2=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toExpression.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"),_default=function(node){(0, _generated.isExpressionStatement)(node)&&(node=node.expression);if((0, _generated.isExpression)(node))return node;(0, _generated.isClass)(node)?node.type="ClassExpression":(0, _generated.isFunction)(node)&&(node.type="FunctionExpression");if(!(0, _generated.isExpression)(node))throw new Error(`cannot turn ${node.type} to an expression`);return node};exports.default=_default;},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toIdentifier.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(input){input+="";let name="";for(const c of input)name+=(0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0))?c:"-";name=name.replace(/^[-0-9]+/,""),name=name.replace(/[-\s]+(.)?/g,(function(match,c){return c?c.toUpperCase():""})),(0, _isValidIdentifier.default)(name)||(name=`_${name}`);return name||"_"};var _isValidIdentifier=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"),_helperValidatorIdentifier=__webpack_require__("./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toKeyAlias.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=toKeyAlias;var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"),_cloneNode=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js"),_removePropertiesDeep=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js");function toKeyAlias(node,key=node.key){let alias;return "method"===node.kind?toKeyAlias.increment()+"":(alias=(0, _generated.isIdentifier)(key)?key.name:(0, _generated.isStringLiteral)(key)?JSON.stringify(key.value):JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key))),node.computed&&(alias=`[${alias}]`),node.static&&(alias=`static:${alias}`),alias)}toKeyAlias.uid=0,toKeyAlias.increment=function(){return toKeyAlias.uid>=Number.MAX_SAFE_INTEGER?toKeyAlias.uid=0:toKeyAlias.uid++};},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toSequenceExpression.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(nodes,scope){if(null==nodes||!nodes.length)return;const declars=[],result=(0, _gatherSequenceExpressions.default)(nodes,scope,declars);if(!result)return;for(const declar of declars)scope.push(declar);return result};var _gatherSequenceExpressions=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toStatement.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"),_generated2=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"),_default=function(node,ignore){if((0, _generated.isStatement)(node))return node;let newType,mustHaveId=!1;if((0, _generated.isClass)(node))mustHaveId=!0,newType="ClassDeclaration";else if((0, _generated.isFunction)(node))mustHaveId=!0,newType="FunctionDeclaration";else if((0, _generated.isAssignmentExpression)(node))return (0, _generated2.expressionStatement)(node);mustHaveId&&!node.id&&(newType=!1);if(!newType){if(ignore)return !1;throw new Error(`cannot turn ${node.type} to a statement`)}return node.type=newType,node};exports.default=_default;},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/valueToNode.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _isValidIdentifier=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"),_generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"),_default=function valueToNode(value){if(void 0===value)return (0, _generated.identifier)("undefined");if(!0===value||!1===value)return (0, _generated.booleanLiteral)(value);if(null===value)return (0, _generated.nullLiteral)();if("string"==typeof value)return (0, _generated.stringLiteral)(value);if("number"==typeof value){let result;if(Number.isFinite(value))result=(0, _generated.numericLiteral)(Math.abs(value));else {let numerator;numerator=Number.isNaN(value)?(0, _generated.numericLiteral)(0):(0, _generated.numericLiteral)(1),result=(0, _generated.binaryExpression)("/",numerator,(0, _generated.numericLiteral)(0));}return (value<0||Object.is(value,-0))&&(result=(0, _generated.unaryExpression)("-",result)),result}if(function(value){return "[object RegExp]"===objectToString(value)}(value)){const pattern=value.source,flags=value.toString().match(/\/([a-z]+|)$/)[1];return (0, _generated.regExpLiteral)(pattern,flags)}if(Array.isArray(value))return (0, _generated.arrayExpression)(value.map(valueToNode));if(function(value){if("object"!=typeof value||null===value||"[object Object]"!==Object.prototype.toString.call(value))return !1;const proto=Object.getPrototypeOf(value);return null===proto||null===Object.getPrototypeOf(proto)}(value)){const props=[];for(const key of Object.keys(value)){let nodeKey;nodeKey=(0, _isValidIdentifier.default)(key)?(0, _generated.identifier)(key):(0, _generated.stringLiteral)(key),props.push((0, _generated.objectProperty)(nodeKey,valueToNode(value[key])));}return (0, _generated.objectExpression)(props)}throw new Error("don't know how to turn this value into a node")};exports.default=_default;const objectToString=Function.call.bind(Object.prototype.toString);},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/core.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.patternLikeCommon=exports.functionTypeAnnotationCommon=exports.functionDeclarationCommon=exports.functionCommon=exports.classMethodOrPropertyCommon=exports.classMethodOrDeclareMethodCommon=void 0;var _is=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/is.js"),_isValidIdentifier=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"),_helperValidatorIdentifier=__webpack_require__("./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/index.js"),_helperStringParser=__webpack_require__("./node_modules/.pnpm/@babel+helper-string-parser@7.19.4/node_modules/@babel/helper-string-parser/lib/index.js"),_constants=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js"),_utils=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js");const defineType=(0, _utils.defineAliasedType)("Standardized");defineType("ArrayExpression",{fields:{elements:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null","Expression","SpreadElement"))),default:({}).BABEL_TYPES_8_BREAKING?void 0:[]}},visitor:["elements"],aliases:["Expression"]}),defineType("AssignmentExpression",{fields:{operator:{validate:function(){if(!({}).BABEL_TYPES_8_BREAKING)return (0, _utils.assertValueType)("string");const identifier=(0, _utils.assertOneOf)(..._constants.ASSIGNMENT_OPERATORS),pattern=(0, _utils.assertOneOf)("=");return function(node,key,val){((0, _is.default)("Pattern",node.left)?pattern:identifier)(node,key,val);}}()},left:{validate:({}).BABEL_TYPES_8_BREAKING?(0, _utils.assertNodeType)("Identifier","MemberExpression","ArrayPattern","ObjectPattern","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","TSNonNullExpression"):(0, _utils.assertNodeType)("LVal")},right:{validate:(0, _utils.assertNodeType)("Expression")}},builder:["operator","left","right"],visitor:["left","right"],aliases:["Expression"]}),defineType("BinaryExpression",{builder:["operator","left","right"],fields:{operator:{validate:(0, _utils.assertOneOf)(..._constants.BINARY_OPERATORS)},left:{validate:function(){const expression=(0, _utils.assertNodeType)("Expression"),inOp=(0, _utils.assertNodeType)("Expression","PrivateName");return Object.assign((function(node,key,val){("in"===node.operator?inOp:expression)(node,key,val);}),{oneOfNodeTypes:["Expression","PrivateName"]})}()},right:{validate:(0, _utils.assertNodeType)("Expression")}},visitor:["left","right"],aliases:["Binary","Expression"]}),defineType("InterpreterDirective",{builder:["value"],fields:{value:{validate:(0, _utils.assertValueType)("string")}}}),defineType("Directive",{visitor:["value"],fields:{value:{validate:(0, _utils.assertNodeType)("DirectiveLiteral")}}}),defineType("DirectiveLiteral",{builder:["value"],fields:{value:{validate:(0, _utils.assertValueType)("string")}}}),defineType("BlockStatement",{builder:["body","directives"],visitor:["directives","body"],fields:{directives:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))),default:[]},body:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))}},aliases:["Scopable","BlockParent","Block","Statement"]}),defineType("BreakStatement",{visitor:["label"],fields:{label:{validate:(0, _utils.assertNodeType)("Identifier"),optional:!0}},aliases:["Statement","Terminatorless","CompletionStatement"]}),defineType("CallExpression",{visitor:["callee","arguments","typeParameters","typeArguments"],builder:["callee","arguments"],aliases:["Expression"],fields:Object.assign({callee:{validate:(0, _utils.assertNodeType)("Expression","Super","V8IntrinsicIdentifier")},arguments:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Expression","SpreadElement","JSXNamespacedName","ArgumentPlaceholder")))}},({}).BABEL_TYPES_8_BREAKING?{}:{optional:{validate:(0, _utils.assertOneOf)(!0,!1),optional:!0}},{typeArguments:{validate:(0, _utils.assertNodeType)("TypeParameterInstantiation"),optional:!0},typeParameters:{validate:(0, _utils.assertNodeType)("TSTypeParameterInstantiation"),optional:!0}})}),defineType("CatchClause",{visitor:["param","body"],fields:{param:{validate:(0, _utils.assertNodeType)("Identifier","ArrayPattern","ObjectPattern"),optional:!0},body:{validate:(0, _utils.assertNodeType)("BlockStatement")}},aliases:["Scopable","BlockParent"]}),defineType("ConditionalExpression",{visitor:["test","consequent","alternate"],fields:{test:{validate:(0, _utils.assertNodeType)("Expression")},consequent:{validate:(0, _utils.assertNodeType)("Expression")},alternate:{validate:(0, _utils.assertNodeType)("Expression")}},aliases:["Expression","Conditional"]}),defineType("ContinueStatement",{visitor:["label"],fields:{label:{validate:(0, _utils.assertNodeType)("Identifier"),optional:!0}},aliases:["Statement","Terminatorless","CompletionStatement"]}),defineType("DebuggerStatement",{aliases:["Statement"]}),defineType("DoWhileStatement",{visitor:["test","body"],fields:{test:{validate:(0, _utils.assertNodeType)("Expression")},body:{validate:(0, _utils.assertNodeType)("Statement")}},aliases:["Statement","BlockParent","Loop","While","Scopable"]}),defineType("EmptyStatement",{aliases:["Statement"]}),defineType("ExpressionStatement",{visitor:["expression"],fields:{expression:{validate:(0, _utils.assertNodeType)("Expression")}},aliases:["Statement","ExpressionWrapper"]}),defineType("File",{builder:["program","comments","tokens"],visitor:["program"],fields:{program:{validate:(0, _utils.assertNodeType)("Program")},comments:{validate:({}).BABEL_TYPES_8_BREAKING?(0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock","CommentLine")):Object.assign((()=>{}),{each:{oneOfNodeTypes:["CommentBlock","CommentLine"]}}),optional:!0},tokens:{validate:(0, _utils.assertEach)(Object.assign((()=>{}),{type:"any"})),optional:!0}}}),defineType("ForInStatement",{visitor:["left","right","body"],aliases:["Scopable","Statement","For","BlockParent","Loop","ForXStatement"],fields:{left:{validate:({}).BABEL_TYPES_8_BREAKING?(0, _utils.assertNodeType)("VariableDeclaration","Identifier","MemberExpression","ArrayPattern","ObjectPattern","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","TSNonNullExpression"):(0, _utils.assertNodeType)("VariableDeclaration","LVal")},right:{validate:(0, _utils.assertNodeType)("Expression")},body:{validate:(0, _utils.assertNodeType)("Statement")}}}),defineType("ForStatement",{visitor:["init","test","update","body"],aliases:["Scopable","Statement","For","BlockParent","Loop"],fields:{init:{validate:(0, _utils.assertNodeType)("VariableDeclaration","Expression"),optional:!0},test:{validate:(0, _utils.assertNodeType)("Expression"),optional:!0},update:{validate:(0, _utils.assertNodeType)("Expression"),optional:!0},body:{validate:(0, _utils.assertNodeType)("Statement")}}});const functionCommon=()=>({params:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier","Pattern","RestElement")))},generator:{default:!1},async:{default:!1}});exports.functionCommon=functionCommon;const functionTypeAnnotationCommon=()=>({returnType:{validate:(0, _utils.assertNodeType)("TypeAnnotation","TSTypeAnnotation","Noop"),optional:!0},typeParameters:{validate:(0, _utils.assertNodeType)("TypeParameterDeclaration","TSTypeParameterDeclaration","Noop"),optional:!0}});exports.functionTypeAnnotationCommon=functionTypeAnnotationCommon;const functionDeclarationCommon=()=>Object.assign({},functionCommon(),{declare:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},id:{validate:(0, _utils.assertNodeType)("Identifier"),optional:!0}});exports.functionDeclarationCommon=functionDeclarationCommon,defineType("FunctionDeclaration",{builder:["id","params","body","generator","async"],visitor:["id","params","body","returnType","typeParameters"],fields:Object.assign({},functionDeclarationCommon(),functionTypeAnnotationCommon(),{body:{validate:(0, _utils.assertNodeType)("BlockStatement")},predicate:{validate:(0, _utils.assertNodeType)("DeclaredPredicate","InferredPredicate"),optional:!0}}),aliases:["Scopable","Function","BlockParent","FunctionParent","Statement","Pureish","Declaration"],validate:function(){if(!({}).BABEL_TYPES_8_BREAKING)return ()=>{};const identifier=(0, _utils.assertNodeType)("Identifier");return function(parent,key,node){(0, _is.default)("ExportDefaultDeclaration",parent)||identifier(node,"id",node.id);}}()}),defineType("FunctionExpression",{inherits:"FunctionDeclaration",aliases:["Scopable","Function","BlockParent","FunctionParent","Expression","Pureish"],fields:Object.assign({},functionCommon(),functionTypeAnnotationCommon(),{id:{validate:(0, _utils.assertNodeType)("Identifier"),optional:!0},body:{validate:(0, _utils.assertNodeType)("BlockStatement")},predicate:{validate:(0, _utils.assertNodeType)("DeclaredPredicate","InferredPredicate"),optional:!0}})});const patternLikeCommon=()=>({typeAnnotation:{validate:(0, _utils.assertNodeType)("TypeAnnotation","TSTypeAnnotation","Noop"),optional:!0},optional:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},decorators:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),optional:!0}});exports.patternLikeCommon=patternLikeCommon,defineType("Identifier",{builder:["name"],visitor:["typeAnnotation","decorators"],aliases:["Expression","PatternLike","LVal","TSEntityName"],fields:Object.assign({},patternLikeCommon(),{name:{validate:(0, _utils.chain)((0, _utils.assertValueType)("string"),Object.assign((function(node,key,val){if(({}).BABEL_TYPES_8_BREAKING&&!(0, _isValidIdentifier.default)(val,!1))throw new TypeError(`"${val}" is not a valid identifier name`)}),{type:"string"}))}}),validate(parent,key,node){if(!({}).BABEL_TYPES_8_BREAKING)return;const match=/\.(\w+)$/.exec(key);if(!match)return;const[,parentKey]=match,nonComp={computed:!1};if("property"===parentKey){if((0, _is.default)("MemberExpression",parent,nonComp))return;if((0, _is.default)("OptionalMemberExpression",parent,nonComp))return}else if("key"===parentKey){if((0, _is.default)("Property",parent,nonComp))return;if((0, _is.default)("Method",parent,nonComp))return}else if("exported"===parentKey){if((0, _is.default)("ExportSpecifier",parent))return}else if("imported"===parentKey){if((0, _is.default)("ImportSpecifier",parent,{imported:node}))return}else if("meta"===parentKey&&(0, _is.default)("MetaProperty",parent,{meta:node}))return;if(((0, _helperValidatorIdentifier.isKeyword)(node.name)||(0, _helperValidatorIdentifier.isReservedWord)(node.name,!1))&&"this"!==node.name)throw new TypeError(`"${node.name}" is not a valid identifier`)}}),defineType("IfStatement",{visitor:["test","consequent","alternate"],aliases:["Statement","Conditional"],fields:{test:{validate:(0, _utils.assertNodeType)("Expression")},consequent:{validate:(0, _utils.assertNodeType)("Statement")},alternate:{optional:!0,validate:(0, _utils.assertNodeType)("Statement")}}}),defineType("LabeledStatement",{visitor:["label","body"],aliases:["Statement"],fields:{label:{validate:(0, _utils.assertNodeType)("Identifier")},body:{validate:(0, _utils.assertNodeType)("Statement")}}}),defineType("StringLiteral",{builder:["value"],fields:{value:{validate:(0, _utils.assertValueType)("string")}},aliases:["Expression","Pureish","Literal","Immutable"]}),defineType("NumericLiteral",{builder:["value"],deprecatedAlias:"NumberLiteral",fields:{value:{validate:(0, _utils.assertValueType)("number")}},aliases:["Expression","Pureish","Literal","Immutable"]}),defineType("NullLiteral",{aliases:["Expression","Pureish","Literal","Immutable"]}),defineType("BooleanLiteral",{builder:["value"],fields:{value:{validate:(0, _utils.assertValueType)("boolean")}},aliases:["Expression","Pureish","Literal","Immutable"]}),defineType("RegExpLiteral",{builder:["pattern","flags"],deprecatedAlias:"RegexLiteral",aliases:["Expression","Pureish","Literal"],fields:{pattern:{validate:(0, _utils.assertValueType)("string")},flags:{validate:(0, _utils.chain)((0, _utils.assertValueType)("string"),Object.assign((function(node,key,val){if(!({}).BABEL_TYPES_8_BREAKING)return;const invalid=/[^gimsuy]/.exec(val);if(invalid)throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`)}),{type:"string"})),default:""}}}),defineType("LogicalExpression",{builder:["operator","left","right"],visitor:["left","right"],aliases:["Binary","Expression"],fields:{operator:{validate:(0, _utils.assertOneOf)(..._constants.LOGICAL_OPERATORS)},left:{validate:(0, _utils.assertNodeType)("Expression")},right:{validate:(0, _utils.assertNodeType)("Expression")}}}),defineType("MemberExpression",{builder:["object","property","computed",...({}).BABEL_TYPES_8_BREAKING?[]:["optional"]],visitor:["object","property"],aliases:["Expression","LVal"],fields:Object.assign({object:{validate:(0, _utils.assertNodeType)("Expression","Super")},property:{validate:function(){const normal=(0, _utils.assertNodeType)("Identifier","PrivateName"),computed=(0, _utils.assertNodeType)("Expression"),validator=function(node,key,val){(node.computed?computed:normal)(node,key,val);};return validator.oneOfNodeTypes=["Expression","Identifier","PrivateName"],validator}()},computed:{default:!1}},({}).BABEL_TYPES_8_BREAKING?{}:{optional:{validate:(0, _utils.assertOneOf)(!0,!1),optional:!0}})}),defineType("NewExpression",{inherits:"CallExpression"}),defineType("Program",{visitor:["directives","body"],builder:["body","directives","sourceType","interpreter"],fields:{sourceFile:{validate:(0, _utils.assertValueType)("string")},sourceType:{validate:(0, _utils.assertOneOf)("script","module"),default:"script"},interpreter:{validate:(0, _utils.assertNodeType)("InterpreterDirective"),default:null,optional:!0},directives:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))),default:[]},body:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))}},aliases:["Scopable","BlockParent","Block"]}),defineType("ObjectExpression",{visitor:["properties"],aliases:["Expression"],fields:{properties:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectMethod","ObjectProperty","SpreadElement")))}}}),defineType("ObjectMethod",{builder:["kind","key","params","body","computed","generator","async"],fields:Object.assign({},functionCommon(),functionTypeAnnotationCommon(),{kind:Object.assign({validate:(0, _utils.assertOneOf)("method","get","set")},({}).BABEL_TYPES_8_BREAKING?{}:{default:"method"}),computed:{default:!1},key:{validate:function(){const normal=(0, _utils.assertNodeType)("Identifier","StringLiteral","NumericLiteral","BigIntLiteral"),computed=(0, _utils.assertNodeType)("Expression"),validator=function(node,key,val){(node.computed?computed:normal)(node,key,val);};return validator.oneOfNodeTypes=["Expression","Identifier","StringLiteral","NumericLiteral","BigIntLiteral"],validator}()},decorators:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),optional:!0},body:{validate:(0, _utils.assertNodeType)("BlockStatement")}}),visitor:["key","params","body","decorators","returnType","typeParameters"],aliases:["UserWhitespacable","Function","Scopable","BlockParent","FunctionParent","Method","ObjectMember"]}),defineType("ObjectProperty",{builder:["key","value","computed","shorthand",...({}).BABEL_TYPES_8_BREAKING?[]:["decorators"]],fields:{computed:{default:!1},key:{validate:function(){const normal=(0, _utils.assertNodeType)("Identifier","StringLiteral","NumericLiteral","BigIntLiteral","DecimalLiteral","PrivateName"),computed=(0, _utils.assertNodeType)("Expression");return Object.assign((function(node,key,val){(node.computed?computed:normal)(node,key,val);}),{oneOfNodeTypes:["Expression","Identifier","StringLiteral","NumericLiteral","BigIntLiteral","DecimalLiteral","PrivateName"]})}()},value:{validate:(0, _utils.assertNodeType)("Expression","PatternLike")},shorthand:{validate:(0, _utils.chain)((0, _utils.assertValueType)("boolean"),Object.assign((function(node,key,val){if(({}).BABEL_TYPES_8_BREAKING&&val&&node.computed)throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true")}),{type:"boolean"}),(function(node,key,val){if(({}).BABEL_TYPES_8_BREAKING&&val&&!(0, _is.default)("Identifier",node.key))throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier")})),default:!1},decorators:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),optional:!0}},visitor:["key","value","decorators"],aliases:["UserWhitespacable","Property","ObjectMember"],validate:function(){const pattern=(0, _utils.assertNodeType)("Identifier","Pattern","TSAsExpression","TSSatisfiesExpression","TSNonNullExpression","TSTypeAssertion"),expression=(0, _utils.assertNodeType)("Expression");return function(parent,key,node){if(!({}).BABEL_TYPES_8_BREAKING)return;((0, _is.default)("ObjectPattern",parent)?pattern:expression)(node,"value",node.value);}}()}),defineType("RestElement",{visitor:["argument","typeAnnotation"],builder:["argument"],aliases:["LVal","PatternLike"],deprecatedAlias:"RestProperty",fields:Object.assign({},patternLikeCommon(),{argument:{validate:({}).BABEL_TYPES_8_BREAKING?(0, _utils.assertNodeType)("Identifier","ArrayPattern","ObjectPattern","MemberExpression","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","TSNonNullExpression"):(0, _utils.assertNodeType)("LVal")}}),validate(parent,key){if(!({}).BABEL_TYPES_8_BREAKING)return;const match=/(\w+)\[(\d+)\]/.exec(key);if(!match)throw new Error("Internal Babel error: malformed key.");const[,listKey,index]=match;if(parent[listKey].length>+index+1)throw new TypeError(`RestElement must be last element of ${listKey}`)}}),defineType("ReturnStatement",{visitor:["argument"],aliases:["Statement","Terminatorless","CompletionStatement"],fields:{argument:{validate:(0, _utils.assertNodeType)("Expression"),optional:!0}}}),defineType("SequenceExpression",{visitor:["expressions"],fields:{expressions:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Expression")))}},aliases:["Expression"]}),defineType("ParenthesizedExpression",{visitor:["expression"],aliases:["Expression","ExpressionWrapper"],fields:{expression:{validate:(0, _utils.assertNodeType)("Expression")}}}),defineType("SwitchCase",{visitor:["test","consequent"],fields:{test:{validate:(0, _utils.assertNodeType)("Expression"),optional:!0},consequent:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))}}}),defineType("SwitchStatement",{visitor:["discriminant","cases"],aliases:["Statement","BlockParent","Scopable"],fields:{discriminant:{validate:(0, _utils.assertNodeType)("Expression")},cases:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("SwitchCase")))}}}),defineType("ThisExpression",{aliases:["Expression"]}),defineType("ThrowStatement",{visitor:["argument"],aliases:["Statement","Terminatorless","CompletionStatement"],fields:{argument:{validate:(0, _utils.assertNodeType)("Expression")}}}),defineType("TryStatement",{visitor:["block","handler","finalizer"],aliases:["Statement"],fields:{block:{validate:(0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"),Object.assign((function(node){if(({}).BABEL_TYPES_8_BREAKING&&!node.handler&&!node.finalizer)throw new TypeError("TryStatement expects either a handler or finalizer, or both")}),{oneOfNodeTypes:["BlockStatement"]}))},handler:{optional:!0,validate:(0, _utils.assertNodeType)("CatchClause")},finalizer:{optional:!0,validate:(0, _utils.assertNodeType)("BlockStatement")}}}),defineType("UnaryExpression",{builder:["operator","argument","prefix"],fields:{prefix:{default:!0},argument:{validate:(0, _utils.assertNodeType)("Expression")},operator:{validate:(0, _utils.assertOneOf)(..._constants.UNARY_OPERATORS)}},visitor:["argument"],aliases:["UnaryLike","Expression"]}),defineType("UpdateExpression",{builder:["operator","argument","prefix"],fields:{prefix:{default:!1},argument:{validate:({}).BABEL_TYPES_8_BREAKING?(0, _utils.assertNodeType)("Identifier","MemberExpression"):(0, _utils.assertNodeType)("Expression")},operator:{validate:(0, _utils.assertOneOf)(..._constants.UPDATE_OPERATORS)}},visitor:["argument"],aliases:["Expression"]}),defineType("VariableDeclaration",{builder:["kind","declarations"],visitor:["declarations"],aliases:["Statement","Declaration"],fields:{declare:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},kind:{validate:(0, _utils.assertOneOf)("var","let","const","using")},declarations:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("VariableDeclarator")))}},validate(parent,key,node){if(({}).BABEL_TYPES_8_BREAKING&&(0, _is.default)("ForXStatement",parent,{left:node})&&1!==node.declarations.length)throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`)}}),defineType("VariableDeclarator",{visitor:["id","init"],fields:{id:{validate:function(){if(!({}).BABEL_TYPES_8_BREAKING)return (0, _utils.assertNodeType)("LVal");const normal=(0, _utils.assertNodeType)("Identifier","ArrayPattern","ObjectPattern"),without=(0, _utils.assertNodeType)("Identifier");return function(node,key,val){(node.init?normal:without)(node,key,val);}}()},definite:{optional:!0,validate:(0, _utils.assertValueType)("boolean")},init:{optional:!0,validate:(0, _utils.assertNodeType)("Expression")}}}),defineType("WhileStatement",{visitor:["test","body"],aliases:["Statement","BlockParent","Loop","While","Scopable"],fields:{test:{validate:(0, _utils.assertNodeType)("Expression")},body:{validate:(0, _utils.assertNodeType)("Statement")}}}),defineType("WithStatement",{visitor:["object","body"],aliases:["Statement"],fields:{object:{validate:(0, _utils.assertNodeType)("Expression")},body:{validate:(0, _utils.assertNodeType)("Statement")}}}),defineType("AssignmentPattern",{visitor:["left","right","decorators"],builder:["left","right"],aliases:["Pattern","PatternLike","LVal"],fields:Object.assign({},patternLikeCommon(),{left:{validate:(0, _utils.assertNodeType)("Identifier","ObjectPattern","ArrayPattern","MemberExpression","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","TSNonNullExpression")},right:{validate:(0, _utils.assertNodeType)("Expression")},decorators:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),optional:!0}})}),defineType("ArrayPattern",{visitor:["elements","typeAnnotation"],builder:["elements"],aliases:["Pattern","PatternLike","LVal"],fields:Object.assign({},patternLikeCommon(),{elements:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null","PatternLike","LVal")))}})}),defineType("ArrowFunctionExpression",{builder:["params","body","async"],visitor:["params","body","returnType","typeParameters"],aliases:["Scopable","Function","BlockParent","FunctionParent","Expression","Pureish"],fields:Object.assign({},functionCommon(),functionTypeAnnotationCommon(),{expression:{validate:(0, _utils.assertValueType)("boolean")},body:{validate:(0, _utils.assertNodeType)("BlockStatement","Expression")},predicate:{validate:(0, _utils.assertNodeType)("DeclaredPredicate","InferredPredicate"),optional:!0}})}),defineType("ClassBody",{visitor:["body"],fields:{body:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("ClassMethod","ClassPrivateMethod","ClassProperty","ClassPrivateProperty","ClassAccessorProperty","TSDeclareMethod","TSIndexSignature","StaticBlock")))}}}),defineType("ClassExpression",{builder:["id","superClass","body","decorators"],visitor:["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],aliases:["Scopable","Class","Expression"],fields:{id:{validate:(0, _utils.assertNodeType)("Identifier"),optional:!0},typeParameters:{validate:(0, _utils.assertNodeType)("TypeParameterDeclaration","TSTypeParameterDeclaration","Noop"),optional:!0},body:{validate:(0, _utils.assertNodeType)("ClassBody")},superClass:{optional:!0,validate:(0, _utils.assertNodeType)("Expression")},superTypeParameters:{validate:(0, _utils.assertNodeType)("TypeParameterInstantiation","TSTypeParameterInstantiation"),optional:!0},implements:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments","ClassImplements"))),optional:!0},decorators:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),optional:!0},mixins:{validate:(0, _utils.assertNodeType)("InterfaceExtends"),optional:!0}}}),defineType("ClassDeclaration",{inherits:"ClassExpression",aliases:["Scopable","Class","Statement","Declaration"],fields:{id:{validate:(0, _utils.assertNodeType)("Identifier")},typeParameters:{validate:(0, _utils.assertNodeType)("TypeParameterDeclaration","TSTypeParameterDeclaration","Noop"),optional:!0},body:{validate:(0, _utils.assertNodeType)("ClassBody")},superClass:{optional:!0,validate:(0, _utils.assertNodeType)("Expression")},superTypeParameters:{validate:(0, _utils.assertNodeType)("TypeParameterInstantiation","TSTypeParameterInstantiation"),optional:!0},implements:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments","ClassImplements"))),optional:!0},decorators:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),optional:!0},mixins:{validate:(0, _utils.assertNodeType)("InterfaceExtends"),optional:!0},declare:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},abstract:{validate:(0, _utils.assertValueType)("boolean"),optional:!0}},validate:function(){const identifier=(0, _utils.assertNodeType)("Identifier");return function(parent,key,node){({}).BABEL_TYPES_8_BREAKING&&((0, _is.default)("ExportDefaultDeclaration",parent)||identifier(node,"id",node.id));}}()}),defineType("ExportAllDeclaration",{visitor:["source"],aliases:["Statement","Declaration","ImportOrExportDeclaration","ExportDeclaration"],fields:{source:{validate:(0, _utils.assertNodeType)("StringLiteral")},exportKind:(0, _utils.validateOptional)((0, _utils.assertOneOf)("type","value")),assertions:{optional:!0,validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))}}}),defineType("ExportDefaultDeclaration",{visitor:["declaration"],aliases:["Statement","Declaration","ImportOrExportDeclaration","ExportDeclaration"],fields:{declaration:{validate:(0, _utils.assertNodeType)("TSDeclareFunction","FunctionDeclaration","ClassDeclaration","Expression")},exportKind:(0, _utils.validateOptional)((0, _utils.assertOneOf)("value"))}}),defineType("ExportNamedDeclaration",{visitor:["declaration","specifiers","source"],aliases:["Statement","Declaration","ImportOrExportDeclaration","ExportDeclaration"],fields:{declaration:{optional:!0,validate:(0, _utils.chain)((0, _utils.assertNodeType)("Declaration"),Object.assign((function(node,key,val){if(({}).BABEL_TYPES_8_BREAKING&&val&&node.specifiers.length)throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration")}),{oneOfNodeTypes:["Declaration"]}),(function(node,key,val){if(({}).BABEL_TYPES_8_BREAKING&&val&&node.source)throw new TypeError("Cannot export a declaration from a source")}))},assertions:{optional:!0,validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))},specifiers:{default:[],validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)(function(){const sourced=(0, _utils.assertNodeType)("ExportSpecifier","ExportDefaultSpecifier","ExportNamespaceSpecifier"),sourceless=(0, _utils.assertNodeType)("ExportSpecifier");return ({}).BABEL_TYPES_8_BREAKING?function(node,key,val){(node.source?sourced:sourceless)(node,key,val);}:sourced}()))},source:{validate:(0, _utils.assertNodeType)("StringLiteral"),optional:!0},exportKind:(0, _utils.validateOptional)((0, _utils.assertOneOf)("type","value"))}}),defineType("ExportSpecifier",{visitor:["local","exported"],aliases:["ModuleSpecifier"],fields:{local:{validate:(0, _utils.assertNodeType)("Identifier")},exported:{validate:(0, _utils.assertNodeType)("Identifier","StringLiteral")},exportKind:{validate:(0, _utils.assertOneOf)("type","value"),optional:!0}}}),defineType("ForOfStatement",{visitor:["left","right","body"],builder:["left","right","body","await"],aliases:["Scopable","Statement","For","BlockParent","Loop","ForXStatement"],fields:{left:{validate:function(){if(!({}).BABEL_TYPES_8_BREAKING)return (0, _utils.assertNodeType)("VariableDeclaration","LVal");const declaration=(0, _utils.assertNodeType)("VariableDeclaration"),lval=(0, _utils.assertNodeType)("Identifier","MemberExpression","ArrayPattern","ObjectPattern","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","TSNonNullExpression");return function(node,key,val){(0, _is.default)("VariableDeclaration",val)?declaration(node,key,val):lval(node,key,val);}}()},right:{validate:(0, _utils.assertNodeType)("Expression")},body:{validate:(0, _utils.assertNodeType)("Statement")},await:{default:!1}}}),defineType("ImportDeclaration",{visitor:["specifiers","source"],aliases:["Statement","Declaration","ImportOrExportDeclaration"],fields:{assertions:{optional:!0,validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute")))},module:{optional:!0,validate:(0, _utils.assertValueType)("boolean")},specifiers:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier")))},source:{validate:(0, _utils.assertNodeType)("StringLiteral")},importKind:{validate:(0, _utils.assertOneOf)("type","typeof","value"),optional:!0}}}),defineType("ImportDefaultSpecifier",{visitor:["local"],aliases:["ModuleSpecifier"],fields:{local:{validate:(0, _utils.assertNodeType)("Identifier")}}}),defineType("ImportNamespaceSpecifier",{visitor:["local"],aliases:["ModuleSpecifier"],fields:{local:{validate:(0, _utils.assertNodeType)("Identifier")}}}),defineType("ImportSpecifier",{visitor:["local","imported"],aliases:["ModuleSpecifier"],fields:{local:{validate:(0, _utils.assertNodeType)("Identifier")},imported:{validate:(0, _utils.assertNodeType)("Identifier","StringLiteral")},importKind:{validate:(0, _utils.assertOneOf)("type","typeof","value"),optional:!0}}}),defineType("MetaProperty",{visitor:["meta","property"],aliases:["Expression"],fields:{meta:{validate:(0, _utils.chain)((0, _utils.assertNodeType)("Identifier"),Object.assign((function(node,key,val){if(!({}).BABEL_TYPES_8_BREAKING)return;let property;switch(val.name){case"function":property="sent";break;case"new":property="target";break;case"import":property="meta";}if(!(0, _is.default)("Identifier",node.property,{name:property}))throw new TypeError("Unrecognised MetaProperty")}),{oneOfNodeTypes:["Identifier"]}))},property:{validate:(0, _utils.assertNodeType)("Identifier")}}});const classMethodOrPropertyCommon=()=>({abstract:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},accessibility:{validate:(0, _utils.assertOneOf)("public","private","protected"),optional:!0},static:{default:!1},override:{default:!1},computed:{default:!1},optional:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},key:{validate:(0, _utils.chain)(function(){const normal=(0, _utils.assertNodeType)("Identifier","StringLiteral","NumericLiteral"),computed=(0, _utils.assertNodeType)("Expression");return function(node,key,val){(node.computed?computed:normal)(node,key,val);}}(),(0, _utils.assertNodeType)("Identifier","StringLiteral","NumericLiteral","BigIntLiteral","Expression"))}});exports.classMethodOrPropertyCommon=classMethodOrPropertyCommon;const classMethodOrDeclareMethodCommon=()=>Object.assign({},functionCommon(),classMethodOrPropertyCommon(),{params:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier","Pattern","RestElement","TSParameterProperty")))},kind:{validate:(0, _utils.assertOneOf)("get","set","method","constructor"),default:"method"},access:{validate:(0, _utils.chain)((0, _utils.assertValueType)("string"),(0, _utils.assertOneOf)("public","private","protected")),optional:!0},decorators:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),optional:!0}});exports.classMethodOrDeclareMethodCommon=classMethodOrDeclareMethodCommon,defineType("ClassMethod",{aliases:["Function","Scopable","BlockParent","FunctionParent","Method"],builder:["kind","key","params","body","computed","static","generator","async"],visitor:["key","params","body","decorators","returnType","typeParameters"],fields:Object.assign({},classMethodOrDeclareMethodCommon(),functionTypeAnnotationCommon(),{body:{validate:(0, _utils.assertNodeType)("BlockStatement")}})}),defineType("ObjectPattern",{visitor:["properties","typeAnnotation","decorators"],builder:["properties"],aliases:["Pattern","PatternLike","LVal"],fields:Object.assign({},patternLikeCommon(),{properties:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("RestElement","ObjectProperty")))}})}),defineType("SpreadElement",{visitor:["argument"],aliases:["UnaryLike"],deprecatedAlias:"SpreadProperty",fields:{argument:{validate:(0, _utils.assertNodeType)("Expression")}}}),defineType("Super",{aliases:["Expression"]}),defineType("TaggedTemplateExpression",{visitor:["tag","quasi","typeParameters"],builder:["tag","quasi"],aliases:["Expression"],fields:{tag:{validate:(0, _utils.assertNodeType)("Expression")},quasi:{validate:(0, _utils.assertNodeType)("TemplateLiteral")},typeParameters:{validate:(0, _utils.assertNodeType)("TypeParameterInstantiation","TSTypeParameterInstantiation"),optional:!0}}}),defineType("TemplateElement",{builder:["value","tail"],fields:{value:{validate:(0, _utils.chain)((0, _utils.assertShape)({raw:{validate:(0, _utils.assertValueType)("string")},cooked:{validate:(0, _utils.assertValueType)("string"),optional:!0}}),(function(node){const raw=node.value.raw;let unterminatedCalled=!1;const error=()=>{throw new Error("Internal @babel/types error.")},{str,firstInvalidLoc}=(0, _helperStringParser.readStringContents)("template",raw,0,0,0,{unterminated(){unterminatedCalled=!0;},strictNumericEscape:error,invalidEscapeSequence:error,numericSeparatorInEscapeSequence:error,unexpectedNumericSeparator:error,invalidDigit:error,invalidCodePoint:error});if(!unterminatedCalled)throw new Error("Invalid raw");node.value.cooked=firstInvalidLoc?null:str;}))},tail:{default:!1}}}),defineType("TemplateLiteral",{visitor:["quasis","expressions"],aliases:["Expression","Literal"],fields:{quasis:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("TemplateElement")))},expressions:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Expression","TSType")),(function(node,key,val){if(node.quasis.length!==val.length+1)throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.\nExpected ${val.length+1} quasis but got ${node.quasis.length}`)}))}}}),defineType("YieldExpression",{builder:["argument","delegate"],visitor:["argument"],aliases:["Expression","Terminatorless"],fields:{delegate:{validate:(0, _utils.chain)((0, _utils.assertValueType)("boolean"),Object.assign((function(node,key,val){if(({}).BABEL_TYPES_8_BREAKING&&val&&!node.argument)throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument")}),{type:"boolean"})),default:!1},argument:{optional:!0,validate:(0, _utils.assertNodeType)("Expression")}}}),defineType("AwaitExpression",{builder:["argument"],visitor:["argument"],aliases:["Expression","Terminatorless"],fields:{argument:{validate:(0, _utils.assertNodeType)("Expression")}}}),defineType("Import",{aliases:["Expression"]}),defineType("BigIntLiteral",{builder:["value"],fields:{value:{validate:(0, _utils.assertValueType)("string")}},aliases:["Expression","Pureish","Literal","Immutable"]}),defineType("ExportNamespaceSpecifier",{visitor:["exported"],aliases:["ModuleSpecifier"],fields:{exported:{validate:(0, _utils.assertNodeType)("Identifier")}}}),defineType("OptionalMemberExpression",{builder:["object","property","computed","optional"],visitor:["object","property"],aliases:["Expression"],fields:{object:{validate:(0, _utils.assertNodeType)("Expression")},property:{validate:function(){const normal=(0, _utils.assertNodeType)("Identifier"),computed=(0, _utils.assertNodeType)("Expression");return Object.assign((function(node,key,val){(node.computed?computed:normal)(node,key,val);}),{oneOfNodeTypes:["Expression","Identifier"]})}()},computed:{default:!1},optional:{validate:({}).BABEL_TYPES_8_BREAKING?(0, _utils.chain)((0, _utils.assertValueType)("boolean"),(0, _utils.assertOptionalChainStart)()):(0, _utils.assertValueType)("boolean")}}}),defineType("OptionalCallExpression",{visitor:["callee","arguments","typeParameters","typeArguments"],builder:["callee","arguments","optional"],aliases:["Expression"],fields:{callee:{validate:(0, _utils.assertNodeType)("Expression")},arguments:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Expression","SpreadElement","JSXNamespacedName","ArgumentPlaceholder")))},optional:{validate:({}).BABEL_TYPES_8_BREAKING?(0, _utils.chain)((0, _utils.assertValueType)("boolean"),(0, _utils.assertOptionalChainStart)()):(0, _utils.assertValueType)("boolean")},typeArguments:{validate:(0, _utils.assertNodeType)("TypeParameterInstantiation"),optional:!0},typeParameters:{validate:(0, _utils.assertNodeType)("TSTypeParameterInstantiation"),optional:!0}}}),defineType("ClassProperty",{visitor:["key","value","typeAnnotation","decorators"],builder:["key","value","typeAnnotation","decorators","computed","static"],aliases:["Property"],fields:Object.assign({},classMethodOrPropertyCommon(),{value:{validate:(0, _utils.assertNodeType)("Expression"),optional:!0},definite:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},typeAnnotation:{validate:(0, _utils.assertNodeType)("TypeAnnotation","TSTypeAnnotation","Noop"),optional:!0},decorators:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),optional:!0},readonly:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},declare:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},variance:{validate:(0, _utils.assertNodeType)("Variance"),optional:!0}})}),defineType("ClassAccessorProperty",{visitor:["key","value","typeAnnotation","decorators"],builder:["key","value","typeAnnotation","decorators","computed","static"],aliases:["Property","Accessor"],fields:Object.assign({},classMethodOrPropertyCommon(),{key:{validate:(0, _utils.chain)(function(){const normal=(0, _utils.assertNodeType)("Identifier","StringLiteral","NumericLiteral","BigIntLiteral","PrivateName"),computed=(0, _utils.assertNodeType)("Expression");return function(node,key,val){(node.computed?computed:normal)(node,key,val);}}(),(0, _utils.assertNodeType)("Identifier","StringLiteral","NumericLiteral","BigIntLiteral","Expression","PrivateName"))},value:{validate:(0, _utils.assertNodeType)("Expression"),optional:!0},definite:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},typeAnnotation:{validate:(0, _utils.assertNodeType)("TypeAnnotation","TSTypeAnnotation","Noop"),optional:!0},decorators:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),optional:!0},readonly:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},declare:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},variance:{validate:(0, _utils.assertNodeType)("Variance"),optional:!0}})}),defineType("ClassPrivateProperty",{visitor:["key","value","decorators","typeAnnotation"],builder:["key","value","decorators","static"],aliases:["Property","Private"],fields:{key:{validate:(0, _utils.assertNodeType)("PrivateName")},value:{validate:(0, _utils.assertNodeType)("Expression"),optional:!0},typeAnnotation:{validate:(0, _utils.assertNodeType)("TypeAnnotation","TSTypeAnnotation","Noop"),optional:!0},decorators:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),optional:!0},static:{validate:(0, _utils.assertValueType)("boolean"),default:!1},readonly:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},definite:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},variance:{validate:(0, _utils.assertNodeType)("Variance"),optional:!0}}}),defineType("ClassPrivateMethod",{builder:["kind","key","params","body","static"],visitor:["key","params","body","decorators","returnType","typeParameters"],aliases:["Function","Scopable","BlockParent","FunctionParent","Method","Private"],fields:Object.assign({},classMethodOrDeclareMethodCommon(),functionTypeAnnotationCommon(),{kind:{validate:(0, _utils.assertOneOf)("get","set","method"),default:"method"},key:{validate:(0, _utils.assertNodeType)("PrivateName")},body:{validate:(0, _utils.assertNodeType)("BlockStatement")}})}),defineType("PrivateName",{visitor:["id"],aliases:["Private"],fields:{id:{validate:(0, _utils.assertNodeType)("Identifier")}}}),defineType("StaticBlock",{visitor:["body"],fields:{body:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Statement")))}},aliases:["Scopable","BlockParent","FunctionParent"]});},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/deprecated-aliases.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.DEPRECATED_ALIASES=void 0;exports.DEPRECATED_ALIASES={ModuleDeclaration:"ImportOrExportDeclaration"};},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/experimental.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var _utils=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js");(0, _utils.default)("ArgumentPlaceholder",{}),(0, _utils.default)("BindExpression",{visitor:["object","callee"],aliases:["Expression"],fields:({}).BABEL_TYPES_8_BREAKING?{object:{validate:(0, _utils.assertNodeType)("Expression")},callee:{validate:(0, _utils.assertNodeType)("Expression")}}:{object:{validate:Object.assign((()=>{}),{oneOfNodeTypes:["Expression"]})},callee:{validate:Object.assign((()=>{}),{oneOfNodeTypes:["Expression"]})}}}),(0, _utils.default)("ImportAttribute",{visitor:["key","value"],fields:{key:{validate:(0, _utils.assertNodeType)("Identifier","StringLiteral")},value:{validate:(0, _utils.assertNodeType)("StringLiteral")}}}),(0, _utils.default)("Decorator",{visitor:["expression"],fields:{expression:{validate:(0, _utils.assertNodeType)("Expression")}}}),(0, _utils.default)("DoExpression",{visitor:["body"],builder:["body","async"],aliases:["Expression"],fields:{body:{validate:(0, _utils.assertNodeType)("BlockStatement")},async:{validate:(0, _utils.assertValueType)("boolean"),default:!1}}}),(0, _utils.default)("ExportDefaultSpecifier",{visitor:["exported"],aliases:["ModuleSpecifier"],fields:{exported:{validate:(0, _utils.assertNodeType)("Identifier")}}}),(0, _utils.default)("RecordExpression",{visitor:["properties"],aliases:["Expression"],fields:{properties:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectProperty","SpreadElement")))}}}),(0, _utils.default)("TupleExpression",{fields:{elements:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Expression","SpreadElement"))),default:[]}},visitor:["elements"],aliases:["Expression"]}),(0, _utils.default)("DecimalLiteral",{builder:["value"],fields:{value:{validate:(0, _utils.assertValueType)("string")}},aliases:["Expression","Pureish","Literal","Immutable"]}),(0, _utils.default)("ModuleExpression",{visitor:["body"],fields:{body:{validate:(0, _utils.assertNodeType)("Program")}},aliases:["Expression"]}),(0, _utils.default)("TopicReference",{aliases:["Expression"]}),(0, _utils.default)("PipelineTopicExpression",{builder:["expression"],visitor:["expression"],fields:{expression:{validate:(0, _utils.assertNodeType)("Expression")}},aliases:["Expression"]}),(0, _utils.default)("PipelineBareFunction",{builder:["callee"],visitor:["callee"],fields:{callee:{validate:(0, _utils.assertNodeType)("Expression")}},aliases:["Expression"]}),(0, _utils.default)("PipelinePrimaryTopicReference",{aliases:["Expression"]});},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/flow.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var _utils=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js");const defineType=(0, _utils.defineAliasedType)("Flow"),defineInterfaceishType=name=>{defineType(name,{builder:["id","typeParameters","extends","body"],visitor:["id","typeParameters","extends","mixins","implements","body"],aliases:["FlowDeclaration","Statement","Declaration"],fields:{id:(0, _utils.validateType)("Identifier"),typeParameters:(0, _utils.validateOptionalType)("TypeParameterDeclaration"),extends:(0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),mixins:(0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),implements:(0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements")),body:(0, _utils.validateType)("ObjectTypeAnnotation")}});};defineType("AnyTypeAnnotation",{aliases:["FlowType","FlowBaseAnnotation"]}),defineType("ArrayTypeAnnotation",{visitor:["elementType"],aliases:["FlowType"],fields:{elementType:(0, _utils.validateType)("FlowType")}}),defineType("BooleanTypeAnnotation",{aliases:["FlowType","FlowBaseAnnotation"]}),defineType("BooleanLiteralTypeAnnotation",{builder:["value"],aliases:["FlowType"],fields:{value:(0, _utils.validate)((0, _utils.assertValueType)("boolean"))}}),defineType("NullLiteralTypeAnnotation",{aliases:["FlowType","FlowBaseAnnotation"]}),defineType("ClassImplements",{visitor:["id","typeParameters"],fields:{id:(0, _utils.validateType)("Identifier"),typeParameters:(0, _utils.validateOptionalType)("TypeParameterInstantiation")}}),defineInterfaceishType("DeclareClass"),defineType("DeclareFunction",{visitor:["id"],aliases:["FlowDeclaration","Statement","Declaration"],fields:{id:(0, _utils.validateType)("Identifier"),predicate:(0, _utils.validateOptionalType)("DeclaredPredicate")}}),defineInterfaceishType("DeclareInterface"),defineType("DeclareModule",{builder:["id","body","kind"],visitor:["id","body"],aliases:["FlowDeclaration","Statement","Declaration"],fields:{id:(0, _utils.validateType)(["Identifier","StringLiteral"]),body:(0, _utils.validateType)("BlockStatement"),kind:(0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS","ES"))}}),defineType("DeclareModuleExports",{visitor:["typeAnnotation"],aliases:["FlowDeclaration","Statement","Declaration"],fields:{typeAnnotation:(0, _utils.validateType)("TypeAnnotation")}}),defineType("DeclareTypeAlias",{visitor:["id","typeParameters","right"],aliases:["FlowDeclaration","Statement","Declaration"],fields:{id:(0, _utils.validateType)("Identifier"),typeParameters:(0, _utils.validateOptionalType)("TypeParameterDeclaration"),right:(0, _utils.validateType)("FlowType")}}),defineType("DeclareOpaqueType",{visitor:["id","typeParameters","supertype"],aliases:["FlowDeclaration","Statement","Declaration"],fields:{id:(0, _utils.validateType)("Identifier"),typeParameters:(0, _utils.validateOptionalType)("TypeParameterDeclaration"),supertype:(0, _utils.validateOptionalType)("FlowType"),impltype:(0, _utils.validateOptionalType)("FlowType")}}),defineType("DeclareVariable",{visitor:["id"],aliases:["FlowDeclaration","Statement","Declaration"],fields:{id:(0, _utils.validateType)("Identifier")}}),defineType("DeclareExportDeclaration",{visitor:["declaration","specifiers","source"],aliases:["FlowDeclaration","Statement","Declaration"],fields:{declaration:(0, _utils.validateOptionalType)("Flow"),specifiers:(0, _utils.validateOptional)((0, _utils.arrayOfType)(["ExportSpecifier","ExportNamespaceSpecifier"])),source:(0, _utils.validateOptionalType)("StringLiteral"),default:(0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))}}),defineType("DeclareExportAllDeclaration",{visitor:["source"],aliases:["FlowDeclaration","Statement","Declaration"],fields:{source:(0, _utils.validateType)("StringLiteral"),exportKind:(0, _utils.validateOptional)((0, _utils.assertOneOf)("type","value"))}}),defineType("DeclaredPredicate",{visitor:["value"],aliases:["FlowPredicate"],fields:{value:(0, _utils.validateType)("Flow")}}),defineType("ExistsTypeAnnotation",{aliases:["FlowType"]}),defineType("FunctionTypeAnnotation",{visitor:["typeParameters","params","rest","returnType"],aliases:["FlowType"],fields:{typeParameters:(0, _utils.validateOptionalType)("TypeParameterDeclaration"),params:(0, _utils.validate)((0, _utils.arrayOfType)("FunctionTypeParam")),rest:(0, _utils.validateOptionalType)("FunctionTypeParam"),this:(0, _utils.validateOptionalType)("FunctionTypeParam"),returnType:(0, _utils.validateType)("FlowType")}}),defineType("FunctionTypeParam",{visitor:["name","typeAnnotation"],fields:{name:(0, _utils.validateOptionalType)("Identifier"),typeAnnotation:(0, _utils.validateType)("FlowType"),optional:(0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))}}),defineType("GenericTypeAnnotation",{visitor:["id","typeParameters"],aliases:["FlowType"],fields:{id:(0, _utils.validateType)(["Identifier","QualifiedTypeIdentifier"]),typeParameters:(0, _utils.validateOptionalType)("TypeParameterInstantiation")}}),defineType("InferredPredicate",{aliases:["FlowPredicate"]}),defineType("InterfaceExtends",{visitor:["id","typeParameters"],fields:{id:(0, _utils.validateType)(["Identifier","QualifiedTypeIdentifier"]),typeParameters:(0, _utils.validateOptionalType)("TypeParameterInstantiation")}}),defineInterfaceishType("InterfaceDeclaration"),defineType("InterfaceTypeAnnotation",{visitor:["extends","body"],aliases:["FlowType"],fields:{extends:(0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),body:(0, _utils.validateType)("ObjectTypeAnnotation")}}),defineType("IntersectionTypeAnnotation",{visitor:["types"],aliases:["FlowType"],fields:{types:(0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))}}),defineType("MixedTypeAnnotation",{aliases:["FlowType","FlowBaseAnnotation"]}),defineType("EmptyTypeAnnotation",{aliases:["FlowType","FlowBaseAnnotation"]}),defineType("NullableTypeAnnotation",{visitor:["typeAnnotation"],aliases:["FlowType"],fields:{typeAnnotation:(0, _utils.validateType)("FlowType")}}),defineType("NumberLiteralTypeAnnotation",{builder:["value"],aliases:["FlowType"],fields:{value:(0, _utils.validate)((0, _utils.assertValueType)("number"))}}),defineType("NumberTypeAnnotation",{aliases:["FlowType","FlowBaseAnnotation"]}),defineType("ObjectTypeAnnotation",{visitor:["properties","indexers","callProperties","internalSlots"],aliases:["FlowType"],builder:["properties","indexers","callProperties","internalSlots","exact"],fields:{properties:(0, _utils.validate)((0, _utils.arrayOfType)(["ObjectTypeProperty","ObjectTypeSpreadProperty"])),indexers:{validate:(0, _utils.arrayOfType)("ObjectTypeIndexer"),optional:!0,default:[]},callProperties:{validate:(0, _utils.arrayOfType)("ObjectTypeCallProperty"),optional:!0,default:[]},internalSlots:{validate:(0, _utils.arrayOfType)("ObjectTypeInternalSlot"),optional:!0,default:[]},exact:{validate:(0, _utils.assertValueType)("boolean"),default:!1},inexact:(0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))}}),defineType("ObjectTypeInternalSlot",{visitor:["id","value","optional","static","method"],aliases:["UserWhitespacable"],fields:{id:(0, _utils.validateType)("Identifier"),value:(0, _utils.validateType)("FlowType"),optional:(0, _utils.validate)((0, _utils.assertValueType)("boolean")),static:(0, _utils.validate)((0, _utils.assertValueType)("boolean")),method:(0, _utils.validate)((0, _utils.assertValueType)("boolean"))}}),defineType("ObjectTypeCallProperty",{visitor:["value"],aliases:["UserWhitespacable"],fields:{value:(0, _utils.validateType)("FlowType"),static:(0, _utils.validate)((0, _utils.assertValueType)("boolean"))}}),defineType("ObjectTypeIndexer",{visitor:["id","key","value","variance"],aliases:["UserWhitespacable"],fields:{id:(0, _utils.validateOptionalType)("Identifier"),key:(0, _utils.validateType)("FlowType"),value:(0, _utils.validateType)("FlowType"),static:(0, _utils.validate)((0, _utils.assertValueType)("boolean")),variance:(0, _utils.validateOptionalType)("Variance")}}),defineType("ObjectTypeProperty",{visitor:["key","value","variance"],aliases:["UserWhitespacable"],fields:{key:(0, _utils.validateType)(["Identifier","StringLiteral"]),value:(0, _utils.validateType)("FlowType"),kind:(0, _utils.validate)((0, _utils.assertOneOf)("init","get","set")),static:(0, _utils.validate)((0, _utils.assertValueType)("boolean")),proto:(0, _utils.validate)((0, _utils.assertValueType)("boolean")),optional:(0, _utils.validate)((0, _utils.assertValueType)("boolean")),variance:(0, _utils.validateOptionalType)("Variance"),method:(0, _utils.validate)((0, _utils.assertValueType)("boolean"))}}),defineType("ObjectTypeSpreadProperty",{visitor:["argument"],aliases:["UserWhitespacable"],fields:{argument:(0, _utils.validateType)("FlowType")}}),defineType("OpaqueType",{visitor:["id","typeParameters","supertype","impltype"],aliases:["FlowDeclaration","Statement","Declaration"],fields:{id:(0, _utils.validateType)("Identifier"),typeParameters:(0, _utils.validateOptionalType)("TypeParameterDeclaration"),supertype:(0, _utils.validateOptionalType)("FlowType"),impltype:(0, _utils.validateType)("FlowType")}}),defineType("QualifiedTypeIdentifier",{visitor:["id","qualification"],fields:{id:(0, _utils.validateType)("Identifier"),qualification:(0, _utils.validateType)(["Identifier","QualifiedTypeIdentifier"])}}),defineType("StringLiteralTypeAnnotation",{builder:["value"],aliases:["FlowType"],fields:{value:(0, _utils.validate)((0, _utils.assertValueType)("string"))}}),defineType("StringTypeAnnotation",{aliases:["FlowType","FlowBaseAnnotation"]}),defineType("SymbolTypeAnnotation",{aliases:["FlowType","FlowBaseAnnotation"]}),defineType("ThisTypeAnnotation",{aliases:["FlowType","FlowBaseAnnotation"]}),defineType("TupleTypeAnnotation",{visitor:["types"],aliases:["FlowType"],fields:{types:(0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))}}),defineType("TypeofTypeAnnotation",{visitor:["argument"],aliases:["FlowType"],fields:{argument:(0, _utils.validateType)("FlowType")}}),defineType("TypeAlias",{visitor:["id","typeParameters","right"],aliases:["FlowDeclaration","Statement","Declaration"],fields:{id:(0, _utils.validateType)("Identifier"),typeParameters:(0, _utils.validateOptionalType)("TypeParameterDeclaration"),right:(0, _utils.validateType)("FlowType")}}),defineType("TypeAnnotation",{visitor:["typeAnnotation"],fields:{typeAnnotation:(0, _utils.validateType)("FlowType")}}),defineType("TypeCastExpression",{visitor:["expression","typeAnnotation"],aliases:["ExpressionWrapper","Expression"],fields:{expression:(0, _utils.validateType)("Expression"),typeAnnotation:(0, _utils.validateType)("TypeAnnotation")}}),defineType("TypeParameter",{visitor:["bound","default","variance"],fields:{name:(0, _utils.validate)((0, _utils.assertValueType)("string")),bound:(0, _utils.validateOptionalType)("TypeAnnotation"),default:(0, _utils.validateOptionalType)("FlowType"),variance:(0, _utils.validateOptionalType)("Variance")}}),defineType("TypeParameterDeclaration",{visitor:["params"],fields:{params:(0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter"))}}),defineType("TypeParameterInstantiation",{visitor:["params"],fields:{params:(0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))}}),defineType("UnionTypeAnnotation",{visitor:["types"],aliases:["FlowType"],fields:{types:(0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))}}),defineType("Variance",{builder:["kind"],fields:{kind:(0, _utils.validate)((0, _utils.assertOneOf)("minus","plus"))}}),defineType("VoidTypeAnnotation",{aliases:["FlowType","FlowBaseAnnotation"]}),defineType("EnumDeclaration",{aliases:["Statement","Declaration"],visitor:["id","body"],fields:{id:(0, _utils.validateType)("Identifier"),body:(0, _utils.validateType)(["EnumBooleanBody","EnumNumberBody","EnumStringBody","EnumSymbolBody"])}}),defineType("EnumBooleanBody",{aliases:["EnumBody"],visitor:["members"],fields:{explicitType:(0, _utils.validate)((0, _utils.assertValueType)("boolean")),members:(0, _utils.validateArrayOfType)("EnumBooleanMember"),hasUnknownMembers:(0, _utils.validate)((0, _utils.assertValueType)("boolean"))}}),defineType("EnumNumberBody",{aliases:["EnumBody"],visitor:["members"],fields:{explicitType:(0, _utils.validate)((0, _utils.assertValueType)("boolean")),members:(0, _utils.validateArrayOfType)("EnumNumberMember"),hasUnknownMembers:(0, _utils.validate)((0, _utils.assertValueType)("boolean"))}}),defineType("EnumStringBody",{aliases:["EnumBody"],visitor:["members"],fields:{explicitType:(0, _utils.validate)((0, _utils.assertValueType)("boolean")),members:(0, _utils.validateArrayOfType)(["EnumStringMember","EnumDefaultedMember"]),hasUnknownMembers:(0, _utils.validate)((0, _utils.assertValueType)("boolean"))}}),defineType("EnumSymbolBody",{aliases:["EnumBody"],visitor:["members"],fields:{members:(0, _utils.validateArrayOfType)("EnumDefaultedMember"),hasUnknownMembers:(0, _utils.validate)((0, _utils.assertValueType)("boolean"))}}),defineType("EnumBooleanMember",{aliases:["EnumMember"],visitor:["id"],fields:{id:(0, _utils.validateType)("Identifier"),init:(0, _utils.validateType)("BooleanLiteral")}}),defineType("EnumNumberMember",{aliases:["EnumMember"],visitor:["id","init"],fields:{id:(0, _utils.validateType)("Identifier"),init:(0, _utils.validateType)("NumericLiteral")}}),defineType("EnumStringMember",{aliases:["EnumMember"],visitor:["id","init"],fields:{id:(0, _utils.validateType)("Identifier"),init:(0, _utils.validateType)("StringLiteral")}}),defineType("EnumDefaultedMember",{aliases:["EnumMember"],visitor:["id"],fields:{id:(0, _utils.validateType)("Identifier")}}),defineType("IndexedAccessType",{visitor:["objectType","indexType"],aliases:["FlowType"],fields:{objectType:(0, _utils.validateType)("FlowType"),indexType:(0, _utils.validateType)("FlowType")}}),defineType("OptionalIndexedAccessType",{visitor:["objectType","indexType"],aliases:["FlowType"],fields:{objectType:(0, _utils.validateType)("FlowType"),indexType:(0, _utils.validateType)("FlowType"),optional:(0, _utils.validate)((0, _utils.assertValueType)("boolean"))}});},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"ALIAS_KEYS",{enumerable:!0,get:function(){return _utils.ALIAS_KEYS}}),Object.defineProperty(exports,"BUILDER_KEYS",{enumerable:!0,get:function(){return _utils.BUILDER_KEYS}}),Object.defineProperty(exports,"DEPRECATED_ALIASES",{enumerable:!0,get:function(){return _deprecatedAliases.DEPRECATED_ALIASES}}),Object.defineProperty(exports,"DEPRECATED_KEYS",{enumerable:!0,get:function(){return _utils.DEPRECATED_KEYS}}),Object.defineProperty(exports,"FLIPPED_ALIAS_KEYS",{enumerable:!0,get:function(){return _utils.FLIPPED_ALIAS_KEYS}}),Object.defineProperty(exports,"NODE_FIELDS",{enumerable:!0,get:function(){return _utils.NODE_FIELDS}}),Object.defineProperty(exports,"NODE_PARENT_VALIDATIONS",{enumerable:!0,get:function(){return _utils.NODE_PARENT_VALIDATIONS}}),Object.defineProperty(exports,"PLACEHOLDERS",{enumerable:!0,get:function(){return _placeholders.PLACEHOLDERS}}),Object.defineProperty(exports,"PLACEHOLDERS_ALIAS",{enumerable:!0,get:function(){return _placeholders.PLACEHOLDERS_ALIAS}}),Object.defineProperty(exports,"PLACEHOLDERS_FLIPPED_ALIAS",{enumerable:!0,get:function(){return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS}}),exports.TYPES=void 0,Object.defineProperty(exports,"VISITOR_KEYS",{enumerable:!0,get:function(){return _utils.VISITOR_KEYS}});var _toFastProperties=__webpack_require__("./node_modules/.pnpm/to-fast-properties@2.0.0/node_modules/to-fast-properties/index.js");__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/core.js"),__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/flow.js"),__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/jsx.js"),__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/misc.js"),__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/experimental.js"),__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/typescript.js");var _utils=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js"),_placeholders=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/placeholders.js"),_deprecatedAliases=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/deprecated-aliases.js");Object.keys(_deprecatedAliases.DEPRECATED_ALIASES).forEach((deprecatedAlias=>{_utils.FLIPPED_ALIAS_KEYS[deprecatedAlias]=_utils.FLIPPED_ALIAS_KEYS[_deprecatedAliases.DEPRECATED_ALIASES[deprecatedAlias]];})),_toFastProperties(_utils.VISITOR_KEYS),_toFastProperties(_utils.ALIAS_KEYS),_toFastProperties(_utils.FLIPPED_ALIAS_KEYS),_toFastProperties(_utils.NODE_FIELDS),_toFastProperties(_utils.BUILDER_KEYS),_toFastProperties(_utils.DEPRECATED_KEYS),_toFastProperties(_placeholders.PLACEHOLDERS_ALIAS),_toFastProperties(_placeholders.PLACEHOLDERS_FLIPPED_ALIAS);const TYPES=[].concat(Object.keys(_utils.VISITOR_KEYS),Object.keys(_utils.FLIPPED_ALIAS_KEYS),Object.keys(_utils.DEPRECATED_KEYS));exports.TYPES=TYPES;},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/jsx.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var _utils=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js");const defineType=(0, _utils.defineAliasedType)("JSX");defineType("JSXAttribute",{visitor:["name","value"],aliases:["Immutable"],fields:{name:{validate:(0, _utils.assertNodeType)("JSXIdentifier","JSXNamespacedName")},value:{optional:!0,validate:(0, _utils.assertNodeType)("JSXElement","JSXFragment","StringLiteral","JSXExpressionContainer")}}}),defineType("JSXClosingElement",{visitor:["name"],aliases:["Immutable"],fields:{name:{validate:(0, _utils.assertNodeType)("JSXIdentifier","JSXMemberExpression","JSXNamespacedName")}}}),defineType("JSXElement",{builder:["openingElement","closingElement","children","selfClosing"],visitor:["openingElement","children","closingElement"],aliases:["Immutable","Expression"],fields:Object.assign({openingElement:{validate:(0, _utils.assertNodeType)("JSXOpeningElement")},closingElement:{optional:!0,validate:(0, _utils.assertNodeType)("JSXClosingElement")},children:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText","JSXExpressionContainer","JSXSpreadChild","JSXElement","JSXFragment")))}},{selfClosing:{validate:(0, _utils.assertValueType)("boolean"),optional:!0}})}),defineType("JSXEmptyExpression",{}),defineType("JSXExpressionContainer",{visitor:["expression"],aliases:["Immutable"],fields:{expression:{validate:(0, _utils.assertNodeType)("Expression","JSXEmptyExpression")}}}),defineType("JSXSpreadChild",{visitor:["expression"],aliases:["Immutable"],fields:{expression:{validate:(0, _utils.assertNodeType)("Expression")}}}),defineType("JSXIdentifier",{builder:["name"],fields:{name:{validate:(0, _utils.assertValueType)("string")}}}),defineType("JSXMemberExpression",{visitor:["object","property"],fields:{object:{validate:(0, _utils.assertNodeType)("JSXMemberExpression","JSXIdentifier")},property:{validate:(0, _utils.assertNodeType)("JSXIdentifier")}}}),defineType("JSXNamespacedName",{visitor:["namespace","name"],fields:{namespace:{validate:(0, _utils.assertNodeType)("JSXIdentifier")},name:{validate:(0, _utils.assertNodeType)("JSXIdentifier")}}}),defineType("JSXOpeningElement",{builder:["name","attributes","selfClosing"],visitor:["name","attributes"],aliases:["Immutable"],fields:{name:{validate:(0, _utils.assertNodeType)("JSXIdentifier","JSXMemberExpression","JSXNamespacedName")},selfClosing:{default:!1},attributes:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("JSXAttribute","JSXSpreadAttribute")))},typeParameters:{validate:(0, _utils.assertNodeType)("TypeParameterInstantiation","TSTypeParameterInstantiation"),optional:!0}}}),defineType("JSXSpreadAttribute",{visitor:["argument"],fields:{argument:{validate:(0, _utils.assertNodeType)("Expression")}}}),defineType("JSXText",{aliases:["Immutable"],builder:["value"],fields:{value:{validate:(0, _utils.assertValueType)("string")}}}),defineType("JSXFragment",{builder:["openingFragment","closingFragment","children"],visitor:["openingFragment","children","closingFragment"],aliases:["Immutable","Expression"],fields:{openingFragment:{validate:(0, _utils.assertNodeType)("JSXOpeningFragment")},closingFragment:{validate:(0, _utils.assertNodeType)("JSXClosingFragment")},children:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText","JSXExpressionContainer","JSXSpreadChild","JSXElement","JSXFragment")))}}}),defineType("JSXOpeningFragment",{aliases:["Immutable"]}),defineType("JSXClosingFragment",{aliases:["Immutable"]});},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/misc.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var _utils=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js"),_placeholders=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/placeholders.js");const defineType=(0, _utils.defineAliasedType)("Miscellaneous");defineType("Noop",{visitor:[]}),defineType("Placeholder",{visitor:[],builder:["expectedNode","name"],fields:{name:{validate:(0, _utils.assertNodeType)("Identifier")},expectedNode:{validate:(0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS)}}}),defineType("V8IntrinsicIdentifier",{builder:["name"],fields:{name:{validate:(0, _utils.assertValueType)("string")}}});},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/placeholders.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.PLACEHOLDERS_FLIPPED_ALIAS=exports.PLACEHOLDERS_ALIAS=exports.PLACEHOLDERS=void 0;var _utils=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js");const PLACEHOLDERS=["Identifier","StringLiteral","Expression","Statement","Declaration","BlockStatement","ClassBody","Pattern"];exports.PLACEHOLDERS=PLACEHOLDERS;const PLACEHOLDERS_ALIAS={Declaration:["Statement"],Pattern:["PatternLike","LVal"]};exports.PLACEHOLDERS_ALIAS=PLACEHOLDERS_ALIAS;for(const type of PLACEHOLDERS){const alias=_utils.ALIAS_KEYS[type];null!=alias&&alias.length&&(PLACEHOLDERS_ALIAS[type]=alias);}const PLACEHOLDERS_FLIPPED_ALIAS={};exports.PLACEHOLDERS_FLIPPED_ALIAS=PLACEHOLDERS_FLIPPED_ALIAS,Object.keys(PLACEHOLDERS_ALIAS).forEach((type=>{PLACEHOLDERS_ALIAS[type].forEach((alias=>{Object.hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS,alias)||(PLACEHOLDERS_FLIPPED_ALIAS[alias]=[]),PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);}));}));},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/typescript.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{var _utils=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js"),_core=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/core.js"),_is=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/is.js");const defineType=(0, _utils.defineAliasedType)("TypeScript"),bool=(0, _utils.assertValueType)("boolean"),tSFunctionTypeAnnotationCommon=()=>({returnType:{validate:(0, _utils.assertNodeType)("TSTypeAnnotation","Noop"),optional:!0},typeParameters:{validate:(0, _utils.assertNodeType)("TSTypeParameterDeclaration","Noop"),optional:!0}});defineType("TSParameterProperty",{aliases:["LVal"],visitor:["parameter"],fields:{accessibility:{validate:(0, _utils.assertOneOf)("public","private","protected"),optional:!0},readonly:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},parameter:{validate:(0, _utils.assertNodeType)("Identifier","AssignmentPattern")},override:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},decorators:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),optional:!0}}}),defineType("TSDeclareFunction",{aliases:["Statement","Declaration"],visitor:["id","typeParameters","params","returnType"],fields:Object.assign({},(0, _core.functionDeclarationCommon)(),tSFunctionTypeAnnotationCommon())}),defineType("TSDeclareMethod",{visitor:["decorators","key","typeParameters","params","returnType"],fields:Object.assign({},(0, _core.classMethodOrDeclareMethodCommon)(),tSFunctionTypeAnnotationCommon())}),defineType("TSQualifiedName",{aliases:["TSEntityName"],visitor:["left","right"],fields:{left:(0, _utils.validateType)("TSEntityName"),right:(0, _utils.validateType)("Identifier")}});const signatureDeclarationCommon=()=>({typeParameters:(0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),parameters:(0, _utils.validateArrayOfType)(["Identifier","RestElement"]),typeAnnotation:(0, _utils.validateOptionalType)("TSTypeAnnotation")}),callConstructSignatureDeclaration={aliases:["TSTypeElement"],visitor:["typeParameters","parameters","typeAnnotation"],fields:signatureDeclarationCommon()};defineType("TSCallSignatureDeclaration",callConstructSignatureDeclaration),defineType("TSConstructSignatureDeclaration",callConstructSignatureDeclaration);const namedTypeElementCommon=()=>({key:(0, _utils.validateType)("Expression"),computed:{default:!1},optional:(0, _utils.validateOptional)(bool)});defineType("TSPropertySignature",{aliases:["TSTypeElement"],visitor:["key","typeAnnotation","initializer"],fields:Object.assign({},namedTypeElementCommon(),{readonly:(0, _utils.validateOptional)(bool),typeAnnotation:(0, _utils.validateOptionalType)("TSTypeAnnotation"),initializer:(0, _utils.validateOptionalType)("Expression"),kind:{validate:(0, _utils.assertOneOf)("get","set")}})}),defineType("TSMethodSignature",{aliases:["TSTypeElement"],visitor:["key","typeParameters","parameters","typeAnnotation"],fields:Object.assign({},signatureDeclarationCommon(),namedTypeElementCommon(),{kind:{validate:(0, _utils.assertOneOf)("method","get","set")}})}),defineType("TSIndexSignature",{aliases:["TSTypeElement"],visitor:["parameters","typeAnnotation"],fields:{readonly:(0, _utils.validateOptional)(bool),static:(0, _utils.validateOptional)(bool),parameters:(0, _utils.validateArrayOfType)("Identifier"),typeAnnotation:(0, _utils.validateOptionalType)("TSTypeAnnotation")}});const tsKeywordTypes=["TSAnyKeyword","TSBooleanKeyword","TSBigIntKeyword","TSIntrinsicKeyword","TSNeverKeyword","TSNullKeyword","TSNumberKeyword","TSObjectKeyword","TSStringKeyword","TSSymbolKeyword","TSUndefinedKeyword","TSUnknownKeyword","TSVoidKeyword"];for(const type of tsKeywordTypes)defineType(type,{aliases:["TSType","TSBaseType"],visitor:[],fields:{}});defineType("TSThisType",{aliases:["TSType","TSBaseType"],visitor:[],fields:{}});const fnOrCtrBase={aliases:["TSType"],visitor:["typeParameters","parameters","typeAnnotation"]};defineType("TSFunctionType",Object.assign({},fnOrCtrBase,{fields:signatureDeclarationCommon()})),defineType("TSConstructorType",Object.assign({},fnOrCtrBase,{fields:Object.assign({},signatureDeclarationCommon(),{abstract:(0, _utils.validateOptional)(bool)})})),defineType("TSTypeReference",{aliases:["TSType"],visitor:["typeName","typeParameters"],fields:{typeName:(0, _utils.validateType)("TSEntityName"),typeParameters:(0, _utils.validateOptionalType)("TSTypeParameterInstantiation")}}),defineType("TSTypePredicate",{aliases:["TSType"],visitor:["parameterName","typeAnnotation"],builder:["parameterName","typeAnnotation","asserts"],fields:{parameterName:(0, _utils.validateType)(["Identifier","TSThisType"]),typeAnnotation:(0, _utils.validateOptionalType)("TSTypeAnnotation"),asserts:(0, _utils.validateOptional)(bool)}}),defineType("TSTypeQuery",{aliases:["TSType"],visitor:["exprName","typeParameters"],fields:{exprName:(0, _utils.validateType)(["TSEntityName","TSImportType"]),typeParameters:(0, _utils.validateOptionalType)("TSTypeParameterInstantiation")}}),defineType("TSTypeLiteral",{aliases:["TSType"],visitor:["members"],fields:{members:(0, _utils.validateArrayOfType)("TSTypeElement")}}),defineType("TSArrayType",{aliases:["TSType"],visitor:["elementType"],fields:{elementType:(0, _utils.validateType)("TSType")}}),defineType("TSTupleType",{aliases:["TSType"],visitor:["elementTypes"],fields:{elementTypes:(0, _utils.validateArrayOfType)(["TSType","TSNamedTupleMember"])}}),defineType("TSOptionalType",{aliases:["TSType"],visitor:["typeAnnotation"],fields:{typeAnnotation:(0, _utils.validateType)("TSType")}}),defineType("TSRestType",{aliases:["TSType"],visitor:["typeAnnotation"],fields:{typeAnnotation:(0, _utils.validateType)("TSType")}}),defineType("TSNamedTupleMember",{visitor:["label","elementType"],builder:["label","elementType","optional"],fields:{label:(0, _utils.validateType)("Identifier"),optional:{validate:bool,default:!1},elementType:(0, _utils.validateType)("TSType")}});const unionOrIntersection={aliases:["TSType"],visitor:["types"],fields:{types:(0, _utils.validateArrayOfType)("TSType")}};defineType("TSUnionType",unionOrIntersection),defineType("TSIntersectionType",unionOrIntersection),defineType("TSConditionalType",{aliases:["TSType"],visitor:["checkType","extendsType","trueType","falseType"],fields:{checkType:(0, _utils.validateType)("TSType"),extendsType:(0, _utils.validateType)("TSType"),trueType:(0, _utils.validateType)("TSType"),falseType:(0, _utils.validateType)("TSType")}}),defineType("TSInferType",{aliases:["TSType"],visitor:["typeParameter"],fields:{typeParameter:(0, _utils.validateType)("TSTypeParameter")}}),defineType("TSParenthesizedType",{aliases:["TSType"],visitor:["typeAnnotation"],fields:{typeAnnotation:(0, _utils.validateType)("TSType")}}),defineType("TSTypeOperator",{aliases:["TSType"],visitor:["typeAnnotation"],fields:{operator:(0, _utils.validate)((0, _utils.assertValueType)("string")),typeAnnotation:(0, _utils.validateType)("TSType")}}),defineType("TSIndexedAccessType",{aliases:["TSType"],visitor:["objectType","indexType"],fields:{objectType:(0, _utils.validateType)("TSType"),indexType:(0, _utils.validateType)("TSType")}}),defineType("TSMappedType",{aliases:["TSType"],visitor:["typeParameter","typeAnnotation","nameType"],fields:{readonly:(0, _utils.validateOptional)((0, _utils.assertOneOf)(!0,!1,"+","-")),typeParameter:(0, _utils.validateType)("TSTypeParameter"),optional:(0, _utils.validateOptional)((0, _utils.assertOneOf)(!0,!1,"+","-")),typeAnnotation:(0, _utils.validateOptionalType)("TSType"),nameType:(0, _utils.validateOptionalType)("TSType")}}),defineType("TSLiteralType",{aliases:["TSType","TSBaseType"],visitor:["literal"],fields:{literal:{validate:function(){const unaryExpression=(0, _utils.assertNodeType)("NumericLiteral","BigIntLiteral"),unaryOperator=(0, _utils.assertOneOf)("-"),literal=(0, _utils.assertNodeType)("NumericLiteral","StringLiteral","BooleanLiteral","BigIntLiteral","TemplateLiteral");function validator(parent,key,node){(0, _is.default)("UnaryExpression",node)?(unaryOperator(node,"operator",node.operator),unaryExpression(node,"argument",node.argument)):literal(parent,key,node);}return validator.oneOfNodeTypes=["NumericLiteral","StringLiteral","BooleanLiteral","BigIntLiteral","TemplateLiteral","UnaryExpression"],validator}()}}}),defineType("TSExpressionWithTypeArguments",{aliases:["TSType"],visitor:["expression","typeParameters"],fields:{expression:(0, _utils.validateType)("TSEntityName"),typeParameters:(0, _utils.validateOptionalType)("TSTypeParameterInstantiation")}}),defineType("TSInterfaceDeclaration",{aliases:["Statement","Declaration"],visitor:["id","typeParameters","extends","body"],fields:{declare:(0, _utils.validateOptional)(bool),id:(0, _utils.validateType)("Identifier"),typeParameters:(0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),extends:(0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")),body:(0, _utils.validateType)("TSInterfaceBody")}}),defineType("TSInterfaceBody",{visitor:["body"],fields:{body:(0, _utils.validateArrayOfType)("TSTypeElement")}}),defineType("TSTypeAliasDeclaration",{aliases:["Statement","Declaration"],visitor:["id","typeParameters","typeAnnotation"],fields:{declare:(0, _utils.validateOptional)(bool),id:(0, _utils.validateType)("Identifier"),typeParameters:(0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),typeAnnotation:(0, _utils.validateType)("TSType")}}),defineType("TSInstantiationExpression",{aliases:["Expression"],visitor:["expression","typeParameters"],fields:{expression:(0, _utils.validateType)("Expression"),typeParameters:(0, _utils.validateOptionalType)("TSTypeParameterInstantiation")}});const TSTypeExpression={aliases:["Expression","LVal","PatternLike"],visitor:["expression","typeAnnotation"],fields:{expression:(0, _utils.validateType)("Expression"),typeAnnotation:(0, _utils.validateType)("TSType")}};defineType("TSAsExpression",TSTypeExpression),defineType("TSSatisfiesExpression",TSTypeExpression),defineType("TSTypeAssertion",{aliases:["Expression","LVal","PatternLike"],visitor:["typeAnnotation","expression"],fields:{typeAnnotation:(0, _utils.validateType)("TSType"),expression:(0, _utils.validateType)("Expression")}}),defineType("TSEnumDeclaration",{aliases:["Statement","Declaration"],visitor:["id","members"],fields:{declare:(0, _utils.validateOptional)(bool),const:(0, _utils.validateOptional)(bool),id:(0, _utils.validateType)("Identifier"),members:(0, _utils.validateArrayOfType)("TSEnumMember"),initializer:(0, _utils.validateOptionalType)("Expression")}}),defineType("TSEnumMember",{visitor:["id","initializer"],fields:{id:(0, _utils.validateType)(["Identifier","StringLiteral"]),initializer:(0, _utils.validateOptionalType)("Expression")}}),defineType("TSModuleDeclaration",{aliases:["Statement","Declaration"],visitor:["id","body"],fields:{declare:(0, _utils.validateOptional)(bool),global:(0, _utils.validateOptional)(bool),id:(0, _utils.validateType)(["Identifier","StringLiteral"]),body:(0, _utils.validateType)(["TSModuleBlock","TSModuleDeclaration"])}}),defineType("TSModuleBlock",{aliases:["Scopable","Block","BlockParent","FunctionParent"],visitor:["body"],fields:{body:(0, _utils.validateArrayOfType)("Statement")}}),defineType("TSImportType",{aliases:["TSType"],visitor:["argument","qualifier","typeParameters"],fields:{argument:(0, _utils.validateType)("StringLiteral"),qualifier:(0, _utils.validateOptionalType)("TSEntityName"),typeParameters:(0, _utils.validateOptionalType)("TSTypeParameterInstantiation")}}),defineType("TSImportEqualsDeclaration",{aliases:["Statement"],visitor:["id","moduleReference"],fields:{isExport:(0, _utils.validate)(bool),id:(0, _utils.validateType)("Identifier"),moduleReference:(0, _utils.validateType)(["TSEntityName","TSExternalModuleReference"]),importKind:{validate:(0, _utils.assertOneOf)("type","value"),optional:!0}}}),defineType("TSExternalModuleReference",{visitor:["expression"],fields:{expression:(0, _utils.validateType)("StringLiteral")}}),defineType("TSNonNullExpression",{aliases:["Expression","LVal","PatternLike"],visitor:["expression"],fields:{expression:(0, _utils.validateType)("Expression")}}),defineType("TSExportAssignment",{aliases:["Statement"],visitor:["expression"],fields:{expression:(0, _utils.validateType)("Expression")}}),defineType("TSNamespaceExportDeclaration",{aliases:["Statement"],visitor:["id"],fields:{id:(0, _utils.validateType)("Identifier")}}),defineType("TSTypeAnnotation",{visitor:["typeAnnotation"],fields:{typeAnnotation:{validate:(0, _utils.assertNodeType)("TSType")}}}),defineType("TSTypeParameterInstantiation",{visitor:["params"],fields:{params:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("TSType")))}}}),defineType("TSTypeParameterDeclaration",{visitor:["params"],fields:{params:{validate:(0, _utils.chain)((0, _utils.assertValueType)("array"),(0, _utils.assertEach)((0, _utils.assertNodeType)("TSTypeParameter")))}}}),defineType("TSTypeParameter",{builder:["constraint","default","name"],visitor:["constraint","default"],fields:{name:{validate:(0, _utils.assertValueType)("string")},in:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},out:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},const:{validate:(0, _utils.assertValueType)("boolean"),optional:!0},constraint:{validate:(0, _utils.assertNodeType)("TSType"),optional:!0},default:{validate:(0, _utils.assertNodeType)("TSType"),optional:!0}}});},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/utils.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.VISITOR_KEYS=exports.NODE_PARENT_VALIDATIONS=exports.NODE_FIELDS=exports.FLIPPED_ALIAS_KEYS=exports.DEPRECATED_KEYS=exports.BUILDER_KEYS=exports.ALIAS_KEYS=void 0,exports.arrayOf=arrayOf,exports.arrayOfType=arrayOfType,exports.assertEach=assertEach,exports.assertNodeOrValueType=function(...types){function validate(node,key,val){for(const type of types)if(getType(val)===type||(0, _is.default)(type,val))return void(0, _validate.validateChild)(node,key,val);throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(null==val?void 0:val.type)}`)}return validate.oneOfNodeOrValueTypes=types,validate},exports.assertNodeType=assertNodeType,exports.assertOneOf=function(...values){function validate(node,key,val){if(values.indexOf(val)<0)throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`)}return validate.oneOf=values,validate},exports.assertOptionalChainStart=function(){return function(node){var _current;let current=node;for(;node;){const{type}=current;if("OptionalCallExpression"!==type){if("OptionalMemberExpression"!==type)break;if(current.optional)return;current=current.object;}else {if(current.optional)return;current=current.callee;}}throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${null==(_current=current)?void 0:_current.type}`)}},exports.assertShape=function(shape){function validate(node,key,val){const errors=[];for(const property of Object.keys(shape))try{(0,_validate.validateField)(node,property,val[property],shape[property]);}catch(error){if(error instanceof TypeError){errors.push(error.message);continue}throw error}if(errors.length)throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\n${errors.join("\n")}`)}return validate.shapeOf=shape,validate},exports.assertValueType=assertValueType,exports.chain=chain,exports.default=defineType,exports.defineAliasedType=function(...aliases){return (type,opts={})=>{let defined=opts.aliases;var _store$opts$inherits$;defined||(opts.inherits&&(defined=null==(_store$opts$inherits$=store[opts.inherits].aliases)?void 0:_store$opts$inherits$.slice()),null!=defined||(defined=[]),opts.aliases=defined);const additional=aliases.filter((a=>!defined.includes(a)));defined.unshift(...additional),defineType(type,opts);}},exports.typeIs=typeIs,exports.validate=validate,exports.validateArrayOfType=function(typeName){return validate(arrayOfType(typeName))},exports.validateOptional=function(validate){return {validate,optional:!0}},exports.validateOptionalType=function(typeName){return {validate:typeIs(typeName),optional:!0}},exports.validateType=function(typeName){return validate(typeIs(typeName))};var _is=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/is.js"),_validate=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/validate.js");const VISITOR_KEYS={};exports.VISITOR_KEYS=VISITOR_KEYS;const ALIAS_KEYS={};exports.ALIAS_KEYS=ALIAS_KEYS;const FLIPPED_ALIAS_KEYS={};exports.FLIPPED_ALIAS_KEYS=FLIPPED_ALIAS_KEYS;const NODE_FIELDS={};exports.NODE_FIELDS=NODE_FIELDS;const BUILDER_KEYS={};exports.BUILDER_KEYS=BUILDER_KEYS;const DEPRECATED_KEYS={};exports.DEPRECATED_KEYS=DEPRECATED_KEYS;const NODE_PARENT_VALIDATIONS={};function getType(val){return Array.isArray(val)?"array":null===val?"null":typeof val}function validate(validate){return {validate}}function typeIs(typeName){return "string"==typeof typeName?assertNodeType(typeName):assertNodeType(...typeName)}function arrayOf(elementType){return chain(assertValueType("array"),assertEach(elementType))}function arrayOfType(typeName){return arrayOf(typeIs(typeName))}function assertEach(callback){function validator(node,key,val){if(Array.isArray(val))for(let i=0;i<val.length;i++){const subkey=`${key}[${i}]`,v=val[i];callback(node,subkey,v),({}).BABEL_TYPES_8_BREAKING&&(0, _validate.validateChild)(node,subkey,v);}}return validator.each=callback,validator}function assertNodeType(...types){function validate(node,key,val){for(const type of types)if((0, _is.default)(type,val))return void(0, _validate.validateChild)(node,key,val);throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(null==val?void 0:val.type)}`)}return validate.oneOfNodeTypes=types,validate}function assertValueType(type){function validate(node,key,val){if(!(getType(val)===type))throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`)}return validate.type=type,validate}function chain(...fns){function validate(...args){for(const fn of fns)fn(...args);}if(validate.chainOf=fns,fns.length>=2&&"type"in fns[0]&&"array"===fns[0].type&&!("each"in fns[1]))throw new Error('An assertValueType("array") validator can only be followed by an assertEach(...) validator.');return validate}exports.NODE_PARENT_VALIDATIONS=NODE_PARENT_VALIDATIONS;const validTypeOpts=["aliases","builder","deprecatedAlias","fields","inherits","visitor","validate"],validFieldKeys=["default","optional","validate"],store={};function defineType(type,opts={}){const inherits=opts.inherits&&store[opts.inherits]||{};let fields=opts.fields;if(!fields&&(fields={},inherits.fields)){const keys=Object.getOwnPropertyNames(inherits.fields);for(const key of keys){const field=inherits.fields[key],def=field.default;if(Array.isArray(def)?def.length>0:def&&"object"==typeof def)throw new Error("field defaults can only be primitives or empty arrays currently");fields[key]={default:Array.isArray(def)?[]:def,optional:field.optional,validate:field.validate};}}const visitor=opts.visitor||inherits.visitor||[],aliases=opts.aliases||inherits.aliases||[],builder=opts.builder||inherits.builder||opts.visitor||[];for(const k of Object.keys(opts))if(-1===validTypeOpts.indexOf(k))throw new Error(`Unknown type option "${k}" on ${type}`);opts.deprecatedAlias&&(DEPRECATED_KEYS[opts.deprecatedAlias]=type);for(const key of visitor.concat(builder))fields[key]=fields[key]||{};for(const key of Object.keys(fields)){const field=fields[key];void 0!==field.default&&-1===builder.indexOf(key)&&(field.optional=!0),void 0===field.default?field.default=null:field.validate||null==field.default||(field.validate=assertValueType(getType(field.default)));for(const k of Object.keys(field))if(-1===validFieldKeys.indexOf(k))throw new Error(`Unknown field key "${k}" on ${type}.${key}`)}VISITOR_KEYS[type]=opts.visitor=visitor,BUILDER_KEYS[type]=opts.builder=builder,NODE_FIELDS[type]=opts.fields=fields,ALIAS_KEYS[type]=opts.aliases=aliases,aliases.forEach((alias=>{FLIPPED_ALIAS_KEYS[alias]=FLIPPED_ALIAS_KEYS[alias]||[],FLIPPED_ALIAS_KEYS[alias].push(type);})),opts.validate&&(NODE_PARENT_VALIDATIONS[type]=opts.validate),store[type]=opts;}},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0});var _exportNames={react:!0,assertNode:!0,createTypeAnnotationBasedOnTypeof:!0,createUnionTypeAnnotation:!0,createFlowUnionType:!0,createTSUnionType:!0,cloneNode:!0,clone:!0,cloneDeep:!0,cloneDeepWithoutLoc:!0,cloneWithoutLoc:!0,addComment:!0,addComments:!0,inheritInnerComments:!0,inheritLeadingComments:!0,inheritsComments:!0,inheritTrailingComments:!0,removeComments:!0,ensureBlock:!0,toBindingIdentifierName:!0,toBlock:!0,toComputedKey:!0,toExpression:!0,toIdentifier:!0,toKeyAlias:!0,toSequenceExpression:!0,toStatement:!0,valueToNode:!0,appendToMemberExpression:!0,inherits:!0,prependToMemberExpression:!0,removeProperties:!0,removePropertiesDeep:!0,removeTypeDuplicates:!0,getBindingIdentifiers:!0,getOuterBindingIdentifiers:!0,traverse:!0,traverseFast:!0,shallowEqual:!0,is:!0,isBinding:!0,isBlockScoped:!0,isImmutable:!0,isLet:!0,isNode:!0,isNodesEquivalent:!0,isPlaceholderType:!0,isReferenced:!0,isScope:!0,isSpecifierDefault:!0,isType:!0,isValidES3Identifier:!0,isValidIdentifier:!0,isVar:!0,matchesPattern:!0,validate:!0,buildMatchMemberExpression:!0,__internal__deprecationWarning:!0};Object.defineProperty(exports,"__internal__deprecationWarning",{enumerable:!0,get:function(){return _deprecationWarning.default}}),Object.defineProperty(exports,"addComment",{enumerable:!0,get:function(){return _addComment.default}}),Object.defineProperty(exports,"addComments",{enumerable:!0,get:function(){return _addComments.default}}),Object.defineProperty(exports,"appendToMemberExpression",{enumerable:!0,get:function(){return _appendToMemberExpression.default}}),Object.defineProperty(exports,"assertNode",{enumerable:!0,get:function(){return _assertNode.default}}),Object.defineProperty(exports,"buildMatchMemberExpression",{enumerable:!0,get:function(){return _buildMatchMemberExpression.default}}),Object.defineProperty(exports,"clone",{enumerable:!0,get:function(){return _clone.default}}),Object.defineProperty(exports,"cloneDeep",{enumerable:!0,get:function(){return _cloneDeep.default}}),Object.defineProperty(exports,"cloneDeepWithoutLoc",{enumerable:!0,get:function(){return _cloneDeepWithoutLoc.default}}),Object.defineProperty(exports,"cloneNode",{enumerable:!0,get:function(){return _cloneNode.default}}),Object.defineProperty(exports,"cloneWithoutLoc",{enumerable:!0,get:function(){return _cloneWithoutLoc.default}}),Object.defineProperty(exports,"createFlowUnionType",{enumerable:!0,get:function(){return _createFlowUnionType.default}}),Object.defineProperty(exports,"createTSUnionType",{enumerable:!0,get:function(){return _createTSUnionType.default}}),Object.defineProperty(exports,"createTypeAnnotationBasedOnTypeof",{enumerable:!0,get:function(){return _createTypeAnnotationBasedOnTypeof.default}}),Object.defineProperty(exports,"createUnionTypeAnnotation",{enumerable:!0,get:function(){return _createFlowUnionType.default}}),Object.defineProperty(exports,"ensureBlock",{enumerable:!0,get:function(){return _ensureBlock.default}}),Object.defineProperty(exports,"getBindingIdentifiers",{enumerable:!0,get:function(){return _getBindingIdentifiers.default}}),Object.defineProperty(exports,"getOuterBindingIdentifiers",{enumerable:!0,get:function(){return _getOuterBindingIdentifiers.default}}),Object.defineProperty(exports,"inheritInnerComments",{enumerable:!0,get:function(){return _inheritInnerComments.default}}),Object.defineProperty(exports,"inheritLeadingComments",{enumerable:!0,get:function(){return _inheritLeadingComments.default}}),Object.defineProperty(exports,"inheritTrailingComments",{enumerable:!0,get:function(){return _inheritTrailingComments.default}}),Object.defineProperty(exports,"inherits",{enumerable:!0,get:function(){return _inherits.default}}),Object.defineProperty(exports,"inheritsComments",{enumerable:!0,get:function(){return _inheritsComments.default}}),Object.defineProperty(exports,"is",{enumerable:!0,get:function(){return _is.default}}),Object.defineProperty(exports,"isBinding",{enumerable:!0,get:function(){return _isBinding.default}}),Object.defineProperty(exports,"isBlockScoped",{enumerable:!0,get:function(){return _isBlockScoped.default}}),Object.defineProperty(exports,"isImmutable",{enumerable:!0,get:function(){return _isImmutable.default}}),Object.defineProperty(exports,"isLet",{enumerable:!0,get:function(){return _isLet.default}}),Object.defineProperty(exports,"isNode",{enumerable:!0,get:function(){return _isNode.default}}),Object.defineProperty(exports,"isNodesEquivalent",{enumerable:!0,get:function(){return _isNodesEquivalent.default}}),Object.defineProperty(exports,"isPlaceholderType",{enumerable:!0,get:function(){return _isPlaceholderType.default}}),Object.defineProperty(exports,"isReferenced",{enumerable:!0,get:function(){return _isReferenced.default}}),Object.defineProperty(exports,"isScope",{enumerable:!0,get:function(){return _isScope.default}}),Object.defineProperty(exports,"isSpecifierDefault",{enumerable:!0,get:function(){return _isSpecifierDefault.default}}),Object.defineProperty(exports,"isType",{enumerable:!0,get:function(){return _isType.default}}),Object.defineProperty(exports,"isValidES3Identifier",{enumerable:!0,get:function(){return _isValidES3Identifier.default}}),Object.defineProperty(exports,"isValidIdentifier",{enumerable:!0,get:function(){return _isValidIdentifier.default}}),Object.defineProperty(exports,"isVar",{enumerable:!0,get:function(){return _isVar.default}}),Object.defineProperty(exports,"matchesPattern",{enumerable:!0,get:function(){return _matchesPattern.default}}),Object.defineProperty(exports,"prependToMemberExpression",{enumerable:!0,get:function(){return _prependToMemberExpression.default}}),exports.react=void 0,Object.defineProperty(exports,"removeComments",{enumerable:!0,get:function(){return _removeComments.default}}),Object.defineProperty(exports,"removeProperties",{enumerable:!0,get:function(){return _removeProperties.default}}),Object.defineProperty(exports,"removePropertiesDeep",{enumerable:!0,get:function(){return _removePropertiesDeep.default}}),Object.defineProperty(exports,"removeTypeDuplicates",{enumerable:!0,get:function(){return _removeTypeDuplicates.default}}),Object.defineProperty(exports,"shallowEqual",{enumerable:!0,get:function(){return _shallowEqual.default}}),Object.defineProperty(exports,"toBindingIdentifierName",{enumerable:!0,get:function(){return _toBindingIdentifierName.default}}),Object.defineProperty(exports,"toBlock",{enumerable:!0,get:function(){return _toBlock.default}}),Object.defineProperty(exports,"toComputedKey",{enumerable:!0,get:function(){return _toComputedKey.default}}),Object.defineProperty(exports,"toExpression",{enumerable:!0,get:function(){return _toExpression.default}}),Object.defineProperty(exports,"toIdentifier",{enumerable:!0,get:function(){return _toIdentifier.default}}),Object.defineProperty(exports,"toKeyAlias",{enumerable:!0,get:function(){return _toKeyAlias.default}}),Object.defineProperty(exports,"toSequenceExpression",{enumerable:!0,get:function(){return _toSequenceExpression.default}}),Object.defineProperty(exports,"toStatement",{enumerable:!0,get:function(){return _toStatement.default}}),Object.defineProperty(exports,"traverse",{enumerable:!0,get:function(){return _traverse.default}}),Object.defineProperty(exports,"traverseFast",{enumerable:!0,get:function(){return _traverseFast.default}}),Object.defineProperty(exports,"validate",{enumerable:!0,get:function(){return _validate.default}}),Object.defineProperty(exports,"valueToNode",{enumerable:!0,get:function(){return _valueToNode.default}});var _isReactComponent=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/react/isReactComponent.js"),_isCompatTag=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/react/isCompatTag.js"),_buildChildren=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/react/buildChildren.js"),_assertNode=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/asserts/assertNode.js"),_generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/asserts/generated/index.js");Object.keys(_generated).forEach((function(key){"default"!==key&&"__esModule"!==key&&(Object.prototype.hasOwnProperty.call(_exportNames,key)||key in exports&&exports[key]===_generated[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _generated[key]}}));}));var _createTypeAnnotationBasedOnTypeof=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js"),_createFlowUnionType=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js"),_createTSUnionType=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js"),_generated2=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js");Object.keys(_generated2).forEach((function(key){"default"!==key&&"__esModule"!==key&&(Object.prototype.hasOwnProperty.call(_exportNames,key)||key in exports&&exports[key]===_generated2[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _generated2[key]}}));}));var _uppercase=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/uppercase.js");Object.keys(_uppercase).forEach((function(key){"default"!==key&&"__esModule"!==key&&(Object.prototype.hasOwnProperty.call(_exportNames,key)||key in exports&&exports[key]===_uppercase[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _uppercase[key]}}));}));var _cloneNode=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneNode.js"),_clone=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/clone.js"),_cloneDeep=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneDeep.js"),_cloneDeepWithoutLoc=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js"),_cloneWithoutLoc=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js"),_addComment=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/addComment.js"),_addComments=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/addComments.js"),_inheritInnerComments=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritInnerComments.js"),_inheritLeadingComments=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"),_inheritsComments=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritsComments.js"),_inheritTrailingComments=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"),_removeComments=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/removeComments.js"),_generated3=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/generated/index.js");Object.keys(_generated3).forEach((function(key){"default"!==key&&"__esModule"!==key&&(Object.prototype.hasOwnProperty.call(_exportNames,key)||key in exports&&exports[key]===_generated3[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _generated3[key]}}));}));var _constants=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js");Object.keys(_constants).forEach((function(key){"default"!==key&&"__esModule"!==key&&(Object.prototype.hasOwnProperty.call(_exportNames,key)||key in exports&&exports[key]===_constants[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _constants[key]}}));}));var _ensureBlock=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/ensureBlock.js"),_toBindingIdentifierName=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js"),_toBlock=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toBlock.js"),_toComputedKey=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toComputedKey.js"),_toExpression=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toExpression.js"),_toIdentifier=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toIdentifier.js"),_toKeyAlias=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toKeyAlias.js"),_toSequenceExpression=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toSequenceExpression.js"),_toStatement=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/toStatement.js"),_valueToNode=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/converters/valueToNode.js"),_definitions=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");Object.keys(_definitions).forEach((function(key){"default"!==key&&"__esModule"!==key&&(Object.prototype.hasOwnProperty.call(_exportNames,key)||key in exports&&exports[key]===_definitions[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _definitions[key]}}));}));var _appendToMemberExpression=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js"),_inherits=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/inherits.js"),_prependToMemberExpression=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js"),_removeProperties=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/removeProperties.js"),_removePropertiesDeep=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js"),_removeTypeDuplicates=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js"),_getBindingIdentifiers=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"),_getOuterBindingIdentifiers=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js"),_traverse=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/traverse/traverse.js");Object.keys(_traverse).forEach((function(key){"default"!==key&&"__esModule"!==key&&(Object.prototype.hasOwnProperty.call(_exportNames,key)||key in exports&&exports[key]===_traverse[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _traverse[key]}}));}));var _traverseFast=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/traverse/traverseFast.js"),_shallowEqual=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/shallowEqual.js"),_is=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/is.js"),_isBinding=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isBinding.js"),_isBlockScoped=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isBlockScoped.js"),_isImmutable=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isImmutable.js"),_isLet=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isLet.js"),_isNode=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isNode.js"),_isNodesEquivalent=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isNodesEquivalent.js"),_isPlaceholderType=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js"),_isReferenced=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isReferenced.js"),_isScope=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isScope.js"),_isSpecifierDefault=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isSpecifierDefault.js"),_isType=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isType.js"),_isValidES3Identifier=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidES3Identifier.js"),_isValidIdentifier=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js"),_isVar=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isVar.js"),_matchesPattern=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/matchesPattern.js"),_validate=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/validate.js"),_buildMatchMemberExpression=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js"),_generated4=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");Object.keys(_generated4).forEach((function(key){"default"!==key&&"__esModule"!==key&&(Object.prototype.hasOwnProperty.call(_exportNames,key)||key in exports&&exports[key]===_generated4[key]||Object.defineProperty(exports,key,{enumerable:!0,get:function(){return _generated4[key]}}));}));var _deprecationWarning=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");const react={isReactComponent:_isReactComponent.default,isCompatTag:_isCompatTag.default,buildChildren:_buildChildren.default};exports.react=react;},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(member,append,computed=!1){return member.object=(0, _generated.memberExpression)(member.object,member.property,member.computed),member.property=append,member.computed=!!computed,member};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function removeTypeDuplicates(nodes){const generics=new Map,bases=new Map,typeGroups=new Set,types=[];for(let i=0;i<nodes.length;i++){const node=nodes[i];if(node&&!(types.indexOf(node)>=0)){if((0, _generated.isAnyTypeAnnotation)(node))return [node];if((0, _generated.isFlowBaseAnnotation)(node))bases.set(node.type,node);else if((0, _generated.isUnionTypeAnnotation)(node))typeGroups.has(node.types)||(nodes=nodes.concat(node.types),typeGroups.add(node.types));else if((0, _generated.isGenericTypeAnnotation)(node)){const name=getQualifiedName(node.id);if(generics.has(name)){let existing=generics.get(name);existing.typeParameters?node.typeParameters&&(existing.typeParameters.params=removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params))):existing=node.typeParameters;}else generics.set(name,node);}else types.push(node);}}for(const[,baseType]of bases)types.push(baseType);for(const[,genericName]of generics)types.push(genericName);return types};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");function getQualifiedName(node){return (0, _generated.isIdentifier)(node)?node.name:`${node.id.name}.${getQualifiedName(node.qualification)}`}},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/inherits.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(child,parent){if(!child||!parent)return child;for(const key of _constants.INHERIT_KEYS.optional)null==child[key]&&(child[key]=parent[key]);for(const key of Object.keys(parent))"_"===key[0]&&"__clone"!==key&&(child[key]=parent[key]);for(const key of _constants.INHERIT_KEYS.force)child[key]=parent[key];return (0, _inheritsComments.default)(child,parent),child};var _constants=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js"),_inheritsComments=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/comments/inheritsComments.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(member,prepend){if((0, _.isSuper)(member.object))throw new Error("Cannot prepend node to super property access (`super.foo`).");return member.object=(0, _generated.memberExpression)(prepend,member.object),member};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"),_=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/removeProperties.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node,opts={}){const map=opts.preserveComments?CLEAR_KEYS:CLEAR_KEYS_PLUS_COMMENTS;for(const key of map)null!=node[key]&&(node[key]=void 0);for(const key of Object.keys(node))"_"===key[0]&&null!=node[key]&&(node[key]=void 0);const symbols=Object.getOwnPropertySymbols(node);for(const sym of symbols)node[sym]=null;};var _constants=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js");const CLEAR_KEYS=["tokens","start","end","loc","raw","rawValue"],CLEAR_KEYS_PLUS_COMMENTS=[..._constants.COMMENT_KEYS,"comments",...CLEAR_KEYS];},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(tree,opts){return (0, _traverseFast.default)(tree,_removeProperties.default,opts),tree};var _traverseFast=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/traverse/traverseFast.js"),_removeProperties=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/removeProperties.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function removeTypeDuplicates(nodes){const generics=new Map,bases=new Map,typeGroups=new Set,types=[];for(let i=0;i<nodes.length;i++){const node=nodes[i];if(node&&!(types.indexOf(node)>=0)){if((0, _generated.isTSAnyKeyword)(node))return [node];if((0, _generated.isTSBaseType)(node))bases.set(node.type,node);else if((0, _generated.isTSUnionType)(node))typeGroups.has(node.types)||(nodes.push(...node.types),typeGroups.add(node.types));else if((0, _generated.isTSTypeReference)(node)&&node.typeParameters){const name=getQualifiedName(node.typeName);if(generics.has(name)){let existing=generics.get(name);existing.typeParameters?node.typeParameters&&(existing.typeParameters.params=removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params))):existing=node.typeParameters;}else generics.set(name,node);}else types.push(node);}}for(const[,baseType]of bases)types.push(baseType);for(const[,genericName]of generics)types.push(genericName);return types};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");function getQualifiedName(node){return (0, _generated.isIdentifier)(node)?node.name:`${node.right.name}.${getQualifiedName(node.left)}`}},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=getBindingIdentifiers;var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");function getBindingIdentifiers(node,duplicates,outerOnly){const search=[].concat(node),ids=Object.create(null);for(;search.length;){const id=search.shift();if(!id)continue;const keys=getBindingIdentifiers.keys[id.type];if((0, _generated.isIdentifier)(id))if(duplicates){(ids[id.name]=ids[id.name]||[]).push(id);}else ids[id.name]=id;else if(!(0, _generated.isExportDeclaration)(id)||(0, _generated.isExportAllDeclaration)(id)){if(outerOnly){if((0, _generated.isFunctionDeclaration)(id)){search.push(id.id);continue}if((0, _generated.isFunctionExpression)(id))continue}if(keys)for(let i=0;i<keys.length;i++){const nodes=id[keys[i]];nodes&&(Array.isArray(nodes)?search.push(...nodes):search.push(nodes));}}else (0, _generated.isDeclaration)(id.declaration)&&search.push(id.declaration);}return ids}getBindingIdentifiers.keys={DeclareClass:["id"],DeclareFunction:["id"],DeclareModule:["id"],DeclareVariable:["id"],DeclareInterface:["id"],DeclareTypeAlias:["id"],DeclareOpaqueType:["id"],InterfaceDeclaration:["id"],TypeAlias:["id"],OpaqueType:["id"],CatchClause:["param"],LabeledStatement:["label"],UnaryExpression:["argument"],AssignmentExpression:["left"],ImportSpecifier:["local"],ImportNamespaceSpecifier:["local"],ImportDefaultSpecifier:["local"],ImportDeclaration:["specifiers"],ExportSpecifier:["exported"],ExportNamespaceSpecifier:["exported"],ExportDefaultSpecifier:["exported"],FunctionDeclaration:["id","params"],FunctionExpression:["id","params"],ArrowFunctionExpression:["params"],ObjectMethod:["params"],ClassMethod:["params"],ClassPrivateMethod:["params"],ForInStatement:["left"],ForOfStatement:["left"],ClassDeclaration:["id"],ClassExpression:["id"],RestElement:["argument"],UpdateExpression:["argument"],ObjectProperty:["value"],AssignmentPattern:["left"],ArrayPattern:["elements"],ObjectPattern:["properties"],VariableDeclaration:["declarations"],VariableDeclarator:["id"]};},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _getBindingIdentifiers=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"),_default=function(node,duplicates){return (0, _getBindingIdentifiers.default)(node,duplicates,!0)};exports.default=_default;},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/traverse/traverse.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node,handlers,state){"function"==typeof handlers&&(handlers={enter:handlers});const{enter,exit}=handlers;traverseSimpleImpl(node,enter,exit,state,[]);};var _definitions=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");function traverseSimpleImpl(node,enter,exit,state,ancestors){const keys=_definitions.VISITOR_KEYS[node.type];if(keys){enter&&enter(node,ancestors,state);for(const key of keys){const subNode=node[key];if(Array.isArray(subNode))for(let i=0;i<subNode.length;i++){const child=subNode[i];child&&(ancestors.push({node,key,index:i}),traverseSimpleImpl(child,enter,exit,state,ancestors),ancestors.pop());}else subNode&&(ancestors.push({node,key}),traverseSimpleImpl(subNode,enter,exit,state,ancestors),ancestors.pop());}exit&&exit(node,ancestors,state);}}},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/traverse/traverseFast.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function traverseFast(node,enter,opts){if(!node)return;const keys=_definitions.VISITOR_KEYS[node.type];if(!keys)return;enter(node,opts=opts||{});for(const key of keys){const subNode=node[key];if(Array.isArray(subNode))for(const node of subNode)traverseFast(node,enter,opts);else traverseFast(subNode,enter,opts);}};var _definitions=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/deprecationWarning.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(oldName,newName,prefix=""){if(warnings.has(oldName))return;warnings.add(oldName);const{internal,trace}=function(skip,length){const{stackTraceLimit,prepareStackTrace}=Error;let stackTrace;if(Error.stackTraceLimit=1+skip+length,Error.prepareStackTrace=function(err,stack){stackTrace=stack;},(new Error).stack,Error.stackTraceLimit=stackTraceLimit,Error.prepareStackTrace=prepareStackTrace,!stackTrace)return {internal:!1,trace:""};const shortStackTrace=stackTrace.slice(1+skip,1+skip+length);return {internal:/[\\/]@babel[\\/]/.test(shortStackTrace[1].getFileName()),trace:shortStackTrace.map((frame=>`    at ${frame}`)).join("\n")}}(1,2);if(internal)return;console.warn(`${prefix}\`${oldName}\` has been deprecated, please migrate to \`${newName}\`\n${trace}`);};const warnings=new Set;},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/inherit.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(key,child,parent){child&&parent&&(child[key]=Array.from(new Set([].concat(child[key],parent[key]).filter(Boolean))));};},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(child,args){const lines=child.value.split(/\r\n|\n|\r/);let lastNonEmptyLine=0;for(let i=0;i<lines.length;i++)lines[i].match(/[^ \t]/)&&(lastNonEmptyLine=i);let str="";for(let i=0;i<lines.length;i++){const line=lines[i],isFirstLine=0===i,isLastLine=i===lines.length-1,isLastNonEmptyLine=i===lastNonEmptyLine;let trimmedLine=line.replace(/\t/g," ");isFirstLine||(trimmedLine=trimmedLine.replace(/^[ ]+/,"")),isLastLine||(trimmedLine=trimmedLine.replace(/[ ]+$/,"")),trimmedLine&&(isLastNonEmptyLine||(trimmedLine+=" "),str+=trimmedLine);}str&&args.push((0, _.inherits)((0, _generated.stringLiteral)(str),child));};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/builders/generated/index.js"),_=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/shallowEqual.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(actual,expected){const keys=Object.keys(expected);for(const key of keys)if(actual[key]!==expected[key])return !1;return !0};},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(match,allowPartial){const parts=match.split(".");return member=>(0, _matchesPattern.default)(member,parts,allowPartial)};var _matchesPattern=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/matchesPattern.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.isAccessor=function(node,opts){if(!node)return !1;if("ClassAccessorProperty"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isAnyTypeAnnotation=function(node,opts){if(!node)return !1;if("AnyTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isArgumentPlaceholder=function(node,opts){if(!node)return !1;if("ArgumentPlaceholder"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isArrayExpression=function(node,opts){if(!node)return !1;if("ArrayExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isArrayPattern=function(node,opts){if(!node)return !1;if("ArrayPattern"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isArrayTypeAnnotation=function(node,opts){if(!node)return !1;if("ArrayTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isArrowFunctionExpression=function(node,opts){if(!node)return !1;if("ArrowFunctionExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isAssignmentExpression=function(node,opts){if(!node)return !1;if("AssignmentExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isAssignmentPattern=function(node,opts){if(!node)return !1;if("AssignmentPattern"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isAwaitExpression=function(node,opts){if(!node)return !1;if("AwaitExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isBigIntLiteral=function(node,opts){if(!node)return !1;if("BigIntLiteral"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isBinary=function(node,opts){if(!node)return !1;const nodeType=node.type;if("BinaryExpression"===nodeType||"LogicalExpression"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isBinaryExpression=function(node,opts){if(!node)return !1;if("BinaryExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isBindExpression=function(node,opts){if(!node)return !1;if("BindExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isBlock=function(node,opts){if(!node)return !1;const nodeType=node.type;if("BlockStatement"===nodeType||"Program"===nodeType||"TSModuleBlock"===nodeType||"Placeholder"===nodeType&&"BlockStatement"===node.expectedNode)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isBlockParent=function(node,opts){if(!node)return !1;const nodeType=node.type;if("BlockStatement"===nodeType||"CatchClause"===nodeType||"DoWhileStatement"===nodeType||"ForInStatement"===nodeType||"ForStatement"===nodeType||"FunctionDeclaration"===nodeType||"FunctionExpression"===nodeType||"Program"===nodeType||"ObjectMethod"===nodeType||"SwitchStatement"===nodeType||"WhileStatement"===nodeType||"ArrowFunctionExpression"===nodeType||"ForOfStatement"===nodeType||"ClassMethod"===nodeType||"ClassPrivateMethod"===nodeType||"StaticBlock"===nodeType||"TSModuleBlock"===nodeType||"Placeholder"===nodeType&&"BlockStatement"===node.expectedNode)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isBlockStatement=function(node,opts){if(!node)return !1;if("BlockStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isBooleanLiteral=function(node,opts){if(!node)return !1;if("BooleanLiteral"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isBooleanLiteralTypeAnnotation=function(node,opts){if(!node)return !1;if("BooleanLiteralTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isBooleanTypeAnnotation=function(node,opts){if(!node)return !1;if("BooleanTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isBreakStatement=function(node,opts){if(!node)return !1;if("BreakStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isCallExpression=function(node,opts){if(!node)return !1;if("CallExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isCatchClause=function(node,opts){if(!node)return !1;if("CatchClause"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isClass=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ClassExpression"===nodeType||"ClassDeclaration"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isClassAccessorProperty=function(node,opts){if(!node)return !1;if("ClassAccessorProperty"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isClassBody=function(node,opts){if(!node)return !1;if("ClassBody"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isClassDeclaration=function(node,opts){if(!node)return !1;if("ClassDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isClassExpression=function(node,opts){if(!node)return !1;if("ClassExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isClassImplements=function(node,opts){if(!node)return !1;if("ClassImplements"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isClassMethod=function(node,opts){if(!node)return !1;if("ClassMethod"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isClassPrivateMethod=function(node,opts){if(!node)return !1;if("ClassPrivateMethod"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isClassPrivateProperty=function(node,opts){if(!node)return !1;if("ClassPrivateProperty"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isClassProperty=function(node,opts){if(!node)return !1;if("ClassProperty"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isCompletionStatement=function(node,opts){if(!node)return !1;const nodeType=node.type;if("BreakStatement"===nodeType||"ContinueStatement"===nodeType||"ReturnStatement"===nodeType||"ThrowStatement"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isConditional=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ConditionalExpression"===nodeType||"IfStatement"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isConditionalExpression=function(node,opts){if(!node)return !1;if("ConditionalExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isContinueStatement=function(node,opts){if(!node)return !1;if("ContinueStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDebuggerStatement=function(node,opts){if(!node)return !1;if("DebuggerStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDecimalLiteral=function(node,opts){if(!node)return !1;if("DecimalLiteral"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDeclaration=function(node,opts){if(!node)return !1;const nodeType=node.type;if("FunctionDeclaration"===nodeType||"VariableDeclaration"===nodeType||"ClassDeclaration"===nodeType||"ExportAllDeclaration"===nodeType||"ExportDefaultDeclaration"===nodeType||"ExportNamedDeclaration"===nodeType||"ImportDeclaration"===nodeType||"DeclareClass"===nodeType||"DeclareFunction"===nodeType||"DeclareInterface"===nodeType||"DeclareModule"===nodeType||"DeclareModuleExports"===nodeType||"DeclareTypeAlias"===nodeType||"DeclareOpaqueType"===nodeType||"DeclareVariable"===nodeType||"DeclareExportDeclaration"===nodeType||"DeclareExportAllDeclaration"===nodeType||"InterfaceDeclaration"===nodeType||"OpaqueType"===nodeType||"TypeAlias"===nodeType||"EnumDeclaration"===nodeType||"TSDeclareFunction"===nodeType||"TSInterfaceDeclaration"===nodeType||"TSTypeAliasDeclaration"===nodeType||"TSEnumDeclaration"===nodeType||"TSModuleDeclaration"===nodeType||"Placeholder"===nodeType&&"Declaration"===node.expectedNode)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDeclareClass=function(node,opts){if(!node)return !1;if("DeclareClass"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDeclareExportAllDeclaration=function(node,opts){if(!node)return !1;if("DeclareExportAllDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDeclareExportDeclaration=function(node,opts){if(!node)return !1;if("DeclareExportDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDeclareFunction=function(node,opts){if(!node)return !1;if("DeclareFunction"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDeclareInterface=function(node,opts){if(!node)return !1;if("DeclareInterface"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDeclareModule=function(node,opts){if(!node)return !1;if("DeclareModule"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDeclareModuleExports=function(node,opts){if(!node)return !1;if("DeclareModuleExports"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDeclareOpaqueType=function(node,opts){if(!node)return !1;if("DeclareOpaqueType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDeclareTypeAlias=function(node,opts){if(!node)return !1;if("DeclareTypeAlias"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDeclareVariable=function(node,opts){if(!node)return !1;if("DeclareVariable"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDeclaredPredicate=function(node,opts){if(!node)return !1;if("DeclaredPredicate"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDecorator=function(node,opts){if(!node)return !1;if("Decorator"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDirective=function(node,opts){if(!node)return !1;if("Directive"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDirectiveLiteral=function(node,opts){if(!node)return !1;if("DirectiveLiteral"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDoExpression=function(node,opts){if(!node)return !1;if("DoExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isDoWhileStatement=function(node,opts){if(!node)return !1;if("DoWhileStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEmptyStatement=function(node,opts){if(!node)return !1;if("EmptyStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEmptyTypeAnnotation=function(node,opts){if(!node)return !1;if("EmptyTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEnumBody=function(node,opts){if(!node)return !1;const nodeType=node.type;if("EnumBooleanBody"===nodeType||"EnumNumberBody"===nodeType||"EnumStringBody"===nodeType||"EnumSymbolBody"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEnumBooleanBody=function(node,opts){if(!node)return !1;if("EnumBooleanBody"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEnumBooleanMember=function(node,opts){if(!node)return !1;if("EnumBooleanMember"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEnumDeclaration=function(node,opts){if(!node)return !1;if("EnumDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEnumDefaultedMember=function(node,opts){if(!node)return !1;if("EnumDefaultedMember"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEnumMember=function(node,opts){if(!node)return !1;const nodeType=node.type;if("EnumBooleanMember"===nodeType||"EnumNumberMember"===nodeType||"EnumStringMember"===nodeType||"EnumDefaultedMember"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEnumNumberBody=function(node,opts){if(!node)return !1;if("EnumNumberBody"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEnumNumberMember=function(node,opts){if(!node)return !1;if("EnumNumberMember"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEnumStringBody=function(node,opts){if(!node)return !1;if("EnumStringBody"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEnumStringMember=function(node,opts){if(!node)return !1;if("EnumStringMember"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isEnumSymbolBody=function(node,opts){if(!node)return !1;if("EnumSymbolBody"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isExistsTypeAnnotation=function(node,opts){if(!node)return !1;if("ExistsTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isExportAllDeclaration=function(node,opts){if(!node)return !1;if("ExportAllDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isExportDeclaration=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ExportAllDeclaration"===nodeType||"ExportDefaultDeclaration"===nodeType||"ExportNamedDeclaration"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isExportDefaultDeclaration=function(node,opts){if(!node)return !1;if("ExportDefaultDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isExportDefaultSpecifier=function(node,opts){if(!node)return !1;if("ExportDefaultSpecifier"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isExportNamedDeclaration=function(node,opts){if(!node)return !1;if("ExportNamedDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isExportNamespaceSpecifier=function(node,opts){if(!node)return !1;if("ExportNamespaceSpecifier"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isExportSpecifier=function(node,opts){if(!node)return !1;if("ExportSpecifier"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isExpression=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ArrayExpression"===nodeType||"AssignmentExpression"===nodeType||"BinaryExpression"===nodeType||"CallExpression"===nodeType||"ConditionalExpression"===nodeType||"FunctionExpression"===nodeType||"Identifier"===nodeType||"StringLiteral"===nodeType||"NumericLiteral"===nodeType||"NullLiteral"===nodeType||"BooleanLiteral"===nodeType||"RegExpLiteral"===nodeType||"LogicalExpression"===nodeType||"MemberExpression"===nodeType||"NewExpression"===nodeType||"ObjectExpression"===nodeType||"SequenceExpression"===nodeType||"ParenthesizedExpression"===nodeType||"ThisExpression"===nodeType||"UnaryExpression"===nodeType||"UpdateExpression"===nodeType||"ArrowFunctionExpression"===nodeType||"ClassExpression"===nodeType||"MetaProperty"===nodeType||"Super"===nodeType||"TaggedTemplateExpression"===nodeType||"TemplateLiteral"===nodeType||"YieldExpression"===nodeType||"AwaitExpression"===nodeType||"Import"===nodeType||"BigIntLiteral"===nodeType||"OptionalMemberExpression"===nodeType||"OptionalCallExpression"===nodeType||"TypeCastExpression"===nodeType||"JSXElement"===nodeType||"JSXFragment"===nodeType||"BindExpression"===nodeType||"DoExpression"===nodeType||"RecordExpression"===nodeType||"TupleExpression"===nodeType||"DecimalLiteral"===nodeType||"ModuleExpression"===nodeType||"TopicReference"===nodeType||"PipelineTopicExpression"===nodeType||"PipelineBareFunction"===nodeType||"PipelinePrimaryTopicReference"===nodeType||"TSInstantiationExpression"===nodeType||"TSAsExpression"===nodeType||"TSSatisfiesExpression"===nodeType||"TSTypeAssertion"===nodeType||"TSNonNullExpression"===nodeType||"Placeholder"===nodeType&&("Expression"===node.expectedNode||"Identifier"===node.expectedNode||"StringLiteral"===node.expectedNode))return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isExpressionStatement=function(node,opts){if(!node)return !1;if("ExpressionStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isExpressionWrapper=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ExpressionStatement"===nodeType||"ParenthesizedExpression"===nodeType||"TypeCastExpression"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFile=function(node,opts){if(!node)return !1;if("File"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFlow=function(node,opts){if(!node)return !1;const nodeType=node.type;if("AnyTypeAnnotation"===nodeType||"ArrayTypeAnnotation"===nodeType||"BooleanTypeAnnotation"===nodeType||"BooleanLiteralTypeAnnotation"===nodeType||"NullLiteralTypeAnnotation"===nodeType||"ClassImplements"===nodeType||"DeclareClass"===nodeType||"DeclareFunction"===nodeType||"DeclareInterface"===nodeType||"DeclareModule"===nodeType||"DeclareModuleExports"===nodeType||"DeclareTypeAlias"===nodeType||"DeclareOpaqueType"===nodeType||"DeclareVariable"===nodeType||"DeclareExportDeclaration"===nodeType||"DeclareExportAllDeclaration"===nodeType||"DeclaredPredicate"===nodeType||"ExistsTypeAnnotation"===nodeType||"FunctionTypeAnnotation"===nodeType||"FunctionTypeParam"===nodeType||"GenericTypeAnnotation"===nodeType||"InferredPredicate"===nodeType||"InterfaceExtends"===nodeType||"InterfaceDeclaration"===nodeType||"InterfaceTypeAnnotation"===nodeType||"IntersectionTypeAnnotation"===nodeType||"MixedTypeAnnotation"===nodeType||"EmptyTypeAnnotation"===nodeType||"NullableTypeAnnotation"===nodeType||"NumberLiteralTypeAnnotation"===nodeType||"NumberTypeAnnotation"===nodeType||"ObjectTypeAnnotation"===nodeType||"ObjectTypeInternalSlot"===nodeType||"ObjectTypeCallProperty"===nodeType||"ObjectTypeIndexer"===nodeType||"ObjectTypeProperty"===nodeType||"ObjectTypeSpreadProperty"===nodeType||"OpaqueType"===nodeType||"QualifiedTypeIdentifier"===nodeType||"StringLiteralTypeAnnotation"===nodeType||"StringTypeAnnotation"===nodeType||"SymbolTypeAnnotation"===nodeType||"ThisTypeAnnotation"===nodeType||"TupleTypeAnnotation"===nodeType||"TypeofTypeAnnotation"===nodeType||"TypeAlias"===nodeType||"TypeAnnotation"===nodeType||"TypeCastExpression"===nodeType||"TypeParameter"===nodeType||"TypeParameterDeclaration"===nodeType||"TypeParameterInstantiation"===nodeType||"UnionTypeAnnotation"===nodeType||"Variance"===nodeType||"VoidTypeAnnotation"===nodeType||"EnumDeclaration"===nodeType||"EnumBooleanBody"===nodeType||"EnumNumberBody"===nodeType||"EnumStringBody"===nodeType||"EnumSymbolBody"===nodeType||"EnumBooleanMember"===nodeType||"EnumNumberMember"===nodeType||"EnumStringMember"===nodeType||"EnumDefaultedMember"===nodeType||"IndexedAccessType"===nodeType||"OptionalIndexedAccessType"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFlowBaseAnnotation=function(node,opts){if(!node)return !1;const nodeType=node.type;if("AnyTypeAnnotation"===nodeType||"BooleanTypeAnnotation"===nodeType||"NullLiteralTypeAnnotation"===nodeType||"MixedTypeAnnotation"===nodeType||"EmptyTypeAnnotation"===nodeType||"NumberTypeAnnotation"===nodeType||"StringTypeAnnotation"===nodeType||"SymbolTypeAnnotation"===nodeType||"ThisTypeAnnotation"===nodeType||"VoidTypeAnnotation"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFlowDeclaration=function(node,opts){if(!node)return !1;const nodeType=node.type;if("DeclareClass"===nodeType||"DeclareFunction"===nodeType||"DeclareInterface"===nodeType||"DeclareModule"===nodeType||"DeclareModuleExports"===nodeType||"DeclareTypeAlias"===nodeType||"DeclareOpaqueType"===nodeType||"DeclareVariable"===nodeType||"DeclareExportDeclaration"===nodeType||"DeclareExportAllDeclaration"===nodeType||"InterfaceDeclaration"===nodeType||"OpaqueType"===nodeType||"TypeAlias"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFlowPredicate=function(node,opts){if(!node)return !1;const nodeType=node.type;if("DeclaredPredicate"===nodeType||"InferredPredicate"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFlowType=function(node,opts){if(!node)return !1;const nodeType=node.type;if("AnyTypeAnnotation"===nodeType||"ArrayTypeAnnotation"===nodeType||"BooleanTypeAnnotation"===nodeType||"BooleanLiteralTypeAnnotation"===nodeType||"NullLiteralTypeAnnotation"===nodeType||"ExistsTypeAnnotation"===nodeType||"FunctionTypeAnnotation"===nodeType||"GenericTypeAnnotation"===nodeType||"InterfaceTypeAnnotation"===nodeType||"IntersectionTypeAnnotation"===nodeType||"MixedTypeAnnotation"===nodeType||"EmptyTypeAnnotation"===nodeType||"NullableTypeAnnotation"===nodeType||"NumberLiteralTypeAnnotation"===nodeType||"NumberTypeAnnotation"===nodeType||"ObjectTypeAnnotation"===nodeType||"StringLiteralTypeAnnotation"===nodeType||"StringTypeAnnotation"===nodeType||"SymbolTypeAnnotation"===nodeType||"ThisTypeAnnotation"===nodeType||"TupleTypeAnnotation"===nodeType||"TypeofTypeAnnotation"===nodeType||"UnionTypeAnnotation"===nodeType||"VoidTypeAnnotation"===nodeType||"IndexedAccessType"===nodeType||"OptionalIndexedAccessType"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFor=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ForInStatement"===nodeType||"ForStatement"===nodeType||"ForOfStatement"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isForInStatement=function(node,opts){if(!node)return !1;if("ForInStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isForOfStatement=function(node,opts){if(!node)return !1;if("ForOfStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isForStatement=function(node,opts){if(!node)return !1;if("ForStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isForXStatement=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ForInStatement"===nodeType||"ForOfStatement"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFunction=function(node,opts){if(!node)return !1;const nodeType=node.type;if("FunctionDeclaration"===nodeType||"FunctionExpression"===nodeType||"ObjectMethod"===nodeType||"ArrowFunctionExpression"===nodeType||"ClassMethod"===nodeType||"ClassPrivateMethod"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFunctionDeclaration=function(node,opts){if(!node)return !1;if("FunctionDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFunctionExpression=function(node,opts){if(!node)return !1;if("FunctionExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFunctionParent=function(node,opts){if(!node)return !1;const nodeType=node.type;if("FunctionDeclaration"===nodeType||"FunctionExpression"===nodeType||"ObjectMethod"===nodeType||"ArrowFunctionExpression"===nodeType||"ClassMethod"===nodeType||"ClassPrivateMethod"===nodeType||"StaticBlock"===nodeType||"TSModuleBlock"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFunctionTypeAnnotation=function(node,opts){if(!node)return !1;if("FunctionTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isFunctionTypeParam=function(node,opts){if(!node)return !1;if("FunctionTypeParam"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isGenericTypeAnnotation=function(node,opts){if(!node)return !1;if("GenericTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isIdentifier=function(node,opts){if(!node)return !1;if("Identifier"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isIfStatement=function(node,opts){if(!node)return !1;if("IfStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isImmutable=function(node,opts){if(!node)return !1;const nodeType=node.type;if("StringLiteral"===nodeType||"NumericLiteral"===nodeType||"NullLiteral"===nodeType||"BooleanLiteral"===nodeType||"BigIntLiteral"===nodeType||"JSXAttribute"===nodeType||"JSXClosingElement"===nodeType||"JSXElement"===nodeType||"JSXExpressionContainer"===nodeType||"JSXSpreadChild"===nodeType||"JSXOpeningElement"===nodeType||"JSXText"===nodeType||"JSXFragment"===nodeType||"JSXOpeningFragment"===nodeType||"JSXClosingFragment"===nodeType||"DecimalLiteral"===nodeType||"Placeholder"===nodeType&&"StringLiteral"===node.expectedNode)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isImport=function(node,opts){if(!node)return !1;if("Import"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isImportAttribute=function(node,opts){if(!node)return !1;if("ImportAttribute"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isImportDeclaration=function(node,opts){if(!node)return !1;if("ImportDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isImportDefaultSpecifier=function(node,opts){if(!node)return !1;if("ImportDefaultSpecifier"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isImportNamespaceSpecifier=function(node,opts){if(!node)return !1;if("ImportNamespaceSpecifier"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isImportOrExportDeclaration=isImportOrExportDeclaration,exports.isImportSpecifier=function(node,opts){if(!node)return !1;if("ImportSpecifier"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isIndexedAccessType=function(node,opts){if(!node)return !1;if("IndexedAccessType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isInferredPredicate=function(node,opts){if(!node)return !1;if("InferredPredicate"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isInterfaceDeclaration=function(node,opts){if(!node)return !1;if("InterfaceDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isInterfaceExtends=function(node,opts){if(!node)return !1;if("InterfaceExtends"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isInterfaceTypeAnnotation=function(node,opts){if(!node)return !1;if("InterfaceTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isInterpreterDirective=function(node,opts){if(!node)return !1;if("InterpreterDirective"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isIntersectionTypeAnnotation=function(node,opts){if(!node)return !1;if("IntersectionTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSX=function(node,opts){if(!node)return !1;const nodeType=node.type;if("JSXAttribute"===nodeType||"JSXClosingElement"===nodeType||"JSXElement"===nodeType||"JSXEmptyExpression"===nodeType||"JSXExpressionContainer"===nodeType||"JSXSpreadChild"===nodeType||"JSXIdentifier"===nodeType||"JSXMemberExpression"===nodeType||"JSXNamespacedName"===nodeType||"JSXOpeningElement"===nodeType||"JSXSpreadAttribute"===nodeType||"JSXText"===nodeType||"JSXFragment"===nodeType||"JSXOpeningFragment"===nodeType||"JSXClosingFragment"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXAttribute=function(node,opts){if(!node)return !1;if("JSXAttribute"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXClosingElement=function(node,opts){if(!node)return !1;if("JSXClosingElement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXClosingFragment=function(node,opts){if(!node)return !1;if("JSXClosingFragment"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXElement=function(node,opts){if(!node)return !1;if("JSXElement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXEmptyExpression=function(node,opts){if(!node)return !1;if("JSXEmptyExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXExpressionContainer=function(node,opts){if(!node)return !1;if("JSXExpressionContainer"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXFragment=function(node,opts){if(!node)return !1;if("JSXFragment"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXIdentifier=function(node,opts){if(!node)return !1;if("JSXIdentifier"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXMemberExpression=function(node,opts){if(!node)return !1;if("JSXMemberExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXNamespacedName=function(node,opts){if(!node)return !1;if("JSXNamespacedName"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXOpeningElement=function(node,opts){if(!node)return !1;if("JSXOpeningElement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXOpeningFragment=function(node,opts){if(!node)return !1;if("JSXOpeningFragment"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXSpreadAttribute=function(node,opts){if(!node)return !1;if("JSXSpreadAttribute"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXSpreadChild=function(node,opts){if(!node)return !1;if("JSXSpreadChild"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isJSXText=function(node,opts){if(!node)return !1;if("JSXText"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isLVal=function(node,opts){if(!node)return !1;const nodeType=node.type;if("Identifier"===nodeType||"MemberExpression"===nodeType||"RestElement"===nodeType||"AssignmentPattern"===nodeType||"ArrayPattern"===nodeType||"ObjectPattern"===nodeType||"TSParameterProperty"===nodeType||"TSAsExpression"===nodeType||"TSSatisfiesExpression"===nodeType||"TSTypeAssertion"===nodeType||"TSNonNullExpression"===nodeType||"Placeholder"===nodeType&&("Pattern"===node.expectedNode||"Identifier"===node.expectedNode))return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isLabeledStatement=function(node,opts){if(!node)return !1;if("LabeledStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isLiteral=function(node,opts){if(!node)return !1;const nodeType=node.type;if("StringLiteral"===nodeType||"NumericLiteral"===nodeType||"NullLiteral"===nodeType||"BooleanLiteral"===nodeType||"RegExpLiteral"===nodeType||"TemplateLiteral"===nodeType||"BigIntLiteral"===nodeType||"DecimalLiteral"===nodeType||"Placeholder"===nodeType&&"StringLiteral"===node.expectedNode)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isLogicalExpression=function(node,opts){if(!node)return !1;if("LogicalExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isLoop=function(node,opts){if(!node)return !1;const nodeType=node.type;if("DoWhileStatement"===nodeType||"ForInStatement"===nodeType||"ForStatement"===nodeType||"WhileStatement"===nodeType||"ForOfStatement"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isMemberExpression=function(node,opts){if(!node)return !1;if("MemberExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isMetaProperty=function(node,opts){if(!node)return !1;if("MetaProperty"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isMethod=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ObjectMethod"===nodeType||"ClassMethod"===nodeType||"ClassPrivateMethod"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isMiscellaneous=function(node,opts){if(!node)return !1;const nodeType=node.type;if("Noop"===nodeType||"Placeholder"===nodeType||"V8IntrinsicIdentifier"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isMixedTypeAnnotation=function(node,opts){if(!node)return !1;if("MixedTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isModuleDeclaration=function(node,opts){return (0, _deprecationWarning.default)("isModuleDeclaration","isImportOrExportDeclaration"),isImportOrExportDeclaration(node,opts)},exports.isModuleExpression=function(node,opts){if(!node)return !1;if("ModuleExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isModuleSpecifier=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ExportSpecifier"===nodeType||"ImportDefaultSpecifier"===nodeType||"ImportNamespaceSpecifier"===nodeType||"ImportSpecifier"===nodeType||"ExportNamespaceSpecifier"===nodeType||"ExportDefaultSpecifier"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isNewExpression=function(node,opts){if(!node)return !1;if("NewExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isNoop=function(node,opts){if(!node)return !1;if("Noop"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isNullLiteral=function(node,opts){if(!node)return !1;if("NullLiteral"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isNullLiteralTypeAnnotation=function(node,opts){if(!node)return !1;if("NullLiteralTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isNullableTypeAnnotation=function(node,opts){if(!node)return !1;if("NullableTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isNumberLiteral=function(node,opts){if((0, _deprecationWarning.default)("isNumberLiteral","isNumericLiteral"),!node)return !1;if("NumberLiteral"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isNumberLiteralTypeAnnotation=function(node,opts){if(!node)return !1;if("NumberLiteralTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isNumberTypeAnnotation=function(node,opts){if(!node)return !1;if("NumberTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isNumericLiteral=function(node,opts){if(!node)return !1;if("NumericLiteral"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isObjectExpression=function(node,opts){if(!node)return !1;if("ObjectExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isObjectMember=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ObjectMethod"===nodeType||"ObjectProperty"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isObjectMethod=function(node,opts){if(!node)return !1;if("ObjectMethod"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isObjectPattern=function(node,opts){if(!node)return !1;if("ObjectPattern"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isObjectProperty=function(node,opts){if(!node)return !1;if("ObjectProperty"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isObjectTypeAnnotation=function(node,opts){if(!node)return !1;if("ObjectTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isObjectTypeCallProperty=function(node,opts){if(!node)return !1;if("ObjectTypeCallProperty"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isObjectTypeIndexer=function(node,opts){if(!node)return !1;if("ObjectTypeIndexer"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isObjectTypeInternalSlot=function(node,opts){if(!node)return !1;if("ObjectTypeInternalSlot"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isObjectTypeProperty=function(node,opts){if(!node)return !1;if("ObjectTypeProperty"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isObjectTypeSpreadProperty=function(node,opts){if(!node)return !1;if("ObjectTypeSpreadProperty"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isOpaqueType=function(node,opts){if(!node)return !1;if("OpaqueType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isOptionalCallExpression=function(node,opts){if(!node)return !1;if("OptionalCallExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isOptionalIndexedAccessType=function(node,opts){if(!node)return !1;if("OptionalIndexedAccessType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isOptionalMemberExpression=function(node,opts){if(!node)return !1;if("OptionalMemberExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isParenthesizedExpression=function(node,opts){if(!node)return !1;if("ParenthesizedExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isPattern=function(node,opts){if(!node)return !1;const nodeType=node.type;if("AssignmentPattern"===nodeType||"ArrayPattern"===nodeType||"ObjectPattern"===nodeType||"Placeholder"===nodeType&&"Pattern"===node.expectedNode)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isPatternLike=function(node,opts){if(!node)return !1;const nodeType=node.type;if("Identifier"===nodeType||"RestElement"===nodeType||"AssignmentPattern"===nodeType||"ArrayPattern"===nodeType||"ObjectPattern"===nodeType||"TSAsExpression"===nodeType||"TSSatisfiesExpression"===nodeType||"TSTypeAssertion"===nodeType||"TSNonNullExpression"===nodeType||"Placeholder"===nodeType&&("Pattern"===node.expectedNode||"Identifier"===node.expectedNode))return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isPipelineBareFunction=function(node,opts){if(!node)return !1;if("PipelineBareFunction"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isPipelinePrimaryTopicReference=function(node,opts){if(!node)return !1;if("PipelinePrimaryTopicReference"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isPipelineTopicExpression=function(node,opts){if(!node)return !1;if("PipelineTopicExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isPlaceholder=function(node,opts){if(!node)return !1;if("Placeholder"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isPrivate=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ClassPrivateProperty"===nodeType||"ClassPrivateMethod"===nodeType||"PrivateName"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isPrivateName=function(node,opts){if(!node)return !1;if("PrivateName"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isProgram=function(node,opts){if(!node)return !1;if("Program"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isProperty=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ObjectProperty"===nodeType||"ClassProperty"===nodeType||"ClassAccessorProperty"===nodeType||"ClassPrivateProperty"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isPureish=function(node,opts){if(!node)return !1;const nodeType=node.type;if("FunctionDeclaration"===nodeType||"FunctionExpression"===nodeType||"StringLiteral"===nodeType||"NumericLiteral"===nodeType||"NullLiteral"===nodeType||"BooleanLiteral"===nodeType||"RegExpLiteral"===nodeType||"ArrowFunctionExpression"===nodeType||"BigIntLiteral"===nodeType||"DecimalLiteral"===nodeType||"Placeholder"===nodeType&&"StringLiteral"===node.expectedNode)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isQualifiedTypeIdentifier=function(node,opts){if(!node)return !1;if("QualifiedTypeIdentifier"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isRecordExpression=function(node,opts){if(!node)return !1;if("RecordExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isRegExpLiteral=function(node,opts){if(!node)return !1;if("RegExpLiteral"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isRegexLiteral=function(node,opts){if((0, _deprecationWarning.default)("isRegexLiteral","isRegExpLiteral"),!node)return !1;if("RegexLiteral"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isRestElement=function(node,opts){if(!node)return !1;if("RestElement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isRestProperty=function(node,opts){if((0, _deprecationWarning.default)("isRestProperty","isRestElement"),!node)return !1;if("RestProperty"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isReturnStatement=function(node,opts){if(!node)return !1;if("ReturnStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isScopable=function(node,opts){if(!node)return !1;const nodeType=node.type;if("BlockStatement"===nodeType||"CatchClause"===nodeType||"DoWhileStatement"===nodeType||"ForInStatement"===nodeType||"ForStatement"===nodeType||"FunctionDeclaration"===nodeType||"FunctionExpression"===nodeType||"Program"===nodeType||"ObjectMethod"===nodeType||"SwitchStatement"===nodeType||"WhileStatement"===nodeType||"ArrowFunctionExpression"===nodeType||"ClassExpression"===nodeType||"ClassDeclaration"===nodeType||"ForOfStatement"===nodeType||"ClassMethod"===nodeType||"ClassPrivateMethod"===nodeType||"StaticBlock"===nodeType||"TSModuleBlock"===nodeType||"Placeholder"===nodeType&&"BlockStatement"===node.expectedNode)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isSequenceExpression=function(node,opts){if(!node)return !1;if("SequenceExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isSpreadElement=function(node,opts){if(!node)return !1;if("SpreadElement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isSpreadProperty=function(node,opts){if((0, _deprecationWarning.default)("isSpreadProperty","isSpreadElement"),!node)return !1;if("SpreadProperty"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isStandardized=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ArrayExpression"===nodeType||"AssignmentExpression"===nodeType||"BinaryExpression"===nodeType||"InterpreterDirective"===nodeType||"Directive"===nodeType||"DirectiveLiteral"===nodeType||"BlockStatement"===nodeType||"BreakStatement"===nodeType||"CallExpression"===nodeType||"CatchClause"===nodeType||"ConditionalExpression"===nodeType||"ContinueStatement"===nodeType||"DebuggerStatement"===nodeType||"DoWhileStatement"===nodeType||"EmptyStatement"===nodeType||"ExpressionStatement"===nodeType||"File"===nodeType||"ForInStatement"===nodeType||"ForStatement"===nodeType||"FunctionDeclaration"===nodeType||"FunctionExpression"===nodeType||"Identifier"===nodeType||"IfStatement"===nodeType||"LabeledStatement"===nodeType||"StringLiteral"===nodeType||"NumericLiteral"===nodeType||"NullLiteral"===nodeType||"BooleanLiteral"===nodeType||"RegExpLiteral"===nodeType||"LogicalExpression"===nodeType||"MemberExpression"===nodeType||"NewExpression"===nodeType||"Program"===nodeType||"ObjectExpression"===nodeType||"ObjectMethod"===nodeType||"ObjectProperty"===nodeType||"RestElement"===nodeType||"ReturnStatement"===nodeType||"SequenceExpression"===nodeType||"ParenthesizedExpression"===nodeType||"SwitchCase"===nodeType||"SwitchStatement"===nodeType||"ThisExpression"===nodeType||"ThrowStatement"===nodeType||"TryStatement"===nodeType||"UnaryExpression"===nodeType||"UpdateExpression"===nodeType||"VariableDeclaration"===nodeType||"VariableDeclarator"===nodeType||"WhileStatement"===nodeType||"WithStatement"===nodeType||"AssignmentPattern"===nodeType||"ArrayPattern"===nodeType||"ArrowFunctionExpression"===nodeType||"ClassBody"===nodeType||"ClassExpression"===nodeType||"ClassDeclaration"===nodeType||"ExportAllDeclaration"===nodeType||"ExportDefaultDeclaration"===nodeType||"ExportNamedDeclaration"===nodeType||"ExportSpecifier"===nodeType||"ForOfStatement"===nodeType||"ImportDeclaration"===nodeType||"ImportDefaultSpecifier"===nodeType||"ImportNamespaceSpecifier"===nodeType||"ImportSpecifier"===nodeType||"MetaProperty"===nodeType||"ClassMethod"===nodeType||"ObjectPattern"===nodeType||"SpreadElement"===nodeType||"Super"===nodeType||"TaggedTemplateExpression"===nodeType||"TemplateElement"===nodeType||"TemplateLiteral"===nodeType||"YieldExpression"===nodeType||"AwaitExpression"===nodeType||"Import"===nodeType||"BigIntLiteral"===nodeType||"ExportNamespaceSpecifier"===nodeType||"OptionalMemberExpression"===nodeType||"OptionalCallExpression"===nodeType||"ClassProperty"===nodeType||"ClassAccessorProperty"===nodeType||"ClassPrivateProperty"===nodeType||"ClassPrivateMethod"===nodeType||"PrivateName"===nodeType||"StaticBlock"===nodeType||"Placeholder"===nodeType&&("Identifier"===node.expectedNode||"StringLiteral"===node.expectedNode||"BlockStatement"===node.expectedNode||"ClassBody"===node.expectedNode))return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isStatement=function(node,opts){if(!node)return !1;const nodeType=node.type;if("BlockStatement"===nodeType||"BreakStatement"===nodeType||"ContinueStatement"===nodeType||"DebuggerStatement"===nodeType||"DoWhileStatement"===nodeType||"EmptyStatement"===nodeType||"ExpressionStatement"===nodeType||"ForInStatement"===nodeType||"ForStatement"===nodeType||"FunctionDeclaration"===nodeType||"IfStatement"===nodeType||"LabeledStatement"===nodeType||"ReturnStatement"===nodeType||"SwitchStatement"===nodeType||"ThrowStatement"===nodeType||"TryStatement"===nodeType||"VariableDeclaration"===nodeType||"WhileStatement"===nodeType||"WithStatement"===nodeType||"ClassDeclaration"===nodeType||"ExportAllDeclaration"===nodeType||"ExportDefaultDeclaration"===nodeType||"ExportNamedDeclaration"===nodeType||"ForOfStatement"===nodeType||"ImportDeclaration"===nodeType||"DeclareClass"===nodeType||"DeclareFunction"===nodeType||"DeclareInterface"===nodeType||"DeclareModule"===nodeType||"DeclareModuleExports"===nodeType||"DeclareTypeAlias"===nodeType||"DeclareOpaqueType"===nodeType||"DeclareVariable"===nodeType||"DeclareExportDeclaration"===nodeType||"DeclareExportAllDeclaration"===nodeType||"InterfaceDeclaration"===nodeType||"OpaqueType"===nodeType||"TypeAlias"===nodeType||"EnumDeclaration"===nodeType||"TSDeclareFunction"===nodeType||"TSInterfaceDeclaration"===nodeType||"TSTypeAliasDeclaration"===nodeType||"TSEnumDeclaration"===nodeType||"TSModuleDeclaration"===nodeType||"TSImportEqualsDeclaration"===nodeType||"TSExportAssignment"===nodeType||"TSNamespaceExportDeclaration"===nodeType||"Placeholder"===nodeType&&("Statement"===node.expectedNode||"Declaration"===node.expectedNode||"BlockStatement"===node.expectedNode))return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isStaticBlock=function(node,opts){if(!node)return !1;if("StaticBlock"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isStringLiteral=function(node,opts){if(!node)return !1;if("StringLiteral"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isStringLiteralTypeAnnotation=function(node,opts){if(!node)return !1;if("StringLiteralTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isStringTypeAnnotation=function(node,opts){if(!node)return !1;if("StringTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isSuper=function(node,opts){if(!node)return !1;if("Super"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isSwitchCase=function(node,opts){if(!node)return !1;if("SwitchCase"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isSwitchStatement=function(node,opts){if(!node)return !1;if("SwitchStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isSymbolTypeAnnotation=function(node,opts){if(!node)return !1;if("SymbolTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSAnyKeyword=function(node,opts){if(!node)return !1;if("TSAnyKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSArrayType=function(node,opts){if(!node)return !1;if("TSArrayType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSAsExpression=function(node,opts){if(!node)return !1;if("TSAsExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSBaseType=function(node,opts){if(!node)return !1;const nodeType=node.type;if("TSAnyKeyword"===nodeType||"TSBooleanKeyword"===nodeType||"TSBigIntKeyword"===nodeType||"TSIntrinsicKeyword"===nodeType||"TSNeverKeyword"===nodeType||"TSNullKeyword"===nodeType||"TSNumberKeyword"===nodeType||"TSObjectKeyword"===nodeType||"TSStringKeyword"===nodeType||"TSSymbolKeyword"===nodeType||"TSUndefinedKeyword"===nodeType||"TSUnknownKeyword"===nodeType||"TSVoidKeyword"===nodeType||"TSThisType"===nodeType||"TSLiteralType"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSBigIntKeyword=function(node,opts){if(!node)return !1;if("TSBigIntKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSBooleanKeyword=function(node,opts){if(!node)return !1;if("TSBooleanKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSCallSignatureDeclaration=function(node,opts){if(!node)return !1;if("TSCallSignatureDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSConditionalType=function(node,opts){if(!node)return !1;if("TSConditionalType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSConstructSignatureDeclaration=function(node,opts){if(!node)return !1;if("TSConstructSignatureDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSConstructorType=function(node,opts){if(!node)return !1;if("TSConstructorType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSDeclareFunction=function(node,opts){if(!node)return !1;if("TSDeclareFunction"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSDeclareMethod=function(node,opts){if(!node)return !1;if("TSDeclareMethod"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSEntityName=function(node,opts){if(!node)return !1;const nodeType=node.type;if("Identifier"===nodeType||"TSQualifiedName"===nodeType||"Placeholder"===nodeType&&"Identifier"===node.expectedNode)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSEnumDeclaration=function(node,opts){if(!node)return !1;if("TSEnumDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSEnumMember=function(node,opts){if(!node)return !1;if("TSEnumMember"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSExportAssignment=function(node,opts){if(!node)return !1;if("TSExportAssignment"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSExpressionWithTypeArguments=function(node,opts){if(!node)return !1;if("TSExpressionWithTypeArguments"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSExternalModuleReference=function(node,opts){if(!node)return !1;if("TSExternalModuleReference"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSFunctionType=function(node,opts){if(!node)return !1;if("TSFunctionType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSImportEqualsDeclaration=function(node,opts){if(!node)return !1;if("TSImportEqualsDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSImportType=function(node,opts){if(!node)return !1;if("TSImportType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSIndexSignature=function(node,opts){if(!node)return !1;if("TSIndexSignature"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSIndexedAccessType=function(node,opts){if(!node)return !1;if("TSIndexedAccessType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSInferType=function(node,opts){if(!node)return !1;if("TSInferType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSInstantiationExpression=function(node,opts){if(!node)return !1;if("TSInstantiationExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSInterfaceBody=function(node,opts){if(!node)return !1;if("TSInterfaceBody"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSInterfaceDeclaration=function(node,opts){if(!node)return !1;if("TSInterfaceDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSIntersectionType=function(node,opts){if(!node)return !1;if("TSIntersectionType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSIntrinsicKeyword=function(node,opts){if(!node)return !1;if("TSIntrinsicKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSLiteralType=function(node,opts){if(!node)return !1;if("TSLiteralType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSMappedType=function(node,opts){if(!node)return !1;if("TSMappedType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSMethodSignature=function(node,opts){if(!node)return !1;if("TSMethodSignature"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSModuleBlock=function(node,opts){if(!node)return !1;if("TSModuleBlock"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSModuleDeclaration=function(node,opts){if(!node)return !1;if("TSModuleDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSNamedTupleMember=function(node,opts){if(!node)return !1;if("TSNamedTupleMember"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSNamespaceExportDeclaration=function(node,opts){if(!node)return !1;if("TSNamespaceExportDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSNeverKeyword=function(node,opts){if(!node)return !1;if("TSNeverKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSNonNullExpression=function(node,opts){if(!node)return !1;if("TSNonNullExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSNullKeyword=function(node,opts){if(!node)return !1;if("TSNullKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSNumberKeyword=function(node,opts){if(!node)return !1;if("TSNumberKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSObjectKeyword=function(node,opts){if(!node)return !1;if("TSObjectKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSOptionalType=function(node,opts){if(!node)return !1;if("TSOptionalType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSParameterProperty=function(node,opts){if(!node)return !1;if("TSParameterProperty"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSParenthesizedType=function(node,opts){if(!node)return !1;if("TSParenthesizedType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSPropertySignature=function(node,opts){if(!node)return !1;if("TSPropertySignature"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSQualifiedName=function(node,opts){if(!node)return !1;if("TSQualifiedName"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSRestType=function(node,opts){if(!node)return !1;if("TSRestType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSSatisfiesExpression=function(node,opts){if(!node)return !1;if("TSSatisfiesExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSStringKeyword=function(node,opts){if(!node)return !1;if("TSStringKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSSymbolKeyword=function(node,opts){if(!node)return !1;if("TSSymbolKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSThisType=function(node,opts){if(!node)return !1;if("TSThisType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTupleType=function(node,opts){if(!node)return !1;if("TSTupleType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSType=function(node,opts){if(!node)return !1;const nodeType=node.type;if("TSAnyKeyword"===nodeType||"TSBooleanKeyword"===nodeType||"TSBigIntKeyword"===nodeType||"TSIntrinsicKeyword"===nodeType||"TSNeverKeyword"===nodeType||"TSNullKeyword"===nodeType||"TSNumberKeyword"===nodeType||"TSObjectKeyword"===nodeType||"TSStringKeyword"===nodeType||"TSSymbolKeyword"===nodeType||"TSUndefinedKeyword"===nodeType||"TSUnknownKeyword"===nodeType||"TSVoidKeyword"===nodeType||"TSThisType"===nodeType||"TSFunctionType"===nodeType||"TSConstructorType"===nodeType||"TSTypeReference"===nodeType||"TSTypePredicate"===nodeType||"TSTypeQuery"===nodeType||"TSTypeLiteral"===nodeType||"TSArrayType"===nodeType||"TSTupleType"===nodeType||"TSOptionalType"===nodeType||"TSRestType"===nodeType||"TSUnionType"===nodeType||"TSIntersectionType"===nodeType||"TSConditionalType"===nodeType||"TSInferType"===nodeType||"TSParenthesizedType"===nodeType||"TSTypeOperator"===nodeType||"TSIndexedAccessType"===nodeType||"TSMappedType"===nodeType||"TSLiteralType"===nodeType||"TSExpressionWithTypeArguments"===nodeType||"TSImportType"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTypeAliasDeclaration=function(node,opts){if(!node)return !1;if("TSTypeAliasDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTypeAnnotation=function(node,opts){if(!node)return !1;if("TSTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTypeAssertion=function(node,opts){if(!node)return !1;if("TSTypeAssertion"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTypeElement=function(node,opts){if(!node)return !1;const nodeType=node.type;if("TSCallSignatureDeclaration"===nodeType||"TSConstructSignatureDeclaration"===nodeType||"TSPropertySignature"===nodeType||"TSMethodSignature"===nodeType||"TSIndexSignature"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTypeLiteral=function(node,opts){if(!node)return !1;if("TSTypeLiteral"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTypeOperator=function(node,opts){if(!node)return !1;if("TSTypeOperator"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTypeParameter=function(node,opts){if(!node)return !1;if("TSTypeParameter"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTypeParameterDeclaration=function(node,opts){if(!node)return !1;if("TSTypeParameterDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTypeParameterInstantiation=function(node,opts){if(!node)return !1;if("TSTypeParameterInstantiation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTypePredicate=function(node,opts){if(!node)return !1;if("TSTypePredicate"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTypeQuery=function(node,opts){if(!node)return !1;if("TSTypeQuery"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSTypeReference=function(node,opts){if(!node)return !1;if("TSTypeReference"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSUndefinedKeyword=function(node,opts){if(!node)return !1;if("TSUndefinedKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSUnionType=function(node,opts){if(!node)return !1;if("TSUnionType"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSUnknownKeyword=function(node,opts){if(!node)return !1;if("TSUnknownKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTSVoidKeyword=function(node,opts){if(!node)return !1;if("TSVoidKeyword"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTaggedTemplateExpression=function(node,opts){if(!node)return !1;if("TaggedTemplateExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTemplateElement=function(node,opts){if(!node)return !1;if("TemplateElement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTemplateLiteral=function(node,opts){if(!node)return !1;if("TemplateLiteral"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTerminatorless=function(node,opts){if(!node)return !1;const nodeType=node.type;if("BreakStatement"===nodeType||"ContinueStatement"===nodeType||"ReturnStatement"===nodeType||"ThrowStatement"===nodeType||"YieldExpression"===nodeType||"AwaitExpression"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isThisExpression=function(node,opts){if(!node)return !1;if("ThisExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isThisTypeAnnotation=function(node,opts){if(!node)return !1;if("ThisTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isThrowStatement=function(node,opts){if(!node)return !1;if("ThrowStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTopicReference=function(node,opts){if(!node)return !1;if("TopicReference"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTryStatement=function(node,opts){if(!node)return !1;if("TryStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTupleExpression=function(node,opts){if(!node)return !1;if("TupleExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTupleTypeAnnotation=function(node,opts){if(!node)return !1;if("TupleTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTypeAlias=function(node,opts){if(!node)return !1;if("TypeAlias"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTypeAnnotation=function(node,opts){if(!node)return !1;if("TypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTypeCastExpression=function(node,opts){if(!node)return !1;if("TypeCastExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTypeParameter=function(node,opts){if(!node)return !1;if("TypeParameter"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTypeParameterDeclaration=function(node,opts){if(!node)return !1;if("TypeParameterDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTypeParameterInstantiation=function(node,opts){if(!node)return !1;if("TypeParameterInstantiation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTypeScript=function(node,opts){if(!node)return !1;const nodeType=node.type;if("TSParameterProperty"===nodeType||"TSDeclareFunction"===nodeType||"TSDeclareMethod"===nodeType||"TSQualifiedName"===nodeType||"TSCallSignatureDeclaration"===nodeType||"TSConstructSignatureDeclaration"===nodeType||"TSPropertySignature"===nodeType||"TSMethodSignature"===nodeType||"TSIndexSignature"===nodeType||"TSAnyKeyword"===nodeType||"TSBooleanKeyword"===nodeType||"TSBigIntKeyword"===nodeType||"TSIntrinsicKeyword"===nodeType||"TSNeverKeyword"===nodeType||"TSNullKeyword"===nodeType||"TSNumberKeyword"===nodeType||"TSObjectKeyword"===nodeType||"TSStringKeyword"===nodeType||"TSSymbolKeyword"===nodeType||"TSUndefinedKeyword"===nodeType||"TSUnknownKeyword"===nodeType||"TSVoidKeyword"===nodeType||"TSThisType"===nodeType||"TSFunctionType"===nodeType||"TSConstructorType"===nodeType||"TSTypeReference"===nodeType||"TSTypePredicate"===nodeType||"TSTypeQuery"===nodeType||"TSTypeLiteral"===nodeType||"TSArrayType"===nodeType||"TSTupleType"===nodeType||"TSOptionalType"===nodeType||"TSRestType"===nodeType||"TSNamedTupleMember"===nodeType||"TSUnionType"===nodeType||"TSIntersectionType"===nodeType||"TSConditionalType"===nodeType||"TSInferType"===nodeType||"TSParenthesizedType"===nodeType||"TSTypeOperator"===nodeType||"TSIndexedAccessType"===nodeType||"TSMappedType"===nodeType||"TSLiteralType"===nodeType||"TSExpressionWithTypeArguments"===nodeType||"TSInterfaceDeclaration"===nodeType||"TSInterfaceBody"===nodeType||"TSTypeAliasDeclaration"===nodeType||"TSInstantiationExpression"===nodeType||"TSAsExpression"===nodeType||"TSSatisfiesExpression"===nodeType||"TSTypeAssertion"===nodeType||"TSEnumDeclaration"===nodeType||"TSEnumMember"===nodeType||"TSModuleDeclaration"===nodeType||"TSModuleBlock"===nodeType||"TSImportType"===nodeType||"TSImportEqualsDeclaration"===nodeType||"TSExternalModuleReference"===nodeType||"TSNonNullExpression"===nodeType||"TSExportAssignment"===nodeType||"TSNamespaceExportDeclaration"===nodeType||"TSTypeAnnotation"===nodeType||"TSTypeParameterInstantiation"===nodeType||"TSTypeParameterDeclaration"===nodeType||"TSTypeParameter"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isTypeofTypeAnnotation=function(node,opts){if(!node)return !1;if("TypeofTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isUnaryExpression=function(node,opts){if(!node)return !1;if("UnaryExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isUnaryLike=function(node,opts){if(!node)return !1;const nodeType=node.type;if("UnaryExpression"===nodeType||"SpreadElement"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isUnionTypeAnnotation=function(node,opts){if(!node)return !1;if("UnionTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isUpdateExpression=function(node,opts){if(!node)return !1;if("UpdateExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isUserWhitespacable=function(node,opts){if(!node)return !1;const nodeType=node.type;if("ObjectMethod"===nodeType||"ObjectProperty"===nodeType||"ObjectTypeInternalSlot"===nodeType||"ObjectTypeCallProperty"===nodeType||"ObjectTypeIndexer"===nodeType||"ObjectTypeProperty"===nodeType||"ObjectTypeSpreadProperty"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isV8IntrinsicIdentifier=function(node,opts){if(!node)return !1;if("V8IntrinsicIdentifier"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isVariableDeclaration=function(node,opts){if(!node)return !1;if("VariableDeclaration"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isVariableDeclarator=function(node,opts){if(!node)return !1;if("VariableDeclarator"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isVariance=function(node,opts){if(!node)return !1;if("Variance"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isVoidTypeAnnotation=function(node,opts){if(!node)return !1;if("VoidTypeAnnotation"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isWhile=function(node,opts){if(!node)return !1;const nodeType=node.type;if("DoWhileStatement"===nodeType||"WhileStatement"===nodeType)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isWhileStatement=function(node,opts){if(!node)return !1;if("WhileStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isWithStatement=function(node,opts){if(!node)return !1;if("WithStatement"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1},exports.isYieldExpression=function(node,opts){if(!node)return !1;if("YieldExpression"===node.type)return void 0===opts||(0, _shallowEqual.default)(node,opts);return !1};var _shallowEqual=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/shallowEqual.js"),_deprecationWarning=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/deprecationWarning.js");function isImportOrExportDeclaration(node,opts){if(!node)return !1;const nodeType=node.type;return ("ExportAllDeclaration"===nodeType||"ExportDefaultDeclaration"===nodeType||"ExportNamedDeclaration"===nodeType||"ImportDeclaration"===nodeType)&&(void 0===opts||(0, _shallowEqual.default)(node,opts))}},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/is.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(type,node,opts){if(!node)return !1;if(!(0, _isType.default)(node.type,type))return !opts&&"Placeholder"===node.type&&type in _definitions.FLIPPED_ALIAS_KEYS&&(0, _isPlaceholderType.default)(node.expectedNode,type);return void 0===opts||(0, _shallowEqual.default)(node,opts)};var _shallowEqual=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/utils/shallowEqual.js"),_isType=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isType.js"),_isPlaceholderType=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js"),_definitions=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isBinding.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node,parent,grandparent){if(grandparent&&"Identifier"===node.type&&"ObjectProperty"===parent.type&&"ObjectExpression"===grandparent.type)return !1;const keys=_getBindingIdentifiers.default.keys[parent.type];if(keys)for(let i=0;i<keys.length;i++){const val=parent[keys[i]];if(Array.isArray(val)){if(val.indexOf(node)>=0)return !0}else if(val===node)return !0}return !1};var _getBindingIdentifiers=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isBlockScoped.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){return (0, _generated.isFunctionDeclaration)(node)||(0, _generated.isClassDeclaration)(node)||(0, _isLet.default)(node)};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"),_isLet=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isLet.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isImmutable.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){if((0, _isType.default)(node.type,"Immutable"))return !0;if((0, _generated.isIdentifier)(node))return "undefined"===node.name;return !1};var _isType=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isType.js"),_generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isLet.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){return (0, _generated.isVariableDeclaration)(node)&&("var"!==node.kind||node[_constants.BLOCK_SCOPED_SYMBOL])};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"),_constants=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isNode.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){return !(!node||!_definitions.VISITOR_KEYS[node.type])};var _definitions=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isNodesEquivalent.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function isNodesEquivalent(a,b){if("object"!=typeof a||"object"!=typeof b||null==a||null==b)return a===b;if(a.type!==b.type)return !1;const fields=Object.keys(_definitions.NODE_FIELDS[a.type]||a.type),visitorKeys=_definitions.VISITOR_KEYS[a.type];for(const field of fields){const val_a=a[field],val_b=b[field];if(typeof val_a!=typeof val_b)return !1;if(null!=val_a||null!=val_b){if(null==val_a||null==val_b)return !1;if(Array.isArray(val_a)){if(!Array.isArray(val_b))return !1;if(val_a.length!==val_b.length)return !1;for(let i=0;i<val_a.length;i++)if(!isNodesEquivalent(val_a[i],val_b[i]))return !1}else if("object"!=typeof val_a||null!=visitorKeys&&visitorKeys.includes(field)){if(!isNodesEquivalent(val_a,val_b))return !1}else for(const key of Object.keys(val_a))if(val_a[key]!==val_b[key])return !1}}return !0};var _definitions=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isPlaceholderType.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(placeholderType,targetType){if(placeholderType===targetType)return !0;const aliases=_definitions.PLACEHOLDERS_ALIAS[placeholderType];if(aliases)for(const alias of aliases)if(targetType===alias)return !0;return !1};var _definitions=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isReferenced.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node,parent,grandparent){switch(parent.type){case"MemberExpression":case"OptionalMemberExpression":return parent.property===node?!!parent.computed:parent.object===node;case"JSXMemberExpression":return parent.object===node;case"VariableDeclarator":return parent.init===node;case"ArrowFunctionExpression":return parent.body===node;case"PrivateName":case"LabeledStatement":case"CatchClause":case"RestElement":case"BreakStatement":case"ContinueStatement":case"FunctionDeclaration":case"FunctionExpression":case"ExportNamespaceSpecifier":case"ExportDefaultSpecifier":case"ImportDefaultSpecifier":case"ImportNamespaceSpecifier":case"ImportSpecifier":case"ImportAttribute":case"JSXAttribute":case"ObjectPattern":case"ArrayPattern":case"MetaProperty":return !1;case"ClassMethod":case"ClassPrivateMethod":case"ObjectMethod":return parent.key===node&&!!parent.computed;case"ObjectProperty":return parent.key===node?!!parent.computed:!grandparent||"ObjectPattern"!==grandparent.type;case"ClassProperty":case"ClassAccessorProperty":case"TSPropertySignature":return parent.key!==node||!!parent.computed;case"ClassPrivateProperty":case"ObjectTypeProperty":return parent.key!==node;case"ClassDeclaration":case"ClassExpression":return parent.superClass===node;case"AssignmentExpression":case"AssignmentPattern":return parent.right===node;case"ExportSpecifier":return (null==grandparent||!grandparent.source)&&parent.local===node;case"TSEnumMember":return parent.id!==node}return !0};},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isScope.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node,parent){if((0, _generated.isBlockStatement)(node)&&((0, _generated.isFunction)(parent)||(0, _generated.isCatchClause)(parent)))return !1;if((0, _generated.isPattern)(node)&&((0, _generated.isFunction)(parent)||(0, _generated.isCatchClause)(parent)))return !0;return (0, _generated.isScopable)(node)};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isSpecifierDefault.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(specifier){return (0, _generated.isImportDefaultSpecifier)(specifier)||(0, _generated.isIdentifier)(specifier.imported||specifier.exported,{name:"default"})};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isType.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(nodeType,targetType){if(nodeType===targetType)return !0;if(_definitions.ALIAS_KEYS[targetType])return !1;const aliases=_definitions.FLIPPED_ALIAS_KEYS[targetType];if(aliases){if(aliases[0]===nodeType)return !0;for(const alias of aliases)if(nodeType===alias)return !0}return !1};var _definitions=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidES3Identifier.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(name){return (0, _isValidIdentifier.default)(name)&&!RESERVED_WORDS_ES3_ONLY.has(name)};var _isValidIdentifier=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js");const RESERVED_WORDS_ES3_ONLY=new Set(["abstract","boolean","byte","char","double","enum","final","float","goto","implements","int","interface","long","native","package","private","protected","public","short","static","synchronized","throws","transient","volatile"]);},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isValidIdentifier.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(name,reserved=!0){if("string"!=typeof name)return !1;if(reserved&&((0, _helperValidatorIdentifier.isKeyword)(name)||(0, _helperValidatorIdentifier.isStrictReservedWord)(name,!0)))return !1;return (0, _helperValidatorIdentifier.isIdentifierName)(name)};var _helperValidatorIdentifier=__webpack_require__("./node_modules/.pnpm/@babel+helper-validator-identifier@7.19.1/node_modules/@babel/helper-validator-identifier/lib/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/isVar.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node){return (0, _generated.isVariableDeclaration)(node,{kind:"var"})&&!node[_constants.BLOCK_SCOPED_SYMBOL]};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js"),_constants=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/constants/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/matchesPattern.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(member,match,allowPartial){if(!(0, _generated.isMemberExpression)(member))return !1;const parts=Array.isArray(match)?match:match.split("."),nodes=[];let node;for(node=member;(0, _generated.isMemberExpression)(node);node=node.object)nodes.push(node.property);if(nodes.push(node),nodes.length<parts.length)return !1;if(!allowPartial&&nodes.length>parts.length)return !1;for(let i=0,j=nodes.length-1;i<parts.length;i++,j--){const node=nodes[j];let value;if((0, _generated.isIdentifier)(node))value=node.name;else if((0, _generated.isStringLiteral)(node))value=node.value;else {if(!(0, _generated.isThisExpression)(node))return !1;value="this";}if(parts[i]!==value)return !1}return !0};var _generated=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/generated/index.js");},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/react/isCompatTag.js":(__unused_webpack_module,exports)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(tagName){return !!tagName&&/^[a-z]/.test(tagName)};},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/react/isReactComponent.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _default=(0, __webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js").default)("React.Component");exports.default=_default;},"./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/validators/validate.js":(__unused_webpack_module,exports,__webpack_require__)=>{Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=function(node,key,val){if(!node)return;const fields=_definitions.NODE_FIELDS[node.type];if(!fields)return;const field=fields[key];validateField(node,key,val,field),validateChild(node,key,val);},exports.validateChild=validateChild,exports.validateField=validateField;var _definitions=__webpack_require__("./node_modules/.pnpm/@babel+types@7.21.3/node_modules/@babel/types/lib/definitions/index.js");function validateField(node,key,val,field){null!=field&&field.validate&&(field.optional&&null==val||field.validate(node,key,val));}function validateChild(node,key,val){if(null==val)return;const validate=_definitions.NODE_PARENT_VALIDATIONS[val.type];validate&&validate(node,key,val);}},"./node_modules/.pnpm/@ampproject+remapping@2.2.0/node_modules/@ampproject/remapping/dist/remapping.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>remapping});const comma=",".charCodeAt(0),semicolon=";".charCodeAt(0),chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",intToChar=new Uint8Array(64),charToInt=new Uint8Array(128);for(let i=0;i<chars.length;i++){const c=chars.charCodeAt(i);intToChar[i]=c,charToInt[c]=i;}const td="undefined"!=typeof TextDecoder?new TextDecoder:"undefined"!=typeof Buffer?{decode:buf=>Buffer.from(buf.buffer,buf.byteOffset,buf.byteLength).toString()}:{decode(buf){let out="";for(let i=0;i<buf.length;i++)out+=String.fromCharCode(buf[i]);return out}};function indexOf(mappings,index){const idx=mappings.indexOf(";",index);return -1===idx?mappings.length:idx}function decodeInteger(mappings,pos,state,j){let value=0,shift=0,integer=0;do{const c=mappings.charCodeAt(pos++);integer=charToInt[c],value|=(31&integer)<<shift,shift+=5;}while(32&integer);const shouldNegate=1&value;return value>>>=1,shouldNegate&&(value=-2147483648|-value),state[j]+=value,pos}function hasMoreVlq(mappings,i,length){return !(i>=length)&&mappings.charCodeAt(i)!==comma}function sort(line){line.sort(sortComparator);}function sortComparator(a,b){return a[0]-b[0]}function encode(decoded){const state=new Int32Array(5),buf=new Uint8Array(16384),sub=buf.subarray(0,16348);let pos=0,out="";for(let i=0;i<decoded.length;i++){const line=decoded[i];if(i>0&&(16384===pos&&(out+=td.decode(buf),pos=0),buf[pos++]=semicolon),0!==line.length){state[0]=0;for(let j=0;j<line.length;j++){const segment=line[j];pos>16348&&(out+=td.decode(sub),buf.copyWithin(0,16348,pos),pos-=16348),j>0&&(buf[pos++]=comma),pos=encodeInteger(buf,pos,state,segment,0),1!==segment.length&&(pos=encodeInteger(buf,pos,state,segment,1),pos=encodeInteger(buf,pos,state,segment,2),pos=encodeInteger(buf,pos,state,segment,3),4!==segment.length&&(pos=encodeInteger(buf,pos,state,segment,4)));}}}return out+td.decode(buf.subarray(0,pos))}function encodeInteger(buf,pos,state,segment,j){const next=segment[j];let num=next-state[j];state[j]=next,num=num<0?-num<<1|1:num<<1;do{let clamped=31&num;num>>>=5,num>0&&(clamped|=32),buf[pos++]=intToChar[clamped];}while(num>0);return pos}const schemeRegex=/^[\w+.-]+:\/\//,urlRegex=/^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/,fileRegex=/^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;var UrlType;function isAbsolutePath(input){return input.startsWith("/")}function isRelative(input){return /^[.?#]/.test(input)}function parseAbsoluteUrl(input){const match=urlRegex.exec(input);return makeUrl(match[1],match[2]||"",match[3],match[4]||"",match[5]||"/",match[6]||"",match[7]||"")}function makeUrl(scheme,user,host,port,path,query,hash){return {scheme,user,host,port,path,query,hash,type:UrlType.Absolute}}function parseUrl(input){if(function(input){return input.startsWith("//")}(input)){const url=parseAbsoluteUrl("http:"+input);return url.scheme="",url.type=UrlType.SchemeRelative,url}if(isAbsolutePath(input)){const url=parseAbsoluteUrl("http://foo.com"+input);return url.scheme="",url.host="",url.type=UrlType.AbsolutePath,url}if(function(input){return input.startsWith("file:")}(input))return function(input){const match=fileRegex.exec(input),path=match[2];return makeUrl("file:","",match[1]||"","",isAbsolutePath(path)?path:"/"+path,match[3]||"",match[4]||"")}(input);if(function(input){return schemeRegex.test(input)}(input))return parseAbsoluteUrl(input);const url=parseAbsoluteUrl("http://foo.com/"+input);return url.scheme="",url.host="",url.type=input?input.startsWith("?")?UrlType.Query:input.startsWith("#")?UrlType.Hash:UrlType.RelativePath:UrlType.Empty,url}function normalizePath(url,type){const rel=type<=UrlType.RelativePath,pieces=url.path.split("/");let pointer=1,positive=0,addTrailingSlash=!1;for(let i=1;i<pieces.length;i++){const piece=pieces[i];piece?(addTrailingSlash=!1,"."!==piece&&(".."!==piece?(pieces[pointer++]=piece,positive++):positive?(addTrailingSlash=!0,positive--,pointer--):rel&&(pieces[pointer++]=piece))):addTrailingSlash=!0;}let path="";for(let i=1;i<pointer;i++)path+="/"+pieces[i];(!path||addTrailingSlash&&!path.endsWith("/.."))&&(path+="/"),url.path=path;}function resolve(input,base){if(!input&&!base)return "";const url=parseUrl(input);let inputType=url.type;if(base&&inputType!==UrlType.Absolute){const baseUrl=parseUrl(base),baseType=baseUrl.type;switch(inputType){case UrlType.Empty:url.hash=baseUrl.hash;case UrlType.Hash:url.query=baseUrl.query;case UrlType.Query:case UrlType.RelativePath:!function(url,base){normalizePath(base,base.type),"/"===url.path?url.path=base.path:url.path=function(path){if(path.endsWith("/.."))return path;const index=path.lastIndexOf("/");return path.slice(0,index+1)}(base.path)+url.path;}(url,baseUrl);case UrlType.AbsolutePath:url.user=baseUrl.user,url.host=baseUrl.host,url.port=baseUrl.port;case UrlType.SchemeRelative:url.scheme=baseUrl.scheme;}baseType>inputType&&(inputType=baseType);}normalizePath(url,inputType);const queryHash=url.query+url.hash;switch(inputType){case UrlType.Hash:case UrlType.Query:return queryHash;case UrlType.RelativePath:{const path=url.path.slice(1);return path?isRelative(base||input)&&!isRelative(path)?"./"+path+queryHash:path+queryHash:queryHash||"."}case UrlType.AbsolutePath:return url.path+queryHash;default:return url.scheme+"//"+url.user+url.host+url.port+url.path+queryHash}}function trace_mapping_resolve(input,base){return base&&!base.endsWith("/")&&(base+="/"),resolve(input,base)}!function(UrlType){UrlType[UrlType.Empty=1]="Empty",UrlType[UrlType.Hash=2]="Hash",UrlType[UrlType.Query=3]="Query",UrlType[UrlType.RelativePath=4]="RelativePath",UrlType[UrlType.AbsolutePath=5]="AbsolutePath",UrlType[UrlType.SchemeRelative=6]="SchemeRelative",UrlType[UrlType.Absolute=7]="Absolute";}(UrlType||(UrlType={}));const COLUMN=0;function nextUnsortedSegmentLine(mappings,start){for(let i=start;i<mappings.length;i++)if(!isSorted(mappings[i]))return i;return mappings.length}function isSorted(line){for(let j=1;j<line.length;j++)if(line[j][COLUMN]<line[j-1][COLUMN])return !1;return !0}function sortSegments(line,owned){return owned||(line=line.slice()),line.sort(trace_mapping_sortComparator)}function trace_mapping_sortComparator(a,b){return a[COLUMN]-b[COLUMN]}let found=!1;function upperBound(haystack,needle,index){for(let i=index+1;i<haystack.length&&haystack[i][COLUMN]===needle;index=i++);return index}function lowerBound(haystack,needle,index){for(let i=index-1;i>=0&&haystack[i][COLUMN]===needle;index=i--);return index}function memoizedBinarySearch(haystack,needle,state,key){const{lastKey,lastNeedle,lastIndex}=state;let low=0,high=haystack.length-1;if(key===lastKey){if(needle===lastNeedle)return found=-1!==lastIndex&&haystack[lastIndex][COLUMN]===needle,lastIndex;needle>=lastNeedle?low=-1===lastIndex?0:lastIndex:high=lastIndex;}return state.lastKey=key,state.lastNeedle=needle,state.lastIndex=function(haystack,needle,low,high){for(;low<=high;){const mid=low+(high-low>>1),cmp=haystack[mid][COLUMN]-needle;if(0===cmp)return found=!0,mid;cmp<0?low=mid+1:high=mid-1;}return found=!1,low-1}(haystack,needle,low,high)}const LEAST_UPPER_BOUND=-1,GREATEST_LOWER_BOUND=1;let decodedMappings,traceSegment,get,put,addSegment,setSourceContent,gen_mapping_decodedMap,gen_mapping_encodedMap;class TraceMap{constructor(map,mapUrl){const isString="string"==typeof map;if(!isString&&map._decodedMemo)return map;const parsed=isString?JSON.parse(map):map,{version,file,names,sourceRoot,sources,sourcesContent}=parsed;this.version=version,this.file=file,this.names=names,this.sourceRoot=sourceRoot,this.sources=sources,this.sourcesContent=sourcesContent;const from=trace_mapping_resolve(sourceRoot||"",function(path){if(!path)return "";const index=path.lastIndexOf("/");return path.slice(0,index+1)}(mapUrl));this.resolvedSources=sources.map((s=>trace_mapping_resolve(s||"",from)));const{mappings}=parsed;"string"==typeof mappings?(this._encoded=mappings,this._decoded=void 0):(this._encoded=void 0,this._decoded=function(mappings,owned){const unsortedIndex=nextUnsortedSegmentLine(mappings,0);if(unsortedIndex===mappings.length)return mappings;owned||(mappings=mappings.slice());for(let i=unsortedIndex;i<mappings.length;i=nextUnsortedSegmentLine(mappings,i+1))mappings[i]=sortSegments(mappings[i],owned);return mappings}(mappings,isString)),this._decodedMemo={lastKey:-1,lastNeedle:-1,lastIndex:-1},this._bySources=void 0,this._bySourceMemos=void 0;}}function traceSegmentInternal(segments,memo,line,column,bias){let index=memoizedBinarySearch(segments,column,memo,line);return found?index=(bias===LEAST_UPPER_BOUND?upperBound:lowerBound)(segments,column,index):bias===LEAST_UPPER_BOUND&&index++,-1===index||index===segments.length?-1:index}(()=>{decodedMappings=map=>map._decoded||(map._decoded=function(mappings){const state=new Int32Array(5),decoded=[];let index=0;do{const semi=indexOf(mappings,index),line=[];let sorted=!0,lastCol=0;state[0]=0;for(let i=index;i<semi;i++){let seg;i=decodeInteger(mappings,i,state,0);const col=state[0];col<lastCol&&(sorted=!1),lastCol=col,hasMoreVlq(mappings,i,semi)?(i=decodeInteger(mappings,i,state,1),i=decodeInteger(mappings,i,state,2),i=decodeInteger(mappings,i,state,3),hasMoreVlq(mappings,i,semi)?(i=decodeInteger(mappings,i,state,4),seg=[col,state[1],state[2],state[3],state[4]]):seg=[col,state[1],state[2],state[3]]):seg=[col],line.push(seg);}sorted||sort(line),decoded.push(line),index=semi+1;}while(index<=mappings.length);return decoded}(map._encoded)),traceSegment=(map,line,column)=>{const decoded=decodedMappings(map);if(line>=decoded.length)return null;const segments=decoded[line],index=traceSegmentInternal(segments,map._decodedMemo,line,column,GREATEST_LOWER_BOUND);return -1===index?null:segments[index]};})();class SetArray{constructor(){this._indexes={__proto__:null},this.array=[];}}get=(strarr,key)=>strarr._indexes[key],put=(strarr,key)=>{const index=get(strarr,key);if(void 0!==index)return index;const{array,_indexes:indexes}=strarr;return indexes[key]=array.push(key)-1};class GenMapping{constructor({file,sourceRoot}={}){this._names=new SetArray,this._sources=new SetArray,this._sourcesContent=[],this._mappings=[],this.file=file,this.sourceRoot=sourceRoot;}}function getColumnIndex(line,column,seg){let index=line.length;for(let i=index-1;i>=0;i--,index--){const current=line[i],col=current[0];if(col>column)continue;if(col<column)break;const cmp=compare(current,seg);if(0===cmp)return index;if(cmp<0)break}return index}function compare(a,b){let cmp=compareNum(a.length,b.length);return 0!==cmp?cmp:1===a.length?0:(cmp=compareNum(a[1],b[1]),0!==cmp?cmp:(cmp=compareNum(a[2],b[2]),0!==cmp?cmp:(cmp=compareNum(a[3],b[3]),0!==cmp?cmp:4===a.length?0:compareNum(a[4],b[4]))))}function compareNum(a,b){return a-b}function gen_mapping_insert(array,index,value){if(-1!==index){for(let i=array.length;i>index;i--)array[i]=array[i-1];array[index]=value;}}addSegment=(map,genLine,genColumn,source,sourceLine,sourceColumn,name)=>{const{_mappings:mappings,_sources:sources,_sourcesContent:sourcesContent,_names:names}=map,line=function(mappings,index){for(let i=mappings.length;i<=index;i++)mappings[i]=[];return mappings[index]}(mappings,genLine);if(null==source){const seg=[genColumn];return gen_mapping_insert(line,getColumnIndex(line,genColumn,seg),seg)}const sourcesIndex=put(sources,source),seg=name?[genColumn,sourcesIndex,sourceLine,sourceColumn,put(names,name)]:[genColumn,sourcesIndex,sourceLine,sourceColumn],index=getColumnIndex(line,genColumn,seg);sourcesIndex===sourcesContent.length&&(sourcesContent[sourcesIndex]=null),gen_mapping_insert(line,index,seg);},setSourceContent=(map,source,content)=>{const{_sources:sources,_sourcesContent:sourcesContent}=map;sourcesContent[put(sources,source)]=content;},gen_mapping_decodedMap=map=>{const{file,sourceRoot,_mappings:mappings,_sources:sources,_sourcesContent:sourcesContent,_names:names}=map;return {version:3,file,names:names.array,sourceRoot:sourceRoot||void 0,sources:sources.array,sourcesContent,mappings}},gen_mapping_encodedMap=map=>{const decoded=gen_mapping_decodedMap(map);return Object.assign(Object.assign({},decoded),{mappings:encode(decoded.mappings)})};const SOURCELESS_MAPPING={source:null,column:null,line:null,name:null,content:null},EMPTY_SOURCES=[];function Source(map,sources,source,content){return {map,sources,source,content}}function MapSource(map,sources){return Source(map,sources,"",null)}function remapping_originalPositionFor(source,line,column,name){if(!source.map)return {column,line,name,source:source.source,content:source.content};const segment=traceSegment(source.map,line,column);return null==segment?null:1===segment.length?SOURCELESS_MAPPING:remapping_originalPositionFor(source.sources[segment[1]],segment[2],segment[3],5===segment.length?source.map.names[segment[4]]:name)}function buildSourceMapTree(input,loader){const maps=function(value){return Array.isArray(value)?value:[value]}(input).map((m=>new TraceMap(m,""))),map=maps.pop();for(let i=0;i<maps.length;i++)if(maps[i].sources.length>1)throw new Error(`Transformation map ${i} must have exactly one source file.\nDid you specify these with the most recent transformation maps first?`);let tree=build(map,loader,"",0);for(let i=maps.length-1;i>=0;i--)tree=MapSource(maps[i],[tree]);return tree}function build(map,loader,importer,importerDepth){const{resolvedSources,sourcesContent}=map,depth=importerDepth+1;return MapSource(map,resolvedSources.map(((sourceFile,i)=>{const ctx={importer,depth,source:sourceFile||"",content:void 0},sourceMap=loader(ctx.source,ctx),{source,content}=ctx;if(sourceMap)return build(new TraceMap(sourceMap,source),loader,source,depth);return function(source,content){return Source(null,EMPTY_SOURCES,source,content)}(source,void 0!==content?content:sourcesContent?sourcesContent[i]:null)})))}class SourceMap{constructor(map,options){const out=options.decodedMappings?gen_mapping_decodedMap(map):gen_mapping_encodedMap(map);this.version=out.version,this.file=out.file,this.mappings=out.mappings,this.names=out.names,this.sourceRoot=out.sourceRoot,this.sources=out.sources,options.excludeContent||(this.sourcesContent=out.sourcesContent);}toString(){return JSON.stringify(this)}}function remapping(input,loader,options){const opts="object"==typeof options?options:{excludeContent:!!options,decodedMappings:!1},tree=buildSourceMapTree(input,loader);return new SourceMap(function(tree){const gen=new GenMapping({file:tree.map.file}),{sources:rootSources,map}=tree,rootNames=map.names,rootMappings=decodedMappings(map);for(let i=0;i<rootMappings.length;i++){const segments=rootMappings[i];let lastSource=null,lastSourceLine=null,lastSourceColumn=null;for(let j=0;j<segments.length;j++){const segment=segments[j],genCol=segment[0];let traced=SOURCELESS_MAPPING;if(1!==segment.length&&(traced=remapping_originalPositionFor(rootSources[segment[1]],segment[2],segment[3],5===segment.length?rootNames[segment[4]]:""),null==traced))continue;const{column,line,name,content,source}=traced;line===lastSourceLine&&column===lastSourceColumn&&source===lastSource||(lastSourceLine=line,lastSourceColumn=column,lastSource=source,addSegment(gen,i,genCol,source,line,column,name),null!=content&&setSourceContent(gen,source,content));}}return gen}(tree),opts)}},"./node_modules/.pnpm/json5@2.2.3/node_modules/json5/dist/index.mjs":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>__WEBPACK_DEFAULT_EXPORT__});var unicode={Space_Separator:/[\u1680\u2000-\u200A\u202F\u205F\u3000]/,ID_Start:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/,ID_Continue:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/},util={isSpaceSeparator:c=>"string"==typeof c&&unicode.Space_Separator.test(c),isIdStartChar:c=>"string"==typeof c&&(c>="a"&&c<="z"||c>="A"&&c<="Z"||"$"===c||"_"===c||unicode.ID_Start.test(c)),isIdContinueChar:c=>"string"==typeof c&&(c>="a"&&c<="z"||c>="A"&&c<="Z"||c>="0"&&c<="9"||"$"===c||"_"===c||"‌"===c||"‍"===c||unicode.ID_Continue.test(c)),isDigit:c=>"string"==typeof c&&/[0-9]/.test(c),isHexDigit:c=>"string"==typeof c&&/[0-9A-Fa-f]/.test(c)};let source,parseState,stack,pos,line,column,token,key,root;function internalize(holder,name,reviver){const value=holder[name];if(null!=value&&"object"==typeof value)if(Array.isArray(value))for(let i=0;i<value.length;i++){const key=String(i),replacement=internalize(value,key,reviver);void 0===replacement?delete value[key]:Object.defineProperty(value,key,{value:replacement,writable:!0,enumerable:!0,configurable:!0});}else for(const key in value){const replacement=internalize(value,key,reviver);void 0===replacement?delete value[key]:Object.defineProperty(value,key,{value:replacement,writable:!0,enumerable:!0,configurable:!0});}return reviver.call(holder,name,value)}let lexState,buffer,doubleQuote,sign,c;function lex(){for(lexState="default",buffer="",doubleQuote=!1,sign=1;;){c=peek();const token=lexStates[lexState]();if(token)return token}}function peek(){if(source[pos])return String.fromCodePoint(source.codePointAt(pos))}function read(){const c=peek();return "\n"===c?(line++,column=0):c?column+=c.length:column++,c&&(pos+=c.length),c}const lexStates={default(){switch(c){case"\t":case"\v":case"\f":case" ":case" ":case"\ufeff":case"\n":case"\r":case"\u2028":case"\u2029":return void read();case"/":return read(),void(lexState="comment");case void 0:return read(),newToken("eof")}if(!util.isSpaceSeparator(c))return lexStates[parseState]();read();},comment(){switch(c){case"*":return read(),void(lexState="multiLineComment");case"/":return read(),void(lexState="singleLineComment")}throw invalidChar(read())},multiLineComment(){switch(c){case"*":return read(),void(lexState="multiLineCommentAsterisk");case void 0:throw invalidChar(read())}read();},multiLineCommentAsterisk(){switch(c){case"*":return void read();case"/":return read(),void(lexState="default");case void 0:throw invalidChar(read())}read(),lexState="multiLineComment";},singleLineComment(){switch(c){case"\n":case"\r":case"\u2028":case"\u2029":return read(),void(lexState="default");case void 0:return read(),newToken("eof")}read();},value(){switch(c){case"{":case"[":return newToken("punctuator",read());case"n":return read(),literal("ull"),newToken("null",null);case"t":return read(),literal("rue"),newToken("boolean",!0);case"f":return read(),literal("alse"),newToken("boolean",!1);case"-":case"+":return "-"===read()&&(sign=-1),void(lexState="sign");case".":return buffer=read(),void(lexState="decimalPointLeading");case"0":return buffer=read(),void(lexState="zero");case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":return buffer=read(),void(lexState="decimalInteger");case"I":return read(),literal("nfinity"),newToken("numeric",1/0);case"N":return read(),literal("aN"),newToken("numeric",NaN);case'"':case"'":return doubleQuote='"'===read(),buffer="",void(lexState="string")}throw invalidChar(read())},identifierNameStartEscape(){if("u"!==c)throw invalidChar(read());read();const u=unicodeEscape();switch(u){case"$":case"_":break;default:if(!util.isIdStartChar(u))throw invalidIdentifier()}buffer+=u,lexState="identifierName";},identifierName(){switch(c){case"$":case"_":case"‌":case"‍":return void(buffer+=read());case"\\":return read(),void(lexState="identifierNameEscape")}if(!util.isIdContinueChar(c))return newToken("identifier",buffer);buffer+=read();},identifierNameEscape(){if("u"!==c)throw invalidChar(read());read();const u=unicodeEscape();switch(u){case"$":case"_":case"‌":case"‍":break;default:if(!util.isIdContinueChar(u))throw invalidIdentifier()}buffer+=u,lexState="identifierName";},sign(){switch(c){case".":return buffer=read(),void(lexState="decimalPointLeading");case"0":return buffer=read(),void(lexState="zero");case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":return buffer=read(),void(lexState="decimalInteger");case"I":return read(),literal("nfinity"),newToken("numeric",sign*(1/0));case"N":return read(),literal("aN"),newToken("numeric",NaN)}throw invalidChar(read())},zero(){switch(c){case".":return buffer+=read(),void(lexState="decimalPoint");case"e":case"E":return buffer+=read(),void(lexState="decimalExponent");case"x":case"X":return buffer+=read(),void(lexState="hexadecimal")}return newToken("numeric",0*sign)},decimalInteger(){switch(c){case".":return buffer+=read(),void(lexState="decimalPoint");case"e":case"E":return buffer+=read(),void(lexState="decimalExponent")}if(!util.isDigit(c))return newToken("numeric",sign*Number(buffer));buffer+=read();},decimalPointLeading(){if(util.isDigit(c))return buffer+=read(),void(lexState="decimalFraction");throw invalidChar(read())},decimalPoint(){switch(c){case"e":case"E":return buffer+=read(),void(lexState="decimalExponent")}return util.isDigit(c)?(buffer+=read(),void(lexState="decimalFraction")):newToken("numeric",sign*Number(buffer))},decimalFraction(){switch(c){case"e":case"E":return buffer+=read(),void(lexState="decimalExponent")}if(!util.isDigit(c))return newToken("numeric",sign*Number(buffer));buffer+=read();},decimalExponent(){switch(c){case"+":case"-":return buffer+=read(),void(lexState="decimalExponentSign")}if(util.isDigit(c))return buffer+=read(),void(lexState="decimalExponentInteger");throw invalidChar(read())},decimalExponentSign(){if(util.isDigit(c))return buffer+=read(),void(lexState="decimalExponentInteger");throw invalidChar(read())},decimalExponentInteger(){if(!util.isDigit(c))return newToken("numeric",sign*Number(buffer));buffer+=read();},hexadecimal(){if(util.isHexDigit(c))return buffer+=read(),void(lexState="hexadecimalInteger");throw invalidChar(read())},hexadecimalInteger(){if(!util.isHexDigit(c))return newToken("numeric",sign*Number(buffer));buffer+=read();},string(){switch(c){case"\\":return read(),void(buffer+=function(){switch(peek()){case"b":return read(),"\b";case"f":return read(),"\f";case"n":return read(),"\n";case"r":return read(),"\r";case"t":return read(),"\t";case"v":return read(),"\v";case"0":if(read(),util.isDigit(peek()))throw invalidChar(read());return "\0";case"x":return read(),function(){let buffer="",c=peek();if(!util.isHexDigit(c))throw invalidChar(read());if(buffer+=read(),c=peek(),!util.isHexDigit(c))throw invalidChar(read());return buffer+=read(),String.fromCodePoint(parseInt(buffer,16))}();case"u":return read(),unicodeEscape();case"\n":case"\u2028":case"\u2029":return read(),"";case"\r":return read(),"\n"===peek()&&read(),"";case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case void 0:throw invalidChar(read())}return read()}());case'"':return doubleQuote?(read(),newToken("string",buffer)):void(buffer+=read());case"'":return doubleQuote?void(buffer+=read()):(read(),newToken("string",buffer));case"\n":case"\r":throw invalidChar(read());case"\u2028":case"\u2029":!function(c){console.warn(`JSON5: '${formatChar(c)}' in strings is not valid ECMAScript; consider escaping`);}(c);break;case void 0:throw invalidChar(read())}buffer+=read();},start(){switch(c){case"{":case"[":return newToken("punctuator",read())}lexState="value";},beforePropertyName(){switch(c){case"$":case"_":return buffer=read(),void(lexState="identifierName");case"\\":return read(),void(lexState="identifierNameStartEscape");case"}":return newToken("punctuator",read());case'"':case"'":return doubleQuote='"'===read(),void(lexState="string")}if(util.isIdStartChar(c))return buffer+=read(),void(lexState="identifierName");throw invalidChar(read())},afterPropertyName(){if(":"===c)return newToken("punctuator",read());throw invalidChar(read())},beforePropertyValue(){lexState="value";},afterPropertyValue(){switch(c){case",":case"}":return newToken("punctuator",read())}throw invalidChar(read())},beforeArrayValue(){if("]"===c)return newToken("punctuator",read());lexState="value";},afterArrayValue(){switch(c){case",":case"]":return newToken("punctuator",read())}throw invalidChar(read())},end(){throw invalidChar(read())}};function newToken(type,value){return {type,value,line,column}}function literal(s){for(const c of s){if(peek()!==c)throw invalidChar(read());read();}}function unicodeEscape(){let buffer="",count=4;for(;count-- >0;){const c=peek();if(!util.isHexDigit(c))throw invalidChar(read());buffer+=read();}return String.fromCodePoint(parseInt(buffer,16))}const parseStates={start(){if("eof"===token.type)throw invalidEOF();push();},beforePropertyName(){switch(token.type){case"identifier":case"string":return key=token.value,void(parseState="afterPropertyName");case"punctuator":return void pop();case"eof":throw invalidEOF()}},afterPropertyName(){if("eof"===token.type)throw invalidEOF();parseState="beforePropertyValue";},beforePropertyValue(){if("eof"===token.type)throw invalidEOF();push();},beforeArrayValue(){if("eof"===token.type)throw invalidEOF();"punctuator"!==token.type||"]"!==token.value?push():pop();},afterPropertyValue(){if("eof"===token.type)throw invalidEOF();switch(token.value){case",":return void(parseState="beforePropertyName");case"}":pop();}},afterArrayValue(){if("eof"===token.type)throw invalidEOF();switch(token.value){case",":return void(parseState="beforeArrayValue");case"]":pop();}},end(){}};function push(){let value;switch(token.type){case"punctuator":switch(token.value){case"{":value={};break;case"[":value=[];}break;case"null":case"boolean":case"numeric":case"string":value=token.value;}if(void 0===root)root=value;else {const parent=stack[stack.length-1];Array.isArray(parent)?parent.push(value):Object.defineProperty(parent,key,{value,writable:!0,enumerable:!0,configurable:!0});}if(null!==value&&"object"==typeof value)stack.push(value),parseState=Array.isArray(value)?"beforeArrayValue":"beforePropertyName";else {const current=stack[stack.length-1];parseState=null==current?"end":Array.isArray(current)?"afterArrayValue":"afterPropertyValue";}}function pop(){stack.pop();const current=stack[stack.length-1];parseState=null==current?"end":Array.isArray(current)?"afterArrayValue":"afterPropertyValue";}function invalidChar(c){return syntaxError(void 0===c?`JSON5: invalid end of input at ${line}:${column}`:`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)}function invalidEOF(){return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)}function invalidIdentifier(){return column-=5,syntaxError(`JSON5: invalid identifier character at ${line}:${column}`)}function formatChar(c){const replacements={"'":"\\'",'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\v","\0":"\\0","\u2028":"\\u2028","\u2029":"\\u2029"};if(replacements[c])return replacements[c];if(c<" "){const hexString=c.charCodeAt(0).toString(16);return "\\x"+("00"+hexString).substring(hexString.length)}return c}function syntaxError(message){const err=new SyntaxError(message);return err.lineNumber=line,err.columnNumber=column,err}const JSON5={parse:function(text,reviver){source=String(text),parseState="start",stack=[],pos=0,line=1,column=0,token=void 0,key=void 0,root=void 0;do{token=lex(),parseStates[parseState]();}while("eof"!==token.type);return "function"==typeof reviver?internalize({"":root},"",reviver):root},stringify:function(value,replacer,space){const stack=[];let propertyList,replacerFunc,quote,indent="",gap="";if(null==replacer||"object"!=typeof replacer||Array.isArray(replacer)||(space=replacer.space,quote=replacer.quote,replacer=replacer.replacer),"function"==typeof replacer)replacerFunc=replacer;else if(Array.isArray(replacer)){propertyList=[];for(const v of replacer){let item;"string"==typeof v?item=v:("number"==typeof v||v instanceof String||v instanceof Number)&&(item=String(v)),void 0!==item&&propertyList.indexOf(item)<0&&propertyList.push(item);}}return space instanceof Number?space=Number(space):space instanceof String&&(space=String(space)),"number"==typeof space?space>0&&(space=Math.min(10,Math.floor(space)),gap="          ".substr(0,space)):"string"==typeof space&&(gap=space.substr(0,10)),serializeProperty("",{"":value});function serializeProperty(key,holder){let value=holder[key];switch(null!=value&&("function"==typeof value.toJSON5?value=value.toJSON5(key):"function"==typeof value.toJSON&&(value=value.toJSON(key))),replacerFunc&&(value=replacerFunc.call(holder,key,value)),value instanceof Number?value=Number(value):value instanceof String?value=String(value):value instanceof Boolean&&(value=value.valueOf()),value){case null:return "null";case!0:return "true";case!1:return "false"}return "string"==typeof value?quoteString(value):"number"==typeof value?String(value):"object"==typeof value?Array.isArray(value)?function(value){if(stack.indexOf(value)>=0)throw TypeError("Converting circular structure to JSON5");stack.push(value);let stepback=indent;indent+=gap;let final,partial=[];for(let i=0;i<value.length;i++){const propertyString=serializeProperty(String(i),value);partial.push(void 0!==propertyString?propertyString:"null");}if(0===partial.length)final="[]";else if(""===gap){final="["+partial.join(",")+"]";}else {let separator=",\n"+indent,properties=partial.join(separator);final="[\n"+indent+properties+",\n"+stepback+"]";}return stack.pop(),indent=stepback,final}(value):function(value){if(stack.indexOf(value)>=0)throw TypeError("Converting circular structure to JSON5");stack.push(value);let stepback=indent;indent+=gap;let final,keys=propertyList||Object.keys(value),partial=[];for(const key of keys){const propertyString=serializeProperty(key,value);if(void 0!==propertyString){let member=serializeKey(key)+":";""!==gap&&(member+=" "),member+=propertyString,partial.push(member);}}if(0===partial.length)final="{}";else {let properties;if(""===gap)properties=partial.join(","),final="{"+properties+"}";else {let separator=",\n"+indent;properties=partial.join(separator),final="{\n"+indent+properties+",\n"+stepback+"}";}}return stack.pop(),indent=stepback,final}(value):void 0}function quoteString(value){const quotes={"'":.1,'"':.2},replacements={"'":"\\'",'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\v","\0":"\\0","\u2028":"\\u2028","\u2029":"\\u2029"};let product="";for(let i=0;i<value.length;i++){const c=value[i];switch(c){case"'":case'"':quotes[c]++,product+=c;continue;case"\0":if(util.isDigit(value[i+1])){product+="\\x00";continue}}if(replacements[c])product+=replacements[c];else if(c<" "){let hexString=c.charCodeAt(0).toString(16);product+="\\x"+("00"+hexString).substring(hexString.length);}else product+=c;}const quoteChar=quote||Object.keys(quotes).reduce(((a,b)=>quotes[a]<quotes[b]?a:b));return product=product.replace(new RegExp(quoteChar,"g"),replacements[quoteChar]),quoteChar+product+quoteChar}function serializeKey(key){if(0===key.length)return quoteString(key);const firstChar=String.fromCodePoint(key.codePointAt(0));if(!util.isIdStartChar(firstChar))return quoteString(key);for(let i=firstChar.length;i<key.length;i++)if(!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i))))return quoteString(key);return key}}};const __WEBPACK_DEFAULT_EXPORT__=JSON5;},"./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json":module=>{module.exports=JSON.parse('{"builtin":{"Array":false,"ArrayBuffer":false,"Atomics":false,"BigInt":false,"BigInt64Array":false,"BigUint64Array":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"globalThis":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es5":{"Array":false,"Boolean":false,"constructor":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"propertyIsEnumerable":false,"RangeError":false,"ReferenceError":false,"RegExp":false,"String":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false},"es2015":{"Array":false,"ArrayBuffer":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es2017":{"Array":false,"ArrayBuffer":false,"Atomics":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"browser":{"AbortController":false,"AbortSignal":false,"addEventListener":false,"alert":false,"AnalyserNode":false,"Animation":false,"AnimationEffectReadOnly":false,"AnimationEffectTiming":false,"AnimationEffectTimingReadOnly":false,"AnimationEvent":false,"AnimationPlaybackEvent":false,"AnimationTimeline":false,"applicationCache":false,"ApplicationCache":false,"ApplicationCacheErrorEvent":false,"atob":false,"Attr":false,"Audio":false,"AudioBuffer":false,"AudioBufferSourceNode":false,"AudioContext":false,"AudioDestinationNode":false,"AudioListener":false,"AudioNode":false,"AudioParam":false,"AudioProcessingEvent":false,"AudioScheduledSourceNode":false,"AudioWorkletGlobalScope ":false,"AudioWorkletNode":false,"AudioWorkletProcessor":false,"BarProp":false,"BaseAudioContext":false,"BatteryManager":false,"BeforeUnloadEvent":false,"BiquadFilterNode":false,"Blob":false,"BlobEvent":false,"blur":false,"BroadcastChannel":false,"btoa":false,"BudgetService":false,"ByteLengthQueuingStrategy":false,"Cache":false,"caches":false,"CacheStorage":false,"cancelAnimationFrame":false,"cancelIdleCallback":false,"CanvasCaptureMediaStreamTrack":false,"CanvasGradient":false,"CanvasPattern":false,"CanvasRenderingContext2D":false,"ChannelMergerNode":false,"ChannelSplitterNode":false,"CharacterData":false,"clearInterval":false,"clearTimeout":false,"clientInformation":false,"ClipboardEvent":false,"close":false,"closed":false,"CloseEvent":false,"Comment":false,"CompositionEvent":false,"confirm":false,"console":false,"ConstantSourceNode":false,"ConvolverNode":false,"CountQueuingStrategy":false,"createImageBitmap":false,"Credential":false,"CredentialsContainer":false,"crypto":false,"Crypto":false,"CryptoKey":false,"CSS":false,"CSSConditionRule":false,"CSSFontFaceRule":false,"CSSGroupingRule":false,"CSSImportRule":false,"CSSKeyframeRule":false,"CSSKeyframesRule":false,"CSSMediaRule":false,"CSSNamespaceRule":false,"CSSPageRule":false,"CSSRule":false,"CSSRuleList":false,"CSSStyleDeclaration":false,"CSSStyleRule":false,"CSSStyleSheet":false,"CSSSupportsRule":false,"CustomElementRegistry":false,"customElements":false,"CustomEvent":false,"DataTransfer":false,"DataTransferItem":false,"DataTransferItemList":false,"defaultstatus":false,"defaultStatus":false,"DelayNode":false,"DeviceMotionEvent":false,"DeviceOrientationEvent":false,"devicePixelRatio":false,"dispatchEvent":false,"document":false,"Document":false,"DocumentFragment":false,"DocumentType":false,"DOMError":false,"DOMException":false,"DOMImplementation":false,"DOMMatrix":false,"DOMMatrixReadOnly":false,"DOMParser":false,"DOMPoint":false,"DOMPointReadOnly":false,"DOMQuad":false,"DOMRect":false,"DOMRectReadOnly":false,"DOMStringList":false,"DOMStringMap":false,"DOMTokenList":false,"DragEvent":false,"DynamicsCompressorNode":false,"Element":false,"ErrorEvent":false,"event":false,"Event":false,"EventSource":false,"EventTarget":false,"external":false,"fetch":false,"File":false,"FileList":false,"FileReader":false,"find":false,"focus":false,"FocusEvent":false,"FontFace":false,"FontFaceSetLoadEvent":false,"FormData":false,"frameElement":false,"frames":false,"GainNode":false,"Gamepad":false,"GamepadButton":false,"GamepadEvent":false,"getComputedStyle":false,"getSelection":false,"HashChangeEvent":false,"Headers":false,"history":false,"History":false,"HTMLAllCollection":false,"HTMLAnchorElement":false,"HTMLAreaElement":false,"HTMLAudioElement":false,"HTMLBaseElement":false,"HTMLBodyElement":false,"HTMLBRElement":false,"HTMLButtonElement":false,"HTMLCanvasElement":false,"HTMLCollection":false,"HTMLContentElement":false,"HTMLDataElement":false,"HTMLDataListElement":false,"HTMLDetailsElement":false,"HTMLDialogElement":false,"HTMLDirectoryElement":false,"HTMLDivElement":false,"HTMLDListElement":false,"HTMLDocument":false,"HTMLElement":false,"HTMLEmbedElement":false,"HTMLFieldSetElement":false,"HTMLFontElement":false,"HTMLFormControlsCollection":false,"HTMLFormElement":false,"HTMLFrameElement":false,"HTMLFrameSetElement":false,"HTMLHeadElement":false,"HTMLHeadingElement":false,"HTMLHRElement":false,"HTMLHtmlElement":false,"HTMLIFrameElement":false,"HTMLImageElement":false,"HTMLInputElement":false,"HTMLLabelElement":false,"HTMLLegendElement":false,"HTMLLIElement":false,"HTMLLinkElement":false,"HTMLMapElement":false,"HTMLMarqueeElement":false,"HTMLMediaElement":false,"HTMLMenuElement":false,"HTMLMetaElement":false,"HTMLMeterElement":false,"HTMLModElement":false,"HTMLObjectElement":false,"HTMLOListElement":false,"HTMLOptGroupElement":false,"HTMLOptionElement":false,"HTMLOptionsCollection":false,"HTMLOutputElement":false,"HTMLParagraphElement":false,"HTMLParamElement":false,"HTMLPictureElement":false,"HTMLPreElement":false,"HTMLProgressElement":false,"HTMLQuoteElement":false,"HTMLScriptElement":false,"HTMLSelectElement":false,"HTMLShadowElement":false,"HTMLSlotElement":false,"HTMLSourceElement":false,"HTMLSpanElement":false,"HTMLStyleElement":false,"HTMLTableCaptionElement":false,"HTMLTableCellElement":false,"HTMLTableColElement":false,"HTMLTableElement":false,"HTMLTableRowElement":false,"HTMLTableSectionElement":false,"HTMLTemplateElement":false,"HTMLTextAreaElement":false,"HTMLTimeElement":false,"HTMLTitleElement":false,"HTMLTrackElement":false,"HTMLUListElement":false,"HTMLUnknownElement":false,"HTMLVideoElement":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"IdleDeadline":false,"IIRFilterNode":false,"Image":false,"ImageBitmap":false,"ImageBitmapRenderingContext":false,"ImageCapture":false,"ImageData":false,"indexedDB":false,"innerHeight":false,"innerWidth":false,"InputEvent":false,"IntersectionObserver":false,"IntersectionObserverEntry":false,"Intl":false,"isSecureContext":false,"KeyboardEvent":false,"KeyframeEffect":false,"KeyframeEffectReadOnly":false,"length":false,"localStorage":false,"location":true,"Location":false,"locationbar":false,"matchMedia":false,"MediaDeviceInfo":false,"MediaDevices":false,"MediaElementAudioSourceNode":false,"MediaEncryptedEvent":false,"MediaError":false,"MediaKeyMessageEvent":false,"MediaKeySession":false,"MediaKeyStatusMap":false,"MediaKeySystemAccess":false,"MediaList":false,"MediaQueryList":false,"MediaQueryListEvent":false,"MediaRecorder":false,"MediaSettingsRange":false,"MediaSource":false,"MediaStream":false,"MediaStreamAudioDestinationNode":false,"MediaStreamAudioSourceNode":false,"MediaStreamEvent":false,"MediaStreamTrack":false,"MediaStreamTrackEvent":false,"menubar":false,"MessageChannel":false,"MessageEvent":false,"MessagePort":false,"MIDIAccess":false,"MIDIConnectionEvent":false,"MIDIInput":false,"MIDIInputMap":false,"MIDIMessageEvent":false,"MIDIOutput":false,"MIDIOutputMap":false,"MIDIPort":false,"MimeType":false,"MimeTypeArray":false,"MouseEvent":false,"moveBy":false,"moveTo":false,"MutationEvent":false,"MutationObserver":false,"MutationRecord":false,"name":false,"NamedNodeMap":false,"NavigationPreloadManager":false,"navigator":false,"Navigator":false,"NetworkInformation":false,"Node":false,"NodeFilter":false,"NodeIterator":false,"NodeList":false,"Notification":false,"OfflineAudioCompletionEvent":false,"OfflineAudioContext":false,"offscreenBuffering":false,"OffscreenCanvas":true,"onabort":true,"onafterprint":true,"onanimationend":true,"onanimationiteration":true,"onanimationstart":true,"onappinstalled":true,"onauxclick":true,"onbeforeinstallprompt":true,"onbeforeprint":true,"onbeforeunload":true,"onblur":true,"oncancel":true,"oncanplay":true,"oncanplaythrough":true,"onchange":true,"onclick":true,"onclose":true,"oncontextmenu":true,"oncuechange":true,"ondblclick":true,"ondevicemotion":true,"ondeviceorientation":true,"ondeviceorientationabsolute":true,"ondrag":true,"ondragend":true,"ondragenter":true,"ondragleave":true,"ondragover":true,"ondragstart":true,"ondrop":true,"ondurationchange":true,"onemptied":true,"onended":true,"onerror":true,"onfocus":true,"ongotpointercapture":true,"onhashchange":true,"oninput":true,"oninvalid":true,"onkeydown":true,"onkeypress":true,"onkeyup":true,"onlanguagechange":true,"onload":true,"onloadeddata":true,"onloadedmetadata":true,"onloadstart":true,"onlostpointercapture":true,"onmessage":true,"onmessageerror":true,"onmousedown":true,"onmouseenter":true,"onmouseleave":true,"onmousemove":true,"onmouseout":true,"onmouseover":true,"onmouseup":true,"onmousewheel":true,"onoffline":true,"ononline":true,"onpagehide":true,"onpageshow":true,"onpause":true,"onplay":true,"onplaying":true,"onpointercancel":true,"onpointerdown":true,"onpointerenter":true,"onpointerleave":true,"onpointermove":true,"onpointerout":true,"onpointerover":true,"onpointerup":true,"onpopstate":true,"onprogress":true,"onratechange":true,"onrejectionhandled":true,"onreset":true,"onresize":true,"onscroll":true,"onsearch":true,"onseeked":true,"onseeking":true,"onselect":true,"onstalled":true,"onstorage":true,"onsubmit":true,"onsuspend":true,"ontimeupdate":true,"ontoggle":true,"ontransitionend":true,"onunhandledrejection":true,"onunload":true,"onvolumechange":true,"onwaiting":true,"onwheel":true,"open":false,"openDatabase":false,"opener":false,"Option":false,"origin":false,"OscillatorNode":false,"outerHeight":false,"outerWidth":false,"PageTransitionEvent":false,"pageXOffset":false,"pageYOffset":false,"PannerNode":false,"parent":false,"Path2D":false,"PaymentAddress":false,"PaymentRequest":false,"PaymentRequestUpdateEvent":false,"PaymentResponse":false,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceLongTaskTiming":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceNavigationTiming":false,"PerformanceObserver":false,"PerformanceObserverEntryList":false,"PerformancePaintTiming":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"PeriodicWave":false,"Permissions":false,"PermissionStatus":false,"personalbar":false,"PhotoCapabilities":false,"Plugin":false,"PluginArray":false,"PointerEvent":false,"PopStateEvent":false,"postMessage":false,"Presentation":false,"PresentationAvailability":false,"PresentationConnection":false,"PresentationConnectionAvailableEvent":false,"PresentationConnectionCloseEvent":false,"PresentationConnectionList":false,"PresentationReceiver":false,"PresentationRequest":false,"print":false,"ProcessingInstruction":false,"ProgressEvent":false,"PromiseRejectionEvent":false,"prompt":false,"PushManager":false,"PushSubscription":false,"PushSubscriptionOptions":false,"queueMicrotask":false,"RadioNodeList":false,"Range":false,"ReadableStream":false,"registerProcessor":false,"RemotePlayback":false,"removeEventListener":false,"Request":false,"requestAnimationFrame":false,"requestIdleCallback":false,"resizeBy":false,"ResizeObserver":false,"ResizeObserverEntry":false,"resizeTo":false,"Response":false,"RTCCertificate":false,"RTCDataChannel":false,"RTCDataChannelEvent":false,"RTCDtlsTransport":false,"RTCIceCandidate":false,"RTCIceGatherer":false,"RTCIceTransport":false,"RTCPeerConnection":false,"RTCPeerConnectionIceEvent":false,"RTCRtpContributingSource":false,"RTCRtpReceiver":false,"RTCRtpSender":false,"RTCSctpTransport":false,"RTCSessionDescription":false,"RTCStatsReport":false,"RTCTrackEvent":false,"screen":false,"Screen":false,"screenLeft":false,"ScreenOrientation":false,"screenTop":false,"screenX":false,"screenY":false,"ScriptProcessorNode":false,"scroll":false,"scrollbars":false,"scrollBy":false,"scrollTo":false,"scrollX":false,"scrollY":false,"SecurityPolicyViolationEvent":false,"Selection":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerRegistration":false,"sessionStorage":false,"setInterval":false,"setTimeout":false,"ShadowRoot":false,"SharedWorker":false,"SourceBuffer":false,"SourceBufferList":false,"speechSynthesis":false,"SpeechSynthesisEvent":false,"SpeechSynthesisUtterance":false,"StaticRange":false,"status":false,"statusbar":false,"StereoPannerNode":false,"stop":false,"Storage":false,"StorageEvent":false,"StorageManager":false,"styleMedia":false,"StyleSheet":false,"StyleSheetList":false,"SubtleCrypto":false,"SVGAElement":false,"SVGAngle":false,"SVGAnimatedAngle":false,"SVGAnimatedBoolean":false,"SVGAnimatedEnumeration":false,"SVGAnimatedInteger":false,"SVGAnimatedLength":false,"SVGAnimatedLengthList":false,"SVGAnimatedNumber":false,"SVGAnimatedNumberList":false,"SVGAnimatedPreserveAspectRatio":false,"SVGAnimatedRect":false,"SVGAnimatedString":false,"SVGAnimatedTransformList":false,"SVGAnimateElement":false,"SVGAnimateMotionElement":false,"SVGAnimateTransformElement":false,"SVGAnimationElement":false,"SVGCircleElement":false,"SVGClipPathElement":false,"SVGComponentTransferFunctionElement":false,"SVGDefsElement":false,"SVGDescElement":false,"SVGDiscardElement":false,"SVGElement":false,"SVGEllipseElement":false,"SVGFEBlendElement":false,"SVGFEColorMatrixElement":false,"SVGFEComponentTransferElement":false,"SVGFECompositeElement":false,"SVGFEConvolveMatrixElement":false,"SVGFEDiffuseLightingElement":false,"SVGFEDisplacementMapElement":false,"SVGFEDistantLightElement":false,"SVGFEDropShadowElement":false,"SVGFEFloodElement":false,"SVGFEFuncAElement":false,"SVGFEFuncBElement":false,"SVGFEFuncGElement":false,"SVGFEFuncRElement":false,"SVGFEGaussianBlurElement":false,"SVGFEImageElement":false,"SVGFEMergeElement":false,"SVGFEMergeNodeElement":false,"SVGFEMorphologyElement":false,"SVGFEOffsetElement":false,"SVGFEPointLightElement":false,"SVGFESpecularLightingElement":false,"SVGFESpotLightElement":false,"SVGFETileElement":false,"SVGFETurbulenceElement":false,"SVGFilterElement":false,"SVGForeignObjectElement":false,"SVGGElement":false,"SVGGeometryElement":false,"SVGGradientElement":false,"SVGGraphicsElement":false,"SVGImageElement":false,"SVGLength":false,"SVGLengthList":false,"SVGLinearGradientElement":false,"SVGLineElement":false,"SVGMarkerElement":false,"SVGMaskElement":false,"SVGMatrix":false,"SVGMetadataElement":false,"SVGMPathElement":false,"SVGNumber":false,"SVGNumberList":false,"SVGPathElement":false,"SVGPatternElement":false,"SVGPoint":false,"SVGPointList":false,"SVGPolygonElement":false,"SVGPolylineElement":false,"SVGPreserveAspectRatio":false,"SVGRadialGradientElement":false,"SVGRect":false,"SVGRectElement":false,"SVGScriptElement":false,"SVGSetElement":false,"SVGStopElement":false,"SVGStringList":false,"SVGStyleElement":false,"SVGSVGElement":false,"SVGSwitchElement":false,"SVGSymbolElement":false,"SVGTextContentElement":false,"SVGTextElement":false,"SVGTextPathElement":false,"SVGTextPositioningElement":false,"SVGTitleElement":false,"SVGTransform":false,"SVGTransformList":false,"SVGTSpanElement":false,"SVGUnitTypes":false,"SVGUseElement":false,"SVGViewElement":false,"TaskAttributionTiming":false,"Text":false,"TextDecoder":false,"TextEncoder":false,"TextEvent":false,"TextMetrics":false,"TextTrack":false,"TextTrackCue":false,"TextTrackCueList":false,"TextTrackList":false,"TimeRanges":false,"toolbar":false,"top":false,"Touch":false,"TouchEvent":false,"TouchList":false,"TrackEvent":false,"TransitionEvent":false,"TreeWalker":false,"UIEvent":false,"URL":false,"URLSearchParams":false,"ValidityState":false,"visualViewport":false,"VisualViewport":false,"VTTCue":false,"WaveShaperNode":false,"WebAssembly":false,"WebGL2RenderingContext":false,"WebGLActiveInfo":false,"WebGLBuffer":false,"WebGLContextEvent":false,"WebGLFramebuffer":false,"WebGLProgram":false,"WebGLQuery":false,"WebGLRenderbuffer":false,"WebGLRenderingContext":false,"WebGLSampler":false,"WebGLShader":false,"WebGLShaderPrecisionFormat":false,"WebGLSync":false,"WebGLTexture":false,"WebGLTransformFeedback":false,"WebGLUniformLocation":false,"WebGLVertexArrayObject":false,"WebSocket":false,"WheelEvent":false,"window":false,"Window":false,"Worker":false,"WritableStream":false,"XMLDocument":false,"XMLHttpRequest":false,"XMLHttpRequestEventTarget":false,"XMLHttpRequestUpload":false,"XMLSerializer":false,"XPathEvaluator":false,"XPathExpression":false,"XPathResult":false,"XSLTProcessor":false},"worker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"clearInterval":false,"clearTimeout":false,"close":true,"console":false,"fetch":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":true,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onlanguagechange":true,"onmessage":true,"onoffline":true,"ononline":true,"onrejectionhandled":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"removeEventListener":false,"Request":false,"Response":false,"self":true,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"node":{"__dirname":false,"__filename":false,"Buffer":false,"clearImmediate":false,"clearInterval":false,"clearTimeout":false,"console":false,"exports":true,"global":false,"Intl":false,"module":false,"process":false,"queueMicrotask":false,"require":false,"setImmediate":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false},"commonjs":{"exports":true,"global":false,"module":false,"require":false},"amd":{"define":false,"require":false},"mocha":{"after":false,"afterEach":false,"before":false,"beforeEach":false,"context":false,"describe":false,"it":false,"mocha":false,"run":false,"setup":false,"specify":false,"suite":false,"suiteSetup":false,"suiteTeardown":false,"teardown":false,"test":false,"xcontext":false,"xdescribe":false,"xit":false,"xspecify":false},"jasmine":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fail":false,"fdescribe":false,"fit":false,"it":false,"jasmine":false,"pending":false,"runs":false,"spyOn":false,"spyOnProperty":false,"waits":false,"waitsFor":false,"xdescribe":false,"xit":false},"jest":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fdescribe":false,"fit":false,"it":false,"jest":false,"pit":false,"require":false,"test":false,"xdescribe":false,"xit":false,"xtest":false},"qunit":{"asyncTest":false,"deepEqual":false,"equal":false,"expect":false,"module":false,"notDeepEqual":false,"notEqual":false,"notOk":false,"notPropEqual":false,"notStrictEqual":false,"ok":false,"propEqual":false,"QUnit":false,"raises":false,"start":false,"stop":false,"strictEqual":false,"test":false,"throws":false},"phantomjs":{"console":true,"exports":true,"phantom":true,"require":true,"WebPage":true},"couch":{"emit":false,"exports":false,"getRow":false,"log":false,"module":false,"provides":false,"require":false,"respond":false,"send":false,"start":false,"sum":false},"rhino":{"defineClass":false,"deserialize":false,"gc":false,"help":false,"importClass":false,"importPackage":false,"java":false,"load":false,"loadClass":false,"Packages":false,"print":false,"quit":false,"readFile":false,"readUrl":false,"runCommand":false,"seal":false,"serialize":false,"spawn":false,"sync":false,"toint32":false,"version":false},"nashorn":{"__DIR__":false,"__FILE__":false,"__LINE__":false,"com":false,"edu":false,"exit":false,"java":false,"Java":false,"javafx":false,"JavaImporter":false,"javax":false,"JSAdapter":false,"load":false,"loadWithNewGlobal":false,"org":false,"Packages":false,"print":false,"quit":false},"wsh":{"ActiveXObject":true,"Enumerator":true,"GetObject":true,"ScriptEngine":true,"ScriptEngineBuildVersion":true,"ScriptEngineMajorVersion":true,"ScriptEngineMinorVersion":true,"VBArray":true,"WScript":true,"WSH":true,"XDomainRequest":true},"jquery":{"$":false,"jQuery":false},"yui":{"YAHOO":false,"YAHOO_config":false,"YUI":false,"YUI_config":false},"shelljs":{"cat":false,"cd":false,"chmod":false,"config":false,"cp":false,"dirs":false,"echo":false,"env":false,"error":false,"exec":false,"exit":false,"find":false,"grep":false,"ln":false,"ls":false,"mkdir":false,"mv":false,"popd":false,"pushd":false,"pwd":false,"rm":false,"sed":false,"set":false,"target":false,"tempdir":false,"test":false,"touch":false,"which":false},"prototypejs":{"$":false,"$$":false,"$A":false,"$break":false,"$continue":false,"$F":false,"$H":false,"$R":false,"$w":false,"Abstract":false,"Ajax":false,"Autocompleter":false,"Builder":false,"Class":false,"Control":false,"Draggable":false,"Draggables":false,"Droppables":false,"Effect":false,"Element":false,"Enumerable":false,"Event":false,"Field":false,"Form":false,"Hash":false,"Insertion":false,"ObjectRange":false,"PeriodicalExecuter":false,"Position":false,"Prototype":false,"Scriptaculous":false,"Selector":false,"Sortable":false,"SortableObserver":false,"Sound":false,"Template":false,"Toggle":false,"Try":false},"meteor":{"_":false,"$":false,"Accounts":false,"AccountsClient":false,"AccountsCommon":false,"AccountsServer":false,"App":false,"Assets":false,"Blaze":false,"check":false,"Cordova":false,"DDP":false,"DDPRateLimiter":false,"DDPServer":false,"Deps":false,"EJSON":false,"Email":false,"HTTP":false,"Log":false,"Match":false,"Meteor":false,"Mongo":false,"MongoInternals":false,"Npm":false,"Package":false,"Plugin":false,"process":false,"Random":false,"ReactiveDict":false,"ReactiveVar":false,"Router":false,"ServiceConfiguration":false,"Session":false,"share":false,"Spacebars":false,"Template":false,"Tinytest":false,"Tracker":false,"UI":false,"Utils":false,"WebApp":false,"WebAppInternals":false},"mongo":{"_isWindows":false,"_rand":false,"BulkWriteResult":false,"cat":false,"cd":false,"connect":false,"db":false,"getHostName":false,"getMemInfo":false,"hostname":false,"ISODate":false,"listFiles":false,"load":false,"ls":false,"md5sumFile":false,"mkdir":false,"Mongo":false,"NumberInt":false,"NumberLong":false,"ObjectId":false,"PlanCache":false,"print":false,"printjson":false,"pwd":false,"quit":false,"removeFile":false,"rs":false,"sh":false,"UUID":false,"version":false,"WriteResult":false},"applescript":{"$":false,"Application":false,"Automation":false,"console":false,"delay":false,"Library":false,"ObjC":false,"ObjectSpecifier":false,"Path":false,"Progress":false,"Ref":false},"serviceworker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"CacheStorage":false,"clearInterval":false,"clearTimeout":false,"Client":false,"clients":false,"Clients":false,"close":true,"console":false,"ExtendableEvent":false,"ExtendableMessageEvent":false,"fetch":false,"FetchEvent":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":false,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onfetch":true,"oninstall":true,"onlanguagechange":true,"onmessage":true,"onmessageerror":true,"onnotificationclick":true,"onnotificationclose":true,"onoffline":true,"ononline":true,"onpush":true,"onpushsubscriptionchange":true,"onrejectionhandled":true,"onsync":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"registration":false,"removeEventListener":false,"Request":false,"Response":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerGlobalScope":false,"ServiceWorkerMessageEvent":false,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"skipWaiting":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"WindowClient":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"atomtest":{"advanceClock":false,"fakeClearInterval":false,"fakeClearTimeout":false,"fakeSetInterval":false,"fakeSetTimeout":false,"resetTimeouts":false,"waitsForPromise":false},"embertest":{"andThen":false,"click":false,"currentPath":false,"currentRouteName":false,"currentURL":false,"fillIn":false,"find":false,"findAll":false,"findWithAssert":false,"keyEvent":false,"pauseTest":false,"resumeTest":false,"triggerEvent":false,"visit":false,"wait":false},"protractor":{"$":false,"$$":false,"browser":false,"by":false,"By":false,"DartObject":false,"element":false,"protractor":false},"shared-node-browser":{"clearInterval":false,"clearTimeout":false,"console":false,"setInterval":false,"setTimeout":false,"URL":false,"URLSearchParams":false},"webextensions":{"browser":false,"chrome":false,"opr":false},"greasemonkey":{"cloneInto":false,"createObjectIn":false,"exportFunction":false,"GM":false,"GM_addStyle":false,"GM_deleteValue":false,"GM_getResourceText":false,"GM_getResourceURL":false,"GM_getValue":false,"GM_info":false,"GM_listValues":false,"GM_log":false,"GM_openInTab":false,"GM_registerMenuCommand":false,"GM_setClipboard":false,"GM_setValue":false,"GM_xmlhttpRequest":false,"unsafeWindow":false},"devtools":{"$":false,"$_":false,"$$":false,"$0":false,"$1":false,"$2":false,"$3":false,"$4":false,"$x":false,"chrome":false,"clear":false,"copy":false,"debug":false,"dir":false,"dirxml":false,"getEventListeners":false,"inspect":false,"keys":false,"monitor":false,"monitorEvents":false,"profile":false,"profileEnd":false,"queryObjects":false,"table":false,"undebug":false,"unmonitor":false,"unmonitorEvents":false,"values":false}}');}},__webpack_module_cache__={};function __webpack_require__(moduleId){var cachedModule=__webpack_module_cache__[moduleId];if(void 0!==cachedModule)return cachedModule.exports;var module=__webpack_module_cache__[moduleId]={exports:{}};return __webpack_modules__[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.exports}__webpack_require__.d=(exports,definition)=>{for(var key in definition)__webpack_require__.o(definition,key)&&!__webpack_require__.o(exports,key)&&Object.defineProperty(exports,key,{enumerable:!0,get:definition[key]});},__webpack_require__.o=(obj,prop)=>Object.prototype.hasOwnProperty.call(obj,prop),__webpack_require__.r=exports=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(exports,"__esModule",{value:!0});};var __webpack_exports__={};(()=>{__webpack_require__.d(__webpack_exports__,{default:()=>transform});var lib=__webpack_require__("./node_modules/.pnpm/@babel+core@7.21.3/node_modules/@babel/core/lib/index.js"),external_url_=__webpack_require__("url"),template_lib=__webpack_require__("./node_modules/.pnpm/@babel+template@7.20.7/node_modules/@babel/template/lib/index.js");function TransformImportMetaPlugin(_ctx,opts){return {name:"transform-import-meta",visitor:{Program(path){const metas=[];if(path.traverse({MemberExpression(memberExpPath){const{node}=memberExpPath;"MetaProperty"===node.object.type&&"import"===node.object.meta.name&&"meta"===node.object.property.name&&"Identifier"===node.property.type&&"url"===node.property.name&&metas.push(memberExpPath);}}),0!==metas.length)for(const meta of metas)meta.replaceWith(template_lib.smart.ast`${opts.filename?JSON.stringify((0, external_url_.pathToFileURL)(opts.filename)):"require('url').pathToFileURL(__filename).toString()"}`);}}}}const replaceEnvForRuntime=(template,property)=>template.expression.ast(`({}).${property}`);function importMetaEnvPlugin({template,types}){return {name:"@import-meta-env/babel",visitor:{Identifier(path){types.isIdentifier(path)&&types.isMemberExpression(path.parentPath)&&types.isMemberExpression(path.parentPath.node)&&types.isMemberExpression(path.parentPath.node.object)&&(path.parentPath.computed||types.isIdentifier(path.parentPath.node.property)&&types.isIdentifier(path.parentPath.node.object.property)&&"env"===path.parentPath.node.object.property.name&&types.isMetaProperty(path.parentPath.node.object.object)&&"meta"===path.parentPath.node.object.object.property.name&&"import"===path.parentPath.node.object.object.meta.name&&path.parentPath.replaceWith(replaceEnvForRuntime(template,path.parentPath.node.property.name)));}}}}function transform(opts){var _a,_b,_c,_d,_e,_f;const _opts=Object.assign(Object.assign({babelrc:!1,configFile:!1,compact:!1,retainLines:"boolean"!=typeof opts.retainLines||opts.retainLines,filename:"",cwd:"/"},opts.babel),{plugins:[[__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.21.2_@babel+core@7.21.3/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js"),{allowTopLevelThis:!0}],[__webpack_require__("./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/index.js"),{noInterop:!0}],[TransformImportMetaPlugin,{filename:opts.filename}],[__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-class-properties/lib/index.js")],[__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-export-namespace-from@7.18.9_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-export-namespace-from/lib/index.js")],[importMetaEnvPlugin]]});opts.ts&&(_opts.plugins.push([__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.21.3_@babel+core@7.21.3/node_modules/@babel/plugin-transform-typescript/lib/index.js"),{allowDeclareFields:!0}]),_opts.plugins.unshift([__webpack_require__("./node_modules/.pnpm/babel-plugin-transform-typescript-metadata@0.3.2/node_modules/babel-plugin-transform-typescript-metadata/lib/plugin.js")],[__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-decorators/lib/index.js"),{legacy:!0}]),_opts.plugins.push(__webpack_require__("./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js")),_opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-import-assertions@7.20.0_@babel+core@7.21.3/node_modules/@babel/plugin-syntax-import-assertions/lib/index.js"))),opts.legacy&&(_opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-nullish-coalescing-operator@7.18.6_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-nullish-coalescing-operator/lib/index.js")),_opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-optional-chaining@7.21.0_@babel+core@7.21.3/node_modules/@babel/plugin-proposal-optional-chaining/lib/index.js"))),opts.babel&&Array.isArray(opts.babel.plugins)&&(null===(_a=_opts.plugins)||void 0===_a||_a.push(...opts.babel.plugins));try{return {code:(null===(_b=(0,lib.transformSync)(opts.source,_opts))||void 0===_b?void 0:_b.code)||""}}catch(error){return {error,code:"exports.__JITI_ERROR__ = "+JSON.stringify({filename:opts.filename,line:(null===(_c=error.loc)||void 0===_c?void 0:_c.line)||0,column:(null===(_d=error.loc)||void 0===_d?void 0:_d.column)||0,code:null===(_e=error.code)||void 0===_e?void 0:_e.replace("BABEL_","").replace("PARSE_ERROR","ParseError"),message:null===(_f=error.message)||void 0===_f?void 0:_f.replace("/: ","").replace(/\(.+\)\s*$/,"")})}}}})(),module.exports=__webpack_exports__.default;})();
} (babel));
	return babelExports;
}

var lib$1;
var hasRequiredLib$1;

function requireLib$1 () {
	if (hasRequiredLib$1) return lib$1;
	hasRequiredLib$1 = 1;
	function onError(err) {
	  throw err; /* ↓ Check stack trace ↓ */
	}

	lib$1 = function (filename, opts) {
	  const jiti = requireJiti();

	  opts = { onError, ...opts };

	  if (!opts.transform) {
	    opts.transform = requireBabel();
	  }

	  return jiti(filename, opts);
	};
	return lib$1;
}

var ContextualKeyword; (function (ContextualKeyword) {
  const NONE = 0; ContextualKeyword[ContextualKeyword["NONE"] = NONE] = "NONE";
  const _abstract = NONE + 1; ContextualKeyword[ContextualKeyword["_abstract"] = _abstract] = "_abstract";
  const _accessor = _abstract + 1; ContextualKeyword[ContextualKeyword["_accessor"] = _accessor] = "_accessor";
  const _as = _accessor + 1; ContextualKeyword[ContextualKeyword["_as"] = _as] = "_as";
  const _assert = _as + 1; ContextualKeyword[ContextualKeyword["_assert"] = _assert] = "_assert";
  const _asserts = _assert + 1; ContextualKeyword[ContextualKeyword["_asserts"] = _asserts] = "_asserts";
  const _async = _asserts + 1; ContextualKeyword[ContextualKeyword["_async"] = _async] = "_async";
  const _await = _async + 1; ContextualKeyword[ContextualKeyword["_await"] = _await] = "_await";
  const _checks = _await + 1; ContextualKeyword[ContextualKeyword["_checks"] = _checks] = "_checks";
  const _constructor = _checks + 1; ContextualKeyword[ContextualKeyword["_constructor"] = _constructor] = "_constructor";
  const _declare = _constructor + 1; ContextualKeyword[ContextualKeyword["_declare"] = _declare] = "_declare";
  const _enum = _declare + 1; ContextualKeyword[ContextualKeyword["_enum"] = _enum] = "_enum";
  const _exports = _enum + 1; ContextualKeyword[ContextualKeyword["_exports"] = _exports] = "_exports";
  const _from = _exports + 1; ContextualKeyword[ContextualKeyword["_from"] = _from] = "_from";
  const _get = _from + 1; ContextualKeyword[ContextualKeyword["_get"] = _get] = "_get";
  const _global = _get + 1; ContextualKeyword[ContextualKeyword["_global"] = _global] = "_global";
  const _implements = _global + 1; ContextualKeyword[ContextualKeyword["_implements"] = _implements] = "_implements";
  const _infer = _implements + 1; ContextualKeyword[ContextualKeyword["_infer"] = _infer] = "_infer";
  const _interface = _infer + 1; ContextualKeyword[ContextualKeyword["_interface"] = _interface] = "_interface";
  const _is = _interface + 1; ContextualKeyword[ContextualKeyword["_is"] = _is] = "_is";
  const _keyof = _is + 1; ContextualKeyword[ContextualKeyword["_keyof"] = _keyof] = "_keyof";
  const _mixins = _keyof + 1; ContextualKeyword[ContextualKeyword["_mixins"] = _mixins] = "_mixins";
  const _module = _mixins + 1; ContextualKeyword[ContextualKeyword["_module"] = _module] = "_module";
  const _namespace = _module + 1; ContextualKeyword[ContextualKeyword["_namespace"] = _namespace] = "_namespace";
  const _of = _namespace + 1; ContextualKeyword[ContextualKeyword["_of"] = _of] = "_of";
  const _opaque = _of + 1; ContextualKeyword[ContextualKeyword["_opaque"] = _opaque] = "_opaque";
  const _out = _opaque + 1; ContextualKeyword[ContextualKeyword["_out"] = _out] = "_out";
  const _override = _out + 1; ContextualKeyword[ContextualKeyword["_override"] = _override] = "_override";
  const _private = _override + 1; ContextualKeyword[ContextualKeyword["_private"] = _private] = "_private";
  const _protected = _private + 1; ContextualKeyword[ContextualKeyword["_protected"] = _protected] = "_protected";
  const _proto = _protected + 1; ContextualKeyword[ContextualKeyword["_proto"] = _proto] = "_proto";
  const _public = _proto + 1; ContextualKeyword[ContextualKeyword["_public"] = _public] = "_public";
  const _readonly = _public + 1; ContextualKeyword[ContextualKeyword["_readonly"] = _readonly] = "_readonly";
  const _require = _readonly + 1; ContextualKeyword[ContextualKeyword["_require"] = _require] = "_require";
  const _satisfies = _require + 1; ContextualKeyword[ContextualKeyword["_satisfies"] = _satisfies] = "_satisfies";
  const _set = _satisfies + 1; ContextualKeyword[ContextualKeyword["_set"] = _set] = "_set";
  const _static = _set + 1; ContextualKeyword[ContextualKeyword["_static"] = _static] = "_static";
  const _symbol = _static + 1; ContextualKeyword[ContextualKeyword["_symbol"] = _symbol] = "_symbol";
  const _type = _symbol + 1; ContextualKeyword[ContextualKeyword["_type"] = _type] = "_type";
  const _unique = _type + 1; ContextualKeyword[ContextualKeyword["_unique"] = _unique] = "_unique";
  const _using = _unique + 1; ContextualKeyword[ContextualKeyword["_using"] = _using] = "_using";
})(ContextualKeyword || (ContextualKeyword = {}));

// Generated file, do not edit! Run "yarn generate" to re-generate this file.
/* istanbul ignore file */
/**
 * Enum of all token types, with bit fields to signify meaningful properties.
 */
var TokenType; (function (TokenType) {
  // Precedence 0 means not an operator; otherwise it is a positive number up to 12.
  const PRECEDENCE_MASK = 0xf; TokenType[TokenType["PRECEDENCE_MASK"] = PRECEDENCE_MASK] = "PRECEDENCE_MASK";
  const IS_KEYWORD = 1 << 4; TokenType[TokenType["IS_KEYWORD"] = IS_KEYWORD] = "IS_KEYWORD";
  const IS_ASSIGN = 1 << 5; TokenType[TokenType["IS_ASSIGN"] = IS_ASSIGN] = "IS_ASSIGN";
  const IS_RIGHT_ASSOCIATIVE = 1 << 6; TokenType[TokenType["IS_RIGHT_ASSOCIATIVE"] = IS_RIGHT_ASSOCIATIVE] = "IS_RIGHT_ASSOCIATIVE";
  const IS_PREFIX = 1 << 7; TokenType[TokenType["IS_PREFIX"] = IS_PREFIX] = "IS_PREFIX";
  const IS_POSTFIX = 1 << 8; TokenType[TokenType["IS_POSTFIX"] = IS_POSTFIX] = "IS_POSTFIX";
  const IS_EXPRESSION_START = 1 << 9; TokenType[TokenType["IS_EXPRESSION_START"] = IS_EXPRESSION_START] = "IS_EXPRESSION_START";

  const num = 512; TokenType[TokenType["num"] = num] = "num"; // num startsExpr
  const bigint = 1536; TokenType[TokenType["bigint"] = bigint] = "bigint"; // bigint startsExpr
  const decimal = 2560; TokenType[TokenType["decimal"] = decimal] = "decimal"; // decimal startsExpr
  const regexp = 3584; TokenType[TokenType["regexp"] = regexp] = "regexp"; // regexp startsExpr
  const string = 4608; TokenType[TokenType["string"] = string] = "string"; // string startsExpr
  const name = 5632; TokenType[TokenType["name"] = name] = "name"; // name startsExpr
  const eof = 6144; TokenType[TokenType["eof"] = eof] = "eof"; // eof
  const bracketL = 7680; TokenType[TokenType["bracketL"] = bracketL] = "bracketL"; // [ startsExpr
  const bracketR = 8192; TokenType[TokenType["bracketR"] = bracketR] = "bracketR"; // ]
  const braceL = 9728; TokenType[TokenType["braceL"] = braceL] = "braceL"; // { startsExpr
  const braceBarL = 10752; TokenType[TokenType["braceBarL"] = braceBarL] = "braceBarL"; // {| startsExpr
  const braceR = 11264; TokenType[TokenType["braceR"] = braceR] = "braceR"; // }
  const braceBarR = 12288; TokenType[TokenType["braceBarR"] = braceBarR] = "braceBarR"; // |}
  const parenL = 13824; TokenType[TokenType["parenL"] = parenL] = "parenL"; // ( startsExpr
  const parenR = 14336; TokenType[TokenType["parenR"] = parenR] = "parenR"; // )
  const comma = 15360; TokenType[TokenType["comma"] = comma] = "comma"; // ,
  const semi = 16384; TokenType[TokenType["semi"] = semi] = "semi"; // ;
  const colon = 17408; TokenType[TokenType["colon"] = colon] = "colon"; // :
  const doubleColon = 18432; TokenType[TokenType["doubleColon"] = doubleColon] = "doubleColon"; // ::
  const dot = 19456; TokenType[TokenType["dot"] = dot] = "dot"; // .
  const question = 20480; TokenType[TokenType["question"] = question] = "question"; // ?
  const questionDot = 21504; TokenType[TokenType["questionDot"] = questionDot] = "questionDot"; // ?.
  const arrow = 22528; TokenType[TokenType["arrow"] = arrow] = "arrow"; // =>
  const template = 23552; TokenType[TokenType["template"] = template] = "template"; // template
  const ellipsis = 24576; TokenType[TokenType["ellipsis"] = ellipsis] = "ellipsis"; // ...
  const backQuote = 25600; TokenType[TokenType["backQuote"] = backQuote] = "backQuote"; // `
  const dollarBraceL = 27136; TokenType[TokenType["dollarBraceL"] = dollarBraceL] = "dollarBraceL"; // ${ startsExpr
  const at = 27648; TokenType[TokenType["at"] = at] = "at"; // @
  const hash = 29184; TokenType[TokenType["hash"] = hash] = "hash"; // # startsExpr
  const eq = 29728; TokenType[TokenType["eq"] = eq] = "eq"; // = isAssign
  const assign = 30752; TokenType[TokenType["assign"] = assign] = "assign"; // _= isAssign
  const preIncDec = 32640; TokenType[TokenType["preIncDec"] = preIncDec] = "preIncDec"; // ++/-- prefix postfix startsExpr
  const postIncDec = 33664; TokenType[TokenType["postIncDec"] = postIncDec] = "postIncDec"; // ++/-- prefix postfix startsExpr
  const bang = 34432; TokenType[TokenType["bang"] = bang] = "bang"; // ! prefix startsExpr
  const tilde = 35456; TokenType[TokenType["tilde"] = tilde] = "tilde"; // ~ prefix startsExpr
  const pipeline = 35841; TokenType[TokenType["pipeline"] = pipeline] = "pipeline"; // |> prec:1
  const nullishCoalescing = 36866; TokenType[TokenType["nullishCoalescing"] = nullishCoalescing] = "nullishCoalescing"; // ?? prec:2
  const logicalOR = 37890; TokenType[TokenType["logicalOR"] = logicalOR] = "logicalOR"; // || prec:2
  const logicalAND = 38915; TokenType[TokenType["logicalAND"] = logicalAND] = "logicalAND"; // && prec:3
  const bitwiseOR = 39940; TokenType[TokenType["bitwiseOR"] = bitwiseOR] = "bitwiseOR"; // | prec:4
  const bitwiseXOR = 40965; TokenType[TokenType["bitwiseXOR"] = bitwiseXOR] = "bitwiseXOR"; // ^ prec:5
  const bitwiseAND = 41990; TokenType[TokenType["bitwiseAND"] = bitwiseAND] = "bitwiseAND"; // & prec:6
  const equality = 43015; TokenType[TokenType["equality"] = equality] = "equality"; // ==/!= prec:7
  const lessThan = 44040; TokenType[TokenType["lessThan"] = lessThan] = "lessThan"; // < prec:8
  const greaterThan = 45064; TokenType[TokenType["greaterThan"] = greaterThan] = "greaterThan"; // > prec:8
  const relationalOrEqual = 46088; TokenType[TokenType["relationalOrEqual"] = relationalOrEqual] = "relationalOrEqual"; // <=/>= prec:8
  const bitShiftL = 47113; TokenType[TokenType["bitShiftL"] = bitShiftL] = "bitShiftL"; // << prec:9
  const bitShiftR = 48137; TokenType[TokenType["bitShiftR"] = bitShiftR] = "bitShiftR"; // >>/>>> prec:9
  const plus = 49802; TokenType[TokenType["plus"] = plus] = "plus"; // + prec:10 prefix startsExpr
  const minus = 50826; TokenType[TokenType["minus"] = minus] = "minus"; // - prec:10 prefix startsExpr
  const modulo = 51723; TokenType[TokenType["modulo"] = modulo] = "modulo"; // % prec:11 startsExpr
  const star = 52235; TokenType[TokenType["star"] = star] = "star"; // * prec:11
  const slash = 53259; TokenType[TokenType["slash"] = slash] = "slash"; // / prec:11
  const exponent = 54348; TokenType[TokenType["exponent"] = exponent] = "exponent"; // ** prec:12 rightAssociative
  const jsxName = 55296; TokenType[TokenType["jsxName"] = jsxName] = "jsxName"; // jsxName
  const jsxText = 56320; TokenType[TokenType["jsxText"] = jsxText] = "jsxText"; // jsxText
  const jsxEmptyText = 57344; TokenType[TokenType["jsxEmptyText"] = jsxEmptyText] = "jsxEmptyText"; // jsxEmptyText
  const jsxTagStart = 58880; TokenType[TokenType["jsxTagStart"] = jsxTagStart] = "jsxTagStart"; // jsxTagStart startsExpr
  const jsxTagEnd = 59392; TokenType[TokenType["jsxTagEnd"] = jsxTagEnd] = "jsxTagEnd"; // jsxTagEnd
  const typeParameterStart = 60928; TokenType[TokenType["typeParameterStart"] = typeParameterStart] = "typeParameterStart"; // typeParameterStart startsExpr
  const nonNullAssertion = 61440; TokenType[TokenType["nonNullAssertion"] = nonNullAssertion] = "nonNullAssertion"; // nonNullAssertion
  const _break = 62480; TokenType[TokenType["_break"] = _break] = "_break"; // break keyword
  const _case = 63504; TokenType[TokenType["_case"] = _case] = "_case"; // case keyword
  const _catch = 64528; TokenType[TokenType["_catch"] = _catch] = "_catch"; // catch keyword
  const _continue = 65552; TokenType[TokenType["_continue"] = _continue] = "_continue"; // continue keyword
  const _debugger = 66576; TokenType[TokenType["_debugger"] = _debugger] = "_debugger"; // debugger keyword
  const _default = 67600; TokenType[TokenType["_default"] = _default] = "_default"; // default keyword
  const _do = 68624; TokenType[TokenType["_do"] = _do] = "_do"; // do keyword
  const _else = 69648; TokenType[TokenType["_else"] = _else] = "_else"; // else keyword
  const _finally = 70672; TokenType[TokenType["_finally"] = _finally] = "_finally"; // finally keyword
  const _for = 71696; TokenType[TokenType["_for"] = _for] = "_for"; // for keyword
  const _function = 73232; TokenType[TokenType["_function"] = _function] = "_function"; // function keyword startsExpr
  const _if = 73744; TokenType[TokenType["_if"] = _if] = "_if"; // if keyword
  const _return = 74768; TokenType[TokenType["_return"] = _return] = "_return"; // return keyword
  const _switch = 75792; TokenType[TokenType["_switch"] = _switch] = "_switch"; // switch keyword
  const _throw = 77456; TokenType[TokenType["_throw"] = _throw] = "_throw"; // throw keyword prefix startsExpr
  const _try = 77840; TokenType[TokenType["_try"] = _try] = "_try"; // try keyword
  const _var = 78864; TokenType[TokenType["_var"] = _var] = "_var"; // var keyword
  const _let = 79888; TokenType[TokenType["_let"] = _let] = "_let"; // let keyword
  const _const = 80912; TokenType[TokenType["_const"] = _const] = "_const"; // const keyword
  const _while = 81936; TokenType[TokenType["_while"] = _while] = "_while"; // while keyword
  const _with = 82960; TokenType[TokenType["_with"] = _with] = "_with"; // with keyword
  const _new = 84496; TokenType[TokenType["_new"] = _new] = "_new"; // new keyword startsExpr
  const _this = 85520; TokenType[TokenType["_this"] = _this] = "_this"; // this keyword startsExpr
  const _super = 86544; TokenType[TokenType["_super"] = _super] = "_super"; // super keyword startsExpr
  const _class = 87568; TokenType[TokenType["_class"] = _class] = "_class"; // class keyword startsExpr
  const _extends = 88080; TokenType[TokenType["_extends"] = _extends] = "_extends"; // extends keyword
  const _export = 89104; TokenType[TokenType["_export"] = _export] = "_export"; // export keyword
  const _import = 90640; TokenType[TokenType["_import"] = _import] = "_import"; // import keyword startsExpr
  const _yield = 91664; TokenType[TokenType["_yield"] = _yield] = "_yield"; // yield keyword startsExpr
  const _null = 92688; TokenType[TokenType["_null"] = _null] = "_null"; // null keyword startsExpr
  const _true = 93712; TokenType[TokenType["_true"] = _true] = "_true"; // true keyword startsExpr
  const _false = 94736; TokenType[TokenType["_false"] = _false] = "_false"; // false keyword startsExpr
  const _in = 95256; TokenType[TokenType["_in"] = _in] = "_in"; // in prec:8 keyword
  const _instanceof = 96280; TokenType[TokenType["_instanceof"] = _instanceof] = "_instanceof"; // instanceof prec:8 keyword
  const _typeof = 97936; TokenType[TokenType["_typeof"] = _typeof] = "_typeof"; // typeof keyword prefix startsExpr
  const _void = 98960; TokenType[TokenType["_void"] = _void] = "_void"; // void keyword prefix startsExpr
  const _delete = 99984; TokenType[TokenType["_delete"] = _delete] = "_delete"; // delete keyword prefix startsExpr
  const _async = 100880; TokenType[TokenType["_async"] = _async] = "_async"; // async keyword startsExpr
  const _get = 101904; TokenType[TokenType["_get"] = _get] = "_get"; // get keyword startsExpr
  const _set = 102928; TokenType[TokenType["_set"] = _set] = "_set"; // set keyword startsExpr
  const _declare = 103952; TokenType[TokenType["_declare"] = _declare] = "_declare"; // declare keyword startsExpr
  const _readonly = 104976; TokenType[TokenType["_readonly"] = _readonly] = "_readonly"; // readonly keyword startsExpr
  const _abstract = 106000; TokenType[TokenType["_abstract"] = _abstract] = "_abstract"; // abstract keyword startsExpr
  const _static = 107024; TokenType[TokenType["_static"] = _static] = "_static"; // static keyword startsExpr
  const _public = 107536; TokenType[TokenType["_public"] = _public] = "_public"; // public keyword
  const _private = 108560; TokenType[TokenType["_private"] = _private] = "_private"; // private keyword
  const _protected = 109584; TokenType[TokenType["_protected"] = _protected] = "_protected"; // protected keyword
  const _override = 110608; TokenType[TokenType["_override"] = _override] = "_override"; // override keyword
  const _as = 112144; TokenType[TokenType["_as"] = _as] = "_as"; // as keyword startsExpr
  const _enum = 113168; TokenType[TokenType["_enum"] = _enum] = "_enum"; // enum keyword startsExpr
  const _type = 114192; TokenType[TokenType["_type"] = _type] = "_type"; // type keyword startsExpr
  const _implements = 115216; TokenType[TokenType["_implements"] = _implements] = "_implements"; // implements keyword startsExpr
})(TokenType || (TokenType = {}));
function formatTokenType(tokenType) {
  switch (tokenType) {
    case TokenType.num:
      return "num";
    case TokenType.bigint:
      return "bigint";
    case TokenType.decimal:
      return "decimal";
    case TokenType.regexp:
      return "regexp";
    case TokenType.string:
      return "string";
    case TokenType.name:
      return "name";
    case TokenType.eof:
      return "eof";
    case TokenType.bracketL:
      return "[";
    case TokenType.bracketR:
      return "]";
    case TokenType.braceL:
      return "{";
    case TokenType.braceBarL:
      return "{|";
    case TokenType.braceR:
      return "}";
    case TokenType.braceBarR:
      return "|}";
    case TokenType.parenL:
      return "(";
    case TokenType.parenR:
      return ")";
    case TokenType.comma:
      return ",";
    case TokenType.semi:
      return ";";
    case TokenType.colon:
      return ":";
    case TokenType.doubleColon:
      return "::";
    case TokenType.dot:
      return ".";
    case TokenType.question:
      return "?";
    case TokenType.questionDot:
      return "?.";
    case TokenType.arrow:
      return "=>";
    case TokenType.template:
      return "template";
    case TokenType.ellipsis:
      return "...";
    case TokenType.backQuote:
      return "`";
    case TokenType.dollarBraceL:
      return "${";
    case TokenType.at:
      return "@";
    case TokenType.hash:
      return "#";
    case TokenType.eq:
      return "=";
    case TokenType.assign:
      return "_=";
    case TokenType.preIncDec:
      return "++/--";
    case TokenType.postIncDec:
      return "++/--";
    case TokenType.bang:
      return "!";
    case TokenType.tilde:
      return "~";
    case TokenType.pipeline:
      return "|>";
    case TokenType.nullishCoalescing:
      return "??";
    case TokenType.logicalOR:
      return "||";
    case TokenType.logicalAND:
      return "&&";
    case TokenType.bitwiseOR:
      return "|";
    case TokenType.bitwiseXOR:
      return "^";
    case TokenType.bitwiseAND:
      return "&";
    case TokenType.equality:
      return "==/!=";
    case TokenType.lessThan:
      return "<";
    case TokenType.greaterThan:
      return ">";
    case TokenType.relationalOrEqual:
      return "<=/>=";
    case TokenType.bitShiftL:
      return "<<";
    case TokenType.bitShiftR:
      return ">>/>>>";
    case TokenType.plus:
      return "+";
    case TokenType.minus:
      return "-";
    case TokenType.modulo:
      return "%";
    case TokenType.star:
      return "*";
    case TokenType.slash:
      return "/";
    case TokenType.exponent:
      return "**";
    case TokenType.jsxName:
      return "jsxName";
    case TokenType.jsxText:
      return "jsxText";
    case TokenType.jsxEmptyText:
      return "jsxEmptyText";
    case TokenType.jsxTagStart:
      return "jsxTagStart";
    case TokenType.jsxTagEnd:
      return "jsxTagEnd";
    case TokenType.typeParameterStart:
      return "typeParameterStart";
    case TokenType.nonNullAssertion:
      return "nonNullAssertion";
    case TokenType._break:
      return "break";
    case TokenType._case:
      return "case";
    case TokenType._catch:
      return "catch";
    case TokenType._continue:
      return "continue";
    case TokenType._debugger:
      return "debugger";
    case TokenType._default:
      return "default";
    case TokenType._do:
      return "do";
    case TokenType._else:
      return "else";
    case TokenType._finally:
      return "finally";
    case TokenType._for:
      return "for";
    case TokenType._function:
      return "function";
    case TokenType._if:
      return "if";
    case TokenType._return:
      return "return";
    case TokenType._switch:
      return "switch";
    case TokenType._throw:
      return "throw";
    case TokenType._try:
      return "try";
    case TokenType._var:
      return "var";
    case TokenType._let:
      return "let";
    case TokenType._const:
      return "const";
    case TokenType._while:
      return "while";
    case TokenType._with:
      return "with";
    case TokenType._new:
      return "new";
    case TokenType._this:
      return "this";
    case TokenType._super:
      return "super";
    case TokenType._class:
      return "class";
    case TokenType._extends:
      return "extends";
    case TokenType._export:
      return "export";
    case TokenType._import:
      return "import";
    case TokenType._yield:
      return "yield";
    case TokenType._null:
      return "null";
    case TokenType._true:
      return "true";
    case TokenType._false:
      return "false";
    case TokenType._in:
      return "in";
    case TokenType._instanceof:
      return "instanceof";
    case TokenType._typeof:
      return "typeof";
    case TokenType._void:
      return "void";
    case TokenType._delete:
      return "delete";
    case TokenType._async:
      return "async";
    case TokenType._get:
      return "get";
    case TokenType._set:
      return "set";
    case TokenType._declare:
      return "declare";
    case TokenType._readonly:
      return "readonly";
    case TokenType._abstract:
      return "abstract";
    case TokenType._static:
      return "static";
    case TokenType._public:
      return "public";
    case TokenType._private:
      return "private";
    case TokenType._protected:
      return "protected";
    case TokenType._override:
      return "override";
    case TokenType._as:
      return "as";
    case TokenType._enum:
      return "enum";
    case TokenType._type:
      return "type";
    case TokenType._implements:
      return "implements";
    default:
      return "";
  }
}

class Scope {
  
  
  

  constructor(startTokenIndex, endTokenIndex, isFunctionScope) {
    this.startTokenIndex = startTokenIndex;
    this.endTokenIndex = endTokenIndex;
    this.isFunctionScope = isFunctionScope;
  }
}

class StateSnapshot {
  constructor(
     potentialArrowAt,
     noAnonFunctionType,
     inDisallowConditionalTypesContext,
     tokensLength,
     scopesLength,
     pos,
     type,
     contextualKeyword,
     start,
     end,
     isType,
     scopeDepth,
     error,
  ) {this.potentialArrowAt = potentialArrowAt;this.noAnonFunctionType = noAnonFunctionType;this.inDisallowConditionalTypesContext = inDisallowConditionalTypesContext;this.tokensLength = tokensLength;this.scopesLength = scopesLength;this.pos = pos;this.type = type;this.contextualKeyword = contextualKeyword;this.start = start;this.end = end;this.isType = isType;this.scopeDepth = scopeDepth;this.error = error;}
}

class State {constructor() { State.prototype.__init.call(this);State.prototype.__init2.call(this);State.prototype.__init3.call(this);State.prototype.__init4.call(this);State.prototype.__init5.call(this);State.prototype.__init6.call(this);State.prototype.__init7.call(this);State.prototype.__init8.call(this);State.prototype.__init9.call(this);State.prototype.__init10.call(this);State.prototype.__init11.call(this);State.prototype.__init12.call(this);State.prototype.__init13.call(this); }
  // Used to signify the start of a potential arrow function
  __init() {this.potentialArrowAt = -1;}

  // Used by Flow to handle an edge case involving function type parsing.
  __init2() {this.noAnonFunctionType = false;}

  // Used by TypeScript to handle ambiguities when parsing conditional types.
  __init3() {this.inDisallowConditionalTypesContext = false;}

  // Token store.
  __init4() {this.tokens = [];}

  // Array of all observed scopes, ordered by their ending position.
  __init5() {this.scopes = [];}

  // The current position of the tokenizer in the input.
  __init6() {this.pos = 0;}

  // Information about the current token.
  __init7() {this.type = TokenType.eof;}
  __init8() {this.contextualKeyword = ContextualKeyword.NONE;}
  __init9() {this.start = 0;}
  __init10() {this.end = 0;}

  __init11() {this.isType = false;}
  __init12() {this.scopeDepth = 0;}

  /**
   * If the parser is in an error state, then the token is always tt.eof and all functions can
   * keep executing but should be written so they don't get into an infinite loop in this situation.
   *
   * This approach, combined with the ability to snapshot and restore state, allows us to implement
   * backtracking without exceptions and without needing to explicitly propagate error states
   * everywhere.
   */
  __init13() {this.error = null;}

  snapshot() {
    return new StateSnapshot(
      this.potentialArrowAt,
      this.noAnonFunctionType,
      this.inDisallowConditionalTypesContext,
      this.tokens.length,
      this.scopes.length,
      this.pos,
      this.type,
      this.contextualKeyword,
      this.start,
      this.end,
      this.isType,
      this.scopeDepth,
      this.error,
    );
  }

  restoreFromSnapshot(snapshot) {
    this.potentialArrowAt = snapshot.potentialArrowAt;
    this.noAnonFunctionType = snapshot.noAnonFunctionType;
    this.inDisallowConditionalTypesContext = snapshot.inDisallowConditionalTypesContext;
    this.tokens.length = snapshot.tokensLength;
    this.scopes.length = snapshot.scopesLength;
    this.pos = snapshot.pos;
    this.type = snapshot.type;
    this.contextualKeyword = snapshot.contextualKeyword;
    this.start = snapshot.start;
    this.end = snapshot.end;
    this.isType = snapshot.isType;
    this.scopeDepth = snapshot.scopeDepth;
    this.error = snapshot.error;
  }
}

var charCodes; (function (charCodes) {
  const backSpace = 8; charCodes[charCodes["backSpace"] = backSpace] = "backSpace";
  const lineFeed = 10; charCodes[charCodes["lineFeed"] = lineFeed] = "lineFeed"; //  '\n'
  const tab = 9; charCodes[charCodes["tab"] = tab] = "tab"; //  '\t'
  const carriageReturn = 13; charCodes[charCodes["carriageReturn"] = carriageReturn] = "carriageReturn"; //  '\r'
  const shiftOut = 14; charCodes[charCodes["shiftOut"] = shiftOut] = "shiftOut";
  const space = 32; charCodes[charCodes["space"] = space] = "space";
  const exclamationMark = 33; charCodes[charCodes["exclamationMark"] = exclamationMark] = "exclamationMark"; //  '!'
  const quotationMark = 34; charCodes[charCodes["quotationMark"] = quotationMark] = "quotationMark"; //  '"'
  const numberSign = 35; charCodes[charCodes["numberSign"] = numberSign] = "numberSign"; //  '#'
  const dollarSign = 36; charCodes[charCodes["dollarSign"] = dollarSign] = "dollarSign"; //  '$'
  const percentSign = 37; charCodes[charCodes["percentSign"] = percentSign] = "percentSign"; //  '%'
  const ampersand = 38; charCodes[charCodes["ampersand"] = ampersand] = "ampersand"; //  '&'
  const apostrophe = 39; charCodes[charCodes["apostrophe"] = apostrophe] = "apostrophe"; //  '''
  const leftParenthesis = 40; charCodes[charCodes["leftParenthesis"] = leftParenthesis] = "leftParenthesis"; //  '('
  const rightParenthesis = 41; charCodes[charCodes["rightParenthesis"] = rightParenthesis] = "rightParenthesis"; //  ')'
  const asterisk = 42; charCodes[charCodes["asterisk"] = asterisk] = "asterisk"; //  '*'
  const plusSign = 43; charCodes[charCodes["plusSign"] = plusSign] = "plusSign"; //  '+'
  const comma = 44; charCodes[charCodes["comma"] = comma] = "comma"; //  ','
  const dash = 45; charCodes[charCodes["dash"] = dash] = "dash"; //  '-'
  const dot = 46; charCodes[charCodes["dot"] = dot] = "dot"; //  '.'
  const slash = 47; charCodes[charCodes["slash"] = slash] = "slash"; //  '/'
  const digit0 = 48; charCodes[charCodes["digit0"] = digit0] = "digit0"; //  '0'
  const digit1 = 49; charCodes[charCodes["digit1"] = digit1] = "digit1"; //  '1'
  const digit2 = 50; charCodes[charCodes["digit2"] = digit2] = "digit2"; //  '2'
  const digit3 = 51; charCodes[charCodes["digit3"] = digit3] = "digit3"; //  '3'
  const digit4 = 52; charCodes[charCodes["digit4"] = digit4] = "digit4"; //  '4'
  const digit5 = 53; charCodes[charCodes["digit5"] = digit5] = "digit5"; //  '5'
  const digit6 = 54; charCodes[charCodes["digit6"] = digit6] = "digit6"; //  '6'
  const digit7 = 55; charCodes[charCodes["digit7"] = digit7] = "digit7"; //  '7'
  const digit8 = 56; charCodes[charCodes["digit8"] = digit8] = "digit8"; //  '8'
  const digit9 = 57; charCodes[charCodes["digit9"] = digit9] = "digit9"; //  '9'
  const colon = 58; charCodes[charCodes["colon"] = colon] = "colon"; //  ':'
  const semicolon = 59; charCodes[charCodes["semicolon"] = semicolon] = "semicolon"; //  ';'
  const lessThan = 60; charCodes[charCodes["lessThan"] = lessThan] = "lessThan"; //  '<'
  const equalsTo = 61; charCodes[charCodes["equalsTo"] = equalsTo] = "equalsTo"; //  '='
  const greaterThan = 62; charCodes[charCodes["greaterThan"] = greaterThan] = "greaterThan"; //  '>'
  const questionMark = 63; charCodes[charCodes["questionMark"] = questionMark] = "questionMark"; //  '?'
  const atSign = 64; charCodes[charCodes["atSign"] = atSign] = "atSign"; //  '@'
  const uppercaseA = 65; charCodes[charCodes["uppercaseA"] = uppercaseA] = "uppercaseA"; //  'A'
  const uppercaseB = 66; charCodes[charCodes["uppercaseB"] = uppercaseB] = "uppercaseB"; //  'B'
  const uppercaseC = 67; charCodes[charCodes["uppercaseC"] = uppercaseC] = "uppercaseC"; //  'C'
  const uppercaseD = 68; charCodes[charCodes["uppercaseD"] = uppercaseD] = "uppercaseD"; //  'D'
  const uppercaseE = 69; charCodes[charCodes["uppercaseE"] = uppercaseE] = "uppercaseE"; //  'E'
  const uppercaseF = 70; charCodes[charCodes["uppercaseF"] = uppercaseF] = "uppercaseF"; //  'F'
  const uppercaseG = 71; charCodes[charCodes["uppercaseG"] = uppercaseG] = "uppercaseG"; //  'G'
  const uppercaseH = 72; charCodes[charCodes["uppercaseH"] = uppercaseH] = "uppercaseH"; //  'H'
  const uppercaseI = 73; charCodes[charCodes["uppercaseI"] = uppercaseI] = "uppercaseI"; //  'I'
  const uppercaseJ = 74; charCodes[charCodes["uppercaseJ"] = uppercaseJ] = "uppercaseJ"; //  'J'
  const uppercaseK = 75; charCodes[charCodes["uppercaseK"] = uppercaseK] = "uppercaseK"; //  'K'
  const uppercaseL = 76; charCodes[charCodes["uppercaseL"] = uppercaseL] = "uppercaseL"; //  'L'
  const uppercaseM = 77; charCodes[charCodes["uppercaseM"] = uppercaseM] = "uppercaseM"; //  'M'
  const uppercaseN = 78; charCodes[charCodes["uppercaseN"] = uppercaseN] = "uppercaseN"; //  'N'
  const uppercaseO = 79; charCodes[charCodes["uppercaseO"] = uppercaseO] = "uppercaseO"; //  'O'
  const uppercaseP = 80; charCodes[charCodes["uppercaseP"] = uppercaseP] = "uppercaseP"; //  'P'
  const uppercaseQ = 81; charCodes[charCodes["uppercaseQ"] = uppercaseQ] = "uppercaseQ"; //  'Q'
  const uppercaseR = 82; charCodes[charCodes["uppercaseR"] = uppercaseR] = "uppercaseR"; //  'R'
  const uppercaseS = 83; charCodes[charCodes["uppercaseS"] = uppercaseS] = "uppercaseS"; //  'S'
  const uppercaseT = 84; charCodes[charCodes["uppercaseT"] = uppercaseT] = "uppercaseT"; //  'T'
  const uppercaseU = 85; charCodes[charCodes["uppercaseU"] = uppercaseU] = "uppercaseU"; //  'U'
  const uppercaseV = 86; charCodes[charCodes["uppercaseV"] = uppercaseV] = "uppercaseV"; //  'V'
  const uppercaseW = 87; charCodes[charCodes["uppercaseW"] = uppercaseW] = "uppercaseW"; //  'W'
  const uppercaseX = 88; charCodes[charCodes["uppercaseX"] = uppercaseX] = "uppercaseX"; //  'X'
  const uppercaseY = 89; charCodes[charCodes["uppercaseY"] = uppercaseY] = "uppercaseY"; //  'Y'
  const uppercaseZ = 90; charCodes[charCodes["uppercaseZ"] = uppercaseZ] = "uppercaseZ"; //  'Z'
  const leftSquareBracket = 91; charCodes[charCodes["leftSquareBracket"] = leftSquareBracket] = "leftSquareBracket"; //  '['
  const backslash = 92; charCodes[charCodes["backslash"] = backslash] = "backslash"; //  '\    '
  const rightSquareBracket = 93; charCodes[charCodes["rightSquareBracket"] = rightSquareBracket] = "rightSquareBracket"; //  ']'
  const caret = 94; charCodes[charCodes["caret"] = caret] = "caret"; //  '^'
  const underscore = 95; charCodes[charCodes["underscore"] = underscore] = "underscore"; //  '_'
  const graveAccent = 96; charCodes[charCodes["graveAccent"] = graveAccent] = "graveAccent"; //  '`'
  const lowercaseA = 97; charCodes[charCodes["lowercaseA"] = lowercaseA] = "lowercaseA"; //  'a'
  const lowercaseB = 98; charCodes[charCodes["lowercaseB"] = lowercaseB] = "lowercaseB"; //  'b'
  const lowercaseC = 99; charCodes[charCodes["lowercaseC"] = lowercaseC] = "lowercaseC"; //  'c'
  const lowercaseD = 100; charCodes[charCodes["lowercaseD"] = lowercaseD] = "lowercaseD"; //  'd'
  const lowercaseE = 101; charCodes[charCodes["lowercaseE"] = lowercaseE] = "lowercaseE"; //  'e'
  const lowercaseF = 102; charCodes[charCodes["lowercaseF"] = lowercaseF] = "lowercaseF"; //  'f'
  const lowercaseG = 103; charCodes[charCodes["lowercaseG"] = lowercaseG] = "lowercaseG"; //  'g'
  const lowercaseH = 104; charCodes[charCodes["lowercaseH"] = lowercaseH] = "lowercaseH"; //  'h'
  const lowercaseI = 105; charCodes[charCodes["lowercaseI"] = lowercaseI] = "lowercaseI"; //  'i'
  const lowercaseJ = 106; charCodes[charCodes["lowercaseJ"] = lowercaseJ] = "lowercaseJ"; //  'j'
  const lowercaseK = 107; charCodes[charCodes["lowercaseK"] = lowercaseK] = "lowercaseK"; //  'k'
  const lowercaseL = 108; charCodes[charCodes["lowercaseL"] = lowercaseL] = "lowercaseL"; //  'l'
  const lowercaseM = 109; charCodes[charCodes["lowercaseM"] = lowercaseM] = "lowercaseM"; //  'm'
  const lowercaseN = 110; charCodes[charCodes["lowercaseN"] = lowercaseN] = "lowercaseN"; //  'n'
  const lowercaseO = 111; charCodes[charCodes["lowercaseO"] = lowercaseO] = "lowercaseO"; //  'o'
  const lowercaseP = 112; charCodes[charCodes["lowercaseP"] = lowercaseP] = "lowercaseP"; //  'p'
  const lowercaseQ = 113; charCodes[charCodes["lowercaseQ"] = lowercaseQ] = "lowercaseQ"; //  'q'
  const lowercaseR = 114; charCodes[charCodes["lowercaseR"] = lowercaseR] = "lowercaseR"; //  'r'
  const lowercaseS = 115; charCodes[charCodes["lowercaseS"] = lowercaseS] = "lowercaseS"; //  's'
  const lowercaseT = 116; charCodes[charCodes["lowercaseT"] = lowercaseT] = "lowercaseT"; //  't'
  const lowercaseU = 117; charCodes[charCodes["lowercaseU"] = lowercaseU] = "lowercaseU"; //  'u'
  const lowercaseV = 118; charCodes[charCodes["lowercaseV"] = lowercaseV] = "lowercaseV"; //  'v'
  const lowercaseW = 119; charCodes[charCodes["lowercaseW"] = lowercaseW] = "lowercaseW"; //  'w'
  const lowercaseX = 120; charCodes[charCodes["lowercaseX"] = lowercaseX] = "lowercaseX"; //  'x'
  const lowercaseY = 121; charCodes[charCodes["lowercaseY"] = lowercaseY] = "lowercaseY"; //  'y'
  const lowercaseZ = 122; charCodes[charCodes["lowercaseZ"] = lowercaseZ] = "lowercaseZ"; //  'z'
  const leftCurlyBrace = 123; charCodes[charCodes["leftCurlyBrace"] = leftCurlyBrace] = "leftCurlyBrace"; //  '{'
  const verticalBar = 124; charCodes[charCodes["verticalBar"] = verticalBar] = "verticalBar"; //  '|'
  const rightCurlyBrace = 125; charCodes[charCodes["rightCurlyBrace"] = rightCurlyBrace] = "rightCurlyBrace"; //  '}'
  const tilde = 126; charCodes[charCodes["tilde"] = tilde] = "tilde"; //  '~'
  const nonBreakingSpace = 160; charCodes[charCodes["nonBreakingSpace"] = nonBreakingSpace] = "nonBreakingSpace";
  // eslint-disable-next-line no-irregular-whitespace
  const oghamSpaceMark = 5760; charCodes[charCodes["oghamSpaceMark"] = oghamSpaceMark] = "oghamSpaceMark"; // ' '
  const lineSeparator = 8232; charCodes[charCodes["lineSeparator"] = lineSeparator] = "lineSeparator";
  const paragraphSeparator = 8233; charCodes[charCodes["paragraphSeparator"] = paragraphSeparator] = "paragraphSeparator";
})(charCodes || (charCodes = {}));

let isJSXEnabled;
let isTypeScriptEnabled;
let isFlowEnabled;
let state;
let input;
let nextContextId;

function getNextContextId() {
  return nextContextId++;
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function augmentError(error) {
  if ("pos" in error) {
    const loc = locationForIndex(error.pos);
    error.message += ` (${loc.line}:${loc.column})`;
    error.loc = loc;
  }
  return error;
}

class Loc {
  
  
  constructor(line, column) {
    this.line = line;
    this.column = column;
  }
}

function locationForIndex(pos) {
  let line = 1;
  let column = 1;
  for (let i = 0; i < pos; i++) {
    if (input.charCodeAt(i) === charCodes.lineFeed) {
      line++;
      column = 1;
    } else {
      column++;
    }
  }
  return new Loc(line, column);
}

function initParser(
  inputCode,
  isJSXEnabledArg,
  isTypeScriptEnabledArg,
  isFlowEnabledArg,
) {
  input = inputCode;
  state = new State();
  nextContextId = 1;
  isJSXEnabled = isJSXEnabledArg;
  isTypeScriptEnabled = isTypeScriptEnabledArg;
  isFlowEnabled = isFlowEnabledArg;
}

// ## Parser utilities

// Tests whether parsed token is a contextual keyword.
function isContextual(contextualKeyword) {
  return state.contextualKeyword === contextualKeyword;
}

function isLookaheadContextual(contextualKeyword) {
  const l = lookaheadTypeAndKeyword();
  return l.type === TokenType.name && l.contextualKeyword === contextualKeyword;
}

// Consumes contextual keyword if possible.
function eatContextual(contextualKeyword) {
  return state.contextualKeyword === contextualKeyword && eat(TokenType.name);
}

// Asserts that following token is given contextual keyword.
function expectContextual(contextualKeyword) {
  if (!eatContextual(contextualKeyword)) {
    unexpected();
  }
}

// Test whether a semicolon can be inserted at the current position.
function canInsertSemicolon() {
  return match(TokenType.eof) || match(TokenType.braceR) || hasPrecedingLineBreak();
}

function hasPrecedingLineBreak() {
  const prevToken = state.tokens[state.tokens.length - 1];
  const lastTokEnd = prevToken ? prevToken.end : 0;
  for (let i = lastTokEnd; i < state.start; i++) {
    const code = input.charCodeAt(i);
    if (
      code === charCodes.lineFeed ||
      code === charCodes.carriageReturn ||
      code === 0x2028 ||
      code === 0x2029
    ) {
      return true;
    }
  }
  return false;
}

function hasFollowingLineBreak() {
  const nextStart = nextTokenStart();
  for (let i = state.end; i < nextStart; i++) {
    const code = input.charCodeAt(i);
    if (
      code === charCodes.lineFeed ||
      code === charCodes.carriageReturn ||
      code === 0x2028 ||
      code === 0x2029
    ) {
      return true;
    }
  }
  return false;
}

function isLineTerminator() {
  return eat(TokenType.semi) || canInsertSemicolon();
}

// Consume a semicolon, or, failing that, see if we are allowed to
// pretend that there is a semicolon at this position.
function semicolon() {
  if (!isLineTerminator()) {
    unexpected('Unexpected token, expected ";"');
  }
}

// Expect a token of a given type. If found, consume it, otherwise,
// raise an unexpected token error at given pos.
function expect(type) {
  const matched = eat(type);
  if (!matched) {
    unexpected(`Unexpected token, expected "${formatTokenType(type)}"`);
  }
}

/**
 * Transition the parser to an error state. All code needs to be written to naturally unwind in this
 * state, which allows us to backtrack without exceptions and without error plumbing everywhere.
 */
function unexpected(message = "Unexpected token", pos = state.start) {
  if (state.error) {
    return;
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const err = new SyntaxError(message);
  err.pos = pos;
  state.error = err;
  state.pos = input.length;
  finishToken(TokenType.eof);
}

// https://tc39.github.io/ecma262/#sec-white-space
const WHITESPACE_CHARS = [
  0x0009,
  0x000b,
  0x000c,
  charCodes.space,
  charCodes.nonBreakingSpace,
  charCodes.oghamSpaceMark,
  0x2000, // EN QUAD
  0x2001, // EM QUAD
  0x2002, // EN SPACE
  0x2003, // EM SPACE
  0x2004, // THREE-PER-EM SPACE
  0x2005, // FOUR-PER-EM SPACE
  0x2006, // SIX-PER-EM SPACE
  0x2007, // FIGURE SPACE
  0x2008, // PUNCTUATION SPACE
  0x2009, // THIN SPACE
  0x200a, // HAIR SPACE
  0x202f, // NARROW NO-BREAK SPACE
  0x205f, // MEDIUM MATHEMATICAL SPACE
  0x3000, // IDEOGRAPHIC SPACE
  0xfeff, // ZERO WIDTH NO-BREAK SPACE
];

const skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;

const IS_WHITESPACE = new Uint8Array(65536);
for (const char of WHITESPACE_CHARS) {
  IS_WHITESPACE[char] = 1;
}

function computeIsIdentifierChar(code) {
  if (code < 48) return code === 36;
  if (code < 58) return true;
  if (code < 65) return false;
  if (code < 91) return true;
  if (code < 97) return code === 95;
  if (code < 123) return true;
  if (code < 128) return false;
  throw new Error("Should not be called with non-ASCII char code.");
}

const IS_IDENTIFIER_CHAR = new Uint8Array(65536);
for (let i = 0; i < 128; i++) {
  IS_IDENTIFIER_CHAR[i] = computeIsIdentifierChar(i) ? 1 : 0;
}
for (let i = 128; i < 65536; i++) {
  IS_IDENTIFIER_CHAR[i] = 1;
}
// Aside from whitespace and newlines, all characters outside the ASCII space are either
// identifier characters or invalid. Since we're not performing code validation, we can just
// treat all invalid characters as identifier characters.
for (const whitespaceChar of WHITESPACE_CHARS) {
  IS_IDENTIFIER_CHAR[whitespaceChar] = 0;
}
IS_IDENTIFIER_CHAR[0x2028] = 0;
IS_IDENTIFIER_CHAR[0x2029] = 0;

const IS_IDENTIFIER_START = IS_IDENTIFIER_CHAR.slice();
for (let numChar = charCodes.digit0; numChar <= charCodes.digit9; numChar++) {
  IS_IDENTIFIER_START[numChar] = 0;
}

// Generated file, do not edit! Run "yarn generate" to re-generate this file.

// prettier-ignore
const READ_WORD_TREE = new Int32Array([
  // ""
  -1, 27, 783, 918, 1755, 2376, 2862, 3483, -1, 3699, -1, 4617, 4752, 4833, 5130, 5508, 5940, -1, 6480, 6939, 7749, 8181, 8451, 8613, -1, 8829, -1,
  // "a"
  -1, -1, 54, 243, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 432, -1, -1, -1, 675, -1, -1, -1,
  // "ab"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1,
  // "abs"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1,
  // "abst"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1,
  // "abstr"
  -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "abstra"
  -1, -1, -1, 189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "abstrac"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 216, -1, -1, -1, -1, -1, -1,
  // "abstract"
  ContextualKeyword._abstract << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ac"
  -1, -1, -1, 270, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "acc"
  -1, -1, -1, -1, -1, 297, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "acce"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 324, -1, -1, -1, -1, -1, -1, -1,
  // "acces"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 351, -1, -1, -1, -1, -1, -1, -1,
  // "access"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 378, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "accesso"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 405, -1, -1, -1, -1, -1, -1, -1, -1,
  // "accessor"
  ContextualKeyword._accessor << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "as"
  ContextualKeyword._as << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 459, -1, -1, -1, -1, -1, 594, -1,
  // "ass"
  -1, -1, -1, -1, -1, 486, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "asse"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 513, -1, -1, -1, -1, -1, -1, -1, -1,
  // "asser"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 540, -1, -1, -1, -1, -1, -1,
  // "assert"
  ContextualKeyword._assert << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 567, -1, -1, -1, -1, -1, -1, -1,
  // "asserts"
  ContextualKeyword._asserts << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "asy"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 621, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "asyn"
  -1, -1, -1, 648, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "async"
  ContextualKeyword._async << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "aw"
  -1, 702, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "awa"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 729, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "awai"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 756, -1, -1, -1, -1, -1, -1,
  // "await"
  ContextualKeyword._await << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "b"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 810, -1, -1, -1, -1, -1, -1, -1, -1,
  // "br"
  -1, -1, -1, -1, -1, 837, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "bre"
  -1, 864, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "brea"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 891, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "break"
  (TokenType._break << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "c"
  -1, 945, -1, -1, -1, -1, -1, -1, 1107, -1, -1, -1, 1242, -1, -1, 1350, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ca"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 972, 1026, -1, -1, -1, -1, -1, -1,
  // "cas"
  -1, -1, -1, -1, -1, 999, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "case"
  (TokenType._case << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "cat"
  -1, -1, -1, 1053, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "catc"
  -1, -1, -1, -1, -1, -1, -1, -1, 1080, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "catch"
  (TokenType._catch << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ch"
  -1, -1, -1, -1, -1, 1134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "che"
  -1, -1, -1, 1161, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "chec"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1188, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "check"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1215, -1, -1, -1, -1, -1, -1, -1,
  // "checks"
  ContextualKeyword._checks << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "cl"
  -1, 1269, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "cla"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1296, -1, -1, -1, -1, -1, -1, -1,
  // "clas"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1323, -1, -1, -1, -1, -1, -1, -1,
  // "class"
  (TokenType._class << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "co"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1377, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "con"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1404, 1620, -1, -1, -1, -1, -1, -1,
  // "cons"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1431, -1, -1, -1, -1, -1, -1,
  // "const"
  (TokenType._const << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1458, -1, -1, -1, -1, -1, -1, -1, -1,
  // "constr"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1485, -1, -1, -1, -1, -1,
  // "constru"
  -1, -1, -1, 1512, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "construc"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1539, -1, -1, -1, -1, -1, -1,
  // "construct"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1566, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "constructo"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1593, -1, -1, -1, -1, -1, -1, -1, -1,
  // "constructor"
  ContextualKeyword._constructor << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "cont"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 1647, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "conti"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1674, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "contin"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1701, -1, -1, -1, -1, -1,
  // "continu"
  -1, -1, -1, -1, -1, 1728, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "continue"
  (TokenType._continue << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "d"
  -1, -1, -1, -1, -1, 1782, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2349, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "de"
  -1, -1, 1809, 1971, -1, -1, 2106, -1, -1, -1, -1, -1, 2241, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "deb"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1836, -1, -1, -1, -1, -1,
  // "debu"
  -1, -1, -1, -1, -1, -1, -1, 1863, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "debug"
  -1, -1, -1, -1, -1, -1, -1, 1890, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "debugg"
  -1, -1, -1, -1, -1, 1917, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "debugge"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1944, -1, -1, -1, -1, -1, -1, -1, -1,
  // "debugger"
  (TokenType._debugger << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "dec"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1998, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "decl"
  -1, 2025, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "decla"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2052, -1, -1, -1, -1, -1, -1, -1, -1,
  // "declar"
  -1, -1, -1, -1, -1, 2079, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "declare"
  ContextualKeyword._declare << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "def"
  -1, 2133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "defa"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2160, -1, -1, -1, -1, -1,
  // "defau"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2187, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "defaul"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2214, -1, -1, -1, -1, -1, -1,
  // "default"
  (TokenType._default << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "del"
  -1, -1, -1, -1, -1, 2268, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "dele"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2295, -1, -1, -1, -1, -1, -1,
  // "delet"
  -1, -1, -1, -1, -1, 2322, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "delete"
  (TokenType._delete << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "do"
  (TokenType._do << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "e"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2403, -1, 2484, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2565, -1, -1,
  // "el"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2430, -1, -1, -1, -1, -1, -1, -1,
  // "els"
  -1, -1, -1, -1, -1, 2457, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "else"
  (TokenType._else << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "en"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2511, -1, -1, -1, -1, -1,
  // "enu"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2538, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "enum"
  ContextualKeyword._enum << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ex"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2592, -1, -1, -1, 2727, -1, -1, -1, -1, -1, -1,
  // "exp"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2619, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "expo"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2646, -1, -1, -1, -1, -1, -1, -1, -1,
  // "expor"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2673, -1, -1, -1, -1, -1, -1,
  // "export"
  (TokenType._export << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2700, -1, -1, -1, -1, -1, -1, -1,
  // "exports"
  ContextualKeyword._exports << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ext"
  -1, -1, -1, -1, -1, 2754, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "exte"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2781, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "exten"
  -1, -1, -1, -1, 2808, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "extend"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2835, -1, -1, -1, -1, -1, -1, -1,
  // "extends"
  (TokenType._extends << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "f"
  -1, 2889, -1, -1, -1, -1, -1, -1, -1, 2997, -1, -1, -1, -1, -1, 3159, -1, -1, 3213, -1, -1, 3294, -1, -1, -1, -1, -1,
  // "fa"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2916, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "fal"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2943, -1, -1, -1, -1, -1, -1, -1,
  // "fals"
  -1, -1, -1, -1, -1, 2970, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "false"
  (TokenType._false << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "fi"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3024, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "fin"
  -1, 3051, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "fina"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3078, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "final"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "finall"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3132, -1,
  // "finally"
  (TokenType._finally << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "fo"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3186, -1, -1, -1, -1, -1, -1, -1, -1,
  // "for"
  (TokenType._for << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "fr"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3240, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "fro"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3267, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "from"
  ContextualKeyword._from << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "fu"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3321, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "fun"
  -1, -1, -1, 3348, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "func"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3375, -1, -1, -1, -1, -1, -1,
  // "funct"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 3402, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "functi"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3429, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "functio"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3456, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "function"
  (TokenType._function << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "g"
  -1, -1, -1, -1, -1, 3510, -1, -1, -1, -1, -1, -1, 3564, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ge"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3537, -1, -1, -1, -1, -1, -1,
  // "get"
  ContextualKeyword._get << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "gl"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3591, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "glo"
  -1, -1, 3618, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "glob"
  -1, 3645, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "globa"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3672, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "global"
  ContextualKeyword._global << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "i"
  -1, -1, -1, -1, -1, -1, 3726, -1, -1, -1, -1, -1, -1, 3753, 4077, -1, -1, -1, -1, 4590, -1, -1, -1, -1, -1, -1, -1,
  // "if"
  (TokenType._if << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "im"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3780, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "imp"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3807, -1, -1, 3996, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "impl"
  -1, -1, -1, -1, -1, 3834, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "imple"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3861, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "implem"
  -1, -1, -1, -1, -1, 3888, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "impleme"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3915, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "implemen"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3942, -1, -1, -1, -1, -1, -1,
  // "implement"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3969, -1, -1, -1, -1, -1, -1, -1,
  // "implements"
  ContextualKeyword._implements << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "impo"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4023, -1, -1, -1, -1, -1, -1, -1, -1,
  // "impor"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4050, -1, -1, -1, -1, -1, -1,
  // "import"
  (TokenType._import << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "in"
  (TokenType._in << 1) + 1, -1, -1, -1, -1, -1, 4104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4185, 4401, -1, -1, -1, -1, -1, -1,
  // "inf"
  -1, -1, -1, -1, -1, 4131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "infe"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4158, -1, -1, -1, -1, -1, -1, -1, -1,
  // "infer"
  ContextualKeyword._infer << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ins"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4212, -1, -1, -1, -1, -1, -1,
  // "inst"
  -1, 4239, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "insta"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4266, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "instan"
  -1, -1, -1, 4293, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "instanc"
  -1, -1, -1, -1, -1, 4320, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "instance"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4347, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "instanceo"
  -1, -1, -1, -1, -1, -1, 4374, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "instanceof"
  (TokenType._instanceof << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "int"
  -1, -1, -1, -1, -1, 4428, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "inte"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4455, -1, -1, -1, -1, -1, -1, -1, -1,
  // "inter"
  -1, -1, -1, -1, -1, -1, 4482, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "interf"
  -1, 4509, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "interfa"
  -1, -1, -1, 4536, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "interfac"
  -1, -1, -1, -1, -1, 4563, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "interface"
  ContextualKeyword._interface << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "is"
  ContextualKeyword._is << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "k"
  -1, -1, -1, -1, -1, 4644, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ke"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4671, -1,
  // "key"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4698, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "keyo"
  -1, -1, -1, -1, -1, -1, 4725, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "keyof"
  ContextualKeyword._keyof << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "l"
  -1, -1, -1, -1, -1, 4779, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "le"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4806, -1, -1, -1, -1, -1, -1,
  // "let"
  (TokenType._let << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "m"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 4860, -1, -1, -1, -1, -1, 4995, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "mi"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4887, -1, -1,
  // "mix"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 4914, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "mixi"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4941, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "mixin"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4968, -1, -1, -1, -1, -1, -1, -1,
  // "mixins"
  ContextualKeyword._mixins << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "mo"
  -1, -1, -1, -1, 5022, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "mod"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5049, -1, -1, -1, -1, -1,
  // "modu"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5076, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "modul"
  -1, -1, -1, -1, -1, 5103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "module"
  ContextualKeyword._module << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "n"
  -1, 5157, -1, -1, -1, 5373, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5427, -1, -1, -1, -1, -1,
  // "na"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "nam"
  -1, -1, -1, -1, -1, 5211, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "name"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5238, -1, -1, -1, -1, -1, -1, -1,
  // "names"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5265, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "namesp"
  -1, 5292, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "namespa"
  -1, -1, -1, 5319, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "namespac"
  -1, -1, -1, -1, -1, 5346, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "namespace"
  ContextualKeyword._namespace << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ne"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5400, -1, -1, -1,
  // "new"
  (TokenType._new << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "nu"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5454, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "nul"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5481, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "null"
  (TokenType._null << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "o"
  -1, -1, -1, -1, -1, -1, 5535, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5562, -1, -1, -1, -1, 5697, 5751, -1, -1, -1, -1,
  // "of"
  ContextualKeyword._of << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "op"
  -1, 5589, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "opa"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5616, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "opaq"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5643, -1, -1, -1, -1, -1,
  // "opaqu"
  -1, -1, -1, -1, -1, 5670, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "opaque"
  ContextualKeyword._opaque << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ou"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5724, -1, -1, -1, -1, -1, -1,
  // "out"
  ContextualKeyword._out << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ov"
  -1, -1, -1, -1, -1, 5778, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ove"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5805, -1, -1, -1, -1, -1, -1, -1, -1,
  // "over"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5832, -1, -1, -1, -1, -1, -1, -1, -1,
  // "overr"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 5859, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "overri"
  -1, -1, -1, -1, 5886, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "overrid"
  -1, -1, -1, -1, -1, 5913, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "override"
  ContextualKeyword._override << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "p"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5967, -1, -1, 6345, -1, -1, -1, -1, -1,
  // "pr"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 5994, -1, -1, -1, -1, -1, 6129, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "pri"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6021, -1, -1, -1, -1,
  // "priv"
  -1, 6048, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "priva"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6075, -1, -1, -1, -1, -1, -1,
  // "privat"
  -1, -1, -1, -1, -1, 6102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "private"
  ContextualKeyword._private << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "pro"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6156, -1, -1, -1, -1, -1, -1,
  // "prot"
  -1, -1, -1, -1, -1, 6183, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6318, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "prote"
  -1, -1, -1, 6210, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "protec"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6237, -1, -1, -1, -1, -1, -1,
  // "protect"
  -1, -1, -1, -1, -1, 6264, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "protecte"
  -1, -1, -1, -1, 6291, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "protected"
  ContextualKeyword._protected << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "proto"
  ContextualKeyword._proto << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "pu"
  -1, -1, 6372, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "pub"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6399, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "publ"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6426, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "publi"
  -1, -1, -1, 6453, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "public"
  ContextualKeyword._public << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "r"
  -1, -1, -1, -1, -1, 6507, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "re"
  -1, 6534, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6696, -1, -1, 6831, -1, -1, -1, -1, -1, -1,
  // "rea"
  -1, -1, -1, -1, 6561, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "read"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6588, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "reado"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6615, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "readon"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6642, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "readonl"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6669, -1,
  // "readonly"
  ContextualKeyword._readonly << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "req"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6723, -1, -1, -1, -1, -1,
  // "requ"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6750, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "requi"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6777, -1, -1, -1, -1, -1, -1, -1, -1,
  // "requir"
  -1, -1, -1, -1, -1, 6804, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "require"
  ContextualKeyword._require << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ret"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6858, -1, -1, -1, -1, -1,
  // "retu"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6885, -1, -1, -1, -1, -1, -1, -1, -1,
  // "retur"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6912, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "return"
  (TokenType._return << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "s"
  -1, 6966, -1, -1, -1, 7182, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7236, 7371, -1, 7479, -1, 7614, -1,
  // "sa"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6993, -1, -1, -1, -1, -1, -1,
  // "sat"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7020, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "sati"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7047, -1, -1, -1, -1, -1, -1, -1,
  // "satis"
  -1, -1, -1, -1, -1, -1, 7074, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "satisf"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "satisfi"
  -1, -1, -1, -1, -1, 7128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "satisfie"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7155, -1, -1, -1, -1, -1, -1, -1,
  // "satisfies"
  ContextualKeyword._satisfies << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "se"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7209, -1, -1, -1, -1, -1, -1,
  // "set"
  ContextualKeyword._set << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "st"
  -1, 7263, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "sta"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7290, -1, -1, -1, -1, -1, -1,
  // "stat"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7317, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "stati"
  -1, -1, -1, 7344, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "static"
  ContextualKeyword._static << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "su"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7398, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "sup"
  -1, -1, -1, -1, -1, 7425, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "supe"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7452, -1, -1, -1, -1, -1, -1, -1, -1,
  // "super"
  (TokenType._super << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "sw"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7506, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "swi"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7533, -1, -1, -1, -1, -1, -1,
  // "swit"
  -1, -1, -1, 7560, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "switc"
  -1, -1, -1, -1, -1, -1, -1, -1, 7587, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "switch"
  (TokenType._switch << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "sy"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7641, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "sym"
  -1, -1, 7668, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "symb"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7695, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "symbo"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7722, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "symbol"
  ContextualKeyword._symbol << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "t"
  -1, -1, -1, -1, -1, -1, -1, -1, 7776, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7938, -1, -1, -1, -1, -1, -1, 8046, -1,
  // "th"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7803, -1, -1, -1, -1, -1, -1, -1, -1, 7857, -1, -1, -1, -1, -1, -1, -1, -1,
  // "thi"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7830, -1, -1, -1, -1, -1, -1, -1,
  // "this"
  (TokenType._this << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "thr"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7884, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "thro"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7911, -1, -1, -1,
  // "throw"
  (TokenType._throw << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "tr"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7965, -1, -1, -1, 8019, -1,
  // "tru"
  -1, -1, -1, -1, -1, 7992, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "true"
  (TokenType._true << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "try"
  (TokenType._try << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "ty"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8073, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "typ"
  -1, -1, -1, -1, -1, 8100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "type"
  ContextualKeyword._type << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "typeo"
  -1, -1, -1, -1, -1, -1, 8154, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "typeof"
  (TokenType._typeof << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "u"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8208, -1, -1, -1, -1, 8343, -1, -1, -1, -1, -1, -1, -1,
  // "un"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8235, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "uni"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8262, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "uniq"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8289, -1, -1, -1, -1, -1,
  // "uniqu"
  -1, -1, -1, -1, -1, 8316, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "unique"
  ContextualKeyword._unique << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "us"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8370, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "usi"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8397, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "usin"
  -1, -1, -1, -1, -1, -1, -1, 8424, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "using"
  ContextualKeyword._using << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "v"
  -1, 8478, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8532, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "va"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8505, -1, -1, -1, -1, -1, -1, -1, -1,
  // "var"
  (TokenType._var << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "vo"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8559, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "voi"
  -1, -1, -1, -1, 8586, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "void"
  (TokenType._void << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "w"
  -1, -1, -1, -1, -1, -1, -1, -1, 8640, 8748, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "wh"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8667, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "whi"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8694, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "whil"
  -1, -1, -1, -1, -1, 8721, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "while"
  (TokenType._while << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "wi"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8775, -1, -1, -1, -1, -1, -1,
  // "wit"
  -1, -1, -1, -1, -1, -1, -1, -1, 8802, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "with"
  (TokenType._with << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "y"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8856, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "yi"
  -1, -1, -1, -1, -1, 8883, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "yie"
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8910, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "yiel"
  -1, -1, -1, -1, 8937, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  // "yield"
  (TokenType._yield << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
]);

/**
 * Read an identifier, producing either a name token or matching on one of the existing keywords.
 * For performance, we pre-generate big decision tree that we traverse. Each node represents a
 * prefix and has 27 values, where the first value is the token or contextual token, if any (-1 if
 * not), and the other 26 values are the transitions to other nodes, or -1 to stop.
 */
function readWord() {
  let treePos = 0;
  let code = 0;
  let pos = state.pos;
  while (pos < input.length) {
    code = input.charCodeAt(pos);
    if (code < charCodes.lowercaseA || code > charCodes.lowercaseZ) {
      break;
    }
    const next = READ_WORD_TREE[treePos + (code - charCodes.lowercaseA) + 1];
    if (next === -1) {
      break;
    } else {
      treePos = next;
      pos++;
    }
  }

  const keywordValue = READ_WORD_TREE[treePos];
  if (keywordValue > -1 && !IS_IDENTIFIER_CHAR[code]) {
    state.pos = pos;
    if (keywordValue & 1) {
      finishToken(keywordValue >>> 1);
    } else {
      finishToken(TokenType.name, keywordValue >>> 1);
    }
    return;
  }

  while (pos < input.length) {
    const ch = input.charCodeAt(pos);
    if (IS_IDENTIFIER_CHAR[ch]) {
      pos++;
    } else if (ch === charCodes.backslash) {
      // \u
      pos += 2;
      if (input.charCodeAt(pos) === charCodes.leftCurlyBrace) {
        while (pos < input.length && input.charCodeAt(pos) !== charCodes.rightCurlyBrace) {
          pos++;
        }
        pos++;
      }
    } else if (ch === charCodes.atSign && input.charCodeAt(pos + 1) === charCodes.atSign) {
      pos += 2;
    } else {
      break;
    }
  }
  state.pos = pos;
  finishToken(TokenType.name);
}

/* eslint max-len: 0 */

var IdentifierRole; (function (IdentifierRole) {
  const Access = 0; IdentifierRole[IdentifierRole["Access"] = Access] = "Access";
  const ExportAccess = Access + 1; IdentifierRole[IdentifierRole["ExportAccess"] = ExportAccess] = "ExportAccess";
  const TopLevelDeclaration = ExportAccess + 1; IdentifierRole[IdentifierRole["TopLevelDeclaration"] = TopLevelDeclaration] = "TopLevelDeclaration";
  const FunctionScopedDeclaration = TopLevelDeclaration + 1; IdentifierRole[IdentifierRole["FunctionScopedDeclaration"] = FunctionScopedDeclaration] = "FunctionScopedDeclaration";
  const BlockScopedDeclaration = FunctionScopedDeclaration + 1; IdentifierRole[IdentifierRole["BlockScopedDeclaration"] = BlockScopedDeclaration] = "BlockScopedDeclaration";
  const ObjectShorthandTopLevelDeclaration = BlockScopedDeclaration + 1; IdentifierRole[IdentifierRole["ObjectShorthandTopLevelDeclaration"] = ObjectShorthandTopLevelDeclaration] = "ObjectShorthandTopLevelDeclaration";
  const ObjectShorthandFunctionScopedDeclaration = ObjectShorthandTopLevelDeclaration + 1; IdentifierRole[IdentifierRole["ObjectShorthandFunctionScopedDeclaration"] = ObjectShorthandFunctionScopedDeclaration] = "ObjectShorthandFunctionScopedDeclaration";
  const ObjectShorthandBlockScopedDeclaration = ObjectShorthandFunctionScopedDeclaration + 1; IdentifierRole[IdentifierRole["ObjectShorthandBlockScopedDeclaration"] = ObjectShorthandBlockScopedDeclaration] = "ObjectShorthandBlockScopedDeclaration";
  const ObjectShorthand = ObjectShorthandBlockScopedDeclaration + 1; IdentifierRole[IdentifierRole["ObjectShorthand"] = ObjectShorthand] = "ObjectShorthand";
  // Any identifier bound in an import statement, e.g. both A and b from
  // `import A, * as b from 'A';`
  const ImportDeclaration = ObjectShorthand + 1; IdentifierRole[IdentifierRole["ImportDeclaration"] = ImportDeclaration] = "ImportDeclaration";
  const ObjectKey = ImportDeclaration + 1; IdentifierRole[IdentifierRole["ObjectKey"] = ObjectKey] = "ObjectKey";
  // The `foo` in `import {foo as bar} from "./abc";`.
  const ImportAccess = ObjectKey + 1; IdentifierRole[IdentifierRole["ImportAccess"] = ImportAccess] = "ImportAccess";
})(IdentifierRole || (IdentifierRole = {}));

/**
 * Extra information on jsxTagStart tokens, used to determine which of the three
 * jsx functions are called in the automatic transform.
 */
var JSXRole; (function (JSXRole) {
  // The element is self-closing or has a body that resolves to empty. We
  // shouldn't emit children at all in this case.
  const NoChildren = 0; JSXRole[JSXRole["NoChildren"] = NoChildren] = "NoChildren";
  // The element has a single explicit child, which might still be an arbitrary
  // expression like an array. We should emit that expression as the children.
  const OneChild = NoChildren + 1; JSXRole[JSXRole["OneChild"] = OneChild] = "OneChild";
  // The element has at least two explicitly-specified children or has spread
  // children, so child positions are assumed to be "static". We should wrap
  // these children in an array.
  const StaticChildren = OneChild + 1; JSXRole[JSXRole["StaticChildren"] = StaticChildren] = "StaticChildren";
  // The element has a prop named "key" after a prop spread, so we should fall
  // back to the createElement function.
  const KeyAfterPropSpread = StaticChildren + 1; JSXRole[JSXRole["KeyAfterPropSpread"] = KeyAfterPropSpread] = "KeyAfterPropSpread";
})(JSXRole || (JSXRole = {}));

function isDeclaration(token) {
  const role = token.identifierRole;
  return (
    role === IdentifierRole.TopLevelDeclaration ||
    role === IdentifierRole.FunctionScopedDeclaration ||
    role === IdentifierRole.BlockScopedDeclaration ||
    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||
    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration ||
    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration
  );
}

function isNonTopLevelDeclaration(token) {
  const role = token.identifierRole;
  return (
    role === IdentifierRole.FunctionScopedDeclaration ||
    role === IdentifierRole.BlockScopedDeclaration ||
    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration ||
    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration
  );
}

function isTopLevelDeclaration(token) {
  const role = token.identifierRole;
  return (
    role === IdentifierRole.TopLevelDeclaration ||
    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||
    role === IdentifierRole.ImportDeclaration
  );
}

function isBlockScopedDeclaration(token) {
  const role = token.identifierRole;
  // Treat top-level declarations as block scope since the distinction doesn't matter here.
  return (
    role === IdentifierRole.TopLevelDeclaration ||
    role === IdentifierRole.BlockScopedDeclaration ||
    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||
    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration
  );
}

function isFunctionScopedDeclaration(token) {
  const role = token.identifierRole;
  return (
    role === IdentifierRole.FunctionScopedDeclaration ||
    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration
  );
}

function isObjectShorthandDeclaration(token) {
  return (
    token.identifierRole === IdentifierRole.ObjectShorthandTopLevelDeclaration ||
    token.identifierRole === IdentifierRole.ObjectShorthandBlockScopedDeclaration ||
    token.identifierRole === IdentifierRole.ObjectShorthandFunctionScopedDeclaration
  );
}

// Object type used to represent tokens. Note that normally, tokens
// simply exist as properties on the parser object. This is only
// used for the onToken callback and the external tokenizer.
class Token {
  constructor() {
    this.type = state.type;
    this.contextualKeyword = state.contextualKeyword;
    this.start = state.start;
    this.end = state.end;
    this.scopeDepth = state.scopeDepth;
    this.isType = state.isType;
    this.identifierRole = null;
    this.jsxRole = null;
    this.shadowsGlobal = false;
    this.isAsyncOperation = false;
    this.contextId = null;
    this.rhsEndIndex = null;
    this.isExpression = false;
    this.numNullishCoalesceStarts = 0;
    this.numNullishCoalesceEnds = 0;
    this.isOptionalChainStart = false;
    this.isOptionalChainEnd = false;
    this.subscriptStartIndex = null;
    this.nullishStartIndex = null;
  }

  
  
  
  
  
  
  
  
  // Initially false for all tokens, then may be computed in a follow-up step that does scope
  // analysis.
  
  // Initially false for all tokens, but may be set during transform to mark it as containing an
  // await operation.
  
  
  // For assignments, the index of the RHS. For export tokens, the end of the export.
  
  // For class tokens, records if the class is a class expression or a class statement.
  
  // Number of times to insert a `nullishCoalesce(` snippet before this token.
  
  // Number of times to insert a `)` snippet after this token.
  
  // If true, insert an `optionalChain([` snippet before this token.
  
  // If true, insert a `])` snippet after this token.
  
  // Tag for `.`, `?.`, `[`, `?.[`, `(`, and `?.(` to denote the "root" token for this
  // subscript chain. This can be used to determine if this chain is an optional chain.
  
  // Tag for `??` operators to denote the root token for this nullish coalescing call.
  
}

// ## Tokenizer

// Move to the next token
function next() {
  state.tokens.push(new Token());
  nextToken();
}

// Call instead of next when inside a template, since that needs to be handled differently.
function nextTemplateToken() {
  state.tokens.push(new Token());
  state.start = state.pos;
  readTmplToken();
}

// The tokenizer never parses regexes by default. Instead, the parser is responsible for
// instructing it to parse a regex when we see a slash at the start of an expression.
function retokenizeSlashAsRegex() {
  if (state.type === TokenType.assign) {
    --state.pos;
  }
  readRegexp();
}

function pushTypeContext(existingTokensInType) {
  for (let i = state.tokens.length - existingTokensInType; i < state.tokens.length; i++) {
    state.tokens[i].isType = true;
  }
  const oldIsType = state.isType;
  state.isType = true;
  return oldIsType;
}

function popTypeContext(oldIsType) {
  state.isType = oldIsType;
}

function eat(type) {
  if (match(type)) {
    next();
    return true;
  } else {
    return false;
  }
}

function eatTypeToken(tokenType) {
  const oldIsType = state.isType;
  state.isType = true;
  eat(tokenType);
  state.isType = oldIsType;
}

function match(type) {
  return state.type === type;
}

function lookaheadType() {
  const snapshot = state.snapshot();
  next();
  const type = state.type;
  state.restoreFromSnapshot(snapshot);
  return type;
}

class TypeAndKeyword {
  
  
  constructor(type, contextualKeyword) {
    this.type = type;
    this.contextualKeyword = contextualKeyword;
  }
}

function lookaheadTypeAndKeyword() {
  const snapshot = state.snapshot();
  next();
  const type = state.type;
  const contextualKeyword = state.contextualKeyword;
  state.restoreFromSnapshot(snapshot);
  return new TypeAndKeyword(type, contextualKeyword);
}

function nextTokenStart() {
  return nextTokenStartSince(state.pos);
}

function nextTokenStartSince(pos) {
  skipWhiteSpace.lastIndex = pos;
  const skip = skipWhiteSpace.exec(input);
  return pos + skip[0].length;
}

function lookaheadCharCode() {
  return input.charCodeAt(nextTokenStart());
}

// Read a single token, updating the parser object's token-related
// properties.
function nextToken() {
  skipSpace();
  state.start = state.pos;
  if (state.pos >= input.length) {
    const tokens = state.tokens;
    // We normally run past the end a bit, but if we're way past the end, avoid an infinite loop.
    // Also check the token positions rather than the types since sometimes we rewrite the token
    // type to something else.
    if (
      tokens.length >= 2 &&
      tokens[tokens.length - 1].start >= input.length &&
      tokens[tokens.length - 2].start >= input.length
    ) {
      unexpected("Unexpectedly reached the end of input.");
    }
    finishToken(TokenType.eof);
    return;
  }
  readToken(input.charCodeAt(state.pos));
}

function readToken(code) {
  // Identifier or keyword. '\uXXXX' sequences are allowed in
  // identifiers, so '\' also dispatches to that.
  if (
    IS_IDENTIFIER_START[code] ||
    code === charCodes.backslash ||
    (code === charCodes.atSign && input.charCodeAt(state.pos + 1) === charCodes.atSign)
  ) {
    readWord();
  } else {
    getTokenFromCode(code);
  }
}

function skipBlockComment() {
  while (
    input.charCodeAt(state.pos) !== charCodes.asterisk ||
    input.charCodeAt(state.pos + 1) !== charCodes.slash
  ) {
    state.pos++;
    if (state.pos > input.length) {
      unexpected("Unterminated comment", state.pos - 2);
      return;
    }
  }
  state.pos += 2;
}

function skipLineComment(startSkip) {
  let ch = input.charCodeAt((state.pos += startSkip));
  if (state.pos < input.length) {
    while (
      ch !== charCodes.lineFeed &&
      ch !== charCodes.carriageReturn &&
      ch !== charCodes.lineSeparator &&
      ch !== charCodes.paragraphSeparator &&
      ++state.pos < input.length
    ) {
      ch = input.charCodeAt(state.pos);
    }
  }
}

// Called at the start of the parse and after every token. Skips
// whitespace and comments.
function skipSpace() {
  while (state.pos < input.length) {
    const ch = input.charCodeAt(state.pos);
    switch (ch) {
      case charCodes.carriageReturn:
        if (input.charCodeAt(state.pos + 1) === charCodes.lineFeed) {
          ++state.pos;
        }

      case charCodes.lineFeed:
      case charCodes.lineSeparator:
      case charCodes.paragraphSeparator:
        ++state.pos;
        break;

      case charCodes.slash:
        switch (input.charCodeAt(state.pos + 1)) {
          case charCodes.asterisk:
            state.pos += 2;
            skipBlockComment();
            break;

          case charCodes.slash:
            skipLineComment(2);
            break;

          default:
            return;
        }
        break;

      default:
        if (IS_WHITESPACE[ch]) {
          ++state.pos;
        } else {
          return;
        }
    }
  }
}

// Called at the end of every token. Sets various fields, and skips the space after the token, so
// that the next one's `start` will point at the right position.
function finishToken(
  type,
  contextualKeyword = ContextualKeyword.NONE,
) {
  state.end = state.pos;
  state.type = type;
  state.contextualKeyword = contextualKeyword;
}

// ### Token reading

// This is the function that is called to fetch the next token. It
// is somewhat obscure, because it works in character codes rather
// than characters, and because operator parsing has been inlined
// into it.
//
// All in the name of speed.
function readToken_dot() {
  const nextChar = input.charCodeAt(state.pos + 1);
  if (nextChar >= charCodes.digit0 && nextChar <= charCodes.digit9) {
    readNumber(true);
    return;
  }

  if (nextChar === charCodes.dot && input.charCodeAt(state.pos + 2) === charCodes.dot) {
    state.pos += 3;
    finishToken(TokenType.ellipsis);
  } else {
    ++state.pos;
    finishToken(TokenType.dot);
  }
}

function readToken_slash() {
  const nextChar = input.charCodeAt(state.pos + 1);
  if (nextChar === charCodes.equalsTo) {
    finishOp(TokenType.assign, 2);
  } else {
    finishOp(TokenType.slash, 1);
  }
}

function readToken_mult_modulo(code) {
  // '%*'
  let tokenType = code === charCodes.asterisk ? TokenType.star : TokenType.modulo;
  let width = 1;
  let nextChar = input.charCodeAt(state.pos + 1);

  // Exponentiation operator **
  if (code === charCodes.asterisk && nextChar === charCodes.asterisk) {
    width++;
    nextChar = input.charCodeAt(state.pos + 2);
    tokenType = TokenType.exponent;
  }

  // Match *= or %=, disallowing *=> which can be valid in flow.
  if (
    nextChar === charCodes.equalsTo &&
    input.charCodeAt(state.pos + 2) !== charCodes.greaterThan
  ) {
    width++;
    tokenType = TokenType.assign;
  }

  finishOp(tokenType, width);
}

function readToken_pipe_amp(code) {
  // '|&'
  const nextChar = input.charCodeAt(state.pos + 1);

  if (nextChar === code) {
    if (input.charCodeAt(state.pos + 2) === charCodes.equalsTo) {
      // ||= or &&=
      finishOp(TokenType.assign, 3);
    } else {
      // || or &&
      finishOp(code === charCodes.verticalBar ? TokenType.logicalOR : TokenType.logicalAND, 2);
    }
    return;
  }

  if (code === charCodes.verticalBar) {
    // '|>'
    if (nextChar === charCodes.greaterThan) {
      finishOp(TokenType.pipeline, 2);
      return;
    } else if (nextChar === charCodes.rightCurlyBrace && isFlowEnabled) {
      // '|}'
      finishOp(TokenType.braceBarR, 2);
      return;
    }
  }

  if (nextChar === charCodes.equalsTo) {
    finishOp(TokenType.assign, 2);
    return;
  }

  finishOp(code === charCodes.verticalBar ? TokenType.bitwiseOR : TokenType.bitwiseAND, 1);
}

function readToken_caret() {
  // '^'
  const nextChar = input.charCodeAt(state.pos + 1);
  if (nextChar === charCodes.equalsTo) {
    finishOp(TokenType.assign, 2);
  } else {
    finishOp(TokenType.bitwiseXOR, 1);
  }
}

function readToken_plus_min(code) {
  // '+-'
  const nextChar = input.charCodeAt(state.pos + 1);

  if (nextChar === code) {
    // Tentatively call this a prefix operator, but it might be changed to postfix later.
    finishOp(TokenType.preIncDec, 2);
    return;
  }

  if (nextChar === charCodes.equalsTo) {
    finishOp(TokenType.assign, 2);
  } else if (code === charCodes.plusSign) {
    finishOp(TokenType.plus, 1);
  } else {
    finishOp(TokenType.minus, 1);
  }
}

function readToken_lt() {
  const nextChar = input.charCodeAt(state.pos + 1);

  if (nextChar === charCodes.lessThan) {
    if (input.charCodeAt(state.pos + 2) === charCodes.equalsTo) {
      finishOp(TokenType.assign, 3);
      return;
    }
    // We see <<, but need to be really careful about whether to treat it as a
    // true left-shift or as two < tokens.
    if (state.isType) {
      // Within a type, << might come up in a snippet like `Array<<T>() => void>`,
      // so treat it as two < tokens. Importantly, this should only override <<
      // rather than other tokens like <= . If we treated <= as < in a type
      // context, then the snippet `a as T <= 1` would incorrectly start parsing
      // a type argument on T. We don't need to worry about `a as T << 1`
      // because TypeScript disallows that syntax.
      finishOp(TokenType.lessThan, 1);
    } else {
      // Outside a type, this might be a true left-shift operator, or it might
      // still be two open-type-arg tokens, such as in `f<<T>() => void>()`. We
      // look at the token while considering the `f`, so we don't yet know that
      // we're in a type context. In this case, we initially tokenize as a
      // left-shift and correct after-the-fact as necessary in
      // tsParseTypeArgumentsWithPossibleBitshift .
      finishOp(TokenType.bitShiftL, 2);
    }
    return;
  }

  if (nextChar === charCodes.equalsTo) {
    // <=
    finishOp(TokenType.relationalOrEqual, 2);
  } else {
    finishOp(TokenType.lessThan, 1);
  }
}

function readToken_gt() {
  if (state.isType) {
    // Avoid right-shift for things like `Array<Array<string>>` and
    // greater-than-or-equal for things like `const a: Array<number>=[];`.
    finishOp(TokenType.greaterThan, 1);
    return;
  }

  const nextChar = input.charCodeAt(state.pos + 1);

  if (nextChar === charCodes.greaterThan) {
    const size = input.charCodeAt(state.pos + 2) === charCodes.greaterThan ? 3 : 2;
    if (input.charCodeAt(state.pos + size) === charCodes.equalsTo) {
      finishOp(TokenType.assign, size + 1);
      return;
    }
    finishOp(TokenType.bitShiftR, size);
    return;
  }

  if (nextChar === charCodes.equalsTo) {
    // >=
    finishOp(TokenType.relationalOrEqual, 2);
  } else {
    finishOp(TokenType.greaterThan, 1);
  }
}

/**
 * Called after `as` expressions in TS; we're switching from a type to a
 * non-type context, so a > token may actually be >= . This is needed because >=
 * must be tokenized as a > in a type context because of code like
 * `const x: Array<T>=[];`, but `a as T >= 1` is a code example where it must be
 * treated as >=.
 *
 * Notably, this only applies to >, not <. In a code snippet like `a as T <= 1`,
 * we must NOT tokenize as <, or else the type parser will start parsing a type
 * argument and fail.
 */
function rescan_gt() {
  if (state.type === TokenType.greaterThan) {
    state.pos -= 1;
    readToken_gt();
  }
}

function readToken_eq_excl(code) {
  // '=!'
  const nextChar = input.charCodeAt(state.pos + 1);
  if (nextChar === charCodes.equalsTo) {
    finishOp(TokenType.equality, input.charCodeAt(state.pos + 2) === charCodes.equalsTo ? 3 : 2);
    return;
  }
  if (code === charCodes.equalsTo && nextChar === charCodes.greaterThan) {
    // '=>'
    state.pos += 2;
    finishToken(TokenType.arrow);
    return;
  }
  finishOp(code === charCodes.equalsTo ? TokenType.eq : TokenType.bang, 1);
}

function readToken_question() {
  // '?'
  const nextChar = input.charCodeAt(state.pos + 1);
  const nextChar2 = input.charCodeAt(state.pos + 2);
  if (
    nextChar === charCodes.questionMark &&
    // In Flow (but not TypeScript), ??string is a valid type that should be
    // tokenized as two individual ? tokens.
    !(isFlowEnabled && state.isType)
  ) {
    if (nextChar2 === charCodes.equalsTo) {
      // '??='
      finishOp(TokenType.assign, 3);
    } else {
      // '??'
      finishOp(TokenType.nullishCoalescing, 2);
    }
  } else if (
    nextChar === charCodes.dot &&
    !(nextChar2 >= charCodes.digit0 && nextChar2 <= charCodes.digit9)
  ) {
    // '.' not followed by a number
    state.pos += 2;
    finishToken(TokenType.questionDot);
  } else {
    ++state.pos;
    finishToken(TokenType.question);
  }
}

function getTokenFromCode(code) {
  switch (code) {
    case charCodes.numberSign:
      ++state.pos;
      finishToken(TokenType.hash);
      return;

    // The interpretation of a dot depends on whether it is followed
    // by a digit or another two dots.

    case charCodes.dot:
      readToken_dot();
      return;

    // Punctuation tokens.
    case charCodes.leftParenthesis:
      ++state.pos;
      finishToken(TokenType.parenL);
      return;
    case charCodes.rightParenthesis:
      ++state.pos;
      finishToken(TokenType.parenR);
      return;
    case charCodes.semicolon:
      ++state.pos;
      finishToken(TokenType.semi);
      return;
    case charCodes.comma:
      ++state.pos;
      finishToken(TokenType.comma);
      return;
    case charCodes.leftSquareBracket:
      ++state.pos;
      finishToken(TokenType.bracketL);
      return;
    case charCodes.rightSquareBracket:
      ++state.pos;
      finishToken(TokenType.bracketR);
      return;

    case charCodes.leftCurlyBrace:
      if (isFlowEnabled && input.charCodeAt(state.pos + 1) === charCodes.verticalBar) {
        finishOp(TokenType.braceBarL, 2);
      } else {
        ++state.pos;
        finishToken(TokenType.braceL);
      }
      return;

    case charCodes.rightCurlyBrace:
      ++state.pos;
      finishToken(TokenType.braceR);
      return;

    case charCodes.colon:
      if (input.charCodeAt(state.pos + 1) === charCodes.colon) {
        finishOp(TokenType.doubleColon, 2);
      } else {
        ++state.pos;
        finishToken(TokenType.colon);
      }
      return;

    case charCodes.questionMark:
      readToken_question();
      return;
    case charCodes.atSign:
      ++state.pos;
      finishToken(TokenType.at);
      return;

    case charCodes.graveAccent:
      ++state.pos;
      finishToken(TokenType.backQuote);
      return;

    case charCodes.digit0: {
      const nextChar = input.charCodeAt(state.pos + 1);
      // '0x', '0X', '0o', '0O', '0b', '0B'
      if (
        nextChar === charCodes.lowercaseX ||
        nextChar === charCodes.uppercaseX ||
        nextChar === charCodes.lowercaseO ||
        nextChar === charCodes.uppercaseO ||
        nextChar === charCodes.lowercaseB ||
        nextChar === charCodes.uppercaseB
      ) {
        readRadixNumber();
        return;
      }
    }
    // Anything else beginning with a digit is an integer, octal
    // number, or float.
    case charCodes.digit1:
    case charCodes.digit2:
    case charCodes.digit3:
    case charCodes.digit4:
    case charCodes.digit5:
    case charCodes.digit6:
    case charCodes.digit7:
    case charCodes.digit8:
    case charCodes.digit9:
      readNumber(false);
      return;

    // Quotes produce strings.
    case charCodes.quotationMark:
    case charCodes.apostrophe:
      readString(code);
      return;

    // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is
    // often referred to. `finishOp` simply skips the amount of
    // characters it is given as second argument, and returns a token
    // of the type given by its first argument.

    case charCodes.slash:
      readToken_slash();
      return;

    case charCodes.percentSign:
    case charCodes.asterisk:
      readToken_mult_modulo(code);
      return;

    case charCodes.verticalBar:
    case charCodes.ampersand:
      readToken_pipe_amp(code);
      return;

    case charCodes.caret:
      readToken_caret();
      return;

    case charCodes.plusSign:
    case charCodes.dash:
      readToken_plus_min(code);
      return;

    case charCodes.lessThan:
      readToken_lt();
      return;

    case charCodes.greaterThan:
      readToken_gt();
      return;

    case charCodes.equalsTo:
    case charCodes.exclamationMark:
      readToken_eq_excl(code);
      return;

    case charCodes.tilde:
      finishOp(TokenType.tilde, 1);
      return;
  }

  unexpected(`Unexpected character '${String.fromCharCode(code)}'`, state.pos);
}

function finishOp(type, size) {
  state.pos += size;
  finishToken(type);
}

function readRegexp() {
  const start = state.pos;
  let escaped = false;
  let inClass = false;
  for (;;) {
    if (state.pos >= input.length) {
      unexpected("Unterminated regular expression", start);
      return;
    }
    const code = input.charCodeAt(state.pos);
    if (escaped) {
      escaped = false;
    } else {
      if (code === charCodes.leftSquareBracket) {
        inClass = true;
      } else if (code === charCodes.rightSquareBracket && inClass) {
        inClass = false;
      } else if (code === charCodes.slash && !inClass) {
        break;
      }
      escaped = code === charCodes.backslash;
    }
    ++state.pos;
  }
  ++state.pos;
  // Need to use `skipWord` because '\uXXXX' sequences are allowed here (don't ask).
  skipWord();

  finishToken(TokenType.regexp);
}

/**
 * Read a decimal integer. Note that this can't be unified with the similar code
 * in readRadixNumber (which also handles hex digits) because "e" needs to be
 * the end of the integer so that we can properly handle scientific notation.
 */
function readInt() {
  while (true) {
    const code = input.charCodeAt(state.pos);
    if ((code >= charCodes.digit0 && code <= charCodes.digit9) || code === charCodes.underscore) {
      state.pos++;
    } else {
      break;
    }
  }
}

function readRadixNumber() {
  state.pos += 2; // 0x

  // Walk to the end of the number, allowing hex digits.
  while (true) {
    const code = input.charCodeAt(state.pos);
    if (
      (code >= charCodes.digit0 && code <= charCodes.digit9) ||
      (code >= charCodes.lowercaseA && code <= charCodes.lowercaseF) ||
      (code >= charCodes.uppercaseA && code <= charCodes.uppercaseF) ||
      code === charCodes.underscore
    ) {
      state.pos++;
    } else {
      break;
    }
  }

  const nextChar = input.charCodeAt(state.pos);
  if (nextChar === charCodes.lowercaseN) {
    ++state.pos;
    finishToken(TokenType.bigint);
  } else {
    finishToken(TokenType.num);
  }
}

// Read an integer, octal integer, or floating-point number.
function readNumber(startsWithDot) {
  let isBigInt = false;
  let isDecimal = false;

  if (!startsWithDot) {
    readInt();
  }

  let nextChar = input.charCodeAt(state.pos);
  if (nextChar === charCodes.dot) {
    ++state.pos;
    readInt();
    nextChar = input.charCodeAt(state.pos);
  }

  if (nextChar === charCodes.uppercaseE || nextChar === charCodes.lowercaseE) {
    nextChar = input.charCodeAt(++state.pos);
    if (nextChar === charCodes.plusSign || nextChar === charCodes.dash) {
      ++state.pos;
    }
    readInt();
    nextChar = input.charCodeAt(state.pos);
  }

  if (nextChar === charCodes.lowercaseN) {
    ++state.pos;
    isBigInt = true;
  } else if (nextChar === charCodes.lowercaseM) {
    ++state.pos;
    isDecimal = true;
  }

  if (isBigInt) {
    finishToken(TokenType.bigint);
    return;
  }

  if (isDecimal) {
    finishToken(TokenType.decimal);
    return;
  }

  finishToken(TokenType.num);
}

function readString(quote) {
  state.pos++;
  for (;;) {
    if (state.pos >= input.length) {
      unexpected("Unterminated string constant");
      return;
    }
    const ch = input.charCodeAt(state.pos);
    if (ch === charCodes.backslash) {
      state.pos++;
    } else if (ch === quote) {
      break;
    }
    state.pos++;
  }
  state.pos++;
  finishToken(TokenType.string);
}

// Reads template string tokens.
function readTmplToken() {
  for (;;) {
    if (state.pos >= input.length) {
      unexpected("Unterminated template");
      return;
    }
    const ch = input.charCodeAt(state.pos);
    if (
      ch === charCodes.graveAccent ||
      (ch === charCodes.dollarSign && input.charCodeAt(state.pos + 1) === charCodes.leftCurlyBrace)
    ) {
      if (state.pos === state.start && match(TokenType.template)) {
        if (ch === charCodes.dollarSign) {
          state.pos += 2;
          finishToken(TokenType.dollarBraceL);
          return;
        } else {
          ++state.pos;
          finishToken(TokenType.backQuote);
          return;
        }
      }
      finishToken(TokenType.template);
      return;
    }
    if (ch === charCodes.backslash) {
      state.pos++;
    }
    state.pos++;
  }
}

// Skip to the end of the current word. Note that this is the same as the snippet at the end of
// readWord, but calling skipWord from readWord seems to slightly hurt performance from some rough
// measurements.
function skipWord() {
  while (state.pos < input.length) {
    const ch = input.charCodeAt(state.pos);
    if (IS_IDENTIFIER_CHAR[ch]) {
      state.pos++;
    } else if (ch === charCodes.backslash) {
      // \u
      state.pos += 2;
      if (input.charCodeAt(state.pos) === charCodes.leftCurlyBrace) {
        while (
          state.pos < input.length &&
          input.charCodeAt(state.pos) !== charCodes.rightCurlyBrace
        ) {
          state.pos++;
        }
        state.pos++;
      }
    } else {
      break;
    }
  }
}

/**
 * Determine information about this named import or named export specifier.
 *
 * This syntax is the `a` from statements like these:
 * import {A} from "./foo";
 * export {A};
 * export {A} from "./foo";
 *
 * As it turns out, we can exactly characterize the syntax meaning by simply
 * counting the number of tokens, which can be from 1 to 4:
 * {A}
 * {type A}
 * {A as B}
 * {type A as B}
 *
 * In the type case, we never actually need the names in practice, so don't get
 * them.
 *
 * TODO: There's some redundancy with the type detection here and the isType
 * flag that's already present on tokens in TS mode. This function could
 * potentially be simplified and/or pushed to the call sites to avoid the object
 * allocation.
 */
function getImportExportSpecifierInfo(
  tokens,
  index = tokens.currentIndex(),
) {
  let endIndex = index + 1;
  if (isSpecifierEnd(tokens, endIndex)) {
    // import {A}
    const name = tokens.identifierNameAtIndex(index);
    return {
      isType: false,
      leftName: name,
      rightName: name,
      endIndex,
    };
  }
  endIndex++;
  if (isSpecifierEnd(tokens, endIndex)) {
    // import {type A}
    return {
      isType: true,
      leftName: null,
      rightName: null,
      endIndex,
    };
  }
  endIndex++;
  if (isSpecifierEnd(tokens, endIndex)) {
    // import {A as B}
    return {
      isType: false,
      leftName: tokens.identifierNameAtIndex(index),
      rightName: tokens.identifierNameAtIndex(index + 2),
      endIndex,
    };
  }
  endIndex++;
  if (isSpecifierEnd(tokens, endIndex)) {
    // import {type A as B}
    return {
      isType: true,
      leftName: null,
      rightName: null,
      endIndex,
    };
  }
  throw new Error(`Unexpected import/export specifier at ${index}`);
}

function isSpecifierEnd(tokens, index) {
  const token = tokens.tokens[index];
  return token.type === TokenType.braceR || token.type === TokenType.comma;
}

// Use a Map rather than object to avoid unexpected __proto__ access.
const XHTMLEntities = new Map([
  ["quot", "\u0022"],
  ["amp", "&"],
  ["apos", "\u0027"],
  ["lt", "<"],
  ["gt", ">"],
  ["nbsp", "\u00A0"],
  ["iexcl", "\u00A1"],
  ["cent", "\u00A2"],
  ["pound", "\u00A3"],
  ["curren", "\u00A4"],
  ["yen", "\u00A5"],
  ["brvbar", "\u00A6"],
  ["sect", "\u00A7"],
  ["uml", "\u00A8"],
  ["copy", "\u00A9"],
  ["ordf", "\u00AA"],
  ["laquo", "\u00AB"],
  ["not", "\u00AC"],
  ["shy", "\u00AD"],
  ["reg", "\u00AE"],
  ["macr", "\u00AF"],
  ["deg", "\u00B0"],
  ["plusmn", "\u00B1"],
  ["sup2", "\u00B2"],
  ["sup3", "\u00B3"],
  ["acute", "\u00B4"],
  ["micro", "\u00B5"],
  ["para", "\u00B6"],
  ["middot", "\u00B7"],
  ["cedil", "\u00B8"],
  ["sup1", "\u00B9"],
  ["ordm", "\u00BA"],
  ["raquo", "\u00BB"],
  ["frac14", "\u00BC"],
  ["frac12", "\u00BD"],
  ["frac34", "\u00BE"],
  ["iquest", "\u00BF"],
  ["Agrave", "\u00C0"],
  ["Aacute", "\u00C1"],
  ["Acirc", "\u00C2"],
  ["Atilde", "\u00C3"],
  ["Auml", "\u00C4"],
  ["Aring", "\u00C5"],
  ["AElig", "\u00C6"],
  ["Ccedil", "\u00C7"],
  ["Egrave", "\u00C8"],
  ["Eacute", "\u00C9"],
  ["Ecirc", "\u00CA"],
  ["Euml", "\u00CB"],
  ["Igrave", "\u00CC"],
  ["Iacute", "\u00CD"],
  ["Icirc", "\u00CE"],
  ["Iuml", "\u00CF"],
  ["ETH", "\u00D0"],
  ["Ntilde", "\u00D1"],
  ["Ograve", "\u00D2"],
  ["Oacute", "\u00D3"],
  ["Ocirc", "\u00D4"],
  ["Otilde", "\u00D5"],
  ["Ouml", "\u00D6"],
  ["times", "\u00D7"],
  ["Oslash", "\u00D8"],
  ["Ugrave", "\u00D9"],
  ["Uacute", "\u00DA"],
  ["Ucirc", "\u00DB"],
  ["Uuml", "\u00DC"],
  ["Yacute", "\u00DD"],
  ["THORN", "\u00DE"],
  ["szlig", "\u00DF"],
  ["agrave", "\u00E0"],
  ["aacute", "\u00E1"],
  ["acirc", "\u00E2"],
  ["atilde", "\u00E3"],
  ["auml", "\u00E4"],
  ["aring", "\u00E5"],
  ["aelig", "\u00E6"],
  ["ccedil", "\u00E7"],
  ["egrave", "\u00E8"],
  ["eacute", "\u00E9"],
  ["ecirc", "\u00EA"],
  ["euml", "\u00EB"],
  ["igrave", "\u00EC"],
  ["iacute", "\u00ED"],
  ["icirc", "\u00EE"],
  ["iuml", "\u00EF"],
  ["eth", "\u00F0"],
  ["ntilde", "\u00F1"],
  ["ograve", "\u00F2"],
  ["oacute", "\u00F3"],
  ["ocirc", "\u00F4"],
  ["otilde", "\u00F5"],
  ["ouml", "\u00F6"],
  ["divide", "\u00F7"],
  ["oslash", "\u00F8"],
  ["ugrave", "\u00F9"],
  ["uacute", "\u00FA"],
  ["ucirc", "\u00FB"],
  ["uuml", "\u00FC"],
  ["yacute", "\u00FD"],
  ["thorn", "\u00FE"],
  ["yuml", "\u00FF"],
  ["OElig", "\u0152"],
  ["oelig", "\u0153"],
  ["Scaron", "\u0160"],
  ["scaron", "\u0161"],
  ["Yuml", "\u0178"],
  ["fnof", "\u0192"],
  ["circ", "\u02C6"],
  ["tilde", "\u02DC"],
  ["Alpha", "\u0391"],
  ["Beta", "\u0392"],
  ["Gamma", "\u0393"],
  ["Delta", "\u0394"],
  ["Epsilon", "\u0395"],
  ["Zeta", "\u0396"],
  ["Eta", "\u0397"],
  ["Theta", "\u0398"],
  ["Iota", "\u0399"],
  ["Kappa", "\u039A"],
  ["Lambda", "\u039B"],
  ["Mu", "\u039C"],
  ["Nu", "\u039D"],
  ["Xi", "\u039E"],
  ["Omicron", "\u039F"],
  ["Pi", "\u03A0"],
  ["Rho", "\u03A1"],
  ["Sigma", "\u03A3"],
  ["Tau", "\u03A4"],
  ["Upsilon", "\u03A5"],
  ["Phi", "\u03A6"],
  ["Chi", "\u03A7"],
  ["Psi", "\u03A8"],
  ["Omega", "\u03A9"],
  ["alpha", "\u03B1"],
  ["beta", "\u03B2"],
  ["gamma", "\u03B3"],
  ["delta", "\u03B4"],
  ["epsilon", "\u03B5"],
  ["zeta", "\u03B6"],
  ["eta", "\u03B7"],
  ["theta", "\u03B8"],
  ["iota", "\u03B9"],
  ["kappa", "\u03BA"],
  ["lambda", "\u03BB"],
  ["mu", "\u03BC"],
  ["nu", "\u03BD"],
  ["xi", "\u03BE"],
  ["omicron", "\u03BF"],
  ["pi", "\u03C0"],
  ["rho", "\u03C1"],
  ["sigmaf", "\u03C2"],
  ["sigma", "\u03C3"],
  ["tau", "\u03C4"],
  ["upsilon", "\u03C5"],
  ["phi", "\u03C6"],
  ["chi", "\u03C7"],
  ["psi", "\u03C8"],
  ["omega", "\u03C9"],
  ["thetasym", "\u03D1"],
  ["upsih", "\u03D2"],
  ["piv", "\u03D6"],
  ["ensp", "\u2002"],
  ["emsp", "\u2003"],
  ["thinsp", "\u2009"],
  ["zwnj", "\u200C"],
  ["zwj", "\u200D"],
  ["lrm", "\u200E"],
  ["rlm", "\u200F"],
  ["ndash", "\u2013"],
  ["mdash", "\u2014"],
  ["lsquo", "\u2018"],
  ["rsquo", "\u2019"],
  ["sbquo", "\u201A"],
  ["ldquo", "\u201C"],
  ["rdquo", "\u201D"],
  ["bdquo", "\u201E"],
  ["dagger", "\u2020"],
  ["Dagger", "\u2021"],
  ["bull", "\u2022"],
  ["hellip", "\u2026"],
  ["permil", "\u2030"],
  ["prime", "\u2032"],
  ["Prime", "\u2033"],
  ["lsaquo", "\u2039"],
  ["rsaquo", "\u203A"],
  ["oline", "\u203E"],
  ["frasl", "\u2044"],
  ["euro", "\u20AC"],
  ["image", "\u2111"],
  ["weierp", "\u2118"],
  ["real", "\u211C"],
  ["trade", "\u2122"],
  ["alefsym", "\u2135"],
  ["larr", "\u2190"],
  ["uarr", "\u2191"],
  ["rarr", "\u2192"],
  ["darr", "\u2193"],
  ["harr", "\u2194"],
  ["crarr", "\u21B5"],
  ["lArr", "\u21D0"],
  ["uArr", "\u21D1"],
  ["rArr", "\u21D2"],
  ["dArr", "\u21D3"],
  ["hArr", "\u21D4"],
  ["forall", "\u2200"],
  ["part", "\u2202"],
  ["exist", "\u2203"],
  ["empty", "\u2205"],
  ["nabla", "\u2207"],
  ["isin", "\u2208"],
  ["notin", "\u2209"],
  ["ni", "\u220B"],
  ["prod", "\u220F"],
  ["sum", "\u2211"],
  ["minus", "\u2212"],
  ["lowast", "\u2217"],
  ["radic", "\u221A"],
  ["prop", "\u221D"],
  ["infin", "\u221E"],
  ["ang", "\u2220"],
  ["and", "\u2227"],
  ["or", "\u2228"],
  ["cap", "\u2229"],
  ["cup", "\u222A"],
  ["int", "\u222B"],
  ["there4", "\u2234"],
  ["sim", "\u223C"],
  ["cong", "\u2245"],
  ["asymp", "\u2248"],
  ["ne", "\u2260"],
  ["equiv", "\u2261"],
  ["le", "\u2264"],
  ["ge", "\u2265"],
  ["sub", "\u2282"],
  ["sup", "\u2283"],
  ["nsub", "\u2284"],
  ["sube", "\u2286"],
  ["supe", "\u2287"],
  ["oplus", "\u2295"],
  ["otimes", "\u2297"],
  ["perp", "\u22A5"],
  ["sdot", "\u22C5"],
  ["lceil", "\u2308"],
  ["rceil", "\u2309"],
  ["lfloor", "\u230A"],
  ["rfloor", "\u230B"],
  ["lang", "\u2329"],
  ["rang", "\u232A"],
  ["loz", "\u25CA"],
  ["spades", "\u2660"],
  ["clubs", "\u2663"],
  ["hearts", "\u2665"],
  ["diams", "\u2666"],
]);

function getJSXPragmaInfo(options) {
  const [base, suffix] = splitPragma(options.jsxPragma || "React.createElement");
  const [fragmentBase, fragmentSuffix] = splitPragma(options.jsxFragmentPragma || "React.Fragment");
  return {base, suffix, fragmentBase, fragmentSuffix};
}

function splitPragma(pragma) {
  let dotIndex = pragma.indexOf(".");
  if (dotIndex === -1) {
    dotIndex = pragma.length;
  }
  return [pragma.slice(0, dotIndex), pragma.slice(dotIndex)];
}

class Transformer {
  // Return true if anything was processed, false otherwise.
  

  getPrefixCode() {
    return "";
  }

  getHoistedCode() {
    return "";
  }

  getSuffixCode() {
    return "";
  }
}

class JSXTransformer extends Transformer {
  
  
  

  // State for calculating the line number of each JSX tag in development.
  __init() {this.lastLineNumber = 1;}
  __init2() {this.lastIndex = 0;}

  // In development, variable name holding the name of the current file.
  __init3() {this.filenameVarName = null;}
  // Mapping of claimed names for imports in the automatic transform, e,g.
  // {jsx: "_jsx"}. This determines which imports to generate in the prefix.
  __init4() {this.esmAutomaticImportNameResolutions = {};}
  // When automatically adding imports in CJS mode, we store the variable name
  // holding the imported CJS module so we can require it in the prefix.
  __init5() {this.cjsAutomaticModuleNameResolutions = {};}

  constructor(
     rootTransformer,
     tokens,
     importProcessor,
     nameManager,
     options,
  ) {
    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.nameManager = nameManager;this.options = options;JSXTransformer.prototype.__init.call(this);JSXTransformer.prototype.__init2.call(this);JSXTransformer.prototype.__init3.call(this);JSXTransformer.prototype.__init4.call(this);JSXTransformer.prototype.__init5.call(this);    this.jsxPragmaInfo = getJSXPragmaInfo(options);
    this.isAutomaticRuntime = options.jsxRuntime === "automatic";
    this.jsxImportSource = options.jsxImportSource || "react";
  }

  process() {
    if (this.tokens.matches1(TokenType.jsxTagStart)) {
      this.processJSXTag();
      return true;
    }
    return false;
  }

  getPrefixCode() {
    let prefix = "";
    if (this.filenameVarName) {
      prefix += `const ${this.filenameVarName} = ${JSON.stringify(this.options.filePath || "")};`;
    }
    if (this.isAutomaticRuntime) {
      if (this.importProcessor) {
        // CJS mode: emit require statements for all modules that were referenced.
        for (const [path, resolvedName] of Object.entries(this.cjsAutomaticModuleNameResolutions)) {
          prefix += `var ${resolvedName} = require("${path}");`;
        }
      } else {
        // ESM mode: consolidate and emit import statements for referenced names.
        const {createElement: createElementResolution, ...otherResolutions} =
          this.esmAutomaticImportNameResolutions;
        if (createElementResolution) {
          prefix += `import {createElement as ${createElementResolution}} from "${this.jsxImportSource}";`;
        }
        const importSpecifiers = Object.entries(otherResolutions)
          .map(([name, resolvedName]) => `${name} as ${resolvedName}`)
          .join(", ");
        if (importSpecifiers) {
          const importPath =
            this.jsxImportSource + (this.options.production ? "/jsx-runtime" : "/jsx-dev-runtime");
          prefix += `import {${importSpecifiers}} from "${importPath}";`;
        }
      }
    }
    return prefix;
  }

  processJSXTag() {
    const {jsxRole, start} = this.tokens.currentToken();
    // Calculate line number information at the very start (if in development
    // mode) so that the information is guaranteed to be queried in token order.
    const elementLocationCode = this.options.production ? null : this.getElementLocationCode(start);
    if (this.isAutomaticRuntime && jsxRole !== JSXRole.KeyAfterPropSpread) {
      this.transformTagToJSXFunc(elementLocationCode, jsxRole);
    } else {
      this.transformTagToCreateElement(elementLocationCode);
    }
  }

  getElementLocationCode(firstTokenStart) {
    const lineNumber = this.getLineNumberForIndex(firstTokenStart);
    return `lineNumber: ${lineNumber}`;
  }

  /**
   * Get the line number for this source position. This is calculated lazily and
   * must be called in increasing order by index.
   */
  getLineNumberForIndex(index) {
    const code = this.tokens.code;
    while (this.lastIndex < index && this.lastIndex < code.length) {
      if (code[this.lastIndex] === "\n") {
        this.lastLineNumber++;
      }
      this.lastIndex++;
    }
    return this.lastLineNumber;
  }

  /**
   * Convert the current JSX element to a call to jsx, jsxs, or jsxDEV. This is
   * the primary transformation for the automatic transform.
   *
   * Example:
   * <div a={1} key={2}>Hello{x}</div>
   * becomes
   * jsxs('div', {a: 1, children: ["Hello", x]}, 2)
   */
  transformTagToJSXFunc(elementLocationCode, jsxRole) {
    const isStatic = jsxRole === JSXRole.StaticChildren;
    // First tag is always jsxTagStart.
    this.tokens.replaceToken(this.getJSXFuncInvocationCode(isStatic));

    let keyCode = null;
    if (this.tokens.matches1(TokenType.jsxTagEnd)) {
      // Fragment syntax.
      this.tokens.replaceToken(`${this.getFragmentCode()}, {`);
      this.processAutomaticChildrenAndEndProps(jsxRole);
    } else {
      // Normal open tag or self-closing tag.
      this.processTagIntro();
      this.tokens.appendCode(", {");
      keyCode = this.processProps(true);

      if (this.tokens.matches2(TokenType.slash, TokenType.jsxTagEnd)) {
        // Self-closing tag, no children to add, so close the props.
        this.tokens.appendCode("}");
      } else if (this.tokens.matches1(TokenType.jsxTagEnd)) {
        // Tag with children.
        this.tokens.removeToken();
        this.processAutomaticChildrenAndEndProps(jsxRole);
      } else {
        throw new Error("Expected either /> or > at the end of the tag.");
      }
      // If a key was present, move it to its own arg. Note that moving code
      // like this will cause line numbers to get out of sync within the JSX
      // element if the key expression has a newline in it. This is unfortunate,
      // but hopefully should be rare.
      if (keyCode) {
        this.tokens.appendCode(`, ${keyCode}`);
      }
    }
    if (!this.options.production) {
      // If the key wasn't already added, add it now so we can correctly set
      // positional args for jsxDEV.
      if (keyCode === null) {
        this.tokens.appendCode(", void 0");
      }
      this.tokens.appendCode(`, ${isStatic}, ${this.getDevSource(elementLocationCode)}, this`);
    }
    // We're at the close-tag or the end of a self-closing tag, so remove
    // everything else and close the function call.
    this.tokens.removeInitialToken();
    while (!this.tokens.matches1(TokenType.jsxTagEnd)) {
      this.tokens.removeToken();
    }
    this.tokens.replaceToken(")");
  }

  /**
   * Convert the current JSX element to a createElement call. In the classic
   * runtime, this is the only case. In the automatic runtime, this is called
   * as a fallback in some situations.
   *
   * Example:
   * <div a={1} key={2}>Hello{x}</div>
   * becomes
   * React.createElement('div', {a: 1, key: 2}, "Hello", x)
   */
  transformTagToCreateElement(elementLocationCode) {
    // First tag is always jsxTagStart.
    this.tokens.replaceToken(this.getCreateElementInvocationCode());

    if (this.tokens.matches1(TokenType.jsxTagEnd)) {
      // Fragment syntax.
      this.tokens.replaceToken(`${this.getFragmentCode()}, null`);
      this.processChildren(true);
    } else {
      // Normal open tag or self-closing tag.
      this.processTagIntro();
      this.processPropsObjectWithDevInfo(elementLocationCode);

      if (this.tokens.matches2(TokenType.slash, TokenType.jsxTagEnd)) ; else if (this.tokens.matches1(TokenType.jsxTagEnd)) {
        // Tag with children and a close-tag; process the children as args.
        this.tokens.removeToken();
        this.processChildren(true);
      } else {
        throw new Error("Expected either /> or > at the end of the tag.");
      }
    }
    // We're at the close-tag or the end of a self-closing tag, so remove
    // everything else and close the function call.
    this.tokens.removeInitialToken();
    while (!this.tokens.matches1(TokenType.jsxTagEnd)) {
      this.tokens.removeToken();
    }
    this.tokens.replaceToken(")");
  }

  /**
   * Get the code for the relevant function for this context: jsx, jsxs,
   * or jsxDEV. The following open-paren is included as well.
   *
   * These functions are only used for the automatic runtime, so they are always
   * auto-imported, but the auto-import will be either CJS or ESM based on the
   * target module format.
   */
  getJSXFuncInvocationCode(isStatic) {
    if (this.options.production) {
      if (isStatic) {
        return this.claimAutoImportedFuncInvocation("jsxs", "/jsx-runtime");
      } else {
        return this.claimAutoImportedFuncInvocation("jsx", "/jsx-runtime");
      }
    } else {
      return this.claimAutoImportedFuncInvocation("jsxDEV", "/jsx-dev-runtime");
    }
  }

  /**
   * Return the code to use for the createElement function, e.g.
   * `React.createElement`, including the following open-paren.
   *
   * This is the main function to use for the classic runtime. For the
   * automatic runtime, this function is used as a fallback function to
   * preserve behavior when there is a prop spread followed by an explicit
   * key. In that automatic runtime case, the function should be automatically
   * imported.
   */
  getCreateElementInvocationCode() {
    if (this.isAutomaticRuntime) {
      return this.claimAutoImportedFuncInvocation("createElement", "");
    } else {
      const {jsxPragmaInfo} = this;
      const resolvedPragmaBaseName = this.importProcessor
        ? this.importProcessor.getIdentifierReplacement(jsxPragmaInfo.base) || jsxPragmaInfo.base
        : jsxPragmaInfo.base;
      return `${resolvedPragmaBaseName}${jsxPragmaInfo.suffix}(`;
    }
  }

  /**
   * Return the code to use as the component when compiling a shorthand
   * fragment, e.g. `React.Fragment`.
   *
   * This may be called from either the classic or automatic runtime, and
   * the value should be auto-imported for the automatic runtime.
   */
  getFragmentCode() {
    if (this.isAutomaticRuntime) {
      return this.claimAutoImportedName(
        "Fragment",
        this.options.production ? "/jsx-runtime" : "/jsx-dev-runtime",
      );
    } else {
      const {jsxPragmaInfo} = this;
      const resolvedFragmentPragmaBaseName = this.importProcessor
        ? this.importProcessor.getIdentifierReplacement(jsxPragmaInfo.fragmentBase) ||
          jsxPragmaInfo.fragmentBase
        : jsxPragmaInfo.fragmentBase;
      return resolvedFragmentPragmaBaseName + jsxPragmaInfo.fragmentSuffix;
    }
  }

  /**
   * Return code that invokes the given function.
   *
   * When the imports transform is enabled, use the CJSImportTransformer
   * strategy of using `.call(void 0, ...` to avoid passing a `this` value in a
   * situation that would otherwise look like a method call.
   */
  claimAutoImportedFuncInvocation(funcName, importPathSuffix) {
    const funcCode = this.claimAutoImportedName(funcName, importPathSuffix);
    if (this.importProcessor) {
      return `${funcCode}.call(void 0, `;
    } else {
      return `${funcCode}(`;
    }
  }

  claimAutoImportedName(funcName, importPathSuffix) {
    if (this.importProcessor) {
      // CJS mode: claim a name for the module and mark it for import.
      const path = this.jsxImportSource + importPathSuffix;
      if (!this.cjsAutomaticModuleNameResolutions[path]) {
        this.cjsAutomaticModuleNameResolutions[path] =
          this.importProcessor.getFreeIdentifierForPath(path);
      }
      return `${this.cjsAutomaticModuleNameResolutions[path]}.${funcName}`;
    } else {
      // ESM mode: claim a name for this function and add it to the names that
      // should be auto-imported when the prefix is generated.
      if (!this.esmAutomaticImportNameResolutions[funcName]) {
        this.esmAutomaticImportNameResolutions[funcName] = this.nameManager.claimFreeName(
          `_${funcName}`,
        );
      }
      return this.esmAutomaticImportNameResolutions[funcName];
    }
  }

  /**
   * Process the first part of a tag, before any props.
   */
  processTagIntro() {
    // Walk forward until we see one of these patterns:
    // jsxName to start the first prop, preceded by another jsxName to end the tag name.
    // jsxName to start the first prop, preceded by greaterThan to end the type argument.
    // [open brace] to start the first prop.
    // [jsxTagEnd] to end the open-tag.
    // [slash, jsxTagEnd] to end the self-closing tag.
    let introEnd = this.tokens.currentIndex() + 1;
    while (
      this.tokens.tokens[introEnd].isType ||
      (!this.tokens.matches2AtIndex(introEnd - 1, TokenType.jsxName, TokenType.jsxName) &&
        !this.tokens.matches2AtIndex(introEnd - 1, TokenType.greaterThan, TokenType.jsxName) &&
        !this.tokens.matches1AtIndex(introEnd, TokenType.braceL) &&
        !this.tokens.matches1AtIndex(introEnd, TokenType.jsxTagEnd) &&
        !this.tokens.matches2AtIndex(introEnd, TokenType.slash, TokenType.jsxTagEnd))
    ) {
      introEnd++;
    }
    if (introEnd === this.tokens.currentIndex() + 1) {
      const tagName = this.tokens.identifierName();
      if (startsWithLowerCase(tagName)) {
        this.tokens.replaceToken(`'${tagName}'`);
      }
    }
    while (this.tokens.currentIndex() < introEnd) {
      this.rootTransformer.processToken();
    }
  }

  /**
   * Starting at the beginning of the props, add the props argument to
   * React.createElement, including the comma before it.
   */
  processPropsObjectWithDevInfo(elementLocationCode) {
    const devProps = this.options.production
      ? ""
      : `__self: this, __source: ${this.getDevSource(elementLocationCode)}`;
    if (!this.tokens.matches1(TokenType.jsxName) && !this.tokens.matches1(TokenType.braceL)) {
      if (devProps) {
        this.tokens.appendCode(`, {${devProps}}`);
      } else {
        this.tokens.appendCode(`, null`);
      }
      return;
    }
    this.tokens.appendCode(`, {`);
    this.processProps(false);
    if (devProps) {
      this.tokens.appendCode(` ${devProps}}`);
    } else {
      this.tokens.appendCode("}");
    }
  }

  /**
   * Transform the core part of the props, assuming that a { has already been
   * inserted before us and that a } will be inserted after us.
   *
   * If extractKeyCode is true (i.e. when using any jsx... function), any prop
   * named "key" has its code captured and returned rather than being emitted to
   * the output code. This shifts line numbers, and emitting the code later will
   * correct line numbers again. If no key is found or if extractKeyCode is
   * false, this function returns null.
   */
  processProps(extractKeyCode) {
    let keyCode = null;
    while (true) {
      if (this.tokens.matches2(TokenType.jsxName, TokenType.eq)) {
        // This is a regular key={value} or key="value" prop.
        const propName = this.tokens.identifierName();
        if (extractKeyCode && propName === "key") {
          if (keyCode !== null) {
            // The props list has multiple keys. Different implementations are
            // inconsistent about what to do here: as of this writing, Babel and
            // swc keep the *last* key and completely remove the rest, while
            // TypeScript uses the *first* key and leaves the others as regular
            // props. The React team collaborated with Babel on the
            // implementation of this behavior, so presumably the Babel behavior
            // is the one to use.
            // Since we won't ever be emitting the previous key code, we need to
            // at least emit its newlines here so that the line numbers match up
            // in the long run.
            this.tokens.appendCode(keyCode.replace(/[^\n]/g, ""));
          }
          // key
          this.tokens.removeToken();
          // =
          this.tokens.removeToken();
          const snapshot = this.tokens.snapshot();
          this.processPropValue();
          keyCode = this.tokens.dangerouslyGetAndRemoveCodeSinceSnapshot(snapshot);
          // Don't add a comma
          continue;
        } else {
          this.processPropName(propName);
          this.tokens.replaceToken(": ");
          this.processPropValue();
        }
      } else if (this.tokens.matches1(TokenType.jsxName)) {
        // This is a shorthand prop like <input disabled />.
        const propName = this.tokens.identifierName();
        this.processPropName(propName);
        this.tokens.appendCode(": true");
      } else if (this.tokens.matches1(TokenType.braceL)) {
        // This is prop spread, like <div {...getProps()}>, which we can pass
        // through fairly directly as an object spread.
        this.tokens.replaceToken("");
        this.rootTransformer.processBalancedCode();
        this.tokens.replaceToken("");
      } else {
        break;
      }
      this.tokens.appendCode(",");
    }
    return keyCode;
  }

  processPropName(propName) {
    if (propName.includes("-")) {
      this.tokens.replaceToken(`'${propName}'`);
    } else {
      this.tokens.copyToken();
    }
  }

  processPropValue() {
    if (this.tokens.matches1(TokenType.braceL)) {
      this.tokens.replaceToken("");
      this.rootTransformer.processBalancedCode();
      this.tokens.replaceToken("");
    } else if (this.tokens.matches1(TokenType.jsxTagStart)) {
      this.processJSXTag();
    } else {
      this.processStringPropValue();
    }
  }

  processStringPropValue() {
    const token = this.tokens.currentToken();
    const valueCode = this.tokens.code.slice(token.start + 1, token.end - 1);
    const replacementCode = formatJSXTextReplacement(valueCode);
    const literalCode = formatJSXStringValueLiteral(valueCode);
    this.tokens.replaceToken(literalCode + replacementCode);
  }

  /**
   * Starting in the middle of the props object literal, produce an additional
   * prop for the children and close the object literal.
   */
  processAutomaticChildrenAndEndProps(jsxRole) {
    if (jsxRole === JSXRole.StaticChildren) {
      this.tokens.appendCode(" children: [");
      this.processChildren(false);
      this.tokens.appendCode("]}");
    } else {
      // The parser information tells us whether we will see a real child or if
      // all remaining children (if any) will resolve to empty. If there are no
      // non-empty children, don't emit a children prop at all, but still
      // process children so that we properly transform the code into nothing.
      if (jsxRole === JSXRole.OneChild) {
        this.tokens.appendCode(" children: ");
      }
      this.processChildren(false);
      this.tokens.appendCode("}");
    }
  }

  /**
   * Transform children into a comma-separated list, which will be either
   * arguments to createElement or array elements of a children prop.
   */
  processChildren(needsInitialComma) {
    let needsComma = needsInitialComma;
    while (true) {
      if (this.tokens.matches2(TokenType.jsxTagStart, TokenType.slash)) {
        // Closing tag, so no more children.
        return;
      }
      let didEmitElement = false;
      if (this.tokens.matches1(TokenType.braceL)) {
        if (this.tokens.matches2(TokenType.braceL, TokenType.braceR)) {
          // Empty interpolations and comment-only interpolations are allowed
          // and don't create an extra child arg.
          this.tokens.replaceToken("");
          this.tokens.replaceToken("");
        } else {
          // Interpolated expression.
          this.tokens.replaceToken(needsComma ? ", " : "");
          this.rootTransformer.processBalancedCode();
          this.tokens.replaceToken("");
          didEmitElement = true;
        }
      } else if (this.tokens.matches1(TokenType.jsxTagStart)) {
        // Child JSX element
        this.tokens.appendCode(needsComma ? ", " : "");
        this.processJSXTag();
        didEmitElement = true;
      } else if (this.tokens.matches1(TokenType.jsxText) || this.tokens.matches1(TokenType.jsxEmptyText)) {
        didEmitElement = this.processChildTextElement(needsComma);
      } else {
        throw new Error("Unexpected token when processing JSX children.");
      }
      if (didEmitElement) {
        needsComma = true;
      }
    }
  }

  /**
   * Turn a JSX text element into a string literal, or nothing at all if the JSX
   * text resolves to the empty string.
   *
   * Returns true if a string literal is emitted, false otherwise.
   */
  processChildTextElement(needsComma) {
    const token = this.tokens.currentToken();
    const valueCode = this.tokens.code.slice(token.start, token.end);
    const replacementCode = formatJSXTextReplacement(valueCode);
    const literalCode = formatJSXTextLiteral(valueCode);
    if (literalCode === '""') {
      this.tokens.replaceToken(replacementCode);
      return false;
    } else {
      this.tokens.replaceToken(`${needsComma ? ", " : ""}${literalCode}${replacementCode}`);
      return true;
    }
  }

  getDevSource(elementLocationCode) {
    return `{fileName: ${this.getFilenameVarName()}, ${elementLocationCode}}`;
  }

  getFilenameVarName() {
    if (!this.filenameVarName) {
      this.filenameVarName = this.nameManager.claimFreeName("_jsxFileName");
    }
    return this.filenameVarName;
  }
}

/**
 * Spec for identifiers: https://tc39.github.io/ecma262/#prod-IdentifierStart.
 *
 * Really only treat anything starting with a-z as tag names.  `_`, `$`, `é`
 * should be treated as component names
 */
function startsWithLowerCase(s) {
  const firstChar = s.charCodeAt(0);
  return firstChar >= charCodes.lowercaseA && firstChar <= charCodes.lowercaseZ;
}

/**
 * Turn the given jsxText string into a JS string literal. Leading and trailing
 * whitespace on lines is removed, except immediately after the open-tag and
 * before the close-tag. Empty lines are completely removed, and spaces are
 * added between lines after that.
 *
 * We use JSON.stringify to introduce escape characters as necessary, and trim
 * the start and end of each line and remove blank lines.
 */
function formatJSXTextLiteral(text) {
  let result = "";
  let whitespace = "";

  let isInInitialLineWhitespace = false;
  let seenNonWhitespace = false;
  for (let i = 0; i < text.length; i++) {
    const c = text[i];
    if (c === " " || c === "\t" || c === "\r") {
      if (!isInInitialLineWhitespace) {
        whitespace += c;
      }
    } else if (c === "\n") {
      whitespace = "";
      isInInitialLineWhitespace = true;
    } else {
      if (seenNonWhitespace && isInInitialLineWhitespace) {
        result += " ";
      }
      result += whitespace;
      whitespace = "";
      if (c === "&") {
        const {entity, newI} = processEntity(text, i + 1);
        i = newI - 1;
        result += entity;
      } else {
        result += c;
      }
      seenNonWhitespace = true;
      isInInitialLineWhitespace = false;
    }
  }
  if (!isInInitialLineWhitespace) {
    result += whitespace;
  }
  return JSON.stringify(result);
}

/**
 * Produce the code that should be printed after the JSX text string literal,
 * with most content removed, but all newlines preserved and all spacing at the
 * end preserved.
 */
function formatJSXTextReplacement(text) {
  let numNewlines = 0;
  let numSpaces = 0;
  for (const c of text) {
    if (c === "\n") {
      numNewlines++;
      numSpaces = 0;
    } else if (c === " ") {
      numSpaces++;
    }
  }
  return "\n".repeat(numNewlines) + " ".repeat(numSpaces);
}

/**
 * Format a string in the value position of a JSX prop.
 *
 * Use the same implementation as convertAttribute from
 * babel-helper-builder-react-jsx.
 */
function formatJSXStringValueLiteral(text) {
  let result = "";
  for (let i = 0; i < text.length; i++) {
    const c = text[i];
    if (c === "\n") {
      if (/\s/.test(text[i + 1])) {
        result += " ";
        while (i < text.length && /\s/.test(text[i + 1])) {
          i++;
        }
      } else {
        result += "\n";
      }
    } else if (c === "&") {
      const {entity, newI} = processEntity(text, i + 1);
      result += entity;
      i = newI - 1;
    } else {
      result += c;
    }
  }
  return JSON.stringify(result);
}

/**
 * Starting at a &, see if there's an HTML entity (specified by name, decimal
 * char code, or hex char code) and return it if so.
 *
 * Modified from jsxReadString in babel-parser.
 */
function processEntity(text, indexAfterAmpersand) {
  let str = "";
  let count = 0;
  let entity;
  let i = indexAfterAmpersand;

  if (text[i] === "#") {
    let radix = 10;
    i++;
    let numStart;
    if (text[i] === "x") {
      radix = 16;
      i++;
      numStart = i;
      while (i < text.length && isHexDigit(text.charCodeAt(i))) {
        i++;
      }
    } else {
      numStart = i;
      while (i < text.length && isDecimalDigit(text.charCodeAt(i))) {
        i++;
      }
    }
    if (text[i] === ";") {
      const numStr = text.slice(numStart, i);
      if (numStr) {
        i++;
        entity = String.fromCodePoint(parseInt(numStr, radix));
      }
    }
  } else {
    while (i < text.length && count++ < 10) {
      const ch = text[i];
      i++;
      if (ch === ";") {
        entity = XHTMLEntities.get(str);
        break;
      }
      str += ch;
    }
  }

  if (!entity) {
    return {entity: "&", newI: indexAfterAmpersand};
  }
  return {entity, newI: i};
}

function isDecimalDigit(code) {
  return code >= charCodes.digit0 && code <= charCodes.digit9;
}

function isHexDigit(code) {
  return (
    (code >= charCodes.digit0 && code <= charCodes.digit9) ||
    (code >= charCodes.lowercaseA && code <= charCodes.lowercaseF) ||
    (code >= charCodes.uppercaseA && code <= charCodes.uppercaseF)
  );
}

function getNonTypeIdentifiers(tokens, options) {
  const jsxPragmaInfo = getJSXPragmaInfo(options);
  const nonTypeIdentifiers = new Set();
  for (let i = 0; i < tokens.tokens.length; i++) {
    const token = tokens.tokens[i];
    if (
      token.type === TokenType.name &&
      !token.isType &&
      (token.identifierRole === IdentifierRole.Access ||
        token.identifierRole === IdentifierRole.ObjectShorthand ||
        token.identifierRole === IdentifierRole.ExportAccess) &&
      !token.shadowsGlobal
    ) {
      nonTypeIdentifiers.add(tokens.identifierNameForToken(token));
    }
    if (token.type === TokenType.jsxTagStart) {
      nonTypeIdentifiers.add(jsxPragmaInfo.base);
    }
    if (
      token.type === TokenType.jsxTagStart &&
      i + 1 < tokens.tokens.length &&
      tokens.tokens[i + 1].type === TokenType.jsxTagEnd
    ) {
      nonTypeIdentifiers.add(jsxPragmaInfo.base);
      nonTypeIdentifiers.add(jsxPragmaInfo.fragmentBase);
    }
    if (token.type === TokenType.jsxName && token.identifierRole === IdentifierRole.Access) {
      const identifierName = tokens.identifierNameForToken(token);
      // Lower-case single-component tag names like "div" don't count.
      if (!startsWithLowerCase(identifierName) || tokens.tokens[i + 1].type === TokenType.dot) {
        nonTypeIdentifiers.add(tokens.identifierNameForToken(token));
      }
    }
  }
  return nonTypeIdentifiers;
}

/**
 * Class responsible for preprocessing and bookkeeping import and export declarations within the
 * file.
 *
 * TypeScript uses a simpler mechanism that does not use functions like interopRequireDefault and
 * interopRequireWildcard, so we also allow that mode for compatibility.
 */
class CJSImportProcessor {
   __init() {this.nonTypeIdentifiers = new Set();}
   __init2() {this.importInfoByPath = new Map();}
   __init3() {this.importsToReplace = new Map();}
   __init4() {this.identifierReplacements = new Map();}
   __init5() {this.exportBindingsByLocalName = new Map();}

  constructor(
     nameManager,
     tokens,
     enableLegacyTypeScriptModuleInterop,
     options,
     isTypeScriptTransformEnabled,
     helperManager,
  ) {this.nameManager = nameManager;this.tokens = tokens;this.enableLegacyTypeScriptModuleInterop = enableLegacyTypeScriptModuleInterop;this.options = options;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;this.helperManager = helperManager;CJSImportProcessor.prototype.__init.call(this);CJSImportProcessor.prototype.__init2.call(this);CJSImportProcessor.prototype.__init3.call(this);CJSImportProcessor.prototype.__init4.call(this);CJSImportProcessor.prototype.__init5.call(this);}

  preprocessTokens() {
    for (let i = 0; i < this.tokens.tokens.length; i++) {
      if (
        this.tokens.matches1AtIndex(i, TokenType._import) &&
        !this.tokens.matches3AtIndex(i, TokenType._import, TokenType.name, TokenType.eq)
      ) {
        this.preprocessImportAtIndex(i);
      }
      if (
        this.tokens.matches1AtIndex(i, TokenType._export) &&
        !this.tokens.matches2AtIndex(i, TokenType._export, TokenType.eq)
      ) {
        this.preprocessExportAtIndex(i);
      }
    }
    this.generateImportReplacements();
  }

  /**
   * In TypeScript, import statements that only import types should be removed. This does not count
   * bare imports.
   */
  pruneTypeOnlyImports() {
    this.nonTypeIdentifiers = getNonTypeIdentifiers(this.tokens, this.options);
    for (const [path, importInfo] of this.importInfoByPath.entries()) {
      if (
        importInfo.hasBareImport ||
        importInfo.hasStarExport ||
        importInfo.exportStarNames.length > 0 ||
        importInfo.namedExports.length > 0
      ) {
        continue;
      }
      const names = [
        ...importInfo.defaultNames,
        ...importInfo.wildcardNames,
        ...importInfo.namedImports.map(({localName}) => localName),
      ];
      if (names.every((name) => this.isTypeName(name))) {
        this.importsToReplace.set(path, "");
      }
    }
  }

  isTypeName(name) {
    return this.isTypeScriptTransformEnabled && !this.nonTypeIdentifiers.has(name);
  }

   generateImportReplacements() {
    for (const [path, importInfo] of this.importInfoByPath.entries()) {
      const {
        defaultNames,
        wildcardNames,
        namedImports,
        namedExports,
        exportStarNames,
        hasStarExport,
      } = importInfo;

      if (
        defaultNames.length === 0 &&
        wildcardNames.length === 0 &&
        namedImports.length === 0 &&
        namedExports.length === 0 &&
        exportStarNames.length === 0 &&
        !hasStarExport
      ) {
        // Import is never used, so don't even assign a name.
        this.importsToReplace.set(path, `require('${path}');`);
        continue;
      }

      const primaryImportName = this.getFreeIdentifierForPath(path);
      let secondaryImportName;
      if (this.enableLegacyTypeScriptModuleInterop) {
        secondaryImportName = primaryImportName;
      } else {
        secondaryImportName =
          wildcardNames.length > 0 ? wildcardNames[0] : this.getFreeIdentifierForPath(path);
      }
      let requireCode = `var ${primaryImportName} = require('${path}');`;
      if (wildcardNames.length > 0) {
        for (const wildcardName of wildcardNames) {
          const moduleExpr = this.enableLegacyTypeScriptModuleInterop
            ? primaryImportName
            : `${this.helperManager.getHelperName("interopRequireWildcard")}(${primaryImportName})`;
          requireCode += ` var ${wildcardName} = ${moduleExpr};`;
        }
      } else if (exportStarNames.length > 0 && secondaryImportName !== primaryImportName) {
        requireCode += ` var ${secondaryImportName} = ${this.helperManager.getHelperName(
          "interopRequireWildcard",
        )}(${primaryImportName});`;
      } else if (defaultNames.length > 0 && secondaryImportName !== primaryImportName) {
        requireCode += ` var ${secondaryImportName} = ${this.helperManager.getHelperName(
          "interopRequireDefault",
        )}(${primaryImportName});`;
      }

      for (const {importedName, localName} of namedExports) {
        requireCode += ` ${this.helperManager.getHelperName(
          "createNamedExportFrom",
        )}(${primaryImportName}, '${localName}', '${importedName}');`;
      }
      for (const exportStarName of exportStarNames) {
        requireCode += ` exports.${exportStarName} = ${secondaryImportName};`;
      }
      if (hasStarExport) {
        requireCode += ` ${this.helperManager.getHelperName(
          "createStarExport",
        )}(${primaryImportName});`;
      }

      this.importsToReplace.set(path, requireCode);

      for (const defaultName of defaultNames) {
        this.identifierReplacements.set(defaultName, `${secondaryImportName}.default`);
      }
      for (const {importedName, localName} of namedImports) {
        this.identifierReplacements.set(localName, `${primaryImportName}.${importedName}`);
      }
    }
  }

  getFreeIdentifierForPath(path) {
    const components = path.split("/");
    const lastComponent = components[components.length - 1];
    const baseName = lastComponent.replace(/\W/g, "");
    return this.nameManager.claimFreeName(`_${baseName}`);
  }

   preprocessImportAtIndex(index) {
    const defaultNames = [];
    const wildcardNames = [];
    const namedImports = [];

    index++;
    if (
      (this.tokens.matchesContextualAtIndex(index, ContextualKeyword._type) ||
        this.tokens.matches1AtIndex(index, TokenType._typeof)) &&
      !this.tokens.matches1AtIndex(index + 1, TokenType.comma) &&
      !this.tokens.matchesContextualAtIndex(index + 1, ContextualKeyword._from)
    ) {
      // import type declaration, so no need to process anything.
      return;
    }

    if (this.tokens.matches1AtIndex(index, TokenType.parenL)) {
      // Dynamic import, so nothing to do
      return;
    }

    if (this.tokens.matches1AtIndex(index, TokenType.name)) {
      defaultNames.push(this.tokens.identifierNameAtIndex(index));
      index++;
      if (this.tokens.matches1AtIndex(index, TokenType.comma)) {
        index++;
      }
    }

    if (this.tokens.matches1AtIndex(index, TokenType.star)) {
      // * as
      index += 2;
      wildcardNames.push(this.tokens.identifierNameAtIndex(index));
      index++;
    }

    if (this.tokens.matches1AtIndex(index, TokenType.braceL)) {
      const result = this.getNamedImports(index + 1);
      index = result.newIndex;

      for (const namedImport of result.namedImports) {
        // Treat {default as X} as a default import to ensure usage of require interop helper
        if (namedImport.importedName === "default") {
          defaultNames.push(namedImport.localName);
        } else {
          namedImports.push(namedImport);
        }
      }
    }

    if (this.tokens.matchesContextualAtIndex(index, ContextualKeyword._from)) {
      index++;
    }

    if (!this.tokens.matches1AtIndex(index, TokenType.string)) {
      throw new Error("Expected string token at the end of import statement.");
    }
    const path = this.tokens.stringValueAtIndex(index);
    const importInfo = this.getImportInfo(path);
    importInfo.defaultNames.push(...defaultNames);
    importInfo.wildcardNames.push(...wildcardNames);
    importInfo.namedImports.push(...namedImports);
    if (defaultNames.length === 0 && wildcardNames.length === 0 && namedImports.length === 0) {
      importInfo.hasBareImport = true;
    }
  }

   preprocessExportAtIndex(index) {
    if (
      this.tokens.matches2AtIndex(index, TokenType._export, TokenType._var) ||
      this.tokens.matches2AtIndex(index, TokenType._export, TokenType._let) ||
      this.tokens.matches2AtIndex(index, TokenType._export, TokenType._const)
    ) {
      this.preprocessVarExportAtIndex(index);
    } else if (
      this.tokens.matches2AtIndex(index, TokenType._export, TokenType._function) ||
      this.tokens.matches2AtIndex(index, TokenType._export, TokenType._class)
    ) {
      const exportName = this.tokens.identifierNameAtIndex(index + 2);
      this.addExportBinding(exportName, exportName);
    } else if (this.tokens.matches3AtIndex(index, TokenType._export, TokenType.name, TokenType._function)) {
      const exportName = this.tokens.identifierNameAtIndex(index + 3);
      this.addExportBinding(exportName, exportName);
    } else if (this.tokens.matches2AtIndex(index, TokenType._export, TokenType.braceL)) {
      this.preprocessNamedExportAtIndex(index);
    } else if (this.tokens.matches2AtIndex(index, TokenType._export, TokenType.star)) {
      this.preprocessExportStarAtIndex(index);
    }
  }

   preprocessVarExportAtIndex(index) {
    let depth = 0;
    // Handle cases like `export let {x} = y;`, starting at the open-brace in that case.
    for (let i = index + 2; ; i++) {
      if (
        this.tokens.matches1AtIndex(i, TokenType.braceL) ||
        this.tokens.matches1AtIndex(i, TokenType.dollarBraceL) ||
        this.tokens.matches1AtIndex(i, TokenType.bracketL)
      ) {
        depth++;
      } else if (
        this.tokens.matches1AtIndex(i, TokenType.braceR) ||
        this.tokens.matches1AtIndex(i, TokenType.bracketR)
      ) {
        depth--;
      } else if (depth === 0 && !this.tokens.matches1AtIndex(i, TokenType.name)) {
        break;
      } else if (this.tokens.matches1AtIndex(1, TokenType.eq)) {
        const endIndex = this.tokens.currentToken().rhsEndIndex;
        if (endIndex == null) {
          throw new Error("Expected = token with an end index.");
        }
        i = endIndex - 1;
      } else {
        const token = this.tokens.tokens[i];
        if (isDeclaration(token)) {
          const exportName = this.tokens.identifierNameAtIndex(i);
          this.identifierReplacements.set(exportName, `exports.${exportName}`);
        }
      }
    }
  }

  /**
   * Walk this export statement just in case it's an export...from statement.
   * If it is, combine it into the import info for that path. Otherwise, just
   * bail out; it'll be handled later.
   */
   preprocessNamedExportAtIndex(index) {
    // export {
    index += 2;
    const {newIndex, namedImports} = this.getNamedImports(index);
    index = newIndex;

    if (this.tokens.matchesContextualAtIndex(index, ContextualKeyword._from)) {
      index++;
    } else {
      // Reinterpret "a as b" to be local/exported rather than imported/local.
      for (const {importedName: localName, localName: exportedName} of namedImports) {
        this.addExportBinding(localName, exportedName);
      }
      return;
    }

    if (!this.tokens.matches1AtIndex(index, TokenType.string)) {
      throw new Error("Expected string token at the end of import statement.");
    }
    const path = this.tokens.stringValueAtIndex(index);
    const importInfo = this.getImportInfo(path);
    importInfo.namedExports.push(...namedImports);
  }

   preprocessExportStarAtIndex(index) {
    let exportedName = null;
    if (this.tokens.matches3AtIndex(index, TokenType._export, TokenType.star, TokenType._as)) {
      // export * as
      index += 3;
      exportedName = this.tokens.identifierNameAtIndex(index);
      // foo from
      index += 2;
    } else {
      // export * from
      index += 3;
    }
    if (!this.tokens.matches1AtIndex(index, TokenType.string)) {
      throw new Error("Expected string token at the end of star export statement.");
    }
    const path = this.tokens.stringValueAtIndex(index);
    const importInfo = this.getImportInfo(path);
    if (exportedName !== null) {
      importInfo.exportStarNames.push(exportedName);
    } else {
      importInfo.hasStarExport = true;
    }
  }

   getNamedImports(index) {
    const namedImports = [];
    while (true) {
      if (this.tokens.matches1AtIndex(index, TokenType.braceR)) {
        index++;
        break;
      }

      const specifierInfo = getImportExportSpecifierInfo(this.tokens, index);
      index = specifierInfo.endIndex;
      if (!specifierInfo.isType) {
        namedImports.push({
          importedName: specifierInfo.leftName,
          localName: specifierInfo.rightName,
        });
      }

      if (this.tokens.matches2AtIndex(index, TokenType.comma, TokenType.braceR)) {
        index += 2;
        break;
      } else if (this.tokens.matches1AtIndex(index, TokenType.braceR)) {
        index++;
        break;
      } else if (this.tokens.matches1AtIndex(index, TokenType.comma)) {
        index++;
      } else {
        throw new Error(`Unexpected token: ${JSON.stringify(this.tokens.tokens[index])}`);
      }
    }
    return {newIndex: index, namedImports};
  }

  /**
   * Get a mutable import info object for this path, creating one if it doesn't
   * exist yet.
   */
   getImportInfo(path) {
    const existingInfo = this.importInfoByPath.get(path);
    if (existingInfo) {
      return existingInfo;
    }
    const newInfo = {
      defaultNames: [],
      wildcardNames: [],
      namedImports: [],
      namedExports: [],
      hasBareImport: false,
      exportStarNames: [],
      hasStarExport: false,
    };
    this.importInfoByPath.set(path, newInfo);
    return newInfo;
  }

   addExportBinding(localName, exportedName) {
    if (!this.exportBindingsByLocalName.has(localName)) {
      this.exportBindingsByLocalName.set(localName, []);
    }
    this.exportBindingsByLocalName.get(localName).push(exportedName);
  }

  /**
   * Return the code to use for the import for this path, or the empty string if
   * the code has already been "claimed" by a previous import.
   */
  claimImportCode(importPath) {
    const result = this.importsToReplace.get(importPath);
    this.importsToReplace.set(importPath, "");
    return result || "";
  }

  getIdentifierReplacement(identifierName) {
    return this.identifierReplacements.get(identifierName) || null;
  }

  /**
   * Return a string like `exports.foo = exports.bar`.
   */
  resolveExportBinding(assignedName) {
    const exportedNames = this.exportBindingsByLocalName.get(assignedName);
    if (!exportedNames || exportedNames.length === 0) {
      return null;
    }
    return exportedNames.map((exportedName) => `exports.${exportedName}`).join(" = ");
  }

  /**
   * Return all imported/exported names where we might be interested in whether usages of those
   * names are shadowed.
   */
  getGlobalNames() {
    return new Set([
      ...this.identifierReplacements.keys(),
      ...this.exportBindingsByLocalName.keys(),
    ]);
  }
}

/**
 * Generate a simple source map indicating that each line maps directly to the original line.
 */
function computeSourceMap(
  code,
  filePath,
  {compiledFilename},
) {
  let mappings = "AAAA";
  for (let i = 0; i < code.length; i++) {
    if (code.charCodeAt(i) === charCodes.lineFeed) {
      mappings += ";AACA";
    }
  }
  return {
    version: 3,
    file: compiledFilename || "",
    sources: [filePath],
    mappings,
    names: [],
  };
}

const HELPERS = {
  require: `
    import {createRequire as CREATE_REQUIRE_NAME} from "module";
    const require = CREATE_REQUIRE_NAME(import.meta.url);
  `,
  interopRequireWildcard: `
    function interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }
  `,
  interopRequireDefault: `
    function interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
  `,
  createNamedExportFrom: `
    function createNamedExportFrom(obj, localName, importedName) {
      Object.defineProperty(exports, localName, {enumerable: true, configurable: true, get: () => obj[importedName]});
    }
  `,
  // Note that TypeScript and Babel do this differently; TypeScript does a simple existence
  // check in the exports object and does a plain assignment, whereas Babel uses
  // defineProperty and builds an object of explicitly-exported names so that star exports can
  // always take lower precedence. For now, we do the easier TypeScript thing.
  createStarExport: `
    function createStarExport(obj) {
      Object.keys(obj)
        .filter((key) => key !== "default" && key !== "__esModule")
        .forEach((key) => {
          if (exports.hasOwnProperty(key)) {
            return;
          }
          Object.defineProperty(exports, key, {enumerable: true, configurable: true, get: () => obj[key]});
        });
    }
  `,
  nullishCoalesce: `
    function nullishCoalesce(lhs, rhsFn) {
      if (lhs != null) {
        return lhs;
      } else {
        return rhsFn();
      }
    }
  `,
  asyncNullishCoalesce: `
    async function asyncNullishCoalesce(lhs, rhsFn) {
      if (lhs != null) {
        return lhs;
      } else {
        return await rhsFn();
      }
    }
  `,
  optionalChain: `
    function optionalChain(ops) {
      let lastAccessLHS = undefined;
      let value = ops[0];
      let i = 1;
      while (i < ops.length) {
        const op = ops[i];
        const fn = ops[i + 1];
        i += 2;
        if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
          return undefined;
        }
        if (op === 'access' || op === 'optionalAccess') {
          lastAccessLHS = value;
          value = fn(value);
        } else if (op === 'call' || op === 'optionalCall') {
          value = fn((...args) => value.call(lastAccessLHS, ...args));
          lastAccessLHS = undefined;
        }
      }
      return value;
    }
  `,
  asyncOptionalChain: `
    async function asyncOptionalChain(ops) {
      let lastAccessLHS = undefined;
      let value = ops[0];
      let i = 1;
      while (i < ops.length) {
        const op = ops[i];
        const fn = ops[i + 1];
        i += 2;
        if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {
          return undefined;
        }
        if (op === 'access' || op === 'optionalAccess') {
          lastAccessLHS = value;
          value = await fn(value);
        } else if (op === 'call' || op === 'optionalCall') {
          value = await fn((...args) => value.call(lastAccessLHS, ...args));
          lastAccessLHS = undefined;
        }
      }
      return value;
    }
  `,
  optionalChainDelete: `
    function optionalChainDelete(ops) {
      const result = OPTIONAL_CHAIN_NAME(ops);
      return result == null ? true : result;
    }
  `,
  asyncOptionalChainDelete: `
    async function asyncOptionalChainDelete(ops) {
      const result = await ASYNC_OPTIONAL_CHAIN_NAME(ops);
      return result == null ? true : result;
    }
  `,
};

class HelperManager {
  __init() {this.helperNames = {};}
  __init2() {this.createRequireName = null;}
  constructor( nameManager) {this.nameManager = nameManager;HelperManager.prototype.__init.call(this);HelperManager.prototype.__init2.call(this);}

  getHelperName(baseName) {
    let helperName = this.helperNames[baseName];
    if (helperName) {
      return helperName;
    }
    helperName = this.nameManager.claimFreeName(`_${baseName}`);
    this.helperNames[baseName] = helperName;
    return helperName;
  }

  emitHelpers() {
    let resultCode = "";
    if (this.helperNames.optionalChainDelete) {
      this.getHelperName("optionalChain");
    }
    if (this.helperNames.asyncOptionalChainDelete) {
      this.getHelperName("asyncOptionalChain");
    }
    for (const [baseName, helperCodeTemplate] of Object.entries(HELPERS)) {
      const helperName = this.helperNames[baseName];
      let helperCode = helperCodeTemplate;
      if (baseName === "optionalChainDelete") {
        helperCode = helperCode.replace("OPTIONAL_CHAIN_NAME", this.helperNames.optionalChain);
      } else if (baseName === "asyncOptionalChainDelete") {
        helperCode = helperCode.replace(
          "ASYNC_OPTIONAL_CHAIN_NAME",
          this.helperNames.asyncOptionalChain,
        );
      } else if (baseName === "require") {
        if (this.createRequireName === null) {
          this.createRequireName = this.nameManager.claimFreeName("_createRequire");
        }
        helperCode = helperCode.replace(/CREATE_REQUIRE_NAME/g, this.createRequireName);
      }
      if (helperName) {
        resultCode += " ";
        resultCode += helperCode.replace(baseName, helperName).replace(/\s+/g, " ").trim();
      }
    }
    return resultCode;
  }
}

/**
 * Traverse the given tokens and modify them if necessary to indicate that some names shadow global
 * variables.
 */
function identifyShadowedGlobals(
  tokens,
  scopes,
  globalNames,
) {
  if (!hasShadowedGlobals(tokens, globalNames)) {
    return;
  }
  markShadowedGlobals(tokens, scopes, globalNames);
}

/**
 * We can do a fast up-front check to see if there are any declarations to global names. If not,
 * then there's no point in computing scope assignments.
 */
// Exported for testing.
function hasShadowedGlobals(tokens, globalNames) {
  for (const token of tokens.tokens) {
    if (
      token.type === TokenType.name &&
      isNonTopLevelDeclaration(token) &&
      globalNames.has(tokens.identifierNameForToken(token))
    ) {
      return true;
    }
  }
  return false;
}

function markShadowedGlobals(
  tokens,
  scopes,
  globalNames,
) {
  const scopeStack = [];
  let scopeIndex = scopes.length - 1;
  // Scopes were generated at completion time, so they're sorted by end index, so we can maintain a
  // good stack by going backwards through them.
  for (let i = tokens.tokens.length - 1; ; i--) {
    while (scopeStack.length > 0 && scopeStack[scopeStack.length - 1].startTokenIndex === i + 1) {
      scopeStack.pop();
    }
    while (scopeIndex >= 0 && scopes[scopeIndex].endTokenIndex === i + 1) {
      scopeStack.push(scopes[scopeIndex]);
      scopeIndex--;
    }
    // Process scopes after the last iteration so we can make sure we pop all of them.
    if (i < 0) {
      break;
    }

    const token = tokens.tokens[i];
    const name = tokens.identifierNameForToken(token);
    if (scopeStack.length > 1 && token.type === TokenType.name && globalNames.has(name)) {
      if (isBlockScopedDeclaration(token)) {
        markShadowedForScope(scopeStack[scopeStack.length - 1], tokens, name);
      } else if (isFunctionScopedDeclaration(token)) {
        let stackIndex = scopeStack.length - 1;
        while (stackIndex > 0 && !scopeStack[stackIndex].isFunctionScope) {
          stackIndex--;
        }
        if (stackIndex < 0) {
          throw new Error("Did not find parent function scope.");
        }
        markShadowedForScope(scopeStack[stackIndex], tokens, name);
      }
    }
  }
  if (scopeStack.length > 0) {
    throw new Error("Expected empty scope stack after processing file.");
  }
}

function markShadowedForScope(scope, tokens, name) {
  for (let i = scope.startTokenIndex; i < scope.endTokenIndex; i++) {
    const token = tokens.tokens[i];
    if (
      (token.type === TokenType.name || token.type === TokenType.jsxName) &&
      tokens.identifierNameForToken(token) === name
    ) {
      token.shadowsGlobal = true;
    }
  }
}

/**
 * Get all identifier names in the code, in order, including duplicates.
 */
function getIdentifierNames(code, tokens) {
  const names = [];
  for (const token of tokens) {
    if (token.type === TokenType.name) {
      names.push(code.slice(token.start, token.end));
    }
  }
  return names;
}

class NameManager {
    __init() {this.usedNames = new Set();}

  constructor(code, tokens) {NameManager.prototype.__init.call(this);
    this.usedNames = new Set(getIdentifierNames(code, tokens));
  }

  claimFreeName(name) {
    const newName = this.findFreeName(name);
    this.usedNames.add(newName);
    return newName;
  }

  findFreeName(name) {
    if (!this.usedNames.has(name)) {
      return name;
    }
    let suffixNum = 2;
    while (this.usedNames.has(name + String(suffixNum))) {
      suffixNum++;
    }
    return name + String(suffixNum);
  }
}

var dist = {};

var types = {};

var util = {};

var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(util, "__esModule", { value: true });
util.DetailContext = util.NoopContext = util.VError = void 0;
/**
 * Error thrown by validation. Besides an informative message, it includes the path to the
 * property which triggered the failure.
 */
var VError = /** @class */ (function (_super) {
    __extends(VError, _super);
    function VError(path, message) {
        var _this = _super.call(this, message) || this;
        _this.path = path;
        // See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work for info about this workaround.
        Object.setPrototypeOf(_this, VError.prototype);
        return _this;
    }
    return VError;
}(Error));
util.VError = VError;
/**
 * Fast implementation of IContext used for first-pass validation. If that fails, we can validate
 * using DetailContext to collect error messages. That's faster for the common case when messages
 * normally pass validation.
 */
var NoopContext = /** @class */ (function () {
    function NoopContext() {
    }
    NoopContext.prototype.fail = function (relPath, message, score) {
        return false;
    };
    NoopContext.prototype.unionResolver = function () { return this; };
    NoopContext.prototype.createContext = function () { return this; };
    NoopContext.prototype.resolveUnion = function (ur) { };
    return NoopContext;
}());
util.NoopContext = NoopContext;
/**
 * Complete implementation of IContext that collects meaningfull errors.
 */
var DetailContext = /** @class */ (function () {
    function DetailContext() {
        // Stack of property names and associated messages for reporting helpful error messages.
        this._propNames = [""];
        this._messages = [null];
        // Score is used to choose the best union member whose DetailContext to use for reporting.
        // Higher score means better match (or rather less severe mismatch).
        this._score = 0;
    }
    DetailContext.prototype.fail = function (relPath, message, score) {
        this._propNames.push(relPath);
        this._messages.push(message);
        this._score += score;
        return false;
    };
    DetailContext.prototype.unionResolver = function () {
        return new DetailUnionResolver();
    };
    DetailContext.prototype.resolveUnion = function (unionResolver) {
        var _a, _b;
        var u = unionResolver;
        var best = null;
        for (var _i = 0, _c = u.contexts; _i < _c.length; _i++) {
            var ctx = _c[_i];
            if (!best || ctx._score >= best._score) {
                best = ctx;
            }
        }
        if (best && best._score > 0) {
            (_a = this._propNames).push.apply(_a, best._propNames);
            (_b = this._messages).push.apply(_b, best._messages);
        }
    };
    DetailContext.prototype.getError = function (path) {
        var msgParts = [];
        for (var i = this._propNames.length - 1; i >= 0; i--) {
            var p = this._propNames[i];
            path += (typeof p === "number") ? "[" + p + "]" : (p ? "." + p : "");
            var m = this._messages[i];
            if (m) {
                msgParts.push(path + " " + m);
            }
        }
        return new VError(path, msgParts.join("; "));
    };
    DetailContext.prototype.getErrorDetail = function (path) {
        var details = [];
        for (var i = this._propNames.length - 1; i >= 0; i--) {
            var p = this._propNames[i];
            path += (typeof p === "number") ? "[" + p + "]" : (p ? "." + p : "");
            var message = this._messages[i];
            if (message) {
                details.push({ path: path, message: message });
            }
        }
        var detail = null;
        for (var i = details.length - 1; i >= 0; i--) {
            if (detail) {
                details[i].nested = [detail];
            }
            detail = details[i];
        }
        return detail;
    };
    return DetailContext;
}());
util.DetailContext = DetailContext;
var DetailUnionResolver = /** @class */ (function () {
    function DetailUnionResolver() {
        this.contexts = [];
    }
    DetailUnionResolver.prototype.createContext = function () {
        var ctx = new DetailContext();
        this.contexts.push(ctx);
        return ctx;
    };
    return DetailUnionResolver;
}());

(function (exports) {
	/**
	 * This module defines nodes used to define types and validations for objects and interfaces.
	 */
	// tslint:disable:no-shadowed-variable prefer-for-of
	var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
	    var extendStatics = function (d, b) {
	        extendStatics = Object.setPrototypeOf ||
	            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	        return extendStatics(d, b);
	    };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.basicTypes = exports.BasicType = exports.TParamList = exports.TParam = exports.param = exports.TFunc = exports.func = exports.TProp = exports.TOptional = exports.opt = exports.TIface = exports.iface = exports.TEnumLiteral = exports.enumlit = exports.TEnumType = exports.enumtype = exports.TIntersection = exports.intersection = exports.TUnion = exports.union = exports.TTuple = exports.tuple = exports.TArray = exports.array = exports.TLiteral = exports.lit = exports.TName = exports.name = exports.TType = void 0;
	var util_1 = util;
	/** Node that represents a type. */
	var TType = /** @class */ (function () {
	    function TType() {
	    }
	    return TType;
	}());
	exports.TType = TType;
	/** Parses a type spec into a TType node. */
	function parseSpec(typeSpec) {
	    return typeof typeSpec === "string" ? name(typeSpec) : typeSpec;
	}
	function getNamedType(suite, name) {
	    var ttype = suite[name];
	    if (!ttype) {
	        throw new Error("Unknown type " + name);
	    }
	    return ttype;
	}
	/**
	 * Defines a type name, either built-in, or defined in this suite. It can typically be included in
	 * the specs as just a plain string.
	 */
	function name(value) { return new TName(value); }
	exports.name = name;
	var TName = /** @class */ (function (_super) {
	    __extends(TName, _super);
	    function TName(name) {
	        var _this = _super.call(this) || this;
	        _this.name = name;
	        _this._failMsg = "is not a " + name;
	        return _this;
	    }
	    TName.prototype.getChecker = function (suite, strict, allowedProps) {
	        var _this = this;
	        var ttype = getNamedType(suite, this.name);
	        var checker = ttype.getChecker(suite, strict, allowedProps);
	        if (ttype instanceof BasicType || ttype instanceof TName) {
	            return checker;
	        }
	        // For complex types, add an additional "is not a <Type>" message on failure.
	        return function (value, ctx) { return checker(value, ctx) ? true : ctx.fail(null, _this._failMsg, 0); };
	    };
	    return TName;
	}(TType));
	exports.TName = TName;
	/**
	 * Defines a literal value, e.g. lit('hello') or lit(123).
	 */
	function lit(value) { return new TLiteral(value); }
	exports.lit = lit;
	var TLiteral = /** @class */ (function (_super) {
	    __extends(TLiteral, _super);
	    function TLiteral(value) {
	        var _this = _super.call(this) || this;
	        _this.value = value;
	        _this.name = JSON.stringify(value);
	        _this._failMsg = "is not " + _this.name;
	        return _this;
	    }
	    TLiteral.prototype.getChecker = function (suite, strict) {
	        var _this = this;
	        return function (value, ctx) { return (value === _this.value) ? true : ctx.fail(null, _this._failMsg, -1); };
	    };
	    return TLiteral;
	}(TType));
	exports.TLiteral = TLiteral;
	/**
	 * Defines an array type, e.g. array('number').
	 */
	function array(typeSpec) { return new TArray(parseSpec(typeSpec)); }
	exports.array = array;
	var TArray = /** @class */ (function (_super) {
	    __extends(TArray, _super);
	    function TArray(ttype) {
	        var _this = _super.call(this) || this;
	        _this.ttype = ttype;
	        return _this;
	    }
	    TArray.prototype.getChecker = function (suite, strict) {
	        var itemChecker = this.ttype.getChecker(suite, strict);
	        return function (value, ctx) {
	            if (!Array.isArray(value)) {
	                return ctx.fail(null, "is not an array", 0);
	            }
	            for (var i = 0; i < value.length; i++) {
	                var ok = itemChecker(value[i], ctx);
	                if (!ok) {
	                    return ctx.fail(i, null, 1);
	                }
	            }
	            return true;
	        };
	    };
	    return TArray;
	}(TType));
	exports.TArray = TArray;
	/**
	 * Defines a tuple type, e.g. tuple('string', 'number').
	 */
	function tuple() {
	    var typeSpec = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        typeSpec[_i] = arguments[_i];
	    }
	    return new TTuple(typeSpec.map(function (t) { return parseSpec(t); }));
	}
	exports.tuple = tuple;
	var TTuple = /** @class */ (function (_super) {
	    __extends(TTuple, _super);
	    function TTuple(ttypes) {
	        var _this = _super.call(this) || this;
	        _this.ttypes = ttypes;
	        return _this;
	    }
	    TTuple.prototype.getChecker = function (suite, strict) {
	        var itemCheckers = this.ttypes.map(function (t) { return t.getChecker(suite, strict); });
	        var checker = function (value, ctx) {
	            if (!Array.isArray(value)) {
	                return ctx.fail(null, "is not an array", 0);
	            }
	            for (var i = 0; i < itemCheckers.length; i++) {
	                var ok = itemCheckers[i](value[i], ctx);
	                if (!ok) {
	                    return ctx.fail(i, null, 1);
	                }
	            }
	            return true;
	        };
	        if (!strict) {
	            return checker;
	        }
	        return function (value, ctx) {
	            if (!checker(value, ctx)) {
	                return false;
	            }
	            return value.length <= itemCheckers.length ? true :
	                ctx.fail(itemCheckers.length, "is extraneous", 2);
	        };
	    };
	    return TTuple;
	}(TType));
	exports.TTuple = TTuple;
	/**
	 * Defines a union type, e.g. union('number', 'null').
	 */
	function union() {
	    var typeSpec = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        typeSpec[_i] = arguments[_i];
	    }
	    return new TUnion(typeSpec.map(function (t) { return parseSpec(t); }));
	}
	exports.union = union;
	var TUnion = /** @class */ (function (_super) {
	    __extends(TUnion, _super);
	    function TUnion(ttypes) {
	        var _this = _super.call(this) || this;
	        _this.ttypes = ttypes;
	        var names = ttypes.map(function (t) { return t instanceof TName || t instanceof TLiteral ? t.name : null; })
	            .filter(function (n) { return n; });
	        var otherTypes = ttypes.length - names.length;
	        if (names.length) {
	            if (otherTypes > 0) {
	                names.push(otherTypes + " more");
	            }
	            _this._failMsg = "is none of " + names.join(", ");
	        }
	        else {
	            _this._failMsg = "is none of " + otherTypes + " types";
	        }
	        return _this;
	    }
	    TUnion.prototype.getChecker = function (suite, strict) {
	        var _this = this;
	        var itemCheckers = this.ttypes.map(function (t) { return t.getChecker(suite, strict); });
	        return function (value, ctx) {
	            var ur = ctx.unionResolver();
	            for (var i = 0; i < itemCheckers.length; i++) {
	                var ok = itemCheckers[i](value, ur.createContext());
	                if (ok) {
	                    return true;
	                }
	            }
	            ctx.resolveUnion(ur);
	            return ctx.fail(null, _this._failMsg, 0);
	        };
	    };
	    return TUnion;
	}(TType));
	exports.TUnion = TUnion;
	/**
	 * Defines an intersection type, e.g. intersection('number', 'null').
	 */
	function intersection() {
	    var typeSpec = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        typeSpec[_i] = arguments[_i];
	    }
	    return new TIntersection(typeSpec.map(function (t) { return parseSpec(t); }));
	}
	exports.intersection = intersection;
	var TIntersection = /** @class */ (function (_super) {
	    __extends(TIntersection, _super);
	    function TIntersection(ttypes) {
	        var _this = _super.call(this) || this;
	        _this.ttypes = ttypes;
	        return _this;
	    }
	    TIntersection.prototype.getChecker = function (suite, strict) {
	        var allowedProps = new Set();
	        var itemCheckers = this.ttypes.map(function (t) { return t.getChecker(suite, strict, allowedProps); });
	        return function (value, ctx) {
	            var ok = itemCheckers.every(function (checker) { return checker(value, ctx); });
	            if (ok) {
	                return true;
	            }
	            return ctx.fail(null, null, 0);
	        };
	    };
	    return TIntersection;
	}(TType));
	exports.TIntersection = TIntersection;
	/**
	 * Defines an enum type, e.g. enum({'A': 1, 'B': 2}).
	 */
	function enumtype(values) {
	    return new TEnumType(values);
	}
	exports.enumtype = enumtype;
	var TEnumType = /** @class */ (function (_super) {
	    __extends(TEnumType, _super);
	    function TEnumType(members) {
	        var _this = _super.call(this) || this;
	        _this.members = members;
	        _this.validValues = new Set();
	        _this._failMsg = "is not a valid enum value";
	        _this.validValues = new Set(Object.keys(members).map(function (name) { return members[name]; }));
	        return _this;
	    }
	    TEnumType.prototype.getChecker = function (suite, strict) {
	        var _this = this;
	        return function (value, ctx) {
	            return (_this.validValues.has(value) ? true : ctx.fail(null, _this._failMsg, 0));
	        };
	    };
	    return TEnumType;
	}(TType));
	exports.TEnumType = TEnumType;
	/**
	 * Defines a literal enum value, such as Direction.Up, specified as enumlit("Direction", "Up").
	 */
	function enumlit(name, prop) {
	    return new TEnumLiteral(name, prop);
	}
	exports.enumlit = enumlit;
	var TEnumLiteral = /** @class */ (function (_super) {
	    __extends(TEnumLiteral, _super);
	    function TEnumLiteral(enumName, prop) {
	        var _this = _super.call(this) || this;
	        _this.enumName = enumName;
	        _this.prop = prop;
	        _this._failMsg = "is not " + enumName + "." + prop;
	        return _this;
	    }
	    TEnumLiteral.prototype.getChecker = function (suite, strict) {
	        var _this = this;
	        var ttype = getNamedType(suite, this.enumName);
	        if (!(ttype instanceof TEnumType)) {
	            throw new Error("Type " + this.enumName + " used in enumlit is not an enum type");
	        }
	        var val = ttype.members[this.prop];
	        if (!ttype.members.hasOwnProperty(this.prop)) {
	            throw new Error("Unknown value " + this.enumName + "." + this.prop + " used in enumlit");
	        }
	        return function (value, ctx) { return (value === val) ? true : ctx.fail(null, _this._failMsg, -1); };
	    };
	    return TEnumLiteral;
	}(TType));
	exports.TEnumLiteral = TEnumLiteral;
	function makeIfaceProps(props) {
	    return Object.keys(props).map(function (name) { return makeIfaceProp(name, props[name]); });
	}
	function makeIfaceProp(name, prop) {
	    return prop instanceof TOptional ?
	        new TProp(name, prop.ttype, true) :
	        new TProp(name, parseSpec(prop), false);
	}
	/**
	 * Defines an interface. The first argument is an array of interfaces that it extends, and the
	 * second is an array of properties.
	 */
	function iface(bases, props) {
	    return new TIface(bases, makeIfaceProps(props));
	}
	exports.iface = iface;
	var TIface = /** @class */ (function (_super) {
	    __extends(TIface, _super);
	    function TIface(bases, props) {
	        var _this = _super.call(this) || this;
	        _this.bases = bases;
	        _this.props = props;
	        _this.propSet = new Set(props.map(function (p) { return p.name; }));
	        return _this;
	    }
	    TIface.prototype.getChecker = function (suite, strict, allowedProps) {
	        var _this = this;
	        var baseCheckers = this.bases.map(function (b) { return getNamedType(suite, b).getChecker(suite, strict); });
	        var propCheckers = this.props.map(function (prop) { return prop.ttype.getChecker(suite, strict); });
	        var testCtx = new util_1.NoopContext();
	        // Consider a prop required if it's not optional AND does not allow for undefined as a value.
	        var isPropRequired = this.props.map(function (prop, i) {
	            return !prop.isOpt && !propCheckers[i](undefined, testCtx);
	        });
	        var checker = function (value, ctx) {
	            if (typeof value !== "object" || value === null) {
	                return ctx.fail(null, "is not an object", 0);
	            }
	            for (var i = 0; i < baseCheckers.length; i++) {
	                if (!baseCheckers[i](value, ctx)) {
	                    return false;
	                }
	            }
	            for (var i = 0; i < propCheckers.length; i++) {
	                var name_1 = _this.props[i].name;
	                var v = value[name_1];
	                if (v === undefined) {
	                    if (isPropRequired[i]) {
	                        return ctx.fail(name_1, "is missing", 1);
	                    }
	                }
	                else {
	                    var ok = propCheckers[i](v, ctx);
	                    if (!ok) {
	                        return ctx.fail(name_1, null, 1);
	                    }
	                }
	            }
	            return true;
	        };
	        if (!strict) {
	            return checker;
	        }
	        var propSet = this.propSet;
	        if (allowedProps) {
	            this.propSet.forEach(function (prop) { return allowedProps.add(prop); });
	            propSet = allowedProps;
	        }
	        // In strict mode, check also for unknown enumerable properties.
	        return function (value, ctx) {
	            if (!checker(value, ctx)) {
	                return false;
	            }
	            for (var prop in value) {
	                if (!propSet.has(prop)) {
	                    return ctx.fail(prop, "is extraneous", 2);
	                }
	            }
	            return true;
	        };
	    };
	    return TIface;
	}(TType));
	exports.TIface = TIface;
	/**
	 * Defines an optional property on an interface.
	 */
	function opt(typeSpec) { return new TOptional(parseSpec(typeSpec)); }
	exports.opt = opt;
	var TOptional = /** @class */ (function (_super) {
	    __extends(TOptional, _super);
	    function TOptional(ttype) {
	        var _this = _super.call(this) || this;
	        _this.ttype = ttype;
	        return _this;
	    }
	    TOptional.prototype.getChecker = function (suite, strict) {
	        var itemChecker = this.ttype.getChecker(suite, strict);
	        return function (value, ctx) {
	            return value === undefined || itemChecker(value, ctx);
	        };
	    };
	    return TOptional;
	}(TType));
	exports.TOptional = TOptional;
	/**
	 * Defines a property in an interface.
	 */
	var TProp = /** @class */ (function () {
	    function TProp(name, ttype, isOpt) {
	        this.name = name;
	        this.ttype = ttype;
	        this.isOpt = isOpt;
	    }
	    return TProp;
	}());
	exports.TProp = TProp;
	/**
	 * Defines a function. The first argument declares the function's return type, the rest declare
	 * its parameters.
	 */
	function func(resultSpec) {
	    var params = [];
	    for (var _i = 1; _i < arguments.length; _i++) {
	        params[_i - 1] = arguments[_i];
	    }
	    return new TFunc(new TParamList(params), parseSpec(resultSpec));
	}
	exports.func = func;
	var TFunc = /** @class */ (function (_super) {
	    __extends(TFunc, _super);
	    function TFunc(paramList, result) {
	        var _this = _super.call(this) || this;
	        _this.paramList = paramList;
	        _this.result = result;
	        return _this;
	    }
	    TFunc.prototype.getChecker = function (suite, strict) {
	        return function (value, ctx) {
	            return typeof value === "function" ? true : ctx.fail(null, "is not a function", 0);
	        };
	    };
	    return TFunc;
	}(TType));
	exports.TFunc = TFunc;
	/**
	 * Defines a function parameter.
	 */
	function param(name, typeSpec, isOpt) {
	    return new TParam(name, parseSpec(typeSpec), Boolean(isOpt));
	}
	exports.param = param;
	var TParam = /** @class */ (function () {
	    function TParam(name, ttype, isOpt) {
	        this.name = name;
	        this.ttype = ttype;
	        this.isOpt = isOpt;
	    }
	    return TParam;
	}());
	exports.TParam = TParam;
	/**
	 * Defines a function parameter list.
	 */
	var TParamList = /** @class */ (function (_super) {
	    __extends(TParamList, _super);
	    function TParamList(params) {
	        var _this = _super.call(this) || this;
	        _this.params = params;
	        return _this;
	    }
	    TParamList.prototype.getChecker = function (suite, strict) {
	        var _this = this;
	        var itemCheckers = this.params.map(function (t) { return t.ttype.getChecker(suite, strict); });
	        var testCtx = new util_1.NoopContext();
	        var isParamRequired = this.params.map(function (param, i) {
	            return !param.isOpt && !itemCheckers[i](undefined, testCtx);
	        });
	        var checker = function (value, ctx) {
	            if (!Array.isArray(value)) {
	                return ctx.fail(null, "is not an array", 0);
	            }
	            for (var i = 0; i < itemCheckers.length; i++) {
	                var p = _this.params[i];
	                if (value[i] === undefined) {
	                    if (isParamRequired[i]) {
	                        return ctx.fail(p.name, "is missing", 1);
	                    }
	                }
	                else {
	                    var ok = itemCheckers[i](value[i], ctx);
	                    if (!ok) {
	                        return ctx.fail(p.name, null, 1);
	                    }
	                }
	            }
	            return true;
	        };
	        if (!strict) {
	            return checker;
	        }
	        return function (value, ctx) {
	            if (!checker(value, ctx)) {
	                return false;
	            }
	            return value.length <= itemCheckers.length ? true :
	                ctx.fail(itemCheckers.length, "is extraneous", 2);
	        };
	    };
	    return TParamList;
	}(TType));
	exports.TParamList = TParamList;
	/**
	 * Single TType implementation for all basic built-in types.
	 */
	var BasicType = /** @class */ (function (_super) {
	    __extends(BasicType, _super);
	    function BasicType(validator, message) {
	        var _this = _super.call(this) || this;
	        _this.validator = validator;
	        _this.message = message;
	        return _this;
	    }
	    BasicType.prototype.getChecker = function (suite, strict) {
	        var _this = this;
	        return function (value, ctx) { return _this.validator(value) ? true : ctx.fail(null, _this.message, 0); };
	    };
	    return BasicType;
	}(TType));
	exports.BasicType = BasicType;
	/**
	 * Defines the suite of basic types.
	 */
	exports.basicTypes = {
	    any: new BasicType(function (v) { return true; }, "is invalid"),
	    number: new BasicType(function (v) { return (typeof v === "number"); }, "is not a number"),
	    object: new BasicType(function (v) { return (typeof v === "object" && v); }, "is not an object"),
	    boolean: new BasicType(function (v) { return (typeof v === "boolean"); }, "is not a boolean"),
	    string: new BasicType(function (v) { return (typeof v === "string"); }, "is not a string"),
	    symbol: new BasicType(function (v) { return (typeof v === "symbol"); }, "is not a symbol"),
	    void: new BasicType(function (v) { return (v == null); }, "is not void"),
	    undefined: new BasicType(function (v) { return (v === undefined); }, "is not undefined"),
	    null: new BasicType(function (v) { return (v === null); }, "is not null"),
	    never: new BasicType(function (v) { return false; }, "is unexpected"),
	    Date: new BasicType(getIsNativeChecker("[object Date]"), "is not a Date"),
	    RegExp: new BasicType(getIsNativeChecker("[object RegExp]"), "is not a RegExp"),
	};
	// This approach for checking native object types mirrors that of lodash. Its advantage over
	// `isinstance` is that it can still return true for native objects created in different JS
	// execution environments.
	var nativeToString = Object.prototype.toString;
	function getIsNativeChecker(tag) {
	    return function (v) { return typeof v === "object" && v && nativeToString.call(v) === tag; };
	}
	if (typeof Buffer !== "undefined") {
	    exports.basicTypes.Buffer = new BasicType(function (v) { return Buffer.isBuffer(v); }, "is not a Buffer");
	}
	var _loop_1 = function (array_1) {
	    exports.basicTypes[array_1.name] = new BasicType(function (v) { return (v instanceof array_1); }, "is not a " + array_1.name);
	};
	// Support typed arrays of various flavors
	for (var _i = 0, _a = [Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array,
	    Int32Array, Uint32Array, Float32Array, Float64Array, ArrayBuffer]; _i < _a.length; _i++) {
	    var array_1 = _a[_i];
	    _loop_1(array_1);
	}
} (types));

(function (exports) {
	var __spreadArrays = (commonjsGlobal && commonjsGlobal.__spreadArrays) || function () {
	    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	    for (var r = Array(s), k = 0, i = 0; i < il; i++)
	        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	            r[k] = a[j];
	    return r;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Checker = exports.createCheckers = void 0;
	var types_1 = types;
	var util_1 = util;
	/**
	 * Export functions used to define interfaces.
	 */
	var types_2 = types;
	Object.defineProperty(exports, "TArray", { enumerable: true, get: function () { return types_2.TArray; } });
	Object.defineProperty(exports, "TEnumType", { enumerable: true, get: function () { return types_2.TEnumType; } });
	Object.defineProperty(exports, "TEnumLiteral", { enumerable: true, get: function () { return types_2.TEnumLiteral; } });
	Object.defineProperty(exports, "TFunc", { enumerable: true, get: function () { return types_2.TFunc; } });
	Object.defineProperty(exports, "TIface", { enumerable: true, get: function () { return types_2.TIface; } });
	Object.defineProperty(exports, "TLiteral", { enumerable: true, get: function () { return types_2.TLiteral; } });
	Object.defineProperty(exports, "TName", { enumerable: true, get: function () { return types_2.TName; } });
	Object.defineProperty(exports, "TOptional", { enumerable: true, get: function () { return types_2.TOptional; } });
	Object.defineProperty(exports, "TParam", { enumerable: true, get: function () { return types_2.TParam; } });
	Object.defineProperty(exports, "TParamList", { enumerable: true, get: function () { return types_2.TParamList; } });
	Object.defineProperty(exports, "TProp", { enumerable: true, get: function () { return types_2.TProp; } });
	Object.defineProperty(exports, "TTuple", { enumerable: true, get: function () { return types_2.TTuple; } });
	Object.defineProperty(exports, "TType", { enumerable: true, get: function () { return types_2.TType; } });
	Object.defineProperty(exports, "TUnion", { enumerable: true, get: function () { return types_2.TUnion; } });
	Object.defineProperty(exports, "TIntersection", { enumerable: true, get: function () { return types_2.TIntersection; } });
	Object.defineProperty(exports, "array", { enumerable: true, get: function () { return types_2.array; } });
	Object.defineProperty(exports, "enumlit", { enumerable: true, get: function () { return types_2.enumlit; } });
	Object.defineProperty(exports, "enumtype", { enumerable: true, get: function () { return types_2.enumtype; } });
	Object.defineProperty(exports, "func", { enumerable: true, get: function () { return types_2.func; } });
	Object.defineProperty(exports, "iface", { enumerable: true, get: function () { return types_2.iface; } });
	Object.defineProperty(exports, "lit", { enumerable: true, get: function () { return types_2.lit; } });
	Object.defineProperty(exports, "name", { enumerable: true, get: function () { return types_2.name; } });
	Object.defineProperty(exports, "opt", { enumerable: true, get: function () { return types_2.opt; } });
	Object.defineProperty(exports, "param", { enumerable: true, get: function () { return types_2.param; } });
	Object.defineProperty(exports, "tuple", { enumerable: true, get: function () { return types_2.tuple; } });
	Object.defineProperty(exports, "union", { enumerable: true, get: function () { return types_2.union; } });
	Object.defineProperty(exports, "intersection", { enumerable: true, get: function () { return types_2.intersection; } });
	Object.defineProperty(exports, "BasicType", { enumerable: true, get: function () { return types_2.BasicType; } });
	var util_2 = util;
	Object.defineProperty(exports, "VError", { enumerable: true, get: function () { return util_2.VError; } });
	/**
	 * Takes one of more type suites (e.g. a module generated by `ts-interface-builder`), and combines
	 * them into a suite of interface checkers. If a type is used by name, that name should be present
	 * among the passed-in type suites.
	 *
	 * The returned object maps type names to Checker objects.
	 */
	function createCheckers() {
	    var typeSuite = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        typeSuite[_i] = arguments[_i];
	    }
	    var fullSuite = Object.assign.apply(Object, __spreadArrays([{}, types_1.basicTypes], typeSuite));
	    var checkers = {};
	    for (var _a = 0, typeSuite_1 = typeSuite; _a < typeSuite_1.length; _a++) {
	        var suite_1 = typeSuite_1[_a];
	        for (var _b = 0, _c = Object.keys(suite_1); _b < _c.length; _b++) {
	            var name = _c[_b];
	            checkers[name] = new Checker(fullSuite, suite_1[name]);
	        }
	    }
	    return checkers;
	}
	exports.createCheckers = createCheckers;
	/**
	 * Checker implements validation of objects, and also includes accessors to validate method calls.
	 * Checkers should be created using `createCheckers()`.
	 */
	var Checker = /** @class */ (function () {
	    // Create checkers by using `createCheckers()` function.
	    function Checker(suite, ttype, _path) {
	        if (_path === void 0) { _path = 'value'; }
	        this.suite = suite;
	        this.ttype = ttype;
	        this._path = _path;
	        this.props = new Map();
	        if (ttype instanceof types_1.TIface) {
	            for (var _i = 0, _a = ttype.props; _i < _a.length; _i++) {
	                var p = _a[_i];
	                this.props.set(p.name, p.ttype);
	            }
	        }
	        this.checkerPlain = this.ttype.getChecker(suite, false);
	        this.checkerStrict = this.ttype.getChecker(suite, true);
	    }
	    /**
	     * Set the path to report in errors, instead of the default "value". (E.g. if the Checker is for
	     * a "person" interface, set path to "person" to report e.g. "person.name is not a string".)
	     */
	    Checker.prototype.setReportedPath = function (path) {
	        this._path = path;
	    };
	    /**
	     * Check that the given value satisfies this checker's type, or throw Error.
	     */
	    Checker.prototype.check = function (value) { return this._doCheck(this.checkerPlain, value); };
	    /**
	     * A fast check for whether or not the given value satisfies this Checker's type. This returns
	     * true or false, does not produce an error message, and is fast both on success and on failure.
	     */
	    Checker.prototype.test = function (value) {
	        return this.checkerPlain(value, new util_1.NoopContext());
	    };
	    /**
	     * Returns an error object describing the errors if the given value does not satisfy this
	     * Checker's type, or null if it does.
	     */
	    Checker.prototype.validate = function (value) {
	        return this._doValidate(this.checkerPlain, value);
	    };
	    /**
	     * Check that the given value satisfies this checker's type strictly. This checks that objects
	     * and tuples have no extra members. Note that this prevents backward compatibility, so usually
	     * a plain check() is more appropriate.
	     */
	    Checker.prototype.strictCheck = function (value) { return this._doCheck(this.checkerStrict, value); };
	    /**
	     * A fast strict check for whether or not the given value satisfies this Checker's type. Returns
	     * true or false, does not produce an error message, and is fast both on success and on failure.
	     */
	    Checker.prototype.strictTest = function (value) {
	        return this.checkerStrict(value, new util_1.NoopContext());
	    };
	    /**
	     * Returns an error object describing the errors if the given value does not satisfy this
	     * Checker's type strictly, or null if it does.
	     */
	    Checker.prototype.strictValidate = function (value) {
	        return this._doValidate(this.checkerStrict, value);
	    };
	    /**
	     * If this checker is for an interface, returns a Checker for the type required for the given
	     * property of this interface.
	     */
	    Checker.prototype.getProp = function (prop) {
	        var ttype = this.props.get(prop);
	        if (!ttype) {
	            throw new Error("Type has no property " + prop);
	        }
	        return new Checker(this.suite, ttype, this._path + "." + prop);
	    };
	    /**
	     * If this checker is for an interface, returns a Checker for the argument-list required to call
	     * the given method of this interface. E.g. if this Checker is for the interface:
	     *    interface Foo {
	     *      find(s: string, pos?: number): number;
	     *    }
	     * Then methodArgs("find").check(...) will succeed for ["foo"] and ["foo", 3], but not for [17].
	     */
	    Checker.prototype.methodArgs = function (methodName) {
	        var tfunc = this._getMethod(methodName);
	        return new Checker(this.suite, tfunc.paramList);
	    };
	    /**
	     * If this checker is for an interface, returns a Checker for the return value of the given
	     * method of this interface.
	     */
	    Checker.prototype.methodResult = function (methodName) {
	        var tfunc = this._getMethod(methodName);
	        return new Checker(this.suite, tfunc.result);
	    };
	    /**
	     * If this checker is for a function, returns a Checker for its argument-list.
	     */
	    Checker.prototype.getArgs = function () {
	        if (!(this.ttype instanceof types_1.TFunc)) {
	            throw new Error("getArgs() applied to non-function");
	        }
	        return new Checker(this.suite, this.ttype.paramList);
	    };
	    /**
	     * If this checker is for a function, returns a Checker for its result.
	     */
	    Checker.prototype.getResult = function () {
	        if (!(this.ttype instanceof types_1.TFunc)) {
	            throw new Error("getResult() applied to non-function");
	        }
	        return new Checker(this.suite, this.ttype.result);
	    };
	    /**
	     * Return the type for which this is a checker.
	     */
	    Checker.prototype.getType = function () {
	        return this.ttype;
	    };
	    /**
	     * Actual implementation of check() and strictCheck().
	     */
	    Checker.prototype._doCheck = function (checkerFunc, value) {
	        var noopCtx = new util_1.NoopContext();
	        if (!checkerFunc(value, noopCtx)) {
	            var detailCtx = new util_1.DetailContext();
	            checkerFunc(value, detailCtx);
	            throw detailCtx.getError(this._path);
	        }
	    };
	    Checker.prototype._doValidate = function (checkerFunc, value) {
	        var noopCtx = new util_1.NoopContext();
	        if (checkerFunc(value, noopCtx)) {
	            return null;
	        }
	        var detailCtx = new util_1.DetailContext();
	        checkerFunc(value, detailCtx);
	        return detailCtx.getErrorDetail(this._path);
	    };
	    Checker.prototype._getMethod = function (methodName) {
	        var ttype = this.props.get(methodName);
	        if (!ttype) {
	            throw new Error("Type has no property " + methodName);
	        }
	        if (!(ttype instanceof types_1.TFunc)) {
	            throw new Error("Property " + methodName + " is not a method");
	        }
	        return ttype;
	    };
	    return Checker;
	}());
	exports.Checker = Checker;
} (dist));

/**
 * This module was automatically generated by `ts-interface-builder`
 */
// tslint:disable:object-literal-key-quotes

const Transform = dist.union(
  dist.lit("jsx"),
  dist.lit("typescript"),
  dist.lit("flow"),
  dist.lit("imports"),
  dist.lit("react-hot-loader"),
  dist.lit("jest"),
);

const SourceMapOptions = dist.iface([], {
  compiledFilename: "string",
});

const Options = dist.iface([], {
  transforms: dist.array("Transform"),
  disableESTransforms: dist.opt("boolean"),
  jsxRuntime: dist.opt(dist.union(dist.lit("classic"), dist.lit("automatic"), dist.lit("preserve"))),
  production: dist.opt("boolean"),
  jsxImportSource: dist.opt("string"),
  jsxPragma: dist.opt("string"),
  jsxFragmentPragma: dist.opt("string"),
  preserveDynamicImport: dist.opt("boolean"),
  injectCreateRequireForImportRequire: dist.opt("boolean"),
  enableLegacyTypeScriptModuleInterop: dist.opt("boolean"),
  enableLegacyBabel5ModuleInterop: dist.opt("boolean"),
  sourceMapOptions: dist.opt("SourceMapOptions"),
  filePath: dist.opt("string"),
});

const exportedTypeSuite = {
  Transform,
  SourceMapOptions,
  Options,
};

const {Options: OptionsChecker} = dist.createCheckers(exportedTypeSuite);

 























































































function validateOptions(options) {
  OptionsChecker.strictCheck(options);
}

function parseSpread() {
  next();
  parseMaybeAssign(false);
}

function parseRest(isBlockScope) {
  next();
  parseBindingAtom(isBlockScope);
}

function parseBindingIdentifier(isBlockScope) {
  parseIdentifier();
  markPriorBindingIdentifier(isBlockScope);
}

function parseImportedIdentifier() {
  parseIdentifier();
  state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportDeclaration;
}

function markPriorBindingIdentifier(isBlockScope) {
  let identifierRole;
  if (state.scopeDepth === 0) {
    identifierRole = IdentifierRole.TopLevelDeclaration;
  } else if (isBlockScope) {
    identifierRole = IdentifierRole.BlockScopedDeclaration;
  } else {
    identifierRole = IdentifierRole.FunctionScopedDeclaration;
  }
  state.tokens[state.tokens.length - 1].identifierRole = identifierRole;
}

// Parses lvalue (assignable) atom.
function parseBindingAtom(isBlockScope) {
  switch (state.type) {
    case TokenType._this: {
      // In TypeScript, "this" may be the name of a parameter, so allow it.
      const oldIsType = pushTypeContext(0);
      next();
      popTypeContext(oldIsType);
      return;
    }

    case TokenType._yield:
    case TokenType.name: {
      state.type = TokenType.name;
      parseBindingIdentifier(isBlockScope);
      return;
    }

    case TokenType.bracketL: {
      next();
      parseBindingList(TokenType.bracketR, isBlockScope, true /* allowEmpty */);
      return;
    }

    case TokenType.braceL:
      parseObj(true, isBlockScope);
      return;

    default:
      unexpected();
  }
}

function parseBindingList(
  close,
  isBlockScope,
  allowEmpty = false,
  allowModifiers = false,
  contextId = 0,
) {
  let first = true;

  let hasRemovedComma = false;
  const firstItemTokenIndex = state.tokens.length;

  while (!eat(close) && !state.error) {
    if (first) {
      first = false;
    } else {
      expect(TokenType.comma);
      state.tokens[state.tokens.length - 1].contextId = contextId;
      // After a "this" type in TypeScript, we need to set the following comma (if any) to also be
      // a type token so that it will be removed.
      if (!hasRemovedComma && state.tokens[firstItemTokenIndex].isType) {
        state.tokens[state.tokens.length - 1].isType = true;
        hasRemovedComma = true;
      }
    }
    if (allowEmpty && match(TokenType.comma)) ; else if (eat(close)) {
      break;
    } else if (match(TokenType.ellipsis)) {
      parseRest(isBlockScope);
      parseAssignableListItemTypes();
      // Support rest element trailing commas allowed by TypeScript <2.9.
      eat(TokenType.comma);
      expect(close);
      break;
    } else {
      parseAssignableListItem(allowModifiers, isBlockScope);
    }
  }
}

function parseAssignableListItem(allowModifiers, isBlockScope) {
  if (allowModifiers) {
    tsParseModifiers([
      ContextualKeyword._public,
      ContextualKeyword._protected,
      ContextualKeyword._private,
      ContextualKeyword._readonly,
      ContextualKeyword._override,
    ]);
  }

  parseMaybeDefault(isBlockScope);
  parseAssignableListItemTypes();
  parseMaybeDefault(isBlockScope, true /* leftAlreadyParsed */);
}

function parseAssignableListItemTypes() {
  if (isFlowEnabled) {
    flowParseAssignableListItemTypes();
  } else if (isTypeScriptEnabled) {
    tsParseAssignableListItemTypes();
  }
}

// Parses assignment pattern around given atom if possible.
function parseMaybeDefault(isBlockScope, leftAlreadyParsed = false) {
  if (!leftAlreadyParsed) {
    parseBindingAtom(isBlockScope);
  }
  if (!eat(TokenType.eq)) {
    return;
  }
  const eqIndex = state.tokens.length - 1;
  parseMaybeAssign();
  state.tokens[eqIndex].rhsEndIndex = state.tokens.length;
}

function tsIsIdentifier() {
  // TODO: actually a bit more complex in TypeScript, but shouldn't matter.
  // See https://github.com/Microsoft/TypeScript/issues/15008
  return match(TokenType.name);
}

function isLiteralPropertyName() {
  return (
    match(TokenType.name) ||
    Boolean(state.type & TokenType.IS_KEYWORD) ||
    match(TokenType.string) ||
    match(TokenType.num) ||
    match(TokenType.bigint) ||
    match(TokenType.decimal)
  );
}

function tsNextTokenCanFollowModifier() {
  // Note: TypeScript's implementation is much more complicated because
  // more things are considered modifiers there.
  // This implementation only handles modifiers not handled by babylon itself. And "static".
  // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...
  const snapshot = state.snapshot();

  next();
  const canFollowModifier =
    (match(TokenType.bracketL) ||
      match(TokenType.braceL) ||
      match(TokenType.star) ||
      match(TokenType.ellipsis) ||
      match(TokenType.hash) ||
      isLiteralPropertyName()) &&
    !hasPrecedingLineBreak();

  if (canFollowModifier) {
    return true;
  } else {
    state.restoreFromSnapshot(snapshot);
    return false;
  }
}

function tsParseModifiers(allowedModifiers) {
  while (true) {
    const modifier = tsParseModifier(allowedModifiers);
    if (modifier === null) {
      break;
    }
  }
}

/** Parses a modifier matching one the given modifier names. */
function tsParseModifier(
  allowedModifiers,
) {
  if (!match(TokenType.name)) {
    return null;
  }

  const modifier = state.contextualKeyword;
  if (allowedModifiers.indexOf(modifier) !== -1 && tsNextTokenCanFollowModifier()) {
    switch (modifier) {
      case ContextualKeyword._readonly:
        state.tokens[state.tokens.length - 1].type = TokenType._readonly;
        break;
      case ContextualKeyword._abstract:
        state.tokens[state.tokens.length - 1].type = TokenType._abstract;
        break;
      case ContextualKeyword._static:
        state.tokens[state.tokens.length - 1].type = TokenType._static;
        break;
      case ContextualKeyword._public:
        state.tokens[state.tokens.length - 1].type = TokenType._public;
        break;
      case ContextualKeyword._private:
        state.tokens[state.tokens.length - 1].type = TokenType._private;
        break;
      case ContextualKeyword._protected:
        state.tokens[state.tokens.length - 1].type = TokenType._protected;
        break;
      case ContextualKeyword._override:
        state.tokens[state.tokens.length - 1].type = TokenType._override;
        break;
      case ContextualKeyword._declare:
        state.tokens[state.tokens.length - 1].type = TokenType._declare;
        break;
    }
    return modifier;
  }
  return null;
}

function tsParseEntityName() {
  parseIdentifier();
  while (eat(TokenType.dot)) {
    parseIdentifier();
  }
}

function tsParseTypeReference() {
  tsParseEntityName();
  if (!hasPrecedingLineBreak() && match(TokenType.lessThan)) {
    tsParseTypeArguments();
  }
}

function tsParseThisTypePredicate() {
  next();
  tsParseTypeAnnotation();
}

function tsParseThisTypeNode() {
  next();
}

function tsParseTypeQuery() {
  expect(TokenType._typeof);
  if (match(TokenType._import)) {
    tsParseImportType();
  } else {
    tsParseEntityName();
  }
  if (!hasPrecedingLineBreak() && match(TokenType.lessThan)) {
    tsParseTypeArguments();
  }
}

function tsParseImportType() {
  expect(TokenType._import);
  expect(TokenType.parenL);
  expect(TokenType.string);
  expect(TokenType.parenR);
  if (eat(TokenType.dot)) {
    tsParseEntityName();
  }
  if (match(TokenType.lessThan)) {
    tsParseTypeArguments();
  }
}

function tsParseTypeParameter() {
  eat(TokenType._const);
  const hadIn = eat(TokenType._in);
  const hadOut = eatContextual(ContextualKeyword._out);
  eat(TokenType._const);
  if ((hadIn || hadOut) && !match(TokenType.name)) {
    // The "in" or "out" keyword must have actually been the type parameter
    // name, so set it as the name.
    state.tokens[state.tokens.length - 1].type = TokenType.name;
  } else {
    parseIdentifier();
  }

  if (eat(TokenType._extends)) {
    tsParseType();
  }
  if (eat(TokenType.eq)) {
    tsParseType();
  }
}

function tsTryParseTypeParameters() {
  if (match(TokenType.lessThan)) {
    tsParseTypeParameters();
  }
}

function tsParseTypeParameters() {
  const oldIsType = pushTypeContext(0);
  if (match(TokenType.lessThan) || match(TokenType.typeParameterStart)) {
    next();
  } else {
    unexpected();
  }

  while (!eat(TokenType.greaterThan) && !state.error) {
    tsParseTypeParameter();
    eat(TokenType.comma);
  }
  popTypeContext(oldIsType);
}

// Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,
// but here it's always false, because this is only used for types.
function tsFillSignature(returnToken) {
  // Arrow fns *must* have return token (`=>`). Normal functions can omit it.
  const returnTokenRequired = returnToken === TokenType.arrow;
  tsTryParseTypeParameters();
  expect(TokenType.parenL);
  // Create a scope even though we're doing type parsing so we don't accidentally
  // treat params as top-level bindings.
  state.scopeDepth++;
  tsParseBindingListForSignature(false /* isBlockScope */);
  state.scopeDepth--;
  if (returnTokenRequired) {
    tsParseTypeOrTypePredicateAnnotation(returnToken);
  } else if (match(returnToken)) {
    tsParseTypeOrTypePredicateAnnotation(returnToken);
  }
}

function tsParseBindingListForSignature(isBlockScope) {
  parseBindingList(TokenType.parenR, isBlockScope);
}

function tsParseTypeMemberSemicolon() {
  if (!eat(TokenType.comma)) {
    semicolon();
  }
}

function tsParseSignatureMember() {
  tsFillSignature(TokenType.colon);
  tsParseTypeMemberSemicolon();
}

function tsIsUnambiguouslyIndexSignature() {
  const snapshot = state.snapshot();
  next(); // Skip '{'
  const isIndexSignature = eat(TokenType.name) && match(TokenType.colon);
  state.restoreFromSnapshot(snapshot);
  return isIndexSignature;
}

function tsTryParseIndexSignature() {
  if (!(match(TokenType.bracketL) && tsIsUnambiguouslyIndexSignature())) {
    return false;
  }

  const oldIsType = pushTypeContext(0);

  expect(TokenType.bracketL);
  parseIdentifier();
  tsParseTypeAnnotation();
  expect(TokenType.bracketR);

  tsTryParseTypeAnnotation();
  tsParseTypeMemberSemicolon();

  popTypeContext(oldIsType);
  return true;
}

function tsParsePropertyOrMethodSignature(isReadonly) {
  eat(TokenType.question);

  if (!isReadonly && (match(TokenType.parenL) || match(TokenType.lessThan))) {
    tsFillSignature(TokenType.colon);
    tsParseTypeMemberSemicolon();
  } else {
    tsTryParseTypeAnnotation();
    tsParseTypeMemberSemicolon();
  }
}

function tsParseTypeMember() {
  if (match(TokenType.parenL) || match(TokenType.lessThan)) {
    // call signature
    tsParseSignatureMember();
    return;
  }
  if (match(TokenType._new)) {
    next();
    if (match(TokenType.parenL) || match(TokenType.lessThan)) {
      // constructor signature
      tsParseSignatureMember();
    } else {
      tsParsePropertyOrMethodSignature(false);
    }
    return;
  }
  const readonly = !!tsParseModifier([ContextualKeyword._readonly]);

  const found = tsTryParseIndexSignature();
  if (found) {
    return;
  }
  if (
    (isContextual(ContextualKeyword._get) || isContextual(ContextualKeyword._set)) &&
    tsNextTokenCanFollowModifier()
  ) ;
  parsePropertyName(-1 /* Types don't need context IDs. */);
  tsParsePropertyOrMethodSignature(readonly);
}

function tsParseTypeLiteral() {
  tsParseObjectTypeMembers();
}

function tsParseObjectTypeMembers() {
  expect(TokenType.braceL);
  while (!eat(TokenType.braceR) && !state.error) {
    tsParseTypeMember();
  }
}

function tsLookaheadIsStartOfMappedType() {
  const snapshot = state.snapshot();
  const isStartOfMappedType = tsIsStartOfMappedType();
  state.restoreFromSnapshot(snapshot);
  return isStartOfMappedType;
}

function tsIsStartOfMappedType() {
  next();
  if (eat(TokenType.plus) || eat(TokenType.minus)) {
    return isContextual(ContextualKeyword._readonly);
  }
  if (isContextual(ContextualKeyword._readonly)) {
    next();
  }
  if (!match(TokenType.bracketL)) {
    return false;
  }
  next();
  if (!tsIsIdentifier()) {
    return false;
  }
  next();
  return match(TokenType._in);
}

function tsParseMappedTypeParameter() {
  parseIdentifier();
  expect(TokenType._in);
  tsParseType();
}

function tsParseMappedType() {
  expect(TokenType.braceL);
  if (match(TokenType.plus) || match(TokenType.minus)) {
    next();
    expectContextual(ContextualKeyword._readonly);
  } else {
    eatContextual(ContextualKeyword._readonly);
  }
  expect(TokenType.bracketL);
  tsParseMappedTypeParameter();
  if (eatContextual(ContextualKeyword._as)) {
    tsParseType();
  }
  expect(TokenType.bracketR);
  if (match(TokenType.plus) || match(TokenType.minus)) {
    next();
    expect(TokenType.question);
  } else {
    eat(TokenType.question);
  }
  tsTryParseType();
  semicolon();
  expect(TokenType.braceR);
}

function tsParseTupleType() {
  expect(TokenType.bracketL);
  while (!eat(TokenType.bracketR) && !state.error) {
    // Do not validate presence of either none or only labeled elements
    tsParseTupleElementType();
    eat(TokenType.comma);
  }
}

function tsParseTupleElementType() {
  // parses `...TsType[]`
  if (eat(TokenType.ellipsis)) {
    tsParseType();
  } else {
    // parses `TsType?`
    tsParseType();
    eat(TokenType.question);
  }

  // The type we parsed above was actually a label
  if (eat(TokenType.colon)) {
    // Labeled tuple types must affix the label with `...` or `?`, so no need to handle those here
    tsParseType();
  }
}

function tsParseParenthesizedType() {
  expect(TokenType.parenL);
  tsParseType();
  expect(TokenType.parenR);
}

function tsParseTemplateLiteralType() {
  // Finish `, read quasi
  nextTemplateToken();
  // Finish quasi, read ${
  nextTemplateToken();
  while (!match(TokenType.backQuote) && !state.error) {
    expect(TokenType.dollarBraceL);
    tsParseType();
    // Finish }, read quasi
    nextTemplateToken();
    // Finish quasi, read either ${ or `
    nextTemplateToken();
  }
  next();
}

var FunctionType; (function (FunctionType) {
  const TSFunctionType = 0; FunctionType[FunctionType["TSFunctionType"] = TSFunctionType] = "TSFunctionType";
  const TSConstructorType = TSFunctionType + 1; FunctionType[FunctionType["TSConstructorType"] = TSConstructorType] = "TSConstructorType";
  const TSAbstractConstructorType = TSConstructorType + 1; FunctionType[FunctionType["TSAbstractConstructorType"] = TSAbstractConstructorType] = "TSAbstractConstructorType";
})(FunctionType || (FunctionType = {}));

function tsParseFunctionOrConstructorType(type) {
  if (type === FunctionType.TSAbstractConstructorType) {
    expectContextual(ContextualKeyword._abstract);
  }
  if (type === FunctionType.TSConstructorType || type === FunctionType.TSAbstractConstructorType) {
    expect(TokenType._new);
  }
  const oldInDisallowConditionalTypesContext = state.inDisallowConditionalTypesContext;
  state.inDisallowConditionalTypesContext = false;
  tsFillSignature(TokenType.arrow);
  state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
}

function tsParseNonArrayType() {
  switch (state.type) {
    case TokenType.name:
      tsParseTypeReference();
      return;
    case TokenType._void:
    case TokenType._null:
      next();
      return;
    case TokenType.string:
    case TokenType.num:
    case TokenType.bigint:
    case TokenType.decimal:
    case TokenType._true:
    case TokenType._false:
      parseLiteral();
      return;
    case TokenType.minus:
      next();
      parseLiteral();
      return;
    case TokenType._this: {
      tsParseThisTypeNode();
      if (isContextual(ContextualKeyword._is) && !hasPrecedingLineBreak()) {
        tsParseThisTypePredicate();
      }
      return;
    }
    case TokenType._typeof:
      tsParseTypeQuery();
      return;
    case TokenType._import:
      tsParseImportType();
      return;
    case TokenType.braceL:
      if (tsLookaheadIsStartOfMappedType()) {
        tsParseMappedType();
      } else {
        tsParseTypeLiteral();
      }
      return;
    case TokenType.bracketL:
      tsParseTupleType();
      return;
    case TokenType.parenL:
      tsParseParenthesizedType();
      return;
    case TokenType.backQuote:
      tsParseTemplateLiteralType();
      return;
    default:
      if (state.type & TokenType.IS_KEYWORD) {
        next();
        state.tokens[state.tokens.length - 1].type = TokenType.name;
        return;
      }
      break;
  }

  unexpected();
}

function tsParseArrayTypeOrHigher() {
  tsParseNonArrayType();
  while (!hasPrecedingLineBreak() && eat(TokenType.bracketL)) {
    if (!eat(TokenType.bracketR)) {
      // If we hit ] immediately, this is an array type, otherwise it's an indexed access type.
      tsParseType();
      expect(TokenType.bracketR);
    }
  }
}

function tsParseInferType() {
  expectContextual(ContextualKeyword._infer);
  parseIdentifier();
  if (match(TokenType._extends)) {
    // Infer type constraints introduce an ambiguity about whether the "extends"
    // is a constraint for this infer type or is another conditional type.
    const snapshot = state.snapshot();
    expect(TokenType._extends);
    const oldInDisallowConditionalTypesContext = state.inDisallowConditionalTypesContext;
    state.inDisallowConditionalTypesContext = true;
    tsParseType();
    state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
    if (state.error || (!state.inDisallowConditionalTypesContext && match(TokenType.question))) {
      state.restoreFromSnapshot(snapshot);
    }
  }
}

function tsParseTypeOperatorOrHigher() {
  if (
    isContextual(ContextualKeyword._keyof) ||
    isContextual(ContextualKeyword._unique) ||
    isContextual(ContextualKeyword._readonly)
  ) {
    next();
    tsParseTypeOperatorOrHigher();
  } else if (isContextual(ContextualKeyword._infer)) {
    tsParseInferType();
  } else {
    const oldInDisallowConditionalTypesContext = state.inDisallowConditionalTypesContext;
    state.inDisallowConditionalTypesContext = false;
    tsParseArrayTypeOrHigher();
    state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
  }
}

function tsParseIntersectionTypeOrHigher() {
  eat(TokenType.bitwiseAND);
  tsParseTypeOperatorOrHigher();
  if (match(TokenType.bitwiseAND)) {
    while (eat(TokenType.bitwiseAND)) {
      tsParseTypeOperatorOrHigher();
    }
  }
}

function tsParseUnionTypeOrHigher() {
  eat(TokenType.bitwiseOR);
  tsParseIntersectionTypeOrHigher();
  if (match(TokenType.bitwiseOR)) {
    while (eat(TokenType.bitwiseOR)) {
      tsParseIntersectionTypeOrHigher();
    }
  }
}

function tsIsStartOfFunctionType() {
  if (match(TokenType.lessThan)) {
    return true;
  }
  return match(TokenType.parenL) && tsLookaheadIsUnambiguouslyStartOfFunctionType();
}

function tsSkipParameterStart() {
  if (match(TokenType.name) || match(TokenType._this)) {
    next();
    return true;
  }
  // If this is a possible array/object destructure, walk to the matching bracket/brace.
  // The next token after will tell us definitively whether this is a function param.
  if (match(TokenType.braceL) || match(TokenType.bracketL)) {
    let depth = 1;
    next();
    while (depth > 0 && !state.error) {
      if (match(TokenType.braceL) || match(TokenType.bracketL)) {
        depth++;
      } else if (match(TokenType.braceR) || match(TokenType.bracketR)) {
        depth--;
      }
      next();
    }
    return true;
  }
  return false;
}

function tsLookaheadIsUnambiguouslyStartOfFunctionType() {
  const snapshot = state.snapshot();
  const isUnambiguouslyStartOfFunctionType = tsIsUnambiguouslyStartOfFunctionType();
  state.restoreFromSnapshot(snapshot);
  return isUnambiguouslyStartOfFunctionType;
}

function tsIsUnambiguouslyStartOfFunctionType() {
  next();
  if (match(TokenType.parenR) || match(TokenType.ellipsis)) {
    // ( )
    // ( ...
    return true;
  }
  if (tsSkipParameterStart()) {
    if (match(TokenType.colon) || match(TokenType.comma) || match(TokenType.question) || match(TokenType.eq)) {
      // ( xxx :
      // ( xxx ,
      // ( xxx ?
      // ( xxx =
      return true;
    }
    if (match(TokenType.parenR)) {
      next();
      if (match(TokenType.arrow)) {
        // ( xxx ) =>
        return true;
      }
    }
  }
  return false;
}

function tsParseTypeOrTypePredicateAnnotation(returnToken) {
  const oldIsType = pushTypeContext(0);
  expect(returnToken);
  const finishedReturn = tsParseTypePredicateOrAssertsPrefix();
  if (!finishedReturn) {
    tsParseType();
  }
  popTypeContext(oldIsType);
}

function tsTryParseTypeOrTypePredicateAnnotation() {
  if (match(TokenType.colon)) {
    tsParseTypeOrTypePredicateAnnotation(TokenType.colon);
  }
}

function tsTryParseTypeAnnotation() {
  if (match(TokenType.colon)) {
    tsParseTypeAnnotation();
  }
}

function tsTryParseType() {
  if (eat(TokenType.colon)) {
    tsParseType();
  }
}

/**
 * Detect a few special return syntax cases: `x is T`, `asserts x`, `asserts x is T`,
 * `asserts this is T`.
 *
 * Returns true if we parsed the return type, false if there's still a type to be parsed.
 */
function tsParseTypePredicateOrAssertsPrefix() {
  const snapshot = state.snapshot();
  if (isContextual(ContextualKeyword._asserts)) {
    // Normally this is `asserts x is T`, but at this point, it might be `asserts is T` (a user-
    // defined type guard on the `asserts` variable) or just a type called `asserts`.
    next();
    if (eatContextual(ContextualKeyword._is)) {
      // If we see `asserts is`, then this must be of the form `asserts is T`, since
      // `asserts is is T` isn't valid.
      tsParseType();
      return true;
    } else if (tsIsIdentifier() || match(TokenType._this)) {
      next();
      if (eatContextual(ContextualKeyword._is)) {
        // If we see `is`, then this is `asserts x is T`. Otherwise, it's `asserts x`.
        tsParseType();
      }
      return true;
    } else {
      // Regular type, so bail out and start type parsing from scratch.
      state.restoreFromSnapshot(snapshot);
      return false;
    }
  } else if (tsIsIdentifier() || match(TokenType._this)) {
    // This is a regular identifier, which may or may not have "is" after it.
    next();
    if (isContextual(ContextualKeyword._is) && !hasPrecedingLineBreak()) {
      next();
      tsParseType();
      return true;
    } else {
      // Regular type, so bail out and start type parsing from scratch.
      state.restoreFromSnapshot(snapshot);
      return false;
    }
  }
  return false;
}

function tsParseTypeAnnotation() {
  const oldIsType = pushTypeContext(0);
  expect(TokenType.colon);
  tsParseType();
  popTypeContext(oldIsType);
}

function tsParseType() {
  tsParseNonConditionalType();
  if (state.inDisallowConditionalTypesContext || hasPrecedingLineBreak() || !eat(TokenType._extends)) {
    return;
  }
  // extends type
  const oldInDisallowConditionalTypesContext = state.inDisallowConditionalTypesContext;
  state.inDisallowConditionalTypesContext = true;
  tsParseNonConditionalType();
  state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;

  expect(TokenType.question);
  // true type
  tsParseType();
  expect(TokenType.colon);
  // false type
  tsParseType();
}

function isAbstractConstructorSignature() {
  return isContextual(ContextualKeyword._abstract) && lookaheadType() === TokenType._new;
}

function tsParseNonConditionalType() {
  if (tsIsStartOfFunctionType()) {
    tsParseFunctionOrConstructorType(FunctionType.TSFunctionType);
    return;
  }
  if (match(TokenType._new)) {
    // As in `new () => Date`
    tsParseFunctionOrConstructorType(FunctionType.TSConstructorType);
    return;
  } else if (isAbstractConstructorSignature()) {
    // As in `abstract new () => Date`
    tsParseFunctionOrConstructorType(FunctionType.TSAbstractConstructorType);
    return;
  }
  tsParseUnionTypeOrHigher();
}

function tsParseTypeAssertion() {
  const oldIsType = pushTypeContext(1);
  tsParseType();
  expect(TokenType.greaterThan);
  popTypeContext(oldIsType);
  parseMaybeUnary();
}

function tsTryParseJSXTypeArgument() {
  if (eat(TokenType.jsxTagStart)) {
    state.tokens[state.tokens.length - 1].type = TokenType.typeParameterStart;
    const oldIsType = pushTypeContext(1);
    while (!match(TokenType.greaterThan) && !state.error) {
      tsParseType();
      eat(TokenType.comma);
    }
    // Process >, but the one after needs to be parsed JSX-style.
    nextJSXTagToken();
    popTypeContext(oldIsType);
  }
}

function tsParseHeritageClause() {
  while (!match(TokenType.braceL) && !state.error) {
    tsParseExpressionWithTypeArguments();
    eat(TokenType.comma);
  }
}

function tsParseExpressionWithTypeArguments() {
  // Note: TS uses parseLeftHandSideExpressionOrHigher,
  // then has grammar errors later if it's not an EntityName.
  tsParseEntityName();
  if (match(TokenType.lessThan)) {
    tsParseTypeArguments();
  }
}

function tsParseInterfaceDeclaration() {
  parseBindingIdentifier(false);
  tsTryParseTypeParameters();
  if (eat(TokenType._extends)) {
    tsParseHeritageClause();
  }
  tsParseObjectTypeMembers();
}

function tsParseTypeAliasDeclaration() {
  parseBindingIdentifier(false);
  tsTryParseTypeParameters();
  expect(TokenType.eq);
  tsParseType();
  semicolon();
}

function tsParseEnumMember() {
  // Computed property names are grammar errors in an enum, so accept just string literal or identifier.
  if (match(TokenType.string)) {
    parseLiteral();
  } else {
    parseIdentifier();
  }
  if (eat(TokenType.eq)) {
    const eqIndex = state.tokens.length - 1;
    parseMaybeAssign();
    state.tokens[eqIndex].rhsEndIndex = state.tokens.length;
  }
}

function tsParseEnumDeclaration() {
  parseBindingIdentifier(false);
  expect(TokenType.braceL);
  while (!eat(TokenType.braceR) && !state.error) {
    tsParseEnumMember();
    eat(TokenType.comma);
  }
}

function tsParseModuleBlock() {
  expect(TokenType.braceL);
  parseBlockBody(/* end */ TokenType.braceR);
}

function tsParseModuleOrNamespaceDeclaration() {
  parseBindingIdentifier(false);
  if (eat(TokenType.dot)) {
    tsParseModuleOrNamespaceDeclaration();
  } else {
    tsParseModuleBlock();
  }
}

function tsParseAmbientExternalModuleDeclaration() {
  if (isContextual(ContextualKeyword._global)) {
    parseIdentifier();
  } else if (match(TokenType.string)) {
    parseExprAtom();
  } else {
    unexpected();
  }

  if (match(TokenType.braceL)) {
    tsParseModuleBlock();
  } else {
    semicolon();
  }
}

function tsParseImportEqualsDeclaration() {
  parseImportedIdentifier();
  expect(TokenType.eq);
  tsParseModuleReference();
  semicolon();
}

function tsIsExternalModuleReference() {
  return isContextual(ContextualKeyword._require) && lookaheadType() === TokenType.parenL;
}

function tsParseModuleReference() {
  if (tsIsExternalModuleReference()) {
    tsParseExternalModuleReference();
  } else {
    tsParseEntityName();
  }
}

function tsParseExternalModuleReference() {
  expectContextual(ContextualKeyword._require);
  expect(TokenType.parenL);
  if (!match(TokenType.string)) {
    unexpected();
  }
  parseLiteral();
  expect(TokenType.parenR);
}

// Utilities

// Returns true if a statement matched.
function tsTryParseDeclare() {
  if (isLineTerminator()) {
    return false;
  }
  switch (state.type) {
    case TokenType._function: {
      const oldIsType = pushTypeContext(1);
      next();
      // We don't need to precisely get the function start here, since it's only used to mark
      // the function as a type if it's bodiless, and it's already a type here.
      const functionStart = state.start;
      parseFunction(functionStart, /* isStatement */ true);
      popTypeContext(oldIsType);
      return true;
    }
    case TokenType._class: {
      const oldIsType = pushTypeContext(1);
      parseClass(/* isStatement */ true, /* optionalId */ false);
      popTypeContext(oldIsType);
      return true;
    }
    case TokenType._const: {
      if (match(TokenType._const) && isLookaheadContextual(ContextualKeyword._enum)) {
        const oldIsType = pushTypeContext(1);
        // `const enum = 0;` not allowed because "enum" is a strict mode reserved word.
        expect(TokenType._const);
        expectContextual(ContextualKeyword._enum);
        state.tokens[state.tokens.length - 1].type = TokenType._enum;
        tsParseEnumDeclaration();
        popTypeContext(oldIsType);
        return true;
      }
    }
    // falls through
    case TokenType._var:
    case TokenType._let: {
      const oldIsType = pushTypeContext(1);
      parseVarStatement(state.type !== TokenType._var);
      popTypeContext(oldIsType);
      return true;
    }
    case TokenType.name: {
      const oldIsType = pushTypeContext(1);
      const contextualKeyword = state.contextualKeyword;
      let matched = false;
      if (contextualKeyword === ContextualKeyword._global) {
        tsParseAmbientExternalModuleDeclaration();
        matched = true;
      } else {
        matched = tsParseDeclaration(contextualKeyword, /* isBeforeToken */ true);
      }
      popTypeContext(oldIsType);
      return matched;
    }
    default:
      return false;
  }
}

// Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.
// Returns true if it matched a declaration.
function tsTryParseExportDeclaration() {
  return tsParseDeclaration(state.contextualKeyword, /* isBeforeToken */ true);
}

// Returns true if it matched a statement.
function tsParseExpressionStatement(contextualKeyword) {
  switch (contextualKeyword) {
    case ContextualKeyword._declare: {
      const declareTokenIndex = state.tokens.length - 1;
      const matched = tsTryParseDeclare();
      if (matched) {
        state.tokens[declareTokenIndex].type = TokenType._declare;
        return true;
      }
      break;
    }
    case ContextualKeyword._global:
      // `global { }` (with no `declare`) may appear inside an ambient module declaration.
      // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past "global".
      if (match(TokenType.braceL)) {
        tsParseModuleBlock();
        return true;
      }
      break;

    default:
      return tsParseDeclaration(contextualKeyword, /* isBeforeToken */ false);
  }
  return false;
}

/**
 * Common code for parsing a declaration.
 *
 * isBeforeToken indicates that the current parser state is at the contextual
 * keyword (and that it is not yet emitted) rather than reading the token after
 * it. When isBeforeToken is true, we may be preceded by an `export` token and
 * should include that token in a type context we create, e.g. to handle
 * `export interface` or `export type`. (This is a bit of a hack and should be
 * cleaned up at some point.)
 *
 * Returns true if it matched a declaration.
 */
function tsParseDeclaration(contextualKeyword, isBeforeToken) {
  switch (contextualKeyword) {
    case ContextualKeyword._abstract:
      if (tsCheckLineTerminator(isBeforeToken) && match(TokenType._class)) {
        state.tokens[state.tokens.length - 1].type = TokenType._abstract;
        parseClass(/* isStatement */ true, /* optionalId */ false);
        return true;
      }
      break;

    case ContextualKeyword._enum:
      if (tsCheckLineTerminator(isBeforeToken) && match(TokenType.name)) {
        state.tokens[state.tokens.length - 1].type = TokenType._enum;
        tsParseEnumDeclaration();
        return true;
      }
      break;

    case ContextualKeyword._interface:
      if (tsCheckLineTerminator(isBeforeToken) && match(TokenType.name)) {
        // `next` is true in "export" and "declare" contexts, so we want to remove that token
        // as well.
        const oldIsType = pushTypeContext(isBeforeToken ? 2 : 1);
        tsParseInterfaceDeclaration();
        popTypeContext(oldIsType);
        return true;
      }
      break;

    case ContextualKeyword._module:
      if (tsCheckLineTerminator(isBeforeToken)) {
        if (match(TokenType.string)) {
          const oldIsType = pushTypeContext(isBeforeToken ? 2 : 1);
          tsParseAmbientExternalModuleDeclaration();
          popTypeContext(oldIsType);
          return true;
        } else if (match(TokenType.name)) {
          const oldIsType = pushTypeContext(isBeforeToken ? 2 : 1);
          tsParseModuleOrNamespaceDeclaration();
          popTypeContext(oldIsType);
          return true;
        }
      }
      break;

    case ContextualKeyword._namespace:
      if (tsCheckLineTerminator(isBeforeToken) && match(TokenType.name)) {
        const oldIsType = pushTypeContext(isBeforeToken ? 2 : 1);
        tsParseModuleOrNamespaceDeclaration();
        popTypeContext(oldIsType);
        return true;
      }
      break;

    case ContextualKeyword._type:
      if (tsCheckLineTerminator(isBeforeToken) && match(TokenType.name)) {
        const oldIsType = pushTypeContext(isBeforeToken ? 2 : 1);
        tsParseTypeAliasDeclaration();
        popTypeContext(oldIsType);
        return true;
      }
      break;
  }
  return false;
}

function tsCheckLineTerminator(isBeforeToken) {
  if (isBeforeToken) {
    // Babel checks hasFollowingLineBreak here and returns false, but this
    // doesn't actually come up, e.g. `export interface` can never be on its own
    // line in valid code.
    next();
    return true;
  } else {
    return !isLineTerminator();
  }
}

// Returns true if there was a generic async arrow function.
function tsTryParseGenericAsyncArrowFunction() {
  const snapshot = state.snapshot();

  tsParseTypeParameters();
  parseFunctionParams();
  tsTryParseTypeOrTypePredicateAnnotation();
  expect(TokenType.arrow);

  if (state.error) {
    state.restoreFromSnapshot(snapshot);
    return false;
  }

  parseFunctionBody(true);
  return true;
}

/**
 * If necessary, hack the tokenizer state so that this bitshift was actually a
 * less-than token, then keep parsing. This should only be used in situations
 * where we restore from snapshot on error (which reverts this change) or
 * where bitshift would be illegal anyway (e.g. in a class "extends" clause).
 *
 * This hack is useful to handle situations like foo<<T>() => void>() where
 * there can legitimately be two open-angle-brackets in a row in TS.
 */
function tsParseTypeArgumentsWithPossibleBitshift() {
  if (state.type === TokenType.bitShiftL) {
    state.pos -= 1;
    finishToken(TokenType.lessThan);
  }
  tsParseTypeArguments();
}

function tsParseTypeArguments() {
  const oldIsType = pushTypeContext(0);
  expect(TokenType.lessThan);
  while (!eat(TokenType.greaterThan) && !state.error) {
    tsParseType();
    eat(TokenType.comma);
  }
  popTypeContext(oldIsType);
}

function tsIsDeclarationStart() {
  if (match(TokenType.name)) {
    switch (state.contextualKeyword) {
      case ContextualKeyword._abstract:
      case ContextualKeyword._declare:
      case ContextualKeyword._enum:
      case ContextualKeyword._interface:
      case ContextualKeyword._module:
      case ContextualKeyword._namespace:
      case ContextualKeyword._type:
        return true;
    }
  }

  return false;
}

// ======================================================
// OVERRIDES
// ======================================================

function tsParseFunctionBodyAndFinish(functionStart, funcContextId) {
  // For arrow functions, `parseArrow` handles the return type itself.
  if (match(TokenType.colon)) {
    tsParseTypeOrTypePredicateAnnotation(TokenType.colon);
  }

  // The original code checked the node type to make sure this function type allows a missing
  // body, but we skip that to avoid sending around the node type. We instead just use the
  // allowExpressionBody boolean to make sure it's not an arrow function.
  if (!match(TokenType.braceL) && isLineTerminator()) {
    // Retroactively mark the function declaration as a type.
    let i = state.tokens.length - 1;
    while (
      i >= 0 &&
      (state.tokens[i].start >= functionStart ||
        state.tokens[i].type === TokenType._default ||
        state.tokens[i].type === TokenType._export)
    ) {
      state.tokens[i].isType = true;
      i--;
    }
    return;
  }

  parseFunctionBody(false, funcContextId);
}

function tsParseSubscript(
  startTokenIndex,
  noCalls,
  stopState,
) {
  if (!hasPrecedingLineBreak() && eat(TokenType.bang)) {
    state.tokens[state.tokens.length - 1].type = TokenType.nonNullAssertion;
    return;
  }

  if (match(TokenType.lessThan) || match(TokenType.bitShiftL)) {
    // There are number of things we are going to "maybe" parse, like type arguments on
    // tagged template expressions. If any of them fail, walk it back and continue.
    const snapshot = state.snapshot();

    if (!noCalls && atPossibleAsync()) {
      // Almost certainly this is a generic async function `async <T>() => ...
      // But it might be a call with a type argument `async<T>();`
      const asyncArrowFn = tsTryParseGenericAsyncArrowFunction();
      if (asyncArrowFn) {
        return;
      }
    }
    tsParseTypeArgumentsWithPossibleBitshift();
    if (!noCalls && eat(TokenType.parenL)) {
      // With f<T>(), the subscriptStartIndex marker is on the ( token.
      state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
      parseCallExpressionArguments();
    } else if (match(TokenType.backQuote)) {
      // Tagged template with a type argument.
      parseTemplate();
    } else if (
      // The remaining possible case is an instantiation expression, e.g.
      // Array<number> . Check for a few cases that would disqualify it and
      // cause us to bail out.
      // a<b>>c is not (a<b>)>c, but a<(b>>c)
      state.type === TokenType.greaterThan ||
      // a<b>c is (a<b)>c
      (state.type !== TokenType.parenL &&
        Boolean(state.type & TokenType.IS_EXPRESSION_START) &&
        !hasPrecedingLineBreak())
    ) {
      // Bail out. We have something like a<b>c, which is not an expression with
      // type arguments but an (a < b) > c comparison.
      unexpected();
    }

    if (state.error) {
      state.restoreFromSnapshot(snapshot);
    } else {
      return;
    }
  } else if (!noCalls && match(TokenType.questionDot) && lookaheadType() === TokenType.lessThan) {
    // If we see f?.<, then this must be an optional call with a type argument.
    next();
    state.tokens[startTokenIndex].isOptionalChainStart = true;
    // With f?.<T>(), the subscriptStartIndex marker is on the ?. token.
    state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;

    tsParseTypeArguments();
    expect(TokenType.parenL);
    parseCallExpressionArguments();
  }
  baseParseSubscript(startTokenIndex, noCalls, stopState);
}

function tsTryParseExport() {
  if (eat(TokenType._import)) {
    // One of these cases:
    // export import A = B;
    // export import type A = require("A");
    if (isContextual(ContextualKeyword._type) && lookaheadType() !== TokenType.eq) {
      // Eat a `type` token, unless it's actually an identifier name.
      expectContextual(ContextualKeyword._type);
    }
    tsParseImportEqualsDeclaration();
    return true;
  } else if (eat(TokenType.eq)) {
    // `export = x;`
    parseExpression();
    semicolon();
    return true;
  } else if (eatContextual(ContextualKeyword._as)) {
    // `export as namespace A;`
    // See `parseNamespaceExportDeclaration` in TypeScript's own parser
    expectContextual(ContextualKeyword._namespace);
    parseIdentifier();
    semicolon();
    return true;
  } else {
    if (isContextual(ContextualKeyword._type)) {
      const nextType = lookaheadType();
      // export type {foo} from 'a';
      // export type * from 'a';'
      // export type * as ns from 'a';'
      if (nextType === TokenType.braceL || nextType === TokenType.star) {
        next();
      }
    }
    return false;
  }
}

/**
 * Parse a TS import specifier, which may be prefixed with "type" and may be of
 * the form `foo as bar`.
 *
 * The number of identifier-like tokens we see happens to be enough to uniquely
 * identify the form, so simply count the number of identifiers rather than
 * matching the words `type` or `as`. This is particularly important because
 * `type` and `as` could each actually be plain identifiers rather than
 * keywords.
 */
function tsParseImportSpecifier() {
  parseIdentifier();
  if (match(TokenType.comma) || match(TokenType.braceR)) {
    // import {foo}
    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportDeclaration;
    return;
  }
  parseIdentifier();
  if (match(TokenType.comma) || match(TokenType.braceR)) {
    // import {type foo}
    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportDeclaration;
    state.tokens[state.tokens.length - 2].isType = true;
    state.tokens[state.tokens.length - 1].isType = true;
    return;
  }
  parseIdentifier();
  if (match(TokenType.comma) || match(TokenType.braceR)) {
    // import {foo as bar}
    state.tokens[state.tokens.length - 3].identifierRole = IdentifierRole.ImportAccess;
    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportDeclaration;
    return;
  }
  parseIdentifier();
  // import {type foo as bar}
  state.tokens[state.tokens.length - 3].identifierRole = IdentifierRole.ImportAccess;
  state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportDeclaration;
  state.tokens[state.tokens.length - 4].isType = true;
  state.tokens[state.tokens.length - 3].isType = true;
  state.tokens[state.tokens.length - 2].isType = true;
  state.tokens[state.tokens.length - 1].isType = true;
}

/**
 * Just like named import specifiers, export specifiers can have from 1 to 4
 * tokens, inclusive, and the number of tokens determines the role of each token.
 */
function tsParseExportSpecifier() {
  parseIdentifier();
  if (match(TokenType.comma) || match(TokenType.braceR)) {
    // export {foo}
    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ExportAccess;
    return;
  }
  parseIdentifier();
  if (match(TokenType.comma) || match(TokenType.braceR)) {
    // export {type foo}
    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ExportAccess;
    state.tokens[state.tokens.length - 2].isType = true;
    state.tokens[state.tokens.length - 1].isType = true;
    return;
  }
  parseIdentifier();
  if (match(TokenType.comma) || match(TokenType.braceR)) {
    // export {foo as bar}
    state.tokens[state.tokens.length - 3].identifierRole = IdentifierRole.ExportAccess;
    return;
  }
  parseIdentifier();
  // export {type foo as bar}
  state.tokens[state.tokens.length - 3].identifierRole = IdentifierRole.ExportAccess;
  state.tokens[state.tokens.length - 4].isType = true;
  state.tokens[state.tokens.length - 3].isType = true;
  state.tokens[state.tokens.length - 2].isType = true;
  state.tokens[state.tokens.length - 1].isType = true;
}

function tsTryParseExportDefaultExpression() {
  if (isContextual(ContextualKeyword._abstract) && lookaheadType() === TokenType._class) {
    state.type = TokenType._abstract;
    next(); // Skip "abstract"
    parseClass(true, true);
    return true;
  }
  if (isContextual(ContextualKeyword._interface)) {
    // Make sure "export default" are considered type tokens so the whole thing is removed.
    const oldIsType = pushTypeContext(2);
    tsParseDeclaration(ContextualKeyword._interface, true);
    popTypeContext(oldIsType);
    return true;
  }
  return false;
}

function tsTryParseStatementContent() {
  if (state.type === TokenType._const) {
    const ahead = lookaheadTypeAndKeyword();
    if (ahead.type === TokenType.name && ahead.contextualKeyword === ContextualKeyword._enum) {
      expect(TokenType._const);
      expectContextual(ContextualKeyword._enum);
      state.tokens[state.tokens.length - 1].type = TokenType._enum;
      tsParseEnumDeclaration();
      return true;
    }
  }
  return false;
}

function tsTryParseClassMemberWithIsStatic(isStatic) {
  const memberStartIndexAfterStatic = state.tokens.length;
  tsParseModifiers([
    ContextualKeyword._abstract,
    ContextualKeyword._readonly,
    ContextualKeyword._declare,
    ContextualKeyword._static,
    ContextualKeyword._override,
  ]);

  const modifiersEndIndex = state.tokens.length;
  const found = tsTryParseIndexSignature();
  if (found) {
    // Index signatures are type declarations, so set the modifier tokens as
    // type tokens. Most tokens could be assumed to be type tokens, but `static`
    // is ambiguous unless we set it explicitly here.
    const memberStartIndex = isStatic
      ? memberStartIndexAfterStatic - 1
      : memberStartIndexAfterStatic;
    for (let i = memberStartIndex; i < modifiersEndIndex; i++) {
      state.tokens[i].isType = true;
    }
    return true;
  }
  return false;
}

// Note: The reason we do this in `parseIdentifierStatement` and not `parseStatement`
// is that e.g. `type()` is valid JS, so we must try parsing that first.
// If it's really a type, we will parse `type` as the statement, and can correct it here
// by parsing the rest.
function tsParseIdentifierStatement(contextualKeyword) {
  const matched = tsParseExpressionStatement(contextualKeyword);
  if (!matched) {
    semicolon();
  }
}

function tsParseExportDeclaration() {
  // "export declare" is equivalent to just "export".
  const isDeclare = eatContextual(ContextualKeyword._declare);
  if (isDeclare) {
    state.tokens[state.tokens.length - 1].type = TokenType._declare;
  }

  let matchedDeclaration = false;
  if (match(TokenType.name)) {
    if (isDeclare) {
      const oldIsType = pushTypeContext(2);
      matchedDeclaration = tsTryParseExportDeclaration();
      popTypeContext(oldIsType);
    } else {
      matchedDeclaration = tsTryParseExportDeclaration();
    }
  }
  if (!matchedDeclaration) {
    if (isDeclare) {
      const oldIsType = pushTypeContext(2);
      parseStatement(true);
      popTypeContext(oldIsType);
    } else {
      parseStatement(true);
    }
  }
}

function tsAfterParseClassSuper(hasSuper) {
  if (hasSuper && (match(TokenType.lessThan) || match(TokenType.bitShiftL))) {
    tsParseTypeArgumentsWithPossibleBitshift();
  }
  if (eatContextual(ContextualKeyword._implements)) {
    state.tokens[state.tokens.length - 1].type = TokenType._implements;
    const oldIsType = pushTypeContext(1);
    tsParseHeritageClause();
    popTypeContext(oldIsType);
  }
}

function tsStartParseObjPropValue() {
  tsTryParseTypeParameters();
}

function tsStartParseFunctionParams() {
  tsTryParseTypeParameters();
}

// `let x: number;`
function tsAfterParseVarHead() {
  const oldIsType = pushTypeContext(0);
  if (!hasPrecedingLineBreak()) {
    eat(TokenType.bang);
  }
  tsTryParseTypeAnnotation();
  popTypeContext(oldIsType);
}

// parse the return type of an async arrow function - let foo = (async (): number => {});
function tsStartParseAsyncArrowFromCallExpression() {
  if (match(TokenType.colon)) {
    tsParseTypeAnnotation();
  }
}

// Returns true if the expression was an arrow function.
function tsParseMaybeAssign(noIn, isWithinParens) {
  // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.
  if (isJSXEnabled) {
    return tsParseMaybeAssignWithJSX(noIn, isWithinParens);
  } else {
    return tsParseMaybeAssignWithoutJSX(noIn, isWithinParens);
  }
}

function tsParseMaybeAssignWithJSX(noIn, isWithinParens) {
  if (!match(TokenType.lessThan)) {
    return baseParseMaybeAssign(noIn, isWithinParens);
  }

  // Prefer to parse JSX if possible. But may be an arrow fn.
  const snapshot = state.snapshot();
  let wasArrow = baseParseMaybeAssign(noIn, isWithinParens);
  if (state.error) {
    state.restoreFromSnapshot(snapshot);
  } else {
    return wasArrow;
  }

  // Otherwise, try as type-parameterized arrow function.
  state.type = TokenType.typeParameterStart;
  // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.
  tsParseTypeParameters();
  wasArrow = baseParseMaybeAssign(noIn, isWithinParens);
  if (!wasArrow) {
    unexpected();
  }

  return wasArrow;
}

function tsParseMaybeAssignWithoutJSX(noIn, isWithinParens) {
  if (!match(TokenType.lessThan)) {
    return baseParseMaybeAssign(noIn, isWithinParens);
  }

  const snapshot = state.snapshot();
  // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.
  tsParseTypeParameters();
  const wasArrow = baseParseMaybeAssign(noIn, isWithinParens);
  if (!wasArrow) {
    unexpected();
  }
  if (state.error) {
    state.restoreFromSnapshot(snapshot);
  } else {
    return wasArrow;
  }

  // Try parsing a type cast instead of an arrow function.
  // This will start with a type assertion (via parseMaybeUnary).
  // But don't directly call `tsParseTypeAssertion` because we want to handle any binary after it.
  return baseParseMaybeAssign(noIn, isWithinParens);
}

function tsParseArrow() {
  if (match(TokenType.colon)) {
    // This is different from how the TS parser does it.
    // TS uses lookahead. Babylon parses it as a parenthesized expression and converts.
    const snapshot = state.snapshot();

    tsParseTypeOrTypePredicateAnnotation(TokenType.colon);
    if (canInsertSemicolon()) unexpected();
    if (!match(TokenType.arrow)) unexpected();

    if (state.error) {
      state.restoreFromSnapshot(snapshot);
    }
  }
  return eat(TokenType.arrow);
}

// Allow type annotations inside of a parameter list.
function tsParseAssignableListItemTypes() {
  const oldIsType = pushTypeContext(0);
  eat(TokenType.question);
  tsTryParseTypeAnnotation();
  popTypeContext(oldIsType);
}

function tsParseMaybeDecoratorArguments() {
  if (match(TokenType.lessThan) || match(TokenType.bitShiftL)) {
    tsParseTypeArgumentsWithPossibleBitshift();
  }
  baseParseMaybeDecoratorArguments();
}

/**
 * Read token with JSX contents.
 *
 * In addition to detecting jsxTagStart and also regular tokens that might be
 * part of an expression, this code detects the start and end of text ranges
 * within JSX children. In order to properly count the number of children, we
 * distinguish jsxText from jsxEmptyText, which is a text range that simplifies
 * to the empty string after JSX whitespace trimming.
 *
 * It turns out that a JSX text range will simplify to the empty string if and
 * only if both of these conditions hold:
 * - The range consists entirely of whitespace characters (only counting space,
 *   tab, \r, and \n).
 * - The range has at least one newline.
 * This can be proven by analyzing any implementation of whitespace trimming,
 * e.g. formatJSXTextLiteral in Sucrase or cleanJSXElementLiteralChild in Babel.
 */
function jsxReadToken() {
  let sawNewline = false;
  let sawNonWhitespace = false;
  while (true) {
    if (state.pos >= input.length) {
      unexpected("Unterminated JSX contents");
      return;
    }

    const ch = input.charCodeAt(state.pos);
    if (ch === charCodes.lessThan || ch === charCodes.leftCurlyBrace) {
      if (state.pos === state.start) {
        if (ch === charCodes.lessThan) {
          state.pos++;
          finishToken(TokenType.jsxTagStart);
          return;
        }
        getTokenFromCode(ch);
        return;
      }
      if (sawNewline && !sawNonWhitespace) {
        finishToken(TokenType.jsxEmptyText);
      } else {
        finishToken(TokenType.jsxText);
      }
      return;
    }

    // This is part of JSX text.
    if (ch === charCodes.lineFeed) {
      sawNewline = true;
    } else if (ch !== charCodes.space && ch !== charCodes.carriageReturn && ch !== charCodes.tab) {
      sawNonWhitespace = true;
    }
    state.pos++;
  }
}

function jsxReadString(quote) {
  state.pos++;
  for (;;) {
    if (state.pos >= input.length) {
      unexpected("Unterminated string constant");
      return;
    }

    const ch = input.charCodeAt(state.pos);
    if (ch === quote) {
      state.pos++;
      break;
    }
    state.pos++;
  }
  finishToken(TokenType.string);
}

// Read a JSX identifier (valid tag or attribute name).
//
// Optimized version since JSX identifiers can't contain
// escape characters and so can be read as single slice.
// Also assumes that first character was already checked
// by isIdentifierStart in readToken.

function jsxReadWord() {
  let ch;
  do {
    if (state.pos > input.length) {
      unexpected("Unexpectedly reached the end of input.");
      return;
    }
    ch = input.charCodeAt(++state.pos);
  } while (IS_IDENTIFIER_CHAR[ch] || ch === charCodes.dash);
  finishToken(TokenType.jsxName);
}

// Parse next token as JSX identifier
function jsxParseIdentifier() {
  nextJSXTagToken();
}

// Parse namespaced identifier.
function jsxParseNamespacedName(identifierRole) {
  jsxParseIdentifier();
  if (!eat(TokenType.colon)) {
    // Plain identifier, so this is an access.
    state.tokens[state.tokens.length - 1].identifierRole = identifierRole;
    return;
  }
  // Process the second half of the namespaced name.
  jsxParseIdentifier();
}

// Parses element name in any form - namespaced, member
// or single identifier.
function jsxParseElementName() {
  const firstTokenIndex = state.tokens.length;
  jsxParseNamespacedName(IdentifierRole.Access);
  let hadDot = false;
  while (match(TokenType.dot)) {
    hadDot = true;
    nextJSXTagToken();
    jsxParseIdentifier();
  }
  // For tags like <div> with a lowercase letter and no dots, the name is
  // actually *not* an identifier access, since it's referring to a built-in
  // tag name. Remove the identifier role in this case so that it's not
  // accidentally transformed by the imports transform when preserving JSX.
  if (!hadDot) {
    const firstToken = state.tokens[firstTokenIndex];
    const firstChar = input.charCodeAt(firstToken.start);
    if (firstChar >= charCodes.lowercaseA && firstChar <= charCodes.lowercaseZ) {
      firstToken.identifierRole = null;
    }
  }
}

// Parses any type of JSX attribute value.
function jsxParseAttributeValue() {
  switch (state.type) {
    case TokenType.braceL:
      next();
      parseExpression();
      nextJSXTagToken();
      return;

    case TokenType.jsxTagStart:
      jsxParseElement();
      nextJSXTagToken();
      return;

    case TokenType.string:
      nextJSXTagToken();
      return;

    default:
      unexpected("JSX value should be either an expression or a quoted JSX text");
  }
}

// Parse JSX spread child, after already processing the {
// Does not parse the closing }
function jsxParseSpreadChild() {
  expect(TokenType.ellipsis);
  parseExpression();
}

// Parses JSX opening tag starting after "<".
// Returns true if the tag was self-closing.
// Does not parse the last token.
function jsxParseOpeningElement(initialTokenIndex) {
  if (match(TokenType.jsxTagEnd)) {
    // This is an open-fragment.
    return false;
  }
  jsxParseElementName();
  if (isTypeScriptEnabled) {
    tsTryParseJSXTypeArgument();
  }
  let hasSeenPropSpread = false;
  while (!match(TokenType.slash) && !match(TokenType.jsxTagEnd) && !state.error) {
    if (eat(TokenType.braceL)) {
      hasSeenPropSpread = true;
      expect(TokenType.ellipsis);
      parseMaybeAssign();
      // }
      nextJSXTagToken();
      continue;
    }
    if (
      hasSeenPropSpread &&
      state.end - state.start === 3 &&
      input.charCodeAt(state.start) === charCodes.lowercaseK &&
      input.charCodeAt(state.start + 1) === charCodes.lowercaseE &&
      input.charCodeAt(state.start + 2) === charCodes.lowercaseY
    ) {
      state.tokens[initialTokenIndex].jsxRole = JSXRole.KeyAfterPropSpread;
    }
    jsxParseNamespacedName(IdentifierRole.ObjectKey);
    if (match(TokenType.eq)) {
      nextJSXTagToken();
      jsxParseAttributeValue();
    }
  }
  const isSelfClosing = match(TokenType.slash);
  if (isSelfClosing) {
    // /
    nextJSXTagToken();
  }
  return isSelfClosing;
}

// Parses JSX closing tag starting after "</".
// Does not parse the last token.
function jsxParseClosingElement() {
  if (match(TokenType.jsxTagEnd)) {
    // Fragment syntax, so we immediately have a tag end.
    return;
  }
  jsxParseElementName();
}

// Parses entire JSX element, including its opening tag
// (starting after "<"), attributes, contents and closing tag.
// Does not parse the last token.
function jsxParseElementAt() {
  const initialTokenIndex = state.tokens.length - 1;
  state.tokens[initialTokenIndex].jsxRole = JSXRole.NoChildren;
  let numExplicitChildren = 0;
  const isSelfClosing = jsxParseOpeningElement(initialTokenIndex);
  if (!isSelfClosing) {
    nextJSXExprToken();
    while (true) {
      switch (state.type) {
        case TokenType.jsxTagStart:
          nextJSXTagToken();
          if (match(TokenType.slash)) {
            nextJSXTagToken();
            jsxParseClosingElement();
            // Key after prop spread takes precedence over number of children,
            // since it means we switch to createElement, which doesn't care
            // about number of children.
            if (state.tokens[initialTokenIndex].jsxRole !== JSXRole.KeyAfterPropSpread) {
              if (numExplicitChildren === 1) {
                state.tokens[initialTokenIndex].jsxRole = JSXRole.OneChild;
              } else if (numExplicitChildren > 1) {
                state.tokens[initialTokenIndex].jsxRole = JSXRole.StaticChildren;
              }
            }
            return;
          }
          numExplicitChildren++;
          jsxParseElementAt();
          nextJSXExprToken();
          break;

        case TokenType.jsxText:
          numExplicitChildren++;
          nextJSXExprToken();
          break;

        case TokenType.jsxEmptyText:
          nextJSXExprToken();
          break;

        case TokenType.braceL:
          next();
          if (match(TokenType.ellipsis)) {
            jsxParseSpreadChild();
            nextJSXExprToken();
            // Spread children are a mechanism to explicitly mark children as
            // static, so count it as 2 children to satisfy the "more than one
            // child" condition.
            numExplicitChildren += 2;
          } else {
            // If we see {}, this is an empty pseudo-expression that doesn't
            // count as a child.
            if (!match(TokenType.braceR)) {
              numExplicitChildren++;
              parseExpression();
            }
            nextJSXExprToken();
          }

          break;

        // istanbul ignore next - should never happen
        default:
          unexpected();
          return;
      }
    }
  }
}

// Parses entire JSX element from current position.
// Does not parse the last token.
function jsxParseElement() {
  nextJSXTagToken();
  jsxParseElementAt();
}

// ==================================
// Overrides
// ==================================

function nextJSXTagToken() {
  state.tokens.push(new Token());
  skipSpace();
  state.start = state.pos;
  const code = input.charCodeAt(state.pos);

  if (IS_IDENTIFIER_START[code]) {
    jsxReadWord();
  } else if (code === charCodes.quotationMark || code === charCodes.apostrophe) {
    jsxReadString(code);
  } else {
    // The following tokens are just one character each.
    ++state.pos;
    switch (code) {
      case charCodes.greaterThan:
        finishToken(TokenType.jsxTagEnd);
        break;
      case charCodes.lessThan:
        finishToken(TokenType.jsxTagStart);
        break;
      case charCodes.slash:
        finishToken(TokenType.slash);
        break;
      case charCodes.equalsTo:
        finishToken(TokenType.eq);
        break;
      case charCodes.leftCurlyBrace:
        finishToken(TokenType.braceL);
        break;
      case charCodes.dot:
        finishToken(TokenType.dot);
        break;
      case charCodes.colon:
        finishToken(TokenType.colon);
        break;
      default:
        unexpected();
    }
  }
}

function nextJSXExprToken() {
  state.tokens.push(new Token());
  state.start = state.pos;
  jsxReadToken();
}

/**
 * Common parser code for TypeScript and Flow.
 */

// An apparent conditional expression could actually be an optional parameter in an arrow function.
function typedParseConditional(noIn) {
  // If we see ?:, this can't possibly be a valid conditional. typedParseParenItem will be called
  // later to finish off the arrow parameter. We also need to handle bare ? tokens for optional
  // parameters without type annotations, i.e. ?, and ?) .
  if (match(TokenType.question)) {
    const nextType = lookaheadType();
    if (nextType === TokenType.colon || nextType === TokenType.comma || nextType === TokenType.parenR) {
      return;
    }
  }
  baseParseConditional(noIn);
}

// Note: These "type casts" are *not* valid TS expressions.
// But we parse them here and change them when completing the arrow function.
function typedParseParenItem() {
  eatTypeToken(TokenType.question);
  if (match(TokenType.colon)) {
    if (isTypeScriptEnabled) {
      tsParseTypeAnnotation();
    } else if (isFlowEnabled) {
      flowParseTypeAnnotation();
    }
  }
}

/* eslint max-len: 0 */

class StopState {
  
  constructor(stop) {
    this.stop = stop;
  }
}

// ### Expression parsing

// These nest, from the most general expression type at the top to
// 'atomic', nondivisible expression types at the bottom. Most of
// the functions will simply let the function (s) below them parse,
// and, *if* the syntactic construct they handle is present, wrap
// the AST node that the inner parser gave them in another node.
function parseExpression(noIn = false) {
  parseMaybeAssign(noIn);
  if (match(TokenType.comma)) {
    while (eat(TokenType.comma)) {
      parseMaybeAssign(noIn);
    }
  }
}

/**
 * noIn is used when parsing a for loop so that we don't interpret a following "in" as the binary
 * operatior.
 * isWithinParens is used to indicate that we're parsing something that might be a comma expression
 * or might be an arrow function or might be a Flow type assertion (which requires explicit parens).
 * In these cases, we should allow : and ?: after the initial "left" part.
 */
function parseMaybeAssign(noIn = false, isWithinParens = false) {
  if (isTypeScriptEnabled) {
    return tsParseMaybeAssign(noIn, isWithinParens);
  } else if (isFlowEnabled) {
    return flowParseMaybeAssign(noIn, isWithinParens);
  } else {
    return baseParseMaybeAssign(noIn, isWithinParens);
  }
}

// Parse an assignment expression. This includes applications of
// operators like `+=`.
// Returns true if the expression was an arrow function.
function baseParseMaybeAssign(noIn, isWithinParens) {
  if (match(TokenType._yield)) {
    parseYield();
    return false;
  }

  if (match(TokenType.parenL) || match(TokenType.name) || match(TokenType._yield)) {
    state.potentialArrowAt = state.start;
  }

  const wasArrow = parseMaybeConditional(noIn);
  if (isWithinParens) {
    parseParenItem();
  }
  if (state.type & TokenType.IS_ASSIGN) {
    next();
    parseMaybeAssign(noIn);
    return false;
  }
  return wasArrow;
}

// Parse a ternary conditional (`?:`) operator.
// Returns true if the expression was an arrow function.
function parseMaybeConditional(noIn) {
  const wasArrow = parseExprOps(noIn);
  if (wasArrow) {
    return true;
  }
  parseConditional(noIn);
  return false;
}

function parseConditional(noIn) {
  if (isTypeScriptEnabled || isFlowEnabled) {
    typedParseConditional(noIn);
  } else {
    baseParseConditional(noIn);
  }
}

function baseParseConditional(noIn) {
  if (eat(TokenType.question)) {
    parseMaybeAssign();
    expect(TokenType.colon);
    parseMaybeAssign(noIn);
  }
}

// Start the precedence parser.
// Returns true if this was an arrow function
function parseExprOps(noIn) {
  const startTokenIndex = state.tokens.length;
  const wasArrow = parseMaybeUnary();
  if (wasArrow) {
    return true;
  }
  parseExprOp(startTokenIndex, -1, noIn);
  return false;
}

// Parse binary operators with the operator precedence parsing
// algorithm. `left` is the left-hand side of the operator.
// `minPrec` provides context that allows the function to stop and
// defer further parser to one of its callers when it encounters an
// operator that has a lower precedence than the set it is parsing.
function parseExprOp(startTokenIndex, minPrec, noIn) {
  if (
    isTypeScriptEnabled &&
    (TokenType._in & TokenType.PRECEDENCE_MASK) > minPrec &&
    !hasPrecedingLineBreak() &&
    (eatContextual(ContextualKeyword._as) || eatContextual(ContextualKeyword._satisfies))
  ) {
    const oldIsType = pushTypeContext(1);
    tsParseType();
    popTypeContext(oldIsType);
    rescan_gt();
    parseExprOp(startTokenIndex, minPrec, noIn);
    return;
  }

  const prec = state.type & TokenType.PRECEDENCE_MASK;
  if (prec > 0 && (!noIn || !match(TokenType._in))) {
    if (prec > minPrec) {
      const op = state.type;
      next();
      if (op === TokenType.nullishCoalescing) {
        state.tokens[state.tokens.length - 1].nullishStartIndex = startTokenIndex;
      }

      const rhsStartTokenIndex = state.tokens.length;
      parseMaybeUnary();
      // Extend the right operand of this operator if possible.
      parseExprOp(rhsStartTokenIndex, op & TokenType.IS_RIGHT_ASSOCIATIVE ? prec - 1 : prec, noIn);
      if (op === TokenType.nullishCoalescing) {
        state.tokens[startTokenIndex].numNullishCoalesceStarts++;
        state.tokens[state.tokens.length - 1].numNullishCoalesceEnds++;
      }
      // Continue with any future operator holding this expression as the left operand.
      parseExprOp(startTokenIndex, minPrec, noIn);
    }
  }
}

// Parse unary operators, both prefix and postfix.
// Returns true if this was an arrow function.
function parseMaybeUnary() {
  if (isTypeScriptEnabled && !isJSXEnabled && eat(TokenType.lessThan)) {
    tsParseTypeAssertion();
    return false;
  }
  if (
    isContextual(ContextualKeyword._module) &&
    lookaheadCharCode() === charCodes.leftCurlyBrace &&
    !hasFollowingLineBreak()
  ) {
    parseModuleExpression();
    return false;
  }
  if (state.type & TokenType.IS_PREFIX) {
    next();
    parseMaybeUnary();
    return false;
  }

  const wasArrow = parseExprSubscripts();
  if (wasArrow) {
    return true;
  }
  while (state.type & TokenType.IS_POSTFIX && !canInsertSemicolon()) {
    // The tokenizer calls everything a preincrement, so make it a postincrement when
    // we see it in that context.
    if (state.type === TokenType.preIncDec) {
      state.type = TokenType.postIncDec;
    }
    next();
  }
  return false;
}

// Parse call, dot, and `[]`-subscript expressions.
// Returns true if this was an arrow function.
function parseExprSubscripts() {
  const startTokenIndex = state.tokens.length;
  const wasArrow = parseExprAtom();
  if (wasArrow) {
    return true;
  }
  parseSubscripts(startTokenIndex);
  // If there was any optional chain operation, the start token would be marked
  // as such, so also mark the end now.
  if (state.tokens.length > startTokenIndex && state.tokens[startTokenIndex].isOptionalChainStart) {
    state.tokens[state.tokens.length - 1].isOptionalChainEnd = true;
  }
  return false;
}

function parseSubscripts(startTokenIndex, noCalls = false) {
  if (isFlowEnabled) {
    flowParseSubscripts(startTokenIndex, noCalls);
  } else {
    baseParseSubscripts(startTokenIndex, noCalls);
  }
}

function baseParseSubscripts(startTokenIndex, noCalls = false) {
  const stopState = new StopState(false);
  do {
    parseSubscript(startTokenIndex, noCalls, stopState);
  } while (!stopState.stop && !state.error);
}

function parseSubscript(startTokenIndex, noCalls, stopState) {
  if (isTypeScriptEnabled) {
    tsParseSubscript(startTokenIndex, noCalls, stopState);
  } else if (isFlowEnabled) {
    flowParseSubscript(startTokenIndex, noCalls, stopState);
  } else {
    baseParseSubscript(startTokenIndex, noCalls, stopState);
  }
}

/** Set 'state.stop = true' to indicate that we should stop parsing subscripts. */
function baseParseSubscript(
  startTokenIndex,
  noCalls,
  stopState,
) {
  if (!noCalls && eat(TokenType.doubleColon)) {
    parseNoCallExpr();
    stopState.stop = true;
    // Propagate startTokenIndex so that `a::b?.()` will keep `a` as the first token. We may want
    // to revisit this in the future when fully supporting bind syntax.
    parseSubscripts(startTokenIndex, noCalls);
  } else if (match(TokenType.questionDot)) {
    state.tokens[startTokenIndex].isOptionalChainStart = true;
    if (noCalls && lookaheadType() === TokenType.parenL) {
      stopState.stop = true;
      return;
    }
    next();
    state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;

    if (eat(TokenType.bracketL)) {
      parseExpression();
      expect(TokenType.bracketR);
    } else if (eat(TokenType.parenL)) {
      parseCallExpressionArguments();
    } else {
      parseMaybePrivateName();
    }
  } else if (eat(TokenType.dot)) {
    state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
    parseMaybePrivateName();
  } else if (eat(TokenType.bracketL)) {
    state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
    parseExpression();
    expect(TokenType.bracketR);
  } else if (!noCalls && match(TokenType.parenL)) {
    if (atPossibleAsync()) {
      // We see "async", but it's possible it's a usage of the name "async". Parse as if it's a
      // function call, and if we see an arrow later, backtrack and re-parse as a parameter list.
      const snapshot = state.snapshot();
      const asyncStartTokenIndex = state.tokens.length;
      next();
      state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;

      const callContextId = getNextContextId();

      state.tokens[state.tokens.length - 1].contextId = callContextId;
      parseCallExpressionArguments();
      state.tokens[state.tokens.length - 1].contextId = callContextId;

      if (shouldParseAsyncArrow()) {
        // We hit an arrow, so backtrack and start again parsing function parameters.
        state.restoreFromSnapshot(snapshot);
        stopState.stop = true;
        state.scopeDepth++;

        parseFunctionParams();
        parseAsyncArrowFromCallExpression(asyncStartTokenIndex);
      }
    } else {
      next();
      state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;
      const callContextId = getNextContextId();
      state.tokens[state.tokens.length - 1].contextId = callContextId;
      parseCallExpressionArguments();
      state.tokens[state.tokens.length - 1].contextId = callContextId;
    }
  } else if (match(TokenType.backQuote)) {
    // Tagged template expression.
    parseTemplate();
  } else {
    stopState.stop = true;
  }
}

function atPossibleAsync() {
  // This was made less strict than the original version to avoid passing around nodes, but it
  // should be safe to have rare false positives here.
  return (
    state.tokens[state.tokens.length - 1].contextualKeyword === ContextualKeyword._async &&
    !canInsertSemicolon()
  );
}

function parseCallExpressionArguments() {
  let first = true;
  while (!eat(TokenType.parenR) && !state.error) {
    if (first) {
      first = false;
    } else {
      expect(TokenType.comma);
      if (eat(TokenType.parenR)) {
        break;
      }
    }

    parseExprListItem(false);
  }
}

function shouldParseAsyncArrow() {
  return match(TokenType.colon) || match(TokenType.arrow);
}

function parseAsyncArrowFromCallExpression(startTokenIndex) {
  if (isTypeScriptEnabled) {
    tsStartParseAsyncArrowFromCallExpression();
  } else if (isFlowEnabled) {
    flowStartParseAsyncArrowFromCallExpression();
  }
  expect(TokenType.arrow);
  parseArrowExpression(startTokenIndex);
}

// Parse a no-call expression (like argument of `new` or `::` operators).

function parseNoCallExpr() {
  const startTokenIndex = state.tokens.length;
  parseExprAtom();
  parseSubscripts(startTokenIndex, true);
}

// Parse an atomic expression — either a single token that is an
// expression, an expression started by a keyword like `function` or
// `new`, or an expression wrapped in punctuation like `()`, `[]`,
// or `{}`.
// Returns true if the parsed expression was an arrow function.
function parseExprAtom() {
  if (eat(TokenType.modulo)) {
    // V8 intrinsic expression. Just parse the identifier, and the function invocation is parsed
    // naturally.
    parseIdentifier();
    return false;
  }

  if (match(TokenType.jsxText) || match(TokenType.jsxEmptyText)) {
    parseLiteral();
    return false;
  } else if (match(TokenType.lessThan) && isJSXEnabled) {
    state.type = TokenType.jsxTagStart;
    jsxParseElement();
    next();
    return false;
  }

  const canBeArrow = state.potentialArrowAt === state.start;
  switch (state.type) {
    case TokenType.slash:
    case TokenType.assign:
      retokenizeSlashAsRegex();
    // Fall through.

    case TokenType._super:
    case TokenType._this:
    case TokenType.regexp:
    case TokenType.num:
    case TokenType.bigint:
    case TokenType.decimal:
    case TokenType.string:
    case TokenType._null:
    case TokenType._true:
    case TokenType._false:
      next();
      return false;

    case TokenType._import:
      next();
      if (match(TokenType.dot)) {
        // import.meta
        state.tokens[state.tokens.length - 1].type = TokenType.name;
        next();
        parseIdentifier();
      }
      return false;

    case TokenType.name: {
      const startTokenIndex = state.tokens.length;
      const functionStart = state.start;
      const contextualKeyword = state.contextualKeyword;
      parseIdentifier();
      if (contextualKeyword === ContextualKeyword._await) {
        parseAwait();
        return false;
      } else if (
        contextualKeyword === ContextualKeyword._async &&
        match(TokenType._function) &&
        !canInsertSemicolon()
      ) {
        next();
        parseFunction(functionStart, false);
        return false;
      } else if (
        canBeArrow &&
        contextualKeyword === ContextualKeyword._async &&
        !canInsertSemicolon() &&
        match(TokenType.name)
      ) {
        state.scopeDepth++;
        parseBindingIdentifier(false);
        expect(TokenType.arrow);
        // let foo = async bar => {};
        parseArrowExpression(startTokenIndex);
        return true;
      } else if (match(TokenType._do) && !canInsertSemicolon()) {
        next();
        parseBlock();
        return false;
      }

      if (canBeArrow && !canInsertSemicolon() && match(TokenType.arrow)) {
        state.scopeDepth++;
        markPriorBindingIdentifier(false);
        expect(TokenType.arrow);
        parseArrowExpression(startTokenIndex);
        return true;
      }

      state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.Access;
      return false;
    }

    case TokenType._do: {
      next();
      parseBlock();
      return false;
    }

    case TokenType.parenL: {
      const wasArrow = parseParenAndDistinguishExpression(canBeArrow);
      return wasArrow;
    }

    case TokenType.bracketL:
      next();
      parseExprList(TokenType.bracketR, true);
      return false;

    case TokenType.braceL:
      parseObj(false, false);
      return false;

    case TokenType._function:
      parseFunctionExpression();
      return false;

    case TokenType.at:
      parseDecorators();
    // Fall through.

    case TokenType._class:
      parseClass(false);
      return false;

    case TokenType._new:
      parseNew();
      return false;

    case TokenType.backQuote:
      parseTemplate();
      return false;

    case TokenType.doubleColon: {
      next();
      parseNoCallExpr();
      return false;
    }

    case TokenType.hash: {
      const code = lookaheadCharCode();
      if (IS_IDENTIFIER_START[code] || code === charCodes.backslash) {
        parseMaybePrivateName();
      } else {
        next();
      }
      // Smart pipeline topic reference.
      return false;
    }

    default:
      unexpected();
      return false;
  }
}

function parseMaybePrivateName() {
  eat(TokenType.hash);
  parseIdentifier();
}

function parseFunctionExpression() {
  const functionStart = state.start;
  parseIdentifier();
  if (eat(TokenType.dot)) {
    // function.sent
    parseIdentifier();
  }
  parseFunction(functionStart, false);
}

function parseLiteral() {
  next();
}

function parseParenExpression() {
  expect(TokenType.parenL);
  parseExpression();
  expect(TokenType.parenR);
}

// Returns true if this was an arrow expression.
function parseParenAndDistinguishExpression(canBeArrow) {
  // Assume this is a normal parenthesized expression, but if we see an arrow, we'll bail and
  // start over as a parameter list.
  const snapshot = state.snapshot();

  const startTokenIndex = state.tokens.length;
  expect(TokenType.parenL);

  let first = true;

  while (!match(TokenType.parenR) && !state.error) {
    if (first) {
      first = false;
    } else {
      expect(TokenType.comma);
      if (match(TokenType.parenR)) {
        break;
      }
    }

    if (match(TokenType.ellipsis)) {
      parseRest(false /* isBlockScope */);
      parseParenItem();
      break;
    } else {
      parseMaybeAssign(false, true);
    }
  }

  expect(TokenType.parenR);

  if (canBeArrow && shouldParseArrow()) {
    const wasArrow = parseArrow();
    if (wasArrow) {
      // It was an arrow function this whole time, so start over and parse it as params so that we
      // get proper token annotations.
      state.restoreFromSnapshot(snapshot);
      state.scopeDepth++;
      // Don't specify a context ID because arrow functions don't need a context ID.
      parseFunctionParams();
      parseArrow();
      parseArrowExpression(startTokenIndex);
      if (state.error) {
        // Nevermind! This must have been something that looks very much like an
        // arrow function but where its "parameter list" isn't actually a valid
        // parameter list. Force non-arrow parsing.
        // See https://github.com/alangpierce/sucrase/issues/666 for an example.
        state.restoreFromSnapshot(snapshot);
        parseParenAndDistinguishExpression(false);
        return false;
      }
      return true;
    }
  }

  return false;
}

function shouldParseArrow() {
  return match(TokenType.colon) || !canInsertSemicolon();
}

// Returns whether there was an arrow token.
function parseArrow() {
  if (isTypeScriptEnabled) {
    return tsParseArrow();
  } else if (isFlowEnabled) {
    return flowParseArrow();
  } else {
    return eat(TokenType.arrow);
  }
}

function parseParenItem() {
  if (isTypeScriptEnabled || isFlowEnabled) {
    typedParseParenItem();
  }
}

// New's precedence is slightly tricky. It must allow its argument to
// be a `[]` or dot subscript expression, but not a call — at least,
// not without wrapping it in parentheses. Thus, it uses the noCalls
// argument to parseSubscripts to prevent it from consuming the
// argument list.
function parseNew() {
  expect(TokenType._new);
  if (eat(TokenType.dot)) {
    // new.target
    parseIdentifier();
    return;
  }
  parseNewCallee();
  if (isFlowEnabled) {
    flowStartParseNewArguments();
  }
  if (eat(TokenType.parenL)) {
    parseExprList(TokenType.parenR);
  }
}

function parseNewCallee() {
  parseNoCallExpr();
  eat(TokenType.questionDot);
}

function parseTemplate() {
  // Finish `, read quasi
  nextTemplateToken();
  // Finish quasi, read ${
  nextTemplateToken();
  while (!match(TokenType.backQuote) && !state.error) {
    expect(TokenType.dollarBraceL);
    parseExpression();
    // Finish }, read quasi
    nextTemplateToken();
    // Finish quasi, read either ${ or `
    nextTemplateToken();
  }
  next();
}

// Parse an object literal or binding pattern.
function parseObj(isPattern, isBlockScope) {
  // Attach a context ID to the object open and close brace and each object key.
  const contextId = getNextContextId();
  let first = true;

  next();
  state.tokens[state.tokens.length - 1].contextId = contextId;

  while (!eat(TokenType.braceR) && !state.error) {
    if (first) {
      first = false;
    } else {
      expect(TokenType.comma);
      if (eat(TokenType.braceR)) {
        break;
      }
    }

    let isGenerator = false;
    if (match(TokenType.ellipsis)) {
      const previousIndex = state.tokens.length;
      parseSpread();
      if (isPattern) {
        // Mark role when the only thing being spread over is an identifier.
        if (state.tokens.length === previousIndex + 2) {
          markPriorBindingIdentifier(isBlockScope);
        }
        if (eat(TokenType.braceR)) {
          break;
        }
      }
      continue;
    }

    if (!isPattern) {
      isGenerator = eat(TokenType.star);
    }

    if (!isPattern && isContextual(ContextualKeyword._async)) {
      if (isGenerator) unexpected();

      parseIdentifier();
      if (
        match(TokenType.colon) ||
        match(TokenType.parenL) ||
        match(TokenType.braceR) ||
        match(TokenType.eq) ||
        match(TokenType.comma)
      ) ; else {
        if (match(TokenType.star)) {
          next();
          isGenerator = true;
        }
        parsePropertyName(contextId);
      }
    } else {
      parsePropertyName(contextId);
    }

    parseObjPropValue(isPattern, isBlockScope, contextId);
  }

  state.tokens[state.tokens.length - 1].contextId = contextId;
}

function isGetterOrSetterMethod(isPattern) {
  // We go off of the next and don't bother checking if the node key is actually "get" or "set".
  // This lets us avoid generating a node, and should only make the validation worse.
  return (
    !isPattern &&
    (match(TokenType.string) || // get "string"() {}
      match(TokenType.num) || // get 1() {}
      match(TokenType.bracketL) || // get ["string"]() {}
      match(TokenType.name) || // get foo() {}
      !!(state.type & TokenType.IS_KEYWORD)) // get debugger() {}
  );
}

// Returns true if this was a method.
function parseObjectMethod(isPattern, objectContextId) {
  // We don't need to worry about modifiers because object methods can't have optional bodies, so
  // the start will never be used.
  const functionStart = state.start;
  if (match(TokenType.parenL)) {
    if (isPattern) unexpected();
    parseMethod(functionStart, /* isConstructor */ false);
    return true;
  }

  if (isGetterOrSetterMethod(isPattern)) {
    parsePropertyName(objectContextId);
    parseMethod(functionStart, /* isConstructor */ false);
    return true;
  }
  return false;
}

function parseObjectProperty(isPattern, isBlockScope) {
  if (eat(TokenType.colon)) {
    if (isPattern) {
      parseMaybeDefault(isBlockScope);
    } else {
      parseMaybeAssign(false);
    }
    return;
  }

  // Since there's no colon, we assume this is an object shorthand.

  // If we're in a destructuring, we've now discovered that the key was actually an assignee, so
  // we need to tag it as a declaration with the appropriate scope. Otherwise, we might need to
  // transform it on access, so mark it as a normal object shorthand.
  let identifierRole;
  if (isPattern) {
    if (state.scopeDepth === 0) {
      identifierRole = IdentifierRole.ObjectShorthandTopLevelDeclaration;
    } else if (isBlockScope) {
      identifierRole = IdentifierRole.ObjectShorthandBlockScopedDeclaration;
    } else {
      identifierRole = IdentifierRole.ObjectShorthandFunctionScopedDeclaration;
    }
  } else {
    identifierRole = IdentifierRole.ObjectShorthand;
  }
  state.tokens[state.tokens.length - 1].identifierRole = identifierRole;

  // Regardless of whether we know this to be a pattern or if we're in an ambiguous context, allow
  // parsing as if there's a default value.
  parseMaybeDefault(isBlockScope, true);
}

function parseObjPropValue(
  isPattern,
  isBlockScope,
  objectContextId,
) {
  if (isTypeScriptEnabled) {
    tsStartParseObjPropValue();
  } else if (isFlowEnabled) {
    flowStartParseObjPropValue();
  }
  const wasMethod = parseObjectMethod(isPattern, objectContextId);
  if (!wasMethod) {
    parseObjectProperty(isPattern, isBlockScope);
  }
}

function parsePropertyName(objectContextId) {
  if (isFlowEnabled) {
    flowParseVariance();
  }
  if (eat(TokenType.bracketL)) {
    state.tokens[state.tokens.length - 1].contextId = objectContextId;
    parseMaybeAssign();
    expect(TokenType.bracketR);
    state.tokens[state.tokens.length - 1].contextId = objectContextId;
  } else {
    if (match(TokenType.num) || match(TokenType.string) || match(TokenType.bigint) || match(TokenType.decimal)) {
      parseExprAtom();
    } else {
      parseMaybePrivateName();
    }

    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ObjectKey;
    state.tokens[state.tokens.length - 1].contextId = objectContextId;
  }
}

// Parse object or class method.
function parseMethod(functionStart, isConstructor) {
  const funcContextId = getNextContextId();

  state.scopeDepth++;
  const startTokenIndex = state.tokens.length;
  const allowModifiers = isConstructor; // For TypeScript parameter properties
  parseFunctionParams(allowModifiers, funcContextId);
  parseFunctionBodyAndFinish(functionStart, funcContextId);
  const endTokenIndex = state.tokens.length;
  state.scopes.push(new Scope(startTokenIndex, endTokenIndex, true));
  state.scopeDepth--;
}

// Parse arrow function expression.
// If the parameters are provided, they will be converted to an
// assignable list.
function parseArrowExpression(startTokenIndex) {
  parseFunctionBody(true);
  const endTokenIndex = state.tokens.length;
  state.scopes.push(new Scope(startTokenIndex, endTokenIndex, true));
  state.scopeDepth--;
}

function parseFunctionBodyAndFinish(functionStart, funcContextId = 0) {
  if (isTypeScriptEnabled) {
    tsParseFunctionBodyAndFinish(functionStart, funcContextId);
  } else if (isFlowEnabled) {
    flowParseFunctionBodyAndFinish(funcContextId);
  } else {
    parseFunctionBody(false, funcContextId);
  }
}

function parseFunctionBody(allowExpression, funcContextId = 0) {
  const isExpression = allowExpression && !match(TokenType.braceL);

  if (isExpression) {
    parseMaybeAssign();
  } else {
    parseBlock(true /* isFunctionScope */, funcContextId);
  }
}

// Parses a comma-separated list of expressions, and returns them as
// an array. `close` is the token type that ends the list, and
// `allowEmpty` can be turned on to allow subsequent commas with
// nothing in between them to be parsed as `null` (which is needed
// for array literals).

function parseExprList(close, allowEmpty = false) {
  let first = true;
  while (!eat(close) && !state.error) {
    if (first) {
      first = false;
    } else {
      expect(TokenType.comma);
      if (eat(close)) break;
    }
    parseExprListItem(allowEmpty);
  }
}

function parseExprListItem(allowEmpty) {
  if (allowEmpty && match(TokenType.comma)) ; else if (match(TokenType.ellipsis)) {
    parseSpread();
    parseParenItem();
  } else if (match(TokenType.question)) {
    // Partial function application proposal.
    next();
  } else {
    parseMaybeAssign(false, true);
  }
}

// Parse the next token as an identifier.
function parseIdentifier() {
  next();
  state.tokens[state.tokens.length - 1].type = TokenType.name;
}

// Parses await expression inside async function.
function parseAwait() {
  parseMaybeUnary();
}

// Parses yield expression inside generator.
function parseYield() {
  next();
  if (!match(TokenType.semi) && !canInsertSemicolon()) {
    eat(TokenType.star);
    parseMaybeAssign();
  }
}

// https://github.com/tc39/proposal-js-module-blocks
function parseModuleExpression() {
  expectContextual(ContextualKeyword._module);
  expect(TokenType.braceL);
  // For now, just call parseBlockBody to parse the block. In the future when we
  // implement full support, we'll want to emit scopes and possibly other
  // information.
  parseBlockBody(TokenType.braceR);
}

/* eslint max-len: 0 */

function isMaybeDefaultImport(lookahead) {
  return (
    (lookahead.type === TokenType.name || !!(lookahead.type & TokenType.IS_KEYWORD)) &&
    lookahead.contextualKeyword !== ContextualKeyword._from
  );
}

function flowParseTypeInitialiser(tok) {
  const oldIsType = pushTypeContext(0);
  expect(tok || TokenType.colon);
  flowParseType();
  popTypeContext(oldIsType);
}

function flowParsePredicate() {
  expect(TokenType.modulo);
  expectContextual(ContextualKeyword._checks);
  if (eat(TokenType.parenL)) {
    parseExpression();
    expect(TokenType.parenR);
  }
}

function flowParseTypeAndPredicateInitialiser() {
  const oldIsType = pushTypeContext(0);
  expect(TokenType.colon);
  if (match(TokenType.modulo)) {
    flowParsePredicate();
  } else {
    flowParseType();
    if (match(TokenType.modulo)) {
      flowParsePredicate();
    }
  }
  popTypeContext(oldIsType);
}

function flowParseDeclareClass() {
  next();
  flowParseInterfaceish(/* isClass */ true);
}

function flowParseDeclareFunction() {
  next();
  parseIdentifier();

  if (match(TokenType.lessThan)) {
    flowParseTypeParameterDeclaration();
  }

  expect(TokenType.parenL);
  flowParseFunctionTypeParams();
  expect(TokenType.parenR);

  flowParseTypeAndPredicateInitialiser();

  semicolon();
}

function flowParseDeclare() {
  if (match(TokenType._class)) {
    flowParseDeclareClass();
  } else if (match(TokenType._function)) {
    flowParseDeclareFunction();
  } else if (match(TokenType._var)) {
    flowParseDeclareVariable();
  } else if (eatContextual(ContextualKeyword._module)) {
    if (eat(TokenType.dot)) {
      flowParseDeclareModuleExports();
    } else {
      flowParseDeclareModule();
    }
  } else if (isContextual(ContextualKeyword._type)) {
    flowParseDeclareTypeAlias();
  } else if (isContextual(ContextualKeyword._opaque)) {
    flowParseDeclareOpaqueType();
  } else if (isContextual(ContextualKeyword._interface)) {
    flowParseDeclareInterface();
  } else if (match(TokenType._export)) {
    flowParseDeclareExportDeclaration();
  } else {
    unexpected();
  }
}

function flowParseDeclareVariable() {
  next();
  flowParseTypeAnnotatableIdentifier();
  semicolon();
}

function flowParseDeclareModule() {
  if (match(TokenType.string)) {
    parseExprAtom();
  } else {
    parseIdentifier();
  }

  expect(TokenType.braceL);
  while (!match(TokenType.braceR) && !state.error) {
    if (match(TokenType._import)) {
      next();
      parseImport();
    } else {
      unexpected();
    }
  }
  expect(TokenType.braceR);
}

function flowParseDeclareExportDeclaration() {
  expect(TokenType._export);

  if (eat(TokenType._default)) {
    if (match(TokenType._function) || match(TokenType._class)) {
      // declare export default class ...
      // declare export default function ...
      flowParseDeclare();
    } else {
      // declare export default [type];
      flowParseType();
      semicolon();
    }
  } else if (
    match(TokenType._var) || // declare export var ...
    match(TokenType._function) || // declare export function ...
    match(TokenType._class) || // declare export class ...
    isContextual(ContextualKeyword._opaque) // declare export opaque ..
  ) {
    flowParseDeclare();
  } else if (
    match(TokenType.star) || // declare export * from ''
    match(TokenType.braceL) || // declare export {} ...
    isContextual(ContextualKeyword._interface) || // declare export interface ...
    isContextual(ContextualKeyword._type) || // declare export type ...
    isContextual(ContextualKeyword._opaque) // declare export opaque type ...
  ) {
    parseExport();
  } else {
    unexpected();
  }
}

function flowParseDeclareModuleExports() {
  expectContextual(ContextualKeyword._exports);
  flowParseTypeAnnotation();
  semicolon();
}

function flowParseDeclareTypeAlias() {
  next();
  flowParseTypeAlias();
}

function flowParseDeclareOpaqueType() {
  next();
  flowParseOpaqueType(true);
}

function flowParseDeclareInterface() {
  next();
  flowParseInterfaceish();
}

// Interfaces

function flowParseInterfaceish(isClass = false) {
  flowParseRestrictedIdentifier();

  if (match(TokenType.lessThan)) {
    flowParseTypeParameterDeclaration();
  }

  if (eat(TokenType._extends)) {
    do {
      flowParseInterfaceExtends();
    } while (!isClass && eat(TokenType.comma));
  }

  if (isContextual(ContextualKeyword._mixins)) {
    next();
    do {
      flowParseInterfaceExtends();
    } while (eat(TokenType.comma));
  }

  if (isContextual(ContextualKeyword._implements)) {
    next();
    do {
      flowParseInterfaceExtends();
    } while (eat(TokenType.comma));
  }

  flowParseObjectType(isClass, false, isClass);
}

function flowParseInterfaceExtends() {
  flowParseQualifiedTypeIdentifier(false);
  if (match(TokenType.lessThan)) {
    flowParseTypeParameterInstantiation();
  }
}

function flowParseInterface() {
  flowParseInterfaceish();
}

function flowParseRestrictedIdentifier() {
  parseIdentifier();
}

function flowParseTypeAlias() {
  flowParseRestrictedIdentifier();

  if (match(TokenType.lessThan)) {
    flowParseTypeParameterDeclaration();
  }

  flowParseTypeInitialiser(TokenType.eq);
  semicolon();
}

function flowParseOpaqueType(declare) {
  expectContextual(ContextualKeyword._type);
  flowParseRestrictedIdentifier();

  if (match(TokenType.lessThan)) {
    flowParseTypeParameterDeclaration();
  }

  // Parse the supertype
  if (match(TokenType.colon)) {
    flowParseTypeInitialiser(TokenType.colon);
  }

  if (!declare) {
    flowParseTypeInitialiser(TokenType.eq);
  }
  semicolon();
}

function flowParseTypeParameter() {
  flowParseVariance();
  flowParseTypeAnnotatableIdentifier();

  if (eat(TokenType.eq)) {
    flowParseType();
  }
}

function flowParseTypeParameterDeclaration() {
  const oldIsType = pushTypeContext(0);
  // istanbul ignore else: this condition is already checked at all call sites
  if (match(TokenType.lessThan) || match(TokenType.typeParameterStart)) {
    next();
  } else {
    unexpected();
  }

  do {
    flowParseTypeParameter();
    if (!match(TokenType.greaterThan)) {
      expect(TokenType.comma);
    }
  } while (!match(TokenType.greaterThan) && !state.error);
  expect(TokenType.greaterThan);
  popTypeContext(oldIsType);
}

function flowParseTypeParameterInstantiation() {
  const oldIsType = pushTypeContext(0);
  expect(TokenType.lessThan);
  while (!match(TokenType.greaterThan) && !state.error) {
    flowParseType();
    if (!match(TokenType.greaterThan)) {
      expect(TokenType.comma);
    }
  }
  expect(TokenType.greaterThan);
  popTypeContext(oldIsType);
}

function flowParseInterfaceType() {
  expectContextual(ContextualKeyword._interface);
  if (eat(TokenType._extends)) {
    do {
      flowParseInterfaceExtends();
    } while (eat(TokenType.comma));
  }
  flowParseObjectType(false, false, false);
}

function flowParseObjectPropertyKey() {
  if (match(TokenType.num) || match(TokenType.string)) {
    parseExprAtom();
  } else {
    parseIdentifier();
  }
}

function flowParseObjectTypeIndexer() {
  // Note: bracketL has already been consumed
  if (lookaheadType() === TokenType.colon) {
    flowParseObjectPropertyKey();
    flowParseTypeInitialiser();
  } else {
    flowParseType();
  }
  expect(TokenType.bracketR);
  flowParseTypeInitialiser();
}

function flowParseObjectTypeInternalSlot() {
  // Note: both bracketL have already been consumed
  flowParseObjectPropertyKey();
  expect(TokenType.bracketR);
  expect(TokenType.bracketR);
  if (match(TokenType.lessThan) || match(TokenType.parenL)) {
    flowParseObjectTypeMethodish();
  } else {
    eat(TokenType.question);
    flowParseTypeInitialiser();
  }
}

function flowParseObjectTypeMethodish() {
  if (match(TokenType.lessThan)) {
    flowParseTypeParameterDeclaration();
  }

  expect(TokenType.parenL);
  while (!match(TokenType.parenR) && !match(TokenType.ellipsis) && !state.error) {
    flowParseFunctionTypeParam();
    if (!match(TokenType.parenR)) {
      expect(TokenType.comma);
    }
  }

  if (eat(TokenType.ellipsis)) {
    flowParseFunctionTypeParam();
  }
  expect(TokenType.parenR);
  flowParseTypeInitialiser();
}

function flowParseObjectTypeCallProperty() {
  flowParseObjectTypeMethodish();
}

function flowParseObjectType(allowStatic, allowExact, allowProto) {
  let endDelim;
  if (allowExact && match(TokenType.braceBarL)) {
    expect(TokenType.braceBarL);
    endDelim = TokenType.braceBarR;
  } else {
    expect(TokenType.braceL);
    endDelim = TokenType.braceR;
  }

  while (!match(endDelim) && !state.error) {
    if (allowProto && isContextual(ContextualKeyword._proto)) {
      const lookahead = lookaheadType();
      if (lookahead !== TokenType.colon && lookahead !== TokenType.question) {
        next();
        allowStatic = false;
      }
    }
    if (allowStatic && isContextual(ContextualKeyword._static)) {
      const lookahead = lookaheadType();
      if (lookahead !== TokenType.colon && lookahead !== TokenType.question) {
        next();
      }
    }

    flowParseVariance();

    if (eat(TokenType.bracketL)) {
      if (eat(TokenType.bracketL)) {
        flowParseObjectTypeInternalSlot();
      } else {
        flowParseObjectTypeIndexer();
      }
    } else if (match(TokenType.parenL) || match(TokenType.lessThan)) {
      flowParseObjectTypeCallProperty();
    } else {
      if (isContextual(ContextualKeyword._get) || isContextual(ContextualKeyword._set)) {
        const lookahead = lookaheadType();
        if (lookahead === TokenType.name || lookahead === TokenType.string || lookahead === TokenType.num) {
          next();
        }
      }

      flowParseObjectTypeProperty();
    }

    flowObjectTypeSemicolon();
  }

  expect(endDelim);
}

function flowParseObjectTypeProperty() {
  if (match(TokenType.ellipsis)) {
    expect(TokenType.ellipsis);
    if (!eat(TokenType.comma)) {
      eat(TokenType.semi);
    }
    // Explicit inexact object syntax.
    if (match(TokenType.braceR)) {
      return;
    }
    flowParseType();
  } else {
    flowParseObjectPropertyKey();
    if (match(TokenType.lessThan) || match(TokenType.parenL)) {
      // This is a method property
      flowParseObjectTypeMethodish();
    } else {
      eat(TokenType.question);
      flowParseTypeInitialiser();
    }
  }
}

function flowObjectTypeSemicolon() {
  if (!eat(TokenType.semi) && !eat(TokenType.comma) && !match(TokenType.braceR) && !match(TokenType.braceBarR)) {
    unexpected();
  }
}

function flowParseQualifiedTypeIdentifier(initialIdAlreadyParsed) {
  if (!initialIdAlreadyParsed) {
    parseIdentifier();
  }
  while (eat(TokenType.dot)) {
    parseIdentifier();
  }
}

function flowParseGenericType() {
  flowParseQualifiedTypeIdentifier(true);
  if (match(TokenType.lessThan)) {
    flowParseTypeParameterInstantiation();
  }
}

function flowParseTypeofType() {
  expect(TokenType._typeof);
  flowParsePrimaryType();
}

function flowParseTupleType() {
  expect(TokenType.bracketL);
  // We allow trailing commas
  while (state.pos < input.length && !match(TokenType.bracketR)) {
    flowParseType();
    if (match(TokenType.bracketR)) {
      break;
    }
    expect(TokenType.comma);
  }
  expect(TokenType.bracketR);
}

function flowParseFunctionTypeParam() {
  const lookahead = lookaheadType();
  if (lookahead === TokenType.colon || lookahead === TokenType.question) {
    parseIdentifier();
    eat(TokenType.question);
    flowParseTypeInitialiser();
  } else {
    flowParseType();
  }
}

function flowParseFunctionTypeParams() {
  while (!match(TokenType.parenR) && !match(TokenType.ellipsis) && !state.error) {
    flowParseFunctionTypeParam();
    if (!match(TokenType.parenR)) {
      expect(TokenType.comma);
    }
  }
  if (eat(TokenType.ellipsis)) {
    flowParseFunctionTypeParam();
  }
}

// The parsing of types roughly parallels the parsing of expressions, and
// primary types are kind of like primary expressions...they're the
// primitives with which other types are constructed.
function flowParsePrimaryType() {
  let isGroupedType = false;
  const oldNoAnonFunctionType = state.noAnonFunctionType;

  switch (state.type) {
    case TokenType.name: {
      if (isContextual(ContextualKeyword._interface)) {
        flowParseInterfaceType();
        return;
      }
      parseIdentifier();
      flowParseGenericType();
      return;
    }

    case TokenType.braceL:
      flowParseObjectType(false, false, false);
      return;

    case TokenType.braceBarL:
      flowParseObjectType(false, true, false);
      return;

    case TokenType.bracketL:
      flowParseTupleType();
      return;

    case TokenType.lessThan:
      flowParseTypeParameterDeclaration();
      expect(TokenType.parenL);
      flowParseFunctionTypeParams();
      expect(TokenType.parenR);
      expect(TokenType.arrow);
      flowParseType();
      return;

    case TokenType.parenL:
      next();

      // Check to see if this is actually a grouped type
      if (!match(TokenType.parenR) && !match(TokenType.ellipsis)) {
        if (match(TokenType.name)) {
          const token = lookaheadType();
          isGroupedType = token !== TokenType.question && token !== TokenType.colon;
        } else {
          isGroupedType = true;
        }
      }

      if (isGroupedType) {
        state.noAnonFunctionType = false;
        flowParseType();
        state.noAnonFunctionType = oldNoAnonFunctionType;

        // A `,` or a `) =>` means this is an anonymous function type
        if (
          state.noAnonFunctionType ||
          !(match(TokenType.comma) || (match(TokenType.parenR) && lookaheadType() === TokenType.arrow))
        ) {
          expect(TokenType.parenR);
          return;
        } else {
          // Eat a comma if there is one
          eat(TokenType.comma);
        }
      }

      flowParseFunctionTypeParams();

      expect(TokenType.parenR);
      expect(TokenType.arrow);
      flowParseType();
      return;

    case TokenType.minus:
      next();
      parseLiteral();
      return;

    case TokenType.string:
    case TokenType.num:
    case TokenType._true:
    case TokenType._false:
    case TokenType._null:
    case TokenType._this:
    case TokenType._void:
    case TokenType.star:
      next();
      return;

    default:
      if (state.type === TokenType._typeof) {
        flowParseTypeofType();
        return;
      } else if (state.type & TokenType.IS_KEYWORD) {
        next();
        state.tokens[state.tokens.length - 1].type = TokenType.name;
        return;
      }
  }

  unexpected();
}

function flowParsePostfixType() {
  flowParsePrimaryType();
  while (!canInsertSemicolon() && (match(TokenType.bracketL) || match(TokenType.questionDot))) {
    eat(TokenType.questionDot);
    expect(TokenType.bracketL);
    if (eat(TokenType.bracketR)) ; else {
      // Indexed access type
      flowParseType();
      expect(TokenType.bracketR);
    }
  }
}

function flowParsePrefixType() {
  if (eat(TokenType.question)) {
    flowParsePrefixType();
  } else {
    flowParsePostfixType();
  }
}

function flowParseAnonFunctionWithoutParens() {
  flowParsePrefixType();
  if (!state.noAnonFunctionType && eat(TokenType.arrow)) {
    flowParseType();
  }
}

function flowParseIntersectionType() {
  eat(TokenType.bitwiseAND);
  flowParseAnonFunctionWithoutParens();
  while (eat(TokenType.bitwiseAND)) {
    flowParseAnonFunctionWithoutParens();
  }
}

function flowParseUnionType() {
  eat(TokenType.bitwiseOR);
  flowParseIntersectionType();
  while (eat(TokenType.bitwiseOR)) {
    flowParseIntersectionType();
  }
}

function flowParseType() {
  flowParseUnionType();
}

function flowParseTypeAnnotation() {
  flowParseTypeInitialiser();
}

function flowParseTypeAnnotatableIdentifier() {
  parseIdentifier();
  if (match(TokenType.colon)) {
    flowParseTypeAnnotation();
  }
}

function flowParseVariance() {
  if (match(TokenType.plus) || match(TokenType.minus)) {
    next();
    state.tokens[state.tokens.length - 1].isType = true;
  }
}

// ==================================
// Overrides
// ==================================

function flowParseFunctionBodyAndFinish(funcContextId) {
  // For arrow functions, `parseArrow` handles the return type itself.
  if (match(TokenType.colon)) {
    flowParseTypeAndPredicateInitialiser();
  }

  parseFunctionBody(false, funcContextId);
}

function flowParseSubscript(
  startTokenIndex,
  noCalls,
  stopState,
) {
  if (match(TokenType.questionDot) && lookaheadType() === TokenType.lessThan) {
    if (noCalls) {
      stopState.stop = true;
      return;
    }
    next();
    flowParseTypeParameterInstantiation();
    expect(TokenType.parenL);
    parseCallExpressionArguments();
    return;
  } else if (!noCalls && match(TokenType.lessThan)) {
    const snapshot = state.snapshot();
    flowParseTypeParameterInstantiation();
    expect(TokenType.parenL);
    parseCallExpressionArguments();
    if (state.error) {
      state.restoreFromSnapshot(snapshot);
    } else {
      return;
    }
  }
  baseParseSubscript(startTokenIndex, noCalls, stopState);
}

function flowStartParseNewArguments() {
  if (match(TokenType.lessThan)) {
    const snapshot = state.snapshot();
    flowParseTypeParameterInstantiation();
    if (state.error) {
      state.restoreFromSnapshot(snapshot);
    }
  }
}

// interfaces
function flowTryParseStatement() {
  if (match(TokenType.name) && state.contextualKeyword === ContextualKeyword._interface) {
    const oldIsType = pushTypeContext(0);
    next();
    flowParseInterface();
    popTypeContext(oldIsType);
    return true;
  } else if (isContextual(ContextualKeyword._enum)) {
    flowParseEnumDeclaration();
    return true;
  }
  return false;
}

function flowTryParseExportDefaultExpression() {
  if (isContextual(ContextualKeyword._enum)) {
    flowParseEnumDeclaration();
    return true;
  }
  return false;
}

// declares, interfaces and type aliases
function flowParseIdentifierStatement(contextualKeyword) {
  if (contextualKeyword === ContextualKeyword._declare) {
    if (
      match(TokenType._class) ||
      match(TokenType.name) ||
      match(TokenType._function) ||
      match(TokenType._var) ||
      match(TokenType._export)
    ) {
      const oldIsType = pushTypeContext(1);
      flowParseDeclare();
      popTypeContext(oldIsType);
    }
  } else if (match(TokenType.name)) {
    if (contextualKeyword === ContextualKeyword._interface) {
      const oldIsType = pushTypeContext(1);
      flowParseInterface();
      popTypeContext(oldIsType);
    } else if (contextualKeyword === ContextualKeyword._type) {
      const oldIsType = pushTypeContext(1);
      flowParseTypeAlias();
      popTypeContext(oldIsType);
    } else if (contextualKeyword === ContextualKeyword._opaque) {
      const oldIsType = pushTypeContext(1);
      flowParseOpaqueType(false);
      popTypeContext(oldIsType);
    }
  }
  semicolon();
}

// export type
function flowShouldParseExportDeclaration() {
  return (
    isContextual(ContextualKeyword._type) ||
    isContextual(ContextualKeyword._interface) ||
    isContextual(ContextualKeyword._opaque) ||
    isContextual(ContextualKeyword._enum)
  );
}

function flowShouldDisallowExportDefaultSpecifier() {
  return (
    match(TokenType.name) &&
    (state.contextualKeyword === ContextualKeyword._type ||
      state.contextualKeyword === ContextualKeyword._interface ||
      state.contextualKeyword === ContextualKeyword._opaque ||
      state.contextualKeyword === ContextualKeyword._enum)
  );
}

function flowParseExportDeclaration() {
  if (isContextual(ContextualKeyword._type)) {
    const oldIsType = pushTypeContext(1);
    next();

    if (match(TokenType.braceL)) {
      // export type { foo, bar };
      parseExportSpecifiers();
      parseExportFrom();
    } else {
      // export type Foo = Bar;
      flowParseTypeAlias();
    }
    popTypeContext(oldIsType);
  } else if (isContextual(ContextualKeyword._opaque)) {
    const oldIsType = pushTypeContext(1);
    next();
    // export opaque type Foo = Bar;
    flowParseOpaqueType(false);
    popTypeContext(oldIsType);
  } else if (isContextual(ContextualKeyword._interface)) {
    const oldIsType = pushTypeContext(1);
    next();
    flowParseInterface();
    popTypeContext(oldIsType);
  } else {
    parseStatement(true);
  }
}

function flowShouldParseExportStar() {
  return match(TokenType.star) || (isContextual(ContextualKeyword._type) && lookaheadType() === TokenType.star);
}

function flowParseExportStar() {
  if (eatContextual(ContextualKeyword._type)) {
    const oldIsType = pushTypeContext(2);
    baseParseExportStar();
    popTypeContext(oldIsType);
  } else {
    baseParseExportStar();
  }
}

// parse a the super class type parameters and implements
function flowAfterParseClassSuper(hasSuper) {
  if (hasSuper && match(TokenType.lessThan)) {
    flowParseTypeParameterInstantiation();
  }
  if (isContextual(ContextualKeyword._implements)) {
    const oldIsType = pushTypeContext(0);
    next();
    state.tokens[state.tokens.length - 1].type = TokenType._implements;
    do {
      flowParseRestrictedIdentifier();
      if (match(TokenType.lessThan)) {
        flowParseTypeParameterInstantiation();
      }
    } while (eat(TokenType.comma));
    popTypeContext(oldIsType);
  }
}

// parse type parameters for object method shorthand
function flowStartParseObjPropValue() {
  // method shorthand
  if (match(TokenType.lessThan)) {
    flowParseTypeParameterDeclaration();
    if (!match(TokenType.parenL)) unexpected();
  }
}

function flowParseAssignableListItemTypes() {
  const oldIsType = pushTypeContext(0);
  eat(TokenType.question);
  if (match(TokenType.colon)) {
    flowParseTypeAnnotation();
  }
  popTypeContext(oldIsType);
}

// parse typeof and type imports
function flowStartParseImportSpecifiers() {
  if (match(TokenType._typeof) || isContextual(ContextualKeyword._type)) {
    const lh = lookaheadTypeAndKeyword();
    if (isMaybeDefaultImport(lh) || lh.type === TokenType.braceL || lh.type === TokenType.star) {
      next();
    }
  }
}

// parse import-type/typeof shorthand
function flowParseImportSpecifier() {
  const isTypeKeyword =
    state.contextualKeyword === ContextualKeyword._type || state.type === TokenType._typeof;
  if (isTypeKeyword) {
    next();
  } else {
    parseIdentifier();
  }

  if (isContextual(ContextualKeyword._as) && !isLookaheadContextual(ContextualKeyword._as)) {
    parseIdentifier();
    if (isTypeKeyword && !match(TokenType.name) && !(state.type & TokenType.IS_KEYWORD)) ; else {
      // `import {type as foo`
      parseIdentifier();
    }
  } else {
    if (isTypeKeyword && (match(TokenType.name) || !!(state.type & TokenType.IS_KEYWORD))) {
      // `import {type foo`
      parseIdentifier();
    }
    if (eatContextual(ContextualKeyword._as)) {
      parseIdentifier();
    }
  }
}

// parse function type parameters - function foo<T>() {}
function flowStartParseFunctionParams() {
  // Originally this checked if the method is a getter/setter, but if it was, we'd crash soon
  // anyway, so don't try to propagate that information.
  if (match(TokenType.lessThan)) {
    const oldIsType = pushTypeContext(0);
    flowParseTypeParameterDeclaration();
    popTypeContext(oldIsType);
  }
}

// parse flow type annotations on variable declarator heads - let foo: string = bar
function flowAfterParseVarHead() {
  if (match(TokenType.colon)) {
    flowParseTypeAnnotation();
  }
}

// parse the return type of an async arrow function - let foo = (async (): number => {});
function flowStartParseAsyncArrowFromCallExpression() {
  if (match(TokenType.colon)) {
    const oldNoAnonFunctionType = state.noAnonFunctionType;
    state.noAnonFunctionType = true;
    flowParseTypeAnnotation();
    state.noAnonFunctionType = oldNoAnonFunctionType;
  }
}

// We need to support type parameter declarations for arrow functions. This
// is tricky. There are three situations we need to handle
//
// 1. This is either JSX or an arrow function. We'll try JSX first. If that
//    fails, we'll try an arrow function. If that fails, we'll throw the JSX
//    error.
// 2. This is an arrow function. We'll parse the type parameter declaration,
//    parse the rest, make sure the rest is an arrow function, and go from
//    there
// 3. This is neither. Just call the super method
function flowParseMaybeAssign(noIn, isWithinParens) {
  if (match(TokenType.lessThan)) {
    const snapshot = state.snapshot();
    let wasArrow = baseParseMaybeAssign(noIn, isWithinParens);
    if (state.error) {
      state.restoreFromSnapshot(snapshot);
      state.type = TokenType.typeParameterStart;
    } else {
      return wasArrow;
    }

    const oldIsType = pushTypeContext(0);
    flowParseTypeParameterDeclaration();
    popTypeContext(oldIsType);
    wasArrow = baseParseMaybeAssign(noIn, isWithinParens);
    if (wasArrow) {
      return true;
    }
    unexpected();
  }

  return baseParseMaybeAssign(noIn, isWithinParens);
}

// handle return types for arrow functions
function flowParseArrow() {
  if (match(TokenType.colon)) {
    const oldIsType = pushTypeContext(0);
    const snapshot = state.snapshot();

    const oldNoAnonFunctionType = state.noAnonFunctionType;
    state.noAnonFunctionType = true;
    flowParseTypeAndPredicateInitialiser();
    state.noAnonFunctionType = oldNoAnonFunctionType;

    if (canInsertSemicolon()) unexpected();
    if (!match(TokenType.arrow)) unexpected();

    if (state.error) {
      state.restoreFromSnapshot(snapshot);
    }
    popTypeContext(oldIsType);
  }
  return eat(TokenType.arrow);
}

function flowParseSubscripts(startTokenIndex, noCalls = false) {
  if (
    state.tokens[state.tokens.length - 1].contextualKeyword === ContextualKeyword._async &&
    match(TokenType.lessThan)
  ) {
    const snapshot = state.snapshot();
    const wasArrow = parseAsyncArrowWithTypeParameters();
    if (wasArrow && !state.error) {
      return;
    }
    state.restoreFromSnapshot(snapshot);
  }

  baseParseSubscripts(startTokenIndex, noCalls);
}

// Returns true if there was an arrow function here.
function parseAsyncArrowWithTypeParameters() {
  state.scopeDepth++;
  const startTokenIndex = state.tokens.length;
  parseFunctionParams();
  if (!parseArrow()) {
    return false;
  }
  parseArrowExpression(startTokenIndex);
  return true;
}

function flowParseEnumDeclaration() {
  expectContextual(ContextualKeyword._enum);
  state.tokens[state.tokens.length - 1].type = TokenType._enum;
  parseIdentifier();
  flowParseEnumBody();
}

function flowParseEnumBody() {
  if (eatContextual(ContextualKeyword._of)) {
    next();
  }
  expect(TokenType.braceL);
  flowParseEnumMembers();
  expect(TokenType.braceR);
}

function flowParseEnumMembers() {
  while (!match(TokenType.braceR) && !state.error) {
    if (eat(TokenType.ellipsis)) {
      break;
    }
    flowParseEnumMember();
    if (!match(TokenType.braceR)) {
      expect(TokenType.comma);
    }
  }
}

function flowParseEnumMember() {
  parseIdentifier();
  if (eat(TokenType.eq)) {
    // Flow enum values are always just one token (a string, number, or boolean literal).
    next();
  }
}

/* eslint max-len: 0 */

function parseTopLevel() {
  parseBlockBody(TokenType.eof);
  state.scopes.push(new Scope(0, state.tokens.length, true));
  if (state.scopeDepth !== 0) {
    throw new Error(`Invalid scope depth at end of file: ${state.scopeDepth}`);
  }
  return new File(state.tokens, state.scopes);
}

// Parse a single statement.
//
// If expecting a statement and finding a slash operator, parse a
// regular expression literal. This is to handle cases like
// `if (foo) /blah/.exec(foo)`, where looking at the previous token
// does not help.

function parseStatement(declaration) {
  if (isFlowEnabled) {
    if (flowTryParseStatement()) {
      return;
    }
  }
  if (match(TokenType.at)) {
    parseDecorators();
  }
  parseStatementContent(declaration);
}

function parseStatementContent(declaration) {
  if (isTypeScriptEnabled) {
    if (tsTryParseStatementContent()) {
      return;
    }
  }

  const starttype = state.type;

  // Most types of statements are recognized by the keyword they
  // start with. Many are trivial to parse, some require a bit of
  // complexity.

  switch (starttype) {
    case TokenType._break:
    case TokenType._continue:
      parseBreakContinueStatement();
      return;
    case TokenType._debugger:
      parseDebuggerStatement();
      return;
    case TokenType._do:
      parseDoStatement();
      return;
    case TokenType._for:
      parseForStatement();
      return;
    case TokenType._function:
      if (lookaheadType() === TokenType.dot) break;
      if (!declaration) unexpected();
      parseFunctionStatement();
      return;

    case TokenType._class:
      if (!declaration) unexpected();
      parseClass(true);
      return;

    case TokenType._if:
      parseIfStatement();
      return;
    case TokenType._return:
      parseReturnStatement();
      return;
    case TokenType._switch:
      parseSwitchStatement();
      return;
    case TokenType._throw:
      parseThrowStatement();
      return;
    case TokenType._try:
      parseTryStatement();
      return;

    case TokenType._let:
    case TokenType._const:
      if (!declaration) unexpected(); // NOTE: falls through to _var

    case TokenType._var:
      parseVarStatement(starttype !== TokenType._var);
      return;

    case TokenType._while:
      parseWhileStatement();
      return;
    case TokenType.braceL:
      parseBlock();
      return;
    case TokenType.semi:
      parseEmptyStatement();
      return;
    case TokenType._export:
    case TokenType._import: {
      const nextType = lookaheadType();
      if (nextType === TokenType.parenL || nextType === TokenType.dot) {
        break;
      }
      next();
      if (starttype === TokenType._import) {
        parseImport();
      } else {
        parseExport();
      }
      return;
    }
    case TokenType.name:
      if (state.contextualKeyword === ContextualKeyword._async) {
        const functionStart = state.start;
        // peek ahead and see if next token is a function
        const snapshot = state.snapshot();
        next();
        if (match(TokenType._function) && !canInsertSemicolon()) {
          expect(TokenType._function);
          parseFunction(functionStart, true);
          return;
        } else {
          state.restoreFromSnapshot(snapshot);
        }
      } else if (
        state.contextualKeyword === ContextualKeyword._using &&
        !hasFollowingLineBreak() &&
        // Statements like `using[0]` and `using in foo` aren't actual using
        // declarations.
        lookaheadType() === TokenType.name
      ) {
        parseVarStatement(true);
        return;
      }
  }

  // If the statement does not start with a statement keyword or a
  // brace, it's an ExpressionStatement or LabeledStatement. We
  // simply start parsing an expression, and afterwards, if the
  // next token is a colon and the expression was a simple
  // Identifier node, we switch to interpreting it as a label.
  const initialTokensLength = state.tokens.length;
  parseExpression();
  let simpleName = null;
  if (state.tokens.length === initialTokensLength + 1) {
    const token = state.tokens[state.tokens.length - 1];
    if (token.type === TokenType.name) {
      simpleName = token.contextualKeyword;
    }
  }
  if (simpleName == null) {
    semicolon();
    return;
  }
  if (eat(TokenType.colon)) {
    parseLabeledStatement();
  } else {
    // This was an identifier, so we might want to handle flow/typescript-specific cases.
    parseIdentifierStatement(simpleName);
  }
}

function parseDecorators() {
  while (match(TokenType.at)) {
    parseDecorator();
  }
}

function parseDecorator() {
  next();
  if (eat(TokenType.parenL)) {
    parseExpression();
    expect(TokenType.parenR);
  } else {
    parseIdentifier();
    while (eat(TokenType.dot)) {
      parseIdentifier();
    }
    parseMaybeDecoratorArguments();
  }
}

function parseMaybeDecoratorArguments() {
  if (isTypeScriptEnabled) {
    tsParseMaybeDecoratorArguments();
  } else {
    baseParseMaybeDecoratorArguments();
  }
}

function baseParseMaybeDecoratorArguments() {
  if (eat(TokenType.parenL)) {
    parseCallExpressionArguments();
  }
}

function parseBreakContinueStatement() {
  next();
  if (!isLineTerminator()) {
    parseIdentifier();
    semicolon();
  }
}

function parseDebuggerStatement() {
  next();
  semicolon();
}

function parseDoStatement() {
  next();
  parseStatement(false);
  expect(TokenType._while);
  parseParenExpression();
  eat(TokenType.semi);
}

function parseForStatement() {
  state.scopeDepth++;
  const startTokenIndex = state.tokens.length;
  parseAmbiguousForStatement();
  const endTokenIndex = state.tokens.length;
  state.scopes.push(new Scope(startTokenIndex, endTokenIndex, false));
  state.scopeDepth--;
}

/**
 * Determine if this token is a `using` declaration (explicit resource
 * management) as part of a loop.
 * https://github.com/tc39/proposal-explicit-resource-management
 */
function isUsingInLoop() {
  if (!isContextual(ContextualKeyword._using)) {
    return false;
  }
  // This must be `for (using of`, where `using` is the name of the loop
  // variable.
  if (isLookaheadContextual(ContextualKeyword._of)) {
    return false;
  }
  return true;
}

// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
// loop is non-trivial. Basically, we have to parse the init `var`
// statement or expression, disallowing the `in` operator (see
// the second parameter to `parseExpression`), and then check
// whether the next token is `in` or `of`. When there is no init
// part (semicolon immediately after the opening parenthesis), it
// is a regular `for` loop.
function parseAmbiguousForStatement() {
  next();

  let forAwait = false;
  if (isContextual(ContextualKeyword._await)) {
    forAwait = true;
    next();
  }
  expect(TokenType.parenL);

  if (match(TokenType.semi)) {
    if (forAwait) {
      unexpected();
    }
    parseFor();
    return;
  }

  if (match(TokenType._var) || match(TokenType._let) || match(TokenType._const) || isUsingInLoop()) {
    next();
    parseVar(true, state.type !== TokenType._var);
    if (match(TokenType._in) || isContextual(ContextualKeyword._of)) {
      parseForIn(forAwait);
      return;
    }
    parseFor();
    return;
  }

  parseExpression(true);
  if (match(TokenType._in) || isContextual(ContextualKeyword._of)) {
    parseForIn(forAwait);
    return;
  }
  if (forAwait) {
    unexpected();
  }
  parseFor();
}

function parseFunctionStatement() {
  const functionStart = state.start;
  next();
  parseFunction(functionStart, true);
}

function parseIfStatement() {
  next();
  parseParenExpression();
  parseStatement(false);
  if (eat(TokenType._else)) {
    parseStatement(false);
  }
}

function parseReturnStatement() {
  next();

  // In `return` (and `break`/`continue`), the keywords with
  // optional arguments, we eagerly look for a semicolon or the
  // possibility to insert one.

  if (!isLineTerminator()) {
    parseExpression();
    semicolon();
  }
}

function parseSwitchStatement() {
  next();
  parseParenExpression();
  state.scopeDepth++;
  const startTokenIndex = state.tokens.length;
  expect(TokenType.braceL);

  // Don't bother validation; just go through any sequence of cases, defaults, and statements.
  while (!match(TokenType.braceR) && !state.error) {
    if (match(TokenType._case) || match(TokenType._default)) {
      const isCase = match(TokenType._case);
      next();
      if (isCase) {
        parseExpression();
      }
      expect(TokenType.colon);
    } else {
      parseStatement(true);
    }
  }
  next(); // Closing brace
  const endTokenIndex = state.tokens.length;
  state.scopes.push(new Scope(startTokenIndex, endTokenIndex, false));
  state.scopeDepth--;
}

function parseThrowStatement() {
  next();
  parseExpression();
  semicolon();
}

function parseCatchClauseParam() {
  parseBindingAtom(true /* isBlockScope */);

  if (isTypeScriptEnabled) {
    tsTryParseTypeAnnotation();
  }
}

function parseTryStatement() {
  next();

  parseBlock();

  if (match(TokenType._catch)) {
    next();
    let catchBindingStartTokenIndex = null;
    if (match(TokenType.parenL)) {
      state.scopeDepth++;
      catchBindingStartTokenIndex = state.tokens.length;
      expect(TokenType.parenL);
      parseCatchClauseParam();
      expect(TokenType.parenR);
    }
    parseBlock();
    if (catchBindingStartTokenIndex != null) {
      // We need a special scope for the catch binding which includes the binding itself and the
      // catch block.
      const endTokenIndex = state.tokens.length;
      state.scopes.push(new Scope(catchBindingStartTokenIndex, endTokenIndex, false));
      state.scopeDepth--;
    }
  }
  if (eat(TokenType._finally)) {
    parseBlock();
  }
}

function parseVarStatement(isBlockScope) {
  next();
  parseVar(false, isBlockScope);
  semicolon();
}

function parseWhileStatement() {
  next();
  parseParenExpression();
  parseStatement(false);
}

function parseEmptyStatement() {
  next();
}

function parseLabeledStatement() {
  parseStatement(true);
}

/**
 * Parse a statement starting with an identifier of the given name. Subclasses match on the name
 * to handle statements like "declare".
 */
function parseIdentifierStatement(contextualKeyword) {
  if (isTypeScriptEnabled) {
    tsParseIdentifierStatement(contextualKeyword);
  } else if (isFlowEnabled) {
    flowParseIdentifierStatement(contextualKeyword);
  } else {
    semicolon();
  }
}

// Parse a semicolon-enclosed block of statements.
function parseBlock(isFunctionScope = false, contextId = 0) {
  const startTokenIndex = state.tokens.length;
  state.scopeDepth++;
  expect(TokenType.braceL);
  if (contextId) {
    state.tokens[state.tokens.length - 1].contextId = contextId;
  }
  parseBlockBody(TokenType.braceR);
  if (contextId) {
    state.tokens[state.tokens.length - 1].contextId = contextId;
  }
  const endTokenIndex = state.tokens.length;
  state.scopes.push(new Scope(startTokenIndex, endTokenIndex, isFunctionScope));
  state.scopeDepth--;
}

function parseBlockBody(end) {
  while (!eat(end) && !state.error) {
    parseStatement(true);
  }
}

// Parse a regular `for` loop. The disambiguation code in
// `parseStatement` will already have parsed the init statement or
// expression.

function parseFor() {
  expect(TokenType.semi);
  if (!match(TokenType.semi)) {
    parseExpression();
  }
  expect(TokenType.semi);
  if (!match(TokenType.parenR)) {
    parseExpression();
  }
  expect(TokenType.parenR);
  parseStatement(false);
}

// Parse a `for`/`in` and `for`/`of` loop, which are almost
// same from parser's perspective.

function parseForIn(forAwait) {
  if (forAwait) {
    eatContextual(ContextualKeyword._of);
  } else {
    next();
  }
  parseExpression();
  expect(TokenType.parenR);
  parseStatement(false);
}

// Parse a list of variable declarations.

function parseVar(isFor, isBlockScope) {
  while (true) {
    parseVarHead(isBlockScope);
    if (eat(TokenType.eq)) {
      const eqIndex = state.tokens.length - 1;
      parseMaybeAssign(isFor);
      state.tokens[eqIndex].rhsEndIndex = state.tokens.length;
    }
    if (!eat(TokenType.comma)) {
      break;
    }
  }
}

function parseVarHead(isBlockScope) {
  parseBindingAtom(isBlockScope);
  if (isTypeScriptEnabled) {
    tsAfterParseVarHead();
  } else if (isFlowEnabled) {
    flowAfterParseVarHead();
  }
}

// Parse a function declaration or literal (depending on the
// `isStatement` parameter).

function parseFunction(
  functionStart,
  isStatement,
  optionalId = false,
) {
  if (match(TokenType.star)) {
    next();
  }

  if (isStatement && !optionalId && !match(TokenType.name) && !match(TokenType._yield)) {
    unexpected();
  }

  let nameScopeStartTokenIndex = null;

  if (match(TokenType.name)) {
    // Expression-style functions should limit their name's scope to the function body, so we make
    // a new function scope to enforce that.
    if (!isStatement) {
      nameScopeStartTokenIndex = state.tokens.length;
      state.scopeDepth++;
    }
    parseBindingIdentifier(false);
  }

  const startTokenIndex = state.tokens.length;
  state.scopeDepth++;
  parseFunctionParams();
  parseFunctionBodyAndFinish(functionStart);
  const endTokenIndex = state.tokens.length;
  // In addition to the block scope of the function body, we need a separate function-style scope
  // that includes the params.
  state.scopes.push(new Scope(startTokenIndex, endTokenIndex, true));
  state.scopeDepth--;
  if (nameScopeStartTokenIndex !== null) {
    state.scopes.push(new Scope(nameScopeStartTokenIndex, endTokenIndex, true));
    state.scopeDepth--;
  }
}

function parseFunctionParams(
  allowModifiers = false,
  funcContextId = 0,
) {
  if (isTypeScriptEnabled) {
    tsStartParseFunctionParams();
  } else if (isFlowEnabled) {
    flowStartParseFunctionParams();
  }

  expect(TokenType.parenL);
  if (funcContextId) {
    state.tokens[state.tokens.length - 1].contextId = funcContextId;
  }
  parseBindingList(
    TokenType.parenR,
    false /* isBlockScope */,
    false /* allowEmpty */,
    allowModifiers,
    funcContextId,
  );
  if (funcContextId) {
    state.tokens[state.tokens.length - 1].contextId = funcContextId;
  }
}

// Parse a class declaration or literal (depending on the
// `isStatement` parameter).

function parseClass(isStatement, optionalId = false) {
  // Put a context ID on the class keyword, the open-brace, and the close-brace, so that later
  // code can easily navigate to meaningful points on the class.
  const contextId = getNextContextId();

  next();
  state.tokens[state.tokens.length - 1].contextId = contextId;
  state.tokens[state.tokens.length - 1].isExpression = !isStatement;
  // Like with functions, we declare a special "name scope" from the start of the name to the end
  // of the class, but only with expression-style classes, to represent the fact that the name is
  // available to the body of the class but not an outer declaration.
  let nameScopeStartTokenIndex = null;
  if (!isStatement) {
    nameScopeStartTokenIndex = state.tokens.length;
    state.scopeDepth++;
  }
  parseClassId(isStatement, optionalId);
  parseClassSuper();
  const openBraceIndex = state.tokens.length;
  parseClassBody(contextId);
  if (state.error) {
    return;
  }
  state.tokens[openBraceIndex].contextId = contextId;
  state.tokens[state.tokens.length - 1].contextId = contextId;
  if (nameScopeStartTokenIndex !== null) {
    const endTokenIndex = state.tokens.length;
    state.scopes.push(new Scope(nameScopeStartTokenIndex, endTokenIndex, false));
    state.scopeDepth--;
  }
}

function isClassProperty() {
  return match(TokenType.eq) || match(TokenType.semi) || match(TokenType.braceR) || match(TokenType.bang) || match(TokenType.colon);
}

function isClassMethod() {
  return match(TokenType.parenL) || match(TokenType.lessThan);
}

function parseClassBody(classContextId) {
  expect(TokenType.braceL);

  while (!eat(TokenType.braceR) && !state.error) {
    if (eat(TokenType.semi)) {
      continue;
    }

    if (match(TokenType.at)) {
      parseDecorator();
      continue;
    }
    const memberStart = state.start;
    parseClassMember(memberStart, classContextId);
  }
}

function parseClassMember(memberStart, classContextId) {
  if (isTypeScriptEnabled) {
    tsParseModifiers([
      ContextualKeyword._declare,
      ContextualKeyword._public,
      ContextualKeyword._protected,
      ContextualKeyword._private,
      ContextualKeyword._override,
    ]);
  }
  let isStatic = false;
  if (match(TokenType.name) && state.contextualKeyword === ContextualKeyword._static) {
    parseIdentifier(); // eats 'static'
    if (isClassMethod()) {
      parseClassMethod(memberStart, /* isConstructor */ false);
      return;
    } else if (isClassProperty()) {
      parseClassProperty();
      return;
    }
    // otherwise something static
    state.tokens[state.tokens.length - 1].type = TokenType._static;
    isStatic = true;

    if (match(TokenType.braceL)) {
      // This is a static block. Mark the word "static" with the class context ID for class element
      // detection and parse as a regular block.
      state.tokens[state.tokens.length - 1].contextId = classContextId;
      parseBlock();
      return;
    }
  }

  parseClassMemberWithIsStatic(memberStart, isStatic, classContextId);
}

function parseClassMemberWithIsStatic(
  memberStart,
  isStatic,
  classContextId,
) {
  if (isTypeScriptEnabled) {
    if (tsTryParseClassMemberWithIsStatic(isStatic)) {
      return;
    }
  }
  if (eat(TokenType.star)) {
    // a generator
    parseClassPropertyName(classContextId);
    parseClassMethod(memberStart, /* isConstructor */ false);
    return;
  }

  // Get the identifier name so we can tell if it's actually a keyword like "async", "get", or
  // "set".
  parseClassPropertyName(classContextId);
  let isConstructor = false;
  const token = state.tokens[state.tokens.length - 1];
  // We allow "constructor" as either an identifier or a string.
  if (token.contextualKeyword === ContextualKeyword._constructor) {
    isConstructor = true;
  }
  parsePostMemberNameModifiers();

  if (isClassMethod()) {
    parseClassMethod(memberStart, isConstructor);
  } else if (isClassProperty()) {
    parseClassProperty();
  } else if (token.contextualKeyword === ContextualKeyword._async && !isLineTerminator()) {
    state.tokens[state.tokens.length - 1].type = TokenType._async;
    // an async method
    const isGenerator = match(TokenType.star);
    if (isGenerator) {
      next();
    }

    // The so-called parsed name would have been "async": get the real name.
    parseClassPropertyName(classContextId);
    parsePostMemberNameModifiers();
    parseClassMethod(memberStart, false /* isConstructor */);
  } else if (
    (token.contextualKeyword === ContextualKeyword._get ||
      token.contextualKeyword === ContextualKeyword._set) &&
    !(isLineTerminator() && match(TokenType.star))
  ) {
    if (token.contextualKeyword === ContextualKeyword._get) {
      state.tokens[state.tokens.length - 1].type = TokenType._get;
    } else {
      state.tokens[state.tokens.length - 1].type = TokenType._set;
    }
    // `get\n*` is an uninitialized property named 'get' followed by a generator.
    // a getter or setter
    // The so-called parsed name would have been "get/set": get the real name.
    parseClassPropertyName(classContextId);
    parseClassMethod(memberStart, /* isConstructor */ false);
  } else if (token.contextualKeyword === ContextualKeyword._accessor && !isLineTerminator()) {
    parseClassPropertyName(classContextId);
    parseClassProperty();
  } else if (isLineTerminator()) {
    // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)
    parseClassProperty();
  } else {
    unexpected();
  }
}

function parseClassMethod(functionStart, isConstructor) {
  if (isTypeScriptEnabled) {
    tsTryParseTypeParameters();
  } else if (isFlowEnabled) {
    if (match(TokenType.lessThan)) {
      flowParseTypeParameterDeclaration();
    }
  }
  parseMethod(functionStart, isConstructor);
}

// Return the name of the class property, if it is a simple identifier.
function parseClassPropertyName(classContextId) {
  parsePropertyName(classContextId);
}

function parsePostMemberNameModifiers() {
  if (isTypeScriptEnabled) {
    const oldIsType = pushTypeContext(0);
    eat(TokenType.question);
    popTypeContext(oldIsType);
  }
}

function parseClassProperty() {
  if (isTypeScriptEnabled) {
    eatTypeToken(TokenType.bang);
    tsTryParseTypeAnnotation();
  } else if (isFlowEnabled) {
    if (match(TokenType.colon)) {
      flowParseTypeAnnotation();
    }
  }

  if (match(TokenType.eq)) {
    const equalsTokenIndex = state.tokens.length;
    next();
    parseMaybeAssign();
    state.tokens[equalsTokenIndex].rhsEndIndex = state.tokens.length;
  }
  semicolon();
}

function parseClassId(isStatement, optionalId = false) {
  if (
    isTypeScriptEnabled &&
    (!isStatement || optionalId) &&
    isContextual(ContextualKeyword._implements)
  ) {
    return;
  }

  if (match(TokenType.name)) {
    parseBindingIdentifier(true);
  }

  if (isTypeScriptEnabled) {
    tsTryParseTypeParameters();
  } else if (isFlowEnabled) {
    if (match(TokenType.lessThan)) {
      flowParseTypeParameterDeclaration();
    }
  }
}

// Returns true if there was a superclass.
function parseClassSuper() {
  let hasSuper = false;
  if (eat(TokenType._extends)) {
    parseExprSubscripts();
    hasSuper = true;
  } else {
    hasSuper = false;
  }
  if (isTypeScriptEnabled) {
    tsAfterParseClassSuper(hasSuper);
  } else if (isFlowEnabled) {
    flowAfterParseClassSuper(hasSuper);
  }
}

// Parses module export declaration.

function parseExport() {
  const exportIndex = state.tokens.length - 1;
  if (isTypeScriptEnabled) {
    if (tsTryParseExport()) {
      return;
    }
  }
  // export * from '...'
  if (shouldParseExportStar()) {
    parseExportStar();
  } else if (isExportDefaultSpecifier()) {
    // export default from
    parseIdentifier();
    if (match(TokenType.comma) && lookaheadType() === TokenType.star) {
      expect(TokenType.comma);
      expect(TokenType.star);
      expectContextual(ContextualKeyword._as);
      parseIdentifier();
    } else {
      parseExportSpecifiersMaybe();
    }
    parseExportFrom();
  } else if (eat(TokenType._default)) {
    // export default ...
    parseExportDefaultExpression();
  } else if (shouldParseExportDeclaration()) {
    parseExportDeclaration();
  } else {
    // export { x, y as z } [from '...']
    parseExportSpecifiers();
    parseExportFrom();
  }
  state.tokens[exportIndex].rhsEndIndex = state.tokens.length;
}

function parseExportDefaultExpression() {
  if (isTypeScriptEnabled) {
    if (tsTryParseExportDefaultExpression()) {
      return;
    }
  }
  if (isFlowEnabled) {
    if (flowTryParseExportDefaultExpression()) {
      return;
    }
  }
  const functionStart = state.start;
  if (eat(TokenType._function)) {
    parseFunction(functionStart, true, true);
  } else if (isContextual(ContextualKeyword._async) && lookaheadType() === TokenType._function) {
    // async function declaration
    eatContextual(ContextualKeyword._async);
    eat(TokenType._function);
    parseFunction(functionStart, true, true);
  } else if (match(TokenType._class)) {
    parseClass(true, true);
  } else if (match(TokenType.at)) {
    parseDecorators();
    parseClass(true, true);
  } else {
    parseMaybeAssign();
    semicolon();
  }
}

function parseExportDeclaration() {
  if (isTypeScriptEnabled) {
    tsParseExportDeclaration();
  } else if (isFlowEnabled) {
    flowParseExportDeclaration();
  } else {
    parseStatement(true);
  }
}

function isExportDefaultSpecifier() {
  if (isTypeScriptEnabled && tsIsDeclarationStart()) {
    return false;
  } else if (isFlowEnabled && flowShouldDisallowExportDefaultSpecifier()) {
    return false;
  }
  if (match(TokenType.name)) {
    return state.contextualKeyword !== ContextualKeyword._async;
  }

  if (!match(TokenType._default)) {
    return false;
  }

  const _next = nextTokenStart();
  const lookahead = lookaheadTypeAndKeyword();
  const hasFrom =
    lookahead.type === TokenType.name && lookahead.contextualKeyword === ContextualKeyword._from;
  if (lookahead.type === TokenType.comma) {
    return true;
  }
  // lookahead again when `export default from` is seen
  if (hasFrom) {
    const nextAfterFrom = input.charCodeAt(nextTokenStartSince(_next + 4));
    return nextAfterFrom === charCodes.quotationMark || nextAfterFrom === charCodes.apostrophe;
  }
  return false;
}

function parseExportSpecifiersMaybe() {
  if (eat(TokenType.comma)) {
    parseExportSpecifiers();
  }
}

function parseExportFrom() {
  if (eatContextual(ContextualKeyword._from)) {
    parseExprAtom();
    maybeParseImportAssertions();
  }
  semicolon();
}

function shouldParseExportStar() {
  if (isFlowEnabled) {
    return flowShouldParseExportStar();
  } else {
    return match(TokenType.star);
  }
}

function parseExportStar() {
  if (isFlowEnabled) {
    flowParseExportStar();
  } else {
    baseParseExportStar();
  }
}

function baseParseExportStar() {
  expect(TokenType.star);

  if (isContextual(ContextualKeyword._as)) {
    parseExportNamespace();
  } else {
    parseExportFrom();
  }
}

function parseExportNamespace() {
  next();
  state.tokens[state.tokens.length - 1].type = TokenType._as;
  parseIdentifier();
  parseExportSpecifiersMaybe();
  parseExportFrom();
}

function shouldParseExportDeclaration() {
  return (
    (isTypeScriptEnabled && tsIsDeclarationStart()) ||
    (isFlowEnabled && flowShouldParseExportDeclaration()) ||
    state.type === TokenType._var ||
    state.type === TokenType._const ||
    state.type === TokenType._let ||
    state.type === TokenType._function ||
    state.type === TokenType._class ||
    isContextual(ContextualKeyword._async) ||
    match(TokenType.at)
  );
}

// Parses a comma-separated list of module exports.
function parseExportSpecifiers() {
  let first = true;

  // export { x, y as z } [from '...']
  expect(TokenType.braceL);

  while (!eat(TokenType.braceR) && !state.error) {
    if (first) {
      first = false;
    } else {
      expect(TokenType.comma);
      if (eat(TokenType.braceR)) {
        break;
      }
    }
    parseExportSpecifier();
  }
}

function parseExportSpecifier() {
  if (isTypeScriptEnabled) {
    tsParseExportSpecifier();
    return;
  }
  parseIdentifier();
  state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ExportAccess;
  if (eatContextual(ContextualKeyword._as)) {
    parseIdentifier();
  }
}

/**
 * Starting at the `module` token in an import, determine if it was truly an
 * import reflection token or just looks like one.
 *
 * Returns true for:
 * import module foo from "foo";
 * import module from from "foo";
 *
 * Returns false for:
 * import module from "foo";
 * import module, {bar} from "foo";
 */
function isImportReflection() {
  const snapshot = state.snapshot();
  expectContextual(ContextualKeyword._module);
  if (eatContextual(ContextualKeyword._from)) {
    if (isContextual(ContextualKeyword._from)) {
      state.restoreFromSnapshot(snapshot);
      return true;
    } else {
      state.restoreFromSnapshot(snapshot);
      return false;
    }
  } else if (match(TokenType.comma)) {
    state.restoreFromSnapshot(snapshot);
    return false;
  } else {
    state.restoreFromSnapshot(snapshot);
    return true;
  }
}

/**
 * Eat the "module" token from the import reflection proposal.
 * https://github.com/tc39/proposal-import-reflection
 */
function parseMaybeImportReflection() {
  // isImportReflection does snapshot/restore, so only run it if we see the word
  // "module".
  if (isContextual(ContextualKeyword._module) && isImportReflection()) {
    next();
  }
}

// Parses import declaration.

function parseImport() {
  if (isTypeScriptEnabled && match(TokenType.name) && lookaheadType() === TokenType.eq) {
    tsParseImportEqualsDeclaration();
    return;
  }
  if (isTypeScriptEnabled && isContextual(ContextualKeyword._type)) {
    const lookahead = lookaheadTypeAndKeyword();
    if (lookahead.type === TokenType.name && lookahead.contextualKeyword !== ContextualKeyword._from) {
      // One of these `import type` cases:
      // import type T = require('T');
      // import type A from 'A';
      expectContextual(ContextualKeyword._type);
      if (lookaheadType() === TokenType.eq) {
        tsParseImportEqualsDeclaration();
        return;
      }
      // If this is an `import type...from` statement, then we already ate the
      // type token, so proceed to the regular import parser.
    } else if (lookahead.type === TokenType.star || lookahead.type === TokenType.braceL) {
      // One of these `import type` cases, in which case we can eat the type token
      // and proceed as normal:
      // import type * as A from 'A';
      // import type {a} from 'A';
      expectContextual(ContextualKeyword._type);
    }
    // Otherwise, we are importing the name "type".
  }

  // import '...'
  if (match(TokenType.string)) {
    parseExprAtom();
  } else {
    parseMaybeImportReflection();
    parseImportSpecifiers();
    expectContextual(ContextualKeyword._from);
    parseExprAtom();
  }
  maybeParseImportAssertions();
  semicolon();
}

// eslint-disable-next-line no-unused-vars
function shouldParseDefaultImport() {
  return match(TokenType.name);
}

function parseImportSpecifierLocal() {
  parseImportedIdentifier();
}

// Parses a comma-separated list of module imports.
function parseImportSpecifiers() {
  if (isFlowEnabled) {
    flowStartParseImportSpecifiers();
  }

  let first = true;
  if (shouldParseDefaultImport()) {
    // import defaultObj, { x, y as z } from '...'
    parseImportSpecifierLocal();

    if (!eat(TokenType.comma)) return;
  }

  if (match(TokenType.star)) {
    next();
    expectContextual(ContextualKeyword._as);

    parseImportSpecifierLocal();

    return;
  }

  expect(TokenType.braceL);
  while (!eat(TokenType.braceR) && !state.error) {
    if (first) {
      first = false;
    } else {
      // Detect an attempt to deep destructure
      if (eat(TokenType.colon)) {
        unexpected(
          "ES2015 named imports do not destructure. Use another statement for destructuring after the import.",
        );
      }

      expect(TokenType.comma);
      if (eat(TokenType.braceR)) {
        break;
      }
    }

    parseImportSpecifier();
  }
}

function parseImportSpecifier() {
  if (isTypeScriptEnabled) {
    tsParseImportSpecifier();
    return;
  }
  if (isFlowEnabled) {
    flowParseImportSpecifier();
    return;
  }
  parseImportedIdentifier();
  if (isContextual(ContextualKeyword._as)) {
    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportAccess;
    next();
    parseImportedIdentifier();
  }
}

/**
 * Parse import assertions like `assert {type: "json"}`.
 *
 * Import assertions technically have their own syntax, but are always parseable
 * as a plain JS object, so just do that for simplicity.
 */
function maybeParseImportAssertions() {
  if (isContextual(ContextualKeyword._assert) && !hasPrecedingLineBreak()) {
    next();
    parseObj(false, false);
  }
}

function parseFile() {
  // If enabled, skip leading hashbang line.
  if (
    state.pos === 0 &&
    input.charCodeAt(0) === charCodes.numberSign &&
    input.charCodeAt(1) === charCodes.exclamationMark
  ) {
    skipLineComment(2);
  }
  nextToken();
  return parseTopLevel();
}

class File {
  
  

  constructor(tokens, scopes) {
    this.tokens = tokens;
    this.scopes = scopes;
  }
}

function parse$2(
  input,
  isJSXEnabled,
  isTypeScriptEnabled,
  isFlowEnabled,
) {
  if (isFlowEnabled && isTypeScriptEnabled) {
    throw new Error("Cannot combine flow and typescript plugins.");
  }
  initParser(input, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled);
  const result = parseFile();
  if (state.error) {
    throw augmentError(state.error);
  }
  return result;
}

/**
 * Determine whether this optional chain or nullish coalescing operation has any await statements in
 * it. If so, we'll need to transpile to an async operation.
 *
 * We compute this by walking the length of the operation and returning true if we see an await
 * keyword used as a real await (rather than an object key or property access). Nested optional
 * chain/nullish operations need to be tracked but don't silence await, but a nested async function
 * (or any other nested scope) will make the await not count.
 */
function isAsyncOperation(tokens) {
  let index = tokens.currentIndex();
  let depth = 0;
  const startToken = tokens.currentToken();
  do {
    const token = tokens.tokens[index];
    if (token.isOptionalChainStart) {
      depth++;
    }
    if (token.isOptionalChainEnd) {
      depth--;
    }
    depth += token.numNullishCoalesceStarts;
    depth -= token.numNullishCoalesceEnds;

    if (
      token.contextualKeyword === ContextualKeyword._await &&
      token.identifierRole == null &&
      token.scopeDepth === startToken.scopeDepth
    ) {
      return true;
    }
    index += 1;
  } while (depth > 0 && index < tokens.tokens.length);
  return false;
}

class TokenProcessor {
   __init() {this.resultCode = "";}
   __init2() {this.tokenIndex = 0;}

  constructor(
     code,
     tokens,
     isFlowEnabled,
     disableESTransforms,
     helperManager,
  ) {this.code = code;this.tokens = tokens;this.isFlowEnabled = isFlowEnabled;this.disableESTransforms = disableESTransforms;this.helperManager = helperManager;TokenProcessor.prototype.__init.call(this);TokenProcessor.prototype.__init2.call(this);}

  /**
   * Make a new TokenProcessor for things like lookahead.
   */
  snapshot() {
    return {resultCode: this.resultCode, tokenIndex: this.tokenIndex};
  }

  restoreToSnapshot(snapshot) {
    this.resultCode = snapshot.resultCode;
    this.tokenIndex = snapshot.tokenIndex;
  }

  /**
   * Remove and return the code generated since the snapshot, leaving the
   * current token position in-place. Unlike most TokenProcessor operations,
   * this operation can result in input/output line number mismatches because
   * the removed code may contain newlines, so this operation should be used
   * sparingly.
   */
  dangerouslyGetAndRemoveCodeSinceSnapshot(snapshot) {
    const result = this.resultCode.slice(snapshot.resultCode.length);
    this.resultCode = snapshot.resultCode;
    return result;
  }

  reset() {
    this.resultCode = "";
    this.tokenIndex = 0;
  }

  matchesContextualAtIndex(index, contextualKeyword) {
    return (
      this.matches1AtIndex(index, TokenType.name) &&
      this.tokens[index].contextualKeyword === contextualKeyword
    );
  }

  identifierNameAtIndex(index) {
    // TODO: We need to process escapes since technically you can have unicode escapes in variable
    // names.
    return this.identifierNameForToken(this.tokens[index]);
  }

  identifierNameAtRelativeIndex(relativeIndex) {
    return this.identifierNameForToken(this.tokenAtRelativeIndex(relativeIndex));
  }

  identifierName() {
    return this.identifierNameForToken(this.currentToken());
  }

  identifierNameForToken(token) {
    return this.code.slice(token.start, token.end);
  }

  rawCodeForToken(token) {
    return this.code.slice(token.start, token.end);
  }

  stringValueAtIndex(index) {
    return this.stringValueForToken(this.tokens[index]);
  }

  stringValue() {
    return this.stringValueForToken(this.currentToken());
  }

  stringValueForToken(token) {
    // This is used to identify when two imports are the same and to resolve TypeScript enum keys.
    // Ideally we'd process escapes within the strings, but for now we pretty much take the raw
    // code.
    return this.code.slice(token.start + 1, token.end - 1);
  }

  matches1AtIndex(index, t1) {
    return this.tokens[index].type === t1;
  }

  matches2AtIndex(index, t1, t2) {
    return this.tokens[index].type === t1 && this.tokens[index + 1].type === t2;
  }

  matches3AtIndex(index, t1, t2, t3) {
    return (
      this.tokens[index].type === t1 &&
      this.tokens[index + 1].type === t2 &&
      this.tokens[index + 2].type === t3
    );
  }

  matches1(t1) {
    return this.tokens[this.tokenIndex].type === t1;
  }

  matches2(t1, t2) {
    return this.tokens[this.tokenIndex].type === t1 && this.tokens[this.tokenIndex + 1].type === t2;
  }

  matches3(t1, t2, t3) {
    return (
      this.tokens[this.tokenIndex].type === t1 &&
      this.tokens[this.tokenIndex + 1].type === t2 &&
      this.tokens[this.tokenIndex + 2].type === t3
    );
  }

  matches4(t1, t2, t3, t4) {
    return (
      this.tokens[this.tokenIndex].type === t1 &&
      this.tokens[this.tokenIndex + 1].type === t2 &&
      this.tokens[this.tokenIndex + 2].type === t3 &&
      this.tokens[this.tokenIndex + 3].type === t4
    );
  }

  matches5(t1, t2, t3, t4, t5) {
    return (
      this.tokens[this.tokenIndex].type === t1 &&
      this.tokens[this.tokenIndex + 1].type === t2 &&
      this.tokens[this.tokenIndex + 2].type === t3 &&
      this.tokens[this.tokenIndex + 3].type === t4 &&
      this.tokens[this.tokenIndex + 4].type === t5
    );
  }

  matchesContextual(contextualKeyword) {
    return this.matchesContextualAtIndex(this.tokenIndex, contextualKeyword);
  }

  matchesContextIdAndLabel(type, contextId) {
    return this.matches1(type) && this.currentToken().contextId === contextId;
  }

  previousWhitespaceAndComments() {
    let whitespaceAndComments = this.code.slice(
      this.tokenIndex > 0 ? this.tokens[this.tokenIndex - 1].end : 0,
      this.tokenIndex < this.tokens.length ? this.tokens[this.tokenIndex].start : this.code.length,
    );
    if (this.isFlowEnabled) {
      whitespaceAndComments = whitespaceAndComments.replace(/@flow/g, "");
    }
    return whitespaceAndComments;
  }

  replaceToken(newCode) {
    this.resultCode += this.previousWhitespaceAndComments();
    this.appendTokenPrefix();
    this.resultCode += newCode;
    this.appendTokenSuffix();
    this.tokenIndex++;
  }

  replaceTokenTrimmingLeftWhitespace(newCode) {
    this.resultCode += this.previousWhitespaceAndComments().replace(/[^\r\n]/g, "");
    this.appendTokenPrefix();
    this.resultCode += newCode;
    this.appendTokenSuffix();
    this.tokenIndex++;
  }

  removeInitialToken() {
    this.replaceToken("");
  }

  removeToken() {
    this.replaceTokenTrimmingLeftWhitespace("");
  }

  /**
   * Remove all code until the next }, accounting for balanced braces.
   */
  removeBalancedCode() {
    let braceDepth = 0;
    while (!this.isAtEnd()) {
      if (this.matches1(TokenType.braceL)) {
        braceDepth++;
      } else if (this.matches1(TokenType.braceR)) {
        if (braceDepth === 0) {
          return;
        }
        braceDepth--;
      }
      this.removeToken();
    }
  }

  copyExpectedToken(tokenType) {
    if (this.tokens[this.tokenIndex].type !== tokenType) {
      throw new Error(`Expected token ${tokenType}`);
    }
    this.copyToken();
  }

  copyToken() {
    this.resultCode += this.previousWhitespaceAndComments();
    this.appendTokenPrefix();
    this.resultCode += this.code.slice(
      this.tokens[this.tokenIndex].start,
      this.tokens[this.tokenIndex].end,
    );
    this.appendTokenSuffix();
    this.tokenIndex++;
  }

  copyTokenWithPrefix(prefix) {
    this.resultCode += this.previousWhitespaceAndComments();
    this.appendTokenPrefix();
    this.resultCode += prefix;
    this.resultCode += this.code.slice(
      this.tokens[this.tokenIndex].start,
      this.tokens[this.tokenIndex].end,
    );
    this.appendTokenSuffix();
    this.tokenIndex++;
  }

   appendTokenPrefix() {
    const token = this.currentToken();
    if (token.numNullishCoalesceStarts || token.isOptionalChainStart) {
      token.isAsyncOperation = isAsyncOperation(this);
    }
    if (this.disableESTransforms) {
      return;
    }
    if (token.numNullishCoalesceStarts) {
      for (let i = 0; i < token.numNullishCoalesceStarts; i++) {
        if (token.isAsyncOperation) {
          this.resultCode += "await ";
          this.resultCode += this.helperManager.getHelperName("asyncNullishCoalesce");
        } else {
          this.resultCode += this.helperManager.getHelperName("nullishCoalesce");
        }
        this.resultCode += "(";
      }
    }
    if (token.isOptionalChainStart) {
      if (token.isAsyncOperation) {
        this.resultCode += "await ";
      }
      if (this.tokenIndex > 0 && this.tokenAtRelativeIndex(-1).type === TokenType._delete) {
        if (token.isAsyncOperation) {
          this.resultCode += this.helperManager.getHelperName("asyncOptionalChainDelete");
        } else {
          this.resultCode += this.helperManager.getHelperName("optionalChainDelete");
        }
      } else if (token.isAsyncOperation) {
        this.resultCode += this.helperManager.getHelperName("asyncOptionalChain");
      } else {
        this.resultCode += this.helperManager.getHelperName("optionalChain");
      }
      this.resultCode += "([";
    }
  }

   appendTokenSuffix() {
    const token = this.currentToken();
    if (token.isOptionalChainEnd && !this.disableESTransforms) {
      this.resultCode += "])";
    }
    if (token.numNullishCoalesceEnds && !this.disableESTransforms) {
      for (let i = 0; i < token.numNullishCoalesceEnds; i++) {
        this.resultCode += "))";
      }
    }
  }

  appendCode(code) {
    this.resultCode += code;
  }

  currentToken() {
    return this.tokens[this.tokenIndex];
  }

  currentTokenCode() {
    const token = this.currentToken();
    return this.code.slice(token.start, token.end);
  }

  tokenAtRelativeIndex(relativeIndex) {
    return this.tokens[this.tokenIndex + relativeIndex];
  }

  currentIndex() {
    return this.tokenIndex;
  }

  /**
   * Move to the next token. Only suitable in preprocessing steps. When
   * generating new code, you should use copyToken or removeToken.
   */
  nextToken() {
    if (this.tokenIndex === this.tokens.length) {
      throw new Error("Unexpectedly reached end of input.");
    }
    this.tokenIndex++;
  }

  previousToken() {
    this.tokenIndex--;
  }

  finish() {
    if (this.tokenIndex !== this.tokens.length) {
      throw new Error("Tried to finish processing tokens before reaching the end.");
    }
    this.resultCode += this.previousWhitespaceAndComments();
    return this.resultCode;
  }

  isAtEnd() {
    return this.tokenIndex === this.tokens.length;
  }
}

/**
 * Get information about the class fields for this class, given a token processor pointing to the
 * open-brace at the start of the class.
 */
function getClassInfo(
  rootTransformer,
  tokens,
  nameManager,
  disableESTransforms,
) {
  const snapshot = tokens.snapshot();

  const headerInfo = processClassHeader(tokens);

  let constructorInitializerStatements = [];
  const instanceInitializerNames = [];
  const staticInitializerNames = [];
  let constructorInsertPos = null;
  const fields = [];
  const rangesToRemove = [];

  const classContextId = tokens.currentToken().contextId;
  if (classContextId == null) {
    throw new Error("Expected non-null class context ID on class open-brace.");
  }

  tokens.nextToken();
  while (!tokens.matchesContextIdAndLabel(TokenType.braceR, classContextId)) {
    if (tokens.matchesContextual(ContextualKeyword._constructor) && !tokens.currentToken().isType) {
      ({constructorInitializerStatements, constructorInsertPos} = processConstructor(tokens));
    } else if (tokens.matches1(TokenType.semi)) {
      if (!disableESTransforms) {
        rangesToRemove.push({start: tokens.currentIndex(), end: tokens.currentIndex() + 1});
      }
      tokens.nextToken();
    } else if (tokens.currentToken().isType) {
      tokens.nextToken();
    } else {
      // Either a method or a field. Skip to the identifier part.
      const statementStartIndex = tokens.currentIndex();
      let isStatic = false;
      let isESPrivate = false;
      let isDeclareOrAbstract = false;
      while (isAccessModifier(tokens.currentToken())) {
        if (tokens.matches1(TokenType._static)) {
          isStatic = true;
        }
        if (tokens.matches1(TokenType.hash)) {
          isESPrivate = true;
        }
        if (tokens.matches1(TokenType._declare) || tokens.matches1(TokenType._abstract)) {
          isDeclareOrAbstract = true;
        }
        tokens.nextToken();
      }
      if (isStatic && tokens.matches1(TokenType.braceL)) {
        // This is a static block, so don't process it in any special way.
        skipToNextClassElement(tokens, classContextId);
        continue;
      }
      if (isESPrivate) {
        // Sucrase doesn't attempt to transpile private fields; just leave them as-is.
        skipToNextClassElement(tokens, classContextId);
        continue;
      }
      if (
        tokens.matchesContextual(ContextualKeyword._constructor) &&
        !tokens.currentToken().isType
      ) {
        ({constructorInitializerStatements, constructorInsertPos} = processConstructor(tokens));
        continue;
      }

      const nameStartIndex = tokens.currentIndex();
      skipFieldName(tokens);
      if (tokens.matches1(TokenType.lessThan) || tokens.matches1(TokenType.parenL)) {
        // This is a method, so nothing to process.
        skipToNextClassElement(tokens, classContextId);
        continue;
      }
      // There might be a type annotation that we need to skip.
      while (tokens.currentToken().isType) {
        tokens.nextToken();
      }
      if (tokens.matches1(TokenType.eq)) {
        const equalsIndex = tokens.currentIndex();
        // This is an initializer, so we need to wrap in an initializer method.
        const valueEnd = tokens.currentToken().rhsEndIndex;
        if (valueEnd == null) {
          throw new Error("Expected rhsEndIndex on class field assignment.");
        }
        tokens.nextToken();
        while (tokens.currentIndex() < valueEnd) {
          rootTransformer.processToken();
        }
        let initializerName;
        if (isStatic) {
          initializerName = nameManager.claimFreeName("__initStatic");
          staticInitializerNames.push(initializerName);
        } else {
          initializerName = nameManager.claimFreeName("__init");
          instanceInitializerNames.push(initializerName);
        }
        // Fields start at the name, so `static x = 1;` has a field range of `x = 1;`.
        fields.push({
          initializerName,
          equalsIndex,
          start: nameStartIndex,
          end: tokens.currentIndex(),
        });
      } else if (!disableESTransforms || isDeclareOrAbstract) {
        // This is a regular field declaration, like `x;`. With the class transform enabled, we just
        // remove the line so that no output is produced. With the class transform disabled, we
        // usually want to preserve the declaration (but still strip types), but if the `declare`
        // or `abstract` keyword is specified, we should remove the line to avoid initializing the
        // value to undefined.
        rangesToRemove.push({start: statementStartIndex, end: tokens.currentIndex()});
      }
    }
  }

  tokens.restoreToSnapshot(snapshot);
  if (disableESTransforms) {
    // With ES transforms disabled, we don't want to transform regular class
    // field declarations, and we don't need to do any additional tricks to
    // reference the constructor for static init, but we still need to transform
    // TypeScript field initializers defined as constructor parameters and we
    // still need to remove `declare` fields. For now, we run the same code
    // path but omit any field information, as if the class had no field
    // declarations. In the future, when we fully drop the class fields
    // transform, we can simplify this code significantly.
    return {
      headerInfo,
      constructorInitializerStatements,
      instanceInitializerNames: [],
      staticInitializerNames: [],
      constructorInsertPos,
      fields: [],
      rangesToRemove,
    };
  } else {
    return {
      headerInfo,
      constructorInitializerStatements,
      instanceInitializerNames,
      staticInitializerNames,
      constructorInsertPos,
      fields,
      rangesToRemove,
    };
  }
}

/**
 * Move the token processor to the next method/field in the class.
 *
 * To do that, we seek forward to the next start of a class name (either an open
 * bracket or an identifier, or the closing curly brace), then seek backward to
 * include any access modifiers.
 */
function skipToNextClassElement(tokens, classContextId) {
  tokens.nextToken();
  while (tokens.currentToken().contextId !== classContextId) {
    tokens.nextToken();
  }
  while (isAccessModifier(tokens.tokenAtRelativeIndex(-1))) {
    tokens.previousToken();
  }
}

function processClassHeader(tokens) {
  const classToken = tokens.currentToken();
  const contextId = classToken.contextId;
  if (contextId == null) {
    throw new Error("Expected context ID on class token.");
  }
  const isExpression = classToken.isExpression;
  if (isExpression == null) {
    throw new Error("Expected isExpression on class token.");
  }
  let className = null;
  let hasSuperclass = false;
  tokens.nextToken();
  if (tokens.matches1(TokenType.name)) {
    className = tokens.identifierName();
  }
  while (!tokens.matchesContextIdAndLabel(TokenType.braceL, contextId)) {
    // If this has a superclass, there will always be an `extends` token. If it doesn't have a
    // superclass, only type parameters and `implements` clauses can show up here, all of which
    // consist only of type tokens. A declaration like `class A<B extends C> {` should *not* count
    // as having a superclass.
    if (tokens.matches1(TokenType._extends) && !tokens.currentToken().isType) {
      hasSuperclass = true;
    }
    tokens.nextToken();
  }
  return {isExpression, className, hasSuperclass};
}

/**
 * Extract useful information out of a constructor, starting at the "constructor" name.
 */
function processConstructor(tokens)


 {
  const constructorInitializerStatements = [];

  tokens.nextToken();
  const constructorContextId = tokens.currentToken().contextId;
  if (constructorContextId == null) {
    throw new Error("Expected context ID on open-paren starting constructor params.");
  }
  // Advance through parameters looking for access modifiers.
  while (!tokens.matchesContextIdAndLabel(TokenType.parenR, constructorContextId)) {
    if (tokens.currentToken().contextId === constructorContextId) {
      // Current token is an open paren or comma just before a param, so check
      // that param for access modifiers.
      tokens.nextToken();
      if (isAccessModifier(tokens.currentToken())) {
        tokens.nextToken();
        while (isAccessModifier(tokens.currentToken())) {
          tokens.nextToken();
        }
        const token = tokens.currentToken();
        if (token.type !== TokenType.name) {
          throw new Error("Expected identifier after access modifiers in constructor arg.");
        }
        const name = tokens.identifierNameForToken(token);
        constructorInitializerStatements.push(`this.${name} = ${name}`);
      }
    } else {
      tokens.nextToken();
    }
  }
  // )
  tokens.nextToken();
  let constructorInsertPos = tokens.currentIndex();

  // Advance through body looking for a super call.
  let foundSuperCall = false;
  while (!tokens.matchesContextIdAndLabel(TokenType.braceR, constructorContextId)) {
    if (!foundSuperCall && tokens.matches2(TokenType._super, TokenType.parenL)) {
      tokens.nextToken();
      const superCallContextId = tokens.currentToken().contextId;
      if (superCallContextId == null) {
        throw new Error("Expected a context ID on the super call");
      }
      while (!tokens.matchesContextIdAndLabel(TokenType.parenR, superCallContextId)) {
        tokens.nextToken();
      }
      constructorInsertPos = tokens.currentIndex();
      foundSuperCall = true;
    }
    tokens.nextToken();
  }
  // }
  tokens.nextToken();

  return {constructorInitializerStatements, constructorInsertPos};
}

/**
 * Determine if this is any token that can go before the name in a method/field.
 */
function isAccessModifier(token) {
  return [
    TokenType._async,
    TokenType._get,
    TokenType._set,
    TokenType.plus,
    TokenType.minus,
    TokenType._readonly,
    TokenType._static,
    TokenType._public,
    TokenType._private,
    TokenType._protected,
    TokenType._override,
    TokenType._abstract,
    TokenType.star,
    TokenType._declare,
    TokenType.hash,
  ].includes(token.type);
}

/**
 * The next token or set of tokens is either an identifier or an expression in square brackets, for
 * a method or field name.
 */
function skipFieldName(tokens) {
  if (tokens.matches1(TokenType.bracketL)) {
    const startToken = tokens.currentToken();
    const classContextId = startToken.contextId;
    if (classContextId == null) {
      throw new Error("Expected class context ID on computed name open bracket.");
    }
    while (!tokens.matchesContextIdAndLabel(TokenType.bracketR, classContextId)) {
      tokens.nextToken();
    }
    tokens.nextToken();
  } else {
    tokens.nextToken();
  }
}

function elideImportEquals(tokens) {
  // import
  tokens.removeInitialToken();
  // name
  tokens.removeToken();
  // =
  tokens.removeToken();
  // name or require
  tokens.removeToken();
  // Handle either `import A = require('A')` or `import A = B.C.D`.
  if (tokens.matches1(TokenType.parenL)) {
    // (
    tokens.removeToken();
    // path string
    tokens.removeToken();
    // )
    tokens.removeToken();
  } else {
    while (tokens.matches1(TokenType.dot)) {
      // .
      tokens.removeToken();
      // name
      tokens.removeToken();
    }
  }
}

const EMPTY_DECLARATION_INFO = {
  typeDeclarations: new Set(),
  valueDeclarations: new Set(),
};

/**
 * Get all top-level identifiers that should be preserved when exported in TypeScript.
 *
 * Examples:
 * - If an identifier is declared as `const x`, then `export {x}` should be preserved.
 * - If it's declared as `type x`, then `export {x}` should be removed.
 * - If it's declared as both `const x` and `type x`, then the export should be preserved.
 * - Classes and enums should be preserved (even though they also introduce types).
 * - Imported identifiers should be preserved since we don't have enough information to
 *   rule them out. --isolatedModules disallows re-exports, which catches errors here.
 */
function getDeclarationInfo(tokens) {
  const typeDeclarations = new Set();
  const valueDeclarations = new Set();
  for (let i = 0; i < tokens.tokens.length; i++) {
    const token = tokens.tokens[i];
    if (token.type === TokenType.name && isTopLevelDeclaration(token)) {
      if (token.isType) {
        typeDeclarations.add(tokens.identifierNameForToken(token));
      } else {
        valueDeclarations.add(tokens.identifierNameForToken(token));
      }
    }
  }
  return {typeDeclarations, valueDeclarations};
}

/**
 * Starting at a potential `assert` token remove the import assertion if there
 * is one.
 */
function removeMaybeImportAssertion(tokens) {
  if (tokens.matches2(TokenType.name, TokenType.braceL) && tokens.matchesContextual(ContextualKeyword._assert)) {
    // assert
    tokens.removeToken();
    // {
    tokens.removeToken();
    tokens.removeBalancedCode();
    // }
    tokens.removeToken();
  }
}

/**
 * Common method sharing code between CJS and ESM cases, since they're the same here.
 */
function shouldElideDefaultExport(
  isTypeScriptTransformEnabled,
  tokens,
  declarationInfo,
) {
  if (!isTypeScriptTransformEnabled) {
    return false;
  }
  const exportToken = tokens.currentToken();
  if (exportToken.rhsEndIndex == null) {
    throw new Error("Expected non-null rhsEndIndex on export token.");
  }
  // The export must be of the form `export default a` or `export default a;`.
  const numTokens = exportToken.rhsEndIndex - tokens.currentIndex();
  if (
    numTokens !== 3 &&
    !(numTokens === 4 && tokens.matches1AtIndex(exportToken.rhsEndIndex - 1, TokenType.semi))
  ) {
    return false;
  }
  const identifierToken = tokens.tokenAtRelativeIndex(2);
  if (identifierToken.type !== TokenType.name) {
    return false;
  }
  const exportedName = tokens.identifierNameForToken(identifierToken);
  return (
    declarationInfo.typeDeclarations.has(exportedName) &&
    !declarationInfo.valueDeclarations.has(exportedName)
  );
}

/**
 * Class for editing import statements when we are transforming to commonjs.
 */
class CJSImportTransformer extends Transformer {
   __init() {this.hadExport = false;}
   __init2() {this.hadNamedExport = false;}
   __init3() {this.hadDefaultExport = false;}
  

  constructor(
     rootTransformer,
     tokens,
     importProcessor,
     nameManager,
     helperManager,
     reactHotLoaderTransformer,
     enableLegacyBabel5ModuleInterop,
     enableLegacyTypeScriptModuleInterop,
     isTypeScriptTransformEnabled,
     preserveDynamicImport,
  ) {
    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.nameManager = nameManager;this.helperManager = helperManager;this.reactHotLoaderTransformer = reactHotLoaderTransformer;this.enableLegacyBabel5ModuleInterop = enableLegacyBabel5ModuleInterop;this.enableLegacyTypeScriptModuleInterop = enableLegacyTypeScriptModuleInterop;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;this.preserveDynamicImport = preserveDynamicImport;CJSImportTransformer.prototype.__init.call(this);CJSImportTransformer.prototype.__init2.call(this);CJSImportTransformer.prototype.__init3.call(this);    this.declarationInfo = isTypeScriptTransformEnabled
      ? getDeclarationInfo(tokens)
      : EMPTY_DECLARATION_INFO;
  }

  getPrefixCode() {
    let prefix = "";
    if (this.hadExport) {
      prefix += 'Object.defineProperty(exports, "__esModule", {value: true});';
    }
    return prefix;
  }

  getSuffixCode() {
    if (this.enableLegacyBabel5ModuleInterop && this.hadDefaultExport && !this.hadNamedExport) {
      return "\nmodule.exports = exports.default;\n";
    }
    return "";
  }

  process() {
    // TypeScript `import foo = require('foo');` should always just be translated to plain require.
    if (this.tokens.matches3(TokenType._import, TokenType.name, TokenType.eq)) {
      return this.processImportEquals();
    }
    if (this.tokens.matches1(TokenType._import)) {
      this.processImport();
      return true;
    }
    if (this.tokens.matches2(TokenType._export, TokenType.eq)) {
      this.tokens.replaceToken("module.exports");
      return true;
    }
    if (this.tokens.matches1(TokenType._export) && !this.tokens.currentToken().isType) {
      this.hadExport = true;
      return this.processExport();
    }
    if (this.tokens.matches2(TokenType.name, TokenType.postIncDec)) {
      // Fall through to normal identifier matching if this doesn't apply.
      if (this.processPostIncDec()) {
        return true;
      }
    }
    if (this.tokens.matches1(TokenType.name) || this.tokens.matches1(TokenType.jsxName)) {
      return this.processIdentifier();
    }
    if (this.tokens.matches1(TokenType.eq)) {
      return this.processAssignment();
    }
    if (this.tokens.matches1(TokenType.assign)) {
      return this.processComplexAssignment();
    }
    if (this.tokens.matches1(TokenType.preIncDec)) {
      return this.processPreIncDec();
    }
    return false;
  }

   processImportEquals() {
    const importName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);
    if (this.importProcessor.isTypeName(importName)) {
      // If this name is only used as a type, elide the whole import.
      elideImportEquals(this.tokens);
    } else {
      // Otherwise, switch `import` to `const`.
      this.tokens.replaceToken("const");
    }
    return true;
  }

  /**
   * Transform this:
   * import foo, {bar} from 'baz';
   * into
   * var _baz = require('baz'); var _baz2 = _interopRequireDefault(_baz);
   *
   * The import code was already generated in the import preprocessing step, so
   * we just need to look it up.
   */
   processImport() {
    if (this.tokens.matches2(TokenType._import, TokenType.parenL)) {
      if (this.preserveDynamicImport) {
        // Bail out, only making progress for this one token.
        this.tokens.copyToken();
        return;
      }
      const requireWrapper = this.enableLegacyTypeScriptModuleInterop
        ? ""
        : `${this.helperManager.getHelperName("interopRequireWildcard")}(`;
      this.tokens.replaceToken(`Promise.resolve().then(() => ${requireWrapper}require`);
      const contextId = this.tokens.currentToken().contextId;
      if (contextId == null) {
        throw new Error("Expected context ID on dynamic import invocation.");
      }
      this.tokens.copyToken();
      while (!this.tokens.matchesContextIdAndLabel(TokenType.parenR, contextId)) {
        this.rootTransformer.processToken();
      }
      this.tokens.replaceToken(requireWrapper ? ")))" : "))");
      return;
    }

    const wasOnlyTypes = this.removeImportAndDetectIfType();

    if (wasOnlyTypes) {
      this.tokens.removeToken();
    } else {
      const path = this.tokens.stringValue();
      this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path));
      this.tokens.appendCode(this.importProcessor.claimImportCode(path));
    }
    removeMaybeImportAssertion(this.tokens);
    if (this.tokens.matches1(TokenType.semi)) {
      this.tokens.removeToken();
    }
  }

  /**
   * Erase this import, and return true if it was either of the form "import type" or contained only
   * "type" named imports. Such imports should not even do a side-effect import.
   *
   * The position should end at the import string.
   */
   removeImportAndDetectIfType() {
    this.tokens.removeInitialToken();
    if (
      this.tokens.matchesContextual(ContextualKeyword._type) &&
      !this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, TokenType.comma) &&
      !this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, ContextualKeyword._from)
    ) {
      // This is an "import type" statement, so exit early.
      this.removeRemainingImport();
      return true;
    }

    if (this.tokens.matches1(TokenType.name) || this.tokens.matches1(TokenType.star)) {
      // We have a default import or namespace import, so there must be some
      // non-type import.
      this.removeRemainingImport();
      return false;
    }

    if (this.tokens.matches1(TokenType.string)) {
      // This is a bare import, so we should proceed with the import.
      return false;
    }

    let foundNonType = false;
    while (!this.tokens.matches1(TokenType.string)) {
      // Check if any named imports are of the form "foo" or "foo as bar", with
      // no leading "type".
      if ((!foundNonType && this.tokens.matches1(TokenType.braceL)) || this.tokens.matches1(TokenType.comma)) {
        this.tokens.removeToken();
        if (
          this.tokens.matches2(TokenType.name, TokenType.comma) ||
          this.tokens.matches2(TokenType.name, TokenType.braceR) ||
          this.tokens.matches4(TokenType.name, TokenType.name, TokenType.name, TokenType.comma) ||
          this.tokens.matches4(TokenType.name, TokenType.name, TokenType.name, TokenType.braceR)
        ) {
          foundNonType = true;
        }
      }
      this.tokens.removeToken();
    }
    return !foundNonType;
  }

   removeRemainingImport() {
    while (!this.tokens.matches1(TokenType.string)) {
      this.tokens.removeToken();
    }
  }

   processIdentifier() {
    const token = this.tokens.currentToken();
    if (token.shadowsGlobal) {
      return false;
    }

    if (token.identifierRole === IdentifierRole.ObjectShorthand) {
      return this.processObjectShorthand();
    }

    if (token.identifierRole !== IdentifierRole.Access) {
      return false;
    }
    const replacement = this.importProcessor.getIdentifierReplacement(
      this.tokens.identifierNameForToken(token),
    );
    if (!replacement) {
      return false;
    }
    // Tolerate any number of closing parens while looking for an opening paren
    // that indicates a function call.
    let possibleOpenParenIndex = this.tokens.currentIndex() + 1;
    while (
      possibleOpenParenIndex < this.tokens.tokens.length &&
      this.tokens.tokens[possibleOpenParenIndex].type === TokenType.parenR
    ) {
      possibleOpenParenIndex++;
    }
    // Avoid treating imported functions as methods of their `exports` object
    // by using `(0, f)` when the identifier is in a paren expression. Else
    // use `Function.prototype.call` when the identifier is a guaranteed
    // function call. When using `call`, pass undefined as the context.
    if (this.tokens.tokens[possibleOpenParenIndex].type === TokenType.parenL) {
      if (
        this.tokens.tokenAtRelativeIndex(1).type === TokenType.parenL &&
        this.tokens.tokenAtRelativeIndex(-1).type !== TokenType._new
      ) {
        this.tokens.replaceToken(`${replacement}.call(void 0, `);
        // Remove the old paren.
        this.tokens.removeToken();
        // Balance out the new paren.
        this.rootTransformer.processBalancedCode();
        this.tokens.copyExpectedToken(TokenType.parenR);
      } else {
        // See here: http://2ality.com/2015/12/references.html
        this.tokens.replaceToken(`(0, ${replacement})`);
      }
    } else {
      this.tokens.replaceToken(replacement);
    }
    return true;
  }

  processObjectShorthand() {
    const identifier = this.tokens.identifierName();
    const replacement = this.importProcessor.getIdentifierReplacement(identifier);
    if (!replacement) {
      return false;
    }
    this.tokens.replaceToken(`${identifier}: ${replacement}`);
    return true;
  }

  processExport() {
    if (
      this.tokens.matches2(TokenType._export, TokenType._enum) ||
      this.tokens.matches3(TokenType._export, TokenType._const, TokenType._enum)
    ) {
      // Let the TypeScript transform handle it.
      return false;
    }
    if (this.tokens.matches2(TokenType._export, TokenType._default)) {
      this.hadDefaultExport = true;
      if (this.tokens.matches3(TokenType._export, TokenType._default, TokenType._enum)) {
        // Flow export default enums need some special handling, so handle them
        // in that tranform rather than this one.
        return false;
      }
      this.processExportDefault();
      return true;
    }
    this.hadNamedExport = true;
    if (
      this.tokens.matches2(TokenType._export, TokenType._var) ||
      this.tokens.matches2(TokenType._export, TokenType._let) ||
      this.tokens.matches2(TokenType._export, TokenType._const)
    ) {
      this.processExportVar();
      return true;
    } else if (
      this.tokens.matches2(TokenType._export, TokenType._function) ||
      // export async function
      this.tokens.matches3(TokenType._export, TokenType.name, TokenType._function)
    ) {
      this.processExportFunction();
      return true;
    } else if (
      this.tokens.matches2(TokenType._export, TokenType._class) ||
      this.tokens.matches3(TokenType._export, TokenType._abstract, TokenType._class) ||
      this.tokens.matches2(TokenType._export, TokenType.at)
    ) {
      this.processExportClass();
      return true;
    } else if (this.tokens.matches2(TokenType._export, TokenType.braceL)) {
      this.processExportBindings();
      return true;
    } else if (this.tokens.matches2(TokenType._export, TokenType.star)) {
      this.processExportStar();
      return true;
    } else if (
      this.tokens.matches2(TokenType._export, TokenType.name) &&
      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, ContextualKeyword._type)
    ) {
      // export type {a};
      // export type {a as b};
      // export type {a} from './b';
      // export type * from './b';
      // export type * as ns from './b';
      this.tokens.removeInitialToken();
      this.tokens.removeToken();
      if (this.tokens.matches1(TokenType.braceL)) {
        while (!this.tokens.matches1(TokenType.braceR)) {
          this.tokens.removeToken();
        }
        this.tokens.removeToken();
      } else {
        // *
        this.tokens.removeToken();
        if (this.tokens.matches1(TokenType._as)) {
          // as
          this.tokens.removeToken();
          // ns
          this.tokens.removeToken();
        }
      }
      // Remove type re-export `... } from './T'`
      if (
        this.tokens.matchesContextual(ContextualKeyword._from) &&
        this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, TokenType.string)
      ) {
        this.tokens.removeToken();
        this.tokens.removeToken();
        removeMaybeImportAssertion(this.tokens);
      }
      return true;
    } else {
      throw new Error("Unrecognized export syntax.");
    }
  }

   processAssignment() {
    const index = this.tokens.currentIndex();
    const identifierToken = this.tokens.tokens[index - 1];
    // If the LHS is a type identifier, this must be a declaration like `let a: b = c;`,
    // with `b` as the identifier, so nothing needs to be done in that case.
    if (identifierToken.isType || identifierToken.type !== TokenType.name) {
      return false;
    }
    if (identifierToken.shadowsGlobal) {
      return false;
    }
    if (index >= 2 && this.tokens.matches1AtIndex(index - 2, TokenType.dot)) {
      return false;
    }
    if (index >= 2 && [TokenType._var, TokenType._let, TokenType._const].includes(this.tokens.tokens[index - 2].type)) {
      // Declarations don't need an extra assignment. This doesn't avoid the
      // assignment for comma-separated declarations, but it's still correct
      // since the assignment is just redundant.
      return false;
    }
    const assignmentSnippet = this.importProcessor.resolveExportBinding(
      this.tokens.identifierNameForToken(identifierToken),
    );
    if (!assignmentSnippet) {
      return false;
    }
    this.tokens.copyToken();
    this.tokens.appendCode(` ${assignmentSnippet} =`);
    return true;
  }

  /**
   * Process something like `a += 3`, where `a` might be an exported value.
   */
   processComplexAssignment() {
    const index = this.tokens.currentIndex();
    const identifierToken = this.tokens.tokens[index - 1];
    if (identifierToken.type !== TokenType.name) {
      return false;
    }
    if (identifierToken.shadowsGlobal) {
      return false;
    }
    if (index >= 2 && this.tokens.matches1AtIndex(index - 2, TokenType.dot)) {
      return false;
    }
    const assignmentSnippet = this.importProcessor.resolveExportBinding(
      this.tokens.identifierNameForToken(identifierToken),
    );
    if (!assignmentSnippet) {
      return false;
    }
    this.tokens.appendCode(` = ${assignmentSnippet}`);
    this.tokens.copyToken();
    return true;
  }

  /**
   * Process something like `++a`, where `a` might be an exported value.
   */
   processPreIncDec() {
    const index = this.tokens.currentIndex();
    const identifierToken = this.tokens.tokens[index + 1];
    if (identifierToken.type !== TokenType.name) {
      return false;
    }
    if (identifierToken.shadowsGlobal) {
      return false;
    }
    // Ignore things like ++a.b and ++a[b] and ++a().b.
    if (
      index + 2 < this.tokens.tokens.length &&
      (this.tokens.matches1AtIndex(index + 2, TokenType.dot) ||
        this.tokens.matches1AtIndex(index + 2, TokenType.bracketL) ||
        this.tokens.matches1AtIndex(index + 2, TokenType.parenL))
    ) {
      return false;
    }
    const identifierName = this.tokens.identifierNameForToken(identifierToken);
    const assignmentSnippet = this.importProcessor.resolveExportBinding(identifierName);
    if (!assignmentSnippet) {
      return false;
    }
    this.tokens.appendCode(`${assignmentSnippet} = `);
    this.tokens.copyToken();
    return true;
  }

  /**
   * Process something like `a++`, where `a` might be an exported value.
   * This starts at the `a`, not at the `++`.
   */
   processPostIncDec() {
    const index = this.tokens.currentIndex();
    const identifierToken = this.tokens.tokens[index];
    const operatorToken = this.tokens.tokens[index + 1];
    if (identifierToken.type !== TokenType.name) {
      return false;
    }
    if (identifierToken.shadowsGlobal) {
      return false;
    }
    if (index >= 1 && this.tokens.matches1AtIndex(index - 1, TokenType.dot)) {
      return false;
    }
    const identifierName = this.tokens.identifierNameForToken(identifierToken);
    const assignmentSnippet = this.importProcessor.resolveExportBinding(identifierName);
    if (!assignmentSnippet) {
      return false;
    }
    const operatorCode = this.tokens.rawCodeForToken(operatorToken);
    // We might also replace the identifier with something like exports.x, so
    // do that replacement here as well.
    const base = this.importProcessor.getIdentifierReplacement(identifierName) || identifierName;
    if (operatorCode === "++") {
      this.tokens.replaceToken(`(${base} = ${assignmentSnippet} = ${base} + 1, ${base} - 1)`);
    } else if (operatorCode === "--") {
      this.tokens.replaceToken(`(${base} = ${assignmentSnippet} = ${base} - 1, ${base} + 1)`);
    } else {
      throw new Error(`Unexpected operator: ${operatorCode}`);
    }
    this.tokens.removeToken();
    return true;
  }

   processExportDefault() {
    if (
      this.tokens.matches4(TokenType._export, TokenType._default, TokenType._function, TokenType.name) ||
      // export default async function
      (this.tokens.matches5(TokenType._export, TokenType._default, TokenType.name, TokenType._function, TokenType.name) &&
        this.tokens.matchesContextualAtIndex(
          this.tokens.currentIndex() + 2,
          ContextualKeyword._async,
        ))
    ) {
      this.tokens.removeInitialToken();
      this.tokens.removeToken();
      // Named function export case: change it to a top-level function
      // declaration followed by exports statement.
      const name = this.processNamedFunction();
      this.tokens.appendCode(` exports.default = ${name};`);
    } else if (
      this.tokens.matches4(TokenType._export, TokenType._default, TokenType._class, TokenType.name) ||
      this.tokens.matches5(TokenType._export, TokenType._default, TokenType._abstract, TokenType._class, TokenType.name) ||
      this.tokens.matches3(TokenType._export, TokenType._default, TokenType.at)
    ) {
      this.tokens.removeInitialToken();
      this.tokens.removeToken();
      this.copyDecorators();
      if (this.tokens.matches1(TokenType._abstract)) {
        this.tokens.removeToken();
      }
      const name = this.rootTransformer.processNamedClass();
      this.tokens.appendCode(` exports.default = ${name};`);
      // After this point, this is a plain "export default E" statement.
    } else if (
      shouldElideDefaultExport(this.isTypeScriptTransformEnabled, this.tokens, this.declarationInfo)
    ) {
      // If the exported value is just an identifier and should be elided by TypeScript
      // rules, then remove it entirely. It will always have the form `export default e`,
      // where `e` is an identifier.
      this.tokens.removeInitialToken();
      this.tokens.removeToken();
      this.tokens.removeToken();
    } else if (this.reactHotLoaderTransformer) {
      // We need to assign E to a variable. Change "export default E" to
      // "let _default; exports.default = _default = E"
      const defaultVarName = this.nameManager.claimFreeName("_default");
      this.tokens.replaceToken(`let ${defaultVarName}; exports.`);
      this.tokens.copyToken();
      this.tokens.appendCode(` = ${defaultVarName} =`);
      this.reactHotLoaderTransformer.setExtractedDefaultExportName(defaultVarName);
    } else {
      // Change "export default E" to "exports.default = E"
      this.tokens.replaceToken("exports.");
      this.tokens.copyToken();
      this.tokens.appendCode(" =");
    }
  }

   copyDecorators() {
    while (this.tokens.matches1(TokenType.at)) {
      this.tokens.copyToken();
      if (this.tokens.matches1(TokenType.parenL)) {
        this.tokens.copyExpectedToken(TokenType.parenL);
        this.rootTransformer.processBalancedCode();
        this.tokens.copyExpectedToken(TokenType.parenR);
      } else {
        this.tokens.copyExpectedToken(TokenType.name);
        while (this.tokens.matches1(TokenType.dot)) {
          this.tokens.copyExpectedToken(TokenType.dot);
          this.tokens.copyExpectedToken(TokenType.name);
        }
        if (this.tokens.matches1(TokenType.parenL)) {
          this.tokens.copyExpectedToken(TokenType.parenL);
          this.rootTransformer.processBalancedCode();
          this.tokens.copyExpectedToken(TokenType.parenR);
        }
      }
    }
  }

  /**
   * Transform a declaration like `export var`, `export let`, or `export const`.
   */
   processExportVar() {
    if (this.isSimpleExportVar()) {
      this.processSimpleExportVar();
    } else {
      this.processComplexExportVar();
    }
  }

  /**
   * Determine if the export is of the form:
   * export var/let/const [varName] = [expr];
   * In other words, determine if function name inference might apply.
   */
   isSimpleExportVar() {
    let tokenIndex = this.tokens.currentIndex();
    // export
    tokenIndex++;
    // var/let/const
    tokenIndex++;
    if (!this.tokens.matches1AtIndex(tokenIndex, TokenType.name)) {
      return false;
    }
    tokenIndex++;
    while (tokenIndex < this.tokens.tokens.length && this.tokens.tokens[tokenIndex].isType) {
      tokenIndex++;
    }
    if (!this.tokens.matches1AtIndex(tokenIndex, TokenType.eq)) {
      return false;
    }
    return true;
  }

  /**
   * Transform an `export var` declaration initializing a single variable.
   *
   * For example, this:
   * export const f = () => {};
   * becomes this:
   * const f = () => {}; exports.f = f;
   *
   * The variable is unused (e.g. exports.f has the true value of the export).
   * We need to produce an assignment of this form so that the function will
   * have an inferred name of "f", which wouldn't happen in the more general
   * case below.
   */
   processSimpleExportVar() {
    // export
    this.tokens.removeInitialToken();
    // var/let/const
    this.tokens.copyToken();
    const varName = this.tokens.identifierName();
    // x: number  ->  x
    while (!this.tokens.matches1(TokenType.eq)) {
      this.rootTransformer.processToken();
    }
    const endIndex = this.tokens.currentToken().rhsEndIndex;
    if (endIndex == null) {
      throw new Error("Expected = token with an end index.");
    }
    while (this.tokens.currentIndex() < endIndex) {
      this.rootTransformer.processToken();
    }
    this.tokens.appendCode(`; exports.${varName} = ${varName}`);
  }

  /**
   * Transform normal declaration exports, including handling destructuring.
   * For example, this:
   * export const {x: [a = 2, b], c} = d;
   * becomes this:
   * ({x: [exports.a = 2, exports.b], c: exports.c} = d;)
   */
   processComplexExportVar() {
    this.tokens.removeInitialToken();
    this.tokens.removeToken();
    const needsParens = this.tokens.matches1(TokenType.braceL);
    if (needsParens) {
      this.tokens.appendCode("(");
    }

    let depth = 0;
    while (true) {
      if (
        this.tokens.matches1(TokenType.braceL) ||
        this.tokens.matches1(TokenType.dollarBraceL) ||
        this.tokens.matches1(TokenType.bracketL)
      ) {
        depth++;
        this.tokens.copyToken();
      } else if (this.tokens.matches1(TokenType.braceR) || this.tokens.matches1(TokenType.bracketR)) {
        depth--;
        this.tokens.copyToken();
      } else if (
        depth === 0 &&
        !this.tokens.matches1(TokenType.name) &&
        !this.tokens.currentToken().isType
      ) {
        break;
      } else if (this.tokens.matches1(TokenType.eq)) {
        // Default values might have assignments in the RHS that we want to ignore, so skip past
        // them.
        const endIndex = this.tokens.currentToken().rhsEndIndex;
        if (endIndex == null) {
          throw new Error("Expected = token with an end index.");
        }
        while (this.tokens.currentIndex() < endIndex) {
          this.rootTransformer.processToken();
        }
      } else {
        const token = this.tokens.currentToken();
        if (isDeclaration(token)) {
          const name = this.tokens.identifierName();
          let replacement = this.importProcessor.getIdentifierReplacement(name);
          if (replacement === null) {
            throw new Error(`Expected a replacement for ${name} in \`export var\` syntax.`);
          }
          if (isObjectShorthandDeclaration(token)) {
            replacement = `${name}: ${replacement}`;
          }
          this.tokens.replaceToken(replacement);
        } else {
          this.rootTransformer.processToken();
        }
      }
    }

    if (needsParens) {
      // Seek to the end of the RHS.
      const endIndex = this.tokens.currentToken().rhsEndIndex;
      if (endIndex == null) {
        throw new Error("Expected = token with an end index.");
      }
      while (this.tokens.currentIndex() < endIndex) {
        this.rootTransformer.processToken();
      }
      this.tokens.appendCode(")");
    }
  }

  /**
   * Transform this:
   * export function foo() {}
   * into this:
   * function foo() {} exports.foo = foo;
   */
   processExportFunction() {
    this.tokens.replaceToken("");
    const name = this.processNamedFunction();
    this.tokens.appendCode(` exports.${name} = ${name};`);
  }

  /**
   * Skip past a function with a name and return that name.
   */
   processNamedFunction() {
    if (this.tokens.matches1(TokenType._function)) {
      this.tokens.copyToken();
    } else if (this.tokens.matches2(TokenType.name, TokenType._function)) {
      if (!this.tokens.matchesContextual(ContextualKeyword._async)) {
        throw new Error("Expected async keyword in function export.");
      }
      this.tokens.copyToken();
      this.tokens.copyToken();
    }
    if (this.tokens.matches1(TokenType.star)) {
      this.tokens.copyToken();
    }
    if (!this.tokens.matches1(TokenType.name)) {
      throw new Error("Expected identifier for exported function name.");
    }
    const name = this.tokens.identifierName();
    this.tokens.copyToken();
    if (this.tokens.currentToken().isType) {
      this.tokens.removeInitialToken();
      while (this.tokens.currentToken().isType) {
        this.tokens.removeToken();
      }
    }
    this.tokens.copyExpectedToken(TokenType.parenL);
    this.rootTransformer.processBalancedCode();
    this.tokens.copyExpectedToken(TokenType.parenR);
    this.rootTransformer.processPossibleTypeRange();
    this.tokens.copyExpectedToken(TokenType.braceL);
    this.rootTransformer.processBalancedCode();
    this.tokens.copyExpectedToken(TokenType.braceR);
    return name;
  }

  /**
   * Transform this:
   * export class A {}
   * into this:
   * class A {} exports.A = A;
   */
   processExportClass() {
    this.tokens.removeInitialToken();
    this.copyDecorators();
    if (this.tokens.matches1(TokenType._abstract)) {
      this.tokens.removeToken();
    }
    const name = this.rootTransformer.processNamedClass();
    this.tokens.appendCode(` exports.${name} = ${name};`);
  }

  /**
   * Transform this:
   * export {a, b as c};
   * into this:
   * exports.a = a; exports.c = b;
   *
   * OR
   *
   * Transform this:
   * export {a, b as c} from './foo';
   * into the pre-generated Object.defineProperty code from the ImportProcessor.
   *
   * For the first case, if the TypeScript transform is enabled, we need to skip
   * exports that are only defined as types.
   */
   processExportBindings() {
    this.tokens.removeInitialToken();
    this.tokens.removeToken();

    const exportStatements = [];
    while (true) {
      if (this.tokens.matches1(TokenType.braceR)) {
        this.tokens.removeToken();
        break;
      }

      const specifierInfo = getImportExportSpecifierInfo(this.tokens);
      while (this.tokens.currentIndex() < specifierInfo.endIndex) {
        this.tokens.removeToken();
      }
      if (!specifierInfo.isType && !this.shouldElideExportedIdentifier(specifierInfo.leftName)) {
        const localName = specifierInfo.leftName;
        const exportedName = specifierInfo.rightName;
        const newLocalName = this.importProcessor.getIdentifierReplacement(localName);
        exportStatements.push(`exports.${exportedName} = ${newLocalName || localName};`);
      }

      if (this.tokens.matches1(TokenType.braceR)) {
        this.tokens.removeToken();
        break;
      }
      if (this.tokens.matches2(TokenType.comma, TokenType.braceR)) {
        this.tokens.removeToken();
        this.tokens.removeToken();
        break;
      } else if (this.tokens.matches1(TokenType.comma)) {
        this.tokens.removeToken();
      } else {
        throw new Error(`Unexpected token: ${JSON.stringify(this.tokens.currentToken())}`);
      }
    }

    if (this.tokens.matchesContextual(ContextualKeyword._from)) {
      // This is an export...from, so throw away the normal named export code
      // and use the Object.defineProperty code from ImportProcessor.
      this.tokens.removeToken();
      const path = this.tokens.stringValue();
      this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path));
      removeMaybeImportAssertion(this.tokens);
    } else {
      // This is a normal named export, so use that.
      this.tokens.appendCode(exportStatements.join(" "));
    }

    if (this.tokens.matches1(TokenType.semi)) {
      this.tokens.removeToken();
    }
  }

   processExportStar() {
    this.tokens.removeInitialToken();
    while (!this.tokens.matches1(TokenType.string)) {
      this.tokens.removeToken();
    }
    const path = this.tokens.stringValue();
    this.tokens.replaceTokenTrimmingLeftWhitespace(this.importProcessor.claimImportCode(path));
    removeMaybeImportAssertion(this.tokens);
    if (this.tokens.matches1(TokenType.semi)) {
      this.tokens.removeToken();
    }
  }

   shouldElideExportedIdentifier(name) {
    return this.isTypeScriptTransformEnabled && !this.declarationInfo.valueDeclarations.has(name);
  }
}

/**
 * Class for editing import statements when we are keeping the code as ESM. We still need to remove
 * type-only imports in TypeScript and Flow.
 */
class ESMImportTransformer extends Transformer {
  
  
  

  constructor(
     tokens,
     nameManager,
     helperManager,
     reactHotLoaderTransformer,
     isTypeScriptTransformEnabled,
    options,
  ) {
    super();this.tokens = tokens;this.nameManager = nameManager;this.helperManager = helperManager;this.reactHotLoaderTransformer = reactHotLoaderTransformer;this.isTypeScriptTransformEnabled = isTypeScriptTransformEnabled;    this.nonTypeIdentifiers = isTypeScriptTransformEnabled
      ? getNonTypeIdentifiers(tokens, options)
      : new Set();
    this.declarationInfo = isTypeScriptTransformEnabled
      ? getDeclarationInfo(tokens)
      : EMPTY_DECLARATION_INFO;
    this.injectCreateRequireForImportRequire = Boolean(options.injectCreateRequireForImportRequire);
  }

  process() {
    // TypeScript `import foo = require('foo');` should always just be translated to plain require.
    if (this.tokens.matches3(TokenType._import, TokenType.name, TokenType.eq)) {
      return this.processImportEquals();
    }
    if (
      this.tokens.matches4(TokenType._import, TokenType.name, TokenType.name, TokenType.eq) &&
      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, ContextualKeyword._type)
    ) {
      // import type T = require('T')
      this.tokens.removeInitialToken();
      // This construct is always exactly 8 tokens long, so remove the 7 remaining tokens.
      for (let i = 0; i < 7; i++) {
        this.tokens.removeToken();
      }
      return true;
    }
    if (this.tokens.matches2(TokenType._export, TokenType.eq)) {
      this.tokens.replaceToken("module.exports");
      return true;
    }
    if (
      this.tokens.matches5(TokenType._export, TokenType._import, TokenType.name, TokenType.name, TokenType.eq) &&
      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 2, ContextualKeyword._type)
    ) {
      // export import type T = require('T')
      this.tokens.removeInitialToken();
      // This construct is always exactly 9 tokens long, so remove the 8 remaining tokens.
      for (let i = 0; i < 8; i++) {
        this.tokens.removeToken();
      }
      return true;
    }
    if (this.tokens.matches1(TokenType._import)) {
      return this.processImport();
    }
    if (this.tokens.matches2(TokenType._export, TokenType._default)) {
      return this.processExportDefault();
    }
    if (this.tokens.matches2(TokenType._export, TokenType.braceL)) {
      return this.processNamedExports();
    }
    if (
      this.tokens.matches2(TokenType._export, TokenType.name) &&
      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, ContextualKeyword._type)
    ) {
      // export type {a};
      // export type {a as b};
      // export type {a} from './b';
      // export type * from './b';
      // export type * as ns from './b';
      this.tokens.removeInitialToken();
      this.tokens.removeToken();
      if (this.tokens.matches1(TokenType.braceL)) {
        while (!this.tokens.matches1(TokenType.braceR)) {
          this.tokens.removeToken();
        }
        this.tokens.removeToken();
      } else {
        // *
        this.tokens.removeToken();
        if (this.tokens.matches1(TokenType._as)) {
          // as
          this.tokens.removeToken();
          // ns
          this.tokens.removeToken();
        }
      }
      // Remove type re-export `... } from './T'`
      if (
        this.tokens.matchesContextual(ContextualKeyword._from) &&
        this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, TokenType.string)
      ) {
        this.tokens.removeToken();
        this.tokens.removeToken();
        removeMaybeImportAssertion(this.tokens);
      }
      return true;
    }
    return false;
  }

   processImportEquals() {
    const importName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);
    if (this.isTypeName(importName)) {
      // If this name is only used as a type, elide the whole import.
      elideImportEquals(this.tokens);
    } else if (this.injectCreateRequireForImportRequire) {
      // We're using require in an environment (Node ESM) that doesn't provide
      // it as a global, so generate a helper to import it.
      // import -> const
      this.tokens.replaceToken("const");
      // Foo
      this.tokens.copyToken();
      // =
      this.tokens.copyToken();
      // require
      this.tokens.replaceToken(this.helperManager.getHelperName("require"));
    } else {
      // Otherwise, just switch `import` to `const`.
      this.tokens.replaceToken("const");
    }
    return true;
  }

   processImport() {
    if (this.tokens.matches2(TokenType._import, TokenType.parenL)) {
      // Dynamic imports don't need to be transformed.
      return false;
    }

    const snapshot = this.tokens.snapshot();
    const allImportsRemoved = this.removeImportTypeBindings();
    if (allImportsRemoved) {
      this.tokens.restoreToSnapshot(snapshot);
      while (!this.tokens.matches1(TokenType.string)) {
        this.tokens.removeToken();
      }
      this.tokens.removeToken();
      removeMaybeImportAssertion(this.tokens);
      if (this.tokens.matches1(TokenType.semi)) {
        this.tokens.removeToken();
      }
    }
    return true;
  }

  /**
   * Remove type bindings from this import, leaving the rest of the import intact.
   *
   * Return true if this import was ONLY types, and thus is eligible for removal. This will bail out
   * of the replacement operation, so we can return early here.
   */
   removeImportTypeBindings() {
    this.tokens.copyExpectedToken(TokenType._import);
    if (
      this.tokens.matchesContextual(ContextualKeyword._type) &&
      !this.tokens.matches1AtIndex(this.tokens.currentIndex() + 1, TokenType.comma) &&
      !this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 1, ContextualKeyword._from)
    ) {
      // This is an "import type" statement, so exit early.
      return true;
    }

    if (this.tokens.matches1(TokenType.string)) {
      // This is a bare import, so we should proceed with the import.
      this.tokens.copyToken();
      return false;
    }

    // Skip the "module" token in import reflection.
    if (
      this.tokens.matchesContextual(ContextualKeyword._module) &&
      this.tokens.matchesContextualAtIndex(this.tokens.currentIndex() + 2, ContextualKeyword._from)
    ) {
      this.tokens.copyToken();
    }

    let foundNonTypeImport = false;
    let needsComma = false;

    if (this.tokens.matches1(TokenType.name)) {
      if (this.isTypeName(this.tokens.identifierName())) {
        this.tokens.removeToken();
        if (this.tokens.matches1(TokenType.comma)) {
          this.tokens.removeToken();
        }
      } else {
        foundNonTypeImport = true;
        this.tokens.copyToken();
        if (this.tokens.matches1(TokenType.comma)) {
          // We're in a statement like:
          // import A, * as B from './A';
          // or
          // import A, {foo} from './A';
          // where the `A` is being kept. The comma should be removed if an only
          // if the next part of the import statement is elided, but that's hard
          // to determine at this point in the code. Instead, always remove it
          // and set a flag to add it back if necessary.
          needsComma = true;
          this.tokens.removeToken();
        }
      }
    }

    if (this.tokens.matches1(TokenType.star)) {
      if (this.isTypeName(this.tokens.identifierNameAtRelativeIndex(2))) {
        this.tokens.removeToken();
        this.tokens.removeToken();
        this.tokens.removeToken();
      } else {
        if (needsComma) {
          this.tokens.appendCode(",");
        }
        foundNonTypeImport = true;
        this.tokens.copyExpectedToken(TokenType.star);
        this.tokens.copyExpectedToken(TokenType.name);
        this.tokens.copyExpectedToken(TokenType.name);
      }
    } else if (this.tokens.matches1(TokenType.braceL)) {
      if (needsComma) {
        this.tokens.appendCode(",");
      }
      this.tokens.copyToken();
      while (!this.tokens.matches1(TokenType.braceR)) {
        const specifierInfo = getImportExportSpecifierInfo(this.tokens);
        if (specifierInfo.isType || this.isTypeName(specifierInfo.rightName)) {
          while (this.tokens.currentIndex() < specifierInfo.endIndex) {
            this.tokens.removeToken();
          }
          if (this.tokens.matches1(TokenType.comma)) {
            this.tokens.removeToken();
          }
        } else {
          foundNonTypeImport = true;
          while (this.tokens.currentIndex() < specifierInfo.endIndex) {
            this.tokens.copyToken();
          }
          if (this.tokens.matches1(TokenType.comma)) {
            this.tokens.copyToken();
          }
        }
      }
      this.tokens.copyExpectedToken(TokenType.braceR);
    }

    return !foundNonTypeImport;
  }

   isTypeName(name) {
    return this.isTypeScriptTransformEnabled && !this.nonTypeIdentifiers.has(name);
  }

   processExportDefault() {
    if (
      shouldElideDefaultExport(this.isTypeScriptTransformEnabled, this.tokens, this.declarationInfo)
    ) {
      // If the exported value is just an identifier and should be elided by TypeScript
      // rules, then remove it entirely. It will always have the form `export default e`,
      // where `e` is an identifier.
      this.tokens.removeInitialToken();
      this.tokens.removeToken();
      this.tokens.removeToken();
      return true;
    }

    const alreadyHasName =
      this.tokens.matches4(TokenType._export, TokenType._default, TokenType._function, TokenType.name) ||
      // export default async function
      (this.tokens.matches5(TokenType._export, TokenType._default, TokenType.name, TokenType._function, TokenType.name) &&
        this.tokens.matchesContextualAtIndex(
          this.tokens.currentIndex() + 2,
          ContextualKeyword._async,
        )) ||
      this.tokens.matches4(TokenType._export, TokenType._default, TokenType._class, TokenType.name) ||
      this.tokens.matches5(TokenType._export, TokenType._default, TokenType._abstract, TokenType._class, TokenType.name);

    if (!alreadyHasName && this.reactHotLoaderTransformer) {
      // This is a plain "export default E" statement and we need to assign E to a variable.
      // Change "export default E" to "let _default; export default _default = E"
      const defaultVarName = this.nameManager.claimFreeName("_default");
      this.tokens.replaceToken(`let ${defaultVarName}; export`);
      this.tokens.copyToken();
      this.tokens.appendCode(` ${defaultVarName} =`);
      this.reactHotLoaderTransformer.setExtractedDefaultExportName(defaultVarName);
      return true;
    }
    return false;
  }

  /**
   * In TypeScript, we need to remove named exports that were never declared or only declared as a
   * type.
   */
   processNamedExports() {
    if (!this.isTypeScriptTransformEnabled) {
      return false;
    }
    this.tokens.copyExpectedToken(TokenType._export);
    this.tokens.copyExpectedToken(TokenType.braceL);

    while (!this.tokens.matches1(TokenType.braceR)) {
      const specifierInfo = getImportExportSpecifierInfo(this.tokens);
      if (specifierInfo.isType || this.shouldElideExportedName(specifierInfo.leftName)) {
        // Type export, so remove all tokens, including any comma.
        while (this.tokens.currentIndex() < specifierInfo.endIndex) {
          this.tokens.removeToken();
        }
        if (this.tokens.matches1(TokenType.comma)) {
          this.tokens.removeToken();
        }
      } else {
        // Non-type export, so copy all tokens, including any comma.
        while (this.tokens.currentIndex() < specifierInfo.endIndex) {
          this.tokens.copyToken();
        }
        if (this.tokens.matches1(TokenType.comma)) {
          this.tokens.copyToken();
        }
      }
    }
    this.tokens.copyExpectedToken(TokenType.braceR);
    return true;
  }

  /**
   * ESM elides all imports with the rule that we only elide if we see that it's
   * a type and never see it as a value. This is in contrast to CJS, which
   * elides imports that are completely unknown.
   */
   shouldElideExportedName(name) {
    return (
      this.isTypeScriptTransformEnabled &&
      this.declarationInfo.typeDeclarations.has(name) &&
      !this.declarationInfo.valueDeclarations.has(name)
    );
  }
}

class FlowTransformer extends Transformer {
  constructor(
     rootTransformer,
     tokens,
     isImportsTransformEnabled,
  ) {
    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.isImportsTransformEnabled = isImportsTransformEnabled;  }

  process() {
    if (
      this.rootTransformer.processPossibleArrowParamEnd() ||
      this.rootTransformer.processPossibleAsyncArrowWithTypeParams() ||
      this.rootTransformer.processPossibleTypeRange()
    ) {
      return true;
    }
    if (this.tokens.matches1(TokenType._enum)) {
      this.processEnum();
      return true;
    }
    if (this.tokens.matches2(TokenType._export, TokenType._enum)) {
      this.processNamedExportEnum();
      return true;
    }
    if (this.tokens.matches3(TokenType._export, TokenType._default, TokenType._enum)) {
      this.processDefaultExportEnum();
      return true;
    }
    return false;
  }

  /**
   * Handle a declaration like:
   * export enum E ...
   *
   * With this imports transform, this becomes:
   * const E = [[enum]]; exports.E = E;
   *
   * otherwise, it becomes:
   * export const E = [[enum]];
   */
  processNamedExportEnum() {
    if (this.isImportsTransformEnabled) {
      // export
      this.tokens.removeInitialToken();
      const enumName = this.tokens.identifierNameAtRelativeIndex(1);
      this.processEnum();
      this.tokens.appendCode(` exports.${enumName} = ${enumName};`);
    } else {
      this.tokens.copyToken();
      this.processEnum();
    }
  }

  /**
   * Handle a declaration like:
   * export default enum E
   *
   * With the imports transform, this becomes:
   * const E = [[enum]]; exports.default = E;
   *
   * otherwise, it becomes:
   * const E = [[enum]]; export default E;
   */
  processDefaultExportEnum() {
    // export
    this.tokens.removeInitialToken();
    // default
    this.tokens.removeToken();
    const enumName = this.tokens.identifierNameAtRelativeIndex(1);
    this.processEnum();
    if (this.isImportsTransformEnabled) {
      this.tokens.appendCode(` exports.default = ${enumName};`);
    } else {
      this.tokens.appendCode(` export default ${enumName};`);
    }
  }

  /**
   * Transpile flow enums to invoke the "flow-enums-runtime" library.
   *
   * Currently, the transpiled code always uses `require("flow-enums-runtime")`,
   * but if future flexibility is needed, we could expose a config option for
   * this string (similar to configurable JSX). Even when targeting ESM, the
   * default behavior of babel-plugin-transform-flow-enums is to use require
   * rather than injecting an import.
   *
   * Flow enums are quite a bit simpler than TS enums and have some convenient
   * constraints:
   * - Element initializers must be either always present or always absent. That
   *   means that we can use fixed lookahead on the first element (if any) and
   *   assume that all elements are like that.
   * - The right-hand side of an element initializer must be a literal value,
   *   not a complex expression and not referencing other elements. That means
   *   we can simply copy a single token.
   *
   * Enums can be broken up into three basic cases:
   *
   * Mirrored enums:
   * enum E {A, B}
   *   ->
   * const E = require("flow-enums-runtime").Mirrored(["A", "B"]);
   *
   * Initializer enums:
   * enum E {A = 1, B = 2}
   *   ->
   * const E = require("flow-enums-runtime")({A: 1, B: 2});
   *
   * Symbol enums:
   * enum E of symbol {A, B}
   *   ->
   * const E = require("flow-enums-runtime")({A: Symbol("A"), B: Symbol("B")});
   *
   * We can statically detect which of the three cases this is by looking at the
   * "of" declaration (if any) and seeing if the first element has an initializer.
   * Since the other transform details are so similar between the three cases, we
   * use a single implementation and vary the transform within processEnumElement
   * based on case.
   */
  processEnum() {
    // enum E -> const E
    this.tokens.replaceToken("const");
    this.tokens.copyExpectedToken(TokenType.name);

    let isSymbolEnum = false;
    if (this.tokens.matchesContextual(ContextualKeyword._of)) {
      this.tokens.removeToken();
      isSymbolEnum = this.tokens.matchesContextual(ContextualKeyword._symbol);
      this.tokens.removeToken();
    }
    const hasInitializers = this.tokens.matches3(TokenType.braceL, TokenType.name, TokenType.eq);
    this.tokens.appendCode(' = require("flow-enums-runtime")');

    const isMirrored = !isSymbolEnum && !hasInitializers;
    this.tokens.replaceTokenTrimmingLeftWhitespace(isMirrored ? ".Mirrored([" : "({");

    while (!this.tokens.matches1(TokenType.braceR)) {
      // ... is allowed at the end and has no runtime behavior.
      if (this.tokens.matches1(TokenType.ellipsis)) {
        this.tokens.removeToken();
        break;
      }
      this.processEnumElement(isSymbolEnum, hasInitializers);
      if (this.tokens.matches1(TokenType.comma)) {
        this.tokens.copyToken();
      }
    }

    this.tokens.replaceToken(isMirrored ? "]);" : "});");
  }

  /**
   * Process an individual enum element, producing either an array element or an
   * object element based on what type of enum this is.
   */
  processEnumElement(isSymbolEnum, hasInitializers) {
    if (isSymbolEnum) {
      // Symbol enums never have initializers and are expanded to object elements.
      // A, -> A: Symbol("A"),
      const elementName = this.tokens.identifierName();
      this.tokens.copyToken();
      this.tokens.appendCode(`: Symbol("${elementName}")`);
    } else if (hasInitializers) {
      // Initializers are expanded to object elements.
      // A = 1, -> A: 1,
      this.tokens.copyToken();
      this.tokens.replaceTokenTrimmingLeftWhitespace(":");
      this.tokens.copyToken();
    } else {
      // Enum elements without initializers become string literal array elements.
      // A, -> "A",
      this.tokens.replaceToken(`"${this.tokens.identifierName()}"`);
    }
  }
}

function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }

const JEST_GLOBAL_NAME = "jest";
const HOISTED_METHODS = ["mock", "unmock", "enableAutomock", "disableAutomock"];

/**
 * Implementation of babel-plugin-jest-hoist, which hoists up some jest method
 * calls above the imports to allow them to override other imports.
 *
 * To preserve line numbers, rather than directly moving the jest.mock code, we
 * wrap each invocation in a function statement and then call the function from
 * the top of the file.
 */
class JestHoistTransformer extends Transformer {
    __init() {this.hoistedFunctionNames = [];}

  constructor(
     rootTransformer,
     tokens,
     nameManager,
     importProcessor,
  ) {
    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.nameManager = nameManager;this.importProcessor = importProcessor;JestHoistTransformer.prototype.__init.call(this);  }

  process() {
    if (
      this.tokens.currentToken().scopeDepth === 0 &&
      this.tokens.matches4(TokenType.name, TokenType.dot, TokenType.name, TokenType.parenL) &&
      this.tokens.identifierName() === JEST_GLOBAL_NAME
    ) {
      // TODO: This only works if imports transform is active, which it will be for jest.
      //       But if jest adds module support and we no longer need the import transform, this needs fixing.
      if (_optionalChain([this, 'access', _ => _.importProcessor, 'optionalAccess', _2 => _2.getGlobalNames, 'call', _3 => _3(), 'optionalAccess', _4 => _4.has, 'call', _5 => _5(JEST_GLOBAL_NAME)])) {
        return false;
      }
      return this.extractHoistedCalls();
    }

    return false;
  }

  getHoistedCode() {
    if (this.hoistedFunctionNames.length > 0) {
      // This will be placed before module interop code, but that's fine since
      // imports aren't allowed in module mock factories.
      return this.hoistedFunctionNames.map((name) => `${name}();`).join("");
    }
    return "";
  }

  /**
   * Extracts any methods calls on the jest-object that should be hoisted.
   *
   * According to the jest docs, https://jestjs.io/docs/en/jest-object#jestmockmodulename-factory-options,
   * mock, unmock, enableAutomock, disableAutomock, are the methods that should be hoisted.
   *
   * We do not apply the same checks of the arguments as babel-plugin-jest-hoist does.
   */
   extractHoistedCalls() {
    // We're handling a chain of calls where `jest` may or may not need to be inserted for each call
    // in the chain, so remove the initial `jest` to make the loop implementation cleaner.
    this.tokens.removeToken();
    // Track some state so that multiple non-hoisted chained calls in a row keep their chaining
    // syntax.
    let followsNonHoistedJestCall = false;

    // Iterate through all chained calls on the jest object.
    while (this.tokens.matches3(TokenType.dot, TokenType.name, TokenType.parenL)) {
      const methodName = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);
      const shouldHoist = HOISTED_METHODS.includes(methodName);
      if (shouldHoist) {
        // We've matched e.g. `.mock(...)` or similar call.
        // Replace the initial `.` with `function __jestHoist(){jest.`
        const hoistedFunctionName = this.nameManager.claimFreeName("__jestHoist");
        this.hoistedFunctionNames.push(hoistedFunctionName);
        this.tokens.replaceToken(`function ${hoistedFunctionName}(){${JEST_GLOBAL_NAME}.`);
        this.tokens.copyToken();
        this.tokens.copyToken();
        this.rootTransformer.processBalancedCode();
        this.tokens.copyExpectedToken(TokenType.parenR);
        this.tokens.appendCode(";}");
        followsNonHoistedJestCall = false;
      } else {
        // This is a non-hoisted method, so just transform the code as usual.
        if (followsNonHoistedJestCall) {
          // If we didn't hoist the previous call, we can leave the code as-is to chain off of the
          // previous method call. It's important to preserve the code here because we don't know
          // for sure that the method actually returned the jest object for chaining.
          this.tokens.copyToken();
        } else {
          // If we hoisted the previous call, we know it returns the jest object back, so we insert
          // the identifier `jest` to continue the chain.
          this.tokens.replaceToken(`${JEST_GLOBAL_NAME}.`);
        }
        this.tokens.copyToken();
        this.tokens.copyToken();
        this.rootTransformer.processBalancedCode();
        this.tokens.copyExpectedToken(TokenType.parenR);
        followsNonHoistedJestCall = true;
      }
    }

    return true;
  }
}

class NumericSeparatorTransformer extends Transformer {
  constructor( tokens) {
    super();this.tokens = tokens;  }

  process() {
    if (this.tokens.matches1(TokenType.num)) {
      const code = this.tokens.currentTokenCode();
      if (code.includes("_")) {
        this.tokens.replaceToken(code.replace(/_/g, ""));
        return true;
      }
    }
    return false;
  }
}

class OptionalCatchBindingTransformer extends Transformer {
  constructor( tokens,  nameManager) {
    super();this.tokens = tokens;this.nameManager = nameManager;  }

  process() {
    if (this.tokens.matches2(TokenType._catch, TokenType.braceL)) {
      this.tokens.copyToken();
      this.tokens.appendCode(` (${this.nameManager.claimFreeName("e")})`);
      return true;
    }
    return false;
  }
}

/**
 * Transformer supporting the optional chaining and nullish coalescing operators.
 *
 * Tech plan here:
 * https://github.com/alangpierce/sucrase/wiki/Sucrase-Optional-Chaining-and-Nullish-Coalescing-Technical-Plan
 *
 * The prefix and suffix code snippets are handled by TokenProcessor, and this transformer handles
 * the operators themselves.
 */
class OptionalChainingNullishTransformer extends Transformer {
  constructor( tokens,  nameManager) {
    super();this.tokens = tokens;this.nameManager = nameManager;  }

  process() {
    if (this.tokens.matches1(TokenType.nullishCoalescing)) {
      const token = this.tokens.currentToken();
      if (this.tokens.tokens[token.nullishStartIndex].isAsyncOperation) {
        this.tokens.replaceTokenTrimmingLeftWhitespace(", async () => (");
      } else {
        this.tokens.replaceTokenTrimmingLeftWhitespace(", () => (");
      }
      return true;
    }
    if (this.tokens.matches1(TokenType._delete)) {
      const nextToken = this.tokens.tokenAtRelativeIndex(1);
      if (nextToken.isOptionalChainStart) {
        this.tokens.removeInitialToken();
        return true;
      }
    }
    const token = this.tokens.currentToken();
    const chainStart = token.subscriptStartIndex;
    if (
      chainStart != null &&
      this.tokens.tokens[chainStart].isOptionalChainStart &&
      // Super subscripts can't be optional (since super is never null/undefined), and the syntax
      // relies on the subscript being intact, so leave this token alone.
      this.tokens.tokenAtRelativeIndex(-1).type !== TokenType._super
    ) {
      const param = this.nameManager.claimFreeName("_");
      let arrowStartSnippet;
      if (
        chainStart > 0 &&
        this.tokens.matches1AtIndex(chainStart - 1, TokenType._delete) &&
        this.isLastSubscriptInChain()
      ) {
        // Delete operations are special: we already removed the delete keyword, and to still
        // perform a delete, we need to insert a delete in the very last part of the chain, which
        // in correct code will always be a property access.
        arrowStartSnippet = `${param} => delete ${param}`;
      } else {
        arrowStartSnippet = `${param} => ${param}`;
      }
      if (this.tokens.tokens[chainStart].isAsyncOperation) {
        arrowStartSnippet = `async ${arrowStartSnippet}`;
      }
      if (
        this.tokens.matches2(TokenType.questionDot, TokenType.parenL) ||
        this.tokens.matches2(TokenType.questionDot, TokenType.lessThan)
      ) {
        if (this.justSkippedSuper()) {
          this.tokens.appendCode(".bind(this)");
        }
        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalCall', ${arrowStartSnippet}`);
      } else if (this.tokens.matches2(TokenType.questionDot, TokenType.bracketL)) {
        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalAccess', ${arrowStartSnippet}`);
      } else if (this.tokens.matches1(TokenType.questionDot)) {
        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalAccess', ${arrowStartSnippet}.`);
      } else if (this.tokens.matches1(TokenType.dot)) {
        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'access', ${arrowStartSnippet}.`);
      } else if (this.tokens.matches1(TokenType.bracketL)) {
        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'access', ${arrowStartSnippet}[`);
      } else if (this.tokens.matches1(TokenType.parenL)) {
        if (this.justSkippedSuper()) {
          this.tokens.appendCode(".bind(this)");
        }
        this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'call', ${arrowStartSnippet}(`);
      } else {
        throw new Error("Unexpected subscript operator in optional chain.");
      }
      return true;
    }
    return false;
  }

  /**
   * Determine if the current token is the last of its chain, so that we know whether it's eligible
   * to have a delete op inserted.
   *
   * We can do this by walking forward until we determine one way or another. Each
   * isOptionalChainStart token must be paired with exactly one isOptionalChainEnd token after it in
   * a nesting way, so we can track depth and walk to the end of the chain (the point where the
   * depth goes negative) and see if any other subscript token is after us in the chain.
   */
  isLastSubscriptInChain() {
    let depth = 0;
    for (let i = this.tokens.currentIndex() + 1; ; i++) {
      if (i >= this.tokens.tokens.length) {
        throw new Error("Reached the end of the code while finding the end of the access chain.");
      }
      if (this.tokens.tokens[i].isOptionalChainStart) {
        depth++;
      } else if (this.tokens.tokens[i].isOptionalChainEnd) {
        depth--;
      }
      if (depth < 0) {
        return true;
      }

      // This subscript token is a later one in the same chain.
      if (depth === 0 && this.tokens.tokens[i].subscriptStartIndex != null) {
        return false;
      }
    }
  }

  /**
   * Determine if we are the open-paren in an expression like super.a()?.b.
   *
   * We can do this by walking backward to find the previous subscript. If that subscript was
   * preceded by a super, then we must be the subscript after it, so if this is a call expression,
   * we'll need to attach the right context.
   */
  justSkippedSuper() {
    let depth = 0;
    let index = this.tokens.currentIndex() - 1;
    while (true) {
      if (index < 0) {
        throw new Error(
          "Reached the start of the code while finding the start of the access chain.",
        );
      }
      if (this.tokens.tokens[index].isOptionalChainStart) {
        depth--;
      } else if (this.tokens.tokens[index].isOptionalChainEnd) {
        depth++;
      }
      if (depth < 0) {
        return false;
      }

      // This subscript token is a later one in the same chain.
      if (depth === 0 && this.tokens.tokens[index].subscriptStartIndex != null) {
        return this.tokens.tokens[index - 1].type === TokenType._super;
      }
      index--;
    }
  }
}

/**
 * Implementation of babel-plugin-transform-react-display-name, which adds a
 * display name to usages of React.createClass and createReactClass.
 */
class ReactDisplayNameTransformer extends Transformer {
  constructor(
     rootTransformer,
     tokens,
     importProcessor,
     options,
  ) {
    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.importProcessor = importProcessor;this.options = options;  }

  process() {
    const startIndex = this.tokens.currentIndex();
    if (this.tokens.identifierName() === "createReactClass") {
      const newName =
        this.importProcessor && this.importProcessor.getIdentifierReplacement("createReactClass");
      if (newName) {
        this.tokens.replaceToken(`(0, ${newName})`);
      } else {
        this.tokens.copyToken();
      }
      this.tryProcessCreateClassCall(startIndex);
      return true;
    }
    if (
      this.tokens.matches3(TokenType.name, TokenType.dot, TokenType.name) &&
      this.tokens.identifierName() === "React" &&
      this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 2) === "createClass"
    ) {
      const newName = this.importProcessor
        ? this.importProcessor.getIdentifierReplacement("React") || "React"
        : "React";
      if (newName) {
        this.tokens.replaceToken(newName);
        this.tokens.copyToken();
        this.tokens.copyToken();
      } else {
        this.tokens.copyToken();
        this.tokens.copyToken();
        this.tokens.copyToken();
      }
      this.tryProcessCreateClassCall(startIndex);
      return true;
    }
    return false;
  }

  /**
   * This is called with the token position at the open-paren.
   */
   tryProcessCreateClassCall(startIndex) {
    const displayName = this.findDisplayName(startIndex);
    if (!displayName) {
      return;
    }

    if (this.classNeedsDisplayName()) {
      this.tokens.copyExpectedToken(TokenType.parenL);
      this.tokens.copyExpectedToken(TokenType.braceL);
      this.tokens.appendCode(`displayName: '${displayName}',`);
      this.rootTransformer.processBalancedCode();
      this.tokens.copyExpectedToken(TokenType.braceR);
      this.tokens.copyExpectedToken(TokenType.parenR);
    }
  }

   findDisplayName(startIndex) {
    if (startIndex < 2) {
      return null;
    }
    if (this.tokens.matches2AtIndex(startIndex - 2, TokenType.name, TokenType.eq)) {
      // This is an assignment (or declaration) and the LHS is either an identifier or a member
      // expression ending in an identifier, so use that identifier name.
      return this.tokens.identifierNameAtIndex(startIndex - 2);
    }
    if (
      startIndex >= 2 &&
      this.tokens.tokens[startIndex - 2].identifierRole === IdentifierRole.ObjectKey
    ) {
      // This is an object literal value.
      return this.tokens.identifierNameAtIndex(startIndex - 2);
    }
    if (this.tokens.matches2AtIndex(startIndex - 2, TokenType._export, TokenType._default)) {
      return this.getDisplayNameFromFilename();
    }
    return null;
  }

   getDisplayNameFromFilename() {
    const filePath = this.options.filePath || "unknown";
    const pathSegments = filePath.split("/");
    const filename = pathSegments[pathSegments.length - 1];
    const dotIndex = filename.lastIndexOf(".");
    const baseFilename = dotIndex === -1 ? filename : filename.slice(0, dotIndex);
    if (baseFilename === "index" && pathSegments[pathSegments.length - 2]) {
      return pathSegments[pathSegments.length - 2];
    } else {
      return baseFilename;
    }
  }

  /**
   * We only want to add a display name when this is a function call containing
   * one argument, which is an object literal without `displayName` as an
   * existing key.
   */
   classNeedsDisplayName() {
    let index = this.tokens.currentIndex();
    if (!this.tokens.matches2(TokenType.parenL, TokenType.braceL)) {
      return false;
    }
    // The block starts on the {, and we expect any displayName key to be in
    // that context. We need to ignore other other contexts to avoid matching
    // nested displayName keys.
    const objectStartIndex = index + 1;
    const objectContextId = this.tokens.tokens[objectStartIndex].contextId;
    if (objectContextId == null) {
      throw new Error("Expected non-null context ID on object open-brace.");
    }

    for (; index < this.tokens.tokens.length; index++) {
      const token = this.tokens.tokens[index];
      if (token.type === TokenType.braceR && token.contextId === objectContextId) {
        index++;
        break;
      }

      if (
        this.tokens.identifierNameAtIndex(index) === "displayName" &&
        this.tokens.tokens[index].identifierRole === IdentifierRole.ObjectKey &&
        token.contextId === objectContextId
      ) {
        // We found a displayName key, so bail out.
        return false;
      }
    }

    if (index === this.tokens.tokens.length) {
      throw new Error("Unexpected end of input when processing React class.");
    }

    // If we got this far, we know we have createClass with an object with no
    // display name, so we want to proceed as long as that was the only argument.
    return (
      this.tokens.matches1AtIndex(index, TokenType.parenR) ||
      this.tokens.matches2AtIndex(index, TokenType.comma, TokenType.parenR)
    );
  }
}

class ReactHotLoaderTransformer extends Transformer {
   __init() {this.extractedDefaultExportName = null;}

  constructor( tokens,  filePath) {
    super();this.tokens = tokens;this.filePath = filePath;ReactHotLoaderTransformer.prototype.__init.call(this);  }

  setExtractedDefaultExportName(extractedDefaultExportName) {
    this.extractedDefaultExportName = extractedDefaultExportName;
  }

  getPrefixCode() {
    return `
      (function () {
        var enterModule = require('react-hot-loader').enterModule;
        enterModule && enterModule(module);
      })();`
      .replace(/\s+/g, " ")
      .trim();
  }

  getSuffixCode() {
    const topLevelNames = new Set();
    for (const token of this.tokens.tokens) {
      if (
        !token.isType &&
        isTopLevelDeclaration(token) &&
        token.identifierRole !== IdentifierRole.ImportDeclaration
      ) {
        topLevelNames.add(this.tokens.identifierNameForToken(token));
      }
    }
    const namesToRegister = Array.from(topLevelNames).map((name) => ({
      variableName: name,
      uniqueLocalName: name,
    }));
    if (this.extractedDefaultExportName) {
      namesToRegister.push({
        variableName: this.extractedDefaultExportName,
        uniqueLocalName: "default",
      });
    }
    return `
;(function () {
  var reactHotLoader = require('react-hot-loader').default;
  var leaveModule = require('react-hot-loader').leaveModule;
  if (!reactHotLoader) {
    return;
  }
${namesToRegister
  .map(
    ({variableName, uniqueLocalName}) =>
      `  reactHotLoader.register(${variableName}, "${uniqueLocalName}", ${JSON.stringify(
        this.filePath || "",
      )});`,
  )
  .join("\n")}
  leaveModule(module);
})();`;
  }

  process() {
    return false;
  }
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar
// Hard-code a list of reserved words rather than trying to use keywords or contextual keywords
// from the parser, since currently there are various exceptions, like `package` being reserved
// but unused and various contextual keywords being reserved. Note that we assume that all code
// compiled by Sucrase is in a module, so strict mode words and await are all considered reserved
// here.
const RESERVED_WORDS = new Set([
  // Reserved keywords as of ECMAScript 2015
  "break",
  "case",
  "catch",
  "class",
  "const",
  "continue",
  "debugger",
  "default",
  "delete",
  "do",
  "else",
  "export",
  "extends",
  "finally",
  "for",
  "function",
  "if",
  "import",
  "in",
  "instanceof",
  "new",
  "return",
  "super",
  "switch",
  "this",
  "throw",
  "try",
  "typeof",
  "var",
  "void",
  "while",
  "with",
  "yield",
  // Future reserved keywords
  "enum",
  "implements",
  "interface",
  "let",
  "package",
  "private",
  "protected",
  "public",
  "static",
  "await",
  // Literals that cannot be used as identifiers
  "false",
  "null",
  "true",
]);

/**
 * Determine if the given name is a legal variable name.
 *
 * This is needed when transforming TypeScript enums; if an enum key is a valid
 * variable name, it might be referenced later in the enum, so we need to
 * declare a variable.
 */
function isIdentifier(name) {
  if (name.length === 0) {
    return false;
  }
  if (!IS_IDENTIFIER_START[name.charCodeAt(0)]) {
    return false;
  }
  for (let i = 1; i < name.length; i++) {
    if (!IS_IDENTIFIER_CHAR[name.charCodeAt(i)]) {
      return false;
    }
  }
  return !RESERVED_WORDS.has(name);
}

class TypeScriptTransformer extends Transformer {
  constructor(
     rootTransformer,
     tokens,
     isImportsTransformEnabled,
  ) {
    super();this.rootTransformer = rootTransformer;this.tokens = tokens;this.isImportsTransformEnabled = isImportsTransformEnabled;  }

  process() {
    if (
      this.rootTransformer.processPossibleArrowParamEnd() ||
      this.rootTransformer.processPossibleAsyncArrowWithTypeParams() ||
      this.rootTransformer.processPossibleTypeRange()
    ) {
      return true;
    }
    if (
      this.tokens.matches1(TokenType._public) ||
      this.tokens.matches1(TokenType._protected) ||
      this.tokens.matches1(TokenType._private) ||
      this.tokens.matches1(TokenType._abstract) ||
      this.tokens.matches1(TokenType._readonly) ||
      this.tokens.matches1(TokenType._override) ||
      this.tokens.matches1(TokenType.nonNullAssertion)
    ) {
      this.tokens.removeInitialToken();
      return true;
    }
    if (this.tokens.matches1(TokenType._enum) || this.tokens.matches2(TokenType._const, TokenType._enum)) {
      this.processEnum();
      return true;
    }
    if (
      this.tokens.matches2(TokenType._export, TokenType._enum) ||
      this.tokens.matches3(TokenType._export, TokenType._const, TokenType._enum)
    ) {
      this.processEnum(true);
      return true;
    }
    return false;
  }

  processEnum(isExport = false) {
    // We might have "export const enum", so just remove all relevant tokens.
    this.tokens.removeInitialToken();
    while (this.tokens.matches1(TokenType._const) || this.tokens.matches1(TokenType._enum)) {
      this.tokens.removeToken();
    }
    const enumName = this.tokens.identifierName();
    this.tokens.removeToken();
    if (isExport && !this.isImportsTransformEnabled) {
      this.tokens.appendCode("export ");
    }
    this.tokens.appendCode(`var ${enumName}; (function (${enumName})`);
    this.tokens.copyExpectedToken(TokenType.braceL);
    this.processEnumBody(enumName);
    this.tokens.copyExpectedToken(TokenType.braceR);
    if (isExport && this.isImportsTransformEnabled) {
      this.tokens.appendCode(`)(${enumName} || (exports.${enumName} = ${enumName} = {}));`);
    } else {
      this.tokens.appendCode(`)(${enumName} || (${enumName} = {}));`);
    }
  }

  /**
   * Transform an enum into equivalent JS. This has complexity in a few places:
   * - TS allows string enums, numeric enums, and a mix of the two styles within an enum.
   * - Enum keys are allowed to be referenced in later enum values.
   * - Enum keys are allowed to be strings.
   * - When enum values are omitted, they should follow an auto-increment behavior.
   */
  processEnumBody(enumName) {
    // Code that can be used to reference the previous enum member, or null if this is the first
    // enum member.
    let previousValueCode = null;
    while (true) {
      if (this.tokens.matches1(TokenType.braceR)) {
        break;
      }
      const {nameStringCode, variableName} = this.extractEnumKeyInfo(this.tokens.currentToken());
      this.tokens.removeInitialToken();

      if (
        this.tokens.matches3(TokenType.eq, TokenType.string, TokenType.comma) ||
        this.tokens.matches3(TokenType.eq, TokenType.string, TokenType.braceR)
      ) {
        this.processStringLiteralEnumMember(enumName, nameStringCode, variableName);
      } else if (this.tokens.matches1(TokenType.eq)) {
        this.processExplicitValueEnumMember(enumName, nameStringCode, variableName);
      } else {
        this.processImplicitValueEnumMember(
          enumName,
          nameStringCode,
          variableName,
          previousValueCode,
        );
      }
      if (this.tokens.matches1(TokenType.comma)) {
        this.tokens.removeToken();
      }

      if (variableName != null) {
        previousValueCode = variableName;
      } else {
        previousValueCode = `${enumName}[${nameStringCode}]`;
      }
    }
  }

  /**
   * Detect name information about this enum key, which will be used to determine which code to emit
   * and whether we should declare a variable as part of this declaration.
   *
   * Some cases to keep in mind:
   * - Enum keys can be implicitly referenced later, e.g. `X = 1, Y = X`. In Sucrase, we implement
   *   this by declaring a variable `X` so that later expressions can use it.
   * - In addition to the usual identifier key syntax, enum keys are allowed to be string literals,
   *   e.g. `"hello world" = 3,`. Template literal syntax is NOT allowed.
   * - Even if the enum key is defined as a string literal, it may still be referenced by identifier
   *   later, e.g. `"X" = 1, Y = X`. That means that we need to detect whether or not a string
   *   literal is identifier-like and emit a variable if so, even if the declaration did not use an
   *   identifier.
   * - Reserved keywords like `break` are valid enum keys, but are not valid to be referenced later
   *   and would be a syntax error if we emitted a variable, so we need to skip the variable
   *   declaration in those cases.
   *
   * The variableName return value captures these nuances: if non-null, we can and must emit a
   * variable declaration, and if null, we can't and shouldn't.
   */
  extractEnumKeyInfo(nameToken) {
    if (nameToken.type === TokenType.name) {
      const name = this.tokens.identifierNameForToken(nameToken);
      return {
        nameStringCode: `"${name}"`,
        variableName: isIdentifier(name) ? name : null,
      };
    } else if (nameToken.type === TokenType.string) {
      const name = this.tokens.stringValueForToken(nameToken);
      return {
        nameStringCode: this.tokens.code.slice(nameToken.start, nameToken.end),
        variableName: isIdentifier(name) ? name : null,
      };
    } else {
      throw new Error("Expected name or string at beginning of enum element.");
    }
  }

  /**
   * Handle an enum member where the RHS is just a string literal (not omitted, not a number, and
   * not a complex expression). This is the typical form for TS string enums, and in this case, we
   * do *not* create a reverse mapping.
   *
   * This is called after deleting the key token, when the token processor is at the equals sign.
   *
   * Example 1:
   * someKey = "some value"
   * ->
   * const someKey = "some value"; MyEnum["someKey"] = someKey;
   *
   * Example 2:
   * "some key" = "some value"
   * ->
   * MyEnum["some key"] = "some value";
   */
  processStringLiteralEnumMember(
    enumName,
    nameStringCode,
    variableName,
  ) {
    if (variableName != null) {
      this.tokens.appendCode(`const ${variableName}`);
      // =
      this.tokens.copyToken();
      // value string
      this.tokens.copyToken();
      this.tokens.appendCode(`; ${enumName}[${nameStringCode}] = ${variableName};`);
    } else {
      this.tokens.appendCode(`${enumName}[${nameStringCode}]`);
      // =
      this.tokens.copyToken();
      // value string
      this.tokens.copyToken();
      this.tokens.appendCode(";");
    }
  }

  /**
   * Handle an enum member initialized with an expression on the right-hand side (other than a
   * string literal). In these cases, we should transform the expression and emit code that sets up
   * a reverse mapping.
   *
   * The TypeScript implementation of this operation distinguishes between expressions that can be
   * "constant folded" at compile time (i.e. consist of number literals and simple math operations
   * on those numbers) and ones that are dynamic. For constant expressions, it emits the resolved
   * numeric value, and auto-incrementing is only allowed in that case. Evaluating expressions at
   * compile time would add significant complexity to Sucrase, so Sucrase instead leaves the
   * expression as-is, and will later emit something like `MyEnum["previousKey"] + 1` to implement
   * auto-incrementing.
   *
   * This is called after deleting the key token, when the token processor is at the equals sign.
   *
   * Example 1:
   * someKey = 1 + 1
   * ->
   * const someKey = 1 + 1; MyEnum[MyEnum["someKey"] = someKey] = "someKey";
   *
   * Example 2:
   * "some key" = 1 + 1
   * ->
   * MyEnum[MyEnum["some key"] = 1 + 1] = "some key";
   */
  processExplicitValueEnumMember(
    enumName,
    nameStringCode,
    variableName,
  ) {
    const rhsEndIndex = this.tokens.currentToken().rhsEndIndex;
    if (rhsEndIndex == null) {
      throw new Error("Expected rhsEndIndex on enum assign.");
    }

    if (variableName != null) {
      this.tokens.appendCode(`const ${variableName}`);
      this.tokens.copyToken();
      while (this.tokens.currentIndex() < rhsEndIndex) {
        this.rootTransformer.processToken();
      }
      this.tokens.appendCode(
        `; ${enumName}[${enumName}[${nameStringCode}] = ${variableName}] = ${nameStringCode};`,
      );
    } else {
      this.tokens.appendCode(`${enumName}[${enumName}[${nameStringCode}]`);
      this.tokens.copyToken();
      while (this.tokens.currentIndex() < rhsEndIndex) {
        this.rootTransformer.processToken();
      }
      this.tokens.appendCode(`] = ${nameStringCode};`);
    }
  }

  /**
   * Handle an enum member with no right-hand side expression. In this case, the value is the
   * previous value plus 1, or 0 if there was no previous value. We should also always emit a
   * reverse mapping.
   *
   * Example 1:
   * someKey2
   * ->
   * const someKey2 = someKey1 + 1; MyEnum[MyEnum["someKey2"] = someKey2] = "someKey2";
   *
   * Example 2:
   * "some key 2"
   * ->
   * MyEnum[MyEnum["some key 2"] = someKey1 + 1] = "some key 2";
   */
  processImplicitValueEnumMember(
    enumName,
    nameStringCode,
    variableName,
    previousValueCode,
  ) {
    let valueCode = previousValueCode != null ? `${previousValueCode} + 1` : "0";
    if (variableName != null) {
      this.tokens.appendCode(`const ${variableName} = ${valueCode}; `);
      valueCode = variableName;
    }
    this.tokens.appendCode(
      `${enumName}[${enumName}[${nameStringCode}] = ${valueCode}] = ${nameStringCode};`,
    );
  }
}

class RootTransformer {
   __init() {this.transformers = [];}
  
  
   __init2() {this.generatedVariables = [];}
  
  
  
  

  constructor(
    sucraseContext,
    transforms,
    enableLegacyBabel5ModuleInterop,
    options,
  ) {RootTransformer.prototype.__init.call(this);RootTransformer.prototype.__init2.call(this);
    this.nameManager = sucraseContext.nameManager;
    this.helperManager = sucraseContext.helperManager;
    const {tokenProcessor, importProcessor} = sucraseContext;
    this.tokens = tokenProcessor;
    this.isImportsTransformEnabled = transforms.includes("imports");
    this.isReactHotLoaderTransformEnabled = transforms.includes("react-hot-loader");
    this.disableESTransforms = Boolean(options.disableESTransforms);

    if (!options.disableESTransforms) {
      this.transformers.push(
        new OptionalChainingNullishTransformer(tokenProcessor, this.nameManager),
      );
      this.transformers.push(new NumericSeparatorTransformer(tokenProcessor));
      this.transformers.push(new OptionalCatchBindingTransformer(tokenProcessor, this.nameManager));
    }

    if (transforms.includes("jsx")) {
      if (options.jsxRuntime !== "preserve") {
        this.transformers.push(
          new JSXTransformer(this, tokenProcessor, importProcessor, this.nameManager, options),
        );
      }
      this.transformers.push(
        new ReactDisplayNameTransformer(this, tokenProcessor, importProcessor, options),
      );
    }

    let reactHotLoaderTransformer = null;
    if (transforms.includes("react-hot-loader")) {
      if (!options.filePath) {
        throw new Error("filePath is required when using the react-hot-loader transform.");
      }
      reactHotLoaderTransformer = new ReactHotLoaderTransformer(tokenProcessor, options.filePath);
      this.transformers.push(reactHotLoaderTransformer);
    }

    // Note that we always want to enable the imports transformer, even when the import transform
    // itself isn't enabled, since we need to do type-only import pruning for both Flow and
    // TypeScript.
    if (transforms.includes("imports")) {
      if (importProcessor === null) {
        throw new Error("Expected non-null importProcessor with imports transform enabled.");
      }
      this.transformers.push(
        new CJSImportTransformer(
          this,
          tokenProcessor,
          importProcessor,
          this.nameManager,
          this.helperManager,
          reactHotLoaderTransformer,
          enableLegacyBabel5ModuleInterop,
          Boolean(options.enableLegacyTypeScriptModuleInterop),
          transforms.includes("typescript"),
          Boolean(options.preserveDynamicImport),
        ),
      );
    } else {
      this.transformers.push(
        new ESMImportTransformer(
          tokenProcessor,
          this.nameManager,
          this.helperManager,
          reactHotLoaderTransformer,
          transforms.includes("typescript"),
          options,
        ),
      );
    }

    if (transforms.includes("flow")) {
      this.transformers.push(
        new FlowTransformer(this, tokenProcessor, transforms.includes("imports")),
      );
    }
    if (transforms.includes("typescript")) {
      this.transformers.push(
        new TypeScriptTransformer(this, tokenProcessor, transforms.includes("imports")),
      );
    }
    if (transforms.includes("jest")) {
      this.transformers.push(
        new JestHoistTransformer(this, tokenProcessor, this.nameManager, importProcessor),
      );
    }
  }

  transform() {
    this.tokens.reset();
    this.processBalancedCode();
    const shouldAddUseStrict = this.isImportsTransformEnabled;
    // "use strict" always needs to be first, so override the normal transformer order.
    let prefix = shouldAddUseStrict ? '"use strict";' : "";
    for (const transformer of this.transformers) {
      prefix += transformer.getPrefixCode();
    }
    prefix += this.helperManager.emitHelpers();
    prefix += this.generatedVariables.map((v) => ` var ${v};`).join("");
    for (const transformer of this.transformers) {
      prefix += transformer.getHoistedCode();
    }
    let suffix = "";
    for (const transformer of this.transformers) {
      suffix += transformer.getSuffixCode();
    }
    let code = this.tokens.finish();
    if (code.startsWith("#!")) {
      let newlineIndex = code.indexOf("\n");
      if (newlineIndex === -1) {
        newlineIndex = code.length;
        code += "\n";
      }
      return code.slice(0, newlineIndex + 1) + prefix + code.slice(newlineIndex + 1) + suffix;
    } else {
      return prefix + this.tokens.finish() + suffix;
    }
  }

  processBalancedCode() {
    let braceDepth = 0;
    let parenDepth = 0;
    while (!this.tokens.isAtEnd()) {
      if (this.tokens.matches1(TokenType.braceL) || this.tokens.matches1(TokenType.dollarBraceL)) {
        braceDepth++;
      } else if (this.tokens.matches1(TokenType.braceR)) {
        if (braceDepth === 0) {
          return;
        }
        braceDepth--;
      }
      if (this.tokens.matches1(TokenType.parenL)) {
        parenDepth++;
      } else if (this.tokens.matches1(TokenType.parenR)) {
        if (parenDepth === 0) {
          return;
        }
        parenDepth--;
      }
      this.processToken();
    }
  }

  processToken() {
    if (this.tokens.matches1(TokenType._class)) {
      this.processClass();
      return;
    }
    for (const transformer of this.transformers) {
      const wasProcessed = transformer.process();
      if (wasProcessed) {
        return;
      }
    }
    this.tokens.copyToken();
  }

  /**
   * Skip past a class with a name and return that name.
   */
  processNamedClass() {
    if (!this.tokens.matches2(TokenType._class, TokenType.name)) {
      throw new Error("Expected identifier for exported class name.");
    }
    const name = this.tokens.identifierNameAtIndex(this.tokens.currentIndex() + 1);
    this.processClass();
    return name;
  }

  processClass() {
    const classInfo = getClassInfo(this, this.tokens, this.nameManager, this.disableESTransforms);

    // Both static and instance initializers need a class name to use to invoke the initializer, so
    // assign to one if necessary.
    const needsCommaExpression =
      (classInfo.headerInfo.isExpression || !classInfo.headerInfo.className) &&
      classInfo.staticInitializerNames.length + classInfo.instanceInitializerNames.length > 0;

    let className = classInfo.headerInfo.className;
    if (needsCommaExpression) {
      className = this.nameManager.claimFreeName("_class");
      this.generatedVariables.push(className);
      this.tokens.appendCode(` (${className} =`);
    }

    const classToken = this.tokens.currentToken();
    const contextId = classToken.contextId;
    if (contextId == null) {
      throw new Error("Expected class to have a context ID.");
    }
    this.tokens.copyExpectedToken(TokenType._class);
    while (!this.tokens.matchesContextIdAndLabel(TokenType.braceL, contextId)) {
      this.processToken();
    }

    this.processClassBody(classInfo, className);

    const staticInitializerStatements = classInfo.staticInitializerNames.map(
      (name) => `${className}.${name}()`,
    );
    if (needsCommaExpression) {
      this.tokens.appendCode(
        `, ${staticInitializerStatements.map((s) => `${s}, `).join("")}${className})`,
      );
    } else if (classInfo.staticInitializerNames.length > 0) {
      this.tokens.appendCode(` ${staticInitializerStatements.map((s) => `${s};`).join(" ")}`);
    }
  }

  /**
   * We want to just handle class fields in all contexts, since TypeScript supports them. Later,
   * when some JS implementations support class fields, this should be made optional.
   */
  processClassBody(classInfo, className) {
    const {
      headerInfo,
      constructorInsertPos,
      constructorInitializerStatements,
      fields,
      instanceInitializerNames,
      rangesToRemove,
    } = classInfo;
    let fieldIndex = 0;
    let rangeToRemoveIndex = 0;
    const classContextId = this.tokens.currentToken().contextId;
    if (classContextId == null) {
      throw new Error("Expected non-null context ID on class.");
    }
    this.tokens.copyExpectedToken(TokenType.braceL);
    if (this.isReactHotLoaderTransformEnabled) {
      this.tokens.appendCode(
        "__reactstandin__regenerateByEval(key, code) {this[key] = eval(code);}",
      );
    }

    const needsConstructorInit =
      constructorInitializerStatements.length + instanceInitializerNames.length > 0;

    if (constructorInsertPos === null && needsConstructorInit) {
      const constructorInitializersCode = this.makeConstructorInitCode(
        constructorInitializerStatements,
        instanceInitializerNames,
        className,
      );
      if (headerInfo.hasSuperclass) {
        const argsName = this.nameManager.claimFreeName("args");
        this.tokens.appendCode(
          `constructor(...${argsName}) { super(...${argsName}); ${constructorInitializersCode}; }`,
        );
      } else {
        this.tokens.appendCode(`constructor() { ${constructorInitializersCode}; }`);
      }
    }

    while (!this.tokens.matchesContextIdAndLabel(TokenType.braceR, classContextId)) {
      if (fieldIndex < fields.length && this.tokens.currentIndex() === fields[fieldIndex].start) {
        let needsCloseBrace = false;
        if (this.tokens.matches1(TokenType.bracketL)) {
          this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this`);
        } else if (this.tokens.matches1(TokenType.string) || this.tokens.matches1(TokenType.num)) {
          this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this[`);
          needsCloseBrace = true;
        } else {
          this.tokens.copyTokenWithPrefix(`${fields[fieldIndex].initializerName}() {this.`);
        }
        while (this.tokens.currentIndex() < fields[fieldIndex].end) {
          if (needsCloseBrace && this.tokens.currentIndex() === fields[fieldIndex].equalsIndex) {
            this.tokens.appendCode("]");
          }
          this.processToken();
        }
        this.tokens.appendCode("}");
        fieldIndex++;
      } else if (
        rangeToRemoveIndex < rangesToRemove.length &&
        this.tokens.currentIndex() >= rangesToRemove[rangeToRemoveIndex].start
      ) {
        if (this.tokens.currentIndex() < rangesToRemove[rangeToRemoveIndex].end) {
          this.tokens.removeInitialToken();
        }
        while (this.tokens.currentIndex() < rangesToRemove[rangeToRemoveIndex].end) {
          this.tokens.removeToken();
        }
        rangeToRemoveIndex++;
      } else if (this.tokens.currentIndex() === constructorInsertPos) {
        this.tokens.copyToken();
        if (needsConstructorInit) {
          this.tokens.appendCode(
            `;${this.makeConstructorInitCode(
              constructorInitializerStatements,
              instanceInitializerNames,
              className,
            )};`,
          );
        }
        this.processToken();
      } else {
        this.processToken();
      }
    }
    this.tokens.copyExpectedToken(TokenType.braceR);
  }

  makeConstructorInitCode(
    constructorInitializerStatements,
    instanceInitializerNames,
    className,
  ) {
    return [
      ...constructorInitializerStatements,
      ...instanceInitializerNames.map((name) => `${className}.prototype.${name}.call(this)`),
    ].join(";");
  }

  /**
   * Normally it's ok to simply remove type tokens, but we need to be more careful when dealing with
   * arrow function return types since they can confuse the parser. In that case, we want to move
   * the close-paren to the same line as the arrow.
   *
   * See https://github.com/alangpierce/sucrase/issues/391 for more details.
   */
  processPossibleArrowParamEnd() {
    if (this.tokens.matches2(TokenType.parenR, TokenType.colon) && this.tokens.tokenAtRelativeIndex(1).isType) {
      let nextNonTypeIndex = this.tokens.currentIndex() + 1;
      // Look ahead to see if this is an arrow function or something else.
      while (this.tokens.tokens[nextNonTypeIndex].isType) {
        nextNonTypeIndex++;
      }
      if (this.tokens.matches1AtIndex(nextNonTypeIndex, TokenType.arrow)) {
        this.tokens.removeInitialToken();
        while (this.tokens.currentIndex() < nextNonTypeIndex) {
          this.tokens.removeToken();
        }
        this.tokens.replaceTokenTrimmingLeftWhitespace(") =>");
        return true;
      }
    }
    return false;
  }

  /**
   * An async arrow function might be of the form:
   *
   * async <
   *   T
   * >() => {}
   *
   * in which case, removing the type parameters will cause a syntax error. Detect this case and
   * move the open-paren earlier.
   */
  processPossibleAsyncArrowWithTypeParams() {
    if (
      !this.tokens.matchesContextual(ContextualKeyword._async) &&
      !this.tokens.matches1(TokenType._async)
    ) {
      return false;
    }
    const nextToken = this.tokens.tokenAtRelativeIndex(1);
    if (nextToken.type !== TokenType.lessThan || !nextToken.isType) {
      return false;
    }

    let nextNonTypeIndex = this.tokens.currentIndex() + 1;
    // Look ahead to see if this is an arrow function or something else.
    while (this.tokens.tokens[nextNonTypeIndex].isType) {
      nextNonTypeIndex++;
    }
    if (this.tokens.matches1AtIndex(nextNonTypeIndex, TokenType.parenL)) {
      this.tokens.replaceToken("async (");
      this.tokens.removeInitialToken();
      while (this.tokens.currentIndex() < nextNonTypeIndex) {
        this.tokens.removeToken();
      }
      this.tokens.removeToken();
      // We ate a ( token, so we need to process the tokens in between and then the ) token so that
      // we remain balanced.
      this.processBalancedCode();
      this.processToken();
      return true;
    }
    return false;
  }

  processPossibleTypeRange() {
    if (this.tokens.currentToken().isType) {
      this.tokens.removeInitialToken();
      while (this.tokens.currentToken().isType) {
        this.tokens.removeToken();
      }
      return true;
    }
    return false;
  }
}

var build = {};

(function (exports) {
	exports.__esModule = true;
	exports.LinesAndColumns = void 0;
	var LF = '\n';
	var CR = '\r';
	var LinesAndColumns = /** @class */ (function () {
	    function LinesAndColumns(string) {
	        this.string = string;
	        var offsets = [0];
	        for (var offset = 0; offset < string.length;) {
	            switch (string[offset]) {
	                case LF:
	                    offset += LF.length;
	                    offsets.push(offset);
	                    break;
	                case CR:
	                    offset += CR.length;
	                    if (string[offset] === LF) {
	                        offset += LF.length;
	                    }
	                    offsets.push(offset);
	                    break;
	                default:
	                    offset++;
	                    break;
	            }
	        }
	        this.offsets = offsets;
	    }
	    LinesAndColumns.prototype.locationForIndex = function (index) {
	        if (index < 0 || index > this.string.length) {
	            return null;
	        }
	        var line = 0;
	        var offsets = this.offsets;
	        while (offsets[line + 1] <= index) {
	            line++;
	        }
	        var column = index - offsets[line];
	        return { line: line, column: column };
	    };
	    LinesAndColumns.prototype.indexForLocation = function (location) {
	        var line = location.line, column = location.column;
	        if (line < 0 || line >= this.offsets.length) {
	            return null;
	        }
	        if (column < 0 || column > this.lengthOfLine(line)) {
	            return null;
	        }
	        return this.offsets[line] + column;
	    };
	    LinesAndColumns.prototype.lengthOfLine = function (line) {
	        var offset = this.offsets[line];
	        var nextOffset = line === this.offsets.length - 1
	            ? this.string.length
	            : this.offsets[line + 1];
	        return nextOffset - offset;
	    };
	    return LinesAndColumns;
	}());
	exports.LinesAndColumns = LinesAndColumns;
	exports["default"] = LinesAndColumns;
} (build));

const LinesAndColumns = /*@__PURE__*/getDefaultExportFromCjs(build);

function formatTokens(code, tokens) {
  if (tokens.length === 0) {
    return "";
  }

  const tokenKeys = Object.keys(tokens[0]).filter(
    (k) => k !== "type" && k !== "value" && k !== "start" && k !== "end" && k !== "loc",
  );
  const typeKeys = Object.keys(tokens[0].type).filter((k) => k !== "label" && k !== "keyword");

  const headings = ["Location", "Label", "Raw", ...tokenKeys, ...typeKeys];

  const lines = new LinesAndColumns(code);
  const rows = [headings, ...tokens.map(getTokenComponents)];
  const padding = headings.map(() => 0);
  for (const components of rows) {
    for (let i = 0; i < components.length; i++) {
      padding[i] = Math.max(padding[i], components[i].length);
    }
  }
  return rows
    .map((components) => components.map((component, i) => component.padEnd(padding[i])).join(" "))
    .join("\n");

  function getTokenComponents(token) {
    const raw = code.slice(token.start, token.end);
    return [
      formatRange(token.start, token.end),
      formatTokenType(token.type),
      truncate(String(raw), 14),
      // @ts-ignore: Intentional dynamic access by key.
      ...tokenKeys.map((key) => formatValue(token[key], key)),
      // @ts-ignore: Intentional dynamic access by key.
      ...typeKeys.map((key) => formatValue(token.type[key], key)),
    ];
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function formatValue(value, key) {
    if (value === true) {
      return key;
    } else if (value === false || value === null) {
      return "";
    } else {
      return String(value);
    }
  }

  function formatRange(start, end) {
    return `${formatPos(start)}-${formatPos(end)}`;
  }

  function formatPos(pos) {
    const location = lines.locationForIndex(pos);
    if (!location) {
      return "Unknown";
    } else {
      return `${location.line + 1}:${location.column + 1}`;
    }
  }
}

function truncate(s, length) {
  if (s.length > length) {
    return `${s.slice(0, length - 3)}...`;
  } else {
    return s;
  }
}

/**
 * Special case code to scan for imported names in ESM TypeScript. We need to do this so we can
 * properly get globals so we can compute shadowed globals.
 *
 * This is similar to logic in CJSImportProcessor, but trimmed down to avoid logic with CJS
 * replacement and flow type imports.
 */
function getTSImportedNames(tokens) {
  const importedNames = new Set();
  for (let i = 0; i < tokens.tokens.length; i++) {
    if (
      tokens.matches1AtIndex(i, TokenType._import) &&
      !tokens.matches3AtIndex(i, TokenType._import, TokenType.name, TokenType.eq)
    ) {
      collectNamesForImport(tokens, i, importedNames);
    }
  }
  return importedNames;
}

function collectNamesForImport(
  tokens,
  index,
  importedNames,
) {
  index++;

  if (tokens.matches1AtIndex(index, TokenType.parenL)) {
    // Dynamic import, so nothing to do
    return;
  }

  if (tokens.matches1AtIndex(index, TokenType.name)) {
    importedNames.add(tokens.identifierNameAtIndex(index));
    index++;
    if (tokens.matches1AtIndex(index, TokenType.comma)) {
      index++;
    }
  }

  if (tokens.matches1AtIndex(index, TokenType.star)) {
    // * as
    index += 2;
    importedNames.add(tokens.identifierNameAtIndex(index));
    index++;
  }

  if (tokens.matches1AtIndex(index, TokenType.braceL)) {
    index++;
    collectNamesForNamedImport(tokens, index, importedNames);
  }
}

function collectNamesForNamedImport(
  tokens,
  index,
  importedNames,
) {
  while (true) {
    if (tokens.matches1AtIndex(index, TokenType.braceR)) {
      return;
    }

    const specifierInfo = getImportExportSpecifierInfo(tokens, index);
    index = specifierInfo.endIndex;
    if (!specifierInfo.isType) {
      importedNames.add(specifierInfo.rightName);
    }

    if (tokens.matches2AtIndex(index, TokenType.comma, TokenType.braceR)) {
      return;
    } else if (tokens.matches1AtIndex(index, TokenType.braceR)) {
      return;
    } else if (tokens.matches1AtIndex(index, TokenType.comma)) {
      index++;
    } else {
      throw new Error(`Unexpected token: ${JSON.stringify(tokens.tokens[index])}`);
    }
  }
}

function getVersion() {
  /* istanbul ignore next */
  return "3.31.0";
}

function transform(code, options) {
  validateOptions(options);
  try {
    const sucraseContext = getSucraseContext(code, options);
    const transformer = new RootTransformer(
      sucraseContext,
      options.transforms,
      Boolean(options.enableLegacyBabel5ModuleInterop),
      options,
    );
    let result = {code: transformer.transform()};
    if (options.sourceMapOptions) {
      if (!options.filePath) {
        throw new Error("filePath must be specified when generating a source map.");
      }
      result = {
        ...result,
        sourceMap: computeSourceMap(result.code, options.filePath, options.sourceMapOptions),
      };
    }
    return result;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
  } catch (e) {
    if (options.filePath) {
      e.message = `Error transforming ${options.filePath}: ${e.message}`;
    }
    throw e;
  }
}

/**
 * Return a string representation of the sucrase tokens, mostly useful for
 * diagnostic purposes.
 */
function getFormattedTokens(code, options) {
  const tokens = getSucraseContext(code, options).tokenProcessor.tokens;
  return formatTokens(code, tokens);
}

/**
 * Call into the parser/tokenizer and do some further preprocessing:
 * - Come up with a set of used names so that we can assign new names.
 * - Preprocess all import/export statements so we know which globals we are interested in.
 * - Compute situations where any of those globals are shadowed.
 *
 * In the future, some of these preprocessing steps can be skipped based on what actual work is
 * being done.
 */
function getSucraseContext(code, options) {
  const isJSXEnabled = options.transforms.includes("jsx");
  const isTypeScriptEnabled = options.transforms.includes("typescript");
  const isFlowEnabled = options.transforms.includes("flow");
  const disableESTransforms = options.disableESTransforms === true;
  const file = parse$2(code, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled);
  const tokens = file.tokens;
  const scopes = file.scopes;

  const nameManager = new NameManager(code, tokens);
  const helperManager = new HelperManager(nameManager);
  const tokenProcessor = new TokenProcessor(
    code,
    tokens,
    isFlowEnabled,
    disableESTransforms,
    helperManager,
  );
  const enableLegacyTypeScriptModuleInterop = Boolean(options.enableLegacyTypeScriptModuleInterop);

  let importProcessor = null;
  if (options.transforms.includes("imports")) {
    importProcessor = new CJSImportProcessor(
      nameManager,
      tokenProcessor,
      enableLegacyTypeScriptModuleInterop,
      options,
      options.transforms.includes("typescript"),
      helperManager,
    );
    importProcessor.preprocessTokens();
    // We need to mark shadowed globals after processing imports so we know that the globals are,
    // but before type-only import pruning, since that relies on shadowing information.
    identifyShadowedGlobals(tokenProcessor, scopes, importProcessor.getGlobalNames());
    if (options.transforms.includes("typescript")) {
      importProcessor.pruneTypeOnlyImports();
    }
  } else if (options.transforms.includes("typescript")) {
    identifyShadowedGlobals(tokenProcessor, scopes, getTSImportedNames(tokenProcessor));
  }
  return {tokenProcessor, scopes, nameManager, importProcessor, helperManager};
}

const esm = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  getFormattedTokens,
  getVersion,
  transform
}, Symbol.toStringTag, { value: 'Module' }));

const require$$1 = /*@__PURE__*/getAugmentedNamespace(esm);

var hasRequiredLoadConfig;

function requireLoadConfig () {
	if (hasRequiredLoadConfig) return loadConfig;
	hasRequiredLoadConfig = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "loadConfig", {
		    enumerable: true,
		    get: ()=>loadConfig
		});
		const _jiti = /*#__PURE__*/ _interopRequireDefault(requireLib$1());
		const _sucrase = require$$1;
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		let jiti = null;
		function lazyJiti() {
		    return jiti !== null && jiti !== void 0 ? jiti : jiti = (0, _jiti.default)(__filename, {
		        interopDefault: true,
		        transform: (opts)=>{
		            return (0, _sucrase.transform)(opts.source, {
		                transforms: [
		                    "typescript",
		                    "imports"
		                ]
		            });
		        }
		    });
		}
		function loadConfig(path) {
		    let config = function() {
		        try {
		            return path ? commonjsRequire(path) : {};
		        } catch  {
		            return lazyJiti()(path);
		        }
		    }();
		    var _config_default;
		    return (_config_default = config.default) !== null && _config_default !== void 0 ? _config_default : config;
		}
} (loadConfig));
	return loadConfig;
}

var getModuleDependencies = {};

var hasRequiredGetModuleDependencies;

function requireGetModuleDependencies () {
	if (hasRequiredGetModuleDependencies) return getModuleDependencies;
	hasRequiredGetModuleDependencies = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>getModuleDependencies
		});
		const _fs = /*#__PURE__*/ _interopRequireDefault(require$$3);
		const _path = /*#__PURE__*/ _interopRequireDefault(require$$3);
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		let jsExtensions = [
		    ".js",
		    ".cjs",
		    ".mjs"
		];
		// Given the current file `a.ts`, we want to make sure that when importing `b` that we resolve
		// `b.ts` before `b.js`
		//
		// E.g.:
		//
		// a.ts
		//   b // .ts
		//   c // .ts
		// a.js
		//   b // .js or .ts
		let jsResolutionOrder = [
		    "",
		    ".js",
		    ".cjs",
		    ".mjs",
		    ".ts",
		    ".cts",
		    ".mts",
		    ".jsx",
		    ".tsx"
		];
		let tsResolutionOrder = [
		    "",
		    ".ts",
		    ".cts",
		    ".mts",
		    ".tsx",
		    ".js",
		    ".cjs",
		    ".mjs",
		    ".jsx"
		];
		function resolveWithExtension(file, extensions) {
		    // Try to find `./a.ts`, `./a.ts`, ... from `./a`
		    for (let ext of extensions){
		        let full = `${file}${ext}`;
		        if (_fs.default.existsSync(full) && _fs.default.statSync(full).isFile()) {
		            return full;
		        }
		    }
		    // Try to find `./a/index.js` from `./a`
		    for (let ext1 of extensions){
		        let full1 = `${file}/index${ext1}`;
		        if (_fs.default.existsSync(full1)) {
		            return full1;
		        }
		    }
		    return null;
		}
		function* _getModuleDependencies(filename, base, seen, ext = _path.default.extname(filename)) {
		    // Try to find the file
		    let absoluteFile = resolveWithExtension(_path.default.resolve(base, filename), jsExtensions.includes(ext) ? jsResolutionOrder : tsResolutionOrder);
		    if (absoluteFile === null) return; // File doesn't exist
		    // Prevent infinite loops when there are circular dependencies
		    if (seen.has(absoluteFile)) return; // Already seen
		    seen.add(absoluteFile);
		    // Mark the file as a dependency
		    yield absoluteFile;
		    // Resolve new base for new imports/requires
		    base = _path.default.dirname(absoluteFile);
		    ext = _path.default.extname(absoluteFile);
		    let contents = _fs.default.readFileSync(absoluteFile, "utf-8");
		    // Find imports/requires
		    for (let match of [
		        ...contents.matchAll(/import[\s\S]*?['"](.{3,}?)['"]/gi),
		        ...contents.matchAll(/import[\s\S]*from[\s\S]*?['"](.{3,}?)['"]/gi),
		        ...contents.matchAll(/require\(['"`](.+)['"`]\)/gi)
		    ]){
		        // Bail out if it's not a relative file
		        if (!match[1].startsWith(".")) continue;
		        yield* _getModuleDependencies(match[1], base, seen, ext);
		    }
		}
		function getModuleDependencies(absoluteFilePath) {
		    if (absoluteFilePath === null) return new Set();
		    return new Set(_getModuleDependencies(absoluteFilePath, _path.default.dirname(absoluteFilePath), new Set()));
		}
} (getModuleDependencies));
	return getModuleDependencies;
}

var hasRequiredSetupTrackingContext;

function requireSetupTrackingContext () {
	if (hasRequiredSetupTrackingContext) return setupTrackingContext;
	hasRequiredSetupTrackingContext = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, // DISABLE_TOUCH = TRUE
		// Retrieve an existing context from cache if possible (since contexts are unique per
		// source path), or set up a new one (including setting up watchers and registering
		// plugins) then return it
		"default", {
		    enumerable: true,
		    get: ()=>setupTrackingContext
		});
		const _fs = /*#__PURE__*/ _interopRequireDefault(require$$3);
		const _quickLru = /*#__PURE__*/ _interopRequireDefault(requireQuickLru());
		const _hashConfig = /*#__PURE__*/ _interopRequireDefault(requireHashConfig());
		const _resolveConfig = /*#__PURE__*/ _interopRequireDefault(requireResolveConfig());
		const _resolveConfigPath = /*#__PURE__*/ _interopRequireDefault(requireResolveConfigPath());
		const _setupContextUtils = requireSetupContextUtils();
		const _parseDependency = /*#__PURE__*/ _interopRequireDefault(requireParseDependency());
		const _validateConfigJs = requireValidateConfig();
		const _contentJs = requireContent();
		const _loadConfig = requireLoadConfig();
		const _getModuleDependencies = /*#__PURE__*/ _interopRequireDefault(requireGetModuleDependencies());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		let configPathCache = new _quickLru.default({
		    maxSize: 100
		});
		let candidateFilesCache = new WeakMap();
		function getCandidateFiles(context, tailwindConfig) {
		    if (candidateFilesCache.has(context)) {
		        return candidateFilesCache.get(context);
		    }
		    let candidateFiles = (0, _contentJs.parseCandidateFiles)(context, tailwindConfig);
		    return candidateFilesCache.set(context, candidateFiles).get(context);
		}
		// Get the config object based on a path
		function getTailwindConfig(configOrPath) {
		    let userConfigPath = (0, _resolveConfigPath.default)(configOrPath);
		    if (userConfigPath !== null) {
		        let [prevConfig, prevConfigHash, prevDeps, prevModified] = configPathCache.get(userConfigPath) || [];
		        let newDeps = (0, _getModuleDependencies.default)(userConfigPath);
		        let modified = false;
		        let newModified = new Map();
		        for (let file of newDeps){
		            let time = _fs.default.statSync(file).mtimeMs;
		            newModified.set(file, time);
		            if (!prevModified || !prevModified.has(file) || time > prevModified.get(file)) {
		                modified = true;
		            }
		        }
		        // It hasn't changed (based on timestamps)
		        if (!modified) {
		            return [
		                prevConfig,
		                userConfigPath,
		                prevConfigHash,
		                prevDeps
		            ];
		        }
		        // It has changed (based on timestamps), or first run
		        for (let file1 of newDeps){
		            delete require.cache[file1];
		        }
		        let newConfig = (0, _validateConfigJs.validateConfig)((0, _resolveConfig.default)((0, _loadConfig.loadConfig)(userConfigPath)));
		        let newHash = (0, _hashConfig.default)(newConfig);
		        configPathCache.set(userConfigPath, [
		            newConfig,
		            newHash,
		            newDeps,
		            newModified
		        ]);
		        return [
		            newConfig,
		            userConfigPath,
		            newHash,
		            newDeps
		        ];
		    }
		    // It's a plain object, not a path
		    let newConfig1 = (0, _resolveConfig.default)(configOrPath.config === undefined ? configOrPath : configOrPath.config);
		    newConfig1 = (0, _validateConfigJs.validateConfig)(newConfig1);
		    return [
		        newConfig1,
		        null,
		        (0, _hashConfig.default)(newConfig1),
		        []
		    ];
		}
		function setupTrackingContext(configOrPath) {
		    return ({ tailwindDirectives , registerDependency  })=>{
		        return (root, result)=>{
		            let [tailwindConfig, userConfigPath, tailwindConfigHash, configDependencies] = getTailwindConfig(configOrPath);
		            let contextDependencies = new Set(configDependencies);
		            // If there are no @tailwind or @apply rules, we don't consider this CSS
		            // file or its dependencies to be dependencies of the context. Can reuse
		            // the context even if they change. We may want to think about `@layer`
		            // being part of this trigger too, but it's tough because it's impossible
		            // for a layer in one file to end up in the actual @tailwind rule in
		            // another file since independent sources are effectively isolated.
		            if (tailwindDirectives.size > 0) {
		                // Add current css file as a context dependencies.
		                contextDependencies.add(result.opts.from);
		                // Add all css @import dependencies as context dependencies.
		                for (let message of result.messages){
		                    if (message.type === "dependency") {
		                        contextDependencies.add(message.file);
		                    }
		                }
		            }
		            let [context, , mTimesToCommit] = (0, _setupContextUtils.getContext)(root, result, tailwindConfig, userConfigPath, tailwindConfigHash, contextDependencies);
		            let fileModifiedMap = (0, _setupContextUtils.getFileModifiedMap)(context);
		            let candidateFiles = getCandidateFiles(context, tailwindConfig);
		            // If there are no @tailwind or @apply rules, we don't consider this CSS file or it's
		            // dependencies to be dependencies of the context. Can reuse the context even if they change.
		            // We may want to think about `@layer` being part of this trigger too, but it's tough
		            // because it's impossible for a layer in one file to end up in the actual @tailwind rule
		            // in another file since independent sources are effectively isolated.
		            if (tailwindDirectives.size > 0) {
		                // Add template paths as postcss dependencies.
		                for (let contentPath of candidateFiles){
		                    for (let dependency of (0, _parseDependency.default)(contentPath)){
		                        registerDependency(dependency);
		                    }
		                }
		                let [changedContent, contentMTimesToCommit] = (0, _contentJs.resolvedChangedContent)(context, candidateFiles, fileModifiedMap);
		                for (let content of changedContent){
		                    context.changedContent.push(content);
		                }
		                // Add the mtimes of the content files to the commit list
		                // We can overwrite the existing values because unconditionally
		                // This is because:
		                // 1. Most of the files here won't be in the map yet
		                // 2. If they are that means it's a context dependency
		                // and we're reading this after the context. This means
		                // that the mtime we just read is strictly >= the context
		                // mtime. Unless the user / os is doing something weird
		                // in which the mtime would be going backwards. If that
		                // happens there's already going to be problems.
		                for (let [path, mtime] of contentMTimesToCommit.entries()){
		                    mTimesToCommit.set(path, mtime);
		                }
		            }
		            for (let file of configDependencies){
		                registerDependency({
		                    type: "dependency",
		                    file
		                });
		            }
		            // "commit" the new modified time for all context deps
		            // We do this here because we want content tracking to
		            // read the "old" mtime even when it's a context dependency.
		            for (let [path1, mtime1] of mTimesToCommit.entries()){
		                fileModifiedMap.set(path1, mtime1);
		            }
		            return context;
		        };
		    };
		}
} (setupTrackingContext));
	return setupTrackingContext;
}

var processTailwindFeatures = {};

var normalizeTailwindDirectives = {};

var hasRequiredNormalizeTailwindDirectives;

function requireNormalizeTailwindDirectives () {
	if (hasRequiredNormalizeTailwindDirectives) return normalizeTailwindDirectives;
	hasRequiredNormalizeTailwindDirectives = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>normalizeTailwindDirectives
		});
		const _log = /*#__PURE__*/ _interopRequireDefault(requireLog());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function normalizeTailwindDirectives(root) {
		    let tailwindDirectives = new Set();
		    let layerDirectives = new Set();
		    let applyDirectives = new Set();
		    root.walkAtRules((atRule)=>{
		        if (atRule.name === "apply") {
		            applyDirectives.add(atRule);
		        }
		        if (atRule.name === "import") {
		            if (atRule.params === '"tailwindcss/base"' || atRule.params === "'tailwindcss/base'") {
		                atRule.name = "tailwind";
		                atRule.params = "base";
		            } else if (atRule.params === '"tailwindcss/components"' || atRule.params === "'tailwindcss/components'") {
		                atRule.name = "tailwind";
		                atRule.params = "components";
		            } else if (atRule.params === '"tailwindcss/utilities"' || atRule.params === "'tailwindcss/utilities'") {
		                atRule.name = "tailwind";
		                atRule.params = "utilities";
		            } else if (atRule.params === '"tailwindcss/screens"' || atRule.params === "'tailwindcss/screens'" || atRule.params === '"tailwindcss/variants"' || atRule.params === "'tailwindcss/variants'") {
		                atRule.name = "tailwind";
		                atRule.params = "variants";
		            }
		        }
		        if (atRule.name === "tailwind") {
		            if (atRule.params === "screens") {
		                atRule.params = "variants";
		            }
		            tailwindDirectives.add(atRule.params);
		        }
		        if ([
		            "layer",
		            "responsive",
		            "variants"
		        ].includes(atRule.name)) {
		            if ([
		                "responsive",
		                "variants"
		            ].includes(atRule.name)) {
		                _log.default.warn(`${atRule.name}-at-rule-deprecated`, [
		                    `The \`@${atRule.name}\` directive has been deprecated in Tailwind CSS v3.0.`,
		                    `Use \`@layer utilities\` or \`@layer components\` instead.`,
		                    "https://tailwindcss.com/docs/upgrade-guide#replace-variants-with-layer"
		                ]);
		            }
		            layerDirectives.add(atRule);
		        }
		    });
		    if (!tailwindDirectives.has("base") || !tailwindDirectives.has("components") || !tailwindDirectives.has("utilities")) {
		        for (let rule of layerDirectives){
		            if (rule.name === "layer" && [
		                "base",
		                "components",
		                "utilities"
		            ].includes(rule.params)) {
		                if (!tailwindDirectives.has(rule.params)) {
		                    throw rule.error(`\`@layer ${rule.params}\` is used but no matching \`@tailwind ${rule.params}\` directive is present.`);
		                }
		            } else if (rule.name === "responsive") {
		                if (!tailwindDirectives.has("utilities")) {
		                    throw rule.error("`@responsive` is used but `@tailwind utilities` is missing.");
		                }
		            } else if (rule.name === "variants") {
		                if (!tailwindDirectives.has("utilities")) {
		                    throw rule.error("`@variants` is used but `@tailwind utilities` is missing.");
		                }
		            }
		        }
		    }
		    return {
		        tailwindDirectives,
		        applyDirectives
		    };
		}
} (normalizeTailwindDirectives));
	return normalizeTailwindDirectives;
}

var expandTailwindAtRules = {};

var cloneNodes = {};

var hasRequiredCloneNodes;

function requireCloneNodes () {
	if (hasRequiredCloneNodes) return cloneNodes;
	hasRequiredCloneNodes = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>cloneNodes
		});
		function cloneNodes(nodes, source = undefined, raws = undefined) {
		    return nodes.map((node)=>{
		        var _node_raws_tailwind;
		        let cloned = node.clone();
		        // We always want override the source map
		        // except when explicitly told not to
		        let shouldOverwriteSource = ((_node_raws_tailwind = node.raws.tailwind) === null || _node_raws_tailwind === void 0 ? void 0 : _node_raws_tailwind.preserveSource) !== true || !cloned.source;
		        if (source !== undefined && shouldOverwriteSource) {
		            cloned.source = source;
		            if ("walk" in cloned) {
		                cloned.walk((child)=>{
		                    child.source = source;
		                });
		            }
		        }
		        if (raws !== undefined) {
		            cloned.raws.tailwind = {
		                ...cloned.raws.tailwind,
		                ...raws
		            };
		        }
		        return cloned;
		    });
		}
} (cloneNodes));
	return cloneNodes;
}

var defaultExtractor = {};

var regex = {};

var hasRequiredRegex;

function requireRegex () {
	if (hasRequiredRegex) return regex;
	hasRequiredRegex = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    pattern: ()=>pattern,
		    withoutCapturing: ()=>withoutCapturing,
		    any: ()=>any,
		    optional: ()=>optional,
		    zeroOrMore: ()=>zeroOrMore,
		    nestedBrackets: ()=>nestedBrackets,
		    escape: ()=>escape
		});
		const REGEX_SPECIAL = /[\\^$.*+?()[\]{}|]/g;
		const REGEX_HAS_SPECIAL = RegExp(REGEX_SPECIAL.source);
		/**
		 * @param {string|RegExp|Array<string|RegExp>} source
		 */ function toSource(source) {
		    source = Array.isArray(source) ? source : [
		        source
		    ];
		    source = source.map((item)=>item instanceof RegExp ? item.source : item);
		    return source.join("");
		}
		function pattern(source) {
		    return new RegExp(toSource(source), "g");
		}
		function withoutCapturing(source) {
		    return new RegExp(`(?:${toSource(source)})`, "g");
		}
		function any(sources) {
		    return `(?:${sources.map(toSource).join("|")})`;
		}
		function optional(source) {
		    return `(?:${toSource(source)})?`;
		}
		function zeroOrMore(source) {
		    return `(?:${toSource(source)})*`;
		}
		function nestedBrackets(open, close, depth = 1) {
		    return withoutCapturing([
		        escape(open),
		        /[^\s]*/,
		        depth === 1 ? `[^${escape(open)}${escape(close)}\s]*` : any([
		            `[^${escape(open)}${escape(close)}\s]*`,
		            nestedBrackets(open, close, depth - 1)
		        ]),
		        /[^\s]*/,
		        escape(close)
		    ]);
		}
		function escape(string) {
		    return string && REGEX_HAS_SPECIAL.test(string) ? string.replace(REGEX_SPECIAL, "\\$&") : string || "";
		}
} (regex));
	return regex;
}

var hasRequiredDefaultExtractor;

function requireDefaultExtractor () {
	if (hasRequiredDefaultExtractor) return defaultExtractor;
	hasRequiredDefaultExtractor = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "defaultExtractor", {
		    enumerable: true,
		    get: ()=>defaultExtractor
		});
		const _featureFlags = requireFeatureFlags();
		const _regex = /*#__PURE__*/ _interopRequireWildcard(requireRegex());
		function _getRequireWildcardCache(nodeInterop) {
		    if (typeof WeakMap !== "function") return null;
		    var cacheBabelInterop = new WeakMap();
		    var cacheNodeInterop = new WeakMap();
		    return (_getRequireWildcardCache = function(nodeInterop) {
		        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
		    })(nodeInterop);
		}
		function _interopRequireWildcard(obj, nodeInterop) {
		    if (!nodeInterop && obj && obj.__esModule) {
		        return obj;
		    }
		    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
		        return {
		            default: obj
		        };
		    }
		    var cache = _getRequireWildcardCache(nodeInterop);
		    if (cache && cache.has(obj)) {
		        return cache.get(obj);
		    }
		    var newObj = {};
		    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		    for(var key in obj){
		        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
		            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
		            if (desc && (desc.get || desc.set)) {
		                Object.defineProperty(newObj, key, desc);
		            } else {
		                newObj[key] = obj[key];
		            }
		        }
		    }
		    newObj.default = obj;
		    if (cache) {
		        cache.set(obj, newObj);
		    }
		    return newObj;
		}
		function defaultExtractor(context) {
		    let patterns = Array.from(buildRegExps(context));
		    /**
		   * @param {string} content
		   */ return (content)=>{
		        /** @type {(string|string)[]} */ let results = [];
		        for (let pattern of patterns){
		            var _content_match;
		            results = [
		                ...results,
		                ...(_content_match = content.match(pattern)) !== null && _content_match !== void 0 ? _content_match : []
		            ];
		        }
		        return results.filter((v)=>v !== undefined).map(clipAtBalancedParens);
		    };
		}
		function* buildRegExps(context) {
		    let separator = context.tailwindConfig.separator;
		    let variantGroupingEnabled = (0, _featureFlags.flagEnabled)(context.tailwindConfig, "variantGrouping");
		    let prefix = context.tailwindConfig.prefix !== "" ? _regex.optional(_regex.pattern([
		        /-?/,
		        _regex.escape(context.tailwindConfig.prefix)
		    ])) : "";
		    let utility = _regex.any([
		        // Arbitrary properties (without square brackets)
		        /\[[^\s:'"`]+:[^\s\[\]]+\]/,
		        // Arbitrary properties with balanced square brackets
		        // This is a targeted fix to continue to allow theme()
		        // with square brackets to work in arbitrary properties
		        // while fixing a problem with the regex matching too much
		        /\[[^\s:'"`]+:[^\s]+?\[[^\s]+?\][^\s]+?\]/,
		        // Utilities
		        _regex.pattern([
		            // Utility Name / Group Name
		            /-?(?:\w+)/,
		            // Normal/Arbitrary values
		            _regex.optional(_regex.any([
		                _regex.pattern([
		                    // Arbitrary values
		                    /-(?:\w+-)*\[[^\s:]+\]/,
		                    // Not immediately followed by an `{[(`
		                    /(?![{([]])/,
		                    // optionally followed by an opacity modifier
		                    /(?:\/[^\s'"`\\><$]*)?/
		                ]),
		                _regex.pattern([
		                    // Arbitrary values
		                    /-(?:\w+-)*\[[^\s]+\]/,
		                    // Not immediately followed by an `{[(`
		                    /(?![{([]])/,
		                    // optionally followed by an opacity modifier
		                    /(?:\/[^\s'"`\\$]*)?/
		                ]),
		                // Normal values w/o quotes — may include an opacity modifier
		                /[-\/][^\s'"`\\$={><]*/
		            ]))
		        ])
		    ]);
		    let variantPatterns = [
		        // Without quotes
		        _regex.any([
		            // This is here to provide special support for the `@` variant
		            _regex.pattern([
		                /@\[[^\s"'`]+\](\/[^\s"'`]+)?/,
		                separator
		            ]),
		            _regex.pattern([
		                /([^\s"'`\[\\]+-)?\[[^\s"'`]+\]/,
		                separator
		            ]),
		            _regex.pattern([
		                /[^\s"'`\[\\]+/,
		                separator
		            ])
		        ]),
		        // With quotes allowed
		        _regex.any([
		            _regex.pattern([
		                /([^\s"'`\[\\]+-)?\[[^\s`]+\]/,
		                separator
		            ]),
		            _regex.pattern([
		                /[^\s`\[\\]+/,
		                separator
		            ])
		        ])
		    ];
		    for (const variantPattern of variantPatterns){
		        yield _regex.pattern([
		            // Variants
		            "((?=((",
		            variantPattern,
		            ")+))\\2)?",
		            // Important (optional)
		            /!?/,
		            prefix,
		            variantGroupingEnabled ? _regex.any([
		                // Or any of those things but grouped separated by commas
		                _regex.pattern([
		                    /\(/,
		                    utility,
		                    _regex.zeroOrMore([
		                        /,/,
		                        utility
		                    ]),
		                    /\)/
		                ]),
		                // Arbitrary properties, constrained utilities, arbitrary values, etc…
		                utility
		            ]) : utility
		        ]);
		    }
		    // 5. Inner matches
		    yield /[^<>"'`\s.(){}[\]#=%$]*[^<>"'`\s.(){}[\]#=%:$]/g;
		}
		// We want to capture any "special" characters
		// AND the characters immediately following them (if there is one)
		let SPECIALS = /([\[\]'"`])([^\[\]'"`])?/g;
		let ALLOWED_CLASS_CHARACTERS = /[^"'`\s<>\]]+/;
		/**
		 * Clips a string ensuring that parentheses, quotes, etc… are balanced
		 * Used for arbitrary values only
		 *
		 * We will go past the end of the balanced parens until we find a non-class character
		 *
		 * Depth matching behavior:
		 * w-[calc(100%-theme('spacing[some_key][1.5]'))]']
		 *   ┬    ┬          ┬┬       ┬        ┬┬   ┬┬┬┬┬┬┬
		 *   1    2          3        4        34   3 210 END
		 *   ╰────┴──────────┴────────┴────────┴┴───┴─┴┴┴
		 *
		 * @param {string} input
		 */ function clipAtBalancedParens(input) {
		    // We are care about this for arbitrary values
		    if (!input.includes("-[")) {
		        return input;
		    }
		    let depth = 0;
		    let openStringTypes = [];
		    // Find all parens, brackets, quotes, etc
		    // Stop when we end at a balanced pair
		    // This is naive and will treat mismatched parens as balanced
		    // This shouldn't be a problem in practice though
		    let matches = input.matchAll(SPECIALS);
		    // We can't use lookbehind assertions because we have to support Safari
		    // So, instead, we've emulated it using capture groups and we'll re-work the matches to accommodate
		    matches = Array.from(matches).flatMap((match)=>{
		        const [, ...groups] = match;
		        return groups.map((group, idx)=>Object.assign([], match, {
		                index: match.index + idx,
		                0: group
		            }));
		    });
		    for (let match of matches){
		        let char = match[0];
		        let inStringType = openStringTypes[openStringTypes.length - 1];
		        if (char === inStringType) {
		            openStringTypes.pop();
		        } else if (char === "'" || char === '"' || char === "`") {
		            openStringTypes.push(char);
		        }
		        if (inStringType) {
		            continue;
		        } else if (char === "[") {
		            depth++;
		            continue;
		        } else if (char === "]") {
		            depth--;
		            continue;
		        }
		        // We've gone one character past the point where we should stop
		        // This means that there was an extra closing `]`
		        // We'll clip to just before it
		        if (depth < 0) {
		            return input.substring(0, match.index - 1);
		        }
		        // We've finished balancing the brackets but there still may be characters that can be included
		        // For example in the class `text-[#336699]/[.35]`
		        // The depth goes to `0` at the closing `]` but goes up again at the `[`
		        // If we're at zero and encounter a non-class character then we clip the class there
		        if (depth === 0 && !ALLOWED_CLASS_CHARACTERS.test(char)) {
		            return input.substring(0, match.index);
		        }
		    }
		    return input;
		} // Regular utilities
		 // {{modifier}:}*{namespace}{-{suffix}}*{/{opacityModifier}}?
		 // Arbitrary values
		 // {{modifier}:}*{namespace}-[{arbitraryValue}]{/{opacityModifier}}?
		 // arbitraryValue: no whitespace, balanced quotes unless within quotes, balanced brackets unless within quotes
		 // Arbitrary properties
		 // {{modifier}:}*[{validCssPropertyName}:{arbitraryValue}]
} (defaultExtractor));
	return defaultExtractor;
}

var hasRequiredExpandTailwindAtRules;

function requireExpandTailwindAtRules () {
	if (hasRequiredExpandTailwindAtRules) return expandTailwindAtRules;
	hasRequiredExpandTailwindAtRules = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>expandTailwindAtRules
		});
		const _fs = /*#__PURE__*/ _interopRequireDefault(require$$3);
		const _quickLru = /*#__PURE__*/ _interopRequireDefault(requireQuickLru());
		const _sharedState = /*#__PURE__*/ _interopRequireWildcard(requireSharedState());
		const _generateRules = requireGenerateRules();
		const _log = /*#__PURE__*/ _interopRequireDefault(requireLog());
		const _cloneNodes = /*#__PURE__*/ _interopRequireDefault(requireCloneNodes());
		const _defaultExtractor = requireDefaultExtractor();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function _getRequireWildcardCache(nodeInterop) {
		    if (typeof WeakMap !== "function") return null;
		    var cacheBabelInterop = new WeakMap();
		    var cacheNodeInterop = new WeakMap();
		    return (_getRequireWildcardCache = function(nodeInterop) {
		        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
		    })(nodeInterop);
		}
		function _interopRequireWildcard(obj, nodeInterop) {
		    if (!nodeInterop && obj && obj.__esModule) {
		        return obj;
		    }
		    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
		        return {
		            default: obj
		        };
		    }
		    var cache = _getRequireWildcardCache(nodeInterop);
		    if (cache && cache.has(obj)) {
		        return cache.get(obj);
		    }
		    var newObj = {};
		    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
		    for(var key in obj){
		        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
		            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
		            if (desc && (desc.get || desc.set)) {
		                Object.defineProperty(newObj, key, desc);
		            } else {
		                newObj[key] = obj[key];
		            }
		        }
		    }
		    newObj.default = obj;
		    if (cache) {
		        cache.set(obj, newObj);
		    }
		    return newObj;
		}
		let env = _sharedState.env;
		const builtInExtractors = {
		    DEFAULT: _defaultExtractor.defaultExtractor
		};
		const builtInTransformers = {
		    DEFAULT: (content)=>content,
		    svelte: (content)=>content.replace(/(?:^|\s)class:/g, " ")
		};
		function getExtractor(context, fileExtension) {
		    let extractors = context.tailwindConfig.content.extract;
		    return extractors[fileExtension] || extractors.DEFAULT || builtInExtractors[fileExtension] || builtInExtractors.DEFAULT(context);
		}
		function getTransformer(tailwindConfig, fileExtension) {
		    let transformers = tailwindConfig.content.transform;
		    return transformers[fileExtension] || transformers.DEFAULT || builtInTransformers[fileExtension] || builtInTransformers.DEFAULT;
		}
		let extractorCache = new WeakMap();
		// Scans template contents for possible classes. This is a hot path on initial build but
		// not too important for subsequent builds. The faster the better though — if we can speed
		// up these regexes by 50% that could cut initial build time by like 20%.
		function getClassCandidates(content, extractor, candidates, seen) {
		    if (!extractorCache.has(extractor)) {
		        extractorCache.set(extractor, new _quickLru.default({
		            maxSize: 25000
		        }));
		    }
		    for (let line of content.split("\n")){
		        line = line.trim();
		        if (seen.has(line)) {
		            continue;
		        }
		        seen.add(line);
		        if (extractorCache.get(extractor).has(line)) {
		            for (let match of extractorCache.get(extractor).get(line)){
		                candidates.add(match);
		            }
		        } else {
		            let extractorMatches = extractor(line).filter((s)=>s !== "!*");
		            let lineMatchesSet = new Set(extractorMatches);
		            for (let match1 of lineMatchesSet){
		                candidates.add(match1);
		            }
		            extractorCache.get(extractor).set(line, lineMatchesSet);
		        }
		    }
		}
		/**
		 *
		 * @param {[import('./offsets.js').RuleOffset, import('postcss').Node][]} rules
		 * @param {*} context
		 */ function buildStylesheet(rules, context) {
		    let sortedRules = context.offsets.sort(rules);
		    let returnValue = {
		        base: new Set(),
		        defaults: new Set(),
		        components: new Set(),
		        utilities: new Set(),
		        variants: new Set()
		    };
		    for (let [sort, rule] of sortedRules){
		        returnValue[sort.layer].add(rule);
		    }
		    return returnValue;
		}
		function expandTailwindAtRules(context) {
		    return (root)=>{
		        let layerNodes = {
		            base: null,
		            components: null,
		            utilities: null,
		            variants: null
		        };
		        root.walkAtRules((rule)=>{
		            // Make sure this file contains Tailwind directives. If not, we can save
		            // a lot of work and bail early. Also we don't have to register our touch
		            // file as a dependency since the output of this CSS does not depend on
		            // the source of any templates. Think Vue <style> blocks for example.
		            if (rule.name === "tailwind") {
		                if (Object.keys(layerNodes).includes(rule.params)) {
		                    layerNodes[rule.params] = rule;
		                }
		            }
		        });
		        if (Object.values(layerNodes).every((n)=>n === null)) {
		            return root;
		        }
		        var _context_candidates;
		        // ---
		        // Find potential rules in changed files
		        let candidates = new Set([
		            ...(_context_candidates = context.candidates) !== null && _context_candidates !== void 0 ? _context_candidates : [],
		            _sharedState.NOT_ON_DEMAND
		        ]);
		        let seen = new Set();
		        env.DEBUG && console.time("Reading changed files");
		        if (env.OXIDE) {
		            // TODO: Pass through or implement `extractor`
		            for (let candidate of require$$7$1.parseCandidateStringsFromFiles(context.changedContent)){
		                candidates.add(candidate);
		            }
		        // for (let { file, content, extension } of context.changedContent) {
		        //   let transformer = getTransformer(context.tailwindConfig, extension)
		        //   let extractor = getExtractor(context, extension)
		        //   getClassCandidatesOxide(file, transformer(content), extractor, candidates, seen)
		        // }
		        } else {
		            for (let { file , content , extension  } of context.changedContent){
		                let transformer = getTransformer(context.tailwindConfig, extension);
		                let extractor = getExtractor(context, extension);
		                content = file ? _fs.default.readFileSync(file, "utf8") : content;
		                getClassCandidates(transformer(content), extractor, candidates, seen);
		            }
		        }
		        env.DEBUG && console.timeEnd("Reading changed files");
		        // ---
		        // Generate the actual CSS
		        let classCacheCount = context.classCache.size;
		        env.DEBUG && console.time("Generate rules");
		        env.DEBUG && console.time("Sorting candidates");
		        let sortedCandidates = env.OXIDE ? candidates : new Set([
		            ...candidates
		        ].sort((a, z)=>{
		            if (a === z) return 0;
		            if (a < z) return -1;
		            return 1;
		        }));
		        env.DEBUG && console.timeEnd("Sorting candidates");
		        (0, _generateRules.generateRules)(sortedCandidates, context);
		        env.DEBUG && console.timeEnd("Generate rules");
		        // We only ever add to the classCache, so if it didn't grow, there is nothing new.
		        env.DEBUG && console.time("Build stylesheet");
		        if (context.stylesheetCache === null || context.classCache.size !== classCacheCount) {
		            context.stylesheetCache = buildStylesheet([
		                ...context.ruleCache
		            ], context);
		        }
		        env.DEBUG && console.timeEnd("Build stylesheet");
		        let { defaults: defaultNodes , base: baseNodes , components: componentNodes , utilities: utilityNodes , variants: screenNodes  } = context.stylesheetCache;
		        // ---
		        // Replace any Tailwind directives with generated CSS
		        if (layerNodes.base) {
		            layerNodes.base.before((0, _cloneNodes.default)([
		                ...baseNodes,
		                ...defaultNodes
		            ], layerNodes.base.source, {
		                layer: "base"
		            }));
		            layerNodes.base.remove();
		        }
		        if (layerNodes.components) {
		            layerNodes.components.before((0, _cloneNodes.default)([
		                ...componentNodes
		            ], layerNodes.components.source, {
		                layer: "components"
		            }));
		            layerNodes.components.remove();
		        }
		        if (layerNodes.utilities) {
		            layerNodes.utilities.before((0, _cloneNodes.default)([
		                ...utilityNodes
		            ], layerNodes.utilities.source, {
		                layer: "utilities"
		            }));
		            layerNodes.utilities.remove();
		        }
		        // We do post-filtering to not alter the emitted order of the variants
		        const variantNodes = Array.from(screenNodes).filter((node)=>{
		            var _node_raws_tailwind;
		            const parentLayer = (_node_raws_tailwind = node.raws.tailwind) === null || _node_raws_tailwind === void 0 ? void 0 : _node_raws_tailwind.parentLayer;
		            if (parentLayer === "components") {
		                return layerNodes.components !== null;
		            }
		            if (parentLayer === "utilities") {
		                return layerNodes.utilities !== null;
		            }
		            return true;
		        });
		        if (layerNodes.variants) {
		            layerNodes.variants.before((0, _cloneNodes.default)(variantNodes, layerNodes.variants.source, {
		                layer: "variants"
		            }));
		            layerNodes.variants.remove();
		        } else if (variantNodes.length > 0) {
		            root.append((0, _cloneNodes.default)(variantNodes, root.source, {
		                layer: "variants"
		            }));
		        }
		        // If we've got a utility layer and no utilities are generated there's likely something wrong
		        const hasUtilityVariants = variantNodes.some((node)=>{
		            var _node_raws_tailwind;
		            return ((_node_raws_tailwind = node.raws.tailwind) === null || _node_raws_tailwind === void 0 ? void 0 : _node_raws_tailwind.parentLayer) === "utilities";
		        });
		        if (layerNodes.utilities && utilityNodes.size === 0 && !hasUtilityVariants) {
		            _log.default.warn("content-problems", [
		                "No utility classes were detected in your source files. If this is unexpected, double-check the `content` option in your Tailwind CSS configuration.",
		                "https://tailwindcss.com/docs/content-configuration"
		            ]);
		        }
		        // ---
		        if (env.DEBUG) {
		            console.log("Potential classes: ", candidates.size);
		            console.log("Active contexts: ", _sharedState.contextSourcesMap.size);
		        }
		        // Clear the cache for the changed files
		        context.changedContent = [];
		        // Cleanup any leftover @layer atrules
		        root.walkAtRules("layer", (rule)=>{
		            if (Object.keys(layerNodes).includes(rule.params)) {
		                rule.remove();
		            }
		        });
		    };
		}
} (expandTailwindAtRules));
	return expandTailwindAtRules;
}

var expandApplyAtRules = {};

var hasRequiredExpandApplyAtRules;

function requireExpandApplyAtRules () {
	if (hasRequiredExpandApplyAtRules) return expandApplyAtRules;
	hasRequiredExpandApplyAtRules = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>expandApplyAtRules
		});
		const _postcss = /*#__PURE__*/ _interopRequireDefault(requirePostcss());
		const _postcssSelectorParser = /*#__PURE__*/ _interopRequireDefault(requireDist());
		const _generateRules = requireGenerateRules();
		const _escapeClassName = /*#__PURE__*/ _interopRequireDefault(requireEscapeClassName());
		const _applyImportantSelector = requireApplyImportantSelector();
		const _formatVariantSelectorJs = requireFormatVariantSelector();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		/** @typedef {Map<string, [any, import('postcss').Rule[]]>} ApplyCache */ function extractClasses(node) {
		    /** @type {Map<string, Set<string>>} */ let groups = new Map();
		    let container = _postcss.default.root({
		        nodes: [
		            node.clone()
		        ]
		    });
		    container.walkRules((rule)=>{
		        (0, _postcssSelectorParser.default)((selectors)=>{
		            selectors.walkClasses((classSelector)=>{
		                let parentSelector = classSelector.parent.toString();
		                let classes = groups.get(parentSelector);
		                if (!classes) {
		                    groups.set(parentSelector, classes = new Set());
		                }
		                classes.add(classSelector.value);
		            });
		        }).processSync(rule.selector);
		    });
		    let normalizedGroups = Array.from(groups.values(), (classes)=>Array.from(classes));
		    let classes = normalizedGroups.flat();
		    return Object.assign(classes, {
		        groups: normalizedGroups
		    });
		}
		let selectorExtractor = (0, _postcssSelectorParser.default)();
		/**
		 * @param {string} ruleSelectors
		 */ function extractSelectors(ruleSelectors) {
		    return selectorExtractor.astSync(ruleSelectors);
		}
		function extractBaseCandidates(candidates, separator) {
		    let baseClasses = new Set();
		    for (let candidate of candidates){
		        baseClasses.add(candidate.split(separator).pop());
		    }
		    return Array.from(baseClasses);
		}
		function prefix(context, selector) {
		    let prefix = context.tailwindConfig.prefix;
		    return typeof prefix === "function" ? prefix(selector) : prefix + selector;
		}
		function* pathToRoot(node) {
		    yield node;
		    while(node.parent){
		        yield node.parent;
		        node = node.parent;
		    }
		}
		/**
		 * Only clone the node itself and not its children
		 *
		 * @param {*} node
		 * @param {*} overrides
		 * @returns
		 */ function shallowClone(node, overrides = {}) {
		    let children = node.nodes;
		    node.nodes = [];
		    let tmp = node.clone(overrides);
		    node.nodes = children;
		    return tmp;
		}
		/**
		 * Clone just the nodes all the way to the top that are required to represent
		 * this singular rule in the tree.
		 *
		 * For example, if we have CSS like this:
		 * ```css
		 * @media (min-width: 768px) {
		 *   @supports (display: grid) {
		 *     .foo {
		 *       display: grid;
		 *       grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		 *     }
		 *   }
		 *
		 *   @supports (backdrop-filter: blur(1px)) {
		 *     .bar {
		 *       backdrop-filter: blur(1px);
		 *     }
		 *   }
		 *
		 *   .baz {
		 *     color: orange;
		 *   }
		 * }
		 * ```
		 *
		 * And we're cloning `.bar` it'll return a cloned version of what's required for just that single node:
		 *
		 * ```css
		 * @media (min-width: 768px) {
		 *   @supports (backdrop-filter: blur(1px)) {
		 *     .bar {
		 *       backdrop-filter: blur(1px);
		 *     }
		 *   }
		 * }
		 * ```
		 *
		 * @param {import('postcss').Node} node
		 */ function nestedClone(node) {
		    for (let parent of pathToRoot(node)){
		        if (node === parent) {
		            continue;
		        }
		        if (parent.type === "root") {
		            break;
		        }
		        node = shallowClone(parent, {
		            nodes: [
		                node
		            ]
		        });
		    }
		    return node;
		}
		/**
		 * @param {import('postcss').Root} root
		 */ function buildLocalApplyCache(root, context) {
		    /** @type {ApplyCache} */ let cache = new Map();
		    root.walkRules((rule)=>{
		        // Ignore rules generated by Tailwind
		        for (let node of pathToRoot(rule)){
		            var _node_raws_tailwind;
		            if (((_node_raws_tailwind = node.raws.tailwind) === null || _node_raws_tailwind === void 0 ? void 0 : _node_raws_tailwind.layer) !== undefined) {
		                return;
		            }
		        }
		        // Clone what's required to represent this singular rule in the tree
		        let container = nestedClone(rule);
		        let sort = context.offsets.create("user");
		        for (let className of extractClasses(rule)){
		            let list = cache.get(className) || [];
		            cache.set(className, list);
		            list.push([
		                {
		                    layer: "user",
		                    sort,
		                    important: false
		                },
		                container
		            ]);
		        }
		    });
		    return cache;
		}
		/**
		 * @returns {ApplyCache}
		 */ function buildApplyCache(applyCandidates, context) {
		    for (let candidate of applyCandidates){
		        if (context.notClassCache.has(candidate) || context.applyClassCache.has(candidate)) {
		            continue;
		        }
		        if (context.classCache.has(candidate)) {
		            context.applyClassCache.set(candidate, context.classCache.get(candidate).map(([meta, rule])=>[
		                    meta,
		                    rule.clone()
		                ]));
		            continue;
		        }
		        let matches = Array.from((0, _generateRules.resolveMatches)(candidate, context));
		        if (matches.length === 0) {
		            context.notClassCache.add(candidate);
		            continue;
		        }
		        context.applyClassCache.set(candidate, matches);
		    }
		    return context.applyClassCache;
		}
		/**
		 * Build a cache only when it's first used
		 *
		 * @param {() => ApplyCache} buildCacheFn
		 * @returns {ApplyCache}
		 */ function lazyCache(buildCacheFn) {
		    let cache = null;
		    return {
		        get: (name)=>{
		            cache = cache || buildCacheFn();
		            return cache.get(name);
		        },
		        has: (name)=>{
		            cache = cache || buildCacheFn();
		            return cache.has(name);
		        }
		    };
		}
		/**
		 * Take a series of multiple caches and merge
		 * them so they act like one large cache
		 *
		 * @param {ApplyCache[]} caches
		 * @returns {ApplyCache}
		 */ function combineCaches(caches) {
		    return {
		        get: (name)=>caches.flatMap((cache)=>cache.get(name) || []),
		        has: (name)=>caches.some((cache)=>cache.has(name))
		    };
		}
		function extractApplyCandidates(params) {
		    let candidates = params.split(/[\s\t\n]+/g);
		    if (candidates[candidates.length - 1] === "!important") {
		        return [
		            candidates.slice(0, -1),
		            true
		        ];
		    }
		    return [
		        candidates,
		        false
		    ];
		}
		function processApply(root, context, localCache) {
		    let applyCandidates = new Set();
		    // Collect all @apply rules and candidates
		    let applies = [];
		    root.walkAtRules("apply", (rule)=>{
		        let [candidates] = extractApplyCandidates(rule.params);
		        for (let util of candidates){
		            applyCandidates.add(util);
		        }
		        applies.push(rule);
		    });
		    // Start the @apply process if we have rules with @apply in them
		    if (applies.length === 0) {
		        return;
		    }
		    // Fill up some caches!
		    let applyClassCache = combineCaches([
		        localCache,
		        buildApplyCache(applyCandidates, context)
		    ]);
		    /**
		   * When we have an apply like this:
		   *
		   * .abc {
		   *    @apply hover:font-bold;
		   * }
		   *
		   * What we essentially will do is resolve to this:
		   *
		   * .abc {
		   *    @apply .hover\:font-bold:hover {
		   *      font-weight: 500;
		   *    }
		   * }
		   *
		   * Notice that the to-be-applied class is `.hover\:font-bold:hover` and that the utility candidate was `hover:font-bold`.
		   * What happens in this function is that we prepend a `.` and escape the candidate.
		   * This will result in `.hover\:font-bold`
		   * Which means that we can replace `.hover\:font-bold` with `.abc` in `.hover\:font-bold:hover` resulting in `.abc:hover`
		   *
		   * @param {string} selector
		   * @param {string} utilitySelectors
		   * @param {string} candidate
		   */ function replaceSelector(selector, utilitySelectors, candidate) {
		        let selectorList = extractSelectors(selector);
		        let utilitySelectorsList = extractSelectors(utilitySelectors);
		        let candidateList = extractSelectors(`.${(0, _escapeClassName.default)(candidate)}`);
		        let candidateClass = candidateList.nodes[0].nodes[0];
		        selectorList.each((sel)=>{
		            /** @type {Set<import('postcss-selector-parser').Selector>} */ let replaced = new Set();
		            utilitySelectorsList.each((utilitySelector)=>{
		                let hasReplaced = false;
		                utilitySelector = utilitySelector.clone();
		                utilitySelector.walkClasses((node)=>{
		                    if (node.value !== candidateClass.value) {
		                        return;
		                    }
		                    // Don't replace multiple instances of the same class
		                    // This is theoretically correct but only partially
		                    // We'd need to generate every possible permutation of the replacement
		                    // For example with `.foo + .foo { … }` and `section { @apply foo; }`
		                    // We'd need to generate all of these:
		                    // - `.foo + .foo`
		                    // - `.foo + section`
		                    // - `section + .foo`
		                    // - `section + section`
		                    if (hasReplaced) {
		                        return;
		                    }
		                    // Since you can only `@apply` class names this is sufficient
		                    // We want to replace the matched class name with the selector the user is using
		                    // Ex: Replace `.text-blue-500` with `.foo.bar:is(.something-cool)`
		                    node.replaceWith(...sel.nodes.map((node)=>node.clone()));
		                    // Record that we did something and we want to use this new selector
		                    replaced.add(utilitySelector);
		                    hasReplaced = true;
		                });
		            });
		            // Sort tag names before class names (but only sort each group (separated by a combinator)
		            // separately and not in total)
		            // This happens when replacing `.bar` in `.foo.bar` with a tag like `section`
		            for (let sel1 of replaced){
		                let groups = [
		                    []
		                ];
		                for (let node of sel1.nodes){
		                    if (node.type === "combinator") {
		                        groups.push(node);
		                        groups.push([]);
		                    } else {
		                        let last = groups[groups.length - 1];
		                        last.push(node);
		                    }
		                }
		                sel1.nodes = [];
		                for (let group of groups){
		                    if (Array.isArray(group)) {
		                        group.sort((a, b)=>{
		                            if (a.type === "tag" && b.type === "class") {
		                                return -1;
		                            } else if (a.type === "class" && b.type === "tag") {
		                                return 1;
		                            } else if (a.type === "class" && b.type === "pseudo" && b.value.startsWith("::")) {
		                                return -1;
		                            } else if (a.type === "pseudo" && a.value.startsWith("::") && b.type === "class") {
		                                return 1;
		                            }
		                            return 0;
		                        });
		                    }
		                    sel1.nodes = sel1.nodes.concat(group);
		                }
		            }
		            sel.replaceWith(...replaced);
		        });
		        return selectorList.toString();
		    }
		    let perParentApplies = new Map();
		    // Collect all apply candidates and their rules
		    for (let apply of applies){
		        let [candidates] = perParentApplies.get(apply.parent) || [
		            [],
		            apply.source
		        ];
		        perParentApplies.set(apply.parent, [
		            candidates,
		            apply.source
		        ]);
		        let [applyCandidates1, important] = extractApplyCandidates(apply.params);
		        if (apply.parent.type === "atrule") {
		            if (apply.parent.name === "screen") {
		                let screenType = apply.parent.params;
		                throw apply.error(`@apply is not supported within nested at-rules like @screen. We suggest you write this as @apply ${applyCandidates1.map((c)=>`${screenType}:${c}`).join(" ")} instead.`);
		            }
		            throw apply.error(`@apply is not supported within nested at-rules like @${apply.parent.name}. You can fix this by un-nesting @${apply.parent.name}.`);
		        }
		        for (let applyCandidate of applyCandidates1){
		            if ([
		                prefix(context, "group"),
		                prefix(context, "peer")
		            ].includes(applyCandidate)) {
		                // TODO: Link to specific documentation page with error code.
		                throw apply.error(`@apply should not be used with the '${applyCandidate}' utility`);
		            }
		            if (!applyClassCache.has(applyCandidate)) {
		                throw apply.error(`The \`${applyCandidate}\` class does not exist. If \`${applyCandidate}\` is a custom class, make sure it is defined within a \`@layer\` directive.`);
		            }
		            let rules = applyClassCache.get(applyCandidate);
		            candidates.push([
		                applyCandidate,
		                important,
		                rules
		            ]);
		        }
		    }
		    for (let [parent, [candidates1, atApplySource]] of perParentApplies){
		        let siblings = [];
		        for (let [applyCandidate1, important1, rules1] of candidates1){
		            let potentialApplyCandidates = [
		                applyCandidate1,
		                ...extractBaseCandidates([
		                    applyCandidate1
		                ], context.tailwindConfig.separator)
		            ];
		            for (let [meta, node] of rules1){
		                let parentClasses = extractClasses(parent);
		                let nodeClasses = extractClasses(node);
		                // When we encounter a rule like `.dark .a, .b { … }` we only want to be left with `[.dark, .a]` if the base applyCandidate is `.a` or with `[.b]` if the base applyCandidate is `.b`
		                // So we've split them into groups
		                nodeClasses = nodeClasses.groups.filter((classList)=>classList.some((className)=>potentialApplyCandidates.includes(className))).flat();
		                // Add base utility classes from the @apply node to the list of
		                // classes to check whether it intersects and therefore results in a
		                // circular dependency or not.
		                //
		                // E.g.:
		                // .foo {
		                //   @apply hover:a; // This applies "a" but with a modifier
		                // }
		                //
		                // We only have to do that with base classes of the `node`, not of the `parent`
		                // E.g.:
		                // .hover\:foo {
		                //   @apply bar;
		                // }
		                // .bar {
		                //   @apply foo;
		                // }
		                //
		                // This should not result in a circular dependency because we are
		                // just applying `.foo` and the rule above is `.hover\:foo` which is
		                // unrelated. However, if we were to apply `hover:foo` then we _did_
		                // have to include this one.
		                nodeClasses = nodeClasses.concat(extractBaseCandidates(nodeClasses, context.tailwindConfig.separator));
		                let intersects = parentClasses.some((selector)=>nodeClasses.includes(selector));
		                if (intersects) {
		                    throw node.error(`You cannot \`@apply\` the \`${applyCandidate1}\` utility here because it creates a circular dependency.`);
		                }
		                let root1 = _postcss.default.root({
		                    nodes: [
		                        node.clone()
		                    ]
		                });
		                // Make sure every node in the entire tree points back at the @apply rule that generated it
		                root1.walk((node)=>{
		                    node.source = atApplySource;
		                });
		                let canRewriteSelector = node.type !== "atrule" || node.type === "atrule" && node.name !== "keyframes";
		                if (canRewriteSelector) {
		                    root1.walkRules((rule)=>{
		                        // Let's imagine you have the following structure:
		                        //
		                        // .foo {
		                        //   @apply bar;
		                        // }
		                        //
		                        // @supports (a: b) {
		                        //   .bar {
		                        //     color: blue
		                        //   }
		                        //
		                        //   .something-unrelated {}
		                        // }
		                        //
		                        // In this case we want to apply `.bar` but it happens to be in
		                        // an atrule node. We clone that node instead of the nested one
		                        // because we still want that @supports rule to be there once we
		                        // applied everything.
		                        //
		                        // However it happens to be that the `.something-unrelated` is
		                        // also in that same shared @supports atrule. This is not good,
		                        // and this should not be there. The good part is that this is
		                        // a clone already and it can be safely removed. The question is
		                        // how do we know we can remove it. Basically what we can do is
		                        // match it against the applyCandidate that you want to apply. If
		                        // it doesn't match the we can safely delete it.
		                        //
		                        // If we didn't do this, then the `replaceSelector` function
		                        // would have replaced this with something that didn't exist and
		                        // therefore it removed the selector altogether. In this specific
		                        // case it would result in `{}` instead of `.something-unrelated {}`
		                        if (!extractClasses(rule).some((candidate)=>candidate === applyCandidate1)) {
		                            rule.remove();
		                            return;
		                        }
		                        // Strip the important selector from the parent selector if at the beginning
		                        let importantSelector = typeof context.tailwindConfig.important === "string" ? context.tailwindConfig.important : null;
		                        // We only want to move the "important" selector if this is a Tailwind-generated utility
		                        // We do *not* want to do this for user CSS that happens to be structured the same
		                        let isGenerated = parent.raws.tailwind !== undefined;
		                        let parentSelector = isGenerated && importantSelector && parent.selector.indexOf(importantSelector) === 0 ? parent.selector.slice(importantSelector.length) : parent.selector;
		                        rule.selector = replaceSelector(parentSelector, rule.selector, applyCandidate1);
		                        // And then re-add it if it was removed
		                        if (importantSelector && parentSelector !== parent.selector) {
		                            rule.selector = (0, _applyImportantSelector.applyImportantSelector)(rule.selector, importantSelector);
		                        }
		                        rule.walkDecls((d)=>{
		                            d.important = meta.important || important1;
		                        });
		                        // Move pseudo elements to the end of the selector (if necessary)
		                        let selector = (0, _postcssSelectorParser.default)().astSync(rule.selector);
		                        selector.each((sel)=>{
		                            let [pseudoElements] = (0, _formatVariantSelectorJs.collectPseudoElements)(sel);
		                            if (pseudoElements.length > 0) {
		                                sel.nodes.push(...pseudoElements.sort(_formatVariantSelectorJs.sortSelector));
		                            }
		                        });
		                        rule.selector = selector.toString();
		                    });
		                }
		                // It could be that the node we were inserted was removed because the class didn't match
		                // If that was the *only* rule in the parent, then we have nothing add so we skip it
		                if (!root1.nodes[0]) {
		                    continue;
		                }
		                // Insert it
		                siblings.push([
		                    meta.sort,
		                    root1.nodes[0]
		                ]);
		            }
		        }
		        // Inject the rules, sorted, correctly
		        let nodes = context.offsets.sort(siblings).map((s)=>s[1]);
		        // `parent` refers to the node at `.abc` in: .abc { @apply mt-2 }
		        parent.after(nodes);
		    }
		    for (let apply1 of applies){
		        // If there are left-over declarations, just remove the @apply
		        if (apply1.parent.nodes.length > 1) {
		            apply1.remove();
		        } else {
		            // The node is empty, drop the full node
		            apply1.parent.remove();
		        }
		    }
		    // Do it again, in case we have other `@apply` rules
		    processApply(root, context, localCache);
		}
		function expandApplyAtRules(context) {
		    return (root)=>{
		        // Build a cache of the user's CSS so we can use it to resolve classes used by @apply
		        let localCache = lazyCache(()=>buildLocalApplyCache(root, context));
		        processApply(root, context, localCache);
		    };
		}
} (expandApplyAtRules));
	return expandApplyAtRules;
}

var evaluateTailwindFunctions = {};

var didYouMean1_2_1Exports = {};
var didYouMean1_2_1 = {
  get exports(){ return didYouMean1_2_1Exports; },
  set exports(v){ didYouMean1_2_1Exports = v; },
};

/*

didYouMean.js - A simple JavaScript matching engine
===================================================

[Available on GitHub](https://github.com/dcporter/didyoumean.js).

A super-simple, highly optimized JS library for matching human-quality input to a list of potential
matches. You can use it to suggest a misspelled command-line utility option to a user, or to offer
links to nearby valid URLs on your 404 page. (The examples below are taken from a personal project,
my [HTML5 business card](http://dcporter.aws.af.cm/me), which uses didYouMean.js to suggest correct
URLs from misspelled ones, such as [dcporter.aws.af.cm/me/instagarm](http://dcporter.aws.af.cm/me/instagarm).)
Uses the [Levenshtein distance algorithm](https://en.wikipedia.org/wiki/Levenshtein_distance).

didYouMean.js works in the browser as well as in node.js. To install it for use in node:

```
npm install didyoumean
```


Examples
--------

Matching against a list of strings:
```
var input = 'insargrm'
var list = ['facebook', 'twitter', 'instagram', 'linkedin'];
console.log(didYouMean(input, list));
> 'instagram'
// The method matches 'insargrm' to 'instagram'.

input = 'google plus';
console.log(didYouMean(input, list));
> null
// The method was unable to find 'google plus' in the list of options.
```

Matching against a list of objects:
```
var input = 'insargrm';
var list = [ { id: 'facebook' }, { id: 'twitter' }, { id: 'instagram' }, { id: 'linkedin' } ];
var key = 'id';
console.log(didYouMean(input, list, key));
> 'instagram'
// The method returns the matching value.

didYouMean.returnWinningObject = true;
console.log(didYouMean(input, list, key));
> { id: 'instagram' }
// The method returns the matching object.
```


didYouMean(str, list, [key])
----------------------------

- str: The string input to match.
- list: An array of strings or objects to match against.
- key (OPTIONAL): If your list array contains objects, you must specify the key which contains the string
  to match against.

Returns: the closest matching string, or null if no strings exceed the threshold.


Options
-------

Options are set on the didYouMean function object. You may change them at any time.

### threshold

  By default, the method will only return strings whose edit distance is less than 40% (0.4x) of their length.
  For example, if a ten-letter string is five edits away from its nearest match, the method will return null.

  You can control this by setting the "threshold" value on the didYouMean function. For example, to set the
  edit distance threshold to 50% of the input string's length:

  ```
  didYouMean.threshold = 0.5;
  ```

  To return the nearest match no matter the threshold, set this value to null.

### thresholdAbsolute

  This option behaves the same as threshold, but instead takes an integer number of edit steps. For example,
  if thresholdAbsolute is set to 20 (the default), then the method will only return strings whose edit distance
  is less than 20. Both options apply.

### caseSensitive

  By default, the method will perform case-insensitive comparisons. If you wish to force case sensitivity, set
  the "caseSensitive" value to true:

  ```
  didYouMean.caseSensitive = true;
  ```

### nullResultValue

  By default, the method will return null if there is no sufficiently close match. You can change this value here.

### returnWinningObject

  By default, the method will return the winning string value (if any). If your list contains objects rather
  than strings, you may set returnWinningObject to true.
  
  ```
  didYouMean.returnWinningObject = true;
  ```
  
  This option has no effect on lists of strings.

### returnFirstMatch
  
  By default, the method will search all values and return the closest match. If you're simply looking for a "good-
  enough" match, you can set your thresholds appropriately and set returnFirstMatch to true to substantially speed
  things up.


License
-------

didYouMean copyright (c) 2013-2014 Dave Porter.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License
[here](http://www.apache.org/licenses/LICENSE-2.0).

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/

var hasRequiredDidYouMean1_2_1;

function requireDidYouMean1_2_1 () {
	if (hasRequiredDidYouMean1_2_1) return didYouMean1_2_1Exports;
	hasRequiredDidYouMean1_2_1 = 1;
	(function (module) {
		(function() {

		  // The didYouMean method.
		  function didYouMean(str, list, key) {
		    if (!str) return null;

		    // If we're running a case-insensitive search, smallify str.
		    if (!didYouMean.caseSensitive) { str = str.toLowerCase(); }

		    // Calculate the initial value (the threshold) if present.
		    var thresholdRelative = didYouMean.threshold === null ? null : didYouMean.threshold * str.length,
		        thresholdAbsolute = didYouMean.thresholdAbsolute,
		        winningVal;
		    if (thresholdRelative !== null && thresholdAbsolute !== null) winningVal = Math.min(thresholdRelative, thresholdAbsolute);
		    else if (thresholdRelative !== null) winningVal = thresholdRelative;
		    else if (thresholdAbsolute !== null) winningVal = thresholdAbsolute;
		    else winningVal = null;

		    // Get the edit distance to each option. If the closest one is less than 40% (by default) of str's length,
		    // then return it.
		    var winner, candidate, testCandidate, val,
		        i, len = list.length;
		    for (i = 0; i < len; i++) {
		      // Get item.
		      candidate = list[i];
		      // If there's a key, get the candidate value out of the object.
		      if (key) { candidate = candidate[key]; }
		      // Gatekeep.
		      if (!candidate) { continue; }
		      // If we're running a case-insensitive search, smallify the candidate.
		      if (!didYouMean.caseSensitive) { testCandidate = candidate.toLowerCase(); }
		      else { testCandidate = candidate; }
		      // Get and compare edit distance.
		      val = getEditDistance(str, testCandidate, winningVal);
		      // If this value is smaller than our current winning value, OR if we have no winning val yet (i.e. the
		      // threshold option is set to null, meaning the caller wants a match back no matter how bad it is), then
		      // this is our new winner.
		      if (winningVal === null || val < winningVal) {
		        winningVal = val;
		        // Set the winner to either the value or its object, depending on the returnWinningObject option.
		        if (key && didYouMean.returnWinningObject) winner = list[i];
		        else winner = candidate;
		        // If we're returning the first match, return it now.
		        if (didYouMean.returnFirstMatch) return winner;
		      }
		    }

		    // If we have a winner, return it.
		    return winner || didYouMean.nullResultValue;
		  }

		  // Set default options.
		  didYouMean.threshold = 0.4;
		  didYouMean.thresholdAbsolute = 20;
		  didYouMean.caseSensitive = false;
		  didYouMean.nullResultValue = null;
		  didYouMean.returnWinningObject = null;
		  didYouMean.returnFirstMatch = false;

		  // Expose.
		  // In node...
		  if (module.exports) {
		    module.exports = didYouMean;
		  }
		  // Otherwise...
		  else {
		    window.didYouMean = didYouMean;
		  }

		  var MAX_INT = Math.pow(2,32) - 1; // We could probably go higher than this, but for practical reasons let's not.
		  function getEditDistance(a, b, max) {
		    // Handle null or undefined max.
		    max = max || max === 0 ? max : MAX_INT;

		    var lena = a.length;
		    var lenb = b.length;

		    // Fast path - no A or B.
		    if (lena === 0) return Math.min(max + 1, lenb);
		    if (lenb === 0) return Math.min(max + 1, lena);

		    // Fast path - length diff larger than max.
		    if (Math.abs(lena - lenb) > max) return max + 1;

		    // Slow path.
		    var matrix = [],
		        i, j, colMin, minJ, maxJ;

		    // Set up the first row ([0, 1, 2, 3, etc]).
		    for (i = 0; i <= lenb; i++) { matrix[i] = [i]; }

		    // Set up the first column (same).
		    for (j = 0; j <= lena; j++) { matrix[0][j] = j; }

		    // Loop over the rest of the columns.
		    for (i = 1; i <= lenb; i++) {
		      colMin = MAX_INT;
		      minJ = 1;
		      if (i > max) minJ = i - max;
		      maxJ = lenb + 1;
		      if (maxJ > max + i) maxJ = max + i;
		      // Loop over the rest of the rows.
		      for (j = 1; j <= lena; j++) {
		        // If j is out of bounds, just put a large value in the slot.
		        if (j < minJ || j > maxJ) {
		          matrix[i][j] = max + 1;
		        }

		        // Otherwise do the normal Levenshtein thing.
		        else {
		          // If the characters are the same, there's no change in edit distance.
		          if (b.charAt(i - 1) === a.charAt(j - 1)) {
		            matrix[i][j] = matrix[i - 1][j - 1];
		          }
		          // Otherwise, see if we're substituting, inserting or deleting.
		          else {
		            matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // Substitute
		                                    Math.min(matrix[i][j - 1] + 1, // Insert
		                                    matrix[i - 1][j] + 1)); // Delete
		          }
		        }

		        // Either way, update colMin.
		        if (matrix[i][j] < colMin) colMin = matrix[i][j];
		      }

		      // If this column's minimum is greater than the allowed maximum, there's no point
		      // in going on with life.
		      if (colMin > max) return max + 1;
		    }
		    // If we made it this far without running into the max, then return the final matrix value.
		    return matrix[lenb][lena];
		  }

		})();
} (didYouMean1_2_1));
	return didYouMean1_2_1Exports;
}

var parse$1;
var hasRequiredParse$1;

function requireParse$1 () {
	if (hasRequiredParse$1) return parse$1;
	hasRequiredParse$1 = 1;
	var openParentheses = "(".charCodeAt(0);
	var closeParentheses = ")".charCodeAt(0);
	var singleQuote = "'".charCodeAt(0);
	var doubleQuote = '"'.charCodeAt(0);
	var backslash = "\\".charCodeAt(0);
	var slash = "/".charCodeAt(0);
	var comma = ",".charCodeAt(0);
	var colon = ":".charCodeAt(0);
	var star = "*".charCodeAt(0);
	var uLower = "u".charCodeAt(0);
	var uUpper = "U".charCodeAt(0);
	var plus = "+".charCodeAt(0);
	var isUnicodeRange = /^[a-f0-9?-]+$/i;

	parse$1 = function(input) {
	  var tokens = [];
	  var value = input;

	  var next,
	    quote,
	    prev,
	    token,
	    escape,
	    escapePos,
	    whitespacePos,
	    parenthesesOpenPos;
	  var pos = 0;
	  var code = value.charCodeAt(pos);
	  var max = value.length;
	  var stack = [{ nodes: tokens }];
	  var balanced = 0;
	  var parent;

	  var name = "";
	  var before = "";
	  var after = "";

	  while (pos < max) {
	    // Whitespaces
	    if (code <= 32) {
	      next = pos;
	      do {
	        next += 1;
	        code = value.charCodeAt(next);
	      } while (code <= 32);
	      token = value.slice(pos, next);

	      prev = tokens[tokens.length - 1];
	      if (code === closeParentheses && balanced) {
	        after = token;
	      } else if (prev && prev.type === "div") {
	        prev.after = token;
	        prev.sourceEndIndex += token.length;
	      } else if (
	        code === comma ||
	        code === colon ||
	        (code === slash &&
	          value.charCodeAt(next + 1) !== star &&
	          (!parent ||
	            (parent && parent.type === "function" && parent.value !== "calc")))
	      ) {
	        before = token;
	      } else {
	        tokens.push({
	          type: "space",
	          sourceIndex: pos,
	          sourceEndIndex: next,
	          value: token
	        });
	      }

	      pos = next;

	      // Quotes
	    } else if (code === singleQuote || code === doubleQuote) {
	      next = pos;
	      quote = code === singleQuote ? "'" : '"';
	      token = {
	        type: "string",
	        sourceIndex: pos,
	        quote: quote
	      };
	      do {
	        escape = false;
	        next = value.indexOf(quote, next + 1);
	        if (~next) {
	          escapePos = next;
	          while (value.charCodeAt(escapePos - 1) === backslash) {
	            escapePos -= 1;
	            escape = !escape;
	          }
	        } else {
	          value += quote;
	          next = value.length - 1;
	          token.unclosed = true;
	        }
	      } while (escape);
	      token.value = value.slice(pos + 1, next);
	      token.sourceEndIndex = token.unclosed ? next : next + 1;
	      tokens.push(token);
	      pos = next + 1;
	      code = value.charCodeAt(pos);

	      // Comments
	    } else if (code === slash && value.charCodeAt(pos + 1) === star) {
	      next = value.indexOf("*/", pos);

	      token = {
	        type: "comment",
	        sourceIndex: pos,
	        sourceEndIndex: next + 2
	      };

	      if (next === -1) {
	        token.unclosed = true;
	        next = value.length;
	        token.sourceEndIndex = next;
	      }

	      token.value = value.slice(pos + 2, next);
	      tokens.push(token);

	      pos = next + 2;
	      code = value.charCodeAt(pos);

	      // Operation within calc
	    } else if (
	      (code === slash || code === star) &&
	      parent &&
	      parent.type === "function" &&
	      parent.value === "calc"
	    ) {
	      token = value[pos];
	      tokens.push({
	        type: "word",
	        sourceIndex: pos - before.length,
	        sourceEndIndex: pos + token.length,
	        value: token
	      });
	      pos += 1;
	      code = value.charCodeAt(pos);

	      // Dividers
	    } else if (code === slash || code === comma || code === colon) {
	      token = value[pos];

	      tokens.push({
	        type: "div",
	        sourceIndex: pos - before.length,
	        sourceEndIndex: pos + token.length,
	        value: token,
	        before: before,
	        after: ""
	      });
	      before = "";

	      pos += 1;
	      code = value.charCodeAt(pos);

	      // Open parentheses
	    } else if (openParentheses === code) {
	      // Whitespaces after open parentheses
	      next = pos;
	      do {
	        next += 1;
	        code = value.charCodeAt(next);
	      } while (code <= 32);
	      parenthesesOpenPos = pos;
	      token = {
	        type: "function",
	        sourceIndex: pos - name.length,
	        value: name,
	        before: value.slice(parenthesesOpenPos + 1, next)
	      };
	      pos = next;

	      if (name === "url" && code !== singleQuote && code !== doubleQuote) {
	        next -= 1;
	        do {
	          escape = false;
	          next = value.indexOf(")", next + 1);
	          if (~next) {
	            escapePos = next;
	            while (value.charCodeAt(escapePos - 1) === backslash) {
	              escapePos -= 1;
	              escape = !escape;
	            }
	          } else {
	            value += ")";
	            next = value.length - 1;
	            token.unclosed = true;
	          }
	        } while (escape);
	        // Whitespaces before closed
	        whitespacePos = next;
	        do {
	          whitespacePos -= 1;
	          code = value.charCodeAt(whitespacePos);
	        } while (code <= 32);
	        if (parenthesesOpenPos < whitespacePos) {
	          if (pos !== whitespacePos + 1) {
	            token.nodes = [
	              {
	                type: "word",
	                sourceIndex: pos,
	                sourceEndIndex: whitespacePos + 1,
	                value: value.slice(pos, whitespacePos + 1)
	              }
	            ];
	          } else {
	            token.nodes = [];
	          }
	          if (token.unclosed && whitespacePos + 1 !== next) {
	            token.after = "";
	            token.nodes.push({
	              type: "space",
	              sourceIndex: whitespacePos + 1,
	              sourceEndIndex: next,
	              value: value.slice(whitespacePos + 1, next)
	            });
	          } else {
	            token.after = value.slice(whitespacePos + 1, next);
	            token.sourceEndIndex = next;
	          }
	        } else {
	          token.after = "";
	          token.nodes = [];
	        }
	        pos = next + 1;
	        token.sourceEndIndex = token.unclosed ? next : pos;
	        code = value.charCodeAt(pos);
	        tokens.push(token);
	      } else {
	        balanced += 1;
	        token.after = "";
	        token.sourceEndIndex = pos + 1;
	        tokens.push(token);
	        stack.push(token);
	        tokens = token.nodes = [];
	        parent = token;
	      }
	      name = "";

	      // Close parentheses
	    } else if (closeParentheses === code && balanced) {
	      pos += 1;
	      code = value.charCodeAt(pos);

	      parent.after = after;
	      parent.sourceEndIndex += after.length;
	      after = "";
	      balanced -= 1;
	      stack[stack.length - 1].sourceEndIndex = pos;
	      stack.pop();
	      parent = stack[balanced];
	      tokens = parent.nodes;

	      // Words
	    } else {
	      next = pos;
	      do {
	        if (code === backslash) {
	          next += 1;
	        }
	        next += 1;
	        code = value.charCodeAt(next);
	      } while (
	        next < max &&
	        !(
	          code <= 32 ||
	          code === singleQuote ||
	          code === doubleQuote ||
	          code === comma ||
	          code === colon ||
	          code === slash ||
	          code === openParentheses ||
	          (code === star &&
	            parent &&
	            parent.type === "function" &&
	            parent.value === "calc") ||
	          (code === slash &&
	            parent.type === "function" &&
	            parent.value === "calc") ||
	          (code === closeParentheses && balanced)
	        )
	      );
	      token = value.slice(pos, next);

	      if (openParentheses === code) {
	        name = token;
	      } else if (
	        (uLower === token.charCodeAt(0) || uUpper === token.charCodeAt(0)) &&
	        plus === token.charCodeAt(1) &&
	        isUnicodeRange.test(token.slice(2))
	      ) {
	        tokens.push({
	          type: "unicode-range",
	          sourceIndex: pos,
	          sourceEndIndex: next,
	          value: token
	        });
	      } else {
	        tokens.push({
	          type: "word",
	          sourceIndex: pos,
	          sourceEndIndex: next,
	          value: token
	        });
	      }

	      pos = next;
	    }
	  }

	  for (pos = stack.length - 1; pos; pos -= 1) {
	    stack[pos].unclosed = true;
	    stack[pos].sourceEndIndex = value.length;
	  }

	  return stack[0].nodes;
	};
	return parse$1;
}

var walk;
var hasRequiredWalk;

function requireWalk () {
	if (hasRequiredWalk) return walk;
	hasRequiredWalk = 1;
	walk = function walk(nodes, cb, bubble) {
	  var i, max, node, result;

	  for (i = 0, max = nodes.length; i < max; i += 1) {
	    node = nodes[i];
	    if (!bubble) {
	      result = cb(node, i, nodes);
	    }

	    if (
	      result !== false &&
	      node.type === "function" &&
	      Array.isArray(node.nodes)
	    ) {
	      walk(node.nodes, cb, bubble);
	    }

	    if (bubble) {
	      cb(node, i, nodes);
	    }
	  }
	};
	return walk;
}

var stringify_1;
var hasRequiredStringify;

function requireStringify () {
	if (hasRequiredStringify) return stringify_1;
	hasRequiredStringify = 1;
	function stringifyNode(node, custom) {
	  var type = node.type;
	  var value = node.value;
	  var buf;
	  var customResult;

	  if (custom && (customResult = custom(node)) !== undefined) {
	    return customResult;
	  } else if (type === "word" || type === "space") {
	    return value;
	  } else if (type === "string") {
	    buf = node.quote || "";
	    return buf + value + (node.unclosed ? "" : buf);
	  } else if (type === "comment") {
	    return "/*" + value + (node.unclosed ? "" : "*/");
	  } else if (type === "div") {
	    return (node.before || "") + value + (node.after || "");
	  } else if (Array.isArray(node.nodes)) {
	    buf = stringify(node.nodes, custom);
	    if (type !== "function") {
	      return buf;
	    }
	    return (
	      value +
	      "(" +
	      (node.before || "") +
	      buf +
	      (node.after || "") +
	      (node.unclosed ? "" : ")")
	    );
	  }
	  return value;
	}

	function stringify(nodes, custom) {
	  var result, i;

	  if (Array.isArray(nodes)) {
	    result = "";
	    for (i = nodes.length - 1; ~i; i -= 1) {
	      result = stringifyNode(nodes[i], custom) + result;
	    }
	    return result;
	  }
	  return stringifyNode(nodes, custom);
	}

	stringify_1 = stringify;
	return stringify_1;
}

var unit;
var hasRequiredUnit;

function requireUnit () {
	if (hasRequiredUnit) return unit;
	hasRequiredUnit = 1;
	var minus = "-".charCodeAt(0);
	var plus = "+".charCodeAt(0);
	var dot = ".".charCodeAt(0);
	var exp = "e".charCodeAt(0);
	var EXP = "E".charCodeAt(0);

	// Check if three code points would start a number
	// https://www.w3.org/TR/css-syntax-3/#starts-with-a-number
	function likeNumber(value) {
	  var code = value.charCodeAt(0);
	  var nextCode;

	  if (code === plus || code === minus) {
	    nextCode = value.charCodeAt(1);

	    if (nextCode >= 48 && nextCode <= 57) {
	      return true;
	    }

	    var nextNextCode = value.charCodeAt(2);

	    if (nextCode === dot && nextNextCode >= 48 && nextNextCode <= 57) {
	      return true;
	    }

	    return false;
	  }

	  if (code === dot) {
	    nextCode = value.charCodeAt(1);

	    if (nextCode >= 48 && nextCode <= 57) {
	      return true;
	    }

	    return false;
	  }

	  if (code >= 48 && code <= 57) {
	    return true;
	  }

	  return false;
	}

	// Consume a number
	// https://www.w3.org/TR/css-syntax-3/#consume-number
	unit = function(value) {
	  var pos = 0;
	  var length = value.length;
	  var code;
	  var nextCode;
	  var nextNextCode;

	  if (length === 0 || !likeNumber(value)) {
	    return false;
	  }

	  code = value.charCodeAt(pos);

	  if (code === plus || code === minus) {
	    pos++;
	  }

	  while (pos < length) {
	    code = value.charCodeAt(pos);

	    if (code < 48 || code > 57) {
	      break;
	    }

	    pos += 1;
	  }

	  code = value.charCodeAt(pos);
	  nextCode = value.charCodeAt(pos + 1);

	  if (code === dot && nextCode >= 48 && nextCode <= 57) {
	    pos += 2;

	    while (pos < length) {
	      code = value.charCodeAt(pos);

	      if (code < 48 || code > 57) {
	        break;
	      }

	      pos += 1;
	    }
	  }

	  code = value.charCodeAt(pos);
	  nextCode = value.charCodeAt(pos + 1);
	  nextNextCode = value.charCodeAt(pos + 2);

	  if (
	    (code === exp || code === EXP) &&
	    ((nextCode >= 48 && nextCode <= 57) ||
	      ((nextCode === plus || nextCode === minus) &&
	        nextNextCode >= 48 &&
	        nextNextCode <= 57))
	  ) {
	    pos += nextCode === plus || nextCode === minus ? 3 : 2;

	    while (pos < length) {
	      code = value.charCodeAt(pos);

	      if (code < 48 || code > 57) {
	        break;
	      }

	      pos += 1;
	    }
	  }

	  return {
	    number: value.slice(0, pos),
	    unit: value.slice(pos)
	  };
	};
	return unit;
}

var lib;
var hasRequiredLib;

function requireLib () {
	if (hasRequiredLib) return lib;
	hasRequiredLib = 1;
	var parse = requireParse$1();
	var walk = requireWalk();
	var stringify = requireStringify();

	function ValueParser(value) {
	  if (this instanceof ValueParser) {
	    this.nodes = parse(value);
	    return this;
	  }
	  return new ValueParser(value);
	}

	ValueParser.prototype.toString = function() {
	  return Array.isArray(this.nodes) ? stringify(this.nodes) : "";
	};

	ValueParser.prototype.walk = function(cb, bubble) {
	  walk(this.nodes, cb, bubble);
	  return this;
	};

	ValueParser.unit = requireUnit();

	ValueParser.walk = walk;

	ValueParser.stringify = stringify;

	lib = ValueParser;
	return lib;
}

var hasRequiredEvaluateTailwindFunctions;

function requireEvaluateTailwindFunctions () {
	if (hasRequiredEvaluateTailwindFunctions) return evaluateTailwindFunctions;
	hasRequiredEvaluateTailwindFunctions = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>_default
		});
		const _dlv = /*#__PURE__*/ _interopRequireDefault(requireDlv_umd());
		const _didyoumean = /*#__PURE__*/ _interopRequireDefault(requireDidYouMean1_2_1());
		const _transformThemeValue = /*#__PURE__*/ _interopRequireDefault(requireTransformThemeValue());
		const _postcssValueParser = /*#__PURE__*/ _interopRequireDefault(requireLib());
		const _normalizeScreens = requireNormalizeScreens();
		const _buildMediaQuery = /*#__PURE__*/ _interopRequireDefault(requireBuildMediaQuery());
		const _toPath = requireToPath();
		const _withAlphaVariable = requireWithAlphaVariable();
		const _pluginUtils = requirePluginUtils();
		const _log = /*#__PURE__*/ _interopRequireDefault(requireLog());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function isObject(input) {
		    return typeof input === "object" && input !== null;
		}
		function findClosestExistingPath(theme, path) {
		    let parts = (0, _toPath.toPath)(path);
		    do {
		        parts.pop();
		        if ((0, _dlv.default)(theme, parts) !== undefined) break;
		    }while (parts.length);
		    return parts.length ? parts : undefined;
		}
		function pathToString(path) {
		    if (typeof path === "string") return path;
		    return path.reduce((acc, cur, i)=>{
		        if (cur.includes(".")) return `${acc}[${cur}]`;
		        return i === 0 ? cur : `${acc}.${cur}`;
		    }, "");
		}
		function list(items) {
		    return items.map((key)=>`'${key}'`).join(", ");
		}
		function listKeys(obj) {
		    return list(Object.keys(obj));
		}
		function validatePath(config, path, defaultValue, themeOpts = {}) {
		    const pathString = Array.isArray(path) ? pathToString(path) : path.replace(/^['"]+|['"]+$/g, "");
		    const pathSegments = Array.isArray(path) ? path : (0, _toPath.toPath)(pathString);
		    const value = (0, _dlv.default)(config.theme, pathSegments, defaultValue);
		    if (value === undefined) {
		        let error = `'${pathString}' does not exist in your theme config.`;
		        const parentSegments = pathSegments.slice(0, -1);
		        const parentValue = (0, _dlv.default)(config.theme, parentSegments);
		        if (isObject(parentValue)) {
		            const validKeys = Object.keys(parentValue).filter((key)=>validatePath(config, [
		                    ...parentSegments,
		                    key
		                ]).isValid);
		            const suggestion = (0, _didyoumean.default)(pathSegments[pathSegments.length - 1], validKeys);
		            if (suggestion) {
		                error += ` Did you mean '${pathToString([
		                    ...parentSegments,
		                    suggestion
		                ])}'?`;
		            } else if (validKeys.length > 0) {
		                error += ` '${pathToString(parentSegments)}' has the following valid keys: ${list(validKeys)}`;
		            }
		        } else {
		            const closestPath = findClosestExistingPath(config.theme, pathString);
		            if (closestPath) {
		                const closestValue = (0, _dlv.default)(config.theme, closestPath);
		                if (isObject(closestValue)) {
		                    error += ` '${pathToString(closestPath)}' has the following keys: ${listKeys(closestValue)}`;
		                } else {
		                    error += ` '${pathToString(closestPath)}' is not an object.`;
		                }
		            } else {
		                error += ` Your theme has the following top-level keys: ${listKeys(config.theme)}`;
		            }
		        }
		        return {
		            isValid: false,
		            error
		        };
		    }
		    if (!(typeof value === "string" || typeof value === "number" || typeof value === "function" || value instanceof String || value instanceof Number || Array.isArray(value))) {
		        let error1 = `'${pathString}' was found but does not resolve to a string.`;
		        if (isObject(value)) {
		            let validKeys1 = Object.keys(value).filter((key)=>validatePath(config, [
		                    ...pathSegments,
		                    key
		                ]).isValid);
		            if (validKeys1.length) {
		                error1 += ` Did you mean something like '${pathToString([
		                    ...pathSegments,
		                    validKeys1[0]
		                ])}'?`;
		            }
		        }
		        return {
		            isValid: false,
		            error: error1
		        };
		    }
		    const [themeSection] = pathSegments;
		    return {
		        isValid: true,
		        value: (0, _transformThemeValue.default)(themeSection)(value, themeOpts)
		    };
		}
		function extractArgs(node, vNodes, functions) {
		    vNodes = vNodes.map((vNode)=>resolveVNode(node, vNode, functions));
		    let args = [
		        ""
		    ];
		    for (let vNode of vNodes){
		        if (vNode.type === "div" && vNode.value === ",") {
		            args.push("");
		        } else {
		            args[args.length - 1] += _postcssValueParser.default.stringify(vNode);
		        }
		    }
		    return args;
		}
		function resolveVNode(node, vNode, functions) {
		    if (vNode.type === "function" && functions[vNode.value] !== undefined) {
		        let args = extractArgs(node, vNode.nodes, functions);
		        vNode.type = "word";
		        vNode.value = functions[vNode.value](node, ...args);
		    }
		    return vNode;
		}
		function resolveFunctions(node, input, functions) {
		    return (0, _postcssValueParser.default)(input).walk((vNode)=>{
		        resolveVNode(node, vNode, functions);
		    }).toString();
		}
		let nodeTypePropertyMap = {
		    atrule: "params",
		    decl: "value"
		};
		/**
		 * @param {string} path
		 * @returns {Iterable<[path: string, alpha: string|undefined]>}
		 */ function* toPaths(path) {
		    // Strip quotes from beginning and end of string
		    // This allows the alpha value to be present inside of quotes
		    path = path.replace(/^['"]+|['"]+$/g, "");
		    let matches = path.match(/^([^\s]+)(?![^\[]*\])(?:\s*\/\s*([^\/\s]+))$/);
		    let alpha = undefined;
		    yield [
		        path,
		        undefined
		    ];
		    if (matches) {
		        path = matches[1];
		        alpha = matches[2];
		        yield [
		            path,
		            alpha
		        ];
		    }
		}
		/**
		 *
		 * @param {any} config
		 * @param {string} path
		 * @param {any} defaultValue
		 */ function resolvePath(config, path, defaultValue) {
		    const results = Array.from(toPaths(path)).map(([path, alpha])=>{
		        return Object.assign(validatePath(config, path, defaultValue, {
		            opacityValue: alpha
		        }), {
		            resolvedPath: path,
		            alpha
		        });
		    });
		    var _results_find;
		    return (_results_find = results.find((result)=>result.isValid)) !== null && _results_find !== void 0 ? _results_find : results[0];
		}
		function _default(context) {
		    let config = context.tailwindConfig;
		    let functions = {
		        theme: (node, path, ...defaultValue)=>{
		            let { isValid , value , error , alpha  } = resolvePath(config, path, defaultValue.length ? defaultValue : undefined);
		            if (!isValid) {
		                var _parentNode_raws_tailwind;
		                let parentNode = node.parent;
		                let candidate = (_parentNode_raws_tailwind = parentNode === null || parentNode === void 0 ? void 0 : parentNode.raws.tailwind) === null || _parentNode_raws_tailwind === void 0 ? void 0 : _parentNode_raws_tailwind.candidate;
		                if (parentNode && candidate !== undefined) {
		                    // Remove this utility from any caches
		                    context.markInvalidUtilityNode(parentNode);
		                    // Remove the CSS node from the markup
		                    parentNode.remove();
		                    // Show a warning
		                    _log.default.warn("invalid-theme-key-in-class", [
		                        `The utility \`${candidate}\` contains an invalid theme value and was not generated.`
		                    ]);
		                    return;
		                }
		                throw node.error(error);
		            }
		            let maybeColor = (0, _pluginUtils.parseColorFormat)(value);
		            let isColorFunction = maybeColor !== undefined && typeof maybeColor === "function";
		            if (alpha !== undefined || isColorFunction) {
		                if (alpha === undefined) {
		                    alpha = 1.0;
		                }
		                value = (0, _withAlphaVariable.withAlphaValue)(maybeColor, alpha, maybeColor);
		            }
		            return value;
		        },
		        screen: (node, screen)=>{
		            screen = screen.replace(/^['"]+/g, "").replace(/['"]+$/g, "");
		            let screens = (0, _normalizeScreens.normalizeScreens)(config.theme.screens);
		            let screenDefinition = screens.find(({ name  })=>name === screen);
		            if (!screenDefinition) {
		                throw node.error(`The '${screen}' screen does not exist in your theme.`);
		            }
		            return (0, _buildMediaQuery.default)(screenDefinition);
		        }
		    };
		    return (root)=>{
		        root.walk((node)=>{
		            let property = nodeTypePropertyMap[node.type];
		            if (property === undefined) {
		                return;
		            }
		            node[property] = resolveFunctions(node, node[property], functions);
		        });
		    };
		}
} (evaluateTailwindFunctions));
	return evaluateTailwindFunctions;
}

var substituteScreenAtRules = {};

var hasRequiredSubstituteScreenAtRules;

function requireSubstituteScreenAtRules () {
	if (hasRequiredSubstituteScreenAtRules) return substituteScreenAtRules;
	hasRequiredSubstituteScreenAtRules = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>_default
		});
		const _normalizeScreens = requireNormalizeScreens();
		const _buildMediaQuery = /*#__PURE__*/ _interopRequireDefault(requireBuildMediaQuery());
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function _default({ tailwindConfig: { theme  }  }) {
		    return function(css) {
		        css.walkAtRules("screen", (atRule)=>{
		            let screen = atRule.params;
		            let screens = (0, _normalizeScreens.normalizeScreens)(theme.screens);
		            let screenDefinition = screens.find(({ name  })=>name === screen);
		            if (!screenDefinition) {
		                throw atRule.error(`No \`${screen}\` screen found.`);
		            }
		            atRule.name = "media";
		            atRule.params = (0, _buildMediaQuery.default)(screenDefinition);
		        });
		    };
		}
} (substituteScreenAtRules));
	return substituteScreenAtRules;
}

var resolveDefaultsAtRules = {};

var hasRequiredResolveDefaultsAtRules;

function requireResolveDefaultsAtRules () {
	if (hasRequiredResolveDefaultsAtRules) return resolveDefaultsAtRules;
	hasRequiredResolveDefaultsAtRules = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		function _export(target, all) {
		    for(var name in all)Object.defineProperty(target, name, {
		        enumerable: true,
		        get: all[name]
		    });
		}
		_export(exports, {
		    elementSelectorParser: ()=>elementSelectorParser,
		    default: ()=>resolveDefaultsAtRules
		});
		const _postcss = /*#__PURE__*/ _interopRequireDefault(requirePostcss());
		const _postcssSelectorParser = /*#__PURE__*/ _interopRequireDefault(requireDist());
		const _featureFlags = requireFeatureFlags();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		let getNode = {
		    id (node) {
		        return _postcssSelectorParser.default.attribute({
		            attribute: "id",
		            operator: "=",
		            value: node.value,
		            quoteMark: '"'
		        });
		    }
		};
		function minimumImpactSelector(nodes) {
		    let rest = nodes.filter((node)=>{
		        // Keep non-pseudo nodes
		        if (node.type !== "pseudo") return true;
		        // Keep pseudo nodes that have subnodes
		        // E.g.: `:not()` contains subnodes inside the parentheses
		        if (node.nodes.length > 0) return true;
		        // Keep pseudo `elements`
		        // This implicitly means that we ignore pseudo `classes`
		        return node.value.startsWith("::") || [
		            ":before",
		            ":after",
		            ":first-line",
		            ":first-letter"
		        ].includes(node.value);
		    }).reverse();
		    let searchFor = new Set([
		        "tag",
		        "class",
		        "id",
		        "attribute"
		    ]);
		    let splitPointIdx = rest.findIndex((n)=>searchFor.has(n.type));
		    if (splitPointIdx === -1) return rest.reverse().join("").trim();
		    let node = rest[splitPointIdx];
		    let bestNode = getNode[node.type] ? getNode[node.type](node) : node;
		    rest = rest.slice(0, splitPointIdx);
		    let combinatorIdx = rest.findIndex((n)=>n.type === "combinator" && n.value === ">");
		    if (combinatorIdx !== -1) {
		        rest.splice(0, combinatorIdx);
		        rest.unshift(_postcssSelectorParser.default.universal());
		    }
		    return [
		        bestNode,
		        ...rest.reverse()
		    ].join("").trim();
		}
		let elementSelectorParser = (0, _postcssSelectorParser.default)((selectors)=>{
		    return selectors.map((s)=>{
		        let nodes = s.split((n)=>n.type === "combinator" && n.value === " ").pop();
		        return minimumImpactSelector(nodes);
		    });
		});
		let cache = new Map();
		function extractElementSelector(selector) {
		    if (!cache.has(selector)) {
		        cache.set(selector, elementSelectorParser.transformSync(selector));
		    }
		    return cache.get(selector);
		}
		function resolveDefaultsAtRules({ tailwindConfig  }) {
		    return (root)=>{
		        let variableNodeMap = new Map();
		        /** @type {Set<import('postcss').AtRule>} */ let universals = new Set();
		        root.walkAtRules("defaults", (rule)=>{
		            if (rule.nodes && rule.nodes.length > 0) {
		                universals.add(rule);
		                return;
		            }
		            let variable = rule.params;
		            if (!variableNodeMap.has(variable)) {
		                variableNodeMap.set(variable, new Set());
		            }
		            variableNodeMap.get(variable).add(rule.parent);
		            rule.remove();
		        });
		        if ((0, _featureFlags.flagEnabled)(tailwindConfig, "optimizeUniversalDefaults")) {
		            for (let universal of universals){
		                /** @type {Map<string, Set<string>>} */ let selectorGroups = new Map();
		                var _variableNodeMap_get;
		                let rules = (_variableNodeMap_get = variableNodeMap.get(universal.params)) !== null && _variableNodeMap_get !== void 0 ? _variableNodeMap_get : [];
		                for (let rule of rules){
		                    for (let selector of extractElementSelector(rule.selector)){
		                        // If selector contains a vendor prefix after a pseudo element or class,
		                        // we consider them separately because merging the declarations into
		                        // a single rule will cause browsers that do not understand the
		                        // vendor prefix to throw out the whole rule
		                        let selectorGroupName = selector.includes(":-") || selector.includes("::-") ? selector : "__DEFAULT__";
		                        var _selectorGroups_get;
		                        let selectors = (_selectorGroups_get = selectorGroups.get(selectorGroupName)) !== null && _selectorGroups_get !== void 0 ? _selectorGroups_get : new Set();
		                        selectorGroups.set(selectorGroupName, selectors);
		                        selectors.add(selector);
		                    }
		                }
		                if ((0, _featureFlags.flagEnabled)(tailwindConfig, "optimizeUniversalDefaults")) {
		                    if (selectorGroups.size === 0) {
		                        universal.remove();
		                        continue;
		                    }
		                    for (let [, selectors1] of selectorGroups){
		                        let universalRule = _postcss.default.rule({
		                            source: universal.source
		                        });
		                        universalRule.selectors = [
		                            ...selectors1
		                        ];
		                        universalRule.append(universal.nodes.map((node)=>node.clone()));
		                        universal.before(universalRule);
		                    }
		                }
		                universal.remove();
		            }
		        } else if (universals.size) {
		            let universalRule1 = _postcss.default.rule({
		                selectors: [
		                    "*",
		                    "::before",
		                    "::after"
		                ]
		            });
		            for (let universal1 of universals){
		                universalRule1.append(universal1.nodes);
		                if (!universalRule1.parent) {
		                    universal1.before(universalRule1);
		                }
		                if (!universalRule1.source) {
		                    universalRule1.source = universal1.source;
		                }
		                universal1.remove();
		            }
		            let backdropRule = universalRule1.clone({
		                selectors: [
		                    "::backdrop"
		                ]
		            });
		            universalRule1.after(backdropRule);
		        }
		    };
		}
} (resolveDefaultsAtRules));
	return resolveDefaultsAtRules;
}

var collapseAdjacentRules = {};

var hasRequiredCollapseAdjacentRules;

function requireCollapseAdjacentRules () {
	if (hasRequiredCollapseAdjacentRules) return collapseAdjacentRules;
	hasRequiredCollapseAdjacentRules = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>collapseAdjacentRules
		});
		let comparisonMap = {
		    atrule: [
		        "name",
		        "params"
		    ],
		    rule: [
		        "selector"
		    ]
		};
		let types = new Set(Object.keys(comparisonMap));
		function collapseAdjacentRules() {
		    function collapseRulesIn(root) {
		        let currentRule = null;
		        root.each((node)=>{
		            if (!types.has(node.type)) {
		                currentRule = null;
		                return;
		            }
		            if (currentRule === null) {
		                currentRule = node;
		                return;
		            }
		            let properties = comparisonMap[node.type];
		            var _node_property, _currentRule_property;
		            if (node.type === "atrule" && node.name === "font-face") {
		                currentRule = node;
		            } else if (properties.every((property)=>((_node_property = node[property]) !== null && _node_property !== void 0 ? _node_property : "").replace(/\s+/g, " ") === ((_currentRule_property = currentRule[property]) !== null && _currentRule_property !== void 0 ? _currentRule_property : "").replace(/\s+/g, " "))) {
		                // An AtRule may not have children (for example if we encounter duplicate @import url(…) rules)
		                if (node.nodes) {
		                    currentRule.append(node.nodes);
		                }
		                node.remove();
		            } else {
		                currentRule = node;
		            }
		        });
		        // After we've collapsed adjacent rules & at-rules, we need to collapse
		        // adjacent rules & at-rules that are children of at-rules.
		        // We do not care about nesting rules because Tailwind CSS
		        // explicitly does not handle rule nesting on its own as
		        // the user is expected to use a nesting plugin
		        root.each((node)=>{
		            if (node.type === "atrule") {
		                collapseRulesIn(node);
		            }
		        });
		    }
		    return (root)=>{
		        collapseRulesIn(root);
		    };
		}
} (collapseAdjacentRules));
	return collapseAdjacentRules;
}

var collapseDuplicateDeclarations = {};

var hasRequiredCollapseDuplicateDeclarations;

function requireCollapseDuplicateDeclarations () {
	if (hasRequiredCollapseDuplicateDeclarations) return collapseDuplicateDeclarations;
	hasRequiredCollapseDuplicateDeclarations = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>collapseDuplicateDeclarations
		});
		function collapseDuplicateDeclarations() {
		    return (root)=>{
		        root.walkRules((node)=>{
		            let seen = new Map();
		            let droppable = new Set([]);
		            let byProperty = new Map();
		            node.walkDecls((decl)=>{
		                // This could happen if we have nested selectors. In that case the
		                // parent will loop over all its declarations but also the declarations
		                // of nested rules. With this we ensure that we are shallowly checking
		                // declarations.
		                if (decl.parent !== node) {
		                    return;
		                }
		                if (seen.has(decl.prop)) {
		                    // Exact same value as what we have seen so far
		                    if (seen.get(decl.prop).value === decl.value) {
		                        // Keep the last one, drop the one we've seen so far
		                        droppable.add(seen.get(decl.prop));
		                        // Override the existing one with the new value. This is necessary
		                        // so that if we happen to have more than one declaration with the
		                        // same value, that we keep removing the previous one. Otherwise we
		                        // will only remove the *first* one.
		                        seen.set(decl.prop, decl);
		                        return;
		                    }
		                    // Not the same value, so we need to check if we can merge it so
		                    // let's collect it first.
		                    if (!byProperty.has(decl.prop)) {
		                        byProperty.set(decl.prop, new Set());
		                    }
		                    byProperty.get(decl.prop).add(seen.get(decl.prop));
		                    byProperty.get(decl.prop).add(decl);
		                }
		                seen.set(decl.prop, decl);
		            });
		            // Drop all the duplicate declarations with the exact same value we've
		            // already seen so far.
		            for (let decl of droppable){
		                decl.remove();
		            }
		            // Analyze the declarations based on its unit, drop all the declarations
		            // with the same unit but the last one in the list.
		            for (let declarations of byProperty.values()){
		                let byUnit = new Map();
		                for (let decl1 of declarations){
		                    let unit = resolveUnit(decl1.value);
		                    if (unit === null) {
		                        continue;
		                    }
		                    if (!byUnit.has(unit)) {
		                        byUnit.set(unit, new Set());
		                    }
		                    byUnit.get(unit).add(decl1);
		                }
		                for (let declarations1 of byUnit.values()){
		                    // Get all but the last one
		                    let removableDeclarations = Array.from(declarations1).slice(0, -1);
		                    for (let decl2 of removableDeclarations){
		                        decl2.remove();
		                    }
		                }
		            }
		        });
		    };
		}
		let UNITLESS_NUMBER = Symbol("unitless-number");
		function resolveUnit(input) {
		    let result = /^-?\d*.?\d+([\w%]+)?$/g.exec(input);
		    if (result) {
		        var _result_;
		        return (_result_ = result[1]) !== null && _result_ !== void 0 ? _result_ : UNITLESS_NUMBER;
		    }
		    return null;
		}
} (collapseDuplicateDeclarations));
	return collapseDuplicateDeclarations;
}

var partitionApplyAtRules = {};

var hasRequiredPartitionApplyAtRules;

function requirePartitionApplyAtRules () {
	if (hasRequiredPartitionApplyAtRules) return partitionApplyAtRules;
	hasRequiredPartitionApplyAtRules = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>expandApplyAtRules
		});
		function partitionRules(root) {
		    if (!root.walkAtRules) return;
		    let applyParents = new Set();
		    root.walkAtRules("apply", (rule)=>{
		        applyParents.add(rule.parent);
		    });
		    if (applyParents.size === 0) {
		        return;
		    }
		    for (let rule of applyParents){
		        let nodeGroups = [];
		        let lastGroup = [];
		        for (let node of rule.nodes){
		            if (node.type === "atrule" && node.name === "apply") {
		                if (lastGroup.length > 0) {
		                    nodeGroups.push(lastGroup);
		                    lastGroup = [];
		                }
		                nodeGroups.push([
		                    node
		                ]);
		            } else {
		                lastGroup.push(node);
		            }
		        }
		        if (lastGroup.length > 0) {
		            nodeGroups.push(lastGroup);
		        }
		        if (nodeGroups.length === 1) {
		            continue;
		        }
		        for (let group of [
		            ...nodeGroups
		        ].reverse()){
		            let clone = rule.clone({
		                nodes: []
		            });
		            clone.append(group);
		            rule.after(clone);
		        }
		        rule.remove();
		    }
		}
		function expandApplyAtRules() {
		    return (root)=>{
		        partitionRules(root);
		    };
		}
} (partitionApplyAtRules));
	return partitionApplyAtRules;
}

var detectNesting = {};

var hasRequiredDetectNesting;

function requireDetectNesting () {
	if (hasRequiredDetectNesting) return detectNesting;
	hasRequiredDetectNesting = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>_default
		});
		function isRoot(node) {
		    return node.type === "root";
		}
		function isAtLayer(node) {
		    return node.type === "atrule" && node.name === "layer";
		}
		function _default(_context) {
		    return (root, result)=>{
		        let found = false;
		        root.walkAtRules("tailwind", (node)=>{
		            if (found) return false;
		            if (node.parent && !(isRoot(node.parent) || isAtLayer(node.parent))) {
		                found = true;
		                node.warn(result, [
		                    "Nested @tailwind rules were detected, but are not supported.",
		                    "Consider using a prefix to scope Tailwind's classes: https://tailwindcss.com/docs/configuration#prefix",
		                    "Alternatively, use the important selector strategy: https://tailwindcss.com/docs/configuration#selector-strategy"
		                ].join("\n"));
		                return false;
		            }
		        });
		        root.walkRules((rule)=>{
		            if (found) return false;
		            rule.walkRules((nestedRule)=>{
		                found = true;
		                nestedRule.warn(result, [
		                    "Nested CSS was detected, but CSS nesting has not been configured correctly.",
		                    "Please enable a CSS nesting plugin *before* Tailwind in your configuration.",
		                    "See how here: https://tailwindcss.com/docs/using-with-preprocessors#nesting"
		                ].join("\n"));
		                return false;
		            });
		        });
		    };
		}
} (detectNesting));
	return detectNesting;
}

var hasRequiredProcessTailwindFeatures;

function requireProcessTailwindFeatures () {
	if (hasRequiredProcessTailwindFeatures) return processTailwindFeatures;
	hasRequiredProcessTailwindFeatures = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "default", {
		    enumerable: true,
		    get: ()=>processTailwindFeatures
		});
		const _normalizeTailwindDirectives = /*#__PURE__*/ _interopRequireDefault(requireNormalizeTailwindDirectives());
		const _expandTailwindAtRules = /*#__PURE__*/ _interopRequireDefault(requireExpandTailwindAtRules());
		const _expandApplyAtRules = /*#__PURE__*/ _interopRequireDefault(requireExpandApplyAtRules());
		const _evaluateTailwindFunctions = /*#__PURE__*/ _interopRequireDefault(requireEvaluateTailwindFunctions());
		const _substituteScreenAtRules = /*#__PURE__*/ _interopRequireDefault(requireSubstituteScreenAtRules());
		const _resolveDefaultsAtRules = /*#__PURE__*/ _interopRequireDefault(requireResolveDefaultsAtRules());
		const _collapseAdjacentRules = /*#__PURE__*/ _interopRequireDefault(requireCollapseAdjacentRules());
		const _collapseDuplicateDeclarations = /*#__PURE__*/ _interopRequireDefault(requireCollapseDuplicateDeclarations());
		const _partitionApplyAtRules = /*#__PURE__*/ _interopRequireDefault(requirePartitionApplyAtRules());
		const _detectNesting = /*#__PURE__*/ _interopRequireDefault(requireDetectNesting());
		const _setupContextUtils = requireSetupContextUtils();
		const _featureFlags = requireFeatureFlags();
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function processTailwindFeatures(setupContext) {
		    return function(root, result) {
		        let { tailwindDirectives , applyDirectives  } = (0, _normalizeTailwindDirectives.default)(root);
		        (0, _detectNesting.default)()(root, result);
		        // Partition apply rules that are found in the css
		        // itself.
		        (0, _partitionApplyAtRules.default)()(root, result);
		        let context = setupContext({
		            tailwindDirectives,
		            applyDirectives,
		            registerDependency (dependency) {
		                result.messages.push({
		                    plugin: "tailwindcss",
		                    parent: result.opts.from,
		                    ...dependency
		                });
		            },
		            createContext (tailwindConfig, changedContent) {
		                return (0, _setupContextUtils.createContext)(tailwindConfig, changedContent, root);
		            }
		        })(root, result);
		        if (context.tailwindConfig.separator === "-") {
		            throw new Error("The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead.");
		        }
		        (0, _featureFlags.issueFlagNotices)(context.tailwindConfig);
		        (0, _expandTailwindAtRules.default)(context)(root, result);
		        // Partition apply rules that are generated by
		        // addComponents, addUtilities and so on.
		        (0, _partitionApplyAtRules.default)()(root, result);
		        (0, _expandApplyAtRules.default)(context)(root, result);
		        (0, _evaluateTailwindFunctions.default)(context)(root, result);
		        (0, _substituteScreenAtRules.default)(context)(root, result);
		        (0, _resolveDefaultsAtRules.default)(context)(root, result);
		        (0, _collapseAdjacentRules.default)(context)(root, result);
		        (0, _collapseDuplicateDeclarations.default)(context)(root, result);
		    };
		}
} (processTailwindFeatures));
	return processTailwindFeatures;
}

var findAtConfigPath = {};

var hasRequiredFindAtConfigPath;

function requireFindAtConfigPath () {
	if (hasRequiredFindAtConfigPath) return findAtConfigPath;
	hasRequiredFindAtConfigPath = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", {
		    value: true
		});
		Object.defineProperty(exports, "findAtConfigPath", {
		    enumerable: true,
		    get: ()=>findAtConfigPath
		});
		const _fs = /*#__PURE__*/ _interopRequireDefault(require$$3);
		const _path = /*#__PURE__*/ _interopRequireDefault(require$$3);
		function _interopRequireDefault(obj) {
		    return obj && obj.__esModule ? obj : {
		        default: obj
		    };
		}
		function findAtConfigPath(root, result) {
		    let configPath = null;
		    let relativeTo = null;
		    root.walkAtRules("config", (rule)=>{
		        var _rule_source;
		        var _rule_source_input_file, _ref;
		        relativeTo = (_ref = (_rule_source_input_file = (_rule_source = rule.source) === null || _rule_source === void 0 ? void 0 : _rule_source.input.file) !== null && _rule_source_input_file !== void 0 ? _rule_source_input_file : result.opts.from) !== null && _ref !== void 0 ? _ref : null;
		        if (relativeTo === null) {
		            throw rule.error("The `@config` directive cannot be used without setting `from` in your PostCSS config.");
		        }
		        if (configPath) {
		            throw rule.error("Only one `@config` directive is allowed per file.");
		        }
		        let matches = rule.params.match(/(['"])(.*?)\1/);
		        if (!matches) {
		            throw rule.error("A path is required when using the `@config` directive.");
		        }
		        let inputPath = matches[2];
		        if (_path.default.isAbsolute(inputPath)) {
		            throw rule.error("The `@config` directive cannot be used with an absolute path.");
		        }
		        configPath = _path.default.resolve(_path.default.dirname(relativeTo), inputPath);
		        if (!_fs.default.existsSync(configPath)) {
		            throw rule.error(`The config file at "${inputPath}" does not exist. Make sure the path is correct and the file exists.`);
		        }
		        rule.remove();
		    });
		    return configPath ? configPath : null;
		}
} (findAtConfigPath));
	return findAtConfigPath;
}

const require$$0 = [
	{
		name: "nodejs",
		version: "0.2.0",
		date: "2011-08-26",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "0.3.0",
		date: "2011-08-26",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "0.4.0",
		date: "2011-08-26",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "0.5.0",
		date: "2011-08-26",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "0.6.0",
		date: "2011-11-04",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "0.7.0",
		date: "2012-01-17",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "0.8.0",
		date: "2012-06-22",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "0.9.0",
		date: "2012-07-20",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "0.10.0",
		date: "2013-03-11",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "0.11.0",
		date: "2013-03-28",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "0.12.0",
		date: "2015-02-06",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "4.0.0",
		date: "2015-09-08",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "4.1.0",
		date: "2015-09-17",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "4.2.0",
		date: "2015-10-12",
		lts: "Argon",
		security: false
	},
	{
		name: "nodejs",
		version: "4.3.0",
		date: "2016-02-09",
		lts: "Argon",
		security: false
	},
	{
		name: "nodejs",
		version: "4.4.0",
		date: "2016-03-08",
		lts: "Argon",
		security: false
	},
	{
		name: "nodejs",
		version: "4.5.0",
		date: "2016-08-16",
		lts: "Argon",
		security: false
	},
	{
		name: "nodejs",
		version: "4.6.0",
		date: "2016-09-27",
		lts: "Argon",
		security: true
	},
	{
		name: "nodejs",
		version: "4.7.0",
		date: "2016-12-06",
		lts: "Argon",
		security: false
	},
	{
		name: "nodejs",
		version: "4.8.0",
		date: "2017-02-21",
		lts: "Argon",
		security: false
	},
	{
		name: "nodejs",
		version: "4.9.0",
		date: "2018-03-28",
		lts: "Argon",
		security: true
	},
	{
		name: "nodejs",
		version: "5.0.0",
		date: "2015-10-29",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "5.1.0",
		date: "2015-11-17",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "5.2.0",
		date: "2015-12-09",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "5.3.0",
		date: "2015-12-15",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "5.4.0",
		date: "2016-01-06",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "5.5.0",
		date: "2016-01-21",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "5.6.0",
		date: "2016-02-09",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "5.7.0",
		date: "2016-02-23",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "5.8.0",
		date: "2016-03-09",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "5.9.0",
		date: "2016-03-16",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "5.10.0",
		date: "2016-04-01",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "5.11.0",
		date: "2016-04-21",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "5.12.0",
		date: "2016-06-23",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "6.0.0",
		date: "2016-04-26",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "6.1.0",
		date: "2016-05-05",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "6.2.0",
		date: "2016-05-17",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "6.3.0",
		date: "2016-07-06",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "6.4.0",
		date: "2016-08-12",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "6.5.0",
		date: "2016-08-26",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "6.6.0",
		date: "2016-09-14",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "6.7.0",
		date: "2016-09-27",
		lts: false,
		security: true
	},
	{
		name: "nodejs",
		version: "6.8.0",
		date: "2016-10-12",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "6.9.0",
		date: "2016-10-18",
		lts: "Boron",
		security: false
	},
	{
		name: "nodejs",
		version: "6.10.0",
		date: "2017-02-21",
		lts: "Boron",
		security: false
	},
	{
		name: "nodejs",
		version: "6.11.0",
		date: "2017-06-06",
		lts: "Boron",
		security: false
	},
	{
		name: "nodejs",
		version: "6.12.0",
		date: "2017-11-06",
		lts: "Boron",
		security: false
	},
	{
		name: "nodejs",
		version: "6.13.0",
		date: "2018-02-10",
		lts: "Boron",
		security: false
	},
	{
		name: "nodejs",
		version: "6.14.0",
		date: "2018-03-28",
		lts: "Boron",
		security: true
	},
	{
		name: "nodejs",
		version: "6.15.0",
		date: "2018-11-27",
		lts: "Boron",
		security: true
	},
	{
		name: "nodejs",
		version: "6.16.0",
		date: "2018-12-26",
		lts: "Boron",
		security: false
	},
	{
		name: "nodejs",
		version: "6.17.0",
		date: "2019-02-28",
		lts: "Boron",
		security: true
	},
	{
		name: "nodejs",
		version: "7.0.0",
		date: "2016-10-25",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "7.1.0",
		date: "2016-11-08",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "7.2.0",
		date: "2016-11-22",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "7.3.0",
		date: "2016-12-20",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "7.4.0",
		date: "2017-01-04",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "7.5.0",
		date: "2017-01-31",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "7.6.0",
		date: "2017-02-21",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "7.7.0",
		date: "2017-02-28",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "7.8.0",
		date: "2017-03-29",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "7.9.0",
		date: "2017-04-11",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "7.10.0",
		date: "2017-05-02",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "8.0.0",
		date: "2017-05-30",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "8.1.0",
		date: "2017-06-08",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "8.2.0",
		date: "2017-07-19",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "8.3.0",
		date: "2017-08-08",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "8.4.0",
		date: "2017-08-15",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "8.5.0",
		date: "2017-09-12",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "8.6.0",
		date: "2017-09-26",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "8.7.0",
		date: "2017-10-11",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "8.8.0",
		date: "2017-10-24",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "8.9.0",
		date: "2017-10-31",
		lts: "Carbon",
		security: false
	},
	{
		name: "nodejs",
		version: "8.10.0",
		date: "2018-03-06",
		lts: "Carbon",
		security: false
	},
	{
		name: "nodejs",
		version: "8.11.0",
		date: "2018-03-28",
		lts: "Carbon",
		security: true
	},
	{
		name: "nodejs",
		version: "8.12.0",
		date: "2018-09-10",
		lts: "Carbon",
		security: false
	},
	{
		name: "nodejs",
		version: "8.13.0",
		date: "2018-11-20",
		lts: "Carbon",
		security: false
	},
	{
		name: "nodejs",
		version: "8.14.0",
		date: "2018-11-27",
		lts: "Carbon",
		security: true
	},
	{
		name: "nodejs",
		version: "8.15.0",
		date: "2018-12-26",
		lts: "Carbon",
		security: false
	},
	{
		name: "nodejs",
		version: "8.16.0",
		date: "2019-04-16",
		lts: "Carbon",
		security: false
	},
	{
		name: "nodejs",
		version: "8.17.0",
		date: "2019-12-17",
		lts: "Carbon",
		security: true
	},
	{
		name: "nodejs",
		version: "9.0.0",
		date: "2017-10-31",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "9.1.0",
		date: "2017-11-07",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "9.2.0",
		date: "2017-11-14",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "9.3.0",
		date: "2017-12-12",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "9.4.0",
		date: "2018-01-10",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "9.5.0",
		date: "2018-01-31",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "9.6.0",
		date: "2018-02-21",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "9.7.0",
		date: "2018-03-01",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "9.8.0",
		date: "2018-03-07",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "9.9.0",
		date: "2018-03-21",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "9.10.0",
		date: "2018-03-28",
		lts: false,
		security: true
	},
	{
		name: "nodejs",
		version: "9.11.0",
		date: "2018-04-04",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.0.0",
		date: "2018-04-24",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.1.0",
		date: "2018-05-08",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.2.0",
		date: "2018-05-23",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.3.0",
		date: "2018-05-29",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.4.0",
		date: "2018-06-06",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.5.0",
		date: "2018-06-20",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.6.0",
		date: "2018-07-04",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.7.0",
		date: "2018-07-18",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.8.0",
		date: "2018-08-01",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.9.0",
		date: "2018-08-15",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.10.0",
		date: "2018-09-06",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.11.0",
		date: "2018-09-19",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.12.0",
		date: "2018-10-10",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "10.13.0",
		date: "2018-10-30",
		lts: "Dubnium",
		security: false
	},
	{
		name: "nodejs",
		version: "10.14.0",
		date: "2018-11-27",
		lts: "Dubnium",
		security: true
	},
	{
		name: "nodejs",
		version: "10.15.0",
		date: "2018-12-26",
		lts: "Dubnium",
		security: false
	},
	{
		name: "nodejs",
		version: "10.16.0",
		date: "2019-05-28",
		lts: "Dubnium",
		security: false
	},
	{
		name: "nodejs",
		version: "10.17.0",
		date: "2019-10-22",
		lts: "Dubnium",
		security: false
	},
	{
		name: "nodejs",
		version: "10.18.0",
		date: "2019-12-17",
		lts: "Dubnium",
		security: true
	},
	{
		name: "nodejs",
		version: "10.19.0",
		date: "2020-02-05",
		lts: "Dubnium",
		security: true
	},
	{
		name: "nodejs",
		version: "10.20.0",
		date: "2020-03-26",
		lts: "Dubnium",
		security: false
	},
	{
		name: "nodejs",
		version: "10.21.0",
		date: "2020-06-02",
		lts: "Dubnium",
		security: true
	},
	{
		name: "nodejs",
		version: "10.22.0",
		date: "2020-07-21",
		lts: "Dubnium",
		security: false
	},
	{
		name: "nodejs",
		version: "10.23.0",
		date: "2020-10-27",
		lts: "Dubnium",
		security: false
	},
	{
		name: "nodejs",
		version: "10.24.0",
		date: "2021-02-23",
		lts: "Dubnium",
		security: true
	},
	{
		name: "nodejs",
		version: "11.0.0",
		date: "2018-10-23",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.1.0",
		date: "2018-10-30",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.2.0",
		date: "2018-11-15",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.3.0",
		date: "2018-11-27",
		lts: false,
		security: true
	},
	{
		name: "nodejs",
		version: "11.4.0",
		date: "2018-12-07",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.5.0",
		date: "2018-12-18",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.6.0",
		date: "2018-12-26",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.7.0",
		date: "2019-01-17",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.8.0",
		date: "2019-01-24",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.9.0",
		date: "2019-01-30",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.10.0",
		date: "2019-02-14",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.11.0",
		date: "2019-03-05",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.12.0",
		date: "2019-03-14",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.13.0",
		date: "2019-03-28",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.14.0",
		date: "2019-04-10",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "11.15.0",
		date: "2019-04-30",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.0.0",
		date: "2019-04-23",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.1.0",
		date: "2019-04-29",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.2.0",
		date: "2019-05-07",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.3.0",
		date: "2019-05-21",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.4.0",
		date: "2019-06-04",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.5.0",
		date: "2019-06-26",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.6.0",
		date: "2019-07-03",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.7.0",
		date: "2019-07-23",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.8.0",
		date: "2019-08-06",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.9.0",
		date: "2019-08-20",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.10.0",
		date: "2019-09-04",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.11.0",
		date: "2019-09-25",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.12.0",
		date: "2019-10-11",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "12.13.0",
		date: "2019-10-21",
		lts: "Erbium",
		security: false
	},
	{
		name: "nodejs",
		version: "12.14.0",
		date: "2019-12-17",
		lts: "Erbium",
		security: true
	},
	{
		name: "nodejs",
		version: "12.15.0",
		date: "2020-02-05",
		lts: "Erbium",
		security: true
	},
	{
		name: "nodejs",
		version: "12.16.0",
		date: "2020-02-11",
		lts: "Erbium",
		security: false
	},
	{
		name: "nodejs",
		version: "12.17.0",
		date: "2020-05-26",
		lts: "Erbium",
		security: false
	},
	{
		name: "nodejs",
		version: "12.18.0",
		date: "2020-06-02",
		lts: "Erbium",
		security: true
	},
	{
		name: "nodejs",
		version: "12.19.0",
		date: "2020-10-06",
		lts: "Erbium",
		security: false
	},
	{
		name: "nodejs",
		version: "12.20.0",
		date: "2020-11-24",
		lts: "Erbium",
		security: false
	},
	{
		name: "nodejs",
		version: "12.21.0",
		date: "2021-02-23",
		lts: "Erbium",
		security: true
	},
	{
		name: "nodejs",
		version: "12.22.0",
		date: "2021-03-30",
		lts: "Erbium",
		security: false
	},
	{
		name: "nodejs",
		version: "13.0.0",
		date: "2019-10-22",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "13.1.0",
		date: "2019-11-05",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "13.2.0",
		date: "2019-11-21",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "13.3.0",
		date: "2019-12-03",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "13.4.0",
		date: "2019-12-17",
		lts: false,
		security: true
	},
	{
		name: "nodejs",
		version: "13.5.0",
		date: "2019-12-18",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "13.6.0",
		date: "2020-01-07",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "13.7.0",
		date: "2020-01-21",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "13.8.0",
		date: "2020-02-05",
		lts: false,
		security: true
	},
	{
		name: "nodejs",
		version: "13.9.0",
		date: "2020-02-18",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "13.10.0",
		date: "2020-03-04",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "13.11.0",
		date: "2020-03-12",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "13.12.0",
		date: "2020-03-26",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "13.13.0",
		date: "2020-04-14",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "13.14.0",
		date: "2020-04-29",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.0.0",
		date: "2020-04-21",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.1.0",
		date: "2020-04-29",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.2.0",
		date: "2020-05-05",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.3.0",
		date: "2020-05-19",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.4.0",
		date: "2020-06-02",
		lts: false,
		security: true
	},
	{
		name: "nodejs",
		version: "14.5.0",
		date: "2020-06-30",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.6.0",
		date: "2020-07-20",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.7.0",
		date: "2020-07-29",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.8.0",
		date: "2020-08-11",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.9.0",
		date: "2020-08-27",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.10.0",
		date: "2020-09-08",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.11.0",
		date: "2020-09-15",
		lts: false,
		security: true
	},
	{
		name: "nodejs",
		version: "14.12.0",
		date: "2020-09-22",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.13.0",
		date: "2020-09-29",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.14.0",
		date: "2020-10-15",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "14.15.0",
		date: "2020-10-27",
		lts: "Fermium",
		security: false
	},
	{
		name: "nodejs",
		version: "14.16.0",
		date: "2021-02-23",
		lts: "Fermium",
		security: true
	},
	{
		name: "nodejs",
		version: "14.17.0",
		date: "2021-05-11",
		lts: "Fermium",
		security: false
	},
	{
		name: "nodejs",
		version: "14.18.0",
		date: "2021-09-28",
		lts: "Fermium",
		security: false
	},
	{
		name: "nodejs",
		version: "14.19.0",
		date: "2022-02-01",
		lts: "Fermium",
		security: false
	},
	{
		name: "nodejs",
		version: "14.20.0",
		date: "2022-07-07",
		lts: "Fermium",
		security: true
	},
	{
		name: "nodejs",
		version: "14.21.0",
		date: "2022-11-01",
		lts: "Fermium",
		security: false
	},
	{
		name: "nodejs",
		version: "15.0.0",
		date: "2020-10-20",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.1.0",
		date: "2020-11-04",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.2.0",
		date: "2020-11-10",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.3.0",
		date: "2020-11-24",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.4.0",
		date: "2020-12-09",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.5.0",
		date: "2020-12-22",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.6.0",
		date: "2021-01-14",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.7.0",
		date: "2021-01-25",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.8.0",
		date: "2021-02-02",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.9.0",
		date: "2021-02-18",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.10.0",
		date: "2021-02-23",
		lts: false,
		security: true
	},
	{
		name: "nodejs",
		version: "15.11.0",
		date: "2021-03-03",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.12.0",
		date: "2021-03-17",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.13.0",
		date: "2021-03-31",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "15.14.0",
		date: "2021-04-06",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.0.0",
		date: "2021-04-20",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.1.0",
		date: "2021-05-04",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.2.0",
		date: "2021-05-19",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.3.0",
		date: "2021-06-03",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.4.0",
		date: "2021-06-23",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.5.0",
		date: "2021-07-14",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.6.0",
		date: "2021-07-29",
		lts: false,
		security: true
	},
	{
		name: "nodejs",
		version: "16.7.0",
		date: "2021-08-18",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.8.0",
		date: "2021-08-25",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.9.0",
		date: "2021-09-07",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.10.0",
		date: "2021-09-22",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.11.0",
		date: "2021-10-08",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.12.0",
		date: "2021-10-20",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "16.13.0",
		date: "2021-10-26",
		lts: "Gallium",
		security: false
	},
	{
		name: "nodejs",
		version: "16.14.0",
		date: "2022-02-08",
		lts: "Gallium",
		security: false
	},
	{
		name: "nodejs",
		version: "16.15.0",
		date: "2022-04-26",
		lts: "Gallium",
		security: false
	},
	{
		name: "nodejs",
		version: "16.16.0",
		date: "2022-07-07",
		lts: "Gallium",
		security: true
	},
	{
		name: "nodejs",
		version: "16.17.0",
		date: "2022-08-16",
		lts: "Gallium",
		security: false
	},
	{
		name: "nodejs",
		version: "16.18.0",
		date: "2022-10-12",
		lts: "Gallium",
		security: false
	},
	{
		name: "nodejs",
		version: "16.19.0",
		date: "2022-12-13",
		lts: "Gallium",
		security: false
	},
	{
		name: "nodejs",
		version: "17.0.0",
		date: "2021-10-19",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "17.1.0",
		date: "2021-11-09",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "17.2.0",
		date: "2021-11-30",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "17.3.0",
		date: "2021-12-17",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "17.4.0",
		date: "2022-01-18",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "17.5.0",
		date: "2022-02-10",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "17.6.0",
		date: "2022-02-22",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "17.7.0",
		date: "2022-03-09",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "17.8.0",
		date: "2022-03-22",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "17.9.0",
		date: "2022-04-07",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "18.0.0",
		date: "2022-04-18",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "18.1.0",
		date: "2022-05-03",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "18.2.0",
		date: "2022-05-17",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "18.3.0",
		date: "2022-06-02",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "18.4.0",
		date: "2022-06-16",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "18.5.0",
		date: "2022-07-06",
		lts: false,
		security: true
	},
	{
		name: "nodejs",
		version: "18.6.0",
		date: "2022-07-13",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "18.7.0",
		date: "2022-07-26",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "18.8.0",
		date: "2022-08-24",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "18.9.0",
		date: "2022-09-07",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "18.10.0",
		date: "2022-09-28",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "18.11.0",
		date: "2022-10-13",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "18.12.0",
		date: "2022-10-25",
		lts: "Hydrogen",
		security: false
	},
	{
		name: "nodejs",
		version: "18.13.0",
		date: "2023-01-05",
		lts: "Hydrogen",
		security: false
	},
	{
		name: "nodejs",
		version: "18.14.0",
		date: "2023-02-01",
		lts: "Hydrogen",
		security: false
	},
	{
		name: "nodejs",
		version: "19.0.0",
		date: "2022-10-17",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "19.1.0",
		date: "2022-11-14",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "19.2.0",
		date: "2022-11-29",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "19.3.0",
		date: "2022-12-14",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "19.4.0",
		date: "2023-01-05",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "19.5.0",
		date: "2023-01-24",
		lts: false,
		security: false
	},
	{
		name: "nodejs",
		version: "19.6.0",
		date: "2023-02-01",
		lts: false,
		security: false
	}
];

var agents$1 = {};

var browsers$1 = {};

var browsers;
var hasRequiredBrowsers$1;

function requireBrowsers$1 () {
	if (hasRequiredBrowsers$1) return browsers;
	hasRequiredBrowsers$1 = 1;
	browsers={A:"ie",B:"edge",C:"firefox",D:"chrome",E:"safari",F:"opera",G:"ios_saf",H:"op_mini",I:"android",J:"bb",K:"op_mob",L:"and_chr",M:"and_ff",N:"ie_mob",O:"and_uc",P:"samsung",Q:"and_qq",R:"baidu",S:"kaios"};
	return browsers;
}

var hasRequiredBrowsers;

function requireBrowsers () {
	if (hasRequiredBrowsers) return browsers$1;
	hasRequiredBrowsers = 1;
	browsers$1.browsers = requireBrowsers$1();
	return browsers$1;
}

var browserVersions$1 = {};

var browserVersions;
var hasRequiredBrowserVersions$1;

function requireBrowserVersions$1 () {
	if (hasRequiredBrowserVersions$1) return browserVersions;
	hasRequiredBrowserVersions$1 = 1;
	browserVersions={"0":"23","1":"24","2":"25","3":"26","4":"27","5":"28","6":"29","7":"30","8":"31","9":"32",A:"10",B:"11",C:"12",D:"7",E:"8",F:"9",G:"15",H:"111",I:"4",J:"6",K:"13",L:"14",M:"16",N:"17",O:"18",P:"79",Q:"80",R:"81",S:"83",T:"84",U:"85",V:"86",W:"87",X:"88",Y:"89",Z:"90",a:"91",b:"92",c:"93",d:"94",e:"95",f:"110",g:"20",h:"73",i:"96",j:"97",k:"98",l:"99",m:"100",n:"101",o:"102",p:"103",q:"104",r:"105",s:"106",t:"107",u:"108",v:"109",w:"5",x:"19",y:"21",z:"22",AB:"33",BB:"34",CB:"35",DB:"36",EB:"37",FB:"38",GB:"39",HB:"40",IB:"41",JB:"42",KB:"43",LB:"44",MB:"45",NB:"46",OB:"47",PB:"48",QB:"49",RB:"50",SB:"51",TB:"52",UB:"53",VB:"54",WB:"55",XB:"56",YB:"57",ZB:"58",aB:"60",bB:"62",cB:"63",dB:"64",eB:"65",fB:"66",gB:"67",hB:"68",iB:"69",jB:"70",kB:"71",lB:"72",mB:"74",nB:"75",oB:"76",pB:"77",qB:"78",rB:"11.1",sB:"12.1",tB:"16.0",uB:"3",vB:"59",wB:"61",xB:"82",yB:"112",zB:"113","0B":"3.2","1B":"10.1","2B":"13.1","3B":"15.2-15.3","4B":"15.4","5B":"15.5","6B":"15.6","7B":"16.1","8B":"16.2","9B":"16.3",AC:"16.4",BC:"16.5",CC:"11.5",DC:"4.2-4.3",EC:"5.5",FC:"2",GC:"3.5",HC:"3.6",IC:"114",JC:"3.1",KC:"5.1",LC:"6.1",MC:"7.1",NC:"9.1",OC:"14.1",PC:"15.1",QC:"TP",RC:"9.5-9.6",SC:"10.0-10.1",TC:"10.5",UC:"10.6",VC:"11.6",WC:"4.0-4.1",XC:"5.0-5.1",YC:"6.0-6.1",ZC:"7.0-7.1",aC:"8.1-8.4",bC:"9.0-9.2",cC:"9.3",dC:"10.0-10.2",eC:"10.3",fC:"11.0-11.2",gC:"11.3-11.4",hC:"12.0-12.1",iC:"12.2-12.5",jC:"13.0-13.1",kC:"13.2",lC:"13.3",mC:"13.4-13.7",nC:"14.0-14.4",oC:"14.5-14.8",pC:"15.0-15.1",qC:"all",rC:"2.1",sC:"2.2",tC:"2.3",uC:"4.1",vC:"4.4",wC:"4.4.3-4.4.4",xC:"13.4",yC:"5.0-5.4",zC:"6.2-6.4","0C":"7.2-7.4","1C":"8.2","2C":"9.2","3C":"11.1-11.2","4C":"12.0","5C":"13.0","6C":"14.0","7C":"15.0","8C":"17.0","9C":"18.0",AD:"19.0",BD:"13.18",CD:"2.5",DD:"3.0-3.1"};
	return browserVersions;
}

var hasRequiredBrowserVersions;

function requireBrowserVersions () {
	if (hasRequiredBrowserVersions) return browserVersions$1;
	hasRequiredBrowserVersions = 1;
	browserVersions$1.browserVersions = requireBrowserVersions$1();
	return browserVersions$1;
}

var agents;
var hasRequiredAgents$1;

function requireAgents$1 () {
	if (hasRequiredAgents$1) return agents;
	hasRequiredAgents$1 = 1;
	agents={A:{A:{J:0.0131217,D:0.00621152,E:0.0478029,F:0.0573634,A:0.00956057,B:0.487589,EC:0.009298},B:"ms",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","EC","J","D","E","F","A","B","","",""],E:"IE",F:{EC:962323200,J:998870400,D:1161129600,E:1237420800,F:1300060800,A:1346716800,B:1381968000}},B:{A:{C:0.003861,K:0.004267,L:0.004268,G:0.003861,M:0.003702,N:0.003861,O:0.015444,P:0,Q:0.004298,R:0.00944,S:0.004043,T:0.007722,U:0.003861,V:0.003861,W:0.003861,X:0.003943,Y:0.007722,Z:0.003943,a:0.003943,b:0.007722,c:0.004118,d:0.003939,e:0.003943,i:0.003943,j:0.003943,k:0.003929,l:0.003901,m:0.011829,n:0.007886,o:0.003943,p:0.007722,q:0.003861,r:0.007722,s:0.011583,t:0.073359,u:0.111969,v:1.66023,f:2.23552,H:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","C","K","L","G","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","i","j","k","l","m","n","o","p","q","r","s","t","u","v","f","H","","",""],E:"Edge",F:{C:1438128000,K:1447286400,L:1470096000,G:1491868800,M:1508198400,N:1525046400,O:1542067200,P:1579046400,Q:1581033600,R:1586736000,S:1590019200,T:1594857600,U:1598486400,V:1602201600,W:1605830400,X:1611360000,Y:1614816000,Z:1618358400,a:1622073600,b:1626912000,c:1630627200,d:1632441600,e:1634774400,i:1637539200,j:1641427200,k:1643932800,l:1646265600,m:1649635200,n:1651190400,o:1653955200,p:1655942400,q:1659657600,r:1661990400,s:1664755200,t:1666915200,u:1670198400,v:1673481600,f:1675900800,H:1678665600},D:{C:"ms",K:"ms",L:"ms",G:"ms",M:"ms",N:"ms",O:"ms"}},C:{A:{"0":0.004161,"1":0.008786,"2":0.004118,"3":0.004317,"4":0.004393,"5":0.004418,"6":0.008834,"7":0.008322,"8":0.008928,"9":0.004471,FC:0.004118,uB:0.004271,I:0.011703,w:0.004879,J:0.020136,D:0.005725,E:0.004525,F:0.00533,A:0.004283,B:0.007722,C:0.004471,K:0.004486,L:0.00453,G:0.008322,M:0.004417,N:0.004425,O:0.004161,x:0.004443,g:0.004283,y:0.008322,z:0.013698,AB:0.009284,BB:0.004707,CB:0.009076,DB:0.003861,EB:0.004783,FB:0.003929,GB:0.004783,HB:0.00487,IB:0.005029,JB:0.0047,KB:0.019305,LB:0.003861,MB:0.003867,NB:0.004525,OB:0.004293,PB:0.003861,QB:0.004538,RB:0.008282,SB:0.011601,TB:0.046332,UB:0.011601,VB:0.003929,WB:0.003974,XB:0.003861,YB:0.011601,ZB:0.003939,vB:0.003861,aB:0.003929,wB:0.004356,bB:0.004425,cB:0.008322,dB:0.00415,eB:0.004267,fB:0.003801,gB:0.004267,hB:0.003861,iB:0.00415,jB:0.004293,kB:0.004425,lB:0.003861,h:0.00415,mB:0.00415,nB:0.004318,oB:0.004356,pB:0.003974,qB:0.034749,P:0.003861,Q:0.003861,R:0.003861,xB:0.003861,S:0.003861,T:0.003929,U:0.004268,V:0.003801,W:0.015444,X:0.007722,Y:0.003943,Z:0.003943,a:0.011583,b:0.003801,c:0.007722,d:0.011583,e:0.003773,i:0.007886,j:0.003901,k:0.003901,l:0.003861,m:0.003861,n:0.003861,o:0.096525,p:0.042471,q:0.007722,r:0.011583,s:0.015444,t:0.019305,u:0.069498,v:1.22008,f:0.814671,H:0.007722,yB:0,zB:0,GC:0.008786,HC:0.00487},B:"moz",C:["FC","uB","GC","HC","I","w","J","D","E","F","A","B","C","K","L","G","M","N","O","x","g","y","z","0","1","2","3","4","5","6","7","8","9","AB","BB","CB","DB","EB","FB","GB","HB","IB","JB","KB","LB","MB","NB","OB","PB","QB","RB","SB","TB","UB","VB","WB","XB","YB","ZB","vB","aB","wB","bB","cB","dB","eB","fB","gB","hB","iB","jB","kB","lB","h","mB","nB","oB","pB","qB","P","Q","R","xB","S","T","U","V","W","X","Y","Z","a","b","c","d","e","i","j","k","l","m","n","o","p","q","r","s","t","u","v","f","H","yB","zB",""],E:"Firefox",F:{"0":1372118400,"1":1375747200,"2":1379376000,"3":1386633600,"4":1391472000,"5":1395100800,"6":1398729600,"7":1402358400,"8":1405987200,"9":1409616000,FC:1161648000,uB:1213660800,GC:1246320000,HC:1264032000,I:1300752000,w:1308614400,J:1313452800,D:1317081600,E:1317081600,F:1320710400,A:1324339200,B:1327968000,C:1331596800,K:1335225600,L:1338854400,G:1342483200,M:1346112000,N:1349740800,O:1353628800,x:1357603200,g:1361232000,y:1364860800,z:1368489600,AB:1413244800,BB:1417392000,CB:1421107200,DB:1424736000,EB:1428278400,FB:1431475200,GB:1435881600,HB:1439251200,IB:1442880000,JB:1446508800,KB:1450137600,LB:1453852800,MB:1457395200,NB:1461628800,OB:1465257600,PB:1470096000,QB:1474329600,RB:1479168000,SB:1485216000,TB:1488844800,UB:1492560000,VB:1497312000,WB:1502150400,XB:1506556800,YB:1510617600,ZB:1516665600,vB:1520985600,aB:1525824000,wB:1529971200,bB:1536105600,cB:1540252800,dB:1544486400,eB:1548720000,fB:1552953600,gB:1558396800,hB:1562630400,iB:1567468800,jB:1571788800,kB:1575331200,lB:1578355200,h:1581379200,mB:1583798400,nB:1586304000,oB:1588636800,pB:1591056000,qB:1593475200,P:1595894400,Q:1598313600,R:1600732800,xB:1603152000,S:1605571200,T:1607990400,U:1611619200,V:1614038400,W:1616457600,X:1618790400,Y:1622505600,Z:1626134400,a:1628553600,b:1630972800,c:1633392000,d:1635811200,e:1638835200,i:1641859200,j:1644364800,k:1646697600,l:1649116800,m:1651536000,n:1653955200,o:1656374400,p:1658793600,q:1661212800,r:1663632000,s:1666051200,t:1668470400,u:1670889600,v:1673913600,f:1676332800,H:1678752000,yB:null,zB:null}},D:{A:{"0":0.008786,"1":0.003939,"2":0.004461,"3":0.004141,"4":0.004326,"5":0.0047,"6":0.004538,"7":0.008322,"8":0.008596,"9":0.004566,I:0.004706,w:0.004879,J:0.004879,D:0.005591,E:0.005591,F:0.005591,A:0.004534,B:0.004464,C:0.010424,K:0.0083,L:0.004706,G:0.015087,M:0.004393,N:0.004393,O:0.008652,x:0.008322,g:0.004393,y:0.004317,z:0.003901,AB:0.004118,BB:0.003861,CB:0.003861,DB:0.004335,EB:0.004464,FB:0.015444,GB:0.003867,HB:0.015444,IB:0.003773,JB:0.003974,KB:0.007722,LB:0.007948,MB:0.003974,NB:0.003867,OB:0.007722,PB:0.019305,QB:0.03861,RB:0.003867,SB:0.003929,TB:0.007722,UB:0.007722,VB:0.003867,WB:0.007722,XB:0.069498,YB:0.003861,ZB:0.015772,vB:0.003773,aB:0.015444,wB:0.007722,bB:0.003773,cB:0.007722,dB:0.003943,eB:0.007722,fB:0.027027,gB:0.007722,hB:0.011583,iB:0.054054,jB:0.019305,kB:0.015444,lB:0.023166,h:0.011583,mB:0.042471,nB:0.046332,oB:0.042471,pB:0.015444,qB:0.030888,P:0.127413,Q:0.03861,R:0.042471,S:0.073359,T:0.042471,U:0.088803,V:0.07722,W:0.081081,X:0.027027,Y:0.03861,Z:0.046332,a:0.084942,b:0.050193,c:0.065637,d:0.046332,e:0.019305,i:0.03861,j:0.050193,k:0.092664,l:0.050193,m:0.057915,n:0.061776,o:0.084942,p:0.235521,q:0.084942,r:0.131274,s:0.100386,t:0.19305,u:0.984555,v:12.4054,f:7.25482,H:0.015444,yB:0.019305,zB:0,IC:0},B:"webkit",C:["","","","","","I","w","J","D","E","F","A","B","C","K","L","G","M","N","O","x","g","y","z","0","1","2","3","4","5","6","7","8","9","AB","BB","CB","DB","EB","FB","GB","HB","IB","JB","KB","LB","MB","NB","OB","PB","QB","RB","SB","TB","UB","VB","WB","XB","YB","ZB","vB","aB","wB","bB","cB","dB","eB","fB","gB","hB","iB","jB","kB","lB","h","mB","nB","oB","pB","qB","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","i","j","k","l","m","n","o","p","q","r","s","t","u","v","f","H","yB","zB","IC"],E:"Chrome",F:{"0":1348531200,"1":1352246400,"2":1357862400,"3":1361404800,"4":1364428800,"5":1369094400,"6":1374105600,"7":1376956800,"8":1384214400,"9":1389657600,I:1264377600,w:1274745600,J:1283385600,D:1287619200,E:1291248000,F:1296777600,A:1299542400,B:1303862400,C:1307404800,K:1312243200,L:1316131200,G:1316131200,M:1319500800,N:1323734400,O:1328659200,x:1332892800,g:1337040000,y:1340668800,z:1343692800,AB:1392940800,BB:1397001600,CB:1400544000,DB:1405468800,EB:1409011200,FB:1412640000,GB:1416268800,HB:1421798400,IB:1425513600,JB:1429401600,KB:1432080000,LB:1437523200,MB:1441152000,NB:1444780800,OB:1449014400,PB:1453248000,QB:1456963200,RB:1460592000,SB:1464134400,TB:1469059200,UB:1472601600,VB:1476230400,WB:1480550400,XB:1485302400,YB:1489017600,ZB:1492560000,vB:1496707200,aB:1500940800,wB:1504569600,bB:1508198400,cB:1512518400,dB:1516752000,eB:1520294400,fB:1523923200,gB:1527552000,hB:1532390400,iB:1536019200,jB:1539648000,kB:1543968000,lB:1548720000,h:1552348800,mB:1555977600,nB:1559606400,oB:1564444800,pB:1568073600,qB:1571702400,P:1575936000,Q:1580860800,R:1586304000,S:1589846400,T:1594684800,U:1598313600,V:1601942400,W:1605571200,X:1611014400,Y:1614556800,Z:1618272000,a:1621987200,b:1626739200,c:1630368000,d:1632268800,e:1634601600,i:1637020800,j:1641340800,k:1643673600,l:1646092800,m:1648512000,n:1650931200,o:1653350400,p:1655769600,q:1659398400,r:1661817600,s:1664236800,t:1666656000,u:1669680000,v:1673308800,f:1675728000,H:1678147200,yB:null,zB:null,IC:null}},E:{A:{I:0,w:0.008322,J:0.004656,D:0.004465,E:0.003974,F:0.003929,A:0.004425,B:0.004318,C:0.003801,K:0.019305,L:0.096525,G:0.023166,JC:0,"0B":0.008692,KC:0.007722,LC:0.00456,MC:0.004283,NC:0.057915,"1B":0.007802,rB:0.007722,sB:0.030888,"2B":0.169884,OC:0.258687,PC:0.042471,"3B":0.034749,"4B":0.088803,"5B":0.169884,"6B":0.857142,tB:0.088803,"7B":0.293436,"8B":0.922779,"9B":0.621621,AC:0,BC:0,QC:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","JC","0B","I","w","KC","J","LC","D","MC","E","F","NC","A","1B","B","rB","C","sB","K","2B","L","OC","G","PC","3B","4B","5B","6B","tB","7B","8B","9B","AC","BC","QC",""],E:"Safari",F:{JC:1205798400,"0B":1226534400,I:1244419200,w:1275868800,KC:1311120000,J:1343174400,LC:1382400000,D:1382400000,MC:1410998400,E:1413417600,F:1443657600,NC:1458518400,A:1474329600,"1B":1490572800,B:1505779200,rB:1522281600,C:1537142400,sB:1553472000,K:1568851200,"2B":1585008000,L:1600214400,OC:1619395200,G:1632096000,PC:1635292800,"3B":1639353600,"4B":1647216000,"5B":1652745600,"6B":1658275200,tB:1662940800,"7B":1666569600,"8B":1670889600,"9B":1674432000,AC:1679875200,BC:null,QC:null}},F:{A:{"0":0.013434,"1":0.006702,"2":0.006015,"3":0.005595,"4":0.004393,"5":0.003861,"6":0.004879,"7":0.004879,"8":0.003861,"9":0.005152,F:0.0082,B:0.016581,C:0.004317,G:0.00685,M:0.00685,N:0.00685,O:0.005014,x:0.006015,g:0.004879,y:0.006597,z:0.006597,AB:0.005014,BB:0.009758,CB:0.004879,DB:0.007722,EB:0.004283,FB:0.004367,GB:0.004534,HB:0.003861,IB:0.004227,JB:0.004418,KB:0.004161,LB:0.004227,MB:0.004725,NB:0.011583,OB:0.008942,PB:0.004707,QB:0.004827,RB:0.004707,SB:0.004707,TB:0.004326,UB:0.008922,VB:0.014349,WB:0.004425,XB:0.00472,YB:0.004425,ZB:0.004425,aB:0.00472,bB:0.004532,cB:0.004566,dB:0.02283,eB:0.00867,fB:0.004656,gB:0.004642,hB:0.003929,iB:0.00944,jB:0.004293,kB:0.003929,lB:0.004298,h:0.096692,mB:0.004201,nB:0.004141,oB:0.004257,pB:0.003939,qB:0.008236,P:0.003855,Q:0.003939,R:0.008514,xB:0.003939,S:0.003939,T:0.003702,U:0.007722,V:0.003855,W:0.003855,X:0.003929,Y:0.003861,Z:0.011703,a:0.007546,b:0.011829,c:0.069498,d:0.648648,e:0.370656,RC:0.00685,SC:0,TC:0.008392,UC:0.004706,rB:0.006229,CC:0.004879,VC:0.008786,sB:0.00472},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","F","RC","SC","TC","UC","B","rB","CC","VC","C","sB","G","M","N","O","x","g","y","z","0","1","2","3","4","5","6","7","8","9","AB","BB","CB","DB","EB","FB","GB","HB","IB","JB","KB","LB","MB","NB","OB","PB","QB","RB","SB","TB","UB","VB","WB","XB","YB","ZB","aB","bB","cB","dB","eB","fB","gB","hB","iB","jB","kB","lB","h","mB","nB","oB","pB","qB","P","Q","R","xB","S","T","U","V","W","X","Y","Z","a","b","c","d","e","","",""],E:"Opera",F:{"0":1405987200,"1":1409616000,"2":1413331200,"3":1417132800,"4":1422316800,"5":1425945600,"6":1430179200,"7":1433808000,"8":1438646400,"9":1442448000,F:1150761600,RC:1223424000,SC:1251763200,TC:1267488000,UC:1277942400,B:1292457600,rB:1302566400,CC:1309219200,VC:1323129600,C:1323129600,sB:1352073600,G:1372723200,M:1377561600,N:1381104000,O:1386288000,x:1390867200,g:1393891200,y:1399334400,z:1401753600,AB:1445904000,BB:1449100800,CB:1454371200,DB:1457308800,EB:1462320000,FB:1465344000,GB:1470096000,HB:1474329600,IB:1477267200,JB:1481587200,KB:1486425600,LB:1490054400,MB:1494374400,NB:1498003200,OB:1502236800,PB:1506470400,QB:1510099200,RB:1515024000,SB:1517961600,TB:1521676800,UB:1525910400,VB:1530144000,WB:1534982400,XB:1537833600,YB:1543363200,ZB:1548201600,aB:1554768000,bB:1561593600,cB:1566259200,dB:1570406400,eB:1573689600,fB:1578441600,gB:1583971200,hB:1587513600,iB:1592956800,jB:1595894400,kB:1600128000,lB:1603238400,h:1613520000,mB:1612224000,nB:1616544000,oB:1619568000,pB:1623715200,qB:1627948800,P:1631577600,Q:1633392000,R:1635984000,xB:1638403200,S:1642550400,T:1644969600,U:1647993600,V:1650412800,W:1652745600,X:1654646400,Y:1657152000,Z:1660780800,a:1663113600,b:1668816000,c:1668643200,d:1671062400,e:1675209600},D:{F:"o",B:"o",C:"o",RC:"o",SC:"o",TC:"o",UC:"o",rB:"o",CC:"o",VC:"o",sB:"o"}},G:{A:{E:0,"0B":0,WC:0,DC:0.00156679,XC:0.00313358,YC:0.00313358,ZC:0.0125343,aC:0.00626717,bC:0.0172347,cC:0.0564045,dC:0.00470038,eC:0.0987079,fC:0.0250687,gC:0.0235019,hC:0.0219351,iC:0.394832,jC:0.0156679,kC:0.0360362,lC:0.0344694,mC:0.108109,nC:0.282023,oC:0.532709,pC:0.153546,"3B":0.195849,"4B":0.233452,"5B":0.412066,"6B":1.40071,tB:1.43988,"7B":3.51431,"8B":3.62556,"9B":2.04623,AC:0.00940075,BC:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","0B","WC","DC","XC","YC","ZC","E","aC","bC","cC","dC","eC","fC","gC","hC","iC","jC","kC","lC","mC","nC","oC","pC","3B","4B","5B","6B","tB","7B","8B","9B","AC","BC","",""],E:"Safari on iOS",F:{"0B":1270252800,WC:1283904000,DC:1299628800,XC:1331078400,YC:1359331200,ZC:1394409600,E:1410912000,aC:1413763200,bC:1442361600,cC:1458518400,dC:1473724800,eC:1490572800,fC:1505779200,gC:1522281600,hC:1537142400,iC:1553472000,jC:1568851200,kC:1572220800,lC:1580169600,mC:1585008000,nC:1600214400,oC:1619395200,pC:1632096000,"3B":1639353600,"4B":1647216000,"5B":1652659200,"6B":1658275200,tB:1662940800,"7B":1666569600,"8B":1670889600,"9B":1674432000,AC:1679875200,BC:null}},H:{A:{qC:0.993853},B:"o",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","qC","","",""],E:"Opera Mini",F:{qC:1426464000}},I:{A:{uB:0,I:0.019696,H:0,rC:0,sC:0,tC:0,uC:0.0787838,DC:0.0689359,vC:0,wC:0.305287},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rC","sC","tC","uB","I","uC","DC","vC","wC","H","","",""],E:"Android Browser",F:{rC:1256515200,sC:1274313600,tC:1291593600,uB:1298332800,I:1318896000,uC:1341792000,DC:1374624000,vC:1386547200,wC:1401667200,H:1678147200}},J:{A:{D:0,A:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","D","A","","",""],E:"Blackberry Browser",F:{D:1325376000,A:1359504000}},K:{A:{A:0,B:0,C:0,h:0.0111391,rB:0,CC:0,sB:0},B:"o",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A","B","rB","CC","C","sB","h","","",""],E:"Opera Mobile",F:{A:1287100800,B:1300752000,rB:1314835200,CC:1318291200,C:1330300800,sB:1349740800,h:1673827200},D:{h:"webkit"}},L:{A:{H:42.629},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","H","","",""],E:"Chrome for Android",F:{H:1678147200}},M:{A:{f:0.294672},B:"moz",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","f","","",""],E:"Firefox for Android",F:{f:1676332800}},N:{A:{A:0.0115934,B:0.022664},B:"ms",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A","B","","",""],E:"IE Mobile",F:{A:1340150400,B:1353456000}},O:{A:{xC:0.896294},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","xC","","",""],E:"UC Browser for Android",F:{xC:1634688000},D:{xC:"webkit"}},P:{A:{I:0.166372,g:0,yC:0.0103543,zC:0.010304,"0C":0.0519911,"1C":0.0103584,"2C":0.0104443,"1B":0.0105043,"3C":0.0311947,"4C":0.0103982,"5C":0.0311947,"6C":0.0311947,"7C":0.0207965,tB:0.0727876,"8C":0.0727876,"9C":0.0935841,AD:1.32057},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","I","yC","zC","0C","1C","2C","1B","3C","4C","5C","6C","7C","tB","8C","9C","AD","g","","",""],E:"Samsung Internet",F:{I:1461024000,yC:1481846400,zC:1509408000,"0C":1528329600,"1C":1546128000,"2C":1554163200,"1B":1567900800,"3C":1582588800,"4C":1593475200,"5C":1605657600,"6C":1618531200,"7C":1629072000,tB:1640736000,"8C":1651708800,"9C":1659657600,AD:1667260800,g:1677369600}},Q:{A:{"2B":0.12278},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","2B","","",""],E:"QQ Browser",F:{"2B":1663718400}},R:{A:{BD:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","BD","","",""],E:"Baidu Browser",F:{BD:1663027200}},S:{A:{CD:0.079807,DD:0},B:"moz",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","CD","DD","","",""],E:"KaiOS Browser",F:{CD:1527811200,DD:1631664000}}};
	return agents;
}

var hasRequiredAgents;

function requireAgents () {
	if (hasRequiredAgents) return agents$1;
	hasRequiredAgents = 1;

	const browsers = requireBrowsers().browsers;
	const versions = requireBrowserVersions().browserVersions;
	const agentsData = requireAgents$1();

	function unpackBrowserVersions(versionsData) {
	  return Object.keys(versionsData).reduce((usage, version) => {
	    usage[versions[version]] = versionsData[version];
	    return usage
	  }, {})
	}

	agents$1.agents = Object.keys(agentsData).reduce((map, key) => {
	  let versionsData = agentsData[key];
	  map[browsers[key]] = Object.keys(versionsData).reduce((data, entry) => {
	    if (entry === 'A') {
	      data.usage_global = unpackBrowserVersions(versionsData[entry]);
	    } else if (entry === 'C') {
	      data.versions = versionsData[entry].reduce((list, version) => {
	        if (version === '') {
	          list.push(null);
	        } else {
	          list.push(versions[version]);
	        }
	        return list
	      }, []);
	    } else if (entry === 'D') {
	      data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
	    } else if (entry === 'E') {
	      data.browser = versionsData[entry];
	    } else if (entry === 'F') {
	      data.release_date = Object.keys(versionsData[entry]).reduce(
	        (map2, key2) => {
	          map2[versions[key2]] = versionsData[entry][key2];
	          return map2
	        },
	        {}
	      );
	    } else {
	      // entry is B
	      data.prefix = versionsData[entry];
	    }
	    return data
	  }, {});
	  return map
	}, {});
	return agents$1;
}

const v4 = {
	start: "2015-09-08",
	lts: "2015-10-12",
	maintenance: "2017-04-01",
	end: "2018-04-30",
	codename: "Argon"
};
const v5 = {
	start: "2015-10-29",
	maintenance: "2016-04-30",
	end: "2016-06-30"
};
const v6 = {
	start: "2016-04-26",
	lts: "2016-10-18",
	maintenance: "2018-04-30",
	end: "2019-04-30",
	codename: "Boron"
};
const v7 = {
	start: "2016-10-25",
	maintenance: "2017-04-30",
	end: "2017-06-30"
};
const v8 = {
	start: "2017-05-30",
	lts: "2017-10-31",
	maintenance: "2019-01-01",
	end: "2019-12-31",
	codename: "Carbon"
};
const v9 = {
	start: "2017-10-01",
	maintenance: "2018-04-01",
	end: "2018-06-30"
};
const v10 = {
	start: "2018-04-24",
	lts: "2018-10-30",
	maintenance: "2020-05-19",
	end: "2021-04-30",
	codename: "Dubnium"
};
const v11 = {
	start: "2018-10-23",
	maintenance: "2019-04-22",
	end: "2019-06-01"
};
const v12 = {
	start: "2019-04-23",
	lts: "2019-10-21",
	maintenance: "2020-11-30",
	end: "2022-04-30",
	codename: "Erbium"
};
const v13 = {
	start: "2019-10-22",
	maintenance: "2020-04-01",
	end: "2020-06-01"
};
const v14 = {
	start: "2020-04-21",
	lts: "2020-10-27",
	maintenance: "2021-10-19",
	end: "2023-04-30",
	codename: "Fermium"
};
const v15 = {
	start: "2020-10-20",
	maintenance: "2021-04-01",
	end: "2021-06-01"
};
const v16 = {
	start: "2021-04-20",
	lts: "2021-10-26",
	maintenance: "2022-10-18",
	end: "2023-09-11",
	codename: "Gallium"
};
const v17 = {
	start: "2021-10-19",
	maintenance: "2022-04-01",
	end: "2022-06-01"
};
const v18 = {
	start: "2022-04-19",
	lts: "2022-10-25",
	maintenance: "2023-10-18",
	end: "2025-04-30",
	codename: "Hydrogen"
};
const v19 = {
	start: "2022-10-18",
	maintenance: "2023-04-01",
	end: "2023-06-01"
};
const v20 = {
	start: "2023-04-18",
	lts: "2023-10-24",
	maintenance: "2024-10-22",
	end: "2026-04-30",
	codename: ""
};
const require$$2 = {
	"v0.8": {
	start: "2012-06-25",
	end: "2014-07-31"
},
	"v0.10": {
	start: "2013-03-11",
	end: "2016-10-31"
},
	"v0.12": {
	start: "2015-02-06",
	end: "2016-12-31"
},
	v4: v4,
	v5: v5,
	v6: v6,
	v7: v7,
	v8: v8,
	v9: v9,
	v10: v10,
	v11: v11,
	v12: v12,
	v13: v13,
	v14: v14,
	v15: v15,
	v16: v16,
	v17: v17,
	v18: v18,
	v19: v19,
	v20: v20
};

var versions;
var hasRequiredVersions;

function requireVersions () {
	if (hasRequiredVersions) return versions;
	hasRequiredVersions = 1;
	versions = {
		"0.20": "39",
		"0.21": "41",
		"0.22": "41",
		"0.23": "41",
		"0.24": "41",
		"0.25": "42",
		"0.26": "42",
		"0.27": "43",
		"0.28": "43",
		"0.29": "43",
		"0.30": "44",
		"0.31": "45",
		"0.32": "45",
		"0.33": "45",
		"0.34": "45",
		"0.35": "45",
		"0.36": "47",
		"0.37": "49",
		"1.0": "49",
		"1.1": "50",
		"1.2": "51",
		"1.3": "52",
		"1.4": "53",
		"1.5": "54",
		"1.6": "56",
		"1.7": "58",
		"1.8": "59",
		"2.0": "61",
		"2.1": "61",
		"3.0": "66",
		"3.1": "66",
		"4.0": "69",
		"4.1": "69",
		"4.2": "69",
		"5.0": "73",
		"6.0": "76",
		"6.1": "76",
		"7.0": "78",
		"7.1": "78",
		"7.2": "78",
		"7.3": "78",
		"8.0": "80",
		"8.1": "80",
		"8.2": "80",
		"8.3": "80",
		"8.4": "80",
		"8.5": "80",
		"9.0": "83",
		"9.1": "83",
		"9.2": "83",
		"9.3": "83",
		"9.4": "83",
		"10.0": "85",
		"10.1": "85",
		"10.2": "85",
		"10.3": "85",
		"10.4": "85",
		"11.0": "87",
		"11.1": "87",
		"11.2": "87",
		"11.3": "87",
		"11.4": "87",
		"11.5": "87",
		"12.0": "89",
		"12.1": "89",
		"12.2": "89",
		"13.0": "91",
		"13.1": "91",
		"13.2": "91",
		"13.3": "91",
		"13.4": "91",
		"13.5": "91",
		"13.6": "91",
		"14.0": "93",
		"14.1": "93",
		"14.2": "93",
		"15.0": "94",
		"15.1": "94",
		"15.2": "94",
		"15.3": "94",
		"15.4": "94",
		"15.5": "94",
		"16.0": "96",
		"16.1": "96",
		"16.2": "96",
		"17.0": "98",
		"17.1": "98",
		"17.2": "98",
		"17.3": "98",
		"17.4": "98",
		"18.0": "100",
		"18.1": "100",
		"18.2": "100",
		"18.3": "100",
		"19.0": "102",
		"19.1": "102",
		"20.0": "104",
		"20.1": "104",
		"20.2": "104",
		"20.3": "104",
		"21.0": "106",
		"21.1": "106",
		"21.2": "106",
		"21.3": "106",
		"21.4": "106",
		"22.0": "108",
		"22.1": "108",
		"22.2": "108",
		"22.3": "108",
		"23.0": "110",
		"23.1": "110",
		"23.2": "110",
		"24.0": "112"
	};
	return versions;
}

var error;
var hasRequiredError;

function requireError () {
	if (hasRequiredError) return error;
	hasRequiredError = 1;
	function BrowserslistError(message) {
	  this.name = 'BrowserslistError';
	  this.message = message;
	  this.browserslist = true;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, BrowserslistError);
	  }
	}

	BrowserslistError.prototype = Error.prototype;

	error = BrowserslistError;
	return error;
}

var parse;
var hasRequiredParse;

function requireParse () {
	if (hasRequiredParse) return parse;
	hasRequiredParse = 1;
	var AND_REGEXP = /^\s+and\s+(.*)/i;
	var OR_REGEXP = /^(?:,\s*|\s+or\s+)(.*)/i;

	function flatten(array) {
	  if (!Array.isArray(array)) return [array]
	  return array.reduce(function (a, b) {
	    return a.concat(flatten(b))
	  }, [])
	}

	function find(string, predicate) {
	  for (var n = 1, max = string.length; n <= max; n++) {
	    var parsed = string.substr(-n, n);
	    if (predicate(parsed, n, max)) {
	      return string.slice(0, -n)
	    }
	  }
	  return ''
	}

	function matchQuery(all, query) {
	  var node = { query: query };
	  if (query.indexOf('not ') === 0) {
	    node.not = true;
	    query = query.slice(4);
	  }

	  for (var name in all) {
	    var type = all[name];
	    var match = query.match(type.regexp);
	    if (match) {
	      node.type = name;
	      for (var i = 0; i < type.matches.length; i++) {
	        node[type.matches[i]] = match[i + 1];
	      }
	      return node
	    }
	  }

	  node.type = 'unknown';
	  return node
	}

	function matchBlock(all, string, qs) {
	  var node;
	  return find(string, function (parsed, n, max) {
	    if (AND_REGEXP.test(parsed)) {
	      node = matchQuery(all, parsed.match(AND_REGEXP)[1]);
	      node.compose = 'and';
	      qs.unshift(node);
	      return true
	    } else if (OR_REGEXP.test(parsed)) {
	      node = matchQuery(all, parsed.match(OR_REGEXP)[1]);
	      node.compose = 'or';
	      qs.unshift(node);
	      return true
	    } else if (n === max) {
	      node = matchQuery(all, parsed.trim());
	      node.compose = 'or';
	      qs.unshift(node);
	      return true
	    }
	    return false
	  })
	}

	parse = function parse(all, queries) {
	  if (!Array.isArray(queries)) queries = [queries];
	  return flatten(
	    queries.map(function (block) {
	      var qs = [];
	      do {
	        block = matchBlock(all, block, qs);
	      } while (block)
	      return qs
	    })
	  )
	};
	return parse;
}

var browser;
var hasRequiredBrowser;

function requireBrowser () {
	if (hasRequiredBrowser) return browser;
	hasRequiredBrowser = 1;
	var BrowserslistError = requireError();

	function noop() {}

	browser = {
	  loadQueries: function loadQueries() {
	    throw new BrowserslistError(
	      'Sharable configs are not supported in client-side build of Browserslist'
	    )
	  },

	  getStat: function getStat(opts) {
	    return opts.stats
	  },

	  loadConfig: function loadConfig(opts) {
	    if (opts.config) {
	      throw new BrowserslistError(
	        'Browserslist config are not supported in client-side build'
	      )
	    }
	  },

	  loadCountry: function loadCountry() {
	    throw new BrowserslistError(
	      'Country statistics are not supported ' +
	        'in client-side build of Browserslist'
	    )
	  },

	  loadFeature: function loadFeature() {
	    throw new BrowserslistError(
	      'Supports queries are not available in client-side build of Browserslist'
	    )
	  },

	  currentNode: function currentNode(resolve, context) {
	    return resolve(['maintained node versions'], context)[0]
	  },

	  parseConfig: noop,

	  readConfig: noop,

	  findConfig: noop,

	  clearCaches: noop,

	  oldDataWarning: noop,

	  env: {}
	};
	return browser;
}

var browserslist_1;
var hasRequiredBrowserslist;

function requireBrowserslist () {
	if (hasRequiredBrowserslist) return browserslist_1;
	hasRequiredBrowserslist = 1;
	var jsReleases = require$$0;
	var agents = requireAgents().agents;
	var jsEOL = require$$2;
	var path = require$$3;
	var e2c = requireVersions();

	var BrowserslistError = requireError();
	var parse = requireParse();
	var env = requireBrowser(); // Will load browser.js in webpack

	var YEAR = 365.259641 * 24 * 60 * 60 * 1000;
	var ANDROID_EVERGREEN_FIRST = 37;

	// Helpers

	function isVersionsMatch(versionA, versionB) {
	  return (versionA + '.').indexOf(versionB + '.') === 0
	}

	function isEolReleased(name) {
	  var version = name.slice(1);
	  return browserslist.nodeVersions.some(function (i) {
	    return isVersionsMatch(i, version)
	  })
	}

	function normalize(versions) {
	  return versions.filter(function (version) {
	    return typeof version === 'string'
	  })
	}

	function normalizeElectron(version) {
	  var versionToUse = version;
	  if (version.split('.').length === 3) {
	    versionToUse = version.split('.').slice(0, -1).join('.');
	  }
	  return versionToUse
	}

	function nameMapper(name) {
	  return function mapName(version) {
	    return name + ' ' + version
	  }
	}

	function getMajor(version) {
	  return parseInt(version.split('.')[0])
	}

	function getMajorVersions(released, number) {
	  if (released.length === 0) return []
	  var majorVersions = uniq(released.map(getMajor));
	  var minimum = majorVersions[majorVersions.length - number];
	  if (!minimum) {
	    return released
	  }
	  var selected = [];
	  for (var i = released.length - 1; i >= 0; i--) {
	    if (minimum > getMajor(released[i])) break
	    selected.unshift(released[i]);
	  }
	  return selected
	}

	function uniq(array) {
	  var filtered = [];
	  for (var i = 0; i < array.length; i++) {
	    if (filtered.indexOf(array[i]) === -1) filtered.push(array[i]);
	  }
	  return filtered
	}

	function fillUsage(result, name, data) {
	  for (var i in data) {
	    result[name + ' ' + i] = data[i];
	  }
	}

	function generateFilter(sign, version) {
	  version = parseFloat(version);
	  if (sign === '>') {
	    return function (v) {
	      return parseFloat(v) > version
	    }
	  } else if (sign === '>=') {
	    return function (v) {
	      return parseFloat(v) >= version
	    }
	  } else if (sign === '<') {
	    return function (v) {
	      return parseFloat(v) < version
	    }
	  } else {
	    return function (v) {
	      return parseFloat(v) <= version
	    }
	  }
	}

	function generateSemverFilter(sign, version) {
	  version = version.split('.').map(parseSimpleInt);
	  version[1] = version[1] || 0;
	  version[2] = version[2] || 0;
	  if (sign === '>') {
	    return function (v) {
	      v = v.split('.').map(parseSimpleInt);
	      return compareSemver(v, version) > 0
	    }
	  } else if (sign === '>=') {
	    return function (v) {
	      v = v.split('.').map(parseSimpleInt);
	      return compareSemver(v, version) >= 0
	    }
	  } else if (sign === '<') {
	    return function (v) {
	      v = v.split('.').map(parseSimpleInt);
	      return compareSemver(version, v) > 0
	    }
	  } else {
	    return function (v) {
	      v = v.split('.').map(parseSimpleInt);
	      return compareSemver(version, v) >= 0
	    }
	  }
	}

	function parseSimpleInt(x) {
	  return parseInt(x)
	}

	function compare(a, b) {
	  if (a < b) return -1
	  if (a > b) return +1
	  return 0
	}

	function compareSemver(a, b) {
	  return (
	    compare(parseInt(a[0]), parseInt(b[0])) ||
	    compare(parseInt(a[1] || '0'), parseInt(b[1] || '0')) ||
	    compare(parseInt(a[2] || '0'), parseInt(b[2] || '0'))
	  )
	}

	// this follows the npm-like semver behavior
	function semverFilterLoose(operator, range) {
	  range = range.split('.').map(parseSimpleInt);
	  if (typeof range[1] === 'undefined') {
	    range[1] = 'x';
	  }
	  // ignore any patch version because we only return minor versions
	  // range[2] = 'x'
	  switch (operator) {
	    case '<=':
	      return function (version) {
	        version = version.split('.').map(parseSimpleInt);
	        return compareSemverLoose(version, range) <= 0
	      }
	    case '>=':
	    default:
	      return function (version) {
	        version = version.split('.').map(parseSimpleInt);
	        return compareSemverLoose(version, range) >= 0
	      }
	  }
	}

	// this follows the npm-like semver behavior
	function compareSemverLoose(version, range) {
	  if (version[0] !== range[0]) {
	    return version[0] < range[0] ? -1 : +1
	  }
	  if (range[1] === 'x') {
	    return 0
	  }
	  if (version[1] !== range[1]) {
	    return version[1] < range[1] ? -1 : +1
	  }
	  return 0
	}

	function resolveVersion(data, version) {
	  if (data.versions.indexOf(version) !== -1) {
	    return version
	  } else if (browserslist.versionAliases[data.name][version]) {
	    return browserslist.versionAliases[data.name][version]
	  } else {
	    return false
	  }
	}

	function normalizeVersion(data, version) {
	  var resolved = resolveVersion(data, version);
	  if (resolved) {
	    return resolved
	  } else if (data.versions.length === 1) {
	    return data.versions[0]
	  } else {
	    return false
	  }
	}

	function filterByYear(since, context) {
	  since = since / 1000;
	  return Object.keys(agents).reduce(function (selected, name) {
	    var data = byName(name, context);
	    if (!data) return selected
	    var versions = Object.keys(data.releaseDate).filter(function (v) {
	      var date = data.releaseDate[v];
	      return date !== null && date >= since
	    });
	    return selected.concat(versions.map(nameMapper(data.name)))
	  }, [])
	}

	function cloneData(data) {
	  return {
	    name: data.name,
	    versions: data.versions,
	    released: data.released,
	    releaseDate: data.releaseDate
	  }
	}

	function mapVersions(data, map) {
	  data.versions = data.versions.map(function (i) {
	    return map[i] || i
	  });
	  data.released = data.released.map(function (i) {
	    return map[i] || i
	  });
	  var fixedDate = {};
	  for (var i in data.releaseDate) {
	    fixedDate[map[i] || i] = data.releaseDate[i];
	  }
	  data.releaseDate = fixedDate;
	  return data
	}

	function byName(name, context) {
	  name = name.toLowerCase();
	  name = browserslist.aliases[name] || name;
	  if (context.mobileToDesktop && browserslist.desktopNames[name]) {
	    var desktop = browserslist.data[browserslist.desktopNames[name]];
	    if (name === 'android') {
	      return normalizeAndroidData(cloneData(browserslist.data[name]), desktop)
	    } else {
	      var cloned = cloneData(desktop);
	      cloned.name = name;
	      if (name === 'op_mob') {
	        cloned = mapVersions(cloned, { '10.0-10.1': '10' });
	      }
	      return cloned
	    }
	  }
	  return browserslist.data[name]
	}

	function normalizeAndroidVersions(androidVersions, chromeVersions) {
	  var firstEvergreen = ANDROID_EVERGREEN_FIRST;
	  var last = chromeVersions[chromeVersions.length - 1];
	  return androidVersions
	    .filter(function (version) {
	      return /^(?:[2-4]\.|[34]$)/.test(version)
	    })
	    .concat(chromeVersions.slice(firstEvergreen - last - 1))
	}

	function normalizeAndroidData(android, chrome) {
	  android.released = normalizeAndroidVersions(android.released, chrome.released);
	  android.versions = normalizeAndroidVersions(android.versions, chrome.versions);
	  return android
	}

	function checkName(name, context) {
	  var data = byName(name, context);
	  if (!data) throw new BrowserslistError('Unknown browser ' + name)
	  return data
	}

	function unknownQuery(query) {
	  return new BrowserslistError(
	    'Unknown browser query `' +
	      query +
	      '`. ' +
	      'Maybe you are using old Browserslist or made typo in query.'
	  )
	}

	function filterAndroid(list, versions, context) {
	  if (context.mobileToDesktop) return list
	  var released = browserslist.data.android.released;
	  var last = released[released.length - 1];
	  var diff = last - ANDROID_EVERGREEN_FIRST - versions;
	  if (diff > 0) {
	    return list.slice(-1)
	  } else {
	    return list.slice(diff - 1)
	  }
	}

	function resolve(queries, context) {
	  return parse(QUERIES, queries).reduce(function (result, node, index) {
	    if (node.not && index === 0) {
	      throw new BrowserslistError(
	        'Write any browsers query (for instance, `defaults`) ' +
	          'before `' +
	          node.query +
	          '`'
	      )
	    }
	    var type = QUERIES[node.type];
	    var array = type.select.call(browserslist, context, node).map(function (j) {
	      var parts = j.split(' ');
	      if (parts[1] === '0') {
	        return parts[0] + ' ' + byName(parts[0], context).versions[0]
	      } else {
	        return j
	      }
	    });

	    if (node.compose === 'and') {
	      if (node.not) {
	        return result.filter(function (j) {
	          return array.indexOf(j) === -1
	        })
	      } else {
	        return result.filter(function (j) {
	          return array.indexOf(j) !== -1
	        })
	      }
	    } else {
	      if (node.not) {
	        var filter = {};
	        array.forEach(function (j) {
	          filter[j] = true;
	        });
	        return result.filter(function (j) {
	          return !filter[j]
	        })
	      }
	      return result.concat(array)
	    }
	  }, [])
	}

	function prepareOpts(opts) {
	  if (typeof opts === 'undefined') opts = {};

	  if (typeof opts.path === 'undefined') {
	    opts.path = path.resolve ? path.resolve('.') : '.';
	  }

	  return opts
	}

	function prepareQueries(queries, opts) {
	  if (typeof queries === 'undefined' || queries === null) {
	    var config = browserslist.loadConfig(opts);
	    if (config) {
	      queries = config;
	    } else {
	      queries = browserslist.defaults;
	    }
	  }

	  return queries
	}

	function checkQueries(queries) {
	  if (!(typeof queries === 'string' || Array.isArray(queries))) {
	    throw new BrowserslistError(
	      'Browser queries must be an array or string. Got ' + typeof queries + '.'
	    )
	  }
	}

	var cache = {};

	function browserslist(queries, opts) {
	  opts = prepareOpts(opts);
	  queries = prepareQueries(queries, opts);
	  checkQueries(queries);

	  var context = {
	    ignoreUnknownVersions: opts.ignoreUnknownVersions,
	    dangerousExtend: opts.dangerousExtend,
	    mobileToDesktop: opts.mobileToDesktop,
	    path: opts.path,
	    env: opts.env
	  };

	  env.oldDataWarning(browserslist.data);
	  var stats = env.getStat(opts, browserslist.data);
	  if (stats) {
	    context.customUsage = {};
	    for (var browser in stats) {
	      fillUsage(context.customUsage, browser, stats[browser]);
	    }
	  }

	  var cacheKey = JSON.stringify([queries, context]);
	  if (cache[cacheKey]) return cache[cacheKey]

	  var result = uniq(resolve(queries, context)).sort(function (name1, name2) {
	    name1 = name1.split(' ');
	    name2 = name2.split(' ');
	    if (name1[0] === name2[0]) {
	      // assumptions on caniuse data
	      // 1) version ranges never overlaps
	      // 2) if version is not a range, it never contains `-`
	      var version1 = name1[1].split('-')[0];
	      var version2 = name2[1].split('-')[0];
	      return compareSemver(version2.split('.'), version1.split('.'))
	    } else {
	      return compare(name1[0], name2[0])
	    }
	  });
	  if (!env.env.BROWSERSLIST_DISABLE_CACHE) {
	    cache[cacheKey] = result;
	  }
	  return result
	}

	browserslist.parse = function (queries, opts) {
	  opts = prepareOpts(opts);
	  queries = prepareQueries(queries, opts);
	  checkQueries(queries);
	  return parse(QUERIES, queries)
	};

	// Will be filled by Can I Use data below
	browserslist.cache = {};
	browserslist.data = {};
	browserslist.usage = {
	  global: {},
	  custom: null
	};

	// Default browsers query
	browserslist.defaults = ['> 0.5%', 'last 2 versions', 'Firefox ESR', 'not dead'];

	// Browser names aliases
	browserslist.aliases = {
	  fx: 'firefox',
	  ff: 'firefox',
	  ios: 'ios_saf',
	  explorer: 'ie',
	  blackberry: 'bb',
	  explorermobile: 'ie_mob',
	  operamini: 'op_mini',
	  operamobile: 'op_mob',
	  chromeandroid: 'and_chr',
	  firefoxandroid: 'and_ff',
	  ucandroid: 'and_uc',
	  qqandroid: 'and_qq'
	};

	// Can I Use only provides a few versions for some browsers (e.g. and_chr).
	// Fallback to a similar browser for unknown versions
	browserslist.desktopNames = {
	  and_chr: 'chrome',
	  and_ff: 'firefox',
	  ie_mob: 'ie',
	  op_mob: 'opera',
	  android: 'chrome' // has extra processing logic
	};

	// Aliases to work with joined versions like `ios_saf 7.0-7.1`
	browserslist.versionAliases = {};

	browserslist.clearCaches = env.clearCaches;
	browserslist.parseConfig = env.parseConfig;
	browserslist.readConfig = env.readConfig;
	browserslist.findConfig = env.findConfig;
	browserslist.loadConfig = env.loadConfig;

	browserslist.coverage = function (browsers, stats) {
	  var data;
	  if (typeof stats === 'undefined') {
	    data = browserslist.usage.global;
	  } else if (stats === 'my stats') {
	    var opts = {};
	    opts.path = path.resolve ? path.resolve('.') : '.';
	    var customStats = env.getStat(opts);
	    if (!customStats) {
	      throw new BrowserslistError('Custom usage statistics was not provided')
	    }
	    data = {};
	    for (var browser in customStats) {
	      fillUsage(data, browser, customStats[browser]);
	    }
	  } else if (typeof stats === 'string') {
	    if (stats.length > 2) {
	      stats = stats.toLowerCase();
	    } else {
	      stats = stats.toUpperCase();
	    }
	    env.loadCountry(browserslist.usage, stats, browserslist.data);
	    data = browserslist.usage[stats];
	  } else {
	    if ('dataByBrowser' in stats) {
	      stats = stats.dataByBrowser;
	    }
	    data = {};
	    for (var name in stats) {
	      for (var version in stats[name]) {
	        data[name + ' ' + version] = stats[name][version];
	      }
	    }
	  }

	  return browsers.reduce(function (all, i) {
	    var usage = data[i];
	    if (usage === undefined) {
	      usage = data[i.replace(/ \S+$/, ' 0')];
	    }
	    return all + (usage || 0)
	  }, 0)
	};

	function nodeQuery(context, node) {
	  var matched = browserslist.nodeVersions.filter(function (i) {
	    return isVersionsMatch(i, node.version)
	  });
	  if (matched.length === 0) {
	    if (context.ignoreUnknownVersions) {
	      return []
	    } else {
	      throw new BrowserslistError(
	        'Unknown version ' + node.version + ' of Node.js'
	      )
	    }
	  }
	  return ['node ' + matched[matched.length - 1]]
	}

	function sinceQuery(context, node) {
	  var year = parseInt(node.year);
	  var month = parseInt(node.month || '01') - 1;
	  var day = parseInt(node.day || '01');
	  return filterByYear(Date.UTC(year, month, day, 0, 0, 0), context)
	}

	function coverQuery(context, node) {
	  var coverage = parseFloat(node.coverage);
	  var usage = browserslist.usage.global;
	  if (node.place) {
	    if (node.place.match(/^my\s+stats$/i)) {
	      if (!context.customUsage) {
	        throw new BrowserslistError('Custom usage statistics was not provided')
	      }
	      usage = context.customUsage;
	    } else {
	      var place;
	      if (node.place.length === 2) {
	        place = node.place.toUpperCase();
	      } else {
	        place = node.place.toLowerCase();
	      }
	      env.loadCountry(browserslist.usage, place, browserslist.data);
	      usage = browserslist.usage[place];
	    }
	  }
	  var versions = Object.keys(usage).sort(function (a, b) {
	    return usage[b] - usage[a]
	  });
	  var coveraged = 0;
	  var result = [];
	  var version;
	  for (var i = 0; i < versions.length; i++) {
	    version = versions[i];
	    if (usage[version] === 0) break
	    coveraged += usage[version];
	    result.push(version);
	    if (coveraged >= coverage) break
	  }
	  return result
	}

	var QUERIES = {
	  last_major_versions: {
	    matches: ['versions'],
	    regexp: /^last\s+(\d+)\s+major\s+versions?$/i,
	    select: function (context, node) {
	      return Object.keys(agents).reduce(function (selected, name) {
	        var data = byName(name, context);
	        if (!data) return selected
	        var list = getMajorVersions(data.released, node.versions);
	        list = list.map(nameMapper(data.name));
	        if (data.name === 'android') {
	          list = filterAndroid(list, node.versions, context);
	        }
	        return selected.concat(list)
	      }, [])
	    }
	  },
	  last_versions: {
	    matches: ['versions'],
	    regexp: /^last\s+(\d+)\s+versions?$/i,
	    select: function (context, node) {
	      return Object.keys(agents).reduce(function (selected, name) {
	        var data = byName(name, context);
	        if (!data) return selected
	        var list = data.released.slice(-node.versions);
	        list = list.map(nameMapper(data.name));
	        if (data.name === 'android') {
	          list = filterAndroid(list, node.versions, context);
	        }
	        return selected.concat(list)
	      }, [])
	    }
	  },
	  last_electron_major_versions: {
	    matches: ['versions'],
	    regexp: /^last\s+(\d+)\s+electron\s+major\s+versions?$/i,
	    select: function (context, node) {
	      var validVersions = getMajorVersions(Object.keys(e2c), node.versions);
	      return validVersions.map(function (i) {
	        return 'chrome ' + e2c[i]
	      })
	    }
	  },
	  last_node_major_versions: {
	    matches: ['versions'],
	    regexp: /^last\s+(\d+)\s+node\s+major\s+versions?$/i,
	    select: function (context, node) {
	      return getMajorVersions(browserslist.nodeVersions, node.versions).map(
	        function (version) {
	          return 'node ' + version
	        }
	      )
	    }
	  },
	  last_browser_major_versions: {
	    matches: ['versions', 'browser'],
	    regexp: /^last\s+(\d+)\s+(\w+)\s+major\s+versions?$/i,
	    select: function (context, node) {
	      var data = checkName(node.browser, context);
	      var validVersions = getMajorVersions(data.released, node.versions);
	      var list = validVersions.map(nameMapper(data.name));
	      if (data.name === 'android') {
	        list = filterAndroid(list, node.versions, context);
	      }
	      return list
	    }
	  },
	  last_electron_versions: {
	    matches: ['versions'],
	    regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
	    select: function (context, node) {
	      return Object.keys(e2c)
	        .slice(-node.versions)
	        .map(function (i) {
	          return 'chrome ' + e2c[i]
	        })
	    }
	  },
	  last_node_versions: {
	    matches: ['versions'],
	    regexp: /^last\s+(\d+)\s+node\s+versions?$/i,
	    select: function (context, node) {
	      return browserslist.nodeVersions
	        .slice(-node.versions)
	        .map(function (version) {
	          return 'node ' + version
	        })
	    }
	  },
	  last_browser_versions: {
	    matches: ['versions', 'browser'],
	    regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
	    select: function (context, node) {
	      var data = checkName(node.browser, context);
	      var list = data.released.slice(-node.versions).map(nameMapper(data.name));
	      if (data.name === 'android') {
	        list = filterAndroid(list, node.versions, context);
	      }
	      return list
	    }
	  },
	  unreleased_versions: {
	    matches: [],
	    regexp: /^unreleased\s+versions$/i,
	    select: function (context) {
	      return Object.keys(agents).reduce(function (selected, name) {
	        var data = byName(name, context);
	        if (!data) return selected
	        var list = data.versions.filter(function (v) {
	          return data.released.indexOf(v) === -1
	        });
	        list = list.map(nameMapper(data.name));
	        return selected.concat(list)
	      }, [])
	    }
	  },
	  unreleased_electron_versions: {
	    matches: [],
	    regexp: /^unreleased\s+electron\s+versions?$/i,
	    select: function () {
	      return []
	    }
	  },
	  unreleased_browser_versions: {
	    matches: ['browser'],
	    regexp: /^unreleased\s+(\w+)\s+versions?$/i,
	    select: function (context, node) {
	      var data = checkName(node.browser, context);
	      return data.versions
	        .filter(function (v) {
	          return data.released.indexOf(v) === -1
	        })
	        .map(nameMapper(data.name))
	    }
	  },
	  last_years: {
	    matches: ['years'],
	    regexp: /^last\s+(\d*.?\d+)\s+years?$/i,
	    select: function (context, node) {
	      return filterByYear(Date.now() - YEAR * node.years, context)
	    }
	  },
	  since_y: {
	    matches: ['year'],
	    regexp: /^since (\d+)$/i,
	    select: sinceQuery
	  },
	  since_y_m: {
	    matches: ['year', 'month'],
	    regexp: /^since (\d+)-(\d+)$/i,
	    select: sinceQuery
	  },
	  since_y_m_d: {
	    matches: ['year', 'month', 'day'],
	    regexp: /^since (\d+)-(\d+)-(\d+)$/i,
	    select: sinceQuery
	  },
	  popularity: {
	    matches: ['sign', 'popularity'],
	    regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%$/,
	    select: function (context, node) {
	      var popularity = parseFloat(node.popularity);
	      var usage = browserslist.usage.global;
	      return Object.keys(usage).reduce(function (result, version) {
	        if (node.sign === '>') {
	          if (usage[version] > popularity) {
	            result.push(version);
	          }
	        } else if (node.sign === '<') {
	          if (usage[version] < popularity) {
	            result.push(version);
	          }
	        } else if (node.sign === '<=') {
	          if (usage[version] <= popularity) {
	            result.push(version);
	          }
	        } else if (usage[version] >= popularity) {
	          result.push(version);
	        }
	        return result
	      }, [])
	    }
	  },
	  popularity_in_my_stats: {
	    matches: ['sign', 'popularity'],
	    regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+my\s+stats$/,
	    select: function (context, node) {
	      var popularity = parseFloat(node.popularity);
	      if (!context.customUsage) {
	        throw new BrowserslistError('Custom usage statistics was not provided')
	      }
	      var usage = context.customUsage;
	      return Object.keys(usage).reduce(function (result, version) {
	        var percentage = usage[version];
	        if (percentage == null) {
	          return result
	        }

	        if (node.sign === '>') {
	          if (percentage > popularity) {
	            result.push(version);
	          }
	        } else if (node.sign === '<') {
	          if (percentage < popularity) {
	            result.push(version);
	          }
	        } else if (node.sign === '<=') {
	          if (percentage <= popularity) {
	            result.push(version);
	          }
	        } else if (percentage >= popularity) {
	          result.push(version);
	        }
	        return result
	      }, [])
	    }
	  },
	  popularity_in_config_stats: {
	    matches: ['sign', 'popularity', 'config'],
	    regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+(\S+)\s+stats$/,
	    select: function (context, node) {
	      var popularity = parseFloat(node.popularity);
	      var stats = env.loadStat(context, node.config, browserslist.data);
	      if (stats) {
	        context.customUsage = {};
	        for (var browser in stats) {
	          fillUsage(context.customUsage, browser, stats[browser]);
	        }
	      }
	      if (!context.customUsage) {
	        throw new BrowserslistError('Custom usage statistics was not provided')
	      }
	      var usage = context.customUsage;
	      return Object.keys(usage).reduce(function (result, version) {
	        var percentage = usage[version];
	        if (percentage == null) {
	          return result
	        }

	        if (node.sign === '>') {
	          if (percentage > popularity) {
	            result.push(version);
	          }
	        } else if (node.sign === '<') {
	          if (percentage < popularity) {
	            result.push(version);
	          }
	        } else if (node.sign === '<=') {
	          if (percentage <= popularity) {
	            result.push(version);
	          }
	        } else if (percentage >= popularity) {
	          result.push(version);
	        }
	        return result
	      }, [])
	    }
	  },
	  popularity_in_place: {
	    matches: ['sign', 'popularity', 'place'],
	    regexp: /^(>=?|<=?)\s*(\d+|\d+\.\d+|\.\d+)%\s+in\s+((alt-)?\w\w)$/,
	    select: function (context, node) {
	      var popularity = parseFloat(node.popularity);
	      var place = node.place;
	      if (place.length === 2) {
	        place = place.toUpperCase();
	      } else {
	        place = place.toLowerCase();
	      }
	      env.loadCountry(browserslist.usage, place, browserslist.data);
	      var usage = browserslist.usage[place];
	      return Object.keys(usage).reduce(function (result, version) {
	        var percentage = usage[version];
	        if (percentage == null) {
	          return result
	        }

	        if (node.sign === '>') {
	          if (percentage > popularity) {
	            result.push(version);
	          }
	        } else if (node.sign === '<') {
	          if (percentage < popularity) {
	            result.push(version);
	          }
	        } else if (node.sign === '<=') {
	          if (percentage <= popularity) {
	            result.push(version);
	          }
	        } else if (percentage >= popularity) {
	          result.push(version);
	        }
	        return result
	      }, [])
	    }
	  },
	  cover: {
	    matches: ['coverage'],
	    regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%$/i,
	    select: coverQuery
	  },
	  cover_in: {
	    matches: ['coverage', 'place'],
	    regexp: /^cover\s+(\d+|\d+\.\d+|\.\d+)%\s+in\s+(my\s+stats|(alt-)?\w\w)$/i,
	    select: coverQuery
	  },
	  supports: {
	    matches: ['feature'],
	    regexp: /^supports\s+([\w-]+)$/,
	    select: function (context, node) {
	      env.loadFeature(browserslist.cache, node.feature);
	      var features = browserslist.cache[node.feature];
	      return Object.keys(features).reduce(function (result, version) {
	        var flags = features[version];
	        if (flags.indexOf('y') >= 0 || flags.indexOf('a') >= 0) {
	          result.push(version);
	        }
	        return result
	      }, [])
	    }
	  },
	  electron_range: {
	    matches: ['from', 'to'],
	    regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
	    select: function (context, node) {
	      var fromToUse = normalizeElectron(node.from);
	      var toToUse = normalizeElectron(node.to);
	      var from = parseFloat(node.from);
	      var to = parseFloat(node.to);
	      if (!e2c[fromToUse]) {
	        throw new BrowserslistError('Unknown version ' + from + ' of electron')
	      }
	      if (!e2c[toToUse]) {
	        throw new BrowserslistError('Unknown version ' + to + ' of electron')
	      }
	      return Object.keys(e2c)
	        .filter(function (i) {
	          var parsed = parseFloat(i);
	          return parsed >= from && parsed <= to
	        })
	        .map(function (i) {
	          return 'chrome ' + e2c[i]
	        })
	    }
	  },
	  node_range: {
	    matches: ['from', 'to'],
	    regexp: /^node\s+([\d.]+)\s*-\s*([\d.]+)$/i,
	    select: function (context, node) {
	      return browserslist.nodeVersions
	        .filter(semverFilterLoose('>=', node.from))
	        .filter(semverFilterLoose('<=', node.to))
	        .map(function (v) {
	          return 'node ' + v
	        })
	    }
	  },
	  browser_range: {
	    matches: ['browser', 'from', 'to'],
	    regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
	    select: function (context, node) {
	      var data = checkName(node.browser, context);
	      var from = parseFloat(normalizeVersion(data, node.from) || node.from);
	      var to = parseFloat(normalizeVersion(data, node.to) || node.to);
	      function filter(v) {
	        var parsed = parseFloat(v);
	        return parsed >= from && parsed <= to
	      }
	      return data.released.filter(filter).map(nameMapper(data.name))
	    }
	  },
	  electron_ray: {
	    matches: ['sign', 'version'],
	    regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
	    select: function (context, node) {
	      var versionToUse = normalizeElectron(node.version);
	      return Object.keys(e2c)
	        .filter(generateFilter(node.sign, versionToUse))
	        .map(function (i) {
	          return 'chrome ' + e2c[i]
	        })
	    }
	  },
	  node_ray: {
	    matches: ['sign', 'version'],
	    regexp: /^node\s*(>=?|<=?)\s*([\d.]+)$/i,
	    select: function (context, node) {
	      return browserslist.nodeVersions
	        .filter(generateSemverFilter(node.sign, node.version))
	        .map(function (v) {
	          return 'node ' + v
	        })
	    }
	  },
	  browser_ray: {
	    matches: ['browser', 'sign', 'version'],
	    regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
	    select: function (context, node) {
	      var version = node.version;
	      var data = checkName(node.browser, context);
	      var alias = browserslist.versionAliases[data.name][version];
	      if (alias) version = alias;
	      return data.released
	        .filter(generateFilter(node.sign, version))
	        .map(function (v) {
	          return data.name + ' ' + v
	        })
	    }
	  },
	  firefox_esr: {
	    matches: [],
	    regexp: /^(firefox|ff|fx)\s+esr$/i,
	    select: function () {
	      return ['firefox 102']
	    }
	  },
	  opera_mini_all: {
	    matches: [],
	    regexp: /(operamini|op_mini)\s+all/i,
	    select: function () {
	      return ['op_mini all']
	    }
	  },
	  electron_version: {
	    matches: ['version'],
	    regexp: /^electron\s+([\d.]+)$/i,
	    select: function (context, node) {
	      var versionToUse = normalizeElectron(node.version);
	      var chrome = e2c[versionToUse];
	      if (!chrome) {
	        throw new BrowserslistError(
	          'Unknown version ' + node.version + ' of electron'
	        )
	      }
	      return ['chrome ' + chrome]
	    }
	  },
	  node_major_version: {
	    matches: ['version'],
	    regexp: /^node\s+(\d+)$/i,
	    select: nodeQuery
	  },
	  node_minor_version: {
	    matches: ['version'],
	    regexp: /^node\s+(\d+\.\d+)$/i,
	    select: nodeQuery
	  },
	  node_patch_version: {
	    matches: ['version'],
	    regexp: /^node\s+(\d+\.\d+\.\d+)$/i,
	    select: nodeQuery
	  },
	  current_node: {
	    matches: [],
	    regexp: /^current\s+node$/i,
	    select: function (context) {
	      return [env.currentNode(resolve, context)]
	    }
	  },
	  maintained_node: {
	    matches: [],
	    regexp: /^maintained\s+node\s+versions$/i,
	    select: function (context) {
	      var now = Date.now();
	      var queries = Object.keys(jsEOL)
	        .filter(function (key) {
	          return (
	            now < Date.parse(jsEOL[key].end) &&
	            now > Date.parse(jsEOL[key].start) &&
	            isEolReleased(key)
	          )
	        })
	        .map(function (key) {
	          return 'node ' + key.slice(1)
	        });
	      return resolve(queries, context)
	    }
	  },
	  phantomjs_1_9: {
	    matches: [],
	    regexp: /^phantomjs\s+1.9$/i,
	    select: function () {
	      return ['safari 5']
	    }
	  },
	  phantomjs_2_1: {
	    matches: [],
	    regexp: /^phantomjs\s+2.1$/i,
	    select: function () {
	      return ['safari 6']
	    }
	  },
	  browser_version: {
	    matches: ['browser', 'version'],
	    regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
	    select: function (context, node) {
	      var version = node.version;
	      if (/^tp$/i.test(version)) version = 'TP';
	      var data = checkName(node.browser, context);
	      var alias = normalizeVersion(data, version);
	      if (alias) {
	        version = alias;
	      } else {
	        if (version.indexOf('.') === -1) {
	          alias = version + '.0';
	        } else {
	          alias = version.replace(/\.0$/, '');
	        }
	        alias = normalizeVersion(data, alias);
	        if (alias) {
	          version = alias;
	        } else if (context.ignoreUnknownVersions) {
	          return []
	        } else {
	          throw new BrowserslistError(
	            'Unknown version ' + version + ' of ' + node.browser
	          )
	        }
	      }
	      return [data.name + ' ' + version]
	    }
	  },
	  browserslist_config: {
	    matches: [],
	    regexp: /^browserslist config$/i,
	    select: function (context) {
	      return browserslist(undefined, context)
	    }
	  },
	  extends: {
	    matches: ['config'],
	    regexp: /^extends (.+)$/i,
	    select: function (context, node) {
	      return resolve(env.loadQueries(context, node.config), context)
	    }
	  },
	  defaults: {
	    matches: [],
	    regexp: /^defaults$/i,
	    select: function (context) {
	      return resolve(browserslist.defaults, context)
	    }
	  },
	  dead: {
	    matches: [],
	    regexp: /^dead$/i,
	    select: function (context) {
	      var dead = [
	        'Baidu >= 0',
	        'ie <= 11',
	        'ie_mob <= 11',
	        'bb <= 10',
	        'op_mob <= 12.1',
	        'samsung 4'
	      ];
	      return resolve(dead, context)
	    }
	  },
	  unknown: {
	    matches: [],
	    regexp: /^(\w+)$/i,
	    select: function (context, node) {
	      if (byName(node.query, context)) {
	        throw new BrowserslistError(
	          'Specify versions in Browserslist query for browser ' + node.query
	        )
	      } else {
	        throw unknownQuery(node.query)
	      }
	    }
	  }
	}

	// Get and convert Can I Use data

	;(function () {
	  for (var name in agents) {
	    var browser = agents[name];
	    browserslist.data[name] = {
	      name: name,
	      versions: normalize(agents[name].versions),
	      released: normalize(agents[name].versions.slice(0, -3)),
	      releaseDate: agents[name].release_date
	    };
	    fillUsage(browserslist.usage.global, name, browser.usage_global);

	    browserslist.versionAliases[name] = {};
	    for (var i = 0; i < browser.versions.length; i++) {
	      var full = browser.versions[i];
	      if (!full) continue

	      if (full.indexOf('-') !== -1) {
	        var interval = full.split('-');
	        for (var j = 0; j < interval.length; j++) {
	          browserslist.versionAliases[name][interval[j]] = full;
	        }
	      }
	    }
	  }

	  browserslist.versionAliases.op_mob['59'] = '58';

	  browserslist.nodeVersions = jsReleases.map(function (release) {
	    return release.version
	  });
	})();

	browserslist_1 = browserslist;
	return browserslist_1;
}

var hasRequiredPlugin;

function requirePlugin () {
	if (hasRequiredPlugin) return pluginExports;
	hasRequiredPlugin = 1;
	Object.defineProperty(pluginExports, "__esModule", {
	    value: true
	});
	const _setupTrackingContext = /*#__PURE__*/ _interopRequireDefault(requireSetupTrackingContext());
	const _processTailwindFeatures = /*#__PURE__*/ _interopRequireDefault(requireProcessTailwindFeatures());
	const _sharedState = requireSharedState();
	const _findAtConfigPath = requireFindAtConfigPath();
	function _interopRequireDefault(obj) {
	    return obj && obj.__esModule ? obj : {
	        default: obj
	    };
	}
	plugin.exports = function tailwindcss(configOrPath) {
	    return {
	        postcssPlugin: "tailwindcss",
	        plugins: [
	            _sharedState.env.DEBUG && function(root) {
	                console.log("\n");
	                console.time("JIT TOTAL");
	                return root;
	            },
	            function(root, result) {
	                var _findAtConfigPath1;
	                // Use the path for the `@config` directive if it exists, otherwise use the
	                // path for the file being processed
	                configOrPath = (_findAtConfigPath1 = (0, _findAtConfigPath.findAtConfigPath)(root, result)) !== null && _findAtConfigPath1 !== void 0 ? _findAtConfigPath1 : configOrPath;
	                let context = (0, _setupTrackingContext.default)(configOrPath);
	                if (root.type === "document") {
	                    let roots = root.nodes.filter((node)=>node.type === "root");
	                    for (const root1 of roots){
	                        if (root1.type === "root") {
	                            (0, _processTailwindFeatures.default)(context)(root1, result);
	                        }
	                    }
	                    return;
	                }
	                (0, _processTailwindFeatures.default)(context)(root, result);
	            },
	            _sharedState.env.OXIDE && function lightningCssPlugin(_root, result) {
	                let postcss = requirePostcss();
	                let lightningcss = require$$5;
	                let browserslist = requireBrowserslist();
	                try {
	                    let transformed = lightningcss.transform({
	                        filename: result.opts.from,
	                        code: Buffer.from(result.root.toString()),
	                        minify: false,
	                        sourceMap: !!result.map,
	                        inputSourceMap: result.map ? result.map.toString() : undefined,
	                        targets: typeof process !== "undefined" && ({}).JEST_WORKER_ID ? {
	                            chrome: 106 << 16
	                        } : lightningcss.browserslistToTargets(browserslist(require$$7.browserslist)),
	                        drafts: {
	                            nesting: true,
	                            customMedia: true
	                        }
	                    });
	                    var _result_map;
	                    result.map = Object.assign((_result_map = result.map) !== null && _result_map !== void 0 ? _result_map : {}, {
	                        toJSON () {
	                            return transformed.map.toJSON();
	                        },
	                        toString () {
	                            return transformed.map.toString();
	                        }
	                    });
	                    result.root = postcss.parse(transformed.code.toString("utf8"));
	                } catch (err) {
	                    if (typeof process !== "undefined" && ({}).JEST_WORKER_ID) {
	                        let lines = err.source.split("\n");
	                        err = new Error([
	                            "Error formatting using Lightning CSS:",
	                            "",
	                            ...[
	                                "```css",
	                                ...lines.slice(Math.max(err.loc.line - 3, 0), err.loc.line),
	                                " ".repeat(err.loc.column - 1) + "^-- " + err.toString(),
	                                ...lines.slice(err.loc.line, err.loc.line + 2),
	                                "```"
	                            ]
	                        ].join("\n"));
	                    }
	                    if (Error.captureStackTrace) {
	                        Error.captureStackTrace(err, lightningCssPlugin);
	                    }
	                    throw err;
	                }
	            },
	            _sharedState.env.DEBUG && function(root) {
	                console.timeEnd("JIT TOTAL");
	                console.log("\n");
	                return root;
	            }
	        ].filter(Boolean)
	    };
	};
	pluginExports.postcss = true;
	return pluginExports;
}

var hasRequiredPostcssPlugin;

function requirePostcssPlugin () {
	if (hasRequiredPostcssPlugin) return postcssPluginExports;
	hasRequiredPostcssPlugin = 1;
	(function (module) {
		module.exports = requirePlugin();
} (postcssPlugin));
	return postcssPluginExports;
}

(function (module) {
	if (({}).OXIDE) {
	    module.exports = requirePostcssPlugin();
	} else {
	    module.exports = requirePlugin();
	}
} (lib$2));

const index = /*@__PURE__*/getDefaultExportFromCjs(libExports);

export { index as default };
